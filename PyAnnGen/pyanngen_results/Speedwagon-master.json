{
    "Speedwagon-master/setup.py": {},
    "Speedwagon-master/docs/source/conf.py": {
        "get_project_metadata": {
            "name": "get_project_metadata",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/docs/source/exts/workflowssummary.py": {
        "setup": {
            "name": "setup",
            "location": 137,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "AutoWorkflowDirective.run": {
            "name": "run",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowMetadataListDirective.run": {
            "name": "run",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowMetadataListDirective.new_workflow_entry_section": {
            "name": "new_workflow_entry_section",
            "location": 120,
            "return": [
                "int",
                "float",
                "List[int]",
                "str",
                "bool",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "ids": [
                    "int",
                    "List",
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/features/steps/toolOptionModel.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int",
                    "behave.runner.Context",
                    "Dict[str,list]",
                    "str",
                    "Dict",
                    "T",
                    "Dict[str,List]",
                    "PyQt5.QtCore.QModelIndex"
                ]
            }
        }
    },
    "Speedwagon-master/features/steps/toolOptionModel3.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "behave.runner.Context",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "Speedwagon-master/packaging/create_osx_app_bundle.py": {
        "package": {
            "name": "package",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "specs_file": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "dest": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "only_workflows": {
            "name": "only_workflows",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_workflow_modules": {
            "name": "get_workflow_modules",
            "location": 77,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List]",
                    "List"
                ],
                "src": [
                    "str",
                    "os.PathLike",
                    "bool",
                    "Optional[List]"
                ]
            }
        },
        "create_hook_file": {
            "name": "create_hook_file",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "package_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "output_path": [
                    "str"
                ],
                "hook_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "get_default_cpack_data": {
            "name": "get_default_cpack_data",
            "location": 121,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, str)])])]"
            ],
            "arguments": {}
        },
        "write_cpack_config_file": {
            "name": "write_cpack_config_file",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "source_app": [
                    "str"
                ],
                "destination_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "package_metadata": [
                    "str"
                ]
            }
        },
        "run_cpack": {
            "name": "run_cpack",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "build_path": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "HookGenerator.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "HookGenerator.add_hidden_import": {
            "name": "add_hidden_import",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[float]",
                    "Dict[str,bool]",
                    "bytes"
                ]
            }
        },
        "HookGenerator.write": {
            "name": "write",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/packaging/hook-hathi_validate.py": {},
    "Speedwagon-master/packaging/hook-speedwagon.py": {},
    "Speedwagon-master/packaging/speedwagon-bootstrap.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/speedwagon/config.py": {
        "generate_default": {
            "name": "generate_default",
            "location": 164,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "configparser.RawConfigParser",
                    "int",
                    "Callable[[str], None]"
                ]
            }
        },
        "get_platform_settings": {
            "name": "get_platform_settings",
            "location": 190,
            "return": [
                "Union[(NixConfig, WindowsConfig, _T0)]"
            ],
            "arguments": {
                "configuration": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "find_missing_global_entries": {
            "name": "find_missing_global_entries",
            "location": 209,
            "return": [
                "Optional[set]"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "bytes"
                ],
                "expected_keys": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int",
                    "float",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "ensure_keys": {
            "name": "ensure_keys",
            "location": 236,
            "return": [
                "Optional[set]"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Optional[str]"
                ],
                "keys": [
                    "bool",
                    "Sequence[str]",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ensure_settings_files": {
            "name": "ensure_settings_files",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "starter": [
                    "Optional[str]",
                    "str"
                ],
                "logger": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ],
                "strategy": [
                    "str",
                    "None"
                ]
            }
        },
        "AbsConfig.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsConfig.get_user_data_directory": {
            "name": "get_user_data_directory",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsConfig.get_app_data_directory": {
            "name": "get_app_data_directory",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsConfig.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsConfig.__iter__": {
            "name": "__iter__",
            "location": 55,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsConfig.__contains__": {
            "name": "__contains__",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "Dict[str, float]",
                    "Mapping[str, float]",
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbsConfig.__getitem__": {
            "name": "__getitem__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "NixConfig.get_user_data_directory": {
            "name": "get_user_data_directory",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixConfig.get_app_data_directory": {
            "name": "get_app_data_directory",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NixConfig._get_app_dir": {
            "name": "_get_app_dir",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "WindowsConfig.get_user_data_directory": {
            "name": "get_user_data_directory",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsConfig.get_app_data_directory": {
            "name": "get_app_data_directory",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigManager.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "ConfigManager.__enter__": {
            "name": "__enter__",
            "location": 129,
            "return": [
                "ConfigManager"
            ],
            "arguments": {
                "self": [
                    "_TConfigManager@@ConfigManager@@"
                ]
            }
        },
        "ConfigManager.__exit__": {
            "name": "__exit__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exctype": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "excinst": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "exctb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ConfigManager.global_settings": {
            "name": "global_settings",
            "location": 142,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSetting.friendly_name": {
            "name": "friendly_name",
            "location": 271,
            "return": [
                "NotImplementedError",
                "Callable[[Union,Union],Tuple[Any,...],]",
                "Union[int,float]"
            ],
            "arguments": {}
        },
        "AbsSetting.update": {
            "name": "update",
            "location": 274,
            "return": [
                "Union[(Dict[(nothing, nothing)], _T0)]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "None",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "DefaultsSetter.update": {
            "name": "update",
            "location": 286,
            "return": [
                "Union[(Dict[(str, bool)], _T0)]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,Set]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Union[bool,int,str]"
                ]
            }
        },
        "ConfigFileSetter.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "ConfigFileSetter.update": {
            "name": "update",
            "location": 302,
            "return": [
                "Union[(dict, _T0)]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,Set]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Union[bool,int,str]"
                ]
            }
        },
        "CliArgsSetter.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "None"
                ]
            }
        },
        "CliArgsSetter.update": {
            "name": "update",
            "location": 321,
            "return": [
                "Union[(Dict[(str, Any)], _T0)]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,Set]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Union[bool,int,str]"
                ]
            }
        },
        "CliArgsSetter.get_arg_parser": {
            "name": "get_arg_parser",
            "location": 337,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "CliArgsSetter._parse_args": {
            "name": "_parse_args",
            "location": 378,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": []
            }
        },
        "ConfigLoader.read_settings_file": {
            "name": "read_settings_file",
            "location": 386,
            "return": [
                "dict"
            ],
            "arguments": {
                "settings_file": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "ConfigLoader.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "ConfigLoader._resolve": {
            "name": "_resolve",
            "location": 399,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resolution_strategy_order": [
                    "bool",
                    "float",
                    "List[int]",
                    "Callable[[], None]"
                ],
                "config_file": [
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "starting_settings": [
                    "int",
                    "tuple",
                    "str",
                    "Optional[List[Any]]"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "Optional[float]"
                ]
            }
        },
        "ConfigLoader.get_settings": {
            "name": "get_settings",
            "location": 426,
            "return": [
                "Mapping[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEnsureConfigFile.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Tuple[Tuple[str,...]]",
                    "pathlib.Path"
                ]
            }
        },
        "AbsEnsureConfigFile.ensure_config_file": {
            "name": "ensure_config_file",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "None",
                    "pathlib.Path",
                    "bool",
                    "str"
                ]
            }
        },
        "AbsEnsureConfigFile.ensure_user_data_dir": {
            "name": "ensure_user_data_dir",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "List[Tuple]",
                    "List[dict]",
                    "bytes",
                    "int"
                ]
            }
        },
        "AbsEnsureConfigFile.ensure_tabs_file": {
            "name": "ensure_tabs_file",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "None",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "AbsEnsureConfigFile.ensure_app_data_dir": {
            "name": "ensure_app_data_dir",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "CreateBasicMissingConfigFile.__init__": {
            "name": "__init__",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "logger": [
                    "None"
                ]
            }
        },
        "CreateBasicMissingConfigFile.ensure_config_file": {
            "name": "ensure_config_file",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "CreateBasicMissingConfigFile.ensure_tabs_file": {
            "name": "ensure_tabs_file",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "CreateBasicMissingConfigFile.ensure_user_data_dir": {
            "name": "ensure_user_data_dir",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None",
                    "str",
                    "path.Path"
                ]
            }
        },
        "CreateBasicMissingConfigFile.ensure_app_data_dir": {
            "name": "ensure_app_data_dir",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None",
                    "Optional[str]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "AbsOpenSettings.__init__": {
            "name": "__init__",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "AbsOpenSettings.system_open_directory": {
            "name": "system_open_directory",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "bool",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "AbsOpenSettings.open": {
            "name": "open",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarwinOpenSettings.system_open_directory": {
            "name": "system_open_directory",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "WindowsOpenSettings.system_open_directory": {
            "name": "system_open_directory",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "bool",
                    "str",
                    "int",
                    "Optional[opentrons.types.Location]"
                ]
            }
        },
        "OpenSettingsDirectory.__init__": {
            "name": "__init__",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "OpenSettingsDirectory.system_open_directory": {
            "name": "system_open_directory",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "OpenSettingsDirectory.open": {
            "name": "open",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/exceptions.py": {
        "JobCancelled.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/job.py": {
        "available_workflows": {
            "name": "available_workflows",
            "location": 283,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "all_required_workflow_keys": {
            "name": "all_required_workflow_keys",
            "location": 297,
            "return": [
                "set"
            ],
            "arguments": {
                "workflows": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "AbsWorkflow.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 53,
            "return": [
                "List[dict]",
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "AbsWorkflow.completion_task": {
            "name": "completion_task",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "tasks.TaskBuilder",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "results": [
                    "tasks.TaskBuilder",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "AbsWorkflow.initial_task": {
            "name": "initial_task",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "tasks.TaskBuilder",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbsWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "tasks.TaskBuilder",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "AbsWorkflow.generate_report": {
            "name": "generate_report",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "int",
                    "dict",
                    "Union[Callable, Type]"
                ],
                "results": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "int",
                    "dict",
                    "Union[Callable, Type]"
                ]
            }
        },
        "AbsWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Workflow.get_additional_info": {
            "name": "get_additional_info",
            "location": 165,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "user_request_factory": [
                    "bool",
                    "str",
                    "Dict[str, str]"
                ],
                "options": [
                    "bool",
                    "str",
                    "Dict[str, str]"
                ],
                "pretask_results": [
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Workflow.get_user_options": {
            "name": "get_user_options",
            "location": 187,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 203,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "AbsDynamicFinder.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AbsDynamicFinder.py_module_filter": {
            "name": "py_module_filter",
            "location": 219,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "item": [
                    "os.DirEntry",
                    "Iterable[T]",
                    "list",
                    "dict",
                    "Iterable[Any]"
                ]
            }
        },
        "AbsDynamicFinder.locate": {
            "name": "locate",
            "location": 222,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsDynamicFinder.base_class": {
            "name": "base_class",
            "location": 234,
            "return": [
                "Type[AbsWorkflow]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsDynamicFinder.load": {
            "name": "load",
            "location": 237,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "module_file": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "AbsDynamicFinder.package_name": {
            "name": "package_name",
            "location": 263,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowFinder.py_module_filter": {
            "name": "py_module_filter",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "List[T]",
                    "T"
                ]
            }
        },
        "WorkflowFinder.package_name": {
            "name": "package_name",
            "location": 274,
            "return": [
                "Text",
                "str",
                "List[Dict[str,Any]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowFinder.base_class": {
            "name": "base_class",
            "location": 278,
            "return": [
                "AbsWorkflow",
                "int",
                "bool",
                "Callable[...,T]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobConfigSerializationStrategy.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobConfigSerializationStrategy.save": {
            "name": "save",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "Iterator[int]",
                    "bytes"
                ],
                "data": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "Iterator[int]",
                    "bytes"
                ]
            }
        },
        "AbsJobConfigSerializationStrategy.load": {
            "name": "load",
            "location": 329,
            "return": [
                "Tuple[str,Dict[str,Any]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobConfigSerialization.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JobConfigSerialization.save": {
            "name": "save",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "dict"
                ],
                "data": [
                    "str",
                    "dict"
                ]
            }
        },
        "JobConfigSerialization.load": {
            "name": "load",
            "location": 342,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigJSONSerialize.save": {
            "name": "save",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "data": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "ConfigJSONSerialize.serialize_data": {
            "name": "serialize_data",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "data": [
                    "str",
                    "int"
                ]
            }
        },
        "ConfigJSONSerialize.deserialize_data": {
            "name": "deserialize_data",
            "location": 369,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "ConfigJSONSerialize.load": {
            "name": "load",
            "location": 374,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsDynamicFinder.load.class_member_filter": {
            "name": "class_member_filter",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "dict"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/reports.py": {
        "add_report_borders": {
            "name": "add_report_borders",
            "location": 7,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "add_report_borders.wrapper": {
            "name": "wrapper",
            "location": 12,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/speedwagon/runner.py": {
        "AbsRunner2.run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Dict",
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "options": [
                    "Dict",
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "logger": [
                    "Dict",
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "completion_callback": [
                    "Dict",
                    "None",
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/runner_strategies.py": {
        "simple_api_run_workflow": {
            "name": "simple_api_run_workflow",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "workflow": [
                    "bool",
                    "dict",
                    "tuple",
                    "Tuple[int, int]"
                ],
                "workflow_options": [
                    "bool",
                    "dict",
                    "tuple",
                    "Tuple[int, int]"
                ],
                "logger": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "Tuple[str,str]"
                ],
                "request_factory": [
                    "None",
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Sequence[int]]"
                ]
            }
        },
        "AbsEvents.stop": {
            "name": "stop",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEvents.is_done": {
            "name": "is_done",
            "location": 44,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEvents.is_stopped": {
            "name": "is_stopped",
            "location": 48,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsEvents.done": {
            "name": "done",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobCallbacks.error": {
            "name": "error",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ],
                "exc": [
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ],
                "traceback_string": [
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbsJobCallbacks.status": {
            "name": "status",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "AbsJobCallbacks.log": {
            "name": "log",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "level": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "AbsJobCallbacks.start": {
            "name": "start",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobCallbacks.refresh": {
            "name": "refresh",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobCallbacks.cancelling_complete": {
            "name": "cancelling_complete",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobCallbacks.finished": {
            "name": "finished",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "AbsJobCallbacks.update_progress": {
            "name": "update_progress",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "total": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "RunRunner.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "RunRunner.run": {
            "name": "run",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tool": [
                    "bool",
                    "str",
                    "Type[BaseException]"
                ],
                "options": [
                    "bool",
                    "str",
                    "Type[BaseException]"
                ],
                "logger": [
                    "bool",
                    "str",
                    "Type[BaseException]"
                ],
                "completion_callback": [
                    "None",
                    "bool",
                    "str",
                    "Type[BaseException]"
                ]
            }
        },
        "TaskGenerator.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "dict",
                    "bytes",
                    "str"
                ],
                "options": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "working_directory": [
                    "bool",
                    "int",
                    "Hashable",
                    "str",
                    "dict",
                    "List[str]"
                ],
                "caller": [
                    "None",
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "List[Dict[str,Any]]",
                    "List",
                    "Dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "TaskGenerator.generate_report": {
            "name": "generate_report",
            "location": 136,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "TaskGenerator.tasks": {
            "name": "tasks",
            "location": 141,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGenerator.get_pre_tasks": {
            "name": "get_pre_tasks",
            "location": 177,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TaskGenerator.get_main_tasks": {
            "name": "get_main_tasks",
            "location": 190,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "Dict[str, Any]",
                    "dict",
                    "Union[bool, int, str]",
                    "MutableMapping[str, Any]",
                    "bool"
                ],
                "pretask_results": [
                    "str",
                    "bool"
                ],
                "additional_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "TaskGenerator.get_post_tasks": {
            "name": "get_post_tasks",
            "location": 220,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "dict"
                ],
                "results": [
                    "str",
                    "core.types.FBAccessToken"
                ]
            }
        },
        "AbsTaskDispatcherState.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 236,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "AbsTaskDispatcherState.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "AbsTaskDispatcherState.active": {
            "name": "active",
            "location": 248,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTaskDispatcherState.stop": {
            "name": "stop",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTaskDispatcherState.start": {
            "name": "start",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherIdle.active": {
            "name": "active",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherIdle.stop": {
            "name": "stop",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherIdle.start": {
            "name": "start",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherRunning.run_thread": {
            "name": "run_thread",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherRunning.processing_process": {
            "name": "processing_process",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_event": [
                    "str",
                    "int",
                    "bool"
                ],
                "job_finished_event": [
                    "str",
                    "int"
                ]
            }
        },
        "TaskDispatcherRunning.active": {
            "name": "active",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherRunning.stop": {
            "name": "stop",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherRunning.start": {
            "name": "start",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherStopping.halt_dispatching": {
            "name": "halt_dispatching",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherStopping.active": {
            "name": "active",
            "location": 356,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherStopping.stop": {
            "name": "stop",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcherStopping.start": {
            "name": "start",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcher.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_queue": [
                    "int",
                    "bool",
                    "Mapping[str, str]",
                    "trio.abc.ReceiveChannel"
                ],
                "logger": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Tuple[Tuple[str,...]]"
                ]
            }
        },
        "TaskDispatcher.active": {
            "name": "active",
            "location": 389,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcher.stop": {
            "name": "stop",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDispatcher.__enter__": {
            "name": "__enter__",
            "location": 397,
            "return": [
                "TaskDispatcher"
            ],
            "arguments": {
                "self": [
                    "_TTaskDispatcher@@TaskDispatcher@@"
                ]
            }
        },
        "TaskDispatcher.__exit__": {
            "name": "__exit__",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "TaskDispatcher.start": {
            "name": "start",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskScheduler.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "int",
                    "Iterable[T]",
                    "Optional[Any]"
                ]
            }
        },
        "TaskScheduler.request_more_info": {
            "name": "request_more_info",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TaskScheduler.iter_tasks": {
            "name": "iter_tasks",
            "location": 446,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "options": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ]
            }
        },
        "TaskScheduler.run_workflow_jobs": {
            "name": "run_workflow_jobs",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "str",
                    "int"
                ],
                "options": [
                    "bool",
                    "str",
                    "int"
                ],
                "reporter": [
                    "None",
                    "Optional[str]",
                    "web3.types.TxReceipt",
                    "int",
                    "bool",
                    "Dict[str,LabwareDefinition]"
                ]
            }
        },
        "TaskScheduler.run": {
            "name": "run",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Mapping[str, Any]"
                ],
                "options": [
                    "str",
                    "exporwiki.types.BiomeZoneVolume",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[dict]"
                ]
            }
        },
        "AbsJobManager2.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobManager2.submit_job": {
            "name": "submit_job",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "Optional[str]",
                    "Literal",
                    "Optional[bool]",
                    "bool"
                ],
                "app": [
                    "str",
                    "Optional[str]",
                    "Literal",
                    "Optional[bool]",
                    "bool"
                ],
                "liaison": [
                    "str",
                    "Optional[str]",
                    "Literal",
                    "Optional[bool]",
                    "bool"
                ],
                "options": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Literal",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Run.__init__": {
            "name": "__init__",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "bool",
                    "List[int]",
                    "asyncworker.types.registry.TypesRegistry"
                ]
            }
        },
        "Run.get_workflow": {
            "name": "get_workflow",
            "location": 575,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "BackgroundJobManager.__init__": {
            "name": "__init__",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackgroundJobManager.__enter__": {
            "name": "__enter__",
            "location": 601,
            "return": [
                "BackgroundJobManager"
            ],
            "arguments": {
                "self": [
                    "_TBackgroundJobManager@@BackgroundJobManager@@"
                ]
            }
        },
        "BackgroundJobManager.run_job_on_thread": {
            "name": "run_job_on_thread",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "dict"
                ],
                "options": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "liaison": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "BackgroundJobManager.__exit__": {
            "name": "__exit__",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback_": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "BackgroundJobManager.clean_up_thread": {
            "name": "clean_up_thread",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackgroundJobManager.submit_job": {
            "name": "submit_job",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "Union[List[str], str]"
                ],
                "app": [
                    "str",
                    "Optional[str]",
                    "Literal",
                    "Optional[bool]",
                    "bool"
                ],
                "liaison": [
                    "str",
                    "Union[List[str], str]"
                ],
                "options": [
                    "None",
                    "str",
                    "Union[List[str],str]"
                ]
            }
        },
        "ThreadedEvents.__init__": {
            "name": "__init__",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedEvents.done": {
            "name": "done",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedEvents.stop": {
            "name": "stop",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedEvents.is_stopped": {
            "name": "is_stopped",
            "location": 727,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedEvents.has_started": {
            "name": "has_started",
            "location": 730,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedEvents.is_done": {
            "name": "is_done",
            "location": 733,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowNullCallbacks.error": {
            "name": "error",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ],
                "exc": [
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ],
                "traceback_string": [
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "WorkflowNullCallbacks.status": {
            "name": "status",
            "location": 805,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WorkflowNullCallbacks.log": {
            "name": "log",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "level": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "WorkflowNullCallbacks.cancelling_complete": {
            "name": "cancelling_complete",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowNullCallbacks.finished": {
            "name": "finished",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "simple_api_run_workflow.request_more_info": {
            "name": "request_more_info",
            "location": 767,
            "return": [],
            "arguments": {
                "workflow": [],
                "options": [],
                "pretask_results": []
            }
        }
    },
    "Speedwagon-master/speedwagon/startup.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 52,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "get_custom_tabs": {
            "name": "get_custom_tabs",
            "location": 149,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "all_workflows": [
                    "str",
                    "Optional[str]",
                    "io.BytesIO",
                    "bool"
                ],
                "yaml_file": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_global_options": {
            "name": "get_global_options",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "run_command": {
            "name": "run_command",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "command_name": [
                    "str"
                ],
                "args": [],
                "command": [
                    "None",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "None",
                    "List[str]",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "CustomTabsFileReader.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_workflows": [
                    "int",
                    "bytes"
                ]
            }
        },
        "CustomTabsFileReader.read_yml_file": {
            "name": "read_yml_file",
            "location": 72,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "yaml_file": [
                    "str",
                    "Set[str]",
                    "BinaryIO"
                ]
            }
        },
        "CustomTabsFileReader._get_tab_items": {
            "name": "_get_tab_items",
            "location": 82,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "tab": [
                    "str",
                    "bool"
                ],
                "tab_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CustomTabsFileReader.load_custom_tabs": {
            "name": "load_custom_tabs",
            "location": 99,
            "return": [
                "Generator[(Tuple[(str, Dict[(str, Any)])], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "yaml_file": [
                    "str",
                    "Union[str, os.PathLike]"
                ]
            }
        },
        "ApplicationLauncher.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "None",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ApplicationLauncher.initialize": {
            "name": "initialize",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationLauncher.run": {
            "name": "run",
            "location": 223,
            "return": [
                "Awaitable",
                "Dict[str, Optional[BaseException]]",
                "Awaitable[Any]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "None",
                    "List",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "SubCommand.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SubCommand.run": {
            "name": "run",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunCommand.json_startup": {
            "name": "json_startup",
            "location": 248,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunCommand._run_strategy": {
            "name": "_run_strategy",
            "location": 261,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "startup_strategy": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "RunCommand.run": {
            "name": "run",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsStarter.run": {
            "name": "run",
            "location": 311,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsStarter.initialize": {
            "name": "initialize",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleWorkflowJSON.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleWorkflowJSON.run": {
            "name": "run",
            "location": 325,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleWorkflowJSON.load": {
            "name": "load",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_pointer": [
                    "str",
                    "bool"
                ]
            }
        },
        "SingleWorkflowJSON._set_workflow": {
            "name": "_set_workflow",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "List[Dict[str, Any]]",
                    "str",
                    "type"
                ]
            }
        },
        "CLIStarter.run": {
            "name": "run",
            "location": 352,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/utils.py": {
        "log_config": {
            "name": "log_config",
            "location": 10,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "str",
                    "List[str]"
                ],
                "callback": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Union[str,int]",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/validators.py": {
        "AbsOptionValidator.is_valid": {
            "name": "is_valid",
            "location": 12,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsOptionValidator.explanation": {
            "name": "explanation",
            "location": 16,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryValidation.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DirectoryValidation.destination_exists": {
            "name": "destination_exists",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "DirectoryValidation.is_valid": {
            "name": "is_valid",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryValidation.explanation": {
            "name": "explanation",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionValidatorFactory.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionValidatorFactory.register_validator": {
            "name": "register_validator",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "Tuple"
                ],
                "validator": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "Tuple"
                ]
            }
        },
        "OptionValidatorFactory.create": {
            "name": "create",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "OptionValidator.get": {
            "name": "get",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str,str]",
                    "Type[RuntimeError]",
                    "int",
                    "Type",
                    "Tuple",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/worker.py": {
        "AbsJobWorker.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobWorker.execute": {
            "name": "execute",
            "location": 43,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobWorker.process": {
            "name": "process",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobWorker.log": {
            "name": "log",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Callable",
                    "str"
                ]
            }
        },
        "AbsJobWorker.on_completion": {
            "name": "on_completion",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobWorker.new": {
            "name": "new",
            "location": 70,
            "return": [
                "str",
                "OrderedDict",
                "dict",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "Type",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ],
                "job": [
                    "Callable",
                    "opentrons.types.Mount",
                    "int",
                    "str"
                ],
                "message_queue": [
                    "bytes",
                    "memoryview",
                    "Type",
                    "str"
                ]
            }
        },
        "ProcessJobWorker.process": {
            "name": "process",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessJobWorker.set_message_queue": {
            "name": "set_message_queue",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "List[float]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "ProcessJobWorker.log": {
            "name": "log",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[types.RawTrace]"
                ]
            }
        },
        "Worker2.initialize_worker": {
            "name": "initialize_worker",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Worker.initialize_worker": {
            "name": "initialize_worker",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.cancel": {
            "name": "cancel",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.run_all_jobs": {
            "name": "run_all_jobs",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.add_job": {
            "name": "add_job",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Callable",
                    "dict",
                    "list",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "AbsObserver.emit": {
            "name": "emit",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "AbsSubject.subscribe": {
            "name": "subscribe",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbsSubject.unsubscribe": {
            "name": "unsubscribe",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbsSubject.notify": {
            "name": "notify",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "Optional[str]",
                    "T",
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "AbsJobManager.add_job": {
            "name": "add_job",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_job": [
                    "int",
                    "list",
                    "List[str]",
                    "zerver.lib.types.ViewFuncT",
                    "bool"
                ],
                "settings": [
                    "int",
                    "list",
                    "List[str]",
                    "zerver.lib.types.ViewFuncT",
                    "bool"
                ]
            }
        },
        "AbsJobManager.start": {
            "name": "start",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobManager.flush_message_buffer": {
            "name": "flush_message_buffer",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobManager.abort": {
            "name": "abort",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobExecutor.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobExecutor.add_job": {
            "name": "add_job",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_job": [
                    "Optional[Dict]",
                    "dict",
                    "str",
                    "MutableMapping[str, Any]"
                ],
                "settings": [
                    "Optional[Dict]",
                    "dict",
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "JobExecutor.start": {
            "name": "start",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobExecutor.abort": {
            "name": "abort",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobExecutor.flush_message_buffer": {
            "name": "flush_message_buffer",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "dict",
                    "Tuple[str]",
                    "int",
                    "Union[None, int, str]",
                    "Tuple[float]",
                    "Callable"
                ]
            }
        },
        "JobExecutor.cleanup": {
            "name": "cleanup",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "logging.Logger",
                    "int",
                    "Optional[logging.Logger]",
                    "Callable"
                ]
            }
        },
        "JobExecutor.shutdown": {
            "name": "shutdown",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobAdapter.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adaptee": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "AbsJobAdapter.adaptee": {
            "name": "adaptee",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobAdapter.process": {
            "name": "process",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsJobAdapter.set_message_queue": {
            "name": "set_message_queue",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        },
        "AbsJobAdapter.name": {
            "name": "name",
            "location": 254,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtaskJobAdapter.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adaptee": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[Any]",
                    "Union[str, dict]",
                    "int"
                ]
            }
        },
        "SubtaskJobAdapter.queue_adapter": {
            "name": "queue_adapter",
            "location": 269,
            "return": [
                "QueueAdapter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtaskJobAdapter.process": {
            "name": "process",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtaskJobAdapter.set_message_queue": {
            "name": "set_message_queue",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SubtaskJobAdapter.settings": {
            "name": "settings",
            "location": 283,
            "return": [
                "Dict",
                "List[str]",
                "bool",
                "Dict[str,Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtaskJobAdapter.name": {
            "name": "name",
            "location": 291,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]",
                "mypy.types.Instance"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsToolJobManager.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsToolJobManager.active": {
            "name": "active",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "AbsToolJobManager.futures": {
            "name": "futures",
            "location": 322,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsToolJobManager.__enter__": {
            "name": "__enter__",
            "location": 326,
            "return": [
                "AbsToolJobManager"
            ],
            "arguments": {
                "self": [
                    "_TAbsToolJobManager@@AbsToolJobManager@@"
                ]
            }
        },
        "AbsToolJobManager.__exit__": {
            "name": "__exit__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "AbsToolJobManager.open": {
            "name": "open",
            "location": 342,
            "return": [
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "bool",
                    "Type"
                ],
                "runner": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "AbsToolJobManager.add_job": {
            "name": "add_job",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_job": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "settings": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AbsToolJobManager.start": {
            "name": "start",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsToolJobManager.abort": {
            "name": "abort",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsToolJobManager.get_results": {
            "name": "get_results",
            "location": 361,
            "return": [
                "Generator[Any,None,None]",
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_callback": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "AbsToolJobManager._cleanup": {
            "name": "_cleanup",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobProcessor.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "JobProcessor.refresh_events": {
            "name": "refresh_events",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobProcessor._process_all_futures": {
            "name": "_process_all_futures",
            "location": 386,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "futures": [
                    "T",
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "JobProcessor.process": {
            "name": "process",
            "location": 403,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobProcessor.report_results_from_future": {
            "name": "report_results_from_future",
            "location": 431,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "futures": [
                    "int",
                    "Dict[str, Any]",
                    "\"Vector\"",
                    "float"
                ]
            }
        },
        "ToolJobManager.abort": {
            "name": "abort",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolJobManager.get_results": {
            "name": "get_results",
            "location": 445,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "timeout_callback": [
                    "None",
                    "str",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "ToolJobManager.flush_message_buffer": {
            "name": "flush_message_buffer",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflow.py": {
        "AbsOutputOptionDataType.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ]
            }
        },
        "AbsOutputOptionDataType.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AbsOutputOptionDataType.serialize": {
            "name": "serialize",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsOutputOptionDataType.build_json_data": {
            "name": "build_json_data",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceSelection.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ChoiceSelection.add_selection": {
            "name": "add_selection",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "ChoiceSelection.serialize": {
            "name": "serialize",
            "location": 60,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSelectData.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "FileSelectData.serialize": {
            "name": "serialize",
            "location": 83,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/__init__.py": {},
    "Speedwagon-master/speedwagon/__main__.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "Tuple",
                    "List"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/interaction.py": {
        "AbsUserWidget.get_user_response": {
            "name": "get_user_response",
            "location": 27,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,List]",
                    "Dict[str,list]",
                    "Dict",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Optional[Dict]",
                    "None"
                ],
                "pretask_results": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,List]",
                    "Dict[str,list]",
                    "Dict",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "AbstractPackageBrowser.get_user_response": {
            "name": "get_user_response",
            "location": 45,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,List]",
                    "Dict[str,list]",
                    "Dict",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Optional[Dict]",
                    "None"
                ],
                "pretask_results": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,List]",
                    "Dict[str,list]",
                    "Dict",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "AbstractPackageBrowser.get_packages": {
            "name": "get_packages",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "root_dir": [
                    "str",
                    "List[str]"
                ],
                "image_type": [
                    "bool",
                    "str"
                ]
            }
        },
        "AbstractPackageBrowser.image_str_to_enum": {
            "name": "image_str_to_enum",
            "location": 70,
            "return": [
                "str",
                "Type[BaseException]",
                "Dict[Union[str,None],Any]",
                "Set[str]",
                "None",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "UserRequestFactory.package_browser": {
            "name": "package_browser",
            "location": 93,
            "return": [
                "AbstractPackageBrowser",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRequestFactory.confirm_removal": {
            "name": "confirm_removal",
            "location": 97,
            "return": [
                "AbstractConfirmFilesystemItemRemoval",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRequestFactory.package_title_page_selection": {
            "name": "package_title_page_selection",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/reporter.py": {
        "RunnerDisplay.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerDisplay.title": {
            "name": "title",
            "location": 32,
            "return": [
                "None",
                "int",
                "str",
                "Set[str]",
                "Dict[str,list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "RunnerDisplay.total_tasks_amount": {
            "name": "total_tasks_amount",
            "location": 41,
            "return": [
                "None",
                "Dict",
                "Dict[str,Any]",
                "int",
                "Pattern",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "RunnerDisplay.refresh": {
            "name": "refresh",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerDisplay.current_task_progress": {
            "name": "current_task_progress",
            "location": 54,
            "return": [
                "None",
                "str",
                "List[str]",
                "Set[tuple[Union[str,str]]]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Dict[str, int]]",
                    "dict",
                    "Iterator[str]",
                    "int"
                ]
            }
        },
        "RunnerDisplay.user_canceled": {
            "name": "user_canceled",
            "location": 59,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerDisplay.details": {
            "name": "details",
            "location": 68,
            "return": [
                "None",
                "int",
                "str",
                "Set[str]",
                "Dict[str,list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "RunnerDisplay.__enter__": {
            "name": "__enter__",
            "location": 71,
            "return": [
                "RunnerDisplay"
            ],
            "arguments": {
                "self": [
                    "_TRunnerDisplay@@RunnerDisplay@@"
                ]
            }
        },
        "RunnerDisplay.__exit__": {
            "name": "__exit__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__exc_type": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "__exc_value": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "__traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/__init__.py": {},
    "Speedwagon-master/speedwagon/frontend/cli/user_interaction.py": {
        "user_confirm_removal_stdin": {
            "name": "user_confirm_removal_stdin",
            "location": 160,
            "return": [
                "str",
                "bool",
                "List",
                "Dict[Any,str]",
                "Dict[str,None]",
                "Pattern",
                "Set",
                "List[dict]"
            ],
            "arguments": {
                "item": [
                    "Callable",
                    "inspire_mitmproxy.interaction.Interaction"
                ],
                "stdin_request_strategy": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "Callable",
                    "None"
                ]
            }
        },
        "CLIPackageBrowserWidget.get_user_response": {
            "name": "get_user_response",
            "location": 19,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "pretask_results": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,List]",
                    "Dict[str,list]",
                    "Dict",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "CLIPackageBrowserWidget.ask_user_to_select_title_page": {
            "name": "ask_user_to_select_title_page",
            "location": 46,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "files": [
                    "str",
                    "BinaryIO",
                    "Set[str]",
                    "bytes"
                ],
                "strategy": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "CLIPackageBrowserWidget.get_package_files": {
            "name": "get_package_files",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "package": [
                    "str",
                    "bool"
                ]
            }
        },
        "CLIConfirmFilesystemItemRemoval.get_user_response": {
            "name": "get_user_response",
            "location": 95,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,List]",
                    "Dict[str,list]",
                    "Dict",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Optional[Dict]",
                    "None"
                ],
                "pretask_results": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "CLIConfirmFilesystemItemRemoval.user_resolve_items": {
            "name": "user_resolve_items",
            "location": 117,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "items": [
                    "List",
                    "bool"
                ],
                "confirm_strategy": [
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "CLIFactory.package_browser": {
            "name": "package_browser",
            "location": 189,
            "return": [
                "CLIPackageBrowserWidget"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIFactory.confirm_removal": {
            "name": "confirm_removal",
            "location": 193,
            "return": [
                "CLIConfirmFilesystemItemRemoval"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/cli/__init__.py": {},
    "Speedwagon-master/speedwagon/frontend/qtwidgets/gui.py": {
        "set_app_display_metadata": {
            "name": "set_app_display_metadata",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "ToolConsole.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "ToolConsole.close": {
            "name": "close",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolConsole._follow_text": {
            "name": "_follow_text",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolConsole.add_message": {
            "name": "add_message",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ToolConsole.text": {
            "name": "text",
            "location": 131,
            "return": [
                "Dict[str, Any]",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolConsole.attach_logger": {
            "name": "attach_logger",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "logging.Logger",
                    "Tuple[Tuple[str, ...]]",
                    "int"
                ]
            }
        },
        "ToolConsole.detach_logger": {
            "name": "detach_logger",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemTabsWidget.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "ItemTabsWidget.add_tab": {
            "name": "add_tab",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "MainProgram.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_manager": [
                    "Callable"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        },
        "MainProgram.debug_mode": {
            "name": "debug_mode",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MainWindowMenuBuilder.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "MainWindowMenuBuilder.build": {
            "name": "build",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindowMenuBuilder._build_system_menu": {
            "name": "_build_system_menu",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menu_bar": [
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindowMenuBuilder._build_system_info_action": {
            "name": "_build_system_info_action",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "system_menu": [
                    "Mapping[str, Any]",
                    "Optional[Callable]",
                    "str"
                ]
            }
        },
        "MainWindowMenuBuilder._build_config_action": {
            "name": "_build_config_action",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "system_menu": [
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "MainWindowMenuBuilder._build_file_menu": {
            "name": "_build_file_menu",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menu_bar": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "MainWindowMenuBuilder._build_exit_action": {
            "name": "_build_exit_action",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_menu": [
                    "Set[str]",
                    "str"
                ]
            }
        },
        "MainWindowMenuBuilder._build_export_log_action": {
            "name": "_build_export_log_action",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_menu": [
                    "str",
                    "bool",
                    "Optional[IO[str]]"
                ]
            }
        },
        "MainWindowMenuBuilder._build_help": {
            "name": "_build_help",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menu_bar": [
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindowMenuBuilder._build_job_menu": {
            "name": "_build_job_menu",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menu_bar": [
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindow1.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_manager": [
                    "str",
                    "List[str]",
                    "bool",
                    "Union[bool, str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "MainWindow1.load_ui_file": {
            "name": "load_ui_file",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ui_file": [
                    "str",
                    "List[str]",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "MainWindow1.show_about_window": {
            "name": "show_about_window",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1.show_system_info": {
            "name": "show_system_info",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1.show_help": {
            "name": "show_help",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1.setup_menu": {
            "name": "setup_menu",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1._create_console": {
            "name": "_create_console",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1._create_tabs_widget": {
            "name": "_create_tabs_widget",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1.debug_mode": {
            "name": "debug_mode",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindow1._set_logging_level": {
            "name": "_set_logging_level",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "Callable",
                    "logging.LogRecord"
                ]
            }
        },
        "MainWindow1.set_current_tab": {
            "name": "set_current_tab",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MainWindow1.add_tab": {
            "name": "add_tab",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "Dict[str, Any]"
                ],
                "workflows": [
                    "str",
                    "bool"
                ]
            }
        },
        "MainWindow1.show_configuration": {
            "name": "show_configuration",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1.start_workflow": {
            "name": "start_workflow",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow1.save_log": {
            "name": "save_log",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2UI.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "MainWindow2.__init__": {
            "name": "__init__",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_manager": [
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "settings": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MainWindow2.set_current_tab": {
            "name": "set_current_tab",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab_name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MainWindow2.locate_tab_index_by_name": {
            "name": "locate_tab_index_by_name",
            "location": 648,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MainWindow2.set_active_workflow": {
            "name": "set_active_workflow",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindow2.set_current_workflow_settings": {
            "name": "set_current_workflow_settings",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindow2.close": {
            "name": "close",
            "location": 680,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2.closeEvent": {
            "name": "closeEvent",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PySide2.QtGui.QResizeEvent",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "MainWindow2.setup_menu": {
            "name": "setup_menu",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2.get_current_workflow_name": {
            "name": "get_current_workflow_name",
            "location": 714,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2.get_current_job_settings": {
            "name": "get_current_job_settings",
            "location": 733,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2.add_tab": {
            "name": "add_tab",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab_name": [
                    "str"
                ],
                "workflows": [
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]"
                ]
            }
        },
        "MainWindow2._start_workflow": {
            "name": "_start_workflow",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "float",
                    "bool"
                ],
                "options": [
                    "float",
                    "bool"
                ]
            }
        },
        "MainWindow2.show_about_window": {
            "name": "show_about_window",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2.save_log": {
            "name": "save_log",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2._create_tabs_widget": {
            "name": "_create_tabs_widget",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow2._create_console": {
            "name": "_create_console",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolConsole.ConsoleLogHandler.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "console_widget": [
                    "IO[bytes]"
                ]
            }
        },
        "ToolConsole.ConsoleLogHandler.flush": {
            "name": "flush",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/gui_startup.py": {
        "standalone_tab_editor": {
            "name": "standalone_tab_editor",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "None"
                ]
            }
        },
        "report_exception_dialog": {
            "name": "report_exception_dialog",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": [
                    "str",
                    "List[int]",
                    "Union[int, str]",
                    "int",
                    "Union[str, Tuple[Any]]",
                    "bytearray"
                ],
                "dialog_box_title": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "str",
                    "Optional[Type[Exception]]"
                ],
                "parent": [
                    "int",
                    "str",
                    "List[datetime.time]",
                    "Set[str]"
                ]
            }
        },
        "AbsGuiStarter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "AbsGuiStarter.run": {
            "name": "run",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsGuiStarter.start_gui": {
            "name": "start_gui",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[Game]",
                    "None"
                ]
            }
        },
        "StartupGuiDefault.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "None"
                ]
            }
        },
        "StartupGuiDefault.initialize": {
            "name": "initialize",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartupGuiDefault.start_gui": {
            "name": "start_gui",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "None",
                    "queue.Queue",
                    "Tuple[Callable,Callable]"
                ]
            }
        },
        "StartupGuiDefault.load_configurations": {
            "name": "load_configurations",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_manager": [
                    "str"
                ]
            }
        },
        "StartupGuiDefault._load_workflows": {
            "name": "_load_workflows",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "StartupGuiDefault.resolve_settings": {
            "name": "resolve_settings",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolution_order": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "loader": [
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "StartupGuiDefault._get_debug": {
            "name": "_get_debug",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "str",
                    "int",
                    "Exception",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "StartupGuiDefault.ensure_settings_files": {
            "name": "ensure_settings_files",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartQtThreaded.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "None"
                ]
            }
        },
        "StartQtThreaded.import_workflow_config": {
            "name": "import_workflow_config",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "dict"
                ],
                "dialog_box": [
                    "None",
                    "Type[Declared]",
                    "str"
                ],
                "serialization_strategy": [
                    "None",
                    "Dict[str,int]",
                    "Type[Declared]"
                ]
            }
        },
        "StartQtThreaded.save_workflow_config": {
            "name": "save_workflow_config",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "workflow_name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "data": [
                    "str"
                ],
                "parent": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "dialog_box": [
                    "str",
                    "None"
                ],
                "serialization_strategy": [
                    "None",
                    "str",
                    "Dict"
                ]
            }
        },
        "StartQtThreaded.load_settings": {
            "name": "load_settings",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartQtThreaded._load_help": {
            "name": "_load_help",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartQtThreaded.ensure_settings_files": {
            "name": "ensure_settings_files",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartQtThreaded.read_settings_file": {
            "name": "read_settings_file",
            "location": 335,
            "return": [
                "dict"
            ],
            "arguments": {
                "settings_file": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StartQtThreaded.resolve_settings": {
            "name": "resolve_settings",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resolution_order": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "loader": [
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "StartQtThreaded.initialize": {
            "name": "initialize",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartQtThreaded._load_workflows": {
            "name": "_load_workflows",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartQtThreaded.load_all_workflows_tab": {
            "name": "load_all_workflows_tab",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[bool]",
                    "IO[str]",
                    "List[str]"
                ],
                "loaded_workflows": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[bool]",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "StartQtThreaded.load_custom_tabs": {
            "name": "load_custom_tabs",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_window": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "tabs_file": [
                    "float",
                    "bytes",
                    "bool",
                    "str"
                ],
                "loaded_workflows": [
                    "dict",
                    "int",
                    "bytes"
                ]
            }
        },
        "StartQtThreaded.save_log": {
            "name": "save_log",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "None"
                ]
            }
        },
        "StartQtThreaded.request_system_info": {
            "name": "request_system_info",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "StartQtThreaded.request_settings": {
            "name": "request_settings",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "None"
                ]
            }
        },
        "StartQtThreaded.start_gui": {
            "name": "start_gui",
            "location": 494,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "PyQt5.QtWidgets.QApplication",
                    "None"
                ]
            }
        },
        "StartQtThreaded.abort_job": {
            "name": "abort_job",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "dialog_box": [
                    "str",
                    "list",
                    "int"
                ],
                "events": [
                    "threading.Event",
                    "bool",
                    "Iterable[Iterable[str]]",
                    "Optional[int]"
                ]
            }
        },
        "StartQtThreaded.request_more_info": {
            "name": "request_more_info",
            "location": 548,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "options": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "pre_results": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "wait_condition": [
                    "None",
                    "int",
                    "str",
                    "Union[str,os.PathLike]",
                    "Dict[str,Any]",
                    "Tuple",
                    "Callable"
                ]
            }
        },
        "StartQtThreaded.submit_job": {
            "name": "submit_job",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_manager": [
                    "str",
                    "IO",
                    "Dict[str, str]"
                ],
                "workflow_name": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "options": [
                    "Optional[str]",
                    "type",
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "main_app": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "StartQtThreaded.report_exception": {
            "name": "report_exception",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Callable",
                    "Exception",
                    "BaseException",
                    "Optional[Type[BaseException]]"
                ],
                "parent": [
                    "None"
                ],
                "dialog_box_title": [
                    "None"
                ]
            }
        },
        "StartQtThreaded._find_invalid": {
            "name": "_find_invalid",
            "location": 635,
            "return": [
                "Generator[(Tuple[(Any, str)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "workflows": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "TabsEditorApp.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabsEditorApp.load_all_workflows": {
            "name": "load_all_workflows",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabsEditorApp.on_okay": {
            "name": "on_okay",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabsEditorApp.on_cancel": {
            "name": "on_cancel",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabsEditorApp.load_tab_file": {
            "name": "load_tab_file",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "TabsEditorApp.tabs_file": {
            "name": "tabs_file",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "bytes",
                    "float",
                    "Optional[List[str]]",
                    "Dict[str, Set[str]]",
                    "bool"
                ]
            }
        },
        "SingleWorkflowLauncher.__init__": {
            "name": "__init__",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "logger": [
                    "None",
                    "str",
                    "Dict",
                    "logging.Logger"
                ]
            }
        },
        "SingleWorkflowLauncher.start_gui": {
            "name": "start_gui",
            "location": 761,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[Game]",
                    "None"
                ]
            }
        },
        "SingleWorkflowLauncher._run": {
            "name": "_run",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_manager": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "SingleWorkflowLauncher.set_workflow": {
            "name": "set_workflow",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "float"
                ]
            }
        },
        "SingleWorkflowJSON.__init__": {
            "name": "__init__",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "logger": [
                    "None",
                    "str",
                    "Dict",
                    "logging.Logger"
                ]
            }
        },
        "SingleWorkflowJSON.load_json_string": {
            "name": "load_json_string",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[int, Any]",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "SingleWorkflowJSON.load": {
            "name": "load",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_pointer": [
                    "str",
                    "bool"
                ]
            }
        },
        "SingleWorkflowJSON._set_workflow": {
            "name": "_set_workflow",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_name": [
                    "List[Dict[str, Any]]",
                    "str",
                    "type"
                ]
            }
        },
        "SingleWorkflowJSON.start_gui": {
            "name": "start_gui",
            "location": 864,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "PyQt5.QtWidgets.QApplication",
                    "None"
                ]
            }
        },
        "SingleWorkflowJSON.report_exception": {
            "name": "report_exception",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Callable",
                    "BaseException",
                    "Exception",
                    "Optional[Type[BaseException]]"
                ],
                "parent": [
                    "None",
                    "Callable",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict",
                    "int",
                    "Type[eth.abc.VirtualMachineAPI]",
                    "str"
                ],
                "dialog_box_title": [
                    "None",
                    "Callable",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict",
                    "int",
                    "Type[eth.abc.VirtualMachineAPI]",
                    "str"
                ]
            }
        },
        "SingleWorkflowJSON._run_workflow": {
            "name": "_run_workflow",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_manager": [
                    "str",
                    "PyQt5.QtWidgets.QApplication",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]",
                    "Union[str, int]"
                ],
                "workflow": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[Exception]"
                ],
                "options": [
                    "str",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]"
                ]
            }
        },
        "SingleWorkflowJSON._load_main_window": {
            "name": "_load_main_window",
            "location": 936,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "job_manager": [
                    "Callable[[None, None], bool]",
                    "int",
                    "dict",
                    "tuple"
                ],
                "title": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Dict[Any, bool]",
                    "bool"
                ]
            }
        },
        "MultiWorkflowLauncher.__init__": {
            "name": "__init__",
            "location": 949,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "logger": [
                    "None",
                    "str",
                    "Dict",
                    "logging.Logger"
                ]
            }
        },
        "MultiWorkflowLauncher.start_gui": {
            "name": "start_gui",
            "location": 956,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[Game]",
                    "None"
                ]
            }
        },
        "MultiWorkflowLauncher._run": {
            "name": "_run",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_manager": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "MultiWorkflowLauncher.add_job": {
            "name": "add_job",
            "location": 998,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Callable"
                ],
                "args": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/logging_helpers.py": {
        "GuiLogHandler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GuiLogHandler.emit": {
            "name": "emit",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "Union[BinaryIO,str]",
                    "BinaryIO"
                ]
            }
        },
        "SignalLogHandler.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SignalLogHandler.emit": {
            "name": "emit",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Dict"
                ]
            }
        },
        "AbsConsoleFormatter.format_debug": {
            "name": "format_debug",
            "location": 55,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "record": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "AbsConsoleFormatter.format_warning": {
            "name": "format_warning",
            "location": 59,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "record": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "AbsConsoleFormatter.format_error": {
            "name": "format_error",
            "location": 63,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "record": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AbsConsoleFormatter.format_info": {
            "name": "format_info",
            "location": 67,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]"
                ],
                "record": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "DefaultConsoleFormatStyle.format_debug": {
            "name": "format_debug",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "record": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "DefaultConsoleFormatStyle.format_warning": {
            "name": "format_warning",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "record": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "DefaultConsoleFormatStyle.format_error": {
            "name": "format_error",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "record": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DefaultConsoleFormatStyle.format_info": {
            "name": "format_info",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]"
                ],
                "record": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "VerboseConsoleFormatStyle._basic_format": {
            "name": "_basic_format",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "record": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "VerboseConsoleFormatStyle.format_debug": {
            "name": "format_debug",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "record": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "VerboseConsoleFormatStyle.format_warning": {
            "name": "format_warning",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "record": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "VerboseConsoleFormatStyle.format_error": {
            "name": "format_error",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "record": [
                    "str"
                ]
            }
        },
        "VerboseConsoleFormatStyle.format_info": {
            "name": "format_info",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]"
                ],
                "record": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConsoleFormatter.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleFormatter.format": {
            "name": "format",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SplashScreenLogHandler.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int",
                    "float",
                    "bool"
                ],
                "level": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "SplashScreenLogHandler.emit": {
            "name": "emit",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "float",
                    "Tuple",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/models.py": {
        "_lookup_constant": {
            "name": "_lookup_constant",
            "location": 334,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "build_setting_qt_model": {
            "name": "build_setting_qt_model",
            "location": 791,
            "return": [
                "SettingsModel"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "Callable[[str], None]",
                    "configparser.RawConfigParser"
                ]
            }
        },
        "serialize_settings_model": {
            "name": "serialize_settings_model",
            "location": 805,
            "return": [
                "str"
            ],
            "arguments": {
                "model": [
                    "MutableMapping[str, Any]",
                    "speedwagon.models.SettingsModel"
                ]
            }
        },
        "ItemListModel.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Tuple[List[int], List[int]]"
                ]
            }
        },
        "ItemListModel.columnCount": {
            "name": "columnCount",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemListModel.rowCount": {
            "name": "rowCount",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemListModel._extract_job_metadata": {
            "name": "_extract_job_metadata",
            "location": 74,
            "return": [
                "authorityspoke.io.schemas.RawFactor",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "job": [
                    "dict",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "data_type": [
                    "str",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "WorkflowListModel.data": {
            "name": "data",
            "location": 91,
            "return": [
                "Dict[str, float]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "PyQt5.QtCore.QModelIndex",
                    "PySide2.QtCore.QModelIndex",
                    "List[Dict[str, Any]]"
                ],
                "role": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "WorkflowListModel.sort": {
            "name": "sort",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "order": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "WorkflowListModel2.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "WorkflowListModel2.__iadd__": {
            "name": "__iadd__",
            "location": 132,
            "return": [
                "WorkflowListModel2"
            ],
            "arguments": {
                "self": [
                    "_TWorkflowListModel2@@WorkflowListModel2@@"
                ],
                "other": [
                    "Collection"
                ]
            }
        },
        "WorkflowListModel2.__isub__": {
            "name": "__isub__",
            "location": 137,
            "return": [
                "WorkflowListModel2"
            ],
            "arguments": {
                "self": [
                    "_TWorkflowListModel2@@WorkflowListModel2@@"
                ],
                "other": [
                    "Collection"
                ]
            }
        },
        "WorkflowListModel2.rowCount": {
            "name": "rowCount",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowListModel2.data": {
            "name": "data",
            "location": 149,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "PyQt5.QtCore.QModelIndex",
                    "str",
                    "int",
                    "PySide2.QtCore.QModelIndex"
                ],
                "role": [
                    "Optional[float]"
                ]
            }
        },
        "WorkflowListModel2.sort": {
            "name": "sort",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "order": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "WorkflowListModel2.add_workflow": {
            "name": "add_workflow",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ]
            }
        },
        "WorkflowListModel2.setData": {
            "name": "setData",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[int]",
                    "PyQt5.QtCore.QModelIndex",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "workflow": [
                    "str",
                    "int",
                    "Generator",
                    "bool"
                ],
                "role": [
                    "Union[str, List[str]]"
                ]
            }
        },
        "WorkflowListModel2.remove_workflow": {
            "name": "remove_workflow",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ToolOptionsModel.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "ToolOptionsModel.rowCount": {
            "name": "rowCount",
            "location": 241,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QModelIndex",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ToolOptionsModel.columnCount": {
            "name": "columnCount",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Callable",
                    "Tuple[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "ToolOptionsModel.get": {
            "name": "get",
            "location": 256,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolOptionsModel.flags": {
            "name": "flags",
            "location": 259,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "float",
                    "str"
                ]
            }
        },
        "ToolOptionsPairsModel.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "abc.Mapping",
                    "Dict[str, Any]",
                    "str"
                ],
                "parent": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "ToolOptionsPairsModel.data": {
            "name": "data",
            "location": 292,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bytes",
                    "dict"
                ],
                "role": [
                    "str",
                    "int",
                    "bytes",
                    "set"
                ]
            }
        },
        "ToolOptionsPairsModel.setData": {
            "name": "setData",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "bool",
                    "T",
                    "List[Dict[str, Any]]"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Callable"
                ],
                "role": [
                    "PyQt5.QtCore.Qt",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "ToolOptionsPairsModel.headerData": {
            "name": "headerData",
            "location": 316,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "T",
                    "str"
                ],
                "orientation": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ],
                "role": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "ToolOptionsPairsModel.get": {
            "name": "get",
            "location": 329,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolOptionsModel3.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[str]",
                    "List[Tuple[dict, dict]]",
                    "Optional[\"SchematicNode\"]"
                ],
                "parent": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "ToolOptionsModel3.data": {
            "name": "data",
            "location": 363,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[deque]",
                    "bytes"
                ],
                "role": [
                    "bool",
                    "str"
                ]
            }
        },
        "ToolOptionsModel3.get": {
            "name": "get",
            "location": 387,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolOptionsModel3._look_up_index": {
            "name": "_look_up_index",
            "location": 394,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ToolOptionsModel3.__getitem__": {
            "name": "__getitem__",
            "location": 404,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict"
                ]
            }
        },
        "ToolOptionsModel3.__setitem__": {
            "name": "__setitem__",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "KT",
                    "Dict[str, Any]"
                ]
            }
        },
        "ToolOptionsModel3.headerData": {
            "name": "headerData",
            "location": 415,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "T",
                    "str"
                ],
                "orientation": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ],
                "role": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "ToolOptionsModel3.setData": {
            "name": "setData",
            "location": 429,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "data": [
                    "dict",
                    "T",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "role": [
                    "PyQt5.QtCore.Qt",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "ToolOptionsModel4.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[[Any], None]",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ],
                "parent": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "ToolOptionsModel4.__setitem__": {
            "name": "__setitem__",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "ToolOptionsModel4.flags": {
            "name": "flags",
            "location": 469,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ToolOptionsModel4.rowCount": {
            "name": "rowCount",
            "location": 479,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QModelIndex",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ToolOptionsModel4.headerData": {
            "name": "headerData",
            "location": 488,
            "return": [
                "bool",
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "orientation": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ],
                "role": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "ToolOptionsModel4.data": {
            "name": "data",
            "location": 497,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "List[Dict[str, Any]]",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "role": [
                    "bytes",
                    "Union[str, bytes]",
                    "Callable"
                ]
            }
        },
        "ToolOptionsModel4.setData": {
            "name": "setData",
            "location": 511,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "PySide2.QtCore.QModelIndex",
                    "str",
                    "bool"
                ],
                "value": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Optional[Dict]",
                    "Iterable",
                    "Optional[List]"
                ],
                "role": [
                    "bytes",
                    "Iterable[int]",
                    "Optional[List[int]]",
                    "int",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "ToolOptionsModel4.serialize": {
            "name": "serialize",
            "location": 527,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolOptionsModel4.get": {
            "name": "get",
            "location": 530,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDataFormatter.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "ModelDataFormatter._select_display_role": {
            "name": "_select_display_role",
            "location": 540,
            "return": [
                "str",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "item": [
                    "Sequence[str]",
                    "List[OrderedDict]",
                    "list",
                    "str",
                    "Union[Dict, List]"
                ]
            }
        },
        "ModelDataFormatter._should_use_placeholder_text": {
            "name": "_should_use_placeholder_text",
            "location": 553,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "T",
                    "list",
                    "str"
                ]
            }
        },
        "ModelDataFormatter.font_role": {
            "name": "font_role",
            "location": 562,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "str",
                    "List[str]",
                    "Union[List, str]"
                ]
            }
        },
        "ModelDataFormatter.display_role": {
            "name": "display_role",
            "location": 572,
            "return": [
                "str",
                "bytes",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "bool",
                    "str",
                    "bytes",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "ModelDataFormatter.format": {
            "name": "format",
            "location": 578,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "bool"
                ],
                "role": [
                    "bool",
                    "str"
                ]
            }
        },
        "SettingsModel.__init__": {
            "name": "__init__",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsModel.data": {
            "name": "data",
            "location": 612,
            "return": [
                "dict",
                "List[str]",
                "bool",
                "List[bytes]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "PySide2.QtCore.QModelIndex",
                    "int",
                    "Sequence[T]",
                    "Callable[[T], bool]"
                ],
                "role": [
                    "str",
                    "int",
                    "bytes",
                    "set"
                ]
            }
        },
        "SettingsModel.rowCount": {
            "name": "rowCount",
            "location": 629,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QModelIndex",
                    "bool",
                    "Callable"
                ]
            }
        },
        "SettingsModel.add_setting": {
            "name": "add_setting",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "bool",
                    "Union[str, List[str]]",
                    "Dict[str, str]",
                    "MutableMapping[str, str]",
                    "Callable"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "bool",
                    "Union[str, List[str]]",
                    "Dict[str, str]",
                    "MutableMapping[str, str]",
                    "Callable"
                ]
            }
        },
        "SettingsModel.columnCount": {
            "name": "columnCount",
            "location": 640,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Callable",
                    "Tuple[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "SettingsModel.headerData": {
            "name": "headerData",
            "location": 650,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "PyQt5.QtCore.Qt",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, bool]"
                ],
                "orientation": [
                    "str",
                    "bytes",
                    "int"
                ],
                "role": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "SettingsModel.flags": {
            "name": "flags",
            "location": 662,
            "return": [
                "Dict[str, int]",
                "int",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "str",
                    "Union[Dict, Tuple]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SettingsModel.setData": {
            "name": "setData",
            "location": 673,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "PyQt5.QtCore.QModelIndex",
                    "bool",
                    "str"
                ],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "T"
                ],
                "role": [
                    "PyQt5.QtCore.Qt",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "TabsModel.__init__": {
            "name": "__init__",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "TabsModel.__contains__": {
            "name": "__contains__",
            "location": 704,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "list",
                    "Union[bool, str]",
                    "Union[None, str, bytes]",
                    "str",
                    "Type[Exception]",
                    "Exception"
                ]
            }
        },
        "TabsModel.__iadd__": {
            "name": "__iadd__",
            "location": 708,
            "return": [
                "TabsModel"
            ],
            "arguments": {
                "self": [
                    "_TTabsModel@@TabsModel@@"
                ],
                "other": [
                    "Collection"
                ]
            }
        },
        "TabsModel.__isub__": {
            "name": "__isub__",
            "location": 713,
            "return": [
                "TabsModel"
            ],
            "arguments": {
                "self": [
                    "_TTabsModel@@TabsModel@@"
                ],
                "other": [
                    "Collection"
                ]
            }
        },
        "TabsModel.data": {
            "name": "data",
            "location": 718,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "PyQt5.QtCore.QModelIndex",
                    "str",
                    "int",
                    "PySide2.QtCore.QModelIndex"
                ],
                "role": [
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TabsModel.rowCount": {
            "name": "rowCount",
            "location": 738,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtCore.QModelIndex",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TabsModel.add_tab": {
            "name": "add_tab",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TabsModel.remove_tab": {
            "name": "remove_tab",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TabsModel.setData": {
            "name": "setData",
            "location": 767,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[int]",
                    "PyQt5.QtCore.QModelIndex",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "tab": [
                    "str",
                    "int",
                    "Generator",
                    "bool"
                ],
                "role": [
                    "Union[str, List[str]]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/runners.py": {
        "QtDialogProgress.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "QtDialogProgress.details": {
            "name": "details",
            "location": 42,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "List[str]",
                    "list",
                    "bool",
                    "T"
                ]
            }
        },
        "QtDialogProgress.user_canceled": {
            "name": "user_canceled",
            "location": 51,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtDialogProgress.current_task_progress": {
            "name": "current_task_progress",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "T",
                    "Optional[Sequence[T]]",
                    "dict"
                ]
            }
        },
        "QtDialogProgress.total_tasks_amount": {
            "name": "total_tasks_amount",
            "location": 72,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[List, Tuple]",
                    "Optional[str]",
                    "VT",
                    "Iterator[T]"
                ]
            }
        },
        "QtDialogProgress.title": {
            "name": "title",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "QtDialogProgress.refresh": {
            "name": "refresh",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtDialogProgress.__enter__": {
            "name": "__enter__",
            "location": 103,
            "return": [
                "QtDialogProgress"
            ],
            "arguments": {
                "self": [
                    "_TQtDialogProgress@@QtDialogProgress@@"
                ]
            }
        },
        "QtDialogProgress.__exit__": {
            "name": "__exit__",
            "location": 108,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "__exc_type": [
                    "Type[BaseException]",
                    "Optional[BaseException]",
                    "Optional[types.TracebackType]",
                    "mypy.types.Type",
                    "BaseException",
                    "types.TracebackType"
                ],
                "__exc_value": [
                    "Type[BaseException]",
                    "Optional[BaseException]",
                    "Optional[types.TracebackType]",
                    "mypy.types.Type",
                    "BaseException",
                    "types.TracebackType"
                ],
                "__traceback": [
                    "Type[BaseException]",
                    "Optional[BaseException]",
                    "Optional[types.TracebackType]",
                    "mypy.types.Type",
                    "BaseException",
                    "types.TracebackType"
                ]
            }
        },
        "QtDialogProgress.close": {
            "name": "close",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtDialogProgress._update_window_task_info": {
            "name": "_update_window_task_info",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_task": []
            }
        },
        "QtDialogProgress._update_progress": {
            "name": "_update_progress",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_scheduler": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbsRunner.run": {
            "name": "run",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "job.AbsWorkflow",
                    "logging.Logger",
                    "dict",
                    "List[str]",
                    "List[mypy.types.Type.VarDef]"
                ],
                "job": [
                    "job.AbsWorkflow",
                    "logging.Logger",
                    "dict",
                    "List[str]",
                    "List[mypy.types.Type.VarDef]"
                ],
                "options": [
                    "job.AbsWorkflow",
                    "logging.Logger",
                    "dict",
                    "List[str]",
                    "List[mypy.types.Type.VarDef]"
                ],
                "logger": [
                    "job.AbsWorkflow",
                    "logging.Logger",
                    "dict",
                    "List[str]",
                    "List[mypy.types.Type.VarDef]"
                ],
                "completion_callback": [
                    "None",
                    "job.AbsWorkflow",
                    "logging.Logger",
                    "Dict",
                    "List[str]",
                    "List[mypy.types.Type.VarDef]"
                ]
            }
        },
        "UsingExternalManagerForAdapter.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "UsingExternalManagerForAdapter._update_progress": {
            "name": "_update_progress",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "current": [
                    "int",
                    "str",
                    "Generator",
                    "float"
                ],
                "total": [
                    "int",
                    "str",
                    "Iterable"
                ]
            }
        },
        "UsingExternalManagerForAdapter.run": {
            "name": "run",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Dict[str, Any]",
                    "bytes",
                    "object"
                ],
                "job": [],
                "options": [
                    "Dict[str, Any]",
                    "bytes",
                    "object"
                ],
                "logger": [
                    "bytes",
                    "Tuple[List[Any], Tuple[str, str], Optional[Any]]",
                    "dict",
                    "logging.Logger",
                    "Iterator",
                    "str",
                    "object"
                ],
                "completion_callback": [
                    "None",
                    "job.AbsWorkflow",
                    "logging.Logger",
                    "Dict",
                    "List[str]",
                    "List[mypy.types.Type.VarDef]"
                ]
            }
        },
        "UsingExternalManagerForAdapter._get_additional_data": {
            "name": "_get_additional_data",
            "location": 252,
            "return": [
                "Dict",
                "Optional[str]",
                "str",
                "List",
                "opentrons.protocols.types.APIVersion"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Dict[str, str]"
                ],
                "options": [
                    "Optional[Iterable[str]]",
                    "PyQt5.QtWidgets.QWidget",
                    "str",
                    "bool",
                    "List[Union[str, \"SqlFile\"]]"
                ],
                "parent": [
                    "Optional[Iterable[str]]",
                    "PyQt5.QtWidgets.QWidget",
                    "str",
                    "bool",
                    "List[Union[str, \"SqlFile\"]]"
                ],
                "pre_results": [
                    "Optional[Iterable[str]]",
                    "PyQt5.QtWidgets.QWidget",
                    "str",
                    "bool",
                    "List[Union[str, \"SqlFile\"]]"
                ]
            }
        },
        "UsingExternalManagerForAdapter._run_main_tasks": {
            "name": "_run_main_tasks",
            "location": 269,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[Callable[[str], str]]",
                    "List[str]"
                ],
                "job": [
                    "str",
                    "Optional[str]",
                    "Container"
                ],
                "options": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[int, Any]]"
                ],
                "pretask_results": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[int, Any]]"
                ],
                "additional_data": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[int, Any]]"
                ],
                "working_dir": [
                    "dict",
                    "Optional[str]",
                    "tuple"
                ],
                "logger": [
                    "logging.Logger",
                    "logging.Formatter",
                    "str"
                ]
            }
        },
        "UsingExternalManagerForAdapter._run_post_tasks": {
            "name": "_run_post_tasks",
            "location": 337,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "job": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict"
                ],
                "options": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict"
                ],
                "results": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict"
                ],
                "working_dir": [
                    "str",
                    "dict",
                    "Exception"
                ],
                "logger": [
                    "logging.Logger",
                    "logging.Formatter",
                    "str"
                ]
            }
        },
        "UsingExternalManagerForAdapter._run_pre_tasks": {
            "name": "_run_pre_tasks",
            "location": 383,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[str]",
                    "bool"
                ],
                "job": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "options": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "working_dir": [
                    "dict",
                    "str"
                ],
                "logger": [
                    "logging.Logger",
                    "str",
                    "logging.Formatter"
                ]
            }
        },
        "UsingExternalManagerForAdapter._get_additional_options": {
            "name": "_get_additional_options",
            "location": 434,
            "return": [
                "str",
                "Optional[bool]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "parent": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "job": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "options": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "pretask_results": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "QtRunner.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "QtRunner.update_progress": {
            "name": "update_progress",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "current": [
                    "int",
                    "str",
                    "Generator",
                    "float"
                ],
                "total": [
                    "int",
                    "str",
                    "Iterable"
                ]
            }
        },
        "QtRunner.request_more_info": {
            "name": "request_more_info",
            "location": 470,
            "return": [
                "Dict",
                "str",
                "List[str]",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "Optional[List[Any]]"
                ],
                "options": [
                    "dict",
                    "str",
                    "Mapping",
                    "bool"
                ],
                "pretask_results": [
                    "dict",
                    "str",
                    "Mapping",
                    "bool"
                ]
            }
        },
        "QtRunner.run": {
            "name": "run",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "dict",
                    "logging.LogRecord",
                    "Dict[str, str]",
                    "List[str]",
                    "str"
                ],
                "options": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "logger": [
                    "None",
                    "logging.Logger",
                    "List[Dict[str,float]]",
                    "Dict",
                    "logging.FileHandler"
                ],
                "completion_callback": [
                    "None",
                    "Dict",
                    "List[str]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "QtRunner.run_abs_workflow": {
            "name": "run_abs_workflow",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_scheduler": [
                    "logging.Logger",
                    "Callable",
                    "dict"
                ],
                "job": [
                    "str",
                    "Dict[str, Any]"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]"
                ],
                "logger": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "WorkflowProgressCallbacks.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "WorkflowProgressCallbacks.log": {
            "name": "log",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "float"
                ],
                "level": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkflowProgressCallbacks.set_banner_text": {
            "name": "set_banner_text",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WorkflowProgressCallbacks.error": {
            "name": "error",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str,str]]"
                ],
                "exc": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str,str]]"
                ],
                "traceback_string": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "WorkflowProgressCallbacks.start": {
            "name": "start",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressCallbacks.finished": {
            "name": "finished",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Tuple[str, str]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "WorkflowProgressCallbacks.cancelling_complete": {
            "name": "cancelling_complete",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressCallbacks.refresh": {
            "name": "refresh",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressCallbacks.update_progress": {
            "name": "update_progress",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "int",
                    "bool",
                    "str"
                ],
                "total": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "WorkflowProgressCallbacks.status": {
            "name": "status",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str"
                ]
            }
        },
        "WorkRunnerExternal3.__init__": {
            "name": "__init__",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "WorkRunnerExternal3.dialog": {
            "name": "dialog",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "WorkRunnerExternal3.__enter__": {
            "name": "__enter__",
            "location": 722,
            "return": [
                "WorkRunnerExternal3"
            ],
            "arguments": {
                "self": [
                    "_TWorkRunnerExternal3@@WorkRunnerExternal3@@"
                ]
            }
        },
        "WorkRunnerExternal3.abort": {
            "name": "abort",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkRunnerExternal3.__exit__": {
            "name": "__exit__",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.__init__": {
            "name": "__init__",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.log": {
            "name": "log",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "level": [
                    "str"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.set_banner_text": {
            "name": "set_banner_text",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.set_status": {
            "name": "set_status",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals._error_message": {
            "name": "_error_message",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "None"
                ],
                "exc": [
                    "None",
                    "str",
                    "logging.LogRecord"
                ],
                "traceback": [
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals._finished": {
            "name": "_finished",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Dict[int, dict]",
                    "Dict[str, str]",
                    "Callable[..., T]",
                    "int"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.finished_called": {
            "name": "finished_called",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.cancelling_complete": {
            "name": "cancelling_complete",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.update_progress": {
            "name": "update_progress",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]"
                ],
                "total": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "WorkflowProgressCallbacks.WorkflowSignals.submit_error": {
            "name": "submit_error",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "str",
                    "bool",
                    "bytes",
                    "Dict"
                ],
                "exc": [
                    "None",
                    "str",
                    "bool",
                    "bytes",
                    "Dict"
                ],
                "traceback_string": [
                    "None",
                    "str",
                    "bool",
                    "bytes",
                    "Dict"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/shared_custom_widgets.py": {
        "AbsCustomData2.is_valid": {
            "name": "is_valid",
            "location": 19,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ],
                "value": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ]
            }
        },
        "AbsCustomData2.edit_widget": {
            "name": "edit_widget",
            "location": 24,
            "return": [
                "PySide6.QtWidgets.QWidget",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "CustomItemWidget.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomItemWidget.data": {
            "name": "data",
            "location": 56,
            "return": [
                "None",
                "int",
                "Final",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "AbsBrowseableWidget.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsBrowseableWidget.get_browse_icon": {
            "name": "get_browse_icon",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsBrowseableWidget.browse_clicked": {
            "name": "browse_clicked",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsBrowseableWidget.data": {
            "name": "data",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "AbsBrowseableWidget._change_data": {
            "name": "_change_data",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List",
                    "List[magic.abc.CardDescription]",
                    "List[C]"
                ]
            }
        },
        "AbsCustomData3.is_valid": {
            "name": "is_valid",
            "location": 113,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ],
                "value": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ]
            }
        },
        "AbsCustomData3.edit_widget": {
            "name": "edit_widget",
            "location": 118,
            "return": [
                "PySide6.QtWidgets.QWidget",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "ChecksumFile.get_browse_icon": {
            "name": "get_browse_icon",
            "location": 125,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumFile.browse_clicked": {
            "name": "browse_clicked",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumData.is_valid": {
            "name": "is_valid",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "ChecksumData.edit_widget": {
            "name": "edit_widget",
            "location": 154,
            "return": [
                "ChecksumFile"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "FolderBrowseWidget.get_browse_icon": {
            "name": "get_browse_icon",
            "location": 162,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FolderBrowseWidget.browse_clicked": {
            "name": "browse_clicked",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FolderData.is_valid": {
            "name": "is_valid",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FolderData.edit_widget": {
            "name": "edit_widget",
            "location": 186,
            "return": [
                "FolderBrowseWidget"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "UserOption3.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_text": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[Tuple[Any,str],int]",
                    "Dict[tuple[Union[Any,str]],int]"
                ]
            }
        },
        "UserOption3.is_valid": {
            "name": "is_valid",
            "location": 200,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOption3.edit_widget": {
            "name": "edit_widget",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOptionCustomDataType.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_text": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "data_type": [
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "UserOptionCustomDataType.is_valid": {
            "name": "is_valid",
            "location": 220,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOptionCustomDataType.edit_widget": {
            "name": "edit_widget",
            "location": 224,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOption2.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_text": [
                    "str"
                ]
            }
        },
        "UserOption2.is_valid": {
            "name": "is_valid",
            "location": 238,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOption2.edit_widget": {
            "name": "edit_widget",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOptionPythonDataType2.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_text": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "data_type": [
                    "str",
                    "Tuple[int,int]",
                    "Optional[bool]"
                ]
            }
        },
        "UserOptionPythonDataType2.is_valid": {
            "name": "is_valid",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListSelectionWidget.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selections": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ListSelectionWidget._update": {
            "name": "_update",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListSelection.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "ListSelection.is_valid": {
            "name": "is_valid",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListSelection.edit_widget": {
            "name": "edit_widget",
            "location": 295,
            "return": [
                "ListSelectionWidget"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListSelection.add_selection": {
            "name": "add_selection",
            "location": 299,
            "return": [
                "ListSelection"
            ],
            "arguments": {
                "self": [
                    "_TListSelection@@ListSelection@@"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/splashscreen.py": {
        "create_splash": {
            "name": "create_splash",
            "location": 14,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/tabs.py": {
        "read_tabs_yaml": {
            "name": "read_tabs_yaml",
            "location": 613,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "yaml_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "write_tabs_yaml": {
            "name": "write_tabs_yaml",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_file": [
                    "str",
                    "BinaryIO",
                    "int",
                    "Set[str]"
                ],
                "tabs": [
                    "Union[List, set]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "extract_tab_information": {
            "name": "extract_tab_information",
            "location": 677,
            "return": [
                "list"
            ],
            "arguments": {
                "model": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ]
            }
        },
        "Tab.compose_tab_layout": {
            "name": "compose_tab_layout",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.create_actions": {
            "name": "create_actions",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ],
                "work_manager": [
                    "str",
                    "dict",
                    "List[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Tab.create_tools_settings_view": {
            "name": "create_tools_settings_view",
            "location": 83,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "parent": [
                    "django.db.models.Field",
                    "tracim.models.data.Content",
                    "models.User"
                ]
            }
        },
        "Tab.create_workspace_layout": {
            "name": "create_workspace_layout",
            "location": 108,
            "return": [
                "Tuple[(dict, Any)]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict[str, bool]]",
                    "asgard.models.accounAccount"
                ],
                "parent": [
                    "Optional[Dict[str, bool]]",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "Tab.create_workspace": {
            "name": "create_workspace",
            "location": 140,
            "return": [
                "Tuple[(Any, dict, Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Optional[bool]"
                ],
                "title": [
                    "Optional[Tuple[float, float, float]]",
                    "str",
                    "int",
                    "bool"
                ],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Optional[bool]"
                ]
            }
        },
        "Tab.create_tab": {
            "name": "create_tab",
            "location": 152,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "ItemSelectionTab.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "int"
                ],
                "parent": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable]",
                    "list"
                ],
                "item_model": [
                    "str",
                    "int",
                    "bool"
                ],
                "work_manager": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "log_manager": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ItemSelectionTab.init_selection": {
            "name": "init_selection",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemSelectionTab._create_selector_view": {
            "name": "_create_selector_view",
            "location": 210,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "tracim.models.data.Content",
                    "Optional[str]",
                    "Exception"
                ],
                "model": [
                    "int",
                    "Dict[str, Any]",
                    "List[List[int]]"
                ]
            }
        },
        "ItemSelectionTab.create_form": {
            "name": "create_form",
            "location": 246,
            "return": [
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "parent": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[dict]"
                ],
                "config_widgets": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[IO[str]]"
                ],
                "model": [
                    "Dict[str, str]",
                    "bool",
                    "PyQt5.QtGui.QPixmap",
                    "str",
                    "Callable[[Any], str]",
                    "set",
                    "int"
                ]
            }
        },
        "ItemSelectionTab.start": {
            "name": "start",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bool",
                    "Union[application.domain.models.T, List[application.domain.models.T]]",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "ItemSelectionTab.get_item_options_model": {
            "name": "get_item_options_model",
            "location": 269,
            "return": [
                "speedwagon.frontend.qtwidgets.models.ToolOptionsModel3",
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Sequence[int]",
                    "Callable",
                    "eth.abc.ComputationAPI",
                    "bool"
                ]
            }
        },
        "ItemSelectionTab.create_actions": {
            "name": "create_actions",
            "location": 275,
            "return": [
                "Tuple[(Dict[(str, Any)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemSelectionTab._start": {
            "name": "_start",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemSelectionTab.is_ready_to_start": {
            "name": "is_ready_to_start",
            "location": 319,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemSelectionTab._update_tool_selected": {
            "name": "_update_tool_selected",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "set",
                    "str",
                    "tuple",
                    "suits.job.JobConfig"
                ],
                "previous": [
                    "bool",
                    "int"
                ]
            }
        },
        "ItemSelectionTab.item_selected": {
            "name": "item_selected",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "float",
                    "List[int]"
                ]
            }
        },
        "ItemSelectionTab.compose_tab_layout": {
            "name": "compose_tab_layout",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowsTab.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "django.db.models.Model",
                    "str",
                    "Optional[str]"
                ],
                "workflows": [
                    "str",
                    "zerver.models.Realm",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "server.models.User"
                ],
                "work_manager": [
                    "None",
                    "django.db.models.Model",
                    "str",
                    "Optional[str]"
                ],
                "log_manager": [
                    "None",
                    "django.db.models.Model",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "WorkflowsTab.is_ready_to_start": {
            "name": "is_ready_to_start",
            "location": 417,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowsTab.run": {
            "name": "run",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "bool",
                    "logging.Logger",
                    "job.AbsWorkflow",
                    "dict"
                ],
                "options": [
                    "str",
                    "bool",
                    "logging.Logger",
                    "job.AbsWorkflow",
                    "dict"
                ]
            }
        },
        "WorkflowsTab._create_error_message_box_from_exception": {
            "name": "_create_error_message_box_from_exception",
            "location": 475,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Dict[str, str]",
                    "Tuple[Optional[float], Optional[float]]",
                    "Optional[str]",
                    "float",
                    "dict"
                ],
                "window_title": [
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "videoarchiver.tvasahi.models.Episode",
                    "Dict"
                ],
                "message": [
                    "None"
                ]
            }
        },
        "WorkflowsTab.start": {
            "name": "start",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "Sequence[Any]"
                ]
            }
        },
        "WorkflowsTab.get_item_options_model": {
            "name": "get_item_options_model",
            "location": 508,
            "return": [
                "List[str]",
                "Dict[str, Dict[str, str]]",
                "bytes",
                "django.db.models.Model",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "str",
                    "dict",
                    "bytes",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "WorkflowsTab2.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int"
                ],
                "workflows": [
                    "int"
                ]
            }
        },
        "WorkflowsTab2.get_item_options_model": {
            "name": "get_item_options_model",
            "location": 531,
            "return": [
                "List[str]",
                "Dict[str, Dict[str, str]]",
                "bytes",
                "django.db.models.Model",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "WorkflowsTab2.start": {
            "name": "start",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bytes",
                    "zerver.models.Realm",
                    "Union[int, slice]",
                    "int"
                ]
            }
        },
        "MyDelegate.createEditor": {
            "name": "createEditor",
            "location": 546,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "Optional[Dict[str, str]]",
                    "str",
                    "List[Tuple[str, str]]",
                    "Iterable[Dict[str, Any]]"
                ],
                "option": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Type"
                ],
                "index": [
                    "callable",
                    "zam_repondeur.models.Lecture",
                    "List[Set[str]]",
                    "Type"
                ]
            }
        },
        "MyDelegate.update_custom_item": {
            "name": "update_custom_item",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDelegate.setEditorData": {
            "name": "setEditorData",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "int",
                    "List[Callable]"
                ],
                "index": [
                    "int",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "MyDelegate.setModelData": {
            "name": "setModelData",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "str",
                    "salon.models.Stylist",
                    "Dict[str, Any]"
                ],
                "model": [
                    "int",
                    "bool",
                    "zerver.models.Realm",
                    "django.contrib.auth.models.AbstractBaseUser"
                ],
                "index": [
                    "int",
                    "bool",
                    "zerver.models.Realm",
                    "django.contrib.auth.models.AbstractBaseUser"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/ui_loader.py": {
        "load_ui": {
            "name": "load_ui",
            "location": 33,
            "return": [
                "str",
                "bool",
                "Dict[str,Union[Any,Any]]"
            ],
            "arguments": {
                "ui_file": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict[str,str]"
                ],
                "base_instance": [
                    "str",
                    "Dict",
                    "None",
                    "int"
                ]
            }
        },
        "UiLoader.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_instance": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "UiLoader.createWidget": {
            "name": "createWidget",
            "location": 18,
            "return": [
                "str",
                "int",
                "Callable[[], str]",
                "IO"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "float",
                    "None"
                ],
                "parent": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "Optional[Union[Any,Any]]",
                    "Any",
                    "Optional[Dict[str,dict]]",
                    "Dict[str,dict]"
                ],
                "name": [
                    "Text",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/user_interaction.py": {
        "QtWidgetFactory.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "QtWidgetFactory.package_browser": {
            "name": "package_browser",
            "location": 29,
            "return": [
                "QtWidgetPackageBrowserWidget"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtWidgetFactory.confirm_removal": {
            "name": "confirm_removal",
            "location": 33,
            "return": [
                "QtWidgetConfirmFileSystemRemoval"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtWidgetFactory.package_title_page_selection": {
            "name": "package_title_page_selection",
            "location": 39,
            "return": [
                "QtWidgetTitlePageSelection"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmListModel.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "None",
                    "Dict",
                    "Mapping[str,str]",
                    "Dict[str,Any]",
                    "Tuple[int,int,str]",
                    "Set[bytes]"
                ],
                "parent": [
                    "None",
                    "PySide2.QtCore.QObject",
                    "PyQt5.QtCore.QObject",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        },
        "ConfirmListModel.items": {
            "name": "items",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float",
                    "dict"
                ]
            }
        },
        "ConfirmListModel.selected": {
            "name": "selected",
            "location": 75,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmListModel.rowCount": {
            "name": "rowCount",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtCore.QModelIndex",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ConfirmListModel.data": {
            "name": "data",
            "location": 97,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[str]",
                    "str",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "role": [
                    "bool",
                    "str"
                ]
            }
        },
        "ConfirmListModel.setData": {
            "name": "setData",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Iterable['Notification']",
                    "Union[bytes, str]",
                    "T",
                    "Callable",
                    "int"
                ],
                "value": [
                    "str",
                    "Iterable['Notification']",
                    "Union[bytes, str]",
                    "T",
                    "Callable",
                    "int"
                ],
                "role": [
                    "dict",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "ConfirmListModel.flags": {
            "name": "flags",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "PySide2.QtCore.QModelIndex",
                    "Dict[str, str]",
                    "Callable[..., None]"
                ]
            }
        },
        "ConfirmDeleteDialog.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Set[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "type",
                    "Callable"
                ],
                "parent": [
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "ConfirmDeleteDialog.update_view_label": {
            "name": "update_view_label",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmDeleteDialog.update_buttons": {
            "name": "update_buttons",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmDeleteDialog._make_connections": {
            "name": "_make_connections",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmDeleteDialog.data": {
            "name": "data",
            "location": 202,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtWidgetConfirmFileSystemRemoval.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "QtWidgetConfirmFileSystemRemoval.get_user_response": {
            "name": "get_user_response",
            "location": 223,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Dict[str, List]",
                    "Sequence[str]",
                    "Type[Exception]",
                    "dict",
                    "Optional[Dict]",
                    "bool"
                ],
                "pretask_results": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "QtWidgetConfirmFileSystemRemoval.use_dialog_box": {
            "name": "use_dialog_box",
            "location": 237,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "dict",
                "IO"
            ],
            "arguments": {
                "items": [
                    "T",
                    "Callable",
                    "Callable[[T], Optional[T]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "dialog_box": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "bool",
                    "str",
                    "Dict"
                ],
                "parent": [
                    "None",
                    "T",
                    "Callable",
                    "Callable[[T],Optional[T]]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "QtWidgetPackageBrowserWidget.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "QtWidgetPackageBrowserWidget.get_user_response": {
            "name": "get_user_response",
            "location": 262,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "List[str]",
                    "Optional[int]"
                ],
                "pretask_results": [
                    "str",
                    "Dict[str, List]",
                    "Sequence[str]",
                    "Type[Exception]",
                    "dict",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "QtWidgetPackageBrowserWidget.get_data_with_dialog_box": {
            "name": "get_data_with_dialog_box",
            "location": 277,
            "return": [
                "IO[bytes]",
                "dict",
                "Dict[str, Optional[str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "bool"
                ],
                "image_type": [
                    "str",
                    "bool"
                ],
                "dialog_box": [
                    "str",
                    "bool"
                ]
            }
        },
        "QtWidgetTitlePageSelection.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "QtWidgetTitlePageSelection.get_user_response": {
            "name": "get_user_response",
            "location": 303,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Dict[str, List]",
                    "Sequence[str]",
                    "Type[Exception]",
                    "dict",
                    "Optional[Dict]",
                    "bool"
                ],
                "pretask_results": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "QtRequestMoreInfo.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "QtRequestMoreInfo.request_more_info": {
            "name": "request_more_info",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_is_interacting": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping]",
                    "Optional[Callable[[], bool]]",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "workflow": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "options": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "pre_results": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/widgets.py": {
        "EditDelegateWidget.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditDelegateWidget.data": {
            "name": "data",
            "location": 41,
            "return": [
                "None",
                "int",
                "Final",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "CheckBoxWidget.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckBoxWidget.set_defaults": {
            "name": "set_defaults",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckBoxWidget._make_connections": {
            "name": "_make_connections",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckBoxWidget.update_data": {
            "name": "update_data",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "CheckBoxWidget.data": {
            "name": "data",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "List"
                ]
            }
        },
        "ComboWidget.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComboWidget._make_connections": {
            "name": "_make_connections",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComboWidget.update_data": {
            "name": "update_data",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List"
                ]
            }
        },
        "ComboWidget.data": {
            "name": "data",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Union[str,int,float]"
                ]
            }
        },
        "ComboWidget._update_combo_box_selected": {
            "name": "_update_combo_box_selected",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_value": [
                    "int",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "List[List[fonduer.candidates.models.Candidate]]",
                    "None",
                    "Union[str,type]",
                    "List[list[fonduer.candidates.models.Candidate]]",
                    "bool",
                    "Type"
                ],
                "combo_box": [
                    "models.Payment",
                    "bool",
                    "models.Trip",
                    "str",
                    "server.models.User",
                    "src.pip_shims.models.PipVersion",
                    "int"
                ]
            }
        },
        "FileSystemItemSelectWidget.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemItemSelectWidget._make_connections": {
            "name": "_make_connections",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemItemSelectWidget._update_data_from_line_edit": {
            "name": "_update_data_from_line_edit",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemItemSelectWidget.get_browse_action": {
            "name": "get_browse_action",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemItemSelectWidget.data": {
            "name": "data",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DirectorySelectWidget.get_browse_action": {
            "name": "get_browse_action",
            "location": 176,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectorySelectWidget.browse_dir": {
            "name": "browse_dir",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_file_callback": [
                    "BinaryIO",
                    "None"
                ]
            }
        },
        "FileSelectWidget.get_browse_action": {
            "name": "get_browse_action",
            "location": 203,
            "return": [
                "str",
                "Iterable[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSelectWidget.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSelectWidget.browse_file": {
            "name": "browse_file",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_file_callback": [
                    "AbstractSet[str]",
                    "None",
                    "Dict",
                    "str",
                    "List[str]",
                    "AbstractSet"
                ]
            }
        },
        "QtWidgetDelegateSelection.createEditor": {
            "name": "createEditor",
            "location": 262,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Type",
                    "Mapping[str,T]",
                    "Mapping"
                ],
                "option": [
                    "str",
                    "Dict",
                    "Iterable[str]"
                ],
                "index": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "QtWidgetDelegateSelection.setEditorData": {
            "name": "setEditorData",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "Tuple[int]"
                ],
                "index": [
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "Tuple[int]"
                ]
            }
        },
        "QtWidgetDelegateSelection.setModelData": {
            "name": "setModelData",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "bool",
                    "str",
                    "allennlp.models.model.Model",
                    "corporate.models.CustomerPlan"
                ],
                "model": [
                    "Tuple[Union[int,int,int,int]]",
                    "List[int]",
                    "Tuple[int,int,int,int]",
                    "float",
                    "int",
                    "Sequence[Sequence[T]]",
                    "T",
                    "src.main.core.models.area.Area"
                ],
                "index": [
                    "Tuple[Union[int,int,int,int]]",
                    "List[int]",
                    "Tuple[int,int,int,int]",
                    "float",
                    "int",
                    "Sequence[Sequence[T]]",
                    "T",
                    "src.main.core.models.area.Area"
                ]
            }
        },
        "DirectorySelectWidget.browse_dir.default_use_qt_dialog": {
            "name": "default_use_qt_dialog",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "FileSelectWidget.browse_file.use_qt_file_dialog": {
            "name": "use_qt_file_dialog",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/worker.py": {
        "ToolJobManager.flush_message_buffer": {
            "name": "flush_message_buffer",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolJobManager.abort": {
            "name": "abort",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolJobManager.get_results": {
            "name": "get_results",
            "location": 68,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "timeout_callback": [
                    "str",
                    "int",
                    "None",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "QtJobProcessor.refresh_events": {
            "name": "refresh_events",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UIWorker.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[Type]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "ProcessWorker.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessWorker.initialize_worker": {
            "name": "initialize_worker",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]"
                ],
                "max_workers": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "ProcessWorker.cancel": {
            "name": "cancel",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessWorker._exec_job": {
            "name": "_exec_job",
            "location": 129,
            "return": [
                "concurrent.futures._base.Future"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable",
                    "bool",
                    "Type[T]"
                ],
                "job": [
                    "Type",
                    "float"
                ],
                "args": [],
                "message_queue": [
                    "Type",
                    "float"
                ]
            }
        },
        "ProcessWorker.add_job": {
            "name": "add_job",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "Callable",
                    "bool",
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "ProcessWorker.run_all_jobs": {
            "name": "run_all_jobs",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessWorker.complete_task": {
            "name": "complete_task",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "bool",
                    "T",
                    "List[dict]",
                    "collections.abc.Awaitable[Any]",
                    "Awaitable[Any]"
                ]
            }
        },
        "ProcessWorker.on_completion": {
            "name": "on_completion",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/__init__.py": {},
    "Speedwagon-master/speedwagon/frontend/qtwidgets/dialog/dialogs.py": {
        "about_dialog_box": {
            "name": "about_dialog_box",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "Tuple[str]",
                    "Optional[int]"
                ]
            }
        },
        "ErrorDialogBox.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "ErrorDialogBox.event": {
            "name": "event",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtWidgets.QGraphicsSceneHoverEvent",
                    "List[dict]"
                ]
            }
        },
        "WorkProgressBar.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "WorkProgressBar.resizeEvent": {
            "name": "resizeEvent",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PySide2.QtGui.QResizeEvent",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "SystemInfoDialog.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "SystemInfoDialog.get_installed_packages": {
            "name": "get_installed_packages",
            "location": 155,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "AbsWorkflowProgressState.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 167,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "AbsWorkflowProgressState.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AbsWorkflowProgressState.start": {
            "name": "start",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsWorkflowProgressState.stop": {
            "name": "stop",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsWorkflowProgressState.close_dialog": {
            "name": "close_dialog",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "AbsWorkflowProgressState.set_buttons_to_close_only": {
            "name": "set_buttons_to_close_only",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "button_box": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbsWorkflowProgressState.reset_cancel_button": {
            "name": "reset_cancel_button",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsWorkflowProgressState.set_progress_to_none": {
            "name": "set_progress_to_none",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "progress_bar": [
                    "bool",
                    "str",
                    "int",
                    "list",
                    "Sequence[str]"
                ]
            }
        },
        "AbsWorkflowProgressState.hide_progress_bar": {
            "name": "hide_progress_bar",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "progress_bar": [
                    "BaseException",
                    "str",
                    "int",
                    "bool",
                    "Optional[BaseException]",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "WorkflowProgressStateIdle.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "WorkflowProgressStateIdle.stop": {
            "name": "stop",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateIdle._set_button_defaults": {
            "name": "_set_button_defaults",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateIdle.start": {
            "name": "start",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateWorking.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable",
                    "Iterable[T]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "WorkflowProgressStateWorking.start": {
            "name": "start",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateWorking.stop": {
            "name": "stop",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateWorking.close_dialog": {
            "name": "close_dialog",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str"
                ]
            }
        },
        "WorkflowProgressStateStopping.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[int]"
                ]
            }
        },
        "WorkflowProgressStateStopping.start": {
            "name": "start",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateStopping.stop": {
            "name": "stop",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateAborted.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[int]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "WorkflowProgressStateAborted.stop": {
            "name": "stop",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateFailed.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[int]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "WorkflowProgressStateFailed.stop": {
            "name": "stop",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressStateWorkingIndeterminate.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ]
            }
        },
        "WorkflowProgressStateDone.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable",
                    "Dict[str, object]"
                ]
            }
        },
        "WorkflowProgressStateDone.set_progress_to_full": {
            "name": "set_progress_to_full",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "progress_bar": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "WorkflowProgressStateDone.stop": {
            "name": "stop",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressGui.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "WorkflowProgressGui.write_html_block_to_console": {
            "name": "write_html_block_to_console",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "int",
                    "List[int]",
                    "float",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "WorkflowProgressGui.flush": {
            "name": "flush",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressGui.attach_logger": {
            "name": "attach_logger",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "int",
                    "bytearray",
                    "IO"
                ]
            }
        },
        "WorkflowProgressGui.remove_log_handles": {
            "name": "remove_log_handles",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgressGui.get_console_content": {
            "name": "get_console_content",
            "location": 449,
            "return": [
                "dict",
                "Optional[Dict]",
                "bool",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.__init__": {
            "name": "__init__",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "WorkflowProgress.stop_timer": {
            "name": "stop_timer",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.clean_local_console": {
            "name": "clean_local_console",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.current_state": {
            "name": "current_state",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.closeEvent": {
            "name": "closeEvent",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "Mapping",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "WorkflowProgress._follow_text": {
            "name": "_follow_text",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.calculate_window_width": {
            "name": "calculate_window_width",
            "location": 523,
            "return": [
                "bytearray",
                "str",
                "int"
            ],
            "arguments": {
                "font_used": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "characters_width": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "WorkflowProgress.start": {
            "name": "start",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.stop": {
            "name": "stop",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.failed": {
            "name": "failed",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.cancel_completed": {
            "name": "cancel_completed",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.success_completed": {
            "name": "success_completed",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowProgress.set_total_jobs": {
            "name": "set_total_jobs",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "WorkflowProgress.set_current_progress": {
            "name": "set_current_progress",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "WorkflowProgress.write_to_console": {
            "name": "write_to_console",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ],
                "level": [
                    "int",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "WorkflowProgressGui.DialogLogHandler.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkflowProgressGui.DialogLogHandler.flush": {
            "name": "flush",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/dialog/settings.py": {
        "UnsupportedOpenSettings.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "bool",
                    "str",
                    "int"
                ],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "Tuple[type]",
                    "List[str]",
                    "Type[T]",
                    "Dict"
                ]
            }
        },
        "UnsupportedOpenSettings.system_open_directory": {
            "name": "system_open_directory",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_directory": [
                    "bool",
                    "List[Dict[str, str]]",
                    "dict",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        },
        "SettingsDialog.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int",
                    "None"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "SettingsDialog.add_tab": {
            "name": "add_tab",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "dict"
                ],
                "tab_name": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "SettingsDialog.open_settings_dir": {
            "name": "open_settings_dir",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Any",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "GlobalSettingsTab.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int",
                    "None"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "GlobalSettingsTab.read_config_data": {
            "name": "read_config_data",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalSettingsTab.on_modified": {
            "name": "on_modified",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalSettingsTab.on_okay": {
            "name": "on_okay",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabsConfigurationTab.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int",
                    "None"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "TabsConfigurationTab.on_okay": {
            "name": "on_okay",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabsConfigurationTab.load": {
            "name": "load",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsBuilder.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "SettingsBuilder._build_tab_editor_tab": {
            "name": "_build_tab_editor_tab",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_dialog": [
                    "pyramid.config.Configurator",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "SettingsBuilder._build_global_settings": {
            "name": "_build_global_settings",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_dialog": [
                    "bool",
                    "dict"
                ]
            }
        },
        "SettingsBuilder.build": {
            "name": "build",
            "location": 273,
            "return": [
                "SettingsDialog"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsBuilder.add_global_settings": {
            "name": "add_global_settings",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SettingsBuilder.add_tabs_setting": {
            "name": "add_tabs_setting",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SettingsBuilder.add_open_settings": {
            "name": "add_open_settings",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[int]",
                    "list"
                ]
            }
        },
        "TabEditorWidget.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int",
                    "None"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "TabEditorWidget.load_ui_file": {
            "name": "load_ui_file",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabEditor.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "int",
                    "None"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "TabEditor.on_modified": {
            "name": "on_modified",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabEditor.tabs_file": {
            "name": "tabs_file",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TabEditor._changed_tab": {
            "name": "_changed_tab",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab": [
                    "str",
                    "List[List[Any]]",
                    "List[Dict[str, Any]]",
                    "models.Profile"
                ]
            }
        },
        "TabEditor._create_new_tab": {
            "name": "_create_new_tab",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabEditor._delete_tab": {
            "name": "_delete_tab",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabEditor._add_items_to_tab": {
            "name": "_add_items_to_tab",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabEditor._remove_items": {
            "name": "_remove_items",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabEditor.set_all_workflows": {
            "name": "set_all_workflows",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflows": [
                    "DefaultDict[int, List[Any]]",
                    "str",
                    "OrderedDict"
                ]
            }
        },
        "TabEditor.current_tab": {
            "name": "current_tab",
            "location": 473,
            "return": [
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/dialog/title_page_selection.py": {
        "FileSelectDelegate.createEditor": {
            "name": "createEditor",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "item": [
                    "str",
                    "List",
                    "bool",
                    "List[str]",
                    "Set[str]"
                ],
                "index": [
                    "str",
                    "List",
                    "bool",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "FileSelectDelegate.setEditorData": {
            "name": "setEditorData",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "bytes",
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "index": [
                    "Dict",
                    "bool",
                    "PyQt5.QtCore.QRect",
                    "bytes",
                    "int"
                ]
            }
        },
        "FileSelectDelegate.setModelData": {
            "name": "setModelData",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "str",
                    "bool",
                    "os.PathLike"
                ],
                "model": [
                    "int",
                    "bytes",
                    "Dict[str,Dict[Any,int]]",
                    "str",
                    "Dict[str,dict[Any,int]]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "index": [
                    "int",
                    "bytes",
                    "Dict[str,Dict[Any,int]]",
                    "str",
                    "Dict[str,dict[Any,int]]",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "PackagesModel.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "bool",
                    "str",
                    "Mapping",
                    "List[str]",
                    "int",
                    "Mapping[str,Any]"
                ],
                "parent": [
                    "bool",
                    "None",
                    "str",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        },
        "PackagesModel.columnCount": {
            "name": "columnCount",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackagesModel.rowCount": {
            "name": "rowCount",
            "location": 109,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackagesModel.headerData": {
            "name": "headerData",
            "location": 118,
            "return": [
                "Text",
                "Dict",
                "List[str]",
                "str",
                "bytes",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict",
                    "int",
                    "Dict[str,Any]"
                ],
                "orientation": [
                    "Optional[Iterable[T]]",
                    "Iterable[T]",
                    "bool",
                    "str",
                    "None",
                    "Dict[str,Any]"
                ],
                "role": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "PackagesModel.data": {
            "name": "data",
            "location": 134,
            "return": [
                "Text",
                "str",
                "None",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[float]",
                    "Set[int]",
                    "int",
                    "list"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "PackagesModel.results": {
            "name": "results",
            "location": 155,
            "return": [
                "str",
                "os.PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackagesModel.flags": {
            "name": "flags",
            "location": 159,
            "return": [
                "bool",
                "Mapping[str, Sequence[str]]",
                "str",
                "Union[type, Tuple[type, ...]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "PackageBrowser.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "None"
                ],
                "parent": [
                    "bool"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "PackageBrowser.data": {
            "name": "data",
            "location": 219,
            "return": [
                "str",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/frontend/qtwidgets/dialog/__init__.py": {},
    "Speedwagon-master/speedwagon/frontend/qtwidgets/ui/__init__.py": {},
    "Speedwagon-master/speedwagon/tasks/filesystem.py": {
        "DeleteFileSystemItem.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DeleteFileSystemItem.remove": {
            "name": "remove",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteFileSystemItem.work": {
            "name": "work",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteFile.task_description": {
            "name": "task_description",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteFile.remove": {
            "name": "remove",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteFile.work": {
            "name": "work",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteDirectory.remove": {
            "name": "remove",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteDirectory.task_description": {
            "name": "task_description",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/tasks/packaging.py": {
        "AbsFindPackageTask.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Optional[str]",
                    "IO",
                    "str",
                    "None"
                ]
            }
        },
        "AbsFindPackageTask.task_description": {
            "name": "task_description",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsFindPackageTask.work": {
            "name": "work",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsFindPackageTask.find_packages": {
            "name": "find_packages",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_path": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/tasks/prep.py": {
        "MakeMetaYamlTask.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_id": [
                    "str",
                    "bytes",
                    "bool",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ],
                "source": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "title_page": [
                    "int",
                    "Set[int]",
                    "str"
                ]
            }
        },
        "MakeMetaYamlTask.task_description": {
            "name": "task_description",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeMetaYamlTask.work": {
            "name": "work",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateChecksumTask.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_id": [
                    "str",
                    "bytes",
                    "bool",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ],
                "source": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GenerateChecksumTask.task_description": {
            "name": "task_description",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateChecksumTask.work": {
            "name": "work",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepTask.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "title_page": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "List",
                    "None"
                ]
            }
        },
        "PrepTask.task_description": {
            "name": "task_description",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepTask.work": {
            "name": "work",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/tasks/tasks.py": {
        "AbsSubtask.work": {
            "name": "work",
            "location": 39,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSubtask.log": {
            "name": "log",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Callable",
                    "str"
                ]
            }
        },
        "AbsSubtask.task_result": {
            "name": "task_result",
            "location": 47,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSubtask.results": {
            "name": "results",
            "location": 52,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSubtask.status": {
            "name": "status",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Any]",
                    "int",
                    "str",
                    "List[int]",
                    "bool",
                    "List[dict]",
                    "list"
                ]
            }
        },
        "AbsSubtask.exec": {
            "name": "exec",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSubtask.settings": {
            "name": "settings",
            "location": 71,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSubtask.parent_task_log_q": {
            "name": "parent_task_log_q",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[dict]",
                    "Optional[str]"
                ]
            }
        },
        "Subtask.task_description": {
            "name": "task_description",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtask.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtask.subtask_working_dir": {
            "name": "subtask_working_dir",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "float",
                    "Dict[str, Dict]"
                ]
            }
        },
        "Subtask.parent_task_log_q": {
            "name": "parent_task_log_q",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Subtask.task_result": {
            "name": "task_result",
            "location": 141,
            "return": [
                "bool",
                "str",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtask.status": {
            "name": "status",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "Subtask.work": {
            "name": "work",
            "location": 154,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtask.results": {
            "name": "results",
            "location": 168,
            "return": [
                "Callable[[Any], bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtask.set_results": {
            "name": "set_results",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "bool",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "set",
                    "List[str]"
                ]
            }
        },
        "Subtask.log": {
            "name": "log",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str"
                ]
            }
        },
        "Subtask.exec": {
            "name": "exec",
            "location": 181,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreTask.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreTask.status": {
            "name": "status",
            "location": 199,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreTask.parent_task_log_q": {
            "name": "parent_task_log_q",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "PreTask.exec": {
            "name": "exec",
            "location": 212,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreTask.log": {
            "name": "log",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str"
                ]
            }
        },
        "PreTask.work": {
            "name": "work",
            "location": 220,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreTask.task_result": {
            "name": "task_result",
            "location": 224,
            "return": [
                "bool",
                "str",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreTask.pretask_result": {
            "name": "pretask_result",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTask.on_completion": {
            "name": "on_completion",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTask.exec": {
            "name": "exec",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTask.status": {
            "name": "status",
            "location": 246,
            "return": [
                "TaskStatus",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTaskComponents.pretask": {
            "name": "pretask",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "AbsTaskComponents.posttask": {
            "name": "posttask",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.pretask": {
            "name": "pretask",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "enum.Enum",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        },
        "Task.posttask": {
            "name": "posttask",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "enum.Enum",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        },
        "Task.on_completion": {
            "name": "on_completion",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.exec": {
            "name": "exec",
            "location": 306,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.status": {
            "name": "status",
            "location": 311,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.main_subtasks": {
            "name": "main_subtasks",
            "location": 327,
            "return": [
                "List[str]",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.subtasks": {
            "name": "subtasks",
            "location": 331,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.status": {
            "name": "status",
            "location": 344,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.progress": {
            "name": "progress",
            "location": 379,
            "return": [
                "float",
                "List[Tuple[int,float,float]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.exec": {
            "name": "exec",
            "location": 385,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStageTask.process_subtask_results": {
            "name": "process_subtask_results",
            "location": 409,
            "return": [
                "bool",
                "Match",
                "int",
                "Tuple[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "subtask_results": [
                    "bool",
                    "dict",
                    "Optional[Any]"
                ]
            }
        },
        "AbsTaskBuilder.task": {
            "name": "task",
            "location": 416,
            "return": [
                "MultiStageTask",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTaskBuilder.add_subtask": {
            "name": "add_subtask",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "AbsTaskBuilder.build_task": {
            "name": "build_task",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsTaskBuilder.set_pretask": {
            "name": "set_pretask",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AbsTaskBuilder.set_posttask": {
            "name": "set_posttask",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseTaskBuilder.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTaskBuilder.add_subtask": {
            "name": "add_subtask",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "BaseTaskBuilder.build_task": {
            "name": "build_task",
            "location": 448,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTaskBuilder.task": {
            "name": "task",
            "location": 468,
            "return": [
                "bytes",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTaskBuilder.set_pretask": {
            "name": "set_pretask",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": [
                    "bool",
                    "float"
                ]
            }
        },
        "BaseTaskBuilder.set_posttask": {
            "name": "set_posttask",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": [
                    "bool",
                    "float"
                ]
            }
        },
        "TaskBuilder.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "List[str]",
                    "Optional[str]",
                    "Optional[\"Node\"]",
                    "Optional[Callable]",
                    "str",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "working_dir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TaskBuilder.build_task": {
            "name": "build_task",
            "location": 492,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskBuilder.add_subtask": {
            "name": "add_subtask",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": [
                    "Callable[..., None]",
                    "dict"
                ]
            }
        },
        "TaskBuilder._build_working_path2": {
            "name": "_build_working_path2",
            "location": 520,
            "return": [
                "str"
            ],
            "arguments": {
                "task_working_path": [
                    "str",
                    "Optional[str]"
                ],
                "task_type": [
                    "str",
                    "Optional[str]"
                ],
                "subtask_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TaskBuilder._build_task_working_path": {
            "name": "_build_task_working_path",
            "location": 531,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_path": [
                    "str",
                    "Optional[str]"
                ],
                "task_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TaskBuilder.set_pretask": {
            "name": "set_pretask",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": []
            }
        },
        "TaskBuilder.set_posttask": {
            "name": "set_posttask",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask": []
            }
        },
        "TaskBuilder.save": {
            "name": "save",
            "location": 582,
            "return": [
                "bytes"
            ],
            "arguments": {
                "task_obj": [
                    "str",
                    "Optional[Mapping]"
                ]
            }
        },
        "TaskBuilder.load": {
            "name": "load",
            "location": 588,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Dict[Hashable, int]",
                    "List[Dict[str, Any]]",
                    "list",
                    "str"
                ]
            }
        },
        "TaskBuilder._serialize_task": {
            "name": "_serialize_task",
            "location": 594,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "task_obj": [
                    "dict",
                    "str"
                ]
            }
        },
        "TaskBuilder._deserialize_task": {
            "name": "_deserialize_task",
            "location": 600,
            "return": [
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "task_cls": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "dict",
                    "Optional[str]",
                    "str"
                ],
                "attributes": [
                    "dict"
                ]
            }
        },
        "QueueAdapter.__init__": {
            "name": "__init__",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueAdapter.append": {
            "name": "append",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "float",
                    "Exception",
                    "bytes",
                    "dict"
                ]
            }
        },
        "QueueAdapter.set_message_queue": {
            "name": "set_message_queue",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "List[float]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "MultiStageTaskBuilder.__init__": {
            "name": "__init__",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "working_dir": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MultiStageTaskBuilder.task": {
            "name": "task",
            "location": 635,
            "return": [
                "MultiStageTask",
                "bytes",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/tasks/validation.py": {
        "MakeChecksumTask.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "checksum_report": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[int,bool]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "MakeChecksumTask.task_description": {
            "name": "task_description",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeChecksumTask.work": {
            "name": "work",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeCheckSumReportTask.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_filename": [
                    "str"
                ],
                "checksum_calculations": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MakeCheckSumReportTask.task_description": {
            "name": "task_description",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeCheckSumReportTask.work": {
            "name": "work",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateImageMetadataTask.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "profile_name": [
                    "str",
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "ValidateImageMetadataTask.task_description": {
            "name": "task_description",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateImageMetadataTask.work": {
            "name": "work",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/tasks/__init__.py": {},
    "Speedwagon-master/speedwagon/workflows/checksum_shared.py": {},
    "Speedwagon-master/speedwagon/workflows/workflow_batch_to_HathiTrust_TIFF.py": {
        "CaptureOneBatchToHathiComplete.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_settings": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "CaptureOneBatchToHathiComplete.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 64,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "Dict[str, Any]",
                    "str",
                    "Tuple[Any, Any, int]",
                    "int",
                    "list"
                ],
                "additional_data": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CaptureOneBatchToHathiComplete.get_user_options": {
            "name": "get_user_options",
            "location": 93,
            "return": [
                "List[Union[(speedwagon.workflow.ChoiceSelection, speedwagon.workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureOneBatchToHathiComplete.initial_task": {
            "name": "initial_task",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "CaptureOneBatchToHathiComplete.create_new_task": {
            "name": "create_new_task",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder",
                    "int"
                ]
            }
        },
        "CaptureOneBatchToHathiComplete.get_additional_info": {
            "name": "get_additional_info",
            "location": 167,
            "return": [
                "Optional[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "user_request_factory": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "options": [
                    "bool",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "pretask_results": [
                    "Dict[str, Any]",
                    "int",
                    "eth.abc.BlockHeaderAPI",
                    "dict"
                ]
            }
        },
        "CaptureOneBatchToHathiComplete.generate_report": {
            "name": "generate_report",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "str"
                ],
                "results": [
                    "Dict[str,Any]",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "CaptureOneBatchToHathiComplete.group_results": {
            "name": "group_results",
            "location": 227,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "Callable"
                ],
                "results_sorted": [
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "TransformPackageTask.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "bool",
                    "Dict[int,bool]",
                    "int"
                ],
                "destination": [
                    "str",
                    "bool",
                    "Dict[int,bool]",
                    "int"
                ]
            }
        },
        "TransformPackageTask.task_description": {
            "name": "task_description",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformPackageTask.work": {
            "name": "work",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindCaptureOnePackageTask.find_packages": {
            "name": "find_packages",
            "location": 273,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "search_path": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_capture_one_to_dl_compound.py": {
        "CaptureOneToDlCompoundWorkflow.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureOneToDlCompoundWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 42,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "CaptureOneToDlCompoundWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "CaptureOneToDlCompoundWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 105,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "PackageConverter.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "str"
                ],
                "packaging_id": [
                    "str",
                    "int",
                    "Type[Dict[str,str]]",
                    "Type"
                ],
                "existing_package": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "None",
                    "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                    "MutableSequence"
                ],
                "new_package_root": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[Dict]",
                    "Mapping",
                    "Optional[Mapping[str,str]]",
                    "Optional[str]"
                ]
            }
        },
        "PackageConverter.task_description": {
            "name": "task_description",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageConverter.work": {
            "name": "work",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_capture_one_to_dl_compound_and_dl.py": {
        "CaptureOneToDlCompoundAndDLWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 105,
            "return": [
                "List[Union[(speedwagon.workflow.ChoiceSelection, speedwagon.workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureOneToDlCompoundAndDLWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 131,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "CaptureOneToDlCompoundAndDLWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 181,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "CaptureOneToDlCompoundAndDLWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "OutputsValidValuesValidator.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys_to_check": [
                    "str",
                    "object",
                    "bytes"
                ]
            }
        },
        "OutputsValidValuesValidator.is_entry_valid_dir": {
            "name": "is_entry_valid_dir",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "callback": [
                    "None",
                    "str",
                    "Dict"
                ]
            }
        },
        "OutputsValidValuesValidator.is_valid": {
            "name": "is_valid",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputsValidValuesValidator.explanation": {
            "name": "explanation",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimumOutputsValidator.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "at_least_one_of": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "MinimumOutputsValidator.is_valid": {
            "name": "is_valid",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimumOutputsValidator.explanation": {
            "name": "explanation",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageConverter.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "str",
                    "Optional[str]"
                ],
                "packaging_id": [
                    "str",
                    "int",
                    "Type[Dict[str, str]]",
                    "Optional[int]"
                ],
                "existing_package": [
                    "str",
                    "int",
                    "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                    "List[int]",
                    "Union[List[str], str]",
                    "bool",
                    "Optional[str]"
                ],
                "new_package_root": [
                    "dict",
                    "str",
                    "Optional[Mapping[str, str]]",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "package_format": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PackageConverter.task_description": {
            "name": "task_description",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageConverter.work": {
            "name": "work",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_capture_one_to_hathi.py": {
        "CaptureOneToHathiTiffPackageWorkflow.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptureOneToHathiTiffPackageWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 38,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "CaptureOneToHathiTiffPackageWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "PackageConverter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "str"
                ],
                "packaging_id": [
                    "str",
                    "int",
                    "Type[Dict[str,str]]",
                    "Type"
                ],
                "existing_package": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "None",
                    "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                    "MutableSequence"
                ],
                "new_package_root": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[Dict]",
                    "Mapping",
                    "Optional[Mapping[str,str]]",
                    "Optional[str]"
                ]
            }
        },
        "PackageConverter.task_description": {
            "name": "task_description",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageConverter.work": {
            "name": "work",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_completeness.py": {
        "CompletenessWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 43,
            "return": [
                "List[Union[(workflow.BooleanSelect, workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompletenessWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 64,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [],
                "additional_data": []
            }
        },
        "CompletenessWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": []
            }
        },
        "CompletenessWorkflow.generate_report": {
            "name": "generate_report",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "results": []
            }
        },
        "CompletenessWorkflow.initial_task": {
            "name": "initial_task",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": []
            }
        },
        "CompletenessWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "CompletenessSubTask.work": {
            "name": "work",
            "location": 167,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiCheckMissingPackageFilesTask.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "HathiCheckMissingPackageFilesTask.task_description": {
            "name": "task_description",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiCheckMissingPackageFilesTask.work": {
            "name": "work",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiCheckMissingComponentsTask.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_ocr": [],
                "package_path": []
            }
        },
        "HathiCheckMissingComponentsTask.task_description": {
            "name": "task_description",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiCheckMissingComponentsTask.work": {
            "name": "work",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateExtraSubdirectoriesTask.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "ValidateExtraSubdirectoriesTask.task_description": {
            "name": "task_description",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateExtraSubdirectoriesTask.work": {
            "name": "work",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateChecksumsTask.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "ValidateChecksumsTask.task_description": {
            "name": "task_description",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateChecksumsTask.work": {
            "name": "work",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateMarcTask.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "ValidateMarcTask.task_description": {
            "name": "task_description",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateMarcTask.work": {
            "name": "work",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateOCRFilesTask.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "ValidateOCRFilesTask.task_description": {
            "name": "task_description",
            "location": 442,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateOCRFilesTask.work": {
            "name": "work",
            "location": 445,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateYMLTask.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "ValidateYMLTask.task_description": {
            "name": "task_description",
            "location": 488,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateYMLTask.work": {
            "name": "work",
            "location": 491,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateOCFilesUTF8Task.__init__": {
            "name": "__init__",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "ValidateOCFilesUTF8Task.task_description": {
            "name": "task_description",
            "location": 536,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateOCFilesUTF8Task.work": {
            "name": "work",
            "location": 539,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiManifestGenerationTask.__init__": {
            "name": "__init__",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_root": []
            }
        },
        "HathiManifestGenerationTask.task_description": {
            "name": "task_description",
            "location": 584,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiManifestGenerationTask.work": {
            "name": "work",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageNamingConventionTask.__init__": {
            "name": "__init__",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "PackageNamingConventionTask.task_description": {
            "name": "task_description",
            "location": 631,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageNamingConventionTask.work": {
            "name": "work",
            "location": 634,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageNamingConventionTask._generate_warning": {
            "name": "_generate_warning",
            "location": 649,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "package_path": []
            }
        },
        "CompletenessReportBuilder.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompletenessReportBuilder.generate_error_report": {
            "name": "generate_error_report",
            "location": 680,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompletenessReportBuilder._get_result": {
            "name": "_get_result",
            "location": 689,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "results_grouped": [],
                "key": []
            }
        },
        "CompletenessReportBuilder.build_report": {
            "name": "build_report",
            "location": 705,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompletenessWorkflow.discover_task_metadata.directory_only_filter": {
            "name": "directory_only_filter",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        },
        "ValidateOCFilesUTF8Task.work.filter_ocr_only": {
            "name": "filter_ocr_only",
            "location": 540,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_convertCaptureOnePreservationToDigitalLibJP2.py": {
        "AbsProcessStrategy.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsProcessStrategy.process": {
            "name": "process",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "destination_path": [
                    "str"
                ]
            }
        },
        "ProcessFile.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process_strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ProcessFile.process": {
            "name": "process",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "destination_path": [
                    "str"
                ]
            }
        },
        "ProcessFile.status_message": {
            "name": "status_message",
            "location": 38,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessFile.output": {
            "name": "output",
            "location": 42,
            "return": [
                "str",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertFile.process": {
            "name": "process",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "destination_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 79,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow.get_user_options": {
            "name": "get_user_options",
            "location": 114,
            "return": [
                "List[speedwagon.workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow.create_new_task": {
            "name": "create_new_task",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ConvertTiffPreservationToDLJp2Workflow.generate_report": {
            "name": "generate_report",
            "location": 153,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "Optional[Dict[object, Any]]"
                ],
                "results": [
                    "Dict",
                    "List",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow._partition_results": {
            "name": "_partition_results",
            "location": 187,
            "return": [
                "Tuple[(itertools.filterfalse, Iterator)]"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "Callable"
                ],
                "results": [
                    "List[int]",
                    "Dict[str,Any]",
                    "str",
                    "int"
                ]
            }
        },
        "PackageImageConverterTask.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file_path": [
                    "str",
                    "bool"
                ],
                "dest_path": [
                    "str"
                ]
            }
        },
        "PackageImageConverterTask.task_description": {
            "name": "task_description",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageImageConverterTask.work": {
            "name": "work",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow.discover_task_metadata.filter_only_tif_files": {
            "name": "filter_only_tif_files",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        },
        "ConvertTiffPreservationToDLJp2Workflow._partition_results.successful": {
            "name": "successful",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "res": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_convertTifftoHathiTrustJP2.py": {
        "AbsProcessStrategy.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsProcessStrategy.process": {
            "name": "process",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "django.core.files.storage.Storage"
                ],
                "destination_path": [
                    "str",
                    "django.core.files.storage.Storage"
                ]
            }
        },
        "ProcessFile.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process_strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ProcessFile.process": {
            "name": "process",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "destination_path": [
                    "str"
                ]
            }
        },
        "ProcessFile.status_message": {
            "name": "status_message",
            "location": 41,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertFile.process": {
            "name": "process",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "Dict"
                ],
                "destination_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConvertFile.generate_jp2": {
            "name": "generate_jp2",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "source_file": [
                    "str",
                    "List[str]",
                    "List"
                ],
                "output_file_path": [
                    "List[str]",
                    "str",
                    "NamedTuple",
                    "Optional[tuple]",
                    "Tuple",
                    "None"
                ]
            }
        },
        "CopyFile.process": {
            "name": "process",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "destination_path": [
                    "str",
                    "Deque",
                    "deque[str]",
                    "os.PathLike"
                ]
            }
        },
        "ConvertTiffToHathiJp2Workflow.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertTiffToHathiJp2Workflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 101,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "ConvertTiffToHathiJp2Workflow.create_new_task": {
            "name": "create_new_task",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder",
                    "Callable"
                ]
            }
        },
        "ImageConvertTask.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file_path": [
                    "str"
                ],
                "output_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ImageConvertTask.task_description": {
            "name": "task_description",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageConvertTask.work": {
            "name": "work",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyTask.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file_path": [
                    "str"
                ],
                "output_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CopyTask.task_description": {
            "name": "task_description",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyTask.work": {
            "name": "work",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertTiffToHathiJp2Workflow.discover_task_metadata.filter_only_tif_files": {
            "name": "filter_only_tif_files",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_get_marc.py": {
        "strip_volume": {
            "name": "strip_volume",
            "location": 498,
            "return": [
                "int"
            ],
            "arguments": {
                "full_bib_id": []
            }
        },
        "provide_info": {
            "name": "provide_info",
            "location": 668,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func": []
            }
        },
        "GenerateMarcXMLFilesWorkflow.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_settings": [
                    "None"
                ]
            }
        },
        "GenerateMarcXMLFilesWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 88,
            "return": [
                "List[Union[(workflow.BooleanSelect, workflow.ChoiceSelection, workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateMarcXMLFilesWorkflow.filter_bib_id_folders": {
            "name": "filter_bib_id_folders",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "GenerateMarcXMLFilesWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 128,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [],
                "additional_data": []
            }
        },
        "GenerateMarcXMLFilesWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 164,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "GenerateMarcXMLFilesWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": []
            }
        },
        "GenerateMarcXMLFilesWorkflow.generate_report": {
            "name": "generate_report",
            "location": 258,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "results": []
            }
        },
        "GenerateMarcXMLFilesWorkflow._get_identifier_volume": {
            "name": "_get_identifier_volume",
            "location": 292,
            "return": [
                "Tuple[(str, Optional[str])]"
            ],
            "arguments": {
                "job_args": []
            }
        },
        "AbsMarcFileStrategy.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_url": []
            }
        },
        "AbsMarcFileStrategy.get_record": {
            "name": "get_record",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "AbsMarcFileStrategy.download_record": {
            "name": "download_record",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "url": []
            }
        },
        "DependentTruthyValueValidation.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "required_true_keys": []
            }
        },
        "DependentTruthyValueValidation._has_required_key": {
            "name": "_has_required_key",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_data": [],
                "key": []
            }
        },
        "DependentTruthyValueValidation._requirement_is_also_true": {
            "name": "_requirement_is_also_true",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [],
                "dependents": []
            }
        },
        "DependentTruthyValueValidation.is_valid": {
            "name": "is_valid",
            "location": 378,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependentTruthyValueValidation.explanation": {
            "name": "explanation",
            "location": 389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiredValueValidation.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RequiredValueValidation._has_key": {
            "name": "_has_key",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_data": [],
                "key": []
            }
        },
        "RequiredValueValidation._is_not_none": {
            "name": "_is_not_none",
            "location": 426,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_data": [],
                "key": []
            }
        },
        "RequiredValueValidation._not_empty_str": {
            "name": "_not_empty_str",
            "location": 430,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_data": [],
                "key": []
            }
        },
        "RequiredValueValidation.is_valid": {
            "name": "is_valid",
            "location": 434,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiredValueValidation.explanation": {
            "name": "explanation",
            "location": 444,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMarcBibId.get_record": {
            "name": "get_record",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "GetMarcMMSID.get_record": {
            "name": "get_record",
            "location": 485,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "MarcGeneratorTask.__init__": {
            "name": "__init__",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "identifier_type": [],
                "output_name": [],
                "server_url": []
            }
        },
        "MarcGeneratorTask.task_description": {
            "name": "task_description",
            "location": 537,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarcGeneratorTask.identifier_type": {
            "name": "identifier_type",
            "location": 541,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MarcGeneratorTask.identifier": {
            "name": "identifier",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MarcGeneratorTask.reflow_xml": {
            "name": "reflow_xml",
            "location": 554,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": []
            }
        },
        "MarcGeneratorTask.work": {
            "name": "work",
            "location": 568,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarcGeneratorTask.write_file": {
            "name": "write_file",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "EnhancementTask.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml_file": []
            }
        },
        "EnhancementTask.work": {
            "name": "work",
            "location": 635,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnhancementTask.task_description": {
            "name": "task_description",
            "location": 638,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnhancementTask.to_pretty_string": {
            "name": "to_pretty_string",
            "location": 642,
            "return": [
                "str"
            ],
            "arguments": {
                "root": []
            }
        },
        "EnhancementTask.redraw_tree": {
            "name": "redraw_tree",
            "location": 652,
            "return": [
                "Any"
            ],
            "arguments": {
                "tree": []
            }
        },
        "provide_info.wrapped": {
            "name": "wrapped",
            "location": 670,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "MarcEnhancement035Task.find_959_field_with_uiudb": {
            "name": "find_959_field_with_uiudb",
            "location": 687,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [],
                "tree": []
            }
        },
        "MarcEnhancement035Task.has_959_field_with_uiudb": {
            "name": "has_959_field_with_uiudb",
            "location": 707,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "tree": []
            }
        },
        "MarcEnhancement035Task.new_035_field": {
            "name": "new_035_field",
            "location": 724,
            "return": [
                "ET.Element"
            ],
            "arguments": {
                "data": []
            }
        },
        "MarcEnhancement035Task.work": {
            "name": "work",
            "location": 751,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarcEnhancement955Task.__init__": {
            "name": "__init__",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "added_value": [],
                "xml_file": []
            }
        },
        "MarcEnhancement955Task.work": {
            "name": "work",
            "location": 793,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarcEnhancement955Task.enhance_tree_with_955": {
            "name": "enhance_tree_with_955",
            "location": 807,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "MarcEnhancement955Task.create_new_955_element": {
            "name": "create_new_955_element",
            "location": 823,
            "return": [
                "ET.Element"
            ],
            "arguments": {
                "added_value": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_hathiprep.py": {
        "HathiPrepWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 32,
            "return": [
                "List[Union[(speedwagon.workflow.ChoiceSelection, speedwagon.workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiPrepWorkflow.initial_task": {
            "name": "initial_task",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "HathiPrepWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 62,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "int",
                    "Type[int]",
                    "Type[str]"
                ]
            }
        },
        "HathiPrepWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "int",
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "HathiPrepWorkflow.get_additional_info": {
            "name": "get_additional_info",
            "location": 129,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_request_factory": [
                    "str",
                    "Dict[str, str]"
                ],
                "options": [
                    "Dict",
                    "str",
                    "bool"
                ],
                "pretask_results": [
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "HathiPrepWorkflow.generate_report": {
            "name": "generate_report",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "Dict",
                    "int",
                    "Type",
                    "Union[Callable,Type]"
                ],
                "results": [
                    "Dict[int,Dict[str,Any]]",
                    "List",
                    "Dict[int,dict[str,Any]]",
                    "Tuple",
                    "Dict[str,int]",
                    "Tuple[str,Any]",
                    "Tuple[Union[str,Any]]"
                ]
            }
        },
        "FindHathiPackagesTask.find_packages": {
            "name": "find_packages",
            "location": 188,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "search_path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FindHathiPackagesTask.find_packages.find_dirs": {
            "name": "find_dirs",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "os.DirEntry",
                    "str",
                    "Tuple[str, str]",
                    "Sequence[str]",
                    "List[float]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_hathi_limited_to_dl_compound.py": {
        "HathiLimitedToDLWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 24,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "HathiLimitedToDLWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "HathiLimitedToDLWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 49,
            "return": [
                "List[speedwagon.workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HathiLimitedToDLWorkflow.generate_report": {
            "name": "generate_report",
            "location": 59,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "cls": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "Dict",
                    "int",
                    "Type",
                    "Union[Callable,Type]"
                ],
                "results": [
                    "int",
                    "List[T]",
                    "Dict[str, Dict[str, Any]]",
                    "Set[str]",
                    "List[int]"
                ]
            }
        },
        "HathiLimitedToDLWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "PackageConverter.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "int",
                    "str",
                    "List"
                ],
                "dst": [
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "PackageConverter.task_description": {
            "name": "task_description",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageConverter.work": {
            "name": "work",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_make_checksum.py": {
        "CreateChecksumWorkflow.locate_files": {
            "name": "locate_files",
            "location": 30,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "package_root": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CreateChecksumWorkflow.sort_results": {
            "name": "sort_results",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Callable"
                ],
                "results": [
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "CreateChecksumWorkflow.completion_task": {
            "name": "completion_task",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ],
                "results": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Set[str]]",
                    "Callable"
                ]
            }
        },
        "CreateChecksumWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "MakeChecksumBatchSingleWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 98,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "MakeChecksumBatchSingleWorkflow.generate_report": {
            "name": "generate_report",
            "location": 120,
            "return": [
                "str",
                "float",
                "Union[str,bytes]"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "float"
                ],
                "results": [
                    "List[int]",
                    "float"
                ]
            }
        },
        "MakeChecksumBatchSingleWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 134,
            "return": [
                "List[speedwagon.workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeChecksumBatchMultipleWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 156,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "MakeChecksumBatchMultipleWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 185,
            "return": [
                "List[speedwagon.workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeChecksumBatchMultipleWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "MakeChecksumBatchMultipleWorkflow.generate_report": {
            "name": "generate_report",
            "location": 212,
            "return": [
                "str",
                "float",
                "Union[str,bytes]"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "float"
                ],
                "results": [
                    "List[int]",
                    "float"
                ]
            }
        },
        "RegenerateChecksumBatchSingleWorkflow.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegenerateChecksumBatchSingleWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 243,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "RegenerateChecksumBatchSingleWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "RegenerateChecksumBatchSingleWorkflow.completion_task": {
            "name": "completion_task",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ],
                "results": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Set[str]]",
                    "Callable"
                ]
            }
        },
        "RegenerateChecksumBatchSingleWorkflow.generate_report": {
            "name": "generate_report",
            "location": 293,
            "return": [
                "str",
                "float",
                "Union[str,bytes]"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "float"
                ],
                "results": [
                    "List[int]",
                    "float"
                ]
            }
        },
        "RegenerateChecksumBatchMultipleWorkflow.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegenerateChecksumBatchMultipleWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 326,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "RegenerateChecksumBatchMultipleWorkflow.completion_task": {
            "name": "completion_task",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "str",
                    "speedwagon.tasks.TaskBuilder",
                    "int"
                ],
                "results": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Set[str]]",
                    "Callable"
                ]
            }
        },
        "RegenerateChecksumBatchMultipleWorkflow.generate_report": {
            "name": "generate_report",
            "location": 373,
            "return": [
                "str",
                "float",
                "Union[str,bytes]"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "float"
                ],
                "results": [
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_make_jp2.py": {
        "_filter_tif_only": {
            "name": "_filter_tif_only",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        },
        "AbsProfile.locate_source_files": {
            "name": "locate_source_files",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "AbsProfile.image_factory": {
            "name": "image_factory",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalLibraryProfile.locate_source_files": {
            "name": "locate_source_files",
            "location": 42,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "DigitalLibraryProfile._find_root_access": {
            "name": "_find_root_access",
            "location": 50,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "HathiTrustProfile.locate_source_files": {
            "name": "locate_source_files",
            "location": 60,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "HathiTrustProfile._find_root_access": {
            "name": "_find_root_access",
            "location": 69,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "ProfileFactory.create": {
            "name": "create",
            "location": 83,
            "return": [
                "Union[(DigitalLibraryProfile, HathiTrustProfile)]"
            ],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "ProfileFactory.profile_names": {
            "name": "profile_names",
            "location": 88,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MakeJp2Workflow.get_user_options": {
            "name": "get_user_options",
            "location": 113,
            "return": [
                "List[Union[(speedwagon.workflow.ChoiceSelection, speedwagon.workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeJp2Workflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 127,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [],
                "additional_data": []
            }
        },
        "MakeJp2Workflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MakeJp2Workflow.create_new_task": {
            "name": "create_new_task",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": []
            }
        },
        "MakeJp2Workflow.generate_report": {
            "name": "generate_report",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "results": []
            }
        },
        "EnsurePathTask.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "EnsurePathTask.task_description": {
            "name": "task_description",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnsurePathTask.work": {
            "name": "work",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertFileTask.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [],
                "destination_file": [],
                "image_factory_name": []
            }
        },
        "ConvertFileTask.task_description": {
            "name": "task_description",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertFileTask.work": {
            "name": "work",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_medusa_preingest.py": {
        "validate_missing_values": {
            "name": "validate_missing_values",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "user_args": [
                    "Dict",
                    "Dict[str,Any]",
                    "Iterable[str]"
                ]
            }
        },
        "validate_path_valid": {
            "name": "validate_path_valid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "user_args": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "find_capture_one_data": {
            "name": "find_capture_one_data",
            "location": 279,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MedusaPreingestCuration.initial_task": {
            "name": "initial_task",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder",
                    "str"
                ]
            }
        },
        "MedusaPreingestCuration.validate_user_options": {
            "name": "validate_user_options",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MedusaPreingestCuration.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 59,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "MedusaPreingestCuration.get_additional_info": {
            "name": "get_additional_info",
            "location": 82,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "user_request_factory": [
                    "str",
                    "dict",
                    "Callable[[], bool]",
                    "List[Tuple[str, str, int]]"
                ],
                "options": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "pretask_results": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "MedusaPreingestCuration.sort_item_data": {
            "name": "sort_item_data",
            "location": 97,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict",
                    "List[dict]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "MedusaPreingestCuration.get_user_options": {
            "name": "get_user_options",
            "location": 116,
            "return": [
                "List[Union[(workflow.BooleanSelect, workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MedusaPreingestCuration.generate_report": {
            "name": "generate_report",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "Dict",
                    "int",
                    "Type",
                    "Union[Callable,Type]"
                ],
                "results": [
                    "Dict",
                    "str",
                    "Optional[Any]",
                    "int",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "MedusaPreingestCuration.create_new_task": {
            "name": "create_new_task",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "FindOffendingFiles.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindOffendingFiles.task_description": {
            "name": "task_description",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindOffendingFiles.locate_folders": {
            "name": "locate_folders",
            "location": 218,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "starting_dir": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "recursive": [
                    "str",
                    "bool"
                ]
            }
        },
        "FindOffendingFiles.work": {
            "name": "work",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindOffendingFiles.locate_results": {
            "name": "locate_results",
            "location": 235,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindOffendingFiles.locate_offending_subdirectories": {
            "name": "locate_offending_subdirectories",
            "location": 252,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "FindOffendingFiles.locate_offending_files": {
            "name": "locate_offending_files",
            "location": 256,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str"
                ]
            }
        },
        "FindOffendingFiles.locate_offending_files_and_folders": {
            "name": "locate_offending_files_and_folders",
            "location": 271,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_ocr.py": {
        "locate_tessdata": {
            "name": "locate_tessdata",
            "location": 18,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "path_contains_traineddata": {
            "name": "path_contains_traineddata",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "OCRWorkflow.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OCRWorkflow._get_tessdata_dir": {
            "name": "_get_tessdata_dir",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "global_settings": [
                    "str",
                    "Dict[str, Any]",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "OCRWorkflow.set_description": {
            "name": "set_description",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Union[os.PathLike, str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "OCRWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 99,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "OCRWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "OCRWorkflow.initial_task": {
            "name": "initial_task",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder",
                    "dict",
                    "str"
                ]
            }
        },
        "OCRWorkflow.get_file_extension": {
            "name": "get_file_extension",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "file_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "OCRWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 167,
            "return": [
                "List[Union[(speedwagon.workflow.ChoiceSelection, speedwagon.workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OCRWorkflow.get_tesseract_path": {
            "name": "get_tesseract_path",
            "location": 195,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OCRWorkflow.get_available_languages": {
            "name": "get_available_languages",
            "location": 201,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "path": [
                    "bool"
                ]
            }
        },
        "OCRWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "OCRWorkflow.generate_report": {
            "name": "generate_report",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "int",
                    "List[Union[int, float]]",
                    "List[str]"
                ],
                "results": [
                    "list",
                    "int",
                    "List[Union[int, float]]",
                    "List[str]"
                ]
            }
        },
        "OCRWorkflow._get_ocr_tasks": {
            "name": "_get_ocr_tasks",
            "location": 248,
            "return": [
                "list"
            ],
            "arguments": {
                "results": [
                    "str"
                ]
            }
        },
        "FindImagesTask.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "int",
                    "bool"
                ],
                "file_extension": [
                    "str",
                    "Iterable[str]",
                    "BinaryIO"
                ]
            }
        },
        "FindImagesTask.task_description": {
            "name": "task_description",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindImagesTask.work": {
            "name": "work",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateOCRFileTask.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_image": [
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "str",
                    "Iterable",
                    "Callable"
                ],
                "out_text_file": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "TextIO",
                    "os.PathLike"
                ],
                "lang": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "float"
                ],
                "tesseract_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "GenerateOCRFileTask.task_description": {
            "name": "task_description",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateOCRFileTask.set_tess_path": {
            "name": "set_tess_path",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "path": [
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "list"
                ]
            }
        },
        "GenerateOCRFileTask.work": {
            "name": "work",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateOCRFileTask.read_image": {
            "name": "read_image",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "lang": [
                    "str"
                ]
            }
        },
        "OCRWorkflow.get_available_languages.filter_only_trainingdata": {
            "name": "filter_only_trainingdata",
            "location": 204,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "OCRWorkflow._get_ocr_tasks.filter_ocr_gen_tasks": {
            "name": "filter_ocr_gen_tasks",
            "location": 252,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "FindImagesTask.work.find_images": {
            "name": "find_images",
            "location": 277,
            "return": [],
            "arguments": {
                "file_located": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_validate_hathi_metadata.py": {
        "ValidateImageMetadataWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 31,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "ValidateImageMetadataWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 42,
            "return": [
                "List[workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateImageMetadataWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "ValidateImageMetadataWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MetadataValidatorTask.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "BinaryIO",
                    "List[str]"
                ]
            }
        },
        "MetadataValidatorTask.task_description": {
            "name": "task_description",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataValidatorTask.work": {
            "name": "work",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_validate_metadata.py": {
        "ValidateMetadataWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 40,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "Dict[int, Any]",
                    "dict",
                    "Callable[[List[Any]], List[Any]]"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "ValidateMetadataWorkflow.initial_task": {
            "name": "initial_task",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "float"
                ]
            }
        },
        "ValidateMetadataWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 65,
            "return": [
                "List[Union[(speedwagon.workflow.ChoiceSelection, speedwagon.workflow.DirectorySelect)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateMetadataWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ValidateMetadataWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "ValidateMetadataWorkflow.generate_report": {
            "name": "generate_report",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "Dict",
                    "int",
                    "Type",
                    "Union[Callable,Type]"
                ],
                "results": [
                    "List",
                    "str",
                    "Dict",
                    "bool",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "LocateImagesTask.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Callable",
                    "str",
                    "Dict[int,int]",
                    "Set[str]",
                    "int",
                    "Iterable[str]"
                ],
                "profile_name": [
                    "Exception",
                    "Type",
                    "Type[GenericList]"
                ]
            }
        },
        "LocateImagesTask.task_description": {
            "name": "task_description",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocateImagesTask.work": {
            "name": "work",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateMetadataWorkflow.generate_report.validation_result_filter": {
            "name": "validation_result_filter",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_result": [
                    "Dict[str, str]",
                    "Optional[Any]",
                    "asgard.clients.chronos.models.job.ChronosJob"
                ]
            }
        },
        "ValidateMetadataWorkflow.generate_report.filter_only_invalid": {
            "name": "filter_only_invalid",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_result": [
                    "str",
                    "bool",
                    "job.AbsWorkflow",
                    "dict"
                ]
            }
        },
        "ValidateMetadataWorkflow.generate_report.invalid_messages": {
            "name": "invalid_messages",
            "location": 125,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "task_result": [
                    "str",
                    "bytes",
                    "Tuple[int, int]",
                    "Optional[Dict]",
                    "Mapping",
                    "Optional[Any]"
                ]
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_verify_checksums.py": {
        "ChecksumWorkflow.locate_checksum_files": {
            "name": "locate_checksum_files",
            "location": 56,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "ChecksumWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 68,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "ChecksumWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 90,
            "return": [
                "List[workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ChecksumWorkflow.initial_task": {
            "name": "initial_task",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder",
                    "str"
                ]
            }
        },
        "ChecksumWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ChecksumWorkflow.generate_report": {
            "name": "generate_report",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Optional[Union[str, Any]]",
                    "int",
                    "Sequence[str]"
                ],
                "results": [
                    "Type[T]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "ChecksumWorkflow.find_failed": {
            "name": "find_failed",
            "location": 174,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "int",
                    "Union[str, Iterable[str]]"
                ],
                "new_results": [
                    "dict",
                    "Dict[str, str]",
                    "Iterable[T]"
                ]
            }
        },
        "ChecksumWorkflow._sort_results": {
            "name": "_sort_results",
            "location": 188,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Callable"
                ],
                "results": [
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReadChecksumReportTask.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "ReadChecksumReportTask.task_description": {
            "name": "task_description",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadChecksumReportTask.work": {
            "name": "work",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateChecksumTask.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "file_path": [
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "expected_hash": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "source_report": [
                    "bool",
                    "str"
                ]
            }
        },
        "ValidateChecksumTask.task_description": {
            "name": "task_description",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateChecksumTask.work": {
            "name": "work",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsComparisonMethod.compare": {
            "name": "compare",
            "location": 302,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "CaseSensitiveComparison.compare": {
            "name": "compare",
            "location": 308,
            "return": [
                "bool",
                "float",
                "Tuple[Any,Any,Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "CaseInsensitiveComparison.compare": {
            "name": "compare",
            "location": 314,
            "return": [
                "bool",
                "str",
                "List",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "VerifyChecksumBatchSingleWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "VerifyChecksumBatchSingleWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 342,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "VerifyChecksumBatchSingleWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 367,
            "return": [
                "List[workflow.FileSelectData]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyChecksumBatchSingleWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "VerifyChecksumBatchSingleWorkflow.generate_report": {
            "name": "generate_report",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list"
                ],
                "results": [
                    "List[str]",
                    "str",
                    "asgard.models.job.ScheduledJob",
                    "\"Task\"",
                    "List[int]"
                ]
            }
        },
        "VerifyChecksumBatchSingleWorkflow.sort_results": {
            "name": "sort_results",
            "location": 425,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Callable"
                ],
                "results": [
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "VerifyChecksumBatchSingleWorkflow.find_failed": {
            "name": "find_failed",
            "location": 452,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "int",
                    "Union[str, Iterable[str]]"
                ],
                "new_results": [
                    "dict",
                    "Dict[str, str]",
                    "Iterable[T]"
                ]
            }
        },
        "ChecksumTask.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumTask.task_description": {
            "name": "task_description",
            "location": 476,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumTask.work": {
            "name": "work",
            "location": 480,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumWorkflow.generate_report.validation_result_filter": {
            "name": "validation_result_filter",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_result": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/workflow_zip_packages.py": {
        "ZipPackagesWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 33,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "ZipPackagesWorkflow.validate_user_options": {
            "name": "validate_user_options",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ZipPackagesWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 61,
            "return": [
                "List[workflow.DirectorySelect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipPackagesWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "ZipPackagesWorkflow.generate_report": {
            "name": "generate_report",
            "location": 80,
            "return": [
                "Text",
                "str",
                "bytes",
                "Iterable[str]",
                "Iterator"
            ],
            "arguments": {
                "cls": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "Dict",
                    "int",
                    "Type",
                    "Union[Callable,Type]"
                ],
                "results": [
                    "List[speedwagon.tasks.Result]",
                    "Callable",
                    "bool",
                    "Dict",
                    "int",
                    "Type",
                    "Union[Callable,Type]"
                ]
            }
        },
        "ZipTask.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "str"
                ],
                "destination_path": [
                    "str"
                ]
            }
        },
        "ZipTask.task_description": {
            "name": "task_description",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipTask.work": {
            "name": "work",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/speedwagon/workflows/__init__.py": {},
    "Speedwagon-master/tests/test_application_launcher.py": {
        "TestSingleWorkflowLauncher.test_commands_called": {
            "name": "test_commands_called",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Callable",
                    "bool",
                    "Callable[,None]"
                ],
                "monkeypatch": [],
                "times_run_in_a_row": [
                    "bool",
                    "str",
                    "int",
                    "bob_emploi.frontend.api.project_pb2.Project"
                ]
            }
        },
        "TestSingleWorkflowLauncher.test_workflow_not_set_throw_exception_when_run": {
            "name": "test_workflow_not_set_throw_exception_when_run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplicationLauncher.test_application_launcher_startup": {
            "name": "test_application_launcher_startup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/test_config.py": {
        "TestConfigLoader.test_loads_from_setting_file": {
            "name": "test_loads_from_setting_file",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigLoader.test_cli_overrides_setting_file": {
            "name": "test_cli_overrides_setting_file",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/test_get_config.py": {
        "dummy_config": {
            "name": "dummy_config",
            "location": 28,
            "return": [
                "typing.Generator[MockConfig]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "test_get_config": {
            "name": "test_get_config",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_get_config__getitem__": {
            "name": "test_get_config__getitem__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "test_get_config__contains__": {
            "name": "test_get_config__contains__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "bool",
                    "None",
                    "configparser.ConfigParser",
                    "Optional[bool]"
                ]
            }
        },
        "test_get_config__iter__": {
            "name": "test_get_config__iter__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "Dict",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        },
        "test_read_settings": {
            "name": "test_read_settings",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_nix_get_app_data_directory": {
            "name": "test_nix_get_app_data_directory",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict",
                    "pathlib.Path"
                ],
                "tmpdir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_nix_get_user_data_directory": {
            "name": "test_nix_get_user_data_directory",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict",
                    "pathlib.Path"
                ]
            }
        },
        "test_windows_get_app_data_directory": {
            "name": "test_windows_get_app_data_directory",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict",
                    "pathlib.Path"
                ]
            }
        },
        "test_windows_get_app_data_directory_no_LocalAppData": {
            "name": "test_windows_get_app_data_directory_no_LocalAppData",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int]"
                ]
            }
        },
        "test_windows_get_user_data_directory": {
            "name": "test_windows_get_user_data_directory",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "pathlib.Path"
                ]
            }
        },
        "default_config_file": {
            "name": "default_config_file",
            "location": 151,
            "return": [
                "str",
                "pathlib.Path",
                "Dict[str,str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "monkeypatch": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "test_generate_default_creates_file": {
            "name": "test_generate_default_creates_file",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config_file": [
                    "str",
                    "Callable[str,str]",
                    "Callable[[str],str]",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "test_generate_default_contains_workflow_keys": {
            "name": "test_generate_default_contains_workflow_keys",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config_file": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "expected_key": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_generate_default_contains_global": {
            "name": "test_generate_default_contains_global",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config_file": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_find_missing_configs": {
            "name": "test_find_missing_configs",
            "location": 191,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "monkeypatch": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_find_no_missing_configs": {
            "name": "test_find_no_missing_configs",
            "location": 207,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "monkeypatch": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_add_empty_keys_if_missing": {
            "name": "test_add_empty_keys_if_missing",
            "location": 228,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "pathlib.Path"
                ],
                "monkeypatch": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_config_manager_empty_settings": {
            "name": "test_config_manager_empty_settings",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_user_data_directory": {
            "name": "get_user_data_directory",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_app_data_directory": {
            "name": "get_app_data_directory",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "default_config_file.mocked_get_user_data_directory": {
            "name": "mocked_get_user_data_directory",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/test_jobs.py": {
        "test_all_required_workflow_keys": {
            "name": "test_all_required_workflow_keys",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "test_all_required_workflow_keys.mocked_workflows": {
            "name": "mocked_workflows",
            "location": 11,
            "return": [
                "Dict[Text,Mock]",
                "bytes",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "TestWorkflowFinder.test_no_module_error": {
            "name": "test_no_module_error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigJSONSerialize.test_save_opens_file": {
            "name": "test_save_opens_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigJSONSerialize.test_serialize": {
            "name": "test_serialize",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigJSONSerialize.workflow_json_string": {
            "name": "workflow_json_string",
            "location": 63,
            "return": [
                "Text",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigJSONSerialize.test_open_file": {
            "name": "test_open_file",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_json_string": [
                    "str"
                ]
            }
        },
        "TestConfigJSONSerialize.test_open_file_workflow_name": {
            "name": "test_open_file_workflow_name",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow_json_string": [
                    "str"
                ]
            }
        },
        "TestConfigJSONSerialize.test_save_missing_filename_throws": {
            "name": "test_save_missing_filename_throws",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigJSONSerialize.test_loading_missing_filename_throws": {
            "name": "test_loading_missing_filename_throws",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobConfigSerialization.mock_strategy": {
            "name": "mock_strategy",
            "location": 124,
            "return": [
                "str",
                "Mock"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobConfigSerialization.test_save": {
            "name": "test_save",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_strategy": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestJobConfigSerialization.test_load": {
            "name": "test_load",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_strategy": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "Speedwagon-master/tests/test_pkg_metadata.py": {
        "test_name": {
            "name": "test_name",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/test_runner_strategies.py": {
        "test_job_call_order": {
            "name": "test_job_call_order",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_task_exception_logs_error": {
            "name": "test_task_exception_logs_error",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "step": [
                    "unittesmock.Mock",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_task_aborted": {
            "name": "test_task_aborted",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "int"
                ],
                "step": [
                    "bool",
                    "List[str]",
                    "Iterable[T]",
                    "int",
                    "Callable[[], bytes]"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_simple_api_run_workflow_calls_methods": {
            "name": "test_simple_api_run_workflow_calls_methods",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "method_name": [
                    "str"
                ]
            }
        },
        "test_simple_api_calls_exec_on_task": {
            "name": "test_simple_api_calls_exec_on_task",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_task_aborted.build_task": {
            "name": "build_task",
            "location": 153,
            "return": [
                "str",
                "Mock"
            ],
            "arguments": {
                "_": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestTaskGenerator.workflow": {
            "name": "workflow",
            "location": 188,
            "return": [
                "MagicMock",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskGenerator.test_tasks_call_init_task": {
            "name": "test_tasks_call_init_task",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": []
            }
        },
        "TestTaskGenerator.test_tasks_runs_discover_metadata": {
            "name": "test_tasks_runs_discover_metadata",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "IO"
                ]
            }
        },
        "TestTaskGenerator.test_tasks_runs_create_new_task": {
            "name": "test_tasks_runs_create_new_task",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": []
            }
        },
        "TestTaskGenerator.test_tasks_runs_completion_task": {
            "name": "test_tasks_runs_completion_task",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "IO"
                ]
            }
        },
        "TestTaskGenerator.test_tasks_request_more_info": {
            "name": "test_tasks_request_more_info",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ]
            }
        },
        "TestTaskGenerator.test_pretask_calls_initial_task": {
            "name": "test_pretask_calls_initial_task",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ]
            }
        },
        "TestTaskGenerator.test_main_task": {
            "name": "test_main_task",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "dict"
                ]
            }
        },
        "TestTaskGenerator.test_get_post_tasks": {
            "name": "test_get_post_tasks",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": []
            }
        },
        "TestRunnerDisplay.dummy_runner": {
            "name": "dummy_runner",
            "location": 300,
            "return": [
                "DummyRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunnerDisplay.test_basic_setters_and_getters_progress": {
            "name": "test_basic_setters_and_getters_progress",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_runner": []
            }
        },
        "TestRunnerDisplay.test_basic_setters_and_getters_details": {
            "name": "test_basic_setters_and_getters_details",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_runner": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestRunnerDisplay.test_details_defaults_to_none": {
            "name": "test_details_defaults_to_none",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_runner": []
            }
        },
        "TestRunnerDisplay.test_context_manager": {
            "name": "test_context_manager",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_runner": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestTaskDispatcher.test_stop_is_noop_if_not_started": {
            "name": "test_stop_is_noop_if_not_started",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskDispatcher.test_active": {
            "name": "test_active",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_status": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "expected_active": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "int"
                ],
                "state": [
                    "int",
                    "Callable"
                ]
            }
        },
        "TestTaskDispatcher.test_start_set_state_to_running": {
            "name": "test_start_set_state_to_running",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskDispatcher.test_stop_set_state": {
            "name": "test_stop_set_state",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestTaskDispatcherRunning.test_running_on_active_is_noop_warning": {
            "name": "test_running_on_active_is_noop_warning",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestTaskDispatcherStopping.test_running_stop_on_stopping_is_noop_warning": {
            "name": "test_running_stop_on_stopping_is_noop_warning",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestTaskDispatcherStopping.test_running_starting_on_stopping_is_noop_warning": {
            "name": "test_running_starting_on_stopping_is_noop_warning",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestTaskScheduler.test_default_request_more_info_noop": {
            "name": "test_default_request_more_info_noop",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "TestTaskScheduler.test_run": {
            "name": "test_run",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "reporter": [
                    "Type",
                    "str"
                ]
            }
        },
        "TestTaskScheduler.test_task_canceled": {
            "name": "test_task_canceled",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpamTask.work": {
            "name": "work",
            "location": 514,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpamTask.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 517,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "SpamWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "SpamWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 533,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "TestBackgroundJobManager.test_manager_does_nothing": {
            "name": "test_manager_does_nothing",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackgroundJobManager.test_job_finished_called": {
            "name": "test_job_finished_called",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackgroundJobManager.test_exception_caught": {
            "name": "test_exception_caught",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadedEvents.test_done": {
            "name": "test_done",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadedEvents.test_stop": {
            "name": "test_stop",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadedEvents.test_started": {
            "name": "test_started",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskDispatcher.test_stop_set_state.halt_dispatching": {
            "name": "halt_dispatching",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRunnerDisplay.dummy_runner.DummyRunner.refresh": {
            "name": "refresh",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunnerDisplay.dummy_runner.DummyRunner.user_canceled": {
            "name": "user_canceled",
            "location": 305,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackgroundJobManager.test_exception_caught.BadTask.work": {
            "name": "work",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackgroundJobManager.test_exception_caught.BaconWorkflow.create_new_task": {
            "name": "create_new_task",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_builder": [
                    "speedwagon.tasks.TaskBuilder"
                ]
            }
        },
        "TestBackgroundJobManager.test_exception_caught.BaconWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 582,
            "return": [
                "List[dict[Text,Text]]",
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        }
    },
    "Speedwagon-master/tests/test_startup.py": {
        "test_version_exits_after_being_called": {
            "name": "test_version_exits_after_being_called",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "logging.LogRecord",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "test_start_up_calls_default": {
            "name": "test_start_up_calls_default",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_load_as_module": {
            "name": "test_load_as_module",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_load_module_self_test": {
            "name": "test_load_module_self_test",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_get_custom_tabs_missing_file": {
            "name": "test_get_custom_tabs_missing_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Callable"
                ],
                "monkeypatch": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_get_custom_tabs_bad_data_raises_exception": {
            "name": "test_get_custom_tabs_bad_data_raises_exception",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "Callable",
                    "Union[int,str]"
                ]
            }
        },
        "test_missing_workflow": {
            "name": "test_missing_workflow",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_get_custom_tabs_loads_workflows_from_file": {
            "name": "test_get_custom_tabs_loads_workflows_from_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_run_command_invalid": {
            "name": "test_run_command_invalid",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_command_valid": {
            "name": "test_run_command_valid",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestCustomTabsFileReader.test_load_custom_tabs_file_not_found": {
            "name": "test_load_custom_tabs_file_not_found",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "Type"
                ]
            }
        },
        "TestCustomTabsFileReader.test_load_custom_tabs_file_attribute_error": {
            "name": "test_load_custom_tabs_file_attribute_error",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestCustomTabsFileReader.test_load_custom_tabs_file_yaml_error": {
            "name": "test_load_custom_tabs_file_yaml_error",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestCustomTabsFileReader.test_load_custom_tabs_file_error_loading_tab": {
            "name": "test_load_custom_tabs_file_error_loading_tab",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Type"
                ]
            }
        }
    },
    "Speedwagon-master/tests/test_workflow.py": {
        "test_AbsOutputOptionDataType_needs_widget_name": {
            "name": "test_AbsOutputOptionDataType_needs_widget_name",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDropDownSelection.test_serialize_selection": {
            "name": "test_serialize_selection",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/frontend/conftest.py": {
        "tool_job_manager_spy": {
            "name": "tool_job_manager_spy",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "SpyDialogBox.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpyDialogBox.setRange": {
            "name": "setRange",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SpyDialogBox.accept": {
            "name": "accept",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpyDialogBox.close": {
            "name": "close",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpyDialogBox.setWindowTitle": {
            "name": "setWindowTitle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bool"
                ]
            }
        },
        "SpyDialogBox.setLabelText": {
            "name": "setLabelText",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "bool",
                    "None"
                ]
            }
        },
        "SpyDialogBox.setMaximum": {
            "name": "setMaximum",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "List[float]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "SpyDialogBox.show": {
            "name": "show",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpyDialogBox.maximum": {
            "name": "maximum",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpyDialogBox.value": {
            "name": "value",
            "location": 36,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpyDialogBox.setValue": {
            "name": "setValue",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "SpyWorkRunner.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "Optional[Node]",
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "SpyWorkRunner.__exit__": {
            "name": "__exit__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "SpyWorkRunner.progress_dialog_box_handler": {
            "name": "progress_dialog_box_handler",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "tool_job_manager_spy.SpyToolJobManager.open": {
            "name": "open",
            "location": 61,
            "return": [
                "SpyWorkRunner",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "runner": [
                    "Optional['Node']",
                    "bool",
                    "Callable",
                    "str",
                    "Optional[str]",
                    "Type[object]"
                ]
            }
        },
        "tool_job_manager_spy.SpyToolJobManager.flush_message_buffer": {
            "name": "flush_message_buffer",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_cli.py": {
        "test_user_confirm_removal_stdin": {
            "name": "test_user_confirm_removal_stdin",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "key_press": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected_response": [
                    "Callable[Any,None]",
                    "Dict",
                    "Callable[[Any],None]",
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "ks.Series"
                ]
            }
        },
        "test_factor_produce_user_widget": {
            "name": "test_factor_produce_user_widget",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "method_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestCLIPackageBrowserWidget.test_get_package_files": {
            "name": "test_get_package_files",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIPackageBrowserWidget.test_ask_user_to_select_title_page": {
            "name": "test_ask_user_to_select_title_page",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIPackageBrowserWidget.test_ask_user_to_select_title_cancels": {
            "name": "test_ask_user_to_select_title_cancels",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIPackageBrowserWidget.test_ask_user_to_select_title_zero": {
            "name": "test_ask_user_to_select_title_zero",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIPackageBrowserWidget.test_get_user_response": {
            "name": "test_get_user_response",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_get_user_response_for_no_results": {
            "name": "test_get_user_response_for_no_results",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_get_user_response_returns_files": {
            "name": "test_get_user_response_returns_files",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_get_user_response_calls_resolve_items": {
            "name": "test_get_user_response_calls_resolve_items",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_user_resolve_items_resolves_yes": {
            "name": "test_user_resolve_items_resolves_yes",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_user_resolve_items_resolves_no": {
            "name": "test_user_resolve_items_resolves_no",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_user_resolve_items_resolves_all": {
            "name": "test_user_resolve_items_resolves_all",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIConfirmFilesystemItemRemoval.test_user_resolve_items_throw_if_bad_user_option": {
            "name": "test_user_resolve_items_throw_if_bad_user_option",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLIPackageBrowserWidget.test_ask_user_to_select_title_cancels.user_hits_control_c": {
            "name": "user_hits_control_c",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCLIPackageBrowserWidget.test_ask_user_to_select_title_zero.user_selections": {
            "name": "user_selections",
            "location": 82,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "TestCLIConfirmFilesystemItemRemoval.test_get_user_response_returns_files.accept_all_items": {
            "name": "accept_all_items",
            "location": 129,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Iterable[T]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_custom_widgets.py": {
        "test_folder_browse_widget": {
            "name": "test_folder_browse_widget",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str,Sequence[str]]"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_browse_checksumfile": {
            "name": "test_browse_checksumfile",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str,Sequence[str]]"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_boolean_delegate_is_combobox": {
            "name": "test_boolean_delegate_is_combobox",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": []
            }
        },
        "test_folder_delegate_is_browsable": {
            "name": "test_folder_delegate_is_browsable",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": []
            }
        },
        "Spam.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 55,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "List"
                ],
                "additional_data": [
                    "List"
                ]
            }
        },
        "MyWidget.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Callable",
                    "bool",
                    "None",
                    "Dict"
                ]
            }
        },
        "test_boolean_delegate_is_combobox.user_options": {
            "name": "user_options",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_boolean_delegate_is_combobox.get_item_options_model": {
            "name": "get_item_options_model",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "workflow": []
            }
        },
        "test_folder_delegate_is_browsable.user_options": {
            "name": "user_options",
            "location": 127,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_folder_delegate_is_browsable.get_item_options_model": {
            "name": "get_item_options_model",
            "location": 138,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_dialog.py": {
        "test_about_dialog_box": {
            "name": "test_about_dialog_box",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "Mapping",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_about_dialog_box_no_metadata": {
            "name": "test_about_dialog_box_no_metadata",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_install_packages": {
            "name": "test_get_install_packages",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_about_dialog_box.mock_about": {
            "name": "mock_about",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [],
                "title": [],
                "message": []
            }
        },
        "test_about_dialog_box.mock_metadata": {
            "name": "mock_metadata",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_about_dialog_box_no_metadata.mock_about": {
            "name": "mock_about",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_about_dialog_box_no_metadata.mock_metadata": {
            "name": "mock_metadata",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_get_install_packages.mock_distributions": {
            "name": "mock_distributions",
            "location": 48,
            "return": [
                "List[Mock]",
                "str",
                "Set[str]",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/frontend/test_gui.py": {
        "test_show_help_open_web": {
            "name": "test_show_help_open_web",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "tests.async_mock.MagicMock"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_exit_button": {
            "name": "test_exit_button",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_system_info_menu": {
            "name": "test_system_info_menu",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "tests.async_mock.MagicMock",
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_show_configuration_menu": {
            "name": "test_show_configuration_menu",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_window_save_log": {
            "name": "test_window_save_log",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "IO[str]",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_set_current_tab": {
            "name": "test_set_current_tab",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_show_help_open_web.mock_open_new": {
            "name": "mock_open_new",
            "location": 24,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "TestToolConsole.test_add_message": {
            "name": "test_add_message",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestMainWindow.test_about_dialog_box": {
            "name": "test_about_dialog_box",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestMainWindow.test_show_system_info": {
            "name": "test_show_system_info",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "bool",
                    "unittesmock.MagicMock",
                    "Optional[str]"
                ]
            }
        },
        "TestMainWindow.test_show_configuration_opens_settings_dialog": {
            "name": "test_show_configuration_opens_settings_dialog",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": []
            }
        },
        "TestMainWindow2.test_exit": {
            "name": "test_exit",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestMainWindow2.test_set_current_tab": {
            "name": "test_set_current_tab",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "int"
                ],
                "tab_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "TestMainWindow2.test_set_current_tab_invalid_throws": {
            "name": "test_set_current_tab_invalid_throws",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestMainWindow2.test_set_active_workflow": {
            "name": "test_set_active_workflow",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestMainWindow2.test_set_current_workflow_settings": {
            "name": "test_set_current_workflow_settings",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestMainWindow2.test_set_current_workflow_settings.Eggs.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 278,
            "return": [
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "TestMainWindow2.test_set_current_workflow_settings.Eggs.get_user_options": {
            "name": "get_user_options",
            "location": 283,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMainWindow2.test_set_current_workflow_settings.Eggs.user_options": {
            "name": "user_options",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_gui_startup.py": {
        "test_standalone_tab_editor_loads": {
            "name": "test_standalone_tab_editor_loads",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_run_loads_window": {
            "name": "test_run_loads_window",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "tests.async_mock.MagicMock"
                ],
                "monkeypatch": [
                    "dict"
                ],
                "tmpdir": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_start_up_tab_editor": {
            "name": "test_start_up_tab_editor",
            "location": 1242,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTabsEditorApp.test_on_okay_closes": {
            "name": "test_on_okay_closes",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_run_loads_window.dummy_app_data_dir": {
            "name": "dummy_app_data_dir",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "TestStartupDefault.parse_args": {
            "name": "parse_args",
            "location": 93,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStartupDefault.test_invalid_setting_logs_warning": {
            "name": "test_invalid_setting_logs_warning",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [],
                "monkeypatch": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "parse_args": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "TestStartupDefault.test_invalid_setting_logs_warning_for_ConfigFileSetter": {
            "name": "test_invalid_setting_logs_warning_for_ConfigFileSetter",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "int",
                    "float"
                ],
                "monkeypatch": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "str"
                ],
                "parse_args": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "TestStartupDefault.test_missing_debug_setting": {
            "name": "test_missing_debug_setting",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [],
                "monkeypatch": [
                    "str",
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "parse_args": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "TestStartupDefault.test_default_resolve_settings_calls_default_setter": {
            "name": "test_default_resolve_settings_calls_default_setter",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "dict"
                ]
            }
        },
        "TestStartupDefault.test_ensure_settings_files_called_generate_default": {
            "name": "test_ensure_settings_files_called_generate_default",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "first_time_startup_worker": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TestStartupDefault.first_time_startup_worker": {
            "name": "first_time_startup_worker",
            "location": 256,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestStartupDefault.returning_startup_worker": {
            "name": "returning_startup_worker",
            "location": 300,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "TestStartupDefault.test_ensure_settings_files_called_messages": {
            "name": "test_ensure_settings_files_called_messages",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "expected_message": [
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "first_time_startup_worker": [
                    "int",
                    "str"
                ]
            }
        },
        "TestStartupDefault.test_ensure_settings_files_called_messages_on_success": {
            "name": "test_ensure_settings_files_called_messages_on_success",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Optional[List]"
                ],
                "caplog": [
                    "int",
                    "str",
                    "bool"
                ],
                "expected_message": [
                    "int",
                    "str",
                    "bool"
                ],
                "returning_startup_worker": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "TestSingleWorkflowJSON.test_run_without_json_raises_exception": {
            "name": "test_run_without_json_raises_exception",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleWorkflowJSON.test_run_without_options_raises_exception": {
            "name": "test_run_without_options_raises_exception",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleWorkflowJSON.test_runner_strategies_called": {
            "name": "test_runner_strategies_called",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "qtbot": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestSingleWorkflowJSON.test_signal_is_sent": {
            "name": "test_signal_is_sent",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "bool",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestSingleWorkflowJSON.test_run_on_exit_is_called": {
            "name": "test_run_on_exit_is_called",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "dict"
                ]
            }
        },
        "TestSingleWorkflowJSON.test_load_json": {
            "name": "test_load_json",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiWorkflowLauncher.test_all_workflows_validate_user_options": {
            "name": "test_all_workflows_validate_user_options",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "bool"
                ],
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "TestMultiWorkflowLauncher.test_task_failing": {
            "name": "test_task_failing",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "bool",
                    "List[str]",
                    "Iterable[T]",
                    "int",
                    "Callable[[], bytes]"
                ]
            }
        },
        "TestStartQtThreaded.starter": {
            "name": "starter",
            "location": 611,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "List[str]",
                    "dict"
                ],
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestStartQtThreaded.test_report_exception": {
            "name": "test_report_exception",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "monkeypatch": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "starter": [
                    "Callable",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "TestStartQtThreaded.test_save_workflow_config": {
            "name": "test_save_workflow_config",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "starter": []
            }
        },
        "TestStartQtThreaded.test_load_workflow_config": {
            "name": "test_load_workflow_config",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.Mock",
                    "str"
                ],
                "starter": [
                    "int"
                ]
            }
        },
        "TestStartQtThreaded.test_save_log_opens_dialog": {
            "name": "test_save_log_opens_dialog",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "str"
                ],
                "starter": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestStartQtThreaded.test_save_log_error": {
            "name": "test_save_log_error",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "monkeypatch": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "starter": [
                    "int"
                ]
            }
        },
        "TestStartQtThreaded.test_request_system_info": {
            "name": "test_request_system_info",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "unittesmock.MagicMock"
                ],
                "qtbot": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestStartQtThreaded.test_request_settings_opens_setting_dialog": {
            "name": "test_request_settings_opens_setting_dialog",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "TestStartQtThreaded.test_run_opens_window": {
            "name": "test_run_opens_window",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Callable",
                    "bool",
                    "tests.async_mock.MagicMock"
                ],
                "monkeypatch": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "starter": []
            }
        },
        "TestStartQtThreaded.test_load_custom_tabs": {
            "name": "test_load_custom_tabs",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "starter": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestStartQtThreaded.test_load_help_no_package_info": {
            "name": "test_load_help_no_package_info",
            "location": 824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "bool"
                ],
                "caplog": [
                    "float"
                ],
                "starter": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestStartQtThreaded.test_load_help": {
            "name": "test_load_help",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "starter": []
            }
        },
        "TestStartQtThreaded.test_resolve_settings_calls_get_settings": {
            "name": "test_resolve_settings_calls_get_settings",
            "location": 888,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]"
                ],
                "starter": []
            }
        },
        "TestStartQtThreaded.test_read_settings_file": {
            "name": "test_read_settings_file",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Generator"
                ],
                "monkeypatch": [],
                "starter": [
                    "str"
                ]
            }
        },
        "TestStartQtThreaded.test_request_more_info_emits_request_signal": {
            "name": "test_request_more_info_emits_request_signal",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "bool"
                ],
                "starter": []
            }
        },
        "TestStartQtThreaded.test_submit_job_errors_on_unknown_workflow": {
            "name": "test_submit_job_errors_on_unknown_workflow",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "Optional[Dict[str, Any]]"
                ],
                "starter": []
            }
        },
        "TestStartQtThreaded.test_submit_job_submits_to_job_manager": {
            "name": "test_submit_job_submits_to_job_manager",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [],
                "starter": []
            }
        },
        "TestWorkflowProgressCallbacks.dialog_box": {
            "name": "dialog_box",
            "location": 1006,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int"
                ],
                "monkeypatch": [
                    "List[str]",
                    "Set[str]",
                    "Mapping",
                    "bool"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_job_changed_signal": {
            "name": "test_job_changed_signal",
            "location": 1021,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "qtbot": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_job_progress_none_total_does_not_trigger": {
            "name": "test_job_progress_none_total_does_not_trigger",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [],
                "qtbot": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_job_progress_none_current_does_not_trigger": {
            "name": "test_job_progress_none_current_does_not_trigger",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [],
                "qtbot": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_job_log_signal": {
            "name": "test_job_log_signal",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [],
                "qtbot": []
            }
        },
        "TestWorkflowProgressCallbacks.test_job_cancel_completed_signal": {
            "name": "test_job_cancel_completed_signal",
            "location": 1064,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "qtbot": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_job_finished_signal": {
            "name": "test_job_finished_signal",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "qtbot": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_job_status_signal": {
            "name": "test_job_status_signal",
            "location": 1082,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "Dict[str, float]"
                ],
                "qtbot": [
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_set_banner_text": {
            "name": "test_set_banner_text",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [],
                "qtbot": []
            }
        },
        "TestWorkflowProgressCallbacks.test_error": {
            "name": "test_error",
            "location": 1109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "dialog_box": [
                    "Type"
                ],
                "monkeypatch": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "message": [
                    "dict",
                    "str"
                ],
                "exc": [
                    "dict",
                    "str"
                ],
                "traceback": [
                    "dict",
                    "str"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_start_calls_start_signal": {
            "name": "test_start_calls_start_signal",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "Type"
                ],
                "qtbot": [
                    "Type"
                ]
            }
        },
        "TestWorkflowProgressCallbacks.test_refresh_calls_process_events": {
            "name": "test_refresh_calls_process_events",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "dict",
                    "tests.async_mock.Mock"
                ],
                "monkeypatch": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "qtbot": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestQtRequestMoreInfo.test_job_cancelled": {
            "name": "test_job_cancelled",
            "location": 1170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestQtRequestMoreInfo.test_job_exception_passes_on": {
            "name": "test_job_exception_passes_on",
            "location": 1194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ]
            }
        },
        "TestRunCommand.test_application_launcher_called": {
            "name": "test_application_launcher_called",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestStartupDefault.parse_args.parse": {
            "name": "parse",
            "location": 94,
            "return": [
                "float",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "TestStartupDefault.test_invalid_setting_logs_warning.update": {
            "name": "update",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestStartupDefault.test_invalid_setting_logs_warning_for_ConfigFileSetter.update": {
            "name": "update",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestStartupDefault.test_default_resolve_settings_calls_default_setter.update": {
            "name": "update",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestStartupDefault.first_time_startup_worker.exists": {
            "name": "exists",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestStartupDefault.returning_startup_worker.exists": {
            "name": "exists",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "TestStartQtThreaded.test_save_log_error.getSaveFileName": {
            "name": "getSaveFileName",
            "location": 698,
            "return": [
                "Tuple[None]",
                "str",
                "IO",
                "Tuple[str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "TestStartQtThreaded.test_save_log_error.side_effect_for_saving": {
            "name": "side_effect_for_saving",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestStartQtThreaded.test_load_help.metadata": {
            "name": "metadata",
            "location": 869,
            "return": [
                "Dict[Text,Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestSingleWorkflowJSON.test_signal_is_sent.Dummy.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleWorkflowJSON.test_signal_is_sent.Dummy.d": {
            "name": "d",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_interaction.py": {
        "TestAbstractPackageBrowser.test_get_packages": {
            "name": "test_get_packages",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_models.py": {
        "test_serialize_settings_model": {
            "name": "test_serialize_settings_model",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_setting_model_missing_file": {
            "name": "test_build_setting_model_missing_file",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_build_setting_model": {
            "name": "test_build_setting_model",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSettingsModel.test_data": {
            "name": "test_data",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "models.characters.chassis.Chassis",
                    "Callable[[List, bool], None]",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSettingsModel.test_header_data": {
            "name": "test_header_data",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[str, int]"
                ],
                "expected": [
                    "str",
                    "tuple",
                    "list"
                ]
            }
        },
        "TestSettingsModel.test_set_data": {
            "name": "test_set_data",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettingsModel.test_flags": {
            "name": "test_flags",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "bool",
                    "int",
                    "str"
                ],
                "expected": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestSettingsModel.test_settings_model_empty": {
            "name": "test_settings_model_empty",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettingsModel.test_settings_model_added": {
            "name": "test_settings_model_added",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_tabs_model_iadd_tab": {
            "name": "test_tabs_model_iadd_tab",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_tabs_model_delete_tab": {
            "name": "test_tabs_model_delete_tab",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_tabs_model_delete_all_tabs": {
            "name": "test_tabs_model_delete_all_tabs",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_model_contains": {
            "name": "test_model_contains",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_model_contains_false": {
            "name": "test_model_contains_false",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_model_iadd_operator": {
            "name": "test_model_iadd_operator",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_model_isub_operator": {
            "name": "test_model_isub_operator",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabsModel.test_model_data": {
            "name": "test_model_data",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItemListModel.test_create": {
            "name": "test_create",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItemListModel.test_columns_are_always_two": {
            "name": "test_columns_are_always_two",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItemListModel.test_columns_row_count_is_the_size_of_data": {
            "name": "test_columns_row_count_is_the_size_of_data",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowListModel2.test_workflow_list_model2_iadd": {
            "name": "test_workflow_list_model2_iadd",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowListModel2.test_workflow_list_model2_add": {
            "name": "test_workflow_list_model2_add",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowListModel2.test_workflow_list_model2_remove": {
            "name": "test_workflow_list_model2_remove",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowListModel2.test_workflow_list_model2_isub": {
            "name": "test_workflow_list_model2_isub",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowListModel2.test_data": {
            "name": "test_data",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowListModel2.test_sort_defaults_alpha_by_name": {
            "name": "test_sort_defaults_alpha_by_name",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_model_data_user_role": {
            "name": "test_model_data_user_role",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_model_data_edit_role": {
            "name": "test_model_data_edit_role",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_model_data_display_role": {
            "name": "test_model_data_display_role",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_model_size_hint": {
            "name": "test_model_size_hint",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_get": {
            "name": "test_get",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_header_data": {
            "name": "test_header_data",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_set_data": {
            "name": "test_set_data",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_set": {
            "name": "test_set",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_get_item": {
            "name": "test_get_item",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel3.test_get_item_invalid": {
            "name": "test_get_item_invalid",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel4.dialog_box": {
            "name": "dialog_box",
            "location": 344,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int"
                ]
            }
        },
        "TestToolOptionsModel4.table_widget": {
            "name": "table_widget",
            "location": 352,
            "return": [
                "Optional[str]",
                "list",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dialog_box": [
                    "str",
                    "django.db.models.QuerySet"
                ],
                "qtbot": [
                    "int"
                ]
            }
        },
        "TestToolOptionsModel4.data": {
            "name": "data",
            "location": 369,
            "return": [
                "List",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToolOptionsModel4.test_headings": {
            "name": "test_headings",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "dict",
                    "list",
                    "Optional[List[Dict]]",
                    "List[bytes]"
                ],
                "data": [
                    "salon.models.Stylist",
                    "allennlp.models.model.Model",
                    "str",
                    "List[src.main.core.models.area.Area]"
                ]
            }
        },
        "TestToolOptionsModel4.test_horizontal_heading_are_empty": {
            "name": "test_horizontal_heading_are_empty",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "jumeaux.models.Reqs2ReqsAddOnPayload",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestToolOptionsModel4.test_rows_match_data_size": {
            "name": "test_rows_match_data_size",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "bool",
                    "salon.models.Stylist"
                ],
                "data": [
                    "Tuple[float, float]",
                    "int"
                ]
            }
        },
        "TestToolOptionsModel4.test_data_json_role_make_parseable_data": {
            "name": "test_data_json_role_make_parseable_data",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "allennlp.models.model.Model",
                    "salon.models.Stylist"
                ]
            }
        },
        "TestToolOptionsModel4.test_get_data_invalid_index_is_none": {
            "name": "test_get_data_invalid_index_is_none",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase"
                ]
            }
        },
        "TestToolOptionsModel4.test_set_data": {
            "name": "test_set_data",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "salon.models.Stylist",
                    "users.models.JustfixUser"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_qtwidgets.py": {
        "test_package_browser": {
            "name": "test_package_browser",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "test_get_additional_info_opens_dialog": {
            "name": "test_get_additional_info_opens_dialog",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestQtWidgetPackageBrowserWidget.test_get_user_response_invalid_file_format_raises": {
            "name": "test_get_user_response_invalid_file_format_raises",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "bool"
                ],
                "monkeypatch": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestQtWidgetPackageBrowserWidget.test_get_user_response": {
            "name": "test_get_user_response",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.MagicMock"
                ],
                "monkeypatch": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestQtWidgetPackageBrowserWidget.test_get_data_with_dialog_box": {
            "name": "test_get_data_with_dialog_box",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestConfirmListModel.test_model_check": {
            "name": "test_model_check",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtmodeltester": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "TestConfirmListModel.test_all_data_defaults_to_checked": {
            "name": "test_all_data_defaults_to_checked",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfirmListModel.test_unchecking_item": {
            "name": "test_unchecking_item",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfirmDeleteDialog.test_okay_button_accepts": {
            "name": "test_okay_button_accepts",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestConfirmDeleteDialog.test_active_okay_button": {
            "name": "test_active_okay_button",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "int",
                    "List[bool]",
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "bool"
                ],
                "items": [
                    "Mapping[str,Any]",
                    "List[str]",
                    "Mapping"
                ],
                "expected_enabled": [
                    "Tuple",
                    "str"
                ]
            }
        },
        "TestConfirmDeleteDialog.test_cancel_button_rejects": {
            "name": "test_cancel_button_rejects",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestQtWidgetConfirmFileSystemRemoval.widget": {
            "name": "widget",
            "location": 170,
            "return": [
                "str",
                "Tuple[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestQtWidgetConfirmFileSystemRemoval.test_get_user_response": {
            "name": "test_get_user_response",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "monkeypatch": []
            }
        },
        "TestQtWidgetConfirmFileSystemRemoval.test_use_dialog_box": {
            "name": "test_use_dialog_box",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "unittesmock.Mock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestQtWidgetConfirmFileSystemRemoval.test_use_dialog_box_abort_throw_cancel_job": {
            "name": "test_use_dialog_box_abort_throw_cancel_job",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "unittesmock.Mock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestQtWidgetTitlePageSelection.test_selection": {
            "name": "test_selection",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ],
                "qtbot": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_package_browser.mock_get_item": {
            "name": "mock_get_item",
            "location": 252,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Mapping",
                    "Dict[str, str]"
                ]
            }
        },
        "TestQtWidgetTitlePageSelection.test_selection.mock_get_item": {
            "name": "mock_get_item",
            "location": 220,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, float]",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_qt_dialogs.py": {
        "test_settings_open_dir_if_location_is_set": {
            "name": "test_settings_open_dir_if_location_is_set",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "str"
                ]
            }
        },
        "TestOpenSettings.test_open_darwin_settings": {
            "name": "test_open_darwin_settings",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "TestOpenSettings.test_open_unsupported_settings": {
            "name": "test_open_unsupported_settings",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestOpenSettings.test_open_windows_settings": {
            "name": "test_open_windows_settings",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "TestGlobalSettingsTab.test_on_okay_not_modified": {
            "name": "test_on_okay_not_modified",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestGlobalSettingsTab.test_on_okay_modified": {
            "name": "test_on_okay_modified",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "monkeypatch": [
                    "bool",
                    "str"
                ],
                "config_file": [
                    "str"
                ],
                "expect_file_written": [
                    "str"
                ]
            }
        },
        "TestTabsConfigurationTab.test_on_ok_not_modified": {
            "name": "test_on_ok_not_modified",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestTabsConfigurationTab.test_on_okay_modified": {
            "name": "test_on_okay_modified",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "monkeypatch": [
                    "Optional[str]",
                    "set"
                ],
                "settings_location": [],
                "writes_to_file": []
            }
        },
        "TestTabEditor.editor": {
            "name": "editor",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabEditor.test_set_all_workflows_set_model": {
            "name": "test_set_all_workflows_set_model",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ],
                "editor": []
            }
        },
        "TestTabEditor.test_create_new_tab": {
            "name": "test_create_new_tab",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.Mock"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "editor": [
                    "core.models.Grouping",
                    "Optional[Exception]"
                ]
            }
        },
        "TestTabEditor.test_create_new_tab_can_cancel": {
            "name": "test_create_new_tab_can_cancel",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.Mock"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "editor": [
                    "core.models.Grouping",
                    "Optional[Exception]"
                ]
            }
        },
        "TestTabEditor.test_create_new_tab_cannot_create_same_name_tabs": {
            "name": "test_create_new_tab_cannot_create_same_name_tabs",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [],
                "editor": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestTabEditor.test_delete_tab": {
            "name": "test_delete_tab",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "tests.async_mock.Mock"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "editor": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestSettingsBuilder.nothing_set_settings": {
            "name": "nothing_set_settings",
            "location": 228,
            "return": [
                "AbstractSet[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "TestSettingsBuilder.test_nothing_has_no_tabs": {
            "name": "test_nothing_has_no_tabs",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nothing_set_settings": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestSettingsBuilder.test_nothing_no_settings_directory_button": {
            "name": "test_nothing_no_settings_directory_button",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nothing_set_settings": [
                    "str"
                ]
            }
        },
        "TestSettingsBuilder.test_add_global_settings": {
            "name": "test_add_global_settings",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "List[str]"
                ],
                "monkeypatch": []
            }
        },
        "TestSettingsBuilder.test_add_editor_tab": {
            "name": "test_add_editor_tab",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "List[str]"
                ],
                "monkeypatch": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSettingsBuilder.test_settings_path": {
            "name": "test_settings_path",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Generator",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestWorkflowProgress.test_default_buttons": {
            "name": "test_default_buttons",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Optional[str]",
                    "str",
                    "docker.models.containers.Container"
                ],
                "button_type": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "expected_active": [
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestWorkflowProgress.test_get_console": {
            "name": "test_get_console",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestWorkflowProgress.test_start_changes_state_to_working": {
            "name": "test_start_changes_state_to_working",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ]
            }
        },
        "TestWorkflowProgress.test_stop_changes_working_state_to_stopping": {
            "name": "test_stop_changes_working_state_to_stopping",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestWorkflowProgress.test_failed_changes_working_state_to_failed": {
            "name": "test_failed_changes_working_state_to_failed",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestWorkflowProgress.test_cancel_completed_changes_stopping_state_to_aborted": {
            "name": "test_cancel_completed_changes_stopping_state_to_aborted",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestWorkflowProgress.test_success_completed_chances_status_to_done": {
            "name": "test_success_completed_chances_status_to_done",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestWorkflowProgressGui.test_remove_log_handles": {
            "name": "test_remove_log_handles",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestWorkflowProgressGui.test_attach_logger": {
            "name": "test_attach_logger",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestWorkflowProgressGui.test_write_html_block_to_console": {
            "name": "test_write_html_block_to_console",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestWorkflowProgressState.test_event_called_based_on_button_press": {
            "name": "test_event_called_based_on_button_press",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "Optional[str]",
                    "bool",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "button_clicked": [
                    "mock.MagicMock"
                ],
                "event_called": [
                    "dict"
                ]
            }
        },
        "TestWorkflowProgressState.test_warnings": {
            "name": "test_warnings",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_class": [
                    "str",
                    "int"
                ],
                "command": []
            }
        },
        "TestTabEditor.test_create_new_tab_cannot_create_same_name_tabs.read_tabs_yaml": {
            "name": "read_tabs_yaml",
            "location": 172,
            "return": [
                "List",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/frontend/test_qt_runners.py": {
        "TestQtDialogProgress.test_initialized": {
            "name": "test_initialized",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestQtDialogProgress.test_total_tasks_amount_affects_dialog": {
            "name": "test_total_tasks_amount_affects_dialog",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ]
            }
        },
        "TestQtDialogProgress.test_current_tasks_progress_affects_dialog": {
            "name": "test_current_tasks_progress_affects_dialog",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestQtDialogProgress.test_title_affects_dialog": {
            "name": "test_title_affects_dialog",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestQtDialogProgress.test_details_affects_dialog": {
            "name": "test_details_affects_dialog",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestQtDialogProgress.test_refresh_calls_process_events": {
            "name": "test_refresh_calls_process_events",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "task_scheduler": [
                    "unittesmock.MagicMock"
                ],
                "monkeypatch": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestQtRunner.test_run_abstract_workflow_calls_run_abs_workflow": {
            "name": "test_run_abstract_workflow_calls_run_abs_workflow",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestQtRunner.test_run_non_abstract_workflow_doesnt_call_run_abs_workflow": {
            "name": "test_run_non_abstract_workflow_doesnt_call_run_abs_workflow",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestQtRunner.test_run_abs_workflow_calls_task_runner": {
            "name": "test_run_abs_workflow_calls_task_runner",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQtRunner.test_run_abs_workflow_fails_with_task_failed_exception": {
            "name": "test_run_abs_workflow_fails_with_task_failed_exception",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQtRunner.test_update_progress": {
            "name": "test_update_progress",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQtRunner.test_update_progress_accepted_on_finish": {
            "name": "test_update_progress_accepted_on_finish",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQtRunner.test_update_progress_no_dialog": {
            "name": "test_update_progress_no_dialog",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkRunnerExternal3.test_abort_calls_callback": {
            "name": "test_abort_calls_callback",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ]
            }
        },
        "TestWorkRunnerExternal3.test_abort_worth_with_no_callback": {
            "name": "test_abort_worth_with_no_callback",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestWorkRunnerExternal3.test_someone_resetting_dialog_throws_error": {
            "name": "test_someone_resetting_dialog_throws_error",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_qt_worker.py": {
        "TestToolJobManager.test_abort_calls_show": {
            "name": "test_abort_calls_show",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "monkeypatch": [
                    "tests.async_mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestProcessWorker.test_run_all_jobs_calls_on_completion": {
            "name": "test_run_all_jobs_calls_on_completion",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobProcessor.test_process_flushes_buffer": {
            "name": "test_process_flushes_buffer",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobProcessor.test_process_timeout_calls_timeout_callback": {
            "name": "test_process_timeout_calls_timeout_callback",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "TestProcessWorker.DummyProcessWorker.complete_task": {
            "name": "complete_task",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "T",
                    "bool",
                    "Awaitable[Any]",
                    "List[dict]"
                ]
            }
        },
        "TestProcessWorker.DummyProcessWorker.on_completion": {
            "name": "on_completion",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobProcessor.test_process_timeout_calls_timeout_callback.as_completed": {
            "name": "as_completed",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, object]",
                    "List[object]"
                ],
                "timeout": [
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,object]",
                    "List[object]"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_tabs.py": {
        "TestWorkflowsTab.test_exception_calls_message_box": {
            "name": "test_exception_calls_message_box",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "TestWorkflowsTab.test_is_ready_to_start": {
            "name": "test_is_ready_to_start",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Callable[,None]",
                    "bool"
                ],
                "number_of_indexes_selected": [],
                "is_validate": [
                    "int",
                    "float",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestWorkflowsTab.test_init_selects_first_workflow": {
            "name": "test_init_selects_first_workflow",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestWorkflowsTab.test_start_calls_run_on_workflow": {
            "name": "test_start_calls_run_on_workflow",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "monkeypatch": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestWorkflowsTab.test_start_creates_a_messagebox_on_value_error": {
            "name": "test_start_creates_a_messagebox_on_value_error",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Type",
                    "str"
                ],
                "monkeypatch": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "exception_type": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestWorkflowsTab.test_run_dialog_catch_exception": {
            "name": "test_run_dialog_catch_exception",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Type",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "monkeypatch": [
                    "str"
                ],
                "exception_type": [
                    "Type",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestTabsYaml.test_read_tabs_yaml_errors": {
            "name": "test_read_tabs_yaml_errors",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "Iterable[int]",
                    "str",
                    "Dict"
                ],
                "exception_type": []
            }
        },
        "TestTabsYaml.test_read_tabs_yaml": {
            "name": "test_read_tabs_yaml",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestTabsYaml.test_write_tabs_yaml": {
            "name": "test_write_tabs_yaml",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowsTab.test_run_dialog_catch_exception.cause_chaos": {
            "name": "cause_chaos",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tools": [
                    "str",
                    "int"
                ],
                "options": [
                    "str",
                    "int"
                ],
                "logger": [
                    "str",
                    "int"
                ],
                "completion_callback": [
                    "str",
                    "int"
                ]
            }
        },
        "TestWorkflowsTab.test_start_calls_run_on_workflow.MockWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_results": [],
                "additional_data": []
            }
        },
        "TestWorkflowsTab.test_start_calls_run_on_workflow.MockWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 107,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowsTab.test_start_calls_run_on_workflow.MockWorkflow.user_options": {
            "name": "user_options",
            "location": 110,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowsTab.test_start_creates_a_messagebox_on_value_error.MockWorkflow.discover_task_metadata": {
            "name": "discover_task_metadata",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_results": [
                    "list"
                ],
                "additional_data": [
                    "list"
                ]
            }
        },
        "TestWorkflowsTab.test_start_creates_a_messagebox_on_value_error.MockWorkflow.get_user_options": {
            "name": "get_user_options",
            "location": 147,
            "return": [
                "List",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowsTab.test_start_creates_a_messagebox_on_value_error.MockWorkflow.user_options": {
            "name": "user_options",
            "location": 150,
            "return": [
                "List",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_title_page_selection.py": {
        "TestFileSelectDelegate.delegate": {
            "name": "delegate",
            "location": 14,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestFileSelectDelegate.test_editor_is_combobox": {
            "name": "test_editor_is_combobox",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": []
            }
        },
        "TestFileSelectDelegate.test_set_data_to_title_page_if_already_set": {
            "name": "test_set_data_to_title_page_if_already_set",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "Dict[str,Sequence[Any]]",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestFileSelectDelegate.test_set_data_to_first_file_if_no_title_page_set": {
            "name": "test_set_data_to_first_file_if_no_title_page_set",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestFileSelectDelegate.test_set_title_page": {
            "name": "test_set_title_page",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "str"
                ]
            }
        },
        "TestPackagesModel.model": {
            "name": "model",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TestPackagesModel.test_number_of_columns_match_number_of_fields": {
            "name": "test_number_of_columns_match_number_of_fields",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ]
            }
        },
        "TestPackagesModel.test_row_count": {
            "name": "test_row_count",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "TestPackagesModel.test_row_count_empty": {
            "name": "test_row_count_empty",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "TestPackagesModel.test_header_data": {
            "name": "test_header_data",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict[type,Any]",
                    "Dict[Type,Any]"
                ],
                "index": [
                    "Dict[type,Any]",
                    "Dict[Type,Any]"
                ]
            }
        },
        "TestPackagesModel.test_header_data_invalid_index_is_empty_string": {
            "name": "test_header_data_invalid_index_is_empty_string",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestPackagesModel.test_data_user_role": {
            "name": "test_data_user_role",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesModel.test_data_display_role": {
            "name": "test_data_display_role",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesModel.test_data_display_role_empty": {
            "name": "test_data_display_role_empty",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesModel.test_title_page_flags_editable": {
            "name": "test_title_page_flags_editable",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileSelectDelegate.test_set_data_to_title_page_if_already_set.get_data": {
            "name": "get_data",
            "location": 29,
            "return": [],
            "arguments": {
                "role": []
            }
        },
        "TestFileSelectDelegate.test_set_data_to_first_file_if_no_title_page_set.get_data": {
            "name": "get_data",
            "location": 56,
            "return": [],
            "arguments": {
                "role": []
            }
        },
        "TestFileSelectDelegate.test_set_title_page.get_data": {
            "name": "get_data",
            "location": 95,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ],
                "role": [
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "bytes",
                    "Optional[Union[Any, Any]]"
                ]
            }
        }
    },
    "Speedwagon-master/tests/frontend/test_widgets.py": {
        "TestDelegateSelection.model": {
            "name": "model",
            "location": 13,
            "return": [
                "bytes",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegateSelection.index": {
            "name": "index",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int"
                ],
                "model": [
                    "List[Dict[str, Any]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "TestDelegateSelection.delegate_widget": {
            "name": "delegate_widget",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegateSelection.editor": {
            "name": "editor",
            "location": 31,
            "return": [
                "speedwagon.frontend.qtwidgets.widgets.FileSelectWidget",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "bool",
                    "str",
                    "List[str]",
                    "None",
                    "Union[str,bool,None]",
                    "Optional[bool]",
                    "int"
                ],
                "index": [
                    "Dict[str,int]",
                    "str",
                    "List[int]",
                    "Dict[str,Any]"
                ],
                "delegate_widget": [
                    "Dict[str,int]",
                    "str",
                    "List[int]",
                    "Dict[str,Any]"
                ],
                "model": [
                    "bool",
                    "str",
                    "List[str]",
                    "None",
                    "Union[str,bool,None]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "TestDelegateSelection.test_returns_a_qt_widget": {
            "name": "test_returns_a_qt_widget",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "index": [
                    "Dict"
                ]
            }
        },
        "TestDelegateSelection.test_setting_model_data": {
            "name": "test_setting_model_data",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str"
                ],
                "index": [],
                "editor": [
                    "str"
                ],
                "delegate_widget": [],
                "model": []
            }
        },
        "TestDelegateSelection.test_setting_editor_data": {
            "name": "test_setting_editor_data",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [],
                "index": [
                    "Dict[str,Any]"
                ],
                "delegate_widget": [],
                "model": [
                    "str"
                ]
            }
        },
        "TestDelegateSelection.test_warn_on_not_using_right_subclass": {
            "name": "test_warn_on_not_using_right_subclass",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "delegate_widget": [],
                "model": [
                    "int"
                ]
            }
        },
        "TestDropDownWidget.test_empty_widget_metadata": {
            "name": "test_empty_widget_metadata",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestDropDownWidget.test_data_updating": {
            "name": "test_data_updating",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestDropDownWidget.test_placeholder_text": {
            "name": "test_placeholder_text",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "Dict[str,Sequence[str]]"
                ]
            }
        },
        "TestCheckBoxWidget.test_empty_widget_metadata": {
            "name": "test_empty_widget_metadata",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestCheckBoxWidget.test_checking_changes_value": {
            "name": "test_checking_changes_value",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestFileSelectWidget.test_empty_widget_metadata": {
            "name": "test_empty_widget_metadata",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestFileSelectWidget.test_browse_dir_valid": {
            "name": "test_browse_dir_valid",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestFileSelectWidget.test_browse_dir_canceled": {
            "name": "test_browse_dir_canceled",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestDirectorySelectWidget.test_empty_widget_metadata": {
            "name": "test_empty_widget_metadata",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestDirectorySelectWidget.test_browse_dir_valid": {
            "name": "test_browse_dir_valid",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        },
        "TestDirectorySelectWidget.test_browse_dir_canceled": {
            "name": "test_browse_dir_canceled",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtbot": []
            }
        }
    },
    "Speedwagon-master/tests/tasks/test_checksum_tasks.py": {
        "TestMakeChecksumTask.test_work": {
            "name": "test_work",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "List[str]",
                    "bool",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "TestMakeCheckSumReportTask.test_work": {
            "name": "test_work",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Speedwagon-master/tests/tasks/test_filesystem.py": {
        "TestDeleteFile.task": {
            "name": "task",
            "location": 10,
            "return": [
                "int",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteFile.test_removal_called": {
            "name": "test_removal_called",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "task": []
            }
        },
        "TestDeleteFile.test_task_description": {
            "name": "test_task_description",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ]
            }
        },
        "TestDeleteDirectory.task": {
            "name": "task",
            "location": 25,
            "return": [
                "int",
                "bool",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteDirectory.test_removal_called": {
            "name": "test_removal_called",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "task": []
            }
        },
        "TestDeleteDirectory.test_task_description": {
            "name": "test_task_description",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/tasks/test_prep_tasks.py": {
        "test_make_yaml_task_calls_make_yaml": {
            "name": "test_make_yaml_task_calls_make_yaml",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_generate_checksum_task_task_calls_create_checksum_report": {
            "name": "test_generate_checksum_task_task_calls_create_checksum_report",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_prep_task_task_calls_generate_package": {
            "name": "test_prep_task_task_calls_generate_package",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]",
                    "set"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_make_yaml_task_calls_make_yaml.mock_inplace_package": {
            "name": "mock_inplace_package",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_generate_checksum_task_task_calls_create_checksum_report.mock_inplace_package": {
            "name": "mock_inplace_package",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_prep_task_task_calls_generate_package.mock_inplace_package": {
            "name": "mock_inplace_package",
            "location": 70,
            "return": [
                "str",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/tasks/test_tasks.py": {
        "simple_task_builder": {
            "name": "simple_task_builder",
            "location": 63,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "List[str]",
                    "Union[str, dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_task_builder": {
            "name": "test_task_builder",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": [
                    "str",
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_task_progress": {
            "name": "test_task_progress",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_task_results": {
            "name": "test_task_results",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": []
            }
        },
        "test_task_logs": {
            "name": "test_task_logs",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": [
                    "str"
                ]
            }
        },
        "test_task_with_2_subtask_results": {
            "name": "test_task_with_2_subtask_results",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": []
            }
        },
        "test_task_log_with_2_subtask": {
            "name": "test_task_log_with_2_subtask",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": [
                    "str"
                ]
            }
        },
        "test_task_can_be_picked": {
            "name": "test_task_can_be_picked",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int"
                ]
            }
        },
        "execute_task": {
            "name": "execute_task",
            "location": 135,
            "return": [
                "Optional[str]",
                "Callable[[Any], bool]",
                "dict",
                "logging.LogRecord",
                "Dict[str, Any]"
            ],
            "arguments": {
                "new_task": [
                    "dict"
                ]
            }
        },
        "test_task_as_concurrent_future": {
            "name": "test_task_as_concurrent_future",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder": []
            }
        },
        "simple_task_builder_with_2_subtasks": {
            "name": "simple_task_builder_with_2_subtasks",
            "location": 152,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "Optional[str]",
                    "IO[str]",
                    "Union[str, dict]"
                ]
            }
        },
        "test_adapter_results": {
            "name": "test_adapter_results",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder_with_2_subtasks": []
            }
        },
        "test_adapter_logs": {
            "name": "test_adapter_logs",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task_builder_with_2_subtasks": [
                    "int"
                ]
            }
        },
        "test_pretask_builder": {
            "name": "test_pretask_builder",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_posttask_builder": {
            "name": "test_posttask_builder",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_adapter_results_with_pretask": {
            "name": "test_adapter_results_with_pretask",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_adapter_results_with_posttask": {
            "name": "test_adapter_results_with_posttask",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "SimpleSubtask.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SimpleSubtask.work": {
            "name": "work",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSubtask.settings": {
            "name": "settings",
            "location": 27,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplePreTask.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SimplePreTask.work": {
            "name": "work",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplePreTask.settings": {
            "name": "settings",
            "location": 43,
            "return": [
                "Dict[Text,Text]",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMultistage.process_subtask_results": {
            "name": "process_subtask_results",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "subtask_results": [
                    "List",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SimpleTaskBuilder.task": {
            "name": "task",
            "location": 58,
            "return": [
                "SimpleMultistage",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogCatcher.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "int",
                    "float",
                    "bool"
                ],
                "level": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "LogCatcher.emit": {
            "name": "emit",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_batch_to_hathitrust.py": {
        "test_hathi_limited_to_dl_compound_has_options": {
            "name": "test_hathi_limited_to_dl_compound_has_options",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "dict",
                    "Callable[[], str]",
                    "str"
                ],
                "label": [
                    "int",
                    "dict",
                    "Callable[[], str]",
                    "str"
                ]
            }
        },
        "test_initial_task_creates_task": {
            "name": "test_initial_task_creates_task",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initial_task": {
            "name": "test_initial_task",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "unconfigured_workflow": {
            "name": "unconfigured_workflow",
            "location": 139,
            "return": [
                "Tuple[dict[Text,None]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_create_new_task": {
            "name": "test_create_new_task",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_create_new_task_marc": {
            "name": "test_create_new_task_marc",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_generate_report": {
            "name": "test_generate_report",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_generate_checksum_calls_prep_checksum_task": {
            "name": "test_generate_checksum_calls_prep_checksum_task",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_yaml_task": {
            "name": "test_yaml_task",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transform_package_task": {
            "name": "test_transform_package_task",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_initial_task.mock_scandir": {
            "name": "mock_scandir",
            "location": 71,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_capture_one_to_dl_compound.py": {
        "test_option_validate_output_false": {
            "name": "test_option_validate_output_false",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_option_validate_output": {
            "name": "test_option_validate_output",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_valid_option_explanation_is_ok": {
            "name": "test_valid_option_explanation_is_ok",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_output_must_exist": {
            "name": "test_output_must_exist",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_input_must_exist": {
            "name": "test_input_must_exist",
            "location": 81,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_input_and_out_invalid_produces_errors_with_both": {
            "name": "test_input_and_out_invalid_produces_errors_with_both",
            "location": 102,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_create_new_task_dl": {
            "name": "test_create_new_task_dl",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_package_converter": {
            "name": "test_package_converter",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_must_exist.mock_exists": {
            "name": "mock_exists",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_input_must_exist.mock_exists": {
            "name": "mock_exists",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_input_and_out_invalid_produces_errors_with_both.mock_exists": {
            "name": "mock_exists",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_discover_task_metadata.mock_exists": {
            "name": "mock_exists",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_discover_task_metadata.mock_scandir": {
            "name": "mock_scandir",
            "location": 141,
            "return": [
                "typing.Generator[MagicMock]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_capture_one_to_dl_compound_and_dl.py": {
        "test_input_must_exist": {
            "name": "test_input_must_exist",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "user_options": []
            }
        },
        "test_create_new_task_hathi_and_dl": {
            "name": "test_create_new_task_hathi_and_dl",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_package_converter": {
            "name": "test_package_converter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "user_options": {
            "name": "user_options",
            "location": 201,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_output_validator": {
            "name": "test_output_validator",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ],
                "dl_outpath": [
                    "Callable[[Any, Any], Any]"
                ],
                "ht_outpath": [
                    "Callable[[Any, Any], Any]"
                ],
                "is_valid": [
                    "int"
                ]
            }
        },
        "test_output_validator_success_is_ok": {
            "name": "test_output_validator_success_is_ok",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "user_options": [],
                "monkeypatch": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_discover_task_metadata_gets_right_package": {
            "name": "test_discover_task_metadata_gets_right_package",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "user_options": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "user_selected_package_type": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "expected_package_type": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "monkeypatch": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_discover_task_metadata_invalid_package": {
            "name": "test_discover_task_metadata_invalid_package",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "user_options": []
            }
        },
        "test_failed_to_locate_files_throws_speedwagon_exception": {
            "name": "test_failed_to_locate_files_throws_speedwagon_exception",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "user_options": [
                    "str"
                ],
                "monkeypatch": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_package_converter_invalid_format": {
            "name": "test_package_converter_invalid_format",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input_must_exist.mock_exists": {
            "name": "mock_exists",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_discover_task_metadata.mock_exists": {
            "name": "mock_exists",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_discover_task_metadata.mock_scandir": {
            "name": "mock_scandir",
            "location": 52,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestWorkflow.test_output": {
            "name": "test_output",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_options": [
                    "str"
                ],
                "monkeypatch": [
                    "Optional[str]",
                    "str"
                ],
                "dl_outpath": [
                    "Callable",
                    "Optional[bytes]"
                ],
                "ht_outpath": [
                    "Callable",
                    "Optional[bytes]"
                ]
            }
        },
        "TestValidateUserArgs.test_user_options_matches_user_typedict": {
            "name": "test_user_options_matches_user_typedict",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_options": [
                    "str",
                    "AbstractSet",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "AbstractSet",
                    "Optional[str]"
                ]
            }
        },
        "TestValidateUserArgs.test_one_output_must_exist": {
            "name": "test_one_output_must_exist",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_options": [
                    "List[str]"
                ],
                "monkeypatch": [
                    "str",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "dl_outpath": [],
                "ht_outpath": [],
                "is_valid": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestValidateUserArgs.test_valid": {
            "name": "test_valid",
            "location": 245,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_options": [],
                "monkeypatch": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestValidateUserArgs.test_invalid_no_outputs": {
            "name": "test_invalid_no_outputs",
            "location": 255,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_options": []
            }
        },
        "test_discover_task_metadata_gets_right_package.mock_scandir": {
            "name": "mock_scandir",
            "location": 335,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "deque[str]"
                ]
            }
        },
        "test_discover_task_metadata_gets_right_package.PackageFactory": {
            "name": "PackageFactory",
            "location": 348,
            "return": [
                "str"
            ],
            "arguments": {
                "package_type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestOutputsValidValuesValidator.test_valid": {
            "name": "test_valid",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputsValidValuesValidator.test_valid_explaination_ok": {
            "name": "test_valid_explaination_ok",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputsValidValuesValidator.test_single_invalid_dir": {
            "name": "test_single_invalid_dir",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputsValidValuesValidator.test_single_invalid_dir_message": {
            "name": "test_single_invalid_dir_message",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputsValidValuesValidator.test_multiple_invalid_dir_message": {
            "name": "test_multiple_invalid_dir_message",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputsValidValuesValidator.test_one_valid_on_none": {
            "name": "test_one_valid_on_none",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflow.test_output.mock_scandir": {
            "name": "mock_scandir",
            "location": 141,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_completeness.py": {
        "test_completeness_workflow_options": {
            "name": "test_completeness_workflow_options",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "bool"
                ],
                "label": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_initial_task_creates_task": {
            "name": "test_initial_task_creates_task",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unconfigured_workflow": {
            "name": "unconfigured_workflow",
            "location": 45,
            "return": [
                "Tuple[Union[CompletenessWorkflow,dict]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_discover_task_metadata_one_per_package": {
            "name": "test_discover_task_metadata_one_per_package",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "protoactor.actor.process.ProcessRegistry",
                    "Dict[str, Any]"
                ],
                "unconfigured_workflow": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_create_new_task_generates_subtask": {
            "name": "test_create_new_task_generates_subtask",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_generate_report_creates_a_report": {
            "name": "test_generate_report_creates_a_report",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_hathi_missing_checksum_task_calls_validator": {
            "name": "test_hathi_missing_checksum_task_calls_validator",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Collection[Any]]"
                ],
                "errors_found": [
                    "Collection[T]",
                    "IO",
                    "Union[int, float]",
                    "Optional[bytes]"
                ],
                "throw_exception": [
                    "Type[Any]",
                    "List[str]"
                ]
            }
        },
        "test_validator_task_calls_validator": {
            "name": "test_validator_task_calls_validator",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "validator_task": [
                    "str"
                ],
                "validator_process": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_hathi_checksum_task_calls_validator": {
            "name": "test_hathi_checksum_task_calls_validator",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_validate_marc_task_calls_validator": {
            "name": "test_validate_marc_task_calls_validator",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_validate_ocr_utf8_task_calls_validator": {
            "name": "test_validate_ocr_utf8_task_calls_validator",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_manifest_generations_task": {
            "name": "test_manifest_generations_task",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_package_naming_convention_task": {
            "name": "test_package_naming_convention_task",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_extra_subdirectory_permission_issues": {
            "name": "test_extra_subdirectory_permission_issues",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "caplog": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_discover_task_metadata_one_per_package.mock_scandir": {
            "name": "mock_scandir",
            "location": 60,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestValidateYMLTask.test_validate_yml_task_calls_validator": {
            "name": "test_validate_yml_task_calls_validator",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestValidateYMLTask.test_yaml_file_not_found_error": {
            "name": "test_yaml_file_not_found_error",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "test_validate_ocr_utf8_task_calls_validator.mock_scandir": {
            "name": "mock_scandir",
            "location": 297,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_manifest_generations_task.mock_scandir": {
            "name": "mock_scandir",
            "location": 325,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_manifest_generations_task.mock_walk": {
            "name": "mock_walk",
            "location": 332,
            "return": [
                "List[tuple[Union[Text,list,tuple[Text]]]]",
                "float",
                "Callable[[bytes],None]",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "List[Type]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "TestCompletenessReportGenerator.test_empty_report": {
            "name": "test_empty_report",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompletenessReportGenerator.test_with_error": {
            "name": "test_with_error",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_hathi_missing_checksum_task_calls_validator.exception_runner": {
            "name": "exception_runner",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/workflows/test_convert_capture_one_preservation_to_digital_lib_jp2.py": {
        "test_package_image_task_success": {
            "name": "test_package_image_task_success",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_validate_user_options_valid": {
            "name": "test_validate_user_options_valid",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_validate_user_options_missing_input": {
            "name": "test_validate_user_options_missing_input",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_validate_user_options_input_not_exists": {
            "name": "test_validate_user_options_input_not_exists",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_validate_user_options_input_is_file": {
            "name": "test_validate_user_options_input_is_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_validate_user_options_input_not_pres": {
            "name": "test_validate_user_options_input_not_pres",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_package_image_task_failure": {
            "name": "test_package_image_task_failure",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_kdu_non_zero_throws_exception": {
            "name": "test_kdu_non_zero_throws_exception",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_kdu_success": {
            "name": "test_kdu_success",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str,Sequence[str]]"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_package_image_task_failure.get_mock_processfile": {
            "name": "get_mock_processfile",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "TestConvertTiffPreservationToDLJp2Workflow.workflow": {
            "name": "workflow",
            "location": 111,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.default_options": {
            "name": "default_options",
            "location": 116,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.test_validate_user_options_valid": {
            "name": "test_validate_user_options_valid",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "workflow": [
                    "str"
                ],
                "default_options": []
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bytes"
                ],
                "workflow": [],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.test_generate_report_success": {
            "name": "test_generate_report_success",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "Dict[Hashable, Iterable[Hashable]]"
                ],
                "default_options": [
                    "Dict"
                ]
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.test_generate_report_failure": {
            "name": "test_generate_report_failure",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "Dict[Hashable, Iterable[Hashable]]"
                ],
                "default_options": [
                    "Dict"
                ]
            }
        },
        "TestPackageImageConverterTask.test_work": {
            "name": "test_work",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestConvertTiffPreservationToDLJp2Workflow.test_discover_task_metadata.scandir": {
            "name": "scandir",
            "location": 161,
            "return": [
                "str",
                "List[Mock]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_create_checksums.py": {
        "test_singleChecksum_has_options": {
            "name": "test_singleChecksum_has_options",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multipleChecksum_has_options": {
            "name": "test_multipleChecksum_has_options",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/workflows/test_get_marc.py": {
        "unconfigured_workflow": {
            "name": "unconfigured_workflow",
            "location": 15,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_input_dir_is_valid": {
            "name": "test_input_dir_is_valid",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [],
                "unconfigured_workflow": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_invalid_input_dir_raises": {
            "name": "test_invalid_input_dir_raises",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "unconfigured_workflow": [
                    "tests.async_mock.Mock",
                    "Type"
                ]
            }
        },
        "test_discover_metadata": {
            "name": "test_discover_metadata",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "monkeypatch": []
            }
        },
        "test_task_creates_file": {
            "name": "test_task_creates_file",
            "location": 95,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "monkeypatch": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "identifier_type": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "subdirectory": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_split_id_volumes": {
            "name": "test_split_id_volumes",
            "location": 133,
            "return": [],
            "arguments": {
                "identifier_type": [
                    "Type[Any]",
                    "dict",
                    "str"
                ],
                "directory": [
                    "str",
                    "Union[int, str]",
                    "Dict[str, object]",
                    "int"
                ],
                "identifier": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ],
                "volume": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_identifier_splits": {
            "name": "test_identifier_splits",
            "location": 150,
            "return": [],
            "arguments": {
                "identifier_type": [
                    "Callable[[Optional, Optional, str], None]",
                    "bool",
                    "List[str]",
                    "str",
                    "List[int]",
                    "Optional[List[str]]"
                ],
                "subdirectory": [
                    "Callable[[Optional, Optional, str], None]",
                    "bool",
                    "List[str]",
                    "str",
                    "List[int]",
                    "Optional[List[str]]"
                ],
                "expected_identifier": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]"
                ],
                "expected_volume": [
                    "int",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "test_missing_server_url_fails": {
            "name": "test_missing_server_url_fails",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_generate_report_success": {
            "name": "test_generate_report_success",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_generate_report_failure": {
            "name": "test_generate_report_failure",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_task_logging_mentions_identifer": {
            "name": "test_task_logging_mentions_identifer",
            "location": 209,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "identifier_type": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "unittesmock.Mock",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]"
                ],
                "subdirectory": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_create_new_task": {
            "name": "test_create_new_task",
            "location": 250,
            "return": [],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ],
                "identifier_type": [],
                "subdirectory": [
                    "Container"
                ],
                "identifier": [],
                "volume": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock",
                    "Type",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_missing_server_url_init_raises": {
            "name": "test_missing_server_url_init_raises",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_955_field_defaults_to_true": {
            "name": "test_955_field_defaults_to_true",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_955_added_to_tasks": {
            "name": "test_955_added_to_tasks",
            "location": 291,
            "return": [],
            "arguments": {
                "unconfigured_workflow": [
                    "Mapping[str, Any]",
                    "Optional[str]"
                ],
                "identifier_type": [
                    "bool",
                    "str"
                ],
                "subdirectory": [
                    "str"
                ],
                "expected_identifier": [
                    "str",
                    "type"
                ],
                "volume": [
                    "bool"
                ]
            }
        },
        "test_995_enhancement_task_adds_955": {
            "name": "test_995_enhancement_task_adds_955",
            "location": 514,
            "return": [],
            "arguments": {
                "identifier_type": [
                    "Type[Any]",
                    "dict",
                    "str"
                ],
                "subdirectory": [
                    "str",
                    "List[str]"
                ],
                "identifier": [
                    "Type[Any]",
                    "dict",
                    "str"
                ],
                "volume": [
                    "Type[Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "test_995_enhancement_task_formats_without_namespace_tags": {
            "name": "test_995_enhancement_task_formats_without_namespace_tags",
            "location": 536,
            "return": [],
            "arguments": {
                "tmpdir": [
                    "Type",
                    "tests.async_mock.MagicMock",
                    "Type[Any]"
                ],
                "identifier_type": [
                    "Type",
                    "tests.async_mock.MagicMock",
                    "Type[Any]"
                ],
                "subdirectory": [
                    "str"
                ],
                "identifier": [
                    "Type",
                    "tests.async_mock.MagicMock",
                    "Type[Any]"
                ],
                "volume": [
                    "Type",
                    "tests.async_mock.MagicMock",
                    "Type[Any]"
                ]
            }
        },
        "test_fail_on_server_connection": {
            "name": "test_fail_on_server_connection",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_955_and_035_is_valid": {
            "name": "test_955_and_035_is_valid",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_missing_Identifier_type_invalid": {
            "name": "test_missing_Identifier_type_invalid",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "unconfigured_workflow": [
                    "int",
                    "Dict[str, Sequence[str]]",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_955_false_and_035_True_is_invalid": {
            "name": "test_955_false_and_035_True_is_invalid",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "unconfigured_workflow": [
                    "tests.async_mock.Mock",
                    "bool",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_955_and035": {
            "name": "test_955_and035",
            "location": 642,
            "return": [],
            "arguments": {
                "f955": [
                    "int",
                    "bool",
                    "Callable",
                    "list",
                    "Literal",
                    "Sequence[str]"
                ],
                "f035": [
                    "int",
                    "bool",
                    "Callable",
                    "list",
                    "Literal",
                    "Sequence[str]"
                ],
                "expected_valid": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, List[int]]",
                    "tuple"
                ],
                "monkeypatch": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "unconfigured_workflow": [
                    "int",
                    "bool",
                    "Callable",
                    "list",
                    "Literal",
                    "Sequence[str]"
                ]
            }
        },
        "test_035_task_has_959": {
            "name": "test_035_task_has_959",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_035_enhancement_task_adds_035": {
            "name": "test_035_enhancement_task_adds_035",
            "location": 677,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "Type",
                    "str"
                ],
                "identifier_type": [
                    "Type",
                    "str"
                ],
                "subdirectory": [
                    "Type",
                    "str"
                ],
                "identifier": [
                    "Type",
                    "str"
                ],
                "volume": [
                    "Type",
                    "str"
                ]
            }
        },
        "test_create_task_enhancements": {
            "name": "test_create_task_enhancements",
            "location": 722,
            "return": [],
            "arguments": {
                "unconfigured_workflow": [
                    "int",
                    "str"
                ],
                "e955": [
                    "Tuple[str, Any]",
                    "List[str]",
                    "Type[Any]",
                    "str"
                ],
                "e035": [
                    "Tuple[str, Any]",
                    "List[str]",
                    "Type[Any]",
                    "str"
                ],
                "expected_number_tasks_created": []
            }
        },
        "test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 789,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "Optional[int]"
                ],
                "unconfigured_workflow": [
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "arg_subdir": [
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "add_955": [
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "add_035": [
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "expected": [
                    "str",
                    "type",
                    "Optional[dict]"
                ]
            }
        },
        "test_failing_to_parse_provides_input": {
            "name": "test_failing_to_parse_provides_input",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_reflow": {
            "name": "test_reflow",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_catching_unicode_error": {
            "name": "test_catching_unicode_error",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 908,
            "return": [],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_invalid_input_dir_raises.mock_exists": {
            "name": "mock_exists",
            "location": 41,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_invalid_input_dir_raises.mock_isdir": {
            "name": "mock_isdir",
            "location": 44,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_discover_metadata.get_data": {
            "name": "get_data",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_task_creates_file.mock_get": {
            "name": "mock_get",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_task_creates_file.mock_log": {
            "name": "mock_log",
            "location": 113,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "test_task_logging_mentions_identifer.mock_get": {
            "name": "mock_get",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_task_logging_mentions_identifer.mock_log": {
            "name": "mock_log",
            "location": 229,
            "return": [],
            "arguments": {
                "message": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_task_logging_mentions_identifer.mock_write_file": {
            "name": "mock_write_file",
            "location": 233,
            "return": [],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "List[dict]",
                    "bool",
                    "List[Dict]",
                    "Iterable[bytes]"
                ]
            }
        },
        "test_fail_on_server_connection.mock_request": {
            "name": "mock_request",
            "location": 562,
            "return": [],
            "arguments": {}
        },
        "test_955_and_035_is_valid.mock_exists": {
            "name": "mock_exists",
            "location": 576,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_955_and_035_is_valid.mock_isdir": {
            "name": "mock_isdir",
            "location": 579,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_missing_Identifier_type_invalid.mock_exists": {
            "name": "mock_exists",
            "location": 596,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_missing_Identifier_type_invalid.mock_isdir": {
            "name": "mock_isdir",
            "location": 599,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_955_false_and_035_True_is_invalid.mock_exists": {
            "name": "mock_exists",
            "location": 617,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_955_false_and_035_True_is_invalid.mock_isdir": {
            "name": "mock_isdir",
            "location": 620,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_955_and035.mock_exists": {
            "name": "mock_exists",
            "location": 650,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[dict]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_955_and035.mock_isdir": {
            "name": "mock_isdir",
            "location": 653,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[dict]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_035_enhancement_task_adds_035.sub_only": {
            "name": "sub_only",
            "location": 702,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "List[float]",
                    "float",
                    "list"
                ]
            }
        },
        "test_discover_task_metadata.mock_scan_dir": {
            "name": "mock_scan_dir",
            "location": 799,
            "return": [
                "str"
            ],
            "arguments": {
                "root_path": [
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "test_failing_to_parse_provides_input.mock_parse": {
            "name": "mock_parse",
            "location": 833,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "test_reflow.mock_get": {
            "name": "mock_get",
            "location": 858,
            "return": [],
            "arguments": {}
        },
        "test_catching_unicode_error.mock_get": {
            "name": "mock_get",
            "location": 879,
            "return": [
                "int",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/workflows/test_hathiprep.py": {
        "test_workflow_options": {
            "name": "test_workflow_options",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "bool"
                ],
                "label": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_initial_task_creates_task": {
            "name": "test_initial_task_creates_task",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_additional_info_opens_dialog_box": {
            "name": "test_get_additional_info_opens_dialog_box",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "unconfigured_workflow": {
            "name": "unconfigured_workflow",
            "location": 87,
            "return": [
                "Tuple[Union[HathiPrepWorkflow,dict]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_discover_task_metadata_one_per_package": {
            "name": "test_discover_task_metadata_one_per_package",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ],
                "unconfigured_workflow": [
                    "str",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_create_new_task_generates_subtask": {
            "name": "test_create_new_task_generates_subtask",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_generate_report_creates_a_report": {
            "name": "test_generate_report_creates_a_report",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_find_packages_task": {
            "name": "test_find_packages_task",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_additional_info_opens_dialog_box.mock_scandir": {
            "name": "mock_scandir",
            "location": 48,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_find_packages_task.mock_scandir": {
            "name": "mock_scandir",
            "location": 152,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_hathi_limited_to_dl_compound.py": {
        "hathi_limited_view_package_dirs": {
            "name": "hathi_limited_view_package_dirs",
            "location": 13,
            "return": [],
            "arguments": {
                "tmpdir_factory": [
                    "zipfile.ZipFile",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_output_input_same_is_invalid": {
            "name": "test_output_input_same_is_invalid",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_output_must_exist": {
            "name": "test_output_must_exist",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_no_missing_required": {
            "name": "test_no_missing_required",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "missing": [
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ],
                "tmpdir": [
                    "bytes"
                ]
            }
        },
        "test_input_must_exist": {
            "name": "test_input_must_exist",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_hathi_limited_to_dl_compound_has_options": {
            "name": "test_hathi_limited_to_dl_compound_has_options",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "Dict",
                    "Callable[,str]",
                    "str"
                ],
                "label": [
                    "int",
                    "Dict",
                    "Callable[,str]",
                    "str"
                ]
            }
        },
        "TestPackageConverter.test_transform_is_called": {
            "name": "test_transform_is_called",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHathiLimitedToDLWorkflow.test_report": {
            "name": "test_report",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHathiLimitedToDLWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHathiLimitedToDLWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestHathiLimitedToDLWorkflow.test_discover_task_metadata.locate_packages": {
            "name": "locate_packages",
            "location": 181,
            "return": [
                "str",
                "List[Mock]"
            ],
            "arguments": {
                "_": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_make_jp2.py": {
        "test_make_jp2_workflow_options": {
            "name": "test_make_jp2_workflow_options",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "int",
                    "dict"
                ],
                "label": [
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "unconfigured_workflow": {
            "name": "unconfigured_workflow",
            "location": 21,
            "return": [
                "Tuple[Union[MakeJp2Workflow,dict]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict"
                ],
                "unconfigured_workflow": [
                    "str",
                    "int"
                ],
                "profile_name": [
                    "str",
                    "int"
                ],
                "profile": []
            }
        },
        "test_create_new_task_generates_subtask": {
            "name": "test_create_new_task_generates_subtask",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ],
                "profile": [
                    "str"
                ]
            }
        },
        "test_generate_report_creates_a_report": {
            "name": "test_generate_report_creates_a_report",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "unconfigured_workflow": [
                    "str"
                ]
            }
        },
        "test_package_naming_convention_task": {
            "name": "test_package_naming_convention_task",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_create_jp2": {
            "name": "test_create_jp2",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Tuple[str, str]",
                    "bool",
                    "bytes"
                ],
                "profile_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_discover_task_metadata.mock_locate_source_files": {
            "name": "mock_locate_source_files",
            "location": 41,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ]
            }
        },
        "test_create_jp2.mock_walk": {
            "name": "mock_walk",
            "location": 145,
            "return": [
                "bool",
                "List[tuple[Union[Text,list[Text],tuple]]]"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "List[Type]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_create_jp2.mock_scandir": {
            "name": "mock_scandir",
            "location": 150,
            "return": [
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_create_jp2.mock_kdu_compress_cli2": {
            "name": "mock_kdu_compress_cli2",
            "location": 177,
            "return": [
                "int",
                "float",
                "Callable[[bytes],None]",
                "bool",
                "str"
            ],
            "arguments": {
                "infile": [
                    "bool",
                    "int",
                    "str"
                ],
                "outfile": [
                    "bool",
                    "str",
                    "int"
                ],
                "in_args": [
                    "None",
                    "bool",
                    "int",
                    "str"
                ],
                "out_args": [
                    "None",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_success": {
            "name": "test_validate_user_options_success",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "str",
                    "Callable"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_not_exists": {
            "name": "test_validate_user_options_not_exists",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_input_not_exists": {
            "name": "test_validate_user_options_input_not_exists",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_input_file_is_error": {
            "name": "test_validate_user_options_input_file_is_error",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Callable"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_output_file_is_error": {
            "name": "test_validate_user_options_output_file_is_error",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Callable"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_not_exists.exists": {
            "name": "exists",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_input_not_exists.exists": {
            "name": "exists",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list"
                ]
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_input_file_is_error.isdir": {
            "name": "isdir",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestMakeJp2Workflow.test_validate_user_options_output_file_is_error.isdir": {
            "name": "isdir",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_make_workflow_make_checksum.py": {
        "TestZipPackagesWorkflow.workflow": {
            "name": "workflow",
            "location": 13,
            "return": [
                "Callable",
                "MakeChecksumBatchMultipleWorkflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZipPackagesWorkflow.default_options": {
            "name": "default_options",
            "location": 18,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "workflow": [],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestZipPackagesWorkflow.test_generate_report": {
            "name": "test_generate_report",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_completion_task": {
            "name": "test_completion_task",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.workflow": {
            "name": "workflow",
            "location": 133,
            "return": [
                "Callable",
                "RegenerateChecksumBatchSingleWorkflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.default_options": {
            "name": "default_options",
            "location": 140,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "workflow": [],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.test_generate_report": {
            "name": "test_generate_report",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.test_completion_task": {
            "name": "test_completion_task",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "workflow": [
                    "mock.MagicMock"
                ],
                "default_options": []
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.workflow": {
            "name": "workflow",
            "location": 270,
            "return": [
                "Callable",
                "RegenerateChecksumBatchMultipleWorkflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.default_options": {
            "name": "default_options",
            "location": 277,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "workflow": [],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.test_generate_report": {
            "name": "test_generate_report",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.test_completion_task": {
            "name": "test_completion_task",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "workflow": [
                    "mock.MagicMock"
                ],
                "default_options": []
            }
        },
        "TestZipPackagesWorkflow.test_discover_task_metadata.scandir": {
            "name": "scandir",
            "location": 36,
            "return": [
                "List[Mock]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "root": [
                    "str"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_discover_task_metadata.walk": {
            "name": "walk",
            "location": 43,
            "return": [
                "typing.Generator[tuple[tuple[typing.Text]]]"
            ],
            "arguments": {
                "root": [
                    "T",
                    "Sequence[str]"
                ]
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.test_discover_task_metadata.scandir": {
            "name": "scandir",
            "location": 158,
            "return": [
                "List[Mock]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "root": [
                    "str"
                ]
            }
        },
        "TestRegenerateChecksumBatchSingleWorkflow.test_discover_task_metadata.walk": {
            "name": "walk",
            "location": 165,
            "return": [
                "typing.Generator[tuple[tuple[typing.Text]]]"
            ],
            "arguments": {
                "root": [
                    "T",
                    "Sequence[str]"
                ]
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.test_discover_task_metadata.scandir": {
            "name": "scandir",
            "location": 295,
            "return": [
                "List[Mock]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "root": [
                    "str"
                ]
            }
        },
        "TestRegenerateChecksumBatchMultipleWorkflow.test_discover_task_metadata.walk": {
            "name": "walk",
            "location": 302,
            "return": [
                "typing.Generator[tuple[tuple[typing.Text]]]"
            ],
            "arguments": {
                "root": [
                    "T",
                    "Sequence[str]"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_medua_preingest_curation.py": {
        "default_user_args": {
            "name": "default_user_args",
            "location": 157,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "test_validate_missing_values": {
            "name": "test_validate_missing_values",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_no_missing_values": {
            "name": "test_validate_no_missing_values",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "default_user_args": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "test_validate_path_valid": {
            "name": "test_validate_path_valid",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_validate_path_invalid": {
            "name": "test_validate_path_invalid",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_find_capture_one_data_nothing_found": {
            "name": "test_find_capture_one_data_nothing_found",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Callable",
                    "Optional[str]",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_find_capture_one_data_found": {
            "name": "test_find_capture_one_data_found",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestMedusaPreingestCuration.default_args": {
            "name": "default_args",
            "location": 15,
            "return": [
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ]
            }
        },
        "TestMedusaPreingestCuration.workflow": {
            "name": "workflow",
            "location": 21,
            "return": [
                "MedusaPreingestCuration",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMedusaPreingestCuration.test_default_user_args_are_invalidate": {
            "name": "test_default_user_args_are_invalidate",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ],
                "default_args": [
                    "str",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_valid_user_args_returns_true": {
            "name": "test_valid_user_args_returns_true",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ],
                "default_args": [
                    "str"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_sort_item_data_unknown_throw": {
            "name": "test_sort_item_data_unknown_throw",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "tests.async_mock.MagicMock",
                    "str"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_sort_item_data": {
            "name": "test_sort_item_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestMedusaPreingestCuration.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ],
                "default_args": [
                    "str"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_get_additional_info_opens_dialog": {
            "name": "test_get_additional_info_opens_dialog",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Dict[str, Any]"
                ],
                "default_args": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ],
                "job_args": [
                    "str"
                ],
                "expected_class": [
                    "str"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_initial_task_adds_finding_task": {
            "name": "test_initial_task_adds_finding_task",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "default_args": [
                    "bob_emploi.frontend.api.user_pb2.User"
                ]
            }
        },
        "TestMedusaPreingestCuration.test_generate_report_mentions_file_name": {
            "name": "test_generate_report_mentions_file_name",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ],
                "default_args": [
                    "str"
                ]
            }
        },
        "TestFindOffendingFiles.test_description": {
            "name": "test_description",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindOffendingFiles.test_locate_folders": {
            "name": "test_locate_folders",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestFindOffendingFiles.test_work_calls_locate_results": {
            "name": "test_work_calls_locate_results",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestFindOffendingFiles.test_locate_results_throws_file_not_found_if_not_exists": {
            "name": "test_locate_results_throws_file_not_found_if_not_exists",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindOffendingFiles.test_locate_results_calls_locate_folders": {
            "name": "test_locate_results_calls_locate_folders",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestFindOffendingFiles.test_locate_folders_recursive": {
            "name": "test_locate_folders_recursive",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestFindOffendingFiles.test_locate_offending_subdirectories_calls_find_capture_one_data": {
            "name": "test_locate_offending_subdirectories_calls_find_capture_one_data",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestFindOffendingFiles.offending_files": {
            "name": "offending_files",
            "location": 343,
            "return": [
                "str",
                "Dict[Tuple, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindOffendingFiles.test_locate_offending_files": {
            "name": "test_locate_offending_files",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ],
                "offending_files": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ],
                "underscore": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ],
                "ds_store": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ],
                "expected_file": [
                    "str",
                    "Optional[str]"
                ],
                "expected_excluded_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_find_capture_one_data_found.walk": {
            "name": "walk",
            "location": 429,
            "return": [
                "List[list[Union[list[Text],tuple]]]",
                "str",
                "Tuple[str]",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "top": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestFindOffendingFiles.test_locate_folders.scandir": {
            "name": "scandir",
            "location": 223,
            "return": [
                "list[Mock]"
            ],
            "arguments": {}
        },
        "TestFindOffendingFiles.test_locate_folders_recursive.walk": {
            "name": "walk",
            "location": 306,
            "return": [
                "List[list[Union[list[Text],tuple]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "top": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestFindOffendingFiles.offending_files._make_mock_offending_files": {
            "name": "_make_mock_offending_files",
            "location": 344,
            "return": [
                "List[Mock]",
                "str",
                "Optional[str]",
                "Union[str,TextIO]"
            ],
            "arguments": {
                "search_path": [
                    "str"
                ]
            }
        },
        "TestFindOffendingFiles.test_locate_offending_files.scandir": {
            "name": "scandir",
            "location": 395,
            "return": [
                "List[Mock]",
                "str",
                "List[str]",
                "Callable",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/tests/workflows/test_ocr.py": {
        "test_no_config": {
            "name": "test_no_config",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discover_task_metadata_raises_with_no_tessdata": {
            "name": "test_discover_task_metadata_raises_with_no_tessdata",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "logging.LogRecord"
                ],
                "tmpdir": []
            }
        },
        "test_generate_task_creates_a_file": {
            "name": "test_generate_task_creates_a_file",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": [
                    "Generator",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_generate_task_creates_a_file.mock_read": {
            "name": "mock_read",
            "location": 71,
            "return": [
                "Text",
                "float",
                "Callable[[bytes],None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "MockGenerateOCRFileTask.mock_reader": {
            "name": "mock_reader",
            "location": 93,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOCRWorkflow.workflow": {
            "name": "workflow",
            "location": 101,
            "return": [
                "OCRWorkflow",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestOCRWorkflow.default_options": {
            "name": "default_options",
            "location": 114,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestOCRWorkflow.test_validate_user_options_valid": {
            "name": "test_validate_user_options_valid",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Optional[str]"
                ],
                "workflow": [],
                "default_options": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestOCRWorkflow.test_validate_user_options_invalid_empty_path": {
            "name": "test_validate_user_options_invalid_empty_path",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool"
                ],
                "workflow": [
                    "Callable[[List, bool], None]"
                ],
                "default_options": [
                    "str"
                ]
            }
        },
        "TestOCRWorkflow.test_validate_user_options_invalid": {
            "name": "test_validate_user_options_invalid",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Optional[str]",
                    "str"
                ],
                "workflow": [
                    "Callable[[List, bool], None]"
                ],
                "default_options": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "check_function": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestOCRWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "Callable"
                ],
                "default_options": [
                    "str"
                ]
            }
        },
        "TestOCRWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestOCRWorkflow.test_generate_report": {
            "name": "test_generate_report",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestOCRWorkflow.test_initial_task": {
            "name": "test_initial_task",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int",
                    "Callable",
                    "str",
                    "TextIO",
                    "BinaryIO"
                ],
                "workflow": [
                    "str"
                ],
                "default_options": [
                    "dict",
                    "str"
                ],
                "image_file_type": [
                    "str",
                    "Callable"
                ],
                "expected_file_extension": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "bool",
                    "Union[str, IO[str]]"
                ]
            }
        },
        "TestOCRWorkflow.test_get_available_languages": {
            "name": "test_get_available_languages",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestOCRWorkflow.test_get_available_languages_ignores_osd": {
            "name": "test_get_available_languages_ignores_osd",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestFindImagesTask.test_work": {
            "name": "test_work",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestGenerateOCRFileTask.test_work": {
            "name": "test_work",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestGenerateOCRFileTask.test_read_image": {
            "name": "test_read_image",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestOCRWorkflow.test_get_available_languages.scandir": {
            "name": "scandir",
            "location": 256,
            "return": [
                "list[Mock]"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestOCRWorkflow.test_get_available_languages_ignores_osd.scandir": {
            "name": "scandir",
            "location": 271,
            "return": [
                "List[Mock]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list"
                ]
            }
        },
        "TestFindImagesTask.test_work.walk": {
            "name": "walk",
            "location": 298,
            "return": [
                "List[tuple[Union[Text,tuple[Text]]]]",
                "str",
                "Union[str,bytes]",
                "bool",
                "MutableMapping[str,Any]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_validate_metadata.py": {
        "test_validate_metadata_workflow_has_options": {
            "name": "test_validate_metadata_workflow_has_options",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "Dict",
                    "int"
                ],
                "label": [
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestValidateMetadataWorkflow.workflow": {
            "name": "workflow",
            "location": 27,
            "return": [
                "ValidateMetadataWorkflow",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateMetadataWorkflow.default_options": {
            "name": "default_options",
            "location": 31,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestValidateMetadataWorkflow.test_validate_user_options_valid": {
            "name": "test_validate_user_options_valid",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "workflow": [],
                "default_options": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "TestValidateMetadataWorkflow.test_validate_user_options_invalid": {
            "name": "test_validate_user_options_invalid",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "workflow": [
                    "str"
                ],
                "default_options": [],
                "input_data": [],
                "exists": [
                    "str",
                    "int"
                ],
                "is_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "TestValidateMetadataWorkflow.test_initial_task": {
            "name": "test_initial_task",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "workflow": [
                    "float"
                ],
                "default_options": []
            }
        },
        "TestValidateMetadataWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "Callable"
                ],
                "default_options": [
                    "str"
                ]
            }
        },
        "TestValidateMetadataWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int"
                ],
                "workflow": []
            }
        },
        "TestValidateMetadataWorkflow.test_generate_report_on_success": {
            "name": "test_generate_report_on_success",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Dict[Hashable,Iterable[Hashable]]",
                    "bytes"
                ],
                "default_options": [
                    "str"
                ]
            }
        },
        "TestValidateMetadataWorkflow.test_generate_report_on_failure": {
            "name": "test_generate_report_on_failure",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Dict[Hashable,Iterable[Hashable]]",
                    "bytes"
                ],
                "default_options": [
                    "str"
                ]
            }
        },
        "TestLocateImagesTask.test_work": {
            "name": "test_work",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "TestValidateImageMetadataTask.test_work": {
            "name": "test_work",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestLocateImagesTask.test_work.walk": {
            "name": "walk",
            "location": 195,
            "return": [
                "typing.Generator[tuple[tuple[typing.Text]]]"
            ],
            "arguments": {
                "root": [
                    "str"
                ]
            }
        },
        "TestValidateImageMetadataTask.test_work.validate": {
            "name": "validate",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "Union[str, BinaryIO]",
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Callable[[Optional], None]"
                ],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_verify_checksums.py": {
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSensitivityComparison.test_sensitive_comparison_valid": {
            "name": "test_sensitive_comparison_valid",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensitivityComparison.test_sensitive_comparison_invalid": {
            "name": "test_sensitive_comparison_invalid",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensitivityComparison.test_insensitive_comparison_valid": {
            "name": "test_insensitive_comparison_valid",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensitivityComparison.test_insensitive_comparison_invalid": {
            "name": "test_insensitive_comparison_invalid",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChecksumWorkflowValidArgs.workflow": {
            "name": "workflow",
            "location": 38,
            "return": [
                "ChecksumWorkflow",
                "List[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChecksumWorkflowValidArgs.default_options": {
            "name": "default_options",
            "location": 42,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestChecksumWorkflowValidArgs.test_empty_input_fails": {
            "name": "test_empty_input_fails",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invalid_input_value": [
                    "str",
                    "bool"
                ],
                "workflow": [
                    "str",
                    "int"
                ],
                "default_options": [
                    "bool"
                ]
            }
        },
        "TestChecksumWorkflowValidArgs.test_input_not_existing_fails": {
            "name": "test_input_not_existing_fails",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ],
                "default_options": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "monkeypatch": [
                    "Optional[str]"
                ]
            }
        },
        "TestChecksumWorkflowValidArgs.test_input_not_a_dir_fails": {
            "name": "test_input_not_a_dir_fails",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ],
                "default_options": [
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestChecksumWorkflowValidArgs.test_valid": {
            "name": "test_valid",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "dict",
                    "Callable[[List, bool], None]"
                ],
                "default_options": [
                    "Callable",
                    "bool",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "monkeypatch": [
                    "dict"
                ]
            }
        },
        "TestChecksumWorkflowTaskGenerators.workflow": {
            "name": "workflow",
            "location": 102,
            "return": [
                "ChecksumWorkflow",
                "List[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChecksumWorkflowTaskGenerators.default_options": {
            "name": "default_options",
            "location": 106,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestChecksumWorkflowTaskGenerators.test_checksum_workflow_initial_task": {
            "name": "test_checksum_workflow_initial_task",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str"
                ],
                "default_options": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "str",
                    "Optional[bytes]",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestChecksumWorkflowTaskGenerators.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestChecksumWorkflow.workflow": {
            "name": "workflow",
            "location": 181,
            "return": [
                "ChecksumWorkflow",
                "List[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChecksumWorkflow.default_options": {
            "name": "default_options",
            "location": 185,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestChecksumWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestChecksumWorkflow.test_generator_report_failure": {
            "name": "test_generator_report_failure",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "List[Dict[str, Any]]",
                    "int",
                    "str"
                ],
                "default_options": [
                    "list",
                    "Callable[[List, bool], None]",
                    "bool"
                ]
            }
        },
        "TestChecksumWorkflow.test_generator_report_success": {
            "name": "test_generator_report_success",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "List[Dict[str, Any]]",
                    "int",
                    "str"
                ],
                "default_options": [
                    "list",
                    "Callable[[List, bool], None]",
                    "bool"
                ]
            }
        },
        "TestChecksumWorkflow.test_locate_checksum_files": {
            "name": "test_locate_checksum_files",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "TestReadChecksumReportTask.test_work": {
            "name": "test_work",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestValidateChecksumTask.test_work": {
            "name": "test_work",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Type[Any]"
                ],
                "file_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "file_path": [
                    "str",
                    "int",
                    "bool"
                ],
                "expected_hash": [
                    "str",
                    "int",
                    "bool"
                ],
                "actual_hash": [
                    "str",
                    "bool"
                ],
                "source_report": [
                    "str",
                    "int",
                    "bool"
                ],
                "should_be_valid": [
                    "Mapping[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "MutableMapping[str, str]",
                    "List[str]"
                ]
            }
        },
        "TestVerifyChecksumBatchSingleWorkflow.workflow": {
            "name": "workflow",
            "location": 335,
            "return": [
                "Callable",
                "VerifyChecksumBatchSingleWorkflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyChecksumBatchSingleWorkflow.default_options": {
            "name": "default_options",
            "location": 340,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestVerifyChecksumBatchSingleWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "bool",
                    "Callable",
                    "dict"
                ],
                "default_options": [
                    "dict"
                ],
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "TestVerifyChecksumBatchSingleWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "int"
                ]
            }
        },
        "TestVerifyChecksumBatchSingleWorkflow.test_generate_report_success": {
            "name": "test_generate_report_success",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestVerifyChecksumBatchSingleWorkflow.test_generate_report_failure": {
            "name": "test_generate_report_failure",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "TestChecksumTask.test_work_matching": {
            "name": "test_work_matching",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int"
                ]
            }
        },
        "TestChecksumTask.test_work_non_matching": {
            "name": "test_work_non_matching",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int"
                ]
            }
        },
        "TestChecksumWorkflow.test_locate_checksum_files.walk": {
            "name": "walk",
            "location": 254,
            "return": [
                "List[tuple[Union[Text,list,tuple[Text]]]]",
                "Union[str,List[str]]",
                "str",
                "int"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestReadChecksumReportTask.test_work.extracts_checksums": {
            "name": "extracts_checksums",
            "location": 271,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "checksum_file": [
                    "int",
                    "Callable",
                    "float",
                    "Set[int]",
                    "Optional[Mapping[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_workflows.py": {},
    "Speedwagon-master/tests/workflows/test_workflow_capture_one_to_hathi.py": {
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCaptureOneToHathiTiffPackageWorkflow.workflow": {
            "name": "workflow",
            "location": 10,
            "return": [
                "CaptureOneToHathiTiffPackageWorkflow",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaptureOneToHathiTiffPackageWorkflow.default_options": {
            "name": "default_options",
            "location": 17,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestCaptureOneToHathiTiffPackageWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "workflow": [
                    "unittesmock.MagicMock"
                ],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestCaptureOneToHathiTiffPackageWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestPackageConverter.test_work": {
            "name": "test_work",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCaptureOneToHathiTiffPackageWorkflow.test_discover_task_metadata.locate_packages": {
            "name": "locate_packages",
            "location": 41,
            "return": [
                "List[Mock]",
                "str",
                "Union[str,List[str]]",
                "List[str]"
            ],
            "arguments": {
                "_": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_workflow_convertTifftoHathiTrustjp2.py": {
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestConvertTiffToHathiJp2Workflow.workflow": {
            "name": "workflow",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertTiffToHathiJp2Workflow.default_options": {
            "name": "default_options",
            "location": 17,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestConvertTiffToHathiJp2Workflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ],
                "workflow": [
                    "Callable[[List, bool], None]"
                ],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestConvertTiffToHathiJp2Workflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "bool"
                ],
                "task_type": [
                    "str",
                    "bool"
                ],
                "task_class": [
                    "str"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestConvertTiffToHathiJp2Workflow.test_create_new_task_invalid_type": {
            "name": "test_create_new_task_invalid_type",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestImageConvertTask.test_work": {
            "name": "test_work",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestCopyTask.test_work": {
            "name": "test_work",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestConvertTiffToHathiJp2Workflow.test_discover_task_metadata.walk": {
            "name": "walk",
            "location": 37,
            "return": [
                "Optional[str]",
                "List[tuple[tuple[Text]]]"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_workflow_validate_hathi_metadata.py": {
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestValidateImageMetadataWorkflow.workflow": {
            "name": "workflow",
            "location": 9,
            "return": [
                "ValidateImageMetadataWorkflow",
                "float",
                "bytearray",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateImageMetadataWorkflow.default_options": {
            "name": "default_options",
            "location": 14,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestValidateImageMetadataWorkflow.test_validate_user_options_valid": {
            "name": "test_validate_user_options_valid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "workflow": [
                    "str"
                ],
                "default_options": []
            }
        },
        "TestValidateImageMetadataWorkflow.test_validate_user_options_not_valid": {
            "name": "test_validate_user_options_not_valid",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ],
                "workflow": [
                    "bool",
                    "str"
                ],
                "default_options": [
                    "dict"
                ],
                "input_value": [
                    "List[str]",
                    "Dict",
                    "Optional[Iterable[Any]]",
                    "None"
                ],
                "exists": [
                    "int"
                ],
                "isfile": [
                    "int"
                ]
            }
        },
        "TestValidateImageMetadataWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "Exception",
                    "int"
                ],
                "workflow": [],
                "default_options": []
            }
        },
        "TestValidateImageMetadataWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": []
            }
        },
        "TestMetadataValidatorTask.test_work": {
            "name": "test_work",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        }
    },
    "Speedwagon-master/tests/workflows/test_workflow_zip_packages.py": {
        "test_tasks_have_description": {
            "name": "test_tasks_have_description",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestZipPackagesWorkflow.workflow": {
            "name": "workflow",
            "location": 11,
            "return": [
                "bytearray",
                "ZipPackagesWorkflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZipPackagesWorkflow.default_options": {
            "name": "default_options",
            "location": 16,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Optional[Dict]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "str",
                    "Type[T]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_validate_user_options_valid": {
            "name": "test_validate_user_options_valid",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "workflow": [
                    "str"
                ],
                "default_options": []
            }
        },
        "TestZipPackagesWorkflow.test_validate_user_options_not_valid": {
            "name": "test_validate_user_options_not_valid",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "workflow": [
                    "str"
                ],
                "default_options": [
                    "List[str]",
                    "str"
                ],
                "output_exists": [
                    "str"
                ],
                "output_isdir": [
                    "str"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_discover_task_metadata": {
            "name": "test_discover_task_metadata",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bytes",
                    "Dict"
                ],
                "workflow": [],
                "default_options": [
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_create_new_task": {
            "name": "test_create_new_task",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [],
                "monkeypatch": [
                    "int"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_generate_report": {
            "name": "test_generate_report",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "type",
                    "str"
                ],
                "default_options": [
                    "Dict"
                ]
            }
        },
        "TestZipTask.test_work": {
            "name": "test_work",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "TestZipPackagesWorkflow.test_discover_task_metadata.scandir": {
            "name": "scandir",
            "location": 93,
            "return": [
                "List[Mock]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "root": [
                    "str"
                ]
            }
        }
    },
    "Speedwagon-master/utils/upload_docs.py": {
        "locate_documentation_files": {
            "name": "locate_documentation_files",
            "location": 7,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "root_path": [
                    "str"
                ]
            }
        },
        "get_arg_parser": {
            "name": "get_arg_parser",
            "location": 15,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "remove_files_from_directory": {
            "name": "remove_files_from_directory",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "root": [
                    "str",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Speedwagon-master/windows_build/dlruntime.py": {
        "valid_file": {
            "name": "valid_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "bool"
                ],
                "expected_md5": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "download_runtime": {
            "name": "download_runtime",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "md5": [
                    "str"
                ],
                "destination": [
                    "str"
                ]
            }
        },
        "get_download_info": {
            "name": "get_download_info",
            "location": 67,
            "return": [
                "Runtime"
            ],
            "arguments": {
                "version": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "arch": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_arg_parser": {
            "name": "get_arg_parser",
            "location": 77,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "list_types": {
            "name": "list_types",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install_python": {
            "name": "install_python",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "bool",
                    "zipfile.ZipFile",
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "destination": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "find_path_file": {
            "name": "find_path_file",
            "location": 99,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "fixup_python_runtime": {
            "name": "fixup_python_runtime",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "StAn-master/setup.py": {},
    "StAn-master/stan/annotate.py": {
        "_split_files_for_format": {
            "name": "_split_files_for_format",
            "location": 16,
            "return": [
                "Tuple[(str, Optional[str], str)]"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "train_filename": [
                    "Optional[str]"
                ],
                "val_filename": [
                    "Optional[str]"
                ],
                "test_filename": [
                    "Optional[str]"
                ]
            }
        },
        "annotate": {
            "name": "annotate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ],
                "input_format": [
                    "str"
                ],
                "corenlp": [
                    "str"
                ],
                "output_format": [
                    "str"
                ],
                "shuffle": [
                    "bool"
                ],
                "validation_size": [
                    "float"
                ],
                "seed": [
                    "int"
                ],
                "n_jobs": [
                    "int"
                ],
                "debug": [
                    "bool"
                ]
            }
        }
    },
    "StAn-master/stan/corenlp_utils.py": {},
    "StAn-master/stan/__init__.py": {},
    "StAn-master/stan/__main__.py": {
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "StAn-master/stan/annotators/annotator.py": {
        "AnnotatedInstance.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]"
                ],
                "annotations": [
                    "Dict[(str, Any)]"
                ],
                "metadata": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "Annotator.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "Annotator.annotate_instances": {
            "name": "annotate_instances",
            "location": 25,
            "return": [
                "List[AnnotatedInstance]"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "List[stan.dataset_readers.dataset_reader.Instance]"
                ]
            }
        },
        "Annotator.annotate": {
            "name": "annotate",
            "location": 31,
            "return": [
                "AnnotatedInstance"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "stan.dataset_readers.dataset_reader.Instance"
                ]
            }
        },
        "Annotator.cleanup": {
            "name": "cleanup",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "StAn-master/stan/annotators/corenlp.py": {
        "CoreNlpAnnotator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_or_host": [
                    "str"
                ],
                "n_jobs": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "CoreNlpAnnotator.annotate": {
            "name": "annotate",
            "location": 18,
            "return": [
                "stan.annotators.annotator.AnnotatedInstance"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "stan.dataset_readers.dataset_reader.Instance"
                ]
            }
        },
        "CoreNlpAnnotator.cleanup": {
            "name": "cleanup",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "StAn-master/stan/annotators/__init__.py": {},
    "StAn-master/stan/dataset_annotators/plass_corpus.py": {
        "PlassCorpusAnnotator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotator": [
                    "stan.annotators.annotator.Annotator"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "PlassCorpusAnnotator._add_annotations": {
            "name": "_add_annotations",
            "location": 18,
            "return": [
                "stan.annotators.annotator.AnnotatedInstance"
            ],
            "arguments": {
                "instance": [
                    "stan.annotators.annotator.AnnotatedInstance"
                ]
            }
        },
        "PlassCorpusAnnotator.annotate": {
            "name": "annotate",
            "location": 23,
            "return": [
                "stan.annotators.annotator.AnnotatedInstance"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "stan.dataset_readers.dataset_reader.Instance"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_annotators/semeval2010_task8.py": {
        "Semeval2010Task8Annotator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotator": [
                    "stan.annotators.annotator.Annotator"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "Semeval2010Task8Annotator._add_annotations": {
            "name": "_add_annotations",
            "location": 22,
            "return": [
                "stan.annotators.annotator.AnnotatedInstance"
            ],
            "arguments": {
                "instance": [
                    "stan.annotators.annotator.AnnotatedInstance"
                ]
            }
        },
        "Semeval2010Task8Annotator.annotate": {
            "name": "annotate",
            "location": 69,
            "return": [
                "stan.annotators.annotator.AnnotatedInstance"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "stan.dataset_readers.dataset_reader.Instance"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_annotators/__init__.py": {},
    "StAn-master/stan/dataset_readers/dataset_reader.py": {
        "Instance.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "metadata": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "DatasetReader.read": {
            "name": "read",
            "location": 13,
            "return": [
                "List[Instance]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_readers/json.py": {
        "JsonDatasetReader.read": {
            "name": "read",
            "location": 10,
            "return": [
                "List[stan.dataset_readers.dataset_reader.Instance]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_readers/jsonl.py": {
        "JsonlDatasetReader.read": {
            "name": "read",
            "location": 10,
            "return": [
                "List[stan.dataset_readers.dataset_reader.Instance]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_readers/plass_corpus.py": {
        "PlassCorpusDatasetReader.read": {
            "name": "read",
            "location": 10,
            "return": [
                "List[stan.dataset_readers.dataset_reader.Instance]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_readers/semeval2010_task8.py": {
        "SemEval2010Task8DatasetReader._to_instance": {
            "name": "_to_instance",
            "location": 11,
            "return": [
                "stan.dataset_readers.dataset_reader.Instance"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "List[str]"
                ]
            }
        },
        "SemEval2010Task8DatasetReader.read": {
            "name": "read",
            "location": 41,
            "return": [
                "List[stan.dataset_readers.dataset_reader.Instance]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_readers/utils.py": {
        "arguments_from_text": {
            "name": "arguments_from_text",
            "location": 6,
            "return": [
                "Tuple[(str, str, int, int)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "argument_types_from_label": {
            "name": "argument_types_from_label",
            "location": 21,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "argument_spans_from_tokens": {
            "name": "argument_spans_from_tokens",
            "location": 36,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "argument": [
                    "str"
                ],
                "tokens": [
                    "List[str]"
                ]
            }
        },
        "use_closest_span": {
            "name": "use_closest_span",
            "location": 57,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "location": [
                    "int"
                ],
                "spans": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "remove_argument_markers": {
            "name": "remove_argument_markers",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "argument_spans_from_tokens.find_sub_list": {
            "name": "find_sub_list",
            "location": 40,
            "return": [
                "list[tuple[int]]",
                "bool",
                "int"
            ],
            "arguments": {
                "sublst": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[str]"
                ],
                "lst": [
                    "dict",
                    "float",
                    "Type",
                    "tuple",
                    "Iterable"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_readers/__init__.py": {},
    "StAn-master/stan/dataset_writers/dataset_writer.py": {
        "DatasetWriter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str"
                ]
            }
        },
        "DatasetWriter._convert_instances": {
            "name": "_convert_instances",
            "location": 16,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "List[stan.annotators.annotator.AnnotatedInstance]"
                ]
            }
        },
        "DatasetWriter.write": {
            "name": "write",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "instances": [
                    "List[stan.annotators.annotator.AnnotatedInstance]"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_writers/tacred.py": {
        "TacredDatasetWriter._convert_instances": {
            "name": "_convert_instances",
            "location": 25,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "List[stan.annotators.annotator.AnnotatedInstance]"
                ]
            }
        }
    },
    "StAn-master/stan/dataset_writers/__init__.py": {},
    "StAn-master/tests/conftest.py": {
        "annotated_instances": {
            "name": "annotated_instances",
            "location": 15,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "annotated_instances.init": {
            "name": "init",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "path_or_host": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "logging_level": [
                    "str",
                    "bool"
                ]
            }
        },
        "annotated_instances.annotate": {
            "name": "annotate",
            "location": 29,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "text": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "properties": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/tests/__init__.py": {},
    "StAn-master/tests/annotators/corenlp_annotator_test.py": {
        "test_annotate": {
            "name": "test_annotate",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_annotate.init": {
            "name": "init",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "path_or_host": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "logging_level": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_annotate.annotate": {
            "name": "annotate",
            "location": 32,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "text": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "properties": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/tests/annotators/__init__.py": {},
    "StAn-master/tests/dataset_annotators/semeval2010_task8_annotator_test.py": {
        "test_annotate": {
            "name": "test_annotate",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_annotate.init": {
            "name": "init",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "path_or_host": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "logging_level": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_annotate.annotate": {
            "name": "annotate",
            "location": 32,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "text": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "properties": [
                    "str"
                ]
            }
        }
    },
    "StAn-master/tests/dataset_readers/dataset_reader_utils_test.py": {},
    "StAn-master/tests/dataset_readers/jsonl_dataset_reader_test.py": {
        "test_read": {
            "name": "test_read",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "StAn-master/tests/dataset_readers/json_dataset_reader_test.py": {
        "test_read": {
            "name": "test_read",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "StAn-master/tests/dataset_readers/semeval2010_task8_dataset_reader_test.py": {
        "test_read": {
            "name": "test_read",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "StAn-master/tests/dataset_readers/__init__.py": {},
    "StAn-master/tests/dataset_writers/dataset_writer_test.py": {
        "test_write_json": {
            "name": "test_write_json",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "annotated_instances": [
                    "bytes"
                ],
                "tmpdir": [
                    "cli_ui.tests.MessageRecorder",
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_write_jsonl": {
            "name": "test_write_jsonl",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "annotated_instances": [
                    "bytes"
                ],
                "tmpdir": [
                    "cli_ui.tests.MessageRecorder",
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "StAn-master/tests/dataset_writers/tacred_dataset_writer_test.py": {
        "test_write": {
            "name": "test_write",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "annotated_instances": [
                    "tests.setup.SetupTest"
                ],
                "tmpdir": [
                    "cli_ui.tests.MessageRecorder",
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "StAn-master/tests/dataset_writers/__init__.py": {}
}
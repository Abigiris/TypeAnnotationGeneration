{
    "StormTimer-master/processor/common.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 6,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "setup_single_logging": {
            "name": "setup_single_logging",
            "location": 22,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "debug": [
                    "bool",
                    "int",
                    "slice"
                ]
            }
        }
    },
    "StormTimer-master/processor/generator.py": {
        "setup_multi_logging": {
            "name": "setup_multi_logging",
            "location": 113,
            "return": [
                "Tuple[(logging.Logger, logging.handlers.QueueListener)]"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "bool",
                    "multiprocessing.Queue",
                    "logging.Logger"
                ],
                "debug": [
                    "bool",
                    "Dict",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "MessageGenerator.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "kafka_server": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "topic": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "log_queue": [
                    "bool",
                    "float",
                    "str",
                    "TextIO"
                ],
                "emission_delay": [
                    "Optional[float]",
                    "Dict",
                    "None",
                    "float",
                    "Optional[str]",
                    "str"
                ],
                "debug": [
                    "bool",
                    "float",
                    "str",
                    "TextIO"
                ]
            }
        },
        "MessageGenerator.setup_logging": {
            "name": "setup_logging",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "debug": [
                    "bool",
                    "Exception",
                    "str"
                ]
            }
        },
        "MessageGenerator.delivery_report": {
            "name": "delivery_report",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Type[Frame]",
                    "Type",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "msg": [
                    "int",
                    "str"
                ]
            }
        },
        "MessageGenerator.run": {
            "name": "run",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "StormTimer-master/processor/receiver.py": {
        "process_payload": {
            "name": "process_payload",
            "location": 29,
            "return": [
                "List[Dict[(str, Union[(str, Dict[(str, Any)])])]]"
            ],
            "arguments": {
                "payload": [
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "float",
                    "Optional[datetime.datetime]",
                    "str",
                    "Optional[float]",
                    "allennlp.common.util.JsonDict",
                    "bool"
                ],
                "kafka_ts_value": [
                    "int"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 73,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "kafka_consumer": [
                    "confluent_kafka.Consumer",
                    "int",
                    "Optional[int]"
                ],
                "influx_client": [
                    "str",
                    "bool",
                    "influxdb.InfluxDBClient"
                ],
                "timeout_secs": [
                    "int",
                    "confluent_kafka.Consumer"
                ],
                "update_count": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "str",
                    "Dict"
                ]
            }
        },
        "create_kafka_consumer": {
            "name": "create_kafka_consumer",
            "location": 155,
            "return": [
                "Consumer",
                "bool",
                "float"
            ],
            "arguments": {
                "config": [
                    "str",
                    "configparser.ConfigParser",
                    "logging.Logger",
                    "Optional[Dict[str,Any]]"
                ],
                "logger": [
                    "str",
                    "Dict",
                    "bool",
                    "logging.Logger"
                ],
                "group_id": [
                    "str",
                    "Dict",
                    "bool",
                    "logging.Logger"
                ]
            }
        }
    },
    "StormTimer-master/topology/key_dist.py": {}
}
{
    "Sublime-Fanhuaji-st4/boot.py": {
        "reload_plugin": {
            "name": "reload_plugin",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/constant.py": {},
    "Sublime-Fanhuaji-st4/plugin/fanhuaji.py": {
        "Fanhuaji.convert": {
            "name": "convert",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "args": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/functions.py": {
        "prepare_fanhuaji_convert_args": {
            "name": "prepare_fanhuaji_convert_args",
            "location": 7,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "view": [],
                "args": [
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/log.py": {
        "msg": {
            "name": "msg",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "print_msg": {
            "name": "print_msg",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "int"
                ],
                "show_message": [
                    "bool",
                    "Dict[str,str]",
                    "Sequence"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/settings.py": {
        "get_settings": {
            "name": "get_settings",
            "location": 6,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "get_setting": {
            "name": "get_setting",
            "location": 10,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Any"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/types.py": {},
    "Sublime-Fanhuaji-st4/plugin/__init__.py": {
        "plugin_loaded": {
            "name": "plugin_loaded",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "plugin_unloaded": {
            "name": "plugin_unloaded",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/commands/fanhuaji_convert.py": {
        "FanhuajiConvertCommand.is_enabled": {
            "name": "is_enabled",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FanhuajiConvertCommand.is_visible": {
            "name": "is_visible",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FanhuajiConvertCommand.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "str",
                    "List[str]"
                ],
                "args": [
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/commands/fanhuaji_convert_panel.py": {
        "FanhuajiConvertPanelCommand.run": {
            "name": "run",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FanhuajiConvertPanelCommand.on_done": {
            "name": "on_done",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/commands/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/api.py": {
        "from_bytes": {
            "name": "from_bytes",
            "location": 37,
            "return": [
                "charset_normalizer.models.CharsetMatches"
            ],
            "arguments": {
                "sequences": [
                    "int",
                    "bytes",
                    "List[bytes]"
                ],
                "steps": [
                    "int",
                    "Tuple[int,int]"
                ],
                "chunk_size": [
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "bool"
                ],
                "threshold": [
                    "float",
                    "int",
                    "bytes",
                    "List",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[int]"
                ],
                "cp_isolation": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Dict",
                    "Optional[Dict]",
                    "Optional[List[Any]]",
                    "Dict[str,O]",
                    "Dict[str,pypi2nix.utils.NixOption]"
                ],
                "cp_exclusion": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Dict",
                    "Optional[Dict]",
                    "Optional[List[Any]]",
                    "Dict[str,O]",
                    "Dict[str,pypi2nix.utils.NixOption]"
                ],
                "preemptive_behaviour": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "explain": [
                    "int",
                    "bool"
                ]
            }
        },
        "from_fp": {
            "name": "from_fp",
            "location": 514,
            "return": [
                "charset_normalizer.models.CharsetMatches"
            ],
            "arguments": {
                "fp": [
                    "int",
                    "programl.models.batch_data.BatchData",
                    "bytes"
                ],
                "steps": [
                    "int",
                    "programl.models.batch_data.BatchData",
                    "bytes"
                ],
                "chunk_size": [
                    "int",
                    "programl.models.batch_data.BatchData",
                    "bytes"
                ],
                "threshold": [
                    "float",
                    "int",
                    "programl.models.batch_data.BatchData",
                    "bytes"
                ],
                "cp_isolation": [
                    "int",
                    "None",
                    "bytes",
                    "programl.models.batch_data.BatchData"
                ],
                "cp_exclusion": [
                    "int",
                    "None",
                    "bytes",
                    "programl.models.batch_data.BatchData"
                ],
                "preemptive_behaviour": [
                    "bool",
                    "int",
                    "programl.models.batch_data.BatchData",
                    "bytes"
                ],
                "explain": [
                    "bool",
                    "int",
                    "programl.models.batch_data.BatchData",
                    "bytes"
                ]
            }
        },
        "from_path": {
            "name": "from_path",
            "location": 540,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[Exception]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "steps": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[int,int,int]"
                ],
                "chunk_size": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[int,int,int]"
                ],
                "threshold": [
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[int,int,int]"
                ],
                "cp_isolation": [
                    "int",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int,int]",
                    "Tuple[Union[float,float,float]]"
                ],
                "cp_exclusion": [
                    "int",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int,int]",
                    "Tuple[Union[float,float,float]]"
                ],
                "preemptive_behaviour": [
                    "bool",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[int,int,int]"
                ],
                "explain": [
                    "bool",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[float,float,float]",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 567,
            "return": [
                "bool",
                "lightbus.path.BusPath",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "steps": [
                    "str",
                    "int"
                ],
                "chunk_size": [
                    "str",
                    "int"
                ],
                "threshold": [
                    "str",
                    "float"
                ],
                "cp_isolation": [
                    "str",
                    "None"
                ],
                "cp_exclusion": [
                    "str",
                    "None"
                ],
                "preemptive_behaviour": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/cd.py": {
        "encoding_unicode_range": {
            "name": "encoding_unicode_range",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "iana_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "unicode_range_languages": {
            "name": "unicode_range_languages",
            "location": 57,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "primary_range": [
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "encoding_languages": {
            "name": "encoding_languages",
            "location": 73,
            "return": [
                "List[Text]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "iana_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "mb_encoding_languages": {
            "name": "mb_encoding_languages",
            "location": 93,
            "return": [
                "List[Text]",
                "int",
                "List",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "iana_name": [
                    "str"
                ]
            }
        },
        "get_target_features": {
            "name": "get_target_features",
            "location": 114,
            "return": [
                "Tuple[bool]",
                "str",
                "bool"
            ],
            "arguments": {
                "language": [
                    "str",
                    "bool"
                ]
            }
        },
        "alphabet_languages": {
            "name": "alphabet_languages",
            "location": 130,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "characters": [
                    "str",
                    "Tuple[int]",
                    "bytearray",
                    "List[str]",
                    "Tuple[Union[float,float,float,float]]",
                    "cmk.utils.type_defs.HostName",
                    "Tuple[float,float,float,float]"
                ],
                "ignore_non_latin": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "raiden.utils.Address",
                    "int"
                ]
            }
        },
        "characters_popularity_compare": {
            "name": "characters_popularity_compare",
            "location": 166,
            "return": [
                "float"
            ],
            "arguments": {
                "language": [
                    "int",
                    "List[world.PerceivedNoise]",
                    "str"
                ],
                "ordered_characters": [
                    "int",
                    "bytearray",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "alpha_unicode_split": {
            "name": "alpha_unicode_split",
            "location": 226,
            "return": [
                "list"
            ],
            "arguments": {
                "decoded_sequence": [
                    "List[str]",
                    "models.Credentials",
                    "IO"
                ]
            }
        },
        "merge_coherence_ratios": {
            "name": "merge_coherence_ratios",
            "location": 265,
            "return": [
                "List[Tuple[(Any, float)]]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "coherence_ratio": {
            "name": "coherence_ratio",
            "location": 294,
            "return": [
                "List[tuple[Union[bytes,float]]]",
                "zam_repondeur.models.Lecture",
                "Dict[int,dict]"
            ],
            "arguments": {
                "decoded_sequence": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "threshold": [
                    "float",
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "lg_inclusion": [
                    "str",
                    "bytes",
                    "None",
                    "List",
                    "Callable",
                    "Union[str,bool,None]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/constant.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/legacy.py": {
        "detect": {
            "name": "detect",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "byte_str": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "CharsetNormalizerMatches.from_fp": {
            "name": "from_fp",
            "location": 54,
            "return": [
                "charset_normalizer.models.CharsetMatches"
            ],
            "arguments": {}
        },
        "CharsetNormalizerMatches.from_bytes": {
            "name": "from_bytes",
            "location": 63,
            "return": [
                "charset_normalizer.models.CharsetMatches"
            ],
            "arguments": {}
        },
        "CharsetNormalizerMatches.from_path": {
            "name": "from_path",
            "location": 72,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "CharsetNormalizerMatches.normalize": {
            "name": "normalize",
            "location": 81,
            "return": [
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/md.py": {
        "is_suspiciously_successive_range": {
            "name": "is_suspiciously_successive_range",
            "location": 449,
            "return": [
                "bool"
            ],
            "arguments": {
                "unicode_range_a": [],
                "unicode_range_b": []
            }
        },
        "mess_ratio": {
            "name": "mess_ratio",
            "location": 520,
            "return": [
                "float"
            ],
            "arguments": {
                "decoded_sequence": [],
                "maximum_threshold": [
                    "float"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "MessDetectorPlugin.eligible": {
            "name": "eligible",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "MessDetectorPlugin.feed": {
            "name": "feed",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "MessDetectorPlugin.reset": {
            "name": "reset",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessDetectorPlugin.ratio": {
            "name": "ratio",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManySymbolOrPunctuationPlugin.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManySymbolOrPunctuationPlugin.eligible": {
            "name": "eligible",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "TooManySymbolOrPunctuationPlugin.feed": {
            "name": "feed",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "TooManySymbolOrPunctuationPlugin.reset": {
            "name": "reset",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManySymbolOrPunctuationPlugin.ratio": {
            "name": "ratio",
            "location": 94,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManyAccentuatedPlugin.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManyAccentuatedPlugin.eligible": {
            "name": "eligible",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "TooManyAccentuatedPlugin.feed": {
            "name": "feed",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "TooManyAccentuatedPlugin.reset": {
            "name": "reset",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManyAccentuatedPlugin.ratio": {
            "name": "ratio",
            "location": 124,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnprintablePlugin.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnprintablePlugin.eligible": {
            "name": "eligible",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "UnprintablePlugin.feed": {
            "name": "feed",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "UnprintablePlugin.reset": {
            "name": "reset",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnprintablePlugin.ratio": {
            "name": "ratio",
            "location": 154,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspiciousDuplicateAccentPlugin.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspiciousDuplicateAccentPlugin.eligible": {
            "name": "eligible",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "SuspiciousDuplicateAccentPlugin.feed": {
            "name": "feed",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "SuspiciousDuplicateAccentPlugin.reset": {
            "name": "reset",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspiciousDuplicateAccentPlugin.ratio": {
            "name": "ratio",
            "location": 191,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspiciousRange.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspiciousRange.eligible": {
            "name": "eligible",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "SuspiciousRange.feed": {
            "name": "feed",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "SuspiciousRange.reset": {
            "name": "reset",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspiciousRange.ratio": {
            "name": "ratio",
            "location": 238,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperWeirdWordPlugin.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperWeirdWordPlugin.eligible": {
            "name": "eligible",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "SuperWeirdWordPlugin.feed": {
            "name": "feed",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "SuperWeirdWordPlugin.reset": {
            "name": "reset",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperWeirdWordPlugin.ratio": {
            "name": "ratio",
            "location": 335,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CjkInvalidStopPlugin.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CjkInvalidStopPlugin.eligible": {
            "name": "eligible",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "CjkInvalidStopPlugin.feed": {
            "name": "feed",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "CjkInvalidStopPlugin.reset": {
            "name": "reset",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CjkInvalidStopPlugin.ratio": {
            "name": "ratio",
            "location": 367,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchaicUpperLowerPlugin.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchaicUpperLowerPlugin.eligible": {
            "name": "eligible",
            "location": 387,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "ArchaicUpperLowerPlugin.feed": {
            "name": "feed",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "ArchaicUpperLowerPlugin.reset": {
            "name": "reset",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchaicUpperLowerPlugin.ratio": {
            "name": "ratio",
            "location": 442,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/models.py": {
        "CharsetMatch.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "float",
                    "bool"
                ],
                "guessed_encoding": [
                    "int",
                    "float",
                    "bool"
                ],
                "mean_mess_ratio": [
                    "int",
                    "float",
                    "bool"
                ],
                "has_sig_or_bom": [
                    "int",
                    "float",
                    "bool"
                ],
                "languages": [
                    "int",
                    "float",
                    "bool"
                ],
                "decoded_payload": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "CharsetMatch.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "raiden.utils.Any"
                ]
            }
        },
        "CharsetMatch.__lt__": {
            "name": "__lt__",
            "location": 49,
            "return": [
                "bool",
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CharsetMatch.multi_byte_usage": {
            "name": "multi_byte_usage",
            "location": 69,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.chaos_secondary_pass": {
            "name": "chaos_secondary_pass",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.coherence_non_latin": {
            "name": "coherence_non_latin",
            "location": 86,
            "return": [
                "float",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.w_counter": {
            "name": "w_counter",
            "location": 98,
            "return": [
                "Counter",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.add_submatch": {
            "name": "add_submatch",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "raiden.utils.Any",
                    "str",
                    "Tuple[Union[float,float]]",
                    "Optional[Tuple[float,float]]",
                    "None"
                ]
            }
        },
        "CharsetMatch.encoding": {
            "name": "encoding",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.encoding_aliases": {
            "name": "encoding_aliases",
            "location": 136,
            "return": [
                "List",
                "utils.Node",
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.bom": {
            "name": "bom",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.byte_order_mark": {
            "name": "byte_order_mark",
            "location": 153,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.languages": {
            "name": "languages",
            "location": 157,
            "return": [
                "List",
                "List[str]",
                "Iterable[str]",
                "List[Dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.language": {
            "name": "language",
            "location": 165,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.chaos": {
            "name": "chaos",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.coherence": {
            "name": "coherence",
            "location": 197,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.percent_chaos": {
            "name": "percent_chaos",
            "location": 203,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.percent_coherence": {
            "name": "percent_coherence",
            "location": 207,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.raw": {
            "name": "raw",
            "location": 211,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.submatch": {
            "name": "submatch",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.has_submatch": {
            "name": "has_submatch",
            "location": 222,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.alphabets": {
            "name": "alphabets",
            "location": 226,
            "return": [
                "List",
                "str",
                "Tuple[str]",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.could_be_from_charset": {
            "name": "could_be_from_charset",
            "location": 238,
            "return": [
                "List",
                "int",
                "List[int]",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatch.first": {
            "name": "first",
            "location": 246,
            "return": [
                "CharsetMatch"
            ],
            "arguments": {
                "self": [
                    "_TCharsetMatch@@CharsetMatch@@"
                ]
            }
        },
        "CharsetMatch.best": {
            "name": "best",
            "location": 252,
            "return": [
                "CharsetMatch"
            ],
            "arguments": {
                "self": [
                    "_TCharsetMatch@@CharsetMatch@@"
                ]
            }
        },
        "CharsetMatch.output": {
            "name": "output",
            "location": 258,
            "return": [
                "str",
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "Iterable[Any]",
                    "Text"
                ]
            }
        },
        "CharsetMatch.fingerprint": {
            "name": "fingerprint",
            "location": 270,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatches.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[str]",
                    "List",
                    "bool"
                ]
            }
        },
        "CharsetMatches.__iter__": {
            "name": "__iter__",
            "location": 286,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatches.__getitem__": {
            "name": "__getitem__",
            "location": 289,
            "return": [
                "str",
                "dict",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,float]",
                    "Tuple[Union[str,float]]",
                    "Counter[str]",
                    "Counter"
                ]
            }
        },
        "CharsetMatches.__len__": {
            "name": "__len__",
            "location": 303,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatches.__bool__": {
            "name": "__bool__",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatches.append": {
            "name": "append",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[T]",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "CharsetMatches.best": {
            "name": "best",
            "location": 329,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharsetMatches.first": {
            "name": "first",
            "location": 337,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliDetectionResult.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ],
                "encoding": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "encoding_aliases": [
                    "str"
                ],
                "alternative_encodings": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "language": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "alphabets": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "has_sig_or_bom": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "chaos": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "coherence": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "unicode_path": [
                    "str",
                    "Iterable[str]"
                ],
                "is_preferred": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "CliDetectionResult.__dict__": {
            "name": "__dict__",
            "location": 376,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliDetectionResult.to_json": {
            "name": "to_json",
            "location": 391,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/utils.py": {
        "is_accentuated": {
            "name": "is_accentuated",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "remove_accent": {
            "name": "remove_accent",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "character": []
            }
        },
        "unicode_range": {
            "name": "unicode_range",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_latin": {
            "name": "is_latin",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_ascii": {
            "name": "is_ascii",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_punctuation": {
            "name": "is_punctuation",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_symbol": {
            "name": "is_symbol",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_emoticon": {
            "name": "is_emoticon",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_separator": {
            "name": "is_separator",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_case_variable": {
            "name": "is_case_variable",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_private_use_only": {
            "name": "is_private_use_only",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_cjk": {
            "name": "is_cjk",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_hiragana": {
            "name": "is_hiragana",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_katakana": {
            "name": "is_katakana",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_hangul": {
            "name": "is_hangul",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_thai": {
            "name": "is_thai",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "character": []
            }
        },
        "is_unicode_range_secondary": {
            "name": "is_unicode_range_secondary",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "range_name": []
            }
        },
        "any_specified_encoding": {
            "name": "any_specified_encoding",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "sequence": [],
                "search_zone": [
                    "int"
                ]
            }
        },
        "is_multi_byte_encoding": {
            "name": "is_multi_byte_encoding",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            }
        },
        "identify_sig_or_bom": {
            "name": "identify_sig_or_bom",
            "location": 250,
            "return": [
                "Tuple[(Optional[str], bytes)]"
            ],
            "arguments": {
                "sequence": []
            }
        },
        "should_strip_sig_or_bom": {
            "name": "should_strip_sig_or_bom",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "iana_encoding": []
            }
        },
        "iana_name": {
            "name": "iana_name",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "cp_name": [],
                "strict": [
                    "bool"
                ]
            }
        },
        "range_scan": {
            "name": "range_scan",
            "location": 285,
            "return": [
                "list"
            ],
            "arguments": {
                "decoded_sequence": []
            }
        },
        "cp_similarity": {
            "name": "cp_similarity",
            "location": 299,
            "return": [
                "float"
            ],
            "arguments": {
                "iana_name_a": [],
                "iana_name_b": []
            }
        },
        "is_cp_similar": {
            "name": "is_cp_similar",
            "location": 320,
            "return": [
                "bool"
            ],
            "arguments": {
                "iana_name_a": [],
                "iana_name_b": []
            }
        },
        "set_logging_handler": {
            "name": "set_logging_handler",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "typing.Text"
                ],
                "level": [],
                "format_string": [
                    "typing.Text"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/version.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/assets/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/cli/normalizer.py": {
        "query_yes_no": {
            "name": "query_yes_no",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "question": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[str,List[str]]"
                ],
                "default": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "cli_detect": {
            "name": "cli_detect",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/charset_normalizer/cli/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/idna/codec.py": {
        "getregentry": {
            "name": "getregentry",
            "location": 102,
            "return": [
                "codecs.CodecInfo"
            ],
            "arguments": {}
        },
        "Codec.encode": {
            "name": "encode",
            "location": 10,
            "return": [
                "Tuple[(bytes, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[str]"
                ],
                "errors": [
                    "Text",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Codec.decode": {
            "name": "decode",
            "location": 19,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[str]"
                ],
                "errors": [
                    "Text",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "IncrementalEncoder._buffer_encode": {
            "name": "_buffer_encode",
            "location": 29,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str,Any]"
                ],
                "errors": [
                    "str",
                    "bytes",
                    "int"
                ],
                "final": [
                    "Type",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "IncrementalDecoder._buffer_decode": {
            "name": "_buffer_decode",
            "location": 62,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str,Any]"
                ],
                "errors": [
                    "str",
                    "bytes",
                    "int"
                ],
                "final": [
                    "Type",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/idna/compat.py": {
        "ToASCII": {
            "name": "ToASCII",
            "location": 5,
            "return": [
                "bytes"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "ToUnicode": {
            "name": "ToUnicode",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "nameprep": {
            "name": "nameprep",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Iterable[T]",
                    "Union[bytes,bytearray]",
                    "bool",
                    "bytes",
                    "str",
                    "bytearray"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/idna/core.py": {
        "_combining_class": {
            "name": "_combining_class",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "cp": [
                    "dict",
                    "float"
                ]
            }
        },
        "_is_script": {
            "name": "_is_script",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "cp": [
                    "str",
                    "int"
                ],
                "script": [
                    "str",
                    "int"
                ]
            }
        },
        "_punycode": {
            "name": "_punycode",
            "location": 42,
            "return": [
                "bytes",
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_unot": {
            "name": "_unot",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "valid_label_length": {
            "name": "valid_label_length",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "valid_string_length": {
            "name": "valid_string_length",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int"
                ],
                "trailing_dot": [
                    "str",
                    "int"
                ]
            }
        },
        "check_bidi": {
            "name": "check_bidi",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bytes",
                    "int"
                ],
                "check_ltr": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "check_initial_combiner": {
            "name": "check_initial_combiner",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "check_hyphen_ok": {
            "name": "check_hyphen_ok",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "check_nfc": {
            "name": "check_nfc",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int"
                ]
            }
        },
        "valid_contextj": {
            "name": "valid_contextj",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Callable"
                ],
                "pos": [
                    "int",
                    "bytes"
                ]
            }
        },
        "valid_contexto": {
            "name": "valid_contexto",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "List[int]",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "pos": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "exception": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "check_label": {
            "name": "check_label",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "alabel": {
            "name": "alabel",
            "location": 255,
            "return": [
                "bytes",
                "Dict",
                "str"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "ulabel": {
            "name": "ulabel",
            "location": 279,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "label": [
                    "bytes"
                ]
            }
        },
        "uts46_remap": {
            "name": "uts46_remap",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "domain": [
                    "str"
                ],
                "std3_rules": [
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ],
                "transitional": [
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 340,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "float",
                    "AnyStr",
                    "Union[str,bytes]"
                ],
                "strict": [
                    "bool",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "str"
                ],
                "uts46": [
                    "bool",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "str"
                ],
                "std3_rules": [
                    "bool",
                    "str"
                ],
                "transitional": [
                    "bool",
                    "str"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "float",
                    "Union[str,bytes]",
                    "int"
                ],
                "strict": [
                    "bool",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "str"
                ],
                "uts46": [
                    "bool",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "str"
                ],
                "std3_rules": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/idna/idnadata.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/idna/intranges.py": {
        "intranges_from_list": {
            "name": "intranges_from_list",
            "location": 11,
            "return": [
                "tuple"
            ],
            "arguments": {
                "list_": [
                    "List[str]",
                    "List",
                    "Optional[List[str]]",
                    "Dict[int,dict]",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "_encode_range": {
            "name": "_encode_range",
            "location": 32,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "T"
                ],
                "end": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "_decode_range": {
            "name": "_decode_range",
            "location": 35,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "intranges_contain": {
            "name": "intranges_contain",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "int_": [
                    "str",
                    "Union[str,bool]",
                    "bool"
                ],
                "ranges": [
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/idna/package_data.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/idna/uts46data.py": {
        "_seg_0": {
            "name": "_seg_0",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_1": {
            "name": "_seg_1",
            "location": 115,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_2": {
            "name": "_seg_2",
            "location": 219,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_3": {
            "name": "_seg_3",
            "location": 323,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_4": {
            "name": "_seg_4",
            "location": 427,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_5": {
            "name": "_seg_5",
            "location": 531,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_6": {
            "name": "_seg_6",
            "location": 635,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_7": {
            "name": "_seg_7",
            "location": 739,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_8": {
            "name": "_seg_8",
            "location": 843,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_9": {
            "name": "_seg_9",
            "location": 947,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_10": {
            "name": "_seg_10",
            "location": 1051,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_11": {
            "name": "_seg_11",
            "location": 1155,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_12": {
            "name": "_seg_12",
            "location": 1259,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_13": {
            "name": "_seg_13",
            "location": 1363,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_14": {
            "name": "_seg_14",
            "location": 1467,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_15": {
            "name": "_seg_15",
            "location": 1571,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_16": {
            "name": "_seg_16",
            "location": 1675,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_17": {
            "name": "_seg_17",
            "location": 1779,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_18": {
            "name": "_seg_18",
            "location": 1883,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_19": {
            "name": "_seg_19",
            "location": 1987,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_20": {
            "name": "_seg_20",
            "location": 2091,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_21": {
            "name": "_seg_21",
            "location": 2195,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_22": {
            "name": "_seg_22",
            "location": 2299,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_23": {
            "name": "_seg_23",
            "location": 2403,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_24": {
            "name": "_seg_24",
            "location": 2507,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_25": {
            "name": "_seg_25",
            "location": 2611,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_26": {
            "name": "_seg_26",
            "location": 2715,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_27": {
            "name": "_seg_27",
            "location": 2819,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_28": {
            "name": "_seg_28",
            "location": 2923,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_29": {
            "name": "_seg_29",
            "location": 3027,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_30": {
            "name": "_seg_30",
            "location": 3131,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_31": {
            "name": "_seg_31",
            "location": 3235,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_32": {
            "name": "_seg_32",
            "location": 3339,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_33": {
            "name": "_seg_33",
            "location": 3443,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_34": {
            "name": "_seg_34",
            "location": 3547,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_35": {
            "name": "_seg_35",
            "location": 3651,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_36": {
            "name": "_seg_36",
            "location": 3755,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_37": {
            "name": "_seg_37",
            "location": 3859,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_38": {
            "name": "_seg_38",
            "location": 3963,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_39": {
            "name": "_seg_39",
            "location": 4067,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_40": {
            "name": "_seg_40",
            "location": 4171,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_41": {
            "name": "_seg_41",
            "location": 4275,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_42": {
            "name": "_seg_42",
            "location": 4379,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_43": {
            "name": "_seg_43",
            "location": 4483,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_44": {
            "name": "_seg_44",
            "location": 4587,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_45": {
            "name": "_seg_45",
            "location": 4691,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_46": {
            "name": "_seg_46",
            "location": 4795,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_47": {
            "name": "_seg_47",
            "location": 4899,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_48": {
            "name": "_seg_48",
            "location": 5003,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_49": {
            "name": "_seg_49",
            "location": 5107,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_50": {
            "name": "_seg_50",
            "location": 5211,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_51": {
            "name": "_seg_51",
            "location": 5315,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_52": {
            "name": "_seg_52",
            "location": 5419,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_53": {
            "name": "_seg_53",
            "location": 5523,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_54": {
            "name": "_seg_54",
            "location": 5627,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_55": {
            "name": "_seg_55",
            "location": 5731,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_56": {
            "name": "_seg_56",
            "location": 5835,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_57": {
            "name": "_seg_57",
            "location": 5939,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_58": {
            "name": "_seg_58",
            "location": 6043,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_59": {
            "name": "_seg_59",
            "location": 6147,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_60": {
            "name": "_seg_60",
            "location": 6251,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_61": {
            "name": "_seg_61",
            "location": 6355,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_62": {
            "name": "_seg_62",
            "location": 6459,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_63": {
            "name": "_seg_63",
            "location": 6563,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_64": {
            "name": "_seg_64",
            "location": 6667,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_65": {
            "name": "_seg_65",
            "location": 6771,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_66": {
            "name": "_seg_66",
            "location": 6875,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_67": {
            "name": "_seg_67",
            "location": 6979,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_68": {
            "name": "_seg_68",
            "location": 7083,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_69": {
            "name": "_seg_69",
            "location": 7187,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_70": {
            "name": "_seg_70",
            "location": 7291,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_71": {
            "name": "_seg_71",
            "location": 7395,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_72": {
            "name": "_seg_72",
            "location": 7499,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_73": {
            "name": "_seg_73",
            "location": 7603,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_74": {
            "name": "_seg_74",
            "location": 7707,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_75": {
            "name": "_seg_75",
            "location": 7811,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_76": {
            "name": "_seg_76",
            "location": 7915,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_77": {
            "name": "_seg_77",
            "location": 8019,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_78": {
            "name": "_seg_78",
            "location": 8123,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_79": {
            "name": "_seg_79",
            "location": 8227,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_seg_80": {
            "name": "_seg_80",
            "location": 8331,
            "return": [
                "list"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/idna/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/requests/adapters.py": {
        "BaseAdapter.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.send": {
            "name": "send",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[str]",
                    "Dict[str,Any]",
                    "str"
                ],
                "stream": [
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "str"
                ],
                "timeout": [
                    "List[str]",
                    "Dict[str,Any]",
                    "None",
                    "str"
                ],
                "verify": [
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "str"
                ],
                "cert": [
                    "List[str]",
                    "Dict[str,Any]",
                    "None",
                    "str"
                ],
                "proxies": [
                    "List[str]",
                    "Dict[str,Any]",
                    "None",
                    "str"
                ]
            }
        },
        "BaseAdapter.close": {
            "name": "close",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_connections": [
                    "int",
                    "Optional[str]"
                ],
                "pool_maxsize": [
                    "int",
                    "Optional[int]",
                    "Mapping[str,Tuple[float,float,float]]",
                    "bool"
                ],
                "max_retries": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "pool_block": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Mapping[str,Tuple[float,float,float]]"
                ]
            }
        },
        "HTTPAdapter.__getstate__": {
            "name": "__getstate__",
            "location": 132,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.__setstate__": {
            "name": "__setstate__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "HTTPAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "Dict[int,dict]",
                    "int",
                    "List",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "maxsize": [],
                "block": [
                    "bool",
                    "denite.util.UserContext",
                    "Dict[Tuple[str,str],Exception]",
                    "int"
                ]
            }
        },
        "HTTPAdapter.proxy_manager_for": {
            "name": "proxy_manager_for",
            "location": 167,
            "return": [
                "SOCKSProxyManager",
                "float",
                "raiden.utils.SecretHash",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "HTTPAdapter.cert_verify": {
            "name": "cert_verify",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "int",
                    "raiden.utils.Secret",
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode"
                ],
                "url": [
                    "str"
                ],
                "verify": [
                    "str"
                ],
                "cert": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HTTPAdapter.build_response": {
            "name": "build_response",
            "location": 256,
            "return": [
                "Response",
                "Dict",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "Dict[str,Dict[str,str]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bytes",
                    "requests.Response",
                    "Dict",
                    "str",
                    "int"
                ],
                "resp": [
                    "Optional[dict]",
                    "Dict",
                    "str",
                    "None",
                    "Mapping[str,str]",
                    "responses.Response",
                    "Mapping"
                ]
            }
        },
        "HTTPAdapter.get_connection": {
            "name": "get_connection",
            "location": 293,
            "return": [
                "str",
                "bool",
                "Dict[str,tuple[Union[str,Any]]]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]"
                ],
                "proxies": [
                    "str",
                    "None"
                ]
            }
        },
        "HTTPAdapter.close": {
            "name": "close",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.request_url": {
            "name": "request_url",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "proxies": [
                    "Dict"
                ]
            }
        },
        "HTTPAdapter.add_headers": {
            "name": "add_headers",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "HTTPAdapter.proxy_headers": {
            "name": "proxy_headers",
            "location": 373,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "Mapping",
                    "Dict",
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "bool",
                    "raiden.utils.Address"
                ]
            }
        },
        "HTTPAdapter.send": {
            "name": "send",
            "location": 395,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_config.Timeout"
                ],
                "stream": [
                    "bool",
                    "str",
                    "bytes",
                    "Dict[models.characters.states.AttributeType,int]"
                ],
                "timeout": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "Optional[int]"
                ],
                "verify": [
                    "bool",
                    "str",
                    "int",
                    "fastapi.dependencies.models.Dependant"
                ],
                "cert": [
                    "str",
                    "None",
                    "int",
                    "fastapi.dependencies.models.Dependant"
                ],
                "proxies": [
                    "None"
                ]
            }
        },
        "SOCKSProxyManager": {
            "name": "SOCKSProxyManager",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/api.py": {
        "request": {
            "name": "request",
            "location": 16,
            "return": [
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Exception",
                "dict",
                "Dict[int, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 64,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "options": {
            "name": "options",
            "location": 78,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "head": {
            "name": "head",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 105,
            "return": [
                "Dict[str, Any]",
                "set",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "url": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Dict[str,float]"
                ],
                "data": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "str",
                    "Dict[str,float]"
                ],
                "json": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 120,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "bytes"
                ],
                "data": [
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "patch": {
            "name": "patch",
            "location": 135,
            "return": [
                "bool",
                "Dict[int, Dict]",
                "Optional[Any]",
                "Callable",
                "Tuple[int, float]",
                "str"
            ],
            "arguments": {
                "url": [
                    "Dict",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Union[Dict,None]",
                    "None"
                ],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Union[Dict,None]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 150,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/auth.py": {
        "_basic_auth_str": {
            "name": "_basic_auth_str",
            "location": 28,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "Dict[int,str]"
                ]
            }
        },
        "AuthBase.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float",
                    "T"
                ]
            }
        },
        "HTTPBasicAuth.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "HTTPBasicAuth.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "HTTPBasicAuth.__ne__": {
            "name": "__ne__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "HTTPBasicAuth.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [
                "str",
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "float",
                "Dict",
                "MutableMapping"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "HTTPProxyAuth.__call__": {
            "name": "__call__",
            "location": 103,
            "return": [
                "str",
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "float",
                "Dict",
                "MutableMapping"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "HTTPDigestAuth.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "HTTPDigestAuth.init_per_thread_state": {
            "name": "init_per_thread_state",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPDigestAuth.build_digest_header": {
            "name": "build_digest_header",
            "location": 127,
            "return": [
                "Optional[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "HTTPDigestAuth.handle_redirect": {
            "name": "handle_redirect",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.handle_401": {
            "name": "handle_401",
            "location": 234,
            "return": [
                "int",
                "Tuple[tuple[Union[str,Any]]]",
                "bytes",
                "Dict[str,Union[Any,Any,Any]]",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "OrderedDict",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "Dict[str, List[str]]",
                    "Optional[str]",
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "HTTPDigestAuth.__call__": {
            "name": "__call__",
            "location": 278,
            "return": [
                "str",
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "HTTPDigestAuth.__eq__": {
            "name": "__eq__",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "HTTPDigestAuth.__ne__": {
            "name": "__ne__",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.md5_utf8": {
            "name": "md5_utf8",
            "location": 145,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.sha_utf8": {
            "name": "sha_utf8",
            "location": 151,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.sha256_utf8": {
            "name": "sha256_utf8",
            "location": 157,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.sha512_utf8": {
            "name": "sha512_utf8",
            "location": 163,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/certs.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/requests/compat.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/requests/cookies.py": {
        "extract_cookies_to_jar": {
            "name": "extract_cookies_to_jar",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "jar": [
                    "int",
                    "bytes",
                    "AnyStr",
                    "str",
                    "Type[object]"
                ],
                "request": [
                    "Optional[str]",
                    "Dict[str,Any]",
                    "str",
                    "None"
                ],
                "response": [
                    "Dict"
                ]
            }
        },
        "get_cookie_header": {
            "name": "get_cookie_header",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "jar": [
                    "Dict[str, str]"
                ],
                "request": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "remove_cookie_by_name": {
            "name": "remove_cookie_by_name",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "cookiejar": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "domain": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_copy_cookie_jar": {
            "name": "_copy_cookie_jar",
            "location": 426,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "jar": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "create_cookie": {
            "name": "create_cookie",
            "location": 441,
            "return": [
                "cookielib.Cookie"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "value": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "morsel_to_cookie": {
            "name": "morsel_to_cookie",
            "location": 477,
            "return": [
                "cookielib.Cookie"
            ],
            "arguments": {
                "morsel": [
                    "bytes",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "cookiejar_from_dict": {
            "name": "cookiejar_from_dict",
            "location": 508,
            "return": [
                "Union[(RequestsCookieJar, _T1)]"
            ],
            "arguments": {
                "cookie_dict": [
                    "None",
                    "Optional[Dict[str,Any]]",
                    "bool"
                ],
                "cookiejar": [
                    "Dict",
                    "Dict[str,str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "Dict",
                    "Callable[,Any]"
                ]
            }
        },
        "merge_cookies": {
            "name": "merge_cookies",
            "location": 529,
            "return": [
                "Union[(RequestsCookieJar, _T0)]"
            ],
            "arguments": {
                "cookiejar": [
                    "Dict",
                    "List[Dict]",
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "cookies": [
                    "Dict"
                ]
            }
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes",
                    "bool",
                    "List[list[int]]",
                    "List[List[int]]"
                ]
            }
        },
        "MockRequest.get_type": {
            "name": "get_type",
            "location": 42,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_host": {
            "name": "get_host",
            "location": 45,
            "return": [
                "bytes",
                "str",
                "int",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_origin_req_host": {
            "name": "get_origin_req_host",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_full_url": {
            "name": "get_full_url",
            "location": 51,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.is_unverifiable": {
            "name": "is_unverifiable",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.has_header": {
            "name": "has_header",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MockRequest.get_header": {
            "name": "get_header",
            "location": 71,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "None"
                ]
            }
        },
        "MockRequest.add_header": {
            "name": "add_header",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Tuple",
                    "bool"
                ],
                "val": [
                    "str",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "MockRequest.add_unredirected_header": {
            "name": "add_unredirected_header",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MockRequest.get_new_headers": {
            "name": "get_new_headers",
            "location": 81,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.unverifiable": {
            "name": "unverifiable",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.origin_req_host": {
            "name": "origin_req_host",
            "location": 89,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.host": {
            "name": "host",
            "location": 93,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping"
                ]
            }
        },
        "MockResponse.info": {
            "name": "info",
            "location": 111,
            "return": [
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.getheaders": {
            "name": "getheaders",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.get": {
            "name": "get",
            "location": 189,
            "return": [
                "str",
                "Optional[str]",
                "None",
                "bool",
                "List"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "bool",
                    "None",
                    "List"
                ],
                "domain": [
                    "str",
                    "List[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "RequestsCookieJar.set": {
            "name": "set",
            "location": 201,
            "return": [
                "None",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Dict[str,dict]]",
                    "Dict[str,dict]"
                ]
            }
        },
        "RequestsCookieJar.iterkeys": {
            "name": "iterkeys",
            "location": 218,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.keys": {
            "name": "keys",
            "location": 227,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.itervalues": {
            "name": "itervalues",
            "location": 235,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.values": {
            "name": "values",
            "location": 244,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.iteritems": {
            "name": "iteritems",
            "location": 252,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.items": {
            "name": "items",
            "location": 261,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.list_domains": {
            "name": "list_domains",
            "location": 270,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.list_paths": {
            "name": "list_paths",
            "location": 278,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.multiple_domains": {
            "name": "multiple_domains",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.get_dict": {
            "name": "get_dict",
            "location": 299,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "path": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__contains__": {
            "name": "__contains__",
            "location": 315,
            "return": [
                "bool",
                "List[str]",
                "int",
                "str",
                "Dict[str,Any]",
                "Tuple[str,int,Dict[str,str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__getitem__": {
            "name": "__getitem__",
            "location": 321,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__setitem__": {
            "name": "__setitem__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__delitem__": {
            "name": "__delitem__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "RequestsCookieJar.set_cookie": {
            "name": "set_cookie",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookie": [
                    "str",
                    "bool"
                ]
            }
        },
        "RequestsCookieJar.update": {
            "name": "update",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,float]",
                    "bool",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "RequestsCookieJar._find": {
            "name": "_find",
            "location": 356,
            "return": [
                "Type[T]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "domain": [
                    "str",
                    "Dict[str,str]",
                    "None"
                ],
                "path": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "RequestsCookieJar._find_no_duplicates": {
            "name": "_find_no_duplicates",
            "location": 376,
            "return": [
                "None",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "str",
                    "None"
                ],
                "path": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "RequestsCookieJar.__getstate__": {
            "name": "__getstate__",
            "location": 401,
            "return": [
                "Dict[str,str]",
                "Callable",
                "List[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.__setstate__": {
            "name": "__setstate__",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "RequestsCookieJar.copy": {
            "name": "copy",
            "location": 414,
            "return": [
                "RequestsCookieJar"
            ],
            "arguments": {
                "self": [
                    "_TRequestsCookieJar@@RequestsCookieJar@@"
                ]
            }
        },
        "RequestsCookieJar.get_policy": {
            "name": "get_policy",
            "location": 421,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/exceptions.py": {
        "RequestException.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/help.py": {
        "_implementation": {
            "name": "_implementation",
            "location": 35,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 68,
            "return": [
                "Dict[(str, Union[(bool, Dict[(str, Any)])])]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/hooks.py": {
        "default_hooks": {
            "name": "default_hooks",
            "location": 17,
            "return": [
                "Dict[(str, List[nothing])]"
            ],
            "arguments": {}
        },
        "dispatch_hook": {
            "name": "dispatch_hook",
            "location": 23,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "Dict",
                "List[str]",
                "bytes",
                "Dict[str,str]",
                "Type",
                "List[dict[str,str]]"
            ],
            "arguments": {
                "key": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bytes",
                    "T",
                    "Type",
                    "Type[T]"
                ],
                "hooks": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "hook_data": [
                    "str",
                    "Dict",
                    "List[str]",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/models.py": {
        "RequestEncodingMixin.path_url": {
            "name": "path_url",
            "location": 64,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestEncodingMixin._encode_params": {
            "name": "_encode_params",
            "location": 85,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Union[bytes, str]",
                    "List[int]",
                    "Union[io.FileIO, io.BufferedReader]",
                    "str"
                ]
            }
        },
        "RequestEncodingMixin._encode_files": {
            "name": "_encode_files",
            "location": 112,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "list",
                    "List[Tuple[str, str, bool]]",
                    "int",
                    "dict"
                ],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, List[Any]]",
                    "cmk.utils.type_defs.AgentRawData",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "RequestHooksMixin.register_hook": {
            "name": "register_hook",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "hook": [
                    "dict"
                ]
            }
        },
        "RequestHooksMixin.deregister_hook": {
            "name": "deregister_hook",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ],
                "hook": [
                    "dict"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "url": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "headers": [
                    "Optional[str]",
                    "Dict[str, Union[str, Any]]",
                    "List[Tuple[str, bytes]]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "files": [
                    "Optional[TextIO]",
                    "Optional[str]",
                    "str"
                ],
                "data": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "params": [
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "auth": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "cookies": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "hooks": [
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "json": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ]
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.prepare": {
            "name": "prepare",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.prepare": {
            "name": "prepare",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "url": [
                    "str"
                ],
                "headers": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ],
                "files": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ],
                "data": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ],
                "params": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "auth": [
                    "str",
                    "int",
                    "bool"
                ],
                "cookies": [
                    "str",
                    "int",
                    "bool"
                ],
                "hooks": [
                    "str",
                    "int",
                    "bool"
                ],
                "json": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ]
            }
        },
        "PreparedRequest.__repr__": {
            "name": "__repr__",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.copy": {
            "name": "copy",
            "location": 333,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.prepare_method": {
            "name": "prepare_method",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "PreparedRequest._get_idna_encoded_host": {
            "name": "_get_idna_encoded_host",
            "location": 351,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "host": [
                    "str",
                    "Union[int, str]",
                    "IO",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "PreparedRequest.prepare_url": {
            "name": "prepare_url",
            "location": 360,
            "return": [
                "Union[tuple, list]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.Item",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes"
                ],
                "params": [
                    "str",
                    "BinaryIO",
                    "raiden.utils.PrivateKey",
                    "List[str]"
                ]
            }
        },
        "PreparedRequest.prepare_headers": {
            "name": "prepare_headers",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "headers": [
                    "Callable"
                ]
            }
        },
        "PreparedRequest.prepare_body": {
            "name": "prepare_body",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "Tuple[dict, bool]",
                    "dict",
                    "Optional[List[str]]",
                    "object",
                    "List[dict]",
                    "Dict[str, Any]"
                ],
                "files": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "json": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "defaultdict"
                ]
            }
        },
        "PreparedRequest.prepare_content_length": {
            "name": "prepare_content_length",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "body": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "PreparedRequest.prepare_auth": {
            "name": "prepare_auth",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[str]",
                    "raiden.utils.Optional[float]",
                    "str",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "Optional[Dict[str, Any]]"
                ],
                "url": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "PreparedRequest.prepare_cookies": {
            "name": "prepare_cookies",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "cookies": [
                    "float",
                    "str"
                ]
            }
        },
        "PreparedRequest.prepare_hooks": {
            "name": "prepare_hooks",
            "location": 586,
            "return": [],
            "arguments": {
                "self": [],
                "hooks": [
                    "bool",
                    "float"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.__enter__": {
            "name": "__enter__",
            "location": 653,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__exit__": {
            "name": "__exit__",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.__getstate__": {
            "name": "__getstate__",
            "location": 659,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__setstate__": {
            "name": "__setstate__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 675,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__bool__": {
            "name": "__bool__",
            "location": 678,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__nonzero__": {
            "name": "__nonzero__",
            "location": 688,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__iter__": {
            "name": "__iter__",
            "location": 698,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.ok": {
            "name": "ok",
            "location": 703,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_redirect": {
            "name": "is_redirect",
            "location": 718,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_permanent_redirect": {
            "name": "is_permanent_redirect",
            "location": 725,
            "return": [
                "bool",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.next": {
            "name": "next",
            "location": 730,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.apparent_encoding": {
            "name": "apparent_encoding",
            "location": 735,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[str]",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_content": {
            "name": "iter_content",
            "location": 739,
            "return": [
                "int",
                "Dict[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "decode_unicode": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Response.iter_lines": {
            "name": "iter_lines",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "decode_unicode": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "delimiter": [
                    "int",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Response.content": {
            "name": "content",
            "location": 826,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.text": {
            "name": "text",
            "location": 846,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.json": {
            "name": "json",
            "location": 883,
            "return": [
                "bool",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.links": {
            "name": "links",
            "location": 920,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.raise_for_status": {
            "name": "raise_for_status",
            "location": 937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.close": {
            "name": "close",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_content.generate": {
            "name": "generate",
            "location": 756,
            "return": [],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/packages.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/requests/sessions.py": {
        "merge_setting": {
            "name": "merge_setting",
            "location": 50,
            "return": [
                "str",
                "bool",
                "None",
                "Dict[str,Any]",
                "Dict",
                "bytes",
                "Dict[str,str]"
            ],
            "arguments": {
                "request_setting": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "session_setting": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "dict_class": [
                    "OrderedDict",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "merge_hooks": {
            "name": "merge_hooks",
            "location": 81,
            "return": [
                "Dict[str,Any]",
                "int",
                "Dict",
                "Dict[str,list[Callable]]",
                "bytes",
                "str",
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request_hooks": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List[Tuple[str,bytes]]"
                ],
                "session_hooks": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,list[Callable]]",
                    "Dict[str,List[Callable]]",
                    "Optional[str]"
                ],
                "dict_class": [
                    "OrderedDict",
                    "bool",
                    "Dict",
                    "Callable",
                    "List[bytes]",
                    "int"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 759,
            "return": [
                "Session"
            ],
            "arguments": {}
        },
        "SessionRedirectMixin.get_redirect_target": {
            "name": "get_redirect_target",
            "location": 98,
            "return": [
                "None",
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "SessionRedirectMixin.should_strip_auth": {
            "name": "should_strip_auth",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "old_url": [
                    "str",
                    "Set[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "new_url": [
                    "str",
                    "Callable[dict,None]",
                    "allennlp.models.Model",
                    "Callable[[Dict],None]",
                    "django.contrib.auth.models.User",
                    "users.models.JustfixUser",
                    "Callable"
                ]
            }
        },
        "SessionRedirectMixin.resolve_redirects": {
            "name": "resolve_redirects",
            "location": 144,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Dict[str, Any]",
                    "os.stat_result",
                    "Tuple[int, int]",
                    "bool"
                ],
                "req": [
                    "Dict[str,str]",
                    "Set[int]",
                    "tracim.models.context_models.ContentInContext",
                    "str",
                    "int",
                    "zerver.models.Realm",
                    "Optional[Set[int]]"
                ],
                "stream": [
                    "bool",
                    "Dict",
                    "ItemsView"
                ],
                "timeout": [
                    "Dict",
                    "ItemsView",
                    "None",
                    "bool"
                ],
                "verify": [
                    "bool",
                    "Dict",
                    "ItemsView"
                ],
                "cert": [
                    "Dict",
                    "ItemsView",
                    "None",
                    "bool"
                ],
                "proxies": [
                    "int",
                    "None",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "bool"
                ],
                "yield_requests": [
                    "bool",
                    "Optional[str]",
                    "List[Dict[str,Any]]",
                    "List"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_auth": {
            "name": "rebuild_auth",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "zerver.models.UserProfile",
                    "str",
                    "dict",
                    "flask.Request"
                ],
                "response": [
                    "_models.Request"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_proxies": {
            "name": "rebuild_proxies",
            "location": 272,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "Dict",
                    "apistar.http.Request",
                    "aiohttp.web.Request",
                    "starlette.requests.Request"
                ],
                "proxies": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_method": {
            "name": "rebuild_method",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "purplship.core.utils.serializable.Deserializable[str]"
                ],
                "response": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__enter__": {
            "name": "__enter__",
            "location": 411,
            "return": [
                "Session"
            ],
            "arguments": {
                "self": [
                    "_TSession@@Session@@"
                ]
            }
        },
        "Session.__exit__": {
            "name": "__exit__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.prepare_request": {
            "name": "prepare_request",
            "location": 417,
            "return": [
                "PreparedRequest",
                "Dict[str,Any]",
                "Dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "flask.Request"
                ]
            }
        },
        "Session.request": {
            "name": "request",
            "location": 457,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Exception",
                "Dict[str,int]",
                "tartare.core.models.Job",
                "List",
                "Optional[Dict[str,str]]",
                "Type",
                "services.ticketing.models.ticket_evenTicketEvent",
                "bytes",
                "Dict[tuple[Union[str,str]],float]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict"
                ],
                "url": [
                    "Dict"
                ],
                "params": [
                    "Dict",
                    "None"
                ],
                "data": [
                    "Dict",
                    "None"
                ],
                "headers": [
                    "Dict",
                    "None"
                ],
                "cookies": [
                    "Dict",
                    "None"
                ],
                "files": [
                    "Dict",
                    "None"
                ],
                "auth": [
                    "Dict",
                    "None"
                ],
                "timeout": [
                    "bool",
                    "None",
                    "int",
                    "Callable[,Any]",
                    "Optional[Callable[,Any]]",
                    "str",
                    "Optional[datetime.timedelta]",
                    "Optional[str]"
                ],
                "allow_redirects": [
                    "bool",
                    "int",
                    "Optional[Callable[,Any]]",
                    "Optional[datetime.timedelta]",
                    "Optional[str]"
                ],
                "proxies": [
                    "str",
                    "None",
                    "Dict",
                    "limbic.emotion.models.LexiconLimbicModel",
                    "DefaultDict",
                    "Optional[ShippingInfo]",
                    "defaultdict"
                ],
                "hooks": [
                    "Dict",
                    "None"
                ],
                "stream": [
                    "str",
                    "None",
                    "Dict",
                    "Exception",
                    "Dict[str,str]"
                ],
                "verify": [
                    "str",
                    "None",
                    "Dict",
                    "Exception",
                    "Dict[str,str]"
                ],
                "cert": [
                    "str",
                    "None",
                    "Dict",
                    "Exception",
                    "Dict[str,str]"
                ],
                "json": [
                    "Dict",
                    "None"
                ]
            }
        },
        "Session.get": {
            "name": "get",
            "location": 533,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Session.options": {
            "name": "options",
            "location": 544,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Session.head": {
            "name": "head",
            "location": 555,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Session.post": {
            "name": "post",
            "location": 566,
            "return": [
                "Dict[str, Any]",
                "set",
                "List[Dict[str, Any]]",
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Dict[str,float]"
                ],
                "data": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "str",
                    "Dict[str,float]"
                ],
                "json": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "Session.put": {
            "name": "put",
            "location": 579,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "bytes"
                ],
                "data": [
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "Session.patch": {
            "name": "patch",
            "location": 591,
            "return": [
                "bool",
                "Dict[int, Dict]",
                "Optional[Any]",
                "Callable",
                "Tuple[int, float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Union[Dict,None]",
                    "None"
                ],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Union[Dict,None]"
                ]
            }
        },
        "Session.delete": {
            "name": "delete",
            "location": 603,
            "return": [
                "str",
                "Dict[str, str]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Session.send": {
            "name": "send",
            "location": 613,
            "return": [
                "List[int]",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Session.merge_environment_settings": {
            "name": "merge_environment_settings",
            "location": 691,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "proxies": [
                    "str",
                    "Dict",
                    "T"
                ],
                "stream": [
                    "str",
                    "Optional[List[T]]",
                    "List[T]",
                    "None"
                ],
                "verify": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Mapping",
                    "zerver.models.Stream",
                    "Mapping[str,T]"
                ],
                "cert": [
                    "str",
                    "bool",
                    "None",
                    "zerver.models.Realm",
                    "List[dict[str,Any]]",
                    "Optional[bool]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Session.get_adapter": {
            "name": "get_adapter",
            "location": 720,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Session.close": {
            "name": "close",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.mount": {
            "name": "mount",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "faustypes.models.ModelT",
                    "IO[str]"
                ],
                "adapter": [
                    "str",
                    "bool"
                ]
            }
        },
        "Session.__getstate__": {
            "name": "__getstate__",
            "location": 750,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__setstate__": {
            "name": "__setstate__",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/status_codes.py": {
        "_init": {
            "name": "_init",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_init.doc": {
            "name": "doc",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "code": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/structures.py": {
        "CaseInsensitiveDict.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T",
                    "str",
                    "tuple",
                    "Iterator[str]"
                ]
            }
        },
        "CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T",
                    "str",
                    "tuple",
                    "Iterator[str]"
                ]
            }
        },
        "CaseInsensitiveDict.__iter__": {
            "name": "__iter__",
            "location": 59,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.lower_items": {
            "name": "lower_items",
            "location": 65,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__eq__": {
            "name": "__eq__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CaseInsensitiveDict.copy": {
            "name": "copy",
            "location": 82,
            "return": [
                "CaseInsensitiveDict"
            ],
            "arguments": {
                "self": [
                    "_TCaseInsensitiveDict@@CaseInsensitiveDict@@"
                ]
            }
        },
        "CaseInsensitiveDict.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "LookupDict.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.__getitem__": {
            "name": "__getitem__",
            "location": 99,
            "return": [
                "bool",
                "Optional[bool]",
                "Sequence[Callable]",
                "Optional[List[Any]]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "LookupDict.get": {
            "name": "get",
            "location": 104,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/utils.py": {
        "dict_to_sequence": {
            "name": "dict_to_sequence",
            "location": 106,
            "return": [
                "Dict[str, bool]",
                "bool",
                "Dict[str, Any]",
                "util.LetterSuffixStyle",
                "Exception"
            ],
            "arguments": {
                "d": [
                    "int",
                    "Callable[[Any], T]"
                ]
            }
        },
        "super_len": {
            "name": "super_len",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "o": [
                    "int",
                    "str"
                ]
            }
        },
        "get_netrc_auth": {
            "name": "get_netrc_auth",
            "location": 179,
            "return": [
                "Iterator[object]",
                "str",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "float"
                ],
                "raise_errors": [
                    "bool",
                    "int",
                    "Type[T]",
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "guess_filename": {
            "name": "guess_filename",
            "location": 236,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "extract_zipped_paths": {
            "name": "extract_zipped_paths",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "atomic_open": {
            "name": "atomic_open",
            "location": 282,
            "return": [],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "from_key_val_list": {
            "name": "from_key_val_list",
            "location": 295,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Dict]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[bytes]",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "to_key_val_list": {
            "name": "to_key_val_list",
            "location": 322,
            "return": [
                "Optional[str]",
                "int",
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "Union[List, Tuple]",
                    "T",
                    "Optional[bytes]",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "parse_list_header": {
            "name": "parse_list_header",
            "location": 352,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "str",
                    "Union[str]"
                ]
            }
        },
        "parse_dict_header": {
            "name": "parse_dict_header",
            "location": 384,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Union[dict, List[Any]]",
                    "Dict[str, Any]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "unquote_header_value": {
            "name": "unquote_header_value",
            "location": 419,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "is_filename": [
                    "str"
                ]
            }
        },
        "dict_from_cookiejar": {
            "name": "dict_from_cookiejar",
            "location": 444,
            "return": [
                "Dict[str, Union[int, str]]",
                "Dict[str, Any]",
                "Dict[str, Dict]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cj": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "add_dict_to_cookiejar": {
            "name": "add_dict_to_cookiejar",
            "location": 459,
            "return": [
                "Dict[str, Any]",
                "Tuple[allennlp.data.Instance, allennlp.common.util.JsonDict]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "cj": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ],
                "cookie_dict": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_encodings_from_content": {
            "name": "get_encodings_from_content",
            "location": 470,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_parse_content_type_header": {
            "name": "_parse_content_type_header",
            "location": 490,
            "return": [
                "str",
                "bool",
                "dict",
                "Type",
                "int",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "header": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "get_encoding_from_headers": {
            "name": "get_encoding_from_headers",
            "location": 515,
            "return": [
                "int",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]",
                "Union[str, None]"
            ],
            "arguments": {
                "headers": [
                    "dict",
                    "str",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "stream_decode_response_unicode": {
            "name": "stream_decode_response_unicode",
            "location": 540,
            "return": [
                "Iterable[Hashable]",
                "str",
                "bool",
                "dict",
                "object"
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "Optional[Callable]",
                    "T",
                    "bool"
                ],
                "r": [
                    "str",
                    "int",
                    "bytes",
                    "Mapping[str, Any]",
                    "Callable[[str], Any]"
                ]
            }
        },
        "iter_slices": {
            "name": "iter_slices",
            "location": 558,
            "return": [],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "bytes"
                ],
                "slice_length": [
                    "str",
                    "int",
                    "List[str]",
                    "Sequence[int]",
                    "Dict[str, int]",
                    "Tuple[str]"
                ]
            }
        },
        "get_unicode_from_response": {
            "name": "get_unicode_from_response",
            "location": 568,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "unquote_unreserved": {
            "name": "unquote_unreserved",
            "location": 609,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "uri": [
                    "str"
                ]
            }
        },
        "requote_uri": {
            "name": "requote_uri",
            "location": 633,
            "return": [
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "uri": [
                    "list",
                    "int",
                    "List[List[T]]",
                    "bool"
                ]
            }
        },
        "address_in_network": {
            "name": "address_in_network",
            "location": 655,
            "return": [
                "Iterator",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "ip": [
                    "int",
                    "bytes"
                ],
                "net": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "dotted_netmask": {
            "name": "dotted_netmask",
            "location": 670,
            "return": [
                "str",
                "int",
                "bytes",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "mask": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_ipv4_address": {
            "name": "is_ipv4_address",
            "location": 681,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_ip": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_valid_cidr": {
            "name": "is_valid_cidr",
            "location": 692,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_network": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "set_environ": {
            "name": "set_environ",
            "location": 717,
            "return": [],
            "arguments": {
                "env_name": [
                    "str"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "Optional[int]"
                ]
            }
        },
        "should_bypass_proxies": {
            "name": "should_bypass_proxies",
            "location": 738,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "list",
                    "List[int]"
                ],
                "no_proxy": [
                    "str",
                    "List[str]",
                    "List[bytes]"
                ]
            }
        },
        "get_environ_proxies": {
            "name": "get_environ_proxies",
            "location": 799,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "no_proxy": [
                    "str"
                ]
            }
        },
        "select_proxy": {
            "name": "select_proxy",
            "location": 811,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[bytes]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "proxies": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "resolve_proxies": {
            "name": "resolve_proxies",
            "location": 837,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [],
                "proxies": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[float]"
                ],
                "trust_env": [
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "TextIO"
                ]
            }
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": 864,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, int]",
                    "set"
                ]
            }
        },
        "default_headers": {
            "name": "default_headers",
            "location": 873,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "parse_header_links": {
            "name": "parse_header_links",
            "location": 885,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "guess_json_utf": {
            "name": "guess_json_utf",
            "location": 928,
            "return": [
                "str",
                "bool",
                "bytearray"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "prepend_scheme_if_needed": {
            "name": "prepend_scheme_if_needed",
            "location": 960,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "new_scheme": [
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "get_auth_from_url": {
            "name": "get_auth_from_url",
            "location": 989,
            "return": [
                "bytes",
                "Callable",
                "bool",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "check_header_validity": {
            "name": "check_header_validity",
            "location": 1010,
            "return": [],
            "arguments": {
                "header": [
                    "Dict[str, float]",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "urldefragauth": {
            "name": "urldefragauth",
            "location": 1031,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "rewind_body": {
            "name": "rewind_body",
            "location": 1048,
            "return": [],
            "arguments": {
                "prepared_request": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "proxy_bypass_registry": {
            "name": "proxy_bypass_registry",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str"
                ]
            }
        },
        "proxy_bypass": {
            "name": "proxy_bypass",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/_internal_utils.py": {
        "to_native_string": {
            "name": "to_native_string",
            "location": 14,
            "return": [
                "bytes",
                "builtin_str",
                "str",
                "OrderedDict",
                "Dict[str,Any]",
                "List",
                "Optional[str]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ],
                "encoding": [
                    "str",
                    "Text"
                ]
            }
        },
        "unicode_is_ascii": {
            "name": "unicode_is_ascii",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "u_string": [
                    "str",
                    "AnyStr",
                    "bytes"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/__init__.py": {
        "check_compatibility": {
            "name": "check_compatibility",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "urllib3_version": [
                    "str",
                    "Sequence[str]"
                ],
                "chardet_version": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "charset_normalizer_version": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "_check_cryptography": {
            "name": "_check_cryptography",
            "location": 87,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "cryptography_version": [
                    "str",
                    "int",
                    "bool",
                    "List"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/requests/__version__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/connection.py": {
        "_match_hostname": {
            "name": "_match_hostname",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "bytes",
                    "str"
                ],
                "asserted_hostname": [
                    "str"
                ]
            }
        },
        "_get_default_user_agent": {
            "name": "_get_default_user_agent",
            "location": 555,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "HTTPConnection.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.host": {
            "name": "host",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "HTTPConnection._new_conn": {
            "name": "_new_conn",
            "location": 161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection._is_using_tunnel": {
            "name": "_is_using_tunnel",
            "location": 192,
            "return": [
                "str",
                "VT",
                "Iterator[T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection._prepare_conn": {
            "name": "_prepare_conn",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "HTTPConnection.connect": {
            "name": "connect",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.putrequest": {
            "name": "putrequest",
            "location": 208,
            "return": [
                "int",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str",
                    "Callable"
                ]
            }
        },
        "HTTPConnection.putheader": {
            "name": "putheader",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "bytes",
                    "str",
                    "datetime.datetime",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "HTTPConnection.request": {
            "name": "request",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Mapping[str,str]",
                    "Mapping",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "url": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Mapping[str,str]",
                    "Mapping",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "body": [
                    "str",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Mapping[str,str]",
                    "Mapping",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ]
            }
        },
        "HTTPConnection.request_chunked": {
            "name": "request_chunked",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str,str]"
                ],
                "url": [
                    "str",
                    "Dict[str,str]"
                ],
                "body": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Optional[Match]",
                    "Dict[str,Any]",
                    "List[Tuple[str,bytes]]",
                    "Match",
                    "List[tuple[Union[str,bytes]]]"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HTTPSConnection.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int",
                    "None"
                ],
                "key_file": [
                    "str",
                    "None",
                    "List[str]",
                    "Union[str,os.PathLike]",
                    "TextIO"
                ],
                "cert_file": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "key_password": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Union[str,list]",
                    "int",
                    "List"
                ],
                "strict": [
                    "str",
                    "int",
                    "None"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "ssl_context": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "server_hostname": [
                    "bool",
                    "None",
                    "str",
                    "Sequence[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPSConnection.set_cert": {
            "name": "set_cert",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_file": [
                    "str",
                    "bool",
                    "None",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "cert_file": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Iterable[str]]",
                    "Optional[int]"
                ],
                "key_password": [
                    "str",
                    "None"
                ],
                "ca_certs": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "assert_hostname": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "assert_fingerprint": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "ca_cert_dir": [
                    "str",
                    "None",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "ca_cert_data": [
                    "str",
                    "None",
                    "Dict",
                    "bool",
                    "int"
                ]
            }
        },
        "HTTPSConnection.connect": {
            "name": "connect",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSConnection._connect_tls_proxy": {
            "name": "_connect_tls_proxy",
            "location": 476,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ],
                "conn": [
                    "str"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/connectionpool.py": {
        "connection_from_url": {
            "name": "connection_from_url",
            "location": 1065,
            "return": [
                "HTTPConnectionPool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "_normalize_host": {
            "name": "_normalize_host",
            "location": 1093,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "float"
                ],
                "scheme": [
                    "str",
                    "int"
                ]
            }
        },
        "ConnectionPool.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Dict"
                ],
                "port": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ConnectionPool.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.__enter__": {
            "name": "__enter__",
            "location": 86,
            "return": [
                "ConnectionPool"
            ],
            "arguments": {
                "self": [
                    "_TConnectionPool@@ConnectionPool@@"
                ]
            }
        },
        "ConnectionPool.__exit__": {
            "name": "__exit__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "ConnectionPool.close": {
            "name": "close",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "port": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "strict": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "timeout": [
                    "bool",
                    "Optional[str]"
                ],
                "maxsize": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "block": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "headers": [
                    "bool",
                    "None",
                    "str",
                    "psycopg2.extensions.connection",
                    "Optional[str]"
                ],
                "retries": [
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ],
                "_proxy": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "_proxy_headers": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "_proxy_config": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[Callable[,Any]]",
                    "Callable[,Any]"
                ]
            }
        },
        "HTTPConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 223,
            "return": [
                "ConnectionCls",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool._get_conn": {
            "name": "_get_conn",
            "location": 244,
            "return": [
                "None",
                "int",
                "str",
                "Tuple[str,str]",
                "Set[str]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "HTTPConnectionPool._put_conn": {
            "name": "_put_conn",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._validate_conn": {
            "name": "_validate_conn",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._prepare_proxy": {
            "name": "_prepare_proxy",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._get_timeout": {
            "name": "_get_timeout",
            "location": 324,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Callable[..., T]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "bool",
                    "Callable",
                    "NamedTuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "HTTPConnectionPool._raise_timeout": {
            "name": "_raise_timeout",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "Iterable[str]",
                    "Optional",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "url": [
                    "str",
                    "float",
                    "bool"
                ],
                "timeout_value": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._make_request": {
            "name": "_make_request",
            "location": 361,
            "return": [
                "Tuple[int, str]",
                "Optional[Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "int"
                ],
                "method": [
                    "str",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "url": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ],
                "timeout": [
                    "bool",
                    "int",
                    "str"
                ],
                "chunked": [
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._absolute_url": {
            "name": "_absolute_url",
            "location": 480,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HTTPConnectionPool.close": {
            "name": "close",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.is_same_host": {
            "name": "is_same_host",
            "location": 501,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "HTTPConnectionPool.urlopen": {
            "name": "urlopen",
            "location": 522,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "str",
                    "Optional[Mapping[str,str]]",
                    "Mapping",
                    "None"
                ],
                "url": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping[str,str]]",
                    "List"
                ],
                "body": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bool"
                ],
                "headers": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bool"
                ],
                "retries": [
                    "str",
                    "None",
                    "bool",
                    "Dict",
                    "List",
                    "Optional[Mapping[str,str]]",
                    "Mapping"
                ],
                "redirect": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "assert_same_host": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "pool_timeout": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bool"
                ],
                "release_conn": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bool"
                ],
                "chunked": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "body_pos": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "HTTPSConnectionPool.__init__": {
            "name": "__init__",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "port": [
                    "bool",
                    "str",
                    "None",
                    "Callable"
                ],
                "strict": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "maxsize": [
                    "int",
                    "bool",
                    "str",
                    "Callable"
                ],
                "block": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "headers": [
                    "bool",
                    "str",
                    "None",
                    "Callable"
                ],
                "retries": [
                    "bool",
                    "str",
                    "None",
                    "Callable"
                ],
                "_proxy": [
                    "bool",
                    "str",
                    "None",
                    "Callable"
                ],
                "_proxy_headers": [
                    "bool",
                    "str",
                    "None",
                    "Callable"
                ],
                "key_file": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ],
                "cert_file": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "key_password": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "IO[str]",
                    "int",
                    "IO"
                ],
                "ca_certs": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "ssl_version": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "assert_hostname": [
                    "List[str]",
                    "bool",
                    "None",
                    "Tuple"
                ],
                "assert_fingerprint": [
                    "List[str]",
                    "bool",
                    "None",
                    "Tuple"
                ],
                "ca_cert_dir": [
                    "str",
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "HTTPSConnectionPool._prepare_conn": {
            "name": "_prepare_conn",
            "location": 961,
            "return": [
                "int",
                "Callable",
                "bool",
                "str",
                "VerifiedHTTPSConnection"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "HTTPSConnectionPool._prepare_proxy": {
            "name": "_prepare_proxy",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "List[list]",
                    "int"
                ]
            }
        },
        "HTTPSConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 996,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSConnectionPool._validate_conn": {
            "name": "_validate_conn",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "Union[int, slice]",
                    "Pattern",
                    "int",
                    "str"
                ]
            }
        },
        "HTTPConnectionPool.urlopen._is_ssl_error_message_from_http_proxy": {
            "name": "_is_ssl_error_message_from_http_proxy",
            "location": 753,
            "return": [
                "bool"
            ],
            "arguments": {
                "ssl_error": [
                    "str",
                    "bool",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/exceptions.py": {
        "PoolError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "PoolError.__reduce__": {
            "name": "__reduce__",
            "location": 27,
            "return": [
                "Tuple[tuple[None]]",
                "int",
                "Optional[str]",
                "Optional[BaseException]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bool"
                ],
                "url": [
                    "str",
                    "Dict",
                    "Set[str]",
                    "float"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "RequestError.__reduce__": {
            "name": "__reduce__",
            "location": 39,
            "return": [
                "bool",
                "Tuple[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyError.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List",
                    "IO",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "error": [
                    "List",
                    "str",
                    "List[str]"
                ]
            }
        },
        "MaxRetryError.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "url": [
                    "str",
                    "bool",
                    "int"
                ],
                "reason": [
                    "str",
                    "None",
                    "bool",
                    "Union[str,DatabaseURL]",
                    "Dict",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "HostChangedError.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "retries": [
                    "int",
                    "str",
                    "Dict",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "LocationParseError.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "int",
                    "List",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "bool"
                ]
            }
        },
        "URLSchemeUnknown.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IncompleteRead.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partial": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "IncompleteRead.__repr__": {
            "name": "__repr__",
            "location": 256,
            "return": [
                "Text",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidChunkLength.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "length": [
                    "List[dict]",
                    "Dict[str,Any]"
                ]
            }
        },
        "InvalidChunkLength.__repr__": {
            "name": "__repr__",
            "location": 273,
            "return": [
                "Text",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxySchemeUnknown.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "HeaderParsingError.__init__": {
            "name": "__init__",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defects": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "int",
                    "None",
                    "Dict[str,str]",
                    "bytes",
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "unparsed_data": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "int",
                    "None",
                    "Dict[str,str]",
                    "bytes",
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/fields.py": {
        "guess_content_type": {
            "name": "guess_content_type",
            "location": 10,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict"
                ],
                "default": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "format_header_param_rfc2231": {
            "name": "format_header_param_rfc2231",
            "location": 24,
            "return": [
                "Text",
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "_replace_multiple": {
            "name": "_replace_multiple",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "needles_and_replacements": [
                    "bool",
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "format_header_param_html5": {
            "name": "format_header_param_html5",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "float",
                    "List[Optional[str]]",
                    "Union[int,float]",
                    "int"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_replace_multiple.replacer": {
            "name": "replacer",
            "location": 83,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "match": [
                    "Match",
                    "Match[str]",
                    "Match[bytes]"
                ]
            }
        },
        "RequestField.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Callable[...,T]"
                ],
                "data": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Union[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "filename": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "headers": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "List[Tuple[str,str,int]]",
                    "List[tuple[Union[str,str,int]]]"
                ],
                "header_formatter": [
                    "bool",
                    "Mapping[str, Any]",
                    "list",
                    "int",
                    "Optional[str]",
                    "Sequence"
                ]
            }
        },
        "RequestField.from_tuples": {
            "name": "from_tuples",
            "location": 160,
            "return": [
                "RequestField"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequestField]"
                ],
                "fieldname": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Dict",
                    "Tuple[object]"
                ],
                "header_formatter": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RequestField._render_part": {
            "name": "_render_part",
            "location": 195,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "RequestField._render_parts": {
            "name": "_render_parts",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "header_parts": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "RequestField.render_headers": {
            "name": "render_headers",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestField.make_multipart": {
            "name": "make_multipart",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_disposition": [
                    "str",
                    "None"
                ],
                "content_type": [
                    "str",
                    "None"
                ],
                "content_location": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/filepost.py": {
        "choose_boundary": {
            "name": "choose_boundary",
            "location": 15,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {}
        },
        "iter_field_objects": {
            "name": "iter_field_objects",
            "location": 25,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "fields": []
            }
        },
        "iter_fields": {
            "name": "iter_fields",
            "location": 45,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "fields": [
                    "Dict",
                    "Dict[str,Any]",
                    "os.DirEntry"
                ]
            }
        },
        "encode_multipart_formdata": {
            "name": "encode_multipart_formdata",
            "location": 63,
            "return": [
                "Tuple[(bytes, str)]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Dict[str,str]",
                    "io.StringIO"
                ],
                "boundary": [
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/poolmanager.py": {
        "_default_key_normalizer": {
            "name": "_default_key_normalizer",
            "location": 78,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "key_class": [
                    "Dict",
                    "T"
                ],
                "request_context": [
                    "bytes",
                    "str"
                ]
            }
        },
        "proxy_from_url": {
            "name": "proxy_from_url",
            "location": 535,
            "return": [
                "ProxyManager"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[List]",
                    "List",
                    "None"
                ]
            }
        },
        "PoolManager.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_pools": [
                    "int",
                    "str",
                    "Dict",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "headers": [
                    "bool",
                    "None",
                    "Exception",
                    "bytes",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "PoolManager.__enter__": {
            "name": "__enter__",
            "location": 180,
            "return": [
                "PoolManager"
            ],
            "arguments": {
                "self": [
                    "_TPoolManager@@PoolManager@@"
                ]
            }
        },
        "PoolManager.__exit__": {
            "name": "__exit__",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "PoolManager._new_pool": {
            "name": "_new_pool",
            "location": 188,
            "return": [
                "urllib3.connectionpool.HTTPConnectionPool"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ],
                "host": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple[Union[str,str]]",
                    "bool",
                    "Tuple[str,str]"
                ],
                "port": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple[Union[str,str]]",
                    "bool",
                    "Tuple[str,str]"
                ],
                "request_context": [
                    "bytes",
                    "bool",
                    "None"
                ]
            }
        },
        "PoolManager.clear": {
            "name": "clear",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolManager.connection_from_host": {
            "name": "connection_from_host",
            "location": 224,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bytes",
                "Tuple[Dict, int]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "port": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "List[dict]"
                ],
                "scheme": [
                    "Text",
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "pool_kwargs": [
                    "int",
                    "None",
                    "str",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "PoolManager.connection_from_context": {
            "name": "connection_from_context",
            "location": 247,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "request_context": []
            }
        },
        "PoolManager.connection_from_pool_key": {
            "name": "connection_from_pool_key",
            "location": 262,
            "return": [
                "urllib3.connectionpool.HTTPConnectionPool"
            ],
            "arguments": {
                "self": [],
                "pool_key": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "request_context": [
                    "str",
                    "bytes",
                    "Sequence[int]"
                ]
            }
        },
        "PoolManager.connection_from_url": {
            "name": "connection_from_url",
            "location": 286,
            "return": [
                "List[str]",
                "int",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "pool_kwargs": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "PoolManager._merge_pool_kwargs": {
            "name": "_merge_pool_kwargs",
            "location": 302,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "override": [
                    "Dict[str,float]",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,int]",
                    "Mapping"
                ]
            }
        },
        "PoolManager._proxy_requires_url_absolute_form": {
            "name": "_proxy_requires_url_absolute_form",
            "location": 322,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parsed_url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PoolManager._validate_proxy_scheme_url_selection": {
            "name": "_validate_proxy_scheme_url_selection",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_scheme": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "PoolManager.urlopen": {
            "name": "urlopen",
            "location": 352,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "redirect": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "ProxyManager.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proxy_url": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "num_pools": [
                    "int",
                    "str",
                    "Dict[str,str]"
                ],
                "headers": [
                    "str",
                    "Dict[str,str]",
                    "None"
                ],
                "proxy_headers": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ],
                "proxy_ssl_context": [
                    "prefecengine.state.State",
                    "None"
                ],
                "use_forwarding_for_https": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Any",
                    "List[str]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "ProxyManager.connection_from_host": {
            "name": "connection_from_host",
            "location": 497,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Dict"
                ],
                "port": [
                    "str",
                    "int",
                    "None",
                    "Dict"
                ],
                "scheme": [
                    "Text",
                    "str",
                    "int",
                    "Dict"
                ],
                "pool_kwargs": [
                    "str",
                    "int",
                    "None",
                    "Dict"
                ]
            }
        },
        "ProxyManager._set_proxy_headers": {
            "name": "_set_proxy_headers",
            "location": 507,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "headers": [
                    "Dict"
                ]
            }
        },
        "ProxyManager.urlopen": {
            "name": "urlopen",
            "location": 522,
            "return": [
                "str",
                "Dict[str, int]",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "url": [
                    "str",
                    "Dict[str,str]"
                ],
                "redirect": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/request.py": {
        "RequestMethods.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping",
                    "None"
                ]
            }
        },
        "RequestMethods.urlopen": {
            "name": "urlopen",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Optional[float]]",
                    "Mapping",
                    "List[Tuple[bytes,bytes]]",
                    "List[tuple[Union[bytes,bytes]]]"
                ],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Optional[float]]",
                    "Mapping",
                    "List[Tuple[bytes,bytes]]",
                    "List[tuple[Union[bytes,bytes]]]"
                ],
                "body": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "Mapping[str,Optional[float]]",
                    "List[Tuple[bytes,bytes]]",
                    "Mapping",
                    "List[tuple[Union[bytes,bytes]]]"
                ],
                "headers": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "Mapping[str,Optional[float]]",
                    "List[Tuple[bytes,bytes]]",
                    "Mapping",
                    "List[tuple[Union[bytes,bytes]]]"
                ],
                "encode_multipart": [
                    "bool",
                    "str",
                    "bytes",
                    "Mapping[str,Optional[float]]",
                    "List[Tuple[bytes,bytes]]",
                    "int"
                ],
                "multipart_boundary": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "Mapping[str,Optional[float]]",
                    "List[Tuple[bytes,bytes]]",
                    "Mapping",
                    "List[tuple[Union[bytes,bytes]]]"
                ]
            }
        },
        "RequestMethods.request": {
            "name": "request",
            "location": 58,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "BaseException"
                ],
                "url": [
                    "Dict",
                    "Optional[dict]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ],
                "fields": [
                    "Optional[Dict[str,Any]]",
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ],
                "headers": [
                    "Optional[Dict[str,Any]]",
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "RequestMethods.request_encode_url": {
            "name": "request_encode_url",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "url": [
                    "bool",
                    "Dict",
                    "List",
                    "Optional[Dict]",
                    "None"
                ],
                "fields": [
                    "str",
                    "List[str]",
                    "None"
                ],
                "headers": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[Mapping]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Mapping",
                    "Optional[dict]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "Dict",
                    "Optional[Type[Any]]",
                    "str",
                    "Type"
                ]
            }
        },
        "RequestMethods.request_encode_body": {
            "name": "request_encode_body",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "fields": [
                    "str",
                    "Dict",
                    "None"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Optional[Mapping]",
                    "Mapping"
                ],
                "encode_multipart": [
                    "bool",
                    "Optional[int]"
                ],
                "multipart_boundary": [
                    "str",
                    "None",
                    "Dict",
                    "Callable",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/response.py": {
        "_get_decoder": {
            "name": "_get_decoder",
            "location": 144,
            "return": [
                "Union[(BrotliDecoder, DeflateDecoder, GzipDecoder, MultiDecoder)]"
            ],
            "arguments": {
                "mode": [
                    "List[int]",
                    "Dict",
                    "Optional[float]",
                    "Tuple[Union[float,float]]",
                    "Optional[Callable]",
                    "int",
                    "Optional[Sequence]",
                    "Optional[Tuple[float,float]]"
                ]
            }
        },
        "DeflateDecoder.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateDecoder.__getattr__": {
            "name": "__getattr__",
            "location": 41,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DeflateDecoder.decompress": {
            "name": "decompress",
            "location": 44,
            "return": [
                "str",
                "int",
                "List[Dict[str,Any]]",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GzipDecoder.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GzipDecoder.__getattr__": {
            "name": "__getattr__",
            "location": 79,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GzipDecoder.decompress": {
            "name": "decompress",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "str",
                    "List[str]",
                    "bytes",
                    "Mapping",
                    "Mapping[str,Any]",
                    "T"
                ]
            }
        },
        "MultiDecoder.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modes": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ]
            }
        },
        "MultiDecoder.flush": {
            "name": "flush",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDecoder.decompress": {
            "name": "decompress",
            "location": 138,
            "return": [
                "bytes",
                "str",
                "Dict[str,Any]",
                "Optional[float]",
                "bytearray",
                "memoryview",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str,Any]",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "HTTPResponse.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Text",
                    "str",
                    "bool",
                    "bytes"
                ],
                "headers": [
                    "Optional[str]",
                    "None",
                    "Dict[str,str]",
                    "str",
                    "int",
                    "cdp.io.StreamHandle",
                    "Dict",
                    "Tuple[Union[dict,Any],int]",
                    "Tuple[Union[dict,Any,int]]",
                    "Tuple[bytes,bytes]",
                    "Tuple[Union[bytes,bytes]]"
                ],
                "status": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]"
                ],
                "version": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]"
                ],
                "reason": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]",
                    "Dict[str,Any]",
                    "Sequence[str]"
                ],
                "strict": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]"
                ],
                "preload_content": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str,str]"
                ],
                "decode_content": [
                    "bool",
                    "str",
                    "int",
                    "Dict"
                ],
                "original_response": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "pool": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]",
                    "Dict[str,Any]",
                    "Sequence[str]"
                ],
                "connection": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]",
                    "Dict[str,Any]",
                    "Sequence[str]"
                ],
                "msg": [
                    "str",
                    "None",
                    "bytes",
                    "Callable",
                    "int"
                ],
                "retries": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]",
                    "Dict[str,Any]",
                    "Sequence[str]"
                ],
                "enforce_content_length": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "request_method": [
                    "int",
                    "None",
                    "str",
                    "Dict",
                    "Dict[int,List[int]]",
                    "Dict[int,list[int]]"
                ],
                "request_url": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "auto_close": [
                    "bool",
                    "str",
                    "bytes",
                    "Tuple",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "HTTPResponse.get_redirect_location": {
            "name": "get_redirect_location",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.release_conn": {
            "name": "release_conn",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.drain_conn": {
            "name": "drain_conn",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.data": {
            "name": "data",
            "location": 294,
            "return": [
                "str",
                "Sequence[str]",
                "MutableMapping[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.connection": {
            "name": "connection",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.isclosed": {
            "name": "isclosed",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.tell": {
            "name": "tell",
            "location": 309,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._init_length": {
            "name": "_init_length",
            "location": 317,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request_method": [
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "HTTPResponse._init_decoder": {
            "name": "_init_decoder",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._decode": {
            "name": "_decode",
            "location": 392,
            "return": [
                "Dict[str,Any]",
                "int",
                "Dict[str,str]",
                "Dict",
                "bytes",
                "str",
                "List[str]",
                "Tuple[Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "decode_content": [
                    "str",
                    "List",
                    "Dict[str,List[Dict]]",
                    "int",
                    "Dict[str,list[dict]]"
                ],
                "flush_decoder": [
                    "str",
                    "List",
                    "Dict[str,List[Dict]]",
                    "int",
                    "Dict[str,list[dict]]"
                ]
            }
        },
        "HTTPResponse._flush_decoder": {
            "name": "_flush_decoder",
            "location": 414,
            "return": [
                "bytes",
                "int",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._error_catcher": {
            "name": "_error_catcher",
            "location": 426,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.read": {
            "name": "read",
            "location": 481,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "bytes",
                "Dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "bytes",
                    "None",
                    "int",
                    "Optional[bytes]"
                ],
                "decode_content": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict"
                ],
                "cache_content": [
                    "bool",
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "HTTPResponse.stream": {
            "name": "stream",
            "location": 555,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "str",
                    "int"
                ],
                "decode_content": [
                    "str",
                    "None"
                ]
            }
        },
        "HTTPResponse.from_httplib": {
            "name": "from_httplib",
            "location": 582,
            "return": [
                "HTTPResponse"
            ],
            "arguments": {
                "ResponseCls": [
                    "Type[_THTTPResponse]"
                ],
                "r": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "HTTPResponse.getheaders": {
            "name": "getheaders",
            "location": 614,
            "return": [
                "dict",
                "int",
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.getheader": {
            "name": "getheader",
            "location": 617,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,str]"
                ],
                "default": [
                    "str",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "HTTPResponse.info": {
            "name": "info",
            "location": 621,
            "return": [
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.close": {
            "name": "close",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.closed": {
            "name": "closed",
            "location": 636,
            "return": [
                "bool",
                "BinaryIO",
                "trezor.io.HID",
                "cdp.io.StreamHandle",
                "io.BytesIO",
                "deoplete.util.UserContext",
                "TextIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.fileno": {
            "name": "fileno",
            "location": 648,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.flush": {
            "name": "flush",
            "location": 659,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.readable": {
            "name": "readable",
            "location": 667,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.readinto": {
            "name": "readinto",
            "location": 671,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "List[str]",
                    "List[bytes]",
                    "List['cirq.Circuit']",
                    "bytes",
                    "int",
                    "Dict[int, bool]",
                    "Tuple[bool]"
                ]
            }
        },
        "HTTPResponse.supports_chunked_reads": {
            "name": "supports_chunked_reads",
            "location": 680,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._update_chunk_length": {
            "name": "_update_chunk_length",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._handle_chunk": {
            "name": "_handle_chunk",
            "location": 703,
            "return": [
                "Union[tuple,list]",
                "List[int]",
                "Callable[...,Any]",
                "str",
                "Dict[str,Any]",
                "None",
                "Type",
                "Dict",
                "List",
                "Dict[int,Any]",
                "Dict[str,Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "Optional[Outcome]",
                    "None"
                ]
            }
        },
        "HTTPResponse.read_chunked": {
            "name": "read_chunked",
            "location": 725,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "bytes",
                    "int",
                    "None",
                    "str"
                ],
                "decode_content": [
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "HTTPResponse.geturl": {
            "name": "geturl",
            "location": 795,
            "return": [
                "int",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.__iter__": {
            "name": "__iter__",
            "location": 806,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrotliDecoder.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrotliDecoder.flush": {
            "name": "flush",
            "location": 117,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/_collections.py": {
        "RecentlyUsedContainer.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "List[List[int]]"
                ],
                "dispose_func": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "List[List[int]]"
                ]
            }
        },
        "RecentlyUsedContainer.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RecentlyUsedContainer.__setitem__": {
            "name": "__setitem__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "RecentlyUsedContainer.__delitem__": {
            "name": "__delitem__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RecentlyUsedContainer.__len__": {
            "name": "__len__",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentlyUsedContainer.__iter__": {
            "name": "__iter__",
            "location": 87,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentlyUsedContainer.clear": {
            "name": "clear",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentlyUsedContainer.keys": {
            "name": "keys",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "HTTPHeaderDict.__setitem__": {
            "name": "__setitem__",
            "location": 152,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "KT"
                ],
                "val": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.__getitem__": {
            "name": "__getitem__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "bool",
                    "Hashable",
                    "Union[float, int]"
                ]
            }
        },
        "HTTPHeaderDict.__delitem__": {
            "name": "__delitem__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "HTTPHeaderDict.__contains__": {
            "name": "__contains__",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "HTTPHeaderDict.__eq__": {
            "name": "__eq__",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]"
                ]
            }
        },
        "HTTPHeaderDict.__ne__": {
            "name": "__ne__",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "HTTPHeaderDict.__len__": {
            "name": "__len__",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__iter__": {
            "name": "__iter__",
            "location": 187,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.pop": {
            "name": "pop",
            "location": 192,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.discard": {
            "name": "discard",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.add": {
            "name": "add",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ],
                "val": [
                    "str",
                    "bytes",
                    "slice",
                    "int",
                    "bool"
                ]
            }
        },
        "HTTPHeaderDict.extend": {
            "name": "extend",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.getlist": {
            "name": "getlist",
            "location": 259,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "Hashable"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.__repr__": {
            "name": "__repr__",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict._copy_from": {
            "name": "_copy_from",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "HTTPHeaderDict.copy": {
            "name": "copy",
            "location": 290,
            "return": [
                "HTTPHeaderDict"
            ],
            "arguments": {
                "self": [
                    "_THTTPHeaderDict@@HTTPHeaderDict@@"
                ]
            }
        },
        "HTTPHeaderDict.iteritems": {
            "name": "iteritems",
            "location": 295,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.itermerged": {
            "name": "itermerged",
            "location": 302,
            "return": [
                "Generator[(Tuple[(Any, str)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.items": {
            "name": "items",
            "location": 308,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.from_httplib": {
            "name": "from_httplib",
            "location": 312,
            "return": [
                "HTTPHeaderDict"
            ],
            "arguments": {
                "cls": [
                    "Type[_THTTPHeaderDict]"
                ],
                "message": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "type"
                ]
            }
        },
        "RLock.__enter__": {
            "name": "__enter__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RLock.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/_version.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/__init__.py": {
        "add_stderr_logger": {
            "name": "add_stderr_logger",
            "location": 46,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "level": [
                    "int",
                    "float",
                    "Optional[\"GraphLogger\"]",
                    "Exception"
                ]
            }
        },
        "disable_warnings": {
            "name": "disable_warnings",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/appengine.py": {
        "AppEngineManager.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "bool",
                    "None",
                    "bytes",
                    "Optional[Any]",
                    "OrderedDict",
                    "Dict[str,Any]",
                    "Any",
                    "Tuple[str,bool]",
                    "Tuple[Union[str,bool]]"
                ],
                "retries": [
                    "str",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ],
                "validate_certificate": [
                    "bool",
                    "List[int]",
                    "Tuple[str,List[str]]",
                    "Sequence",
                    "MutableMapping",
                    "Optional[int]",
                    "str",
                    "Dict[str,Any]"
                ],
                "urlfetch_retries": [
                    "bool",
                    "str",
                    "cirq.api.google.v1.params_pb2.ZipSweep",
                    "List[str]"
                ]
            }
        },
        "AppEngineManager.__enter__": {
            "name": "__enter__",
            "location": 124,
            "return": [
                "AppEngineManager"
            ],
            "arguments": {
                "self": [
                    "_TAppEngineManager@@AppEngineManager@@"
                ]
            }
        },
        "AppEngineManager.__exit__": {
            "name": "__exit__",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "AppEngineManager.urlopen": {
            "name": "urlopen",
            "location": 131,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "google.oauth2.credentials.Credentials",
                "guillotina.response.Response"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "ResponseType"
                ],
                "url": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "ResponseType"
                ],
                "body": [
                    "Dict",
                    "None",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "ResponseType"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "ResponseType"
                ],
                "retries": [
                    "str",
                    "None",
                    "int",
                    "Mapping",
                    "Optional[str]",
                    "List[str]",
                    "qutebrowser.api.apitypes.Tab"
                ],
                "redirect": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "int",
                    "qutebrowser.api.apitypes.Tab"
                ],
                "timeout": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "\"ResponseType\"",
                    "bool"
                ]
            }
        },
        "AppEngineManager._urlfetch_response_to_http_response": {
            "name": "_urlfetch_response_to_http_response",
            "location": 245,
            "return": [
                "HTTPResponse",
                "Tuple[int,str]",
                "Dict",
                "str",
                "Iterable[bytes]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "urlfetch_resp": [
                    "int",
                    "Mapping",
                    "str"
                ]
            }
        },
        "AppEngineManager._get_absolute_timeout": {
            "name": "_get_absolute_timeout",
            "location": 281,
            "return": [
                "Optional[str]",
                "str",
                "None",
                "Union[None,List[str]]",
                "int",
                "List[str]",
                "Timeout_@_DEFAULT_TIMEOUT",
                "Timeout"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "AppEngineManager._get_retries": {
            "name": "_get_retries",
            "location": 294,
            "return": [
                "str",
                "bool",
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "redirect": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/ntlmpool.py": {
        "NTLMConnectionPool.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "pw": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "authurl": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "NTLMConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 48,
            "return": [
                "HTTPSConnection",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTLMConnectionPool.urlopen": {
            "name": "urlopen",
            "location": 115,
            "return": [
                "str",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Mapping"
                ],
                "url": [
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Mapping"
                ],
                "body": [
                    "bytes",
                    "None",
                    "str",
                    "Dict[str,str]",
                    "Mapping"
                ],
                "headers": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[Type[Any]]",
                    "Dict[str,Any]",
                    "Type"
                ],
                "retries": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Mapping"
                ],
                "redirect": [
                    "bool",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Mapping"
                ],
                "assert_same_host": [
                    "bool",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Mapping"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/pyopenssl.py": {
        "inject_into_urllib3": {
            "name": "inject_into_urllib3",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_from_urllib3": {
            "name": "extract_from_urllib3",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_validate_dependencies_met": {
            "name": "_validate_dependencies_met",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_dnsname_to_stdlib": {
            "name": "_dnsname_to_stdlib",
            "location": 171,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_subj_alt_name": {
            "name": "get_subj_alt_name",
            "location": 214,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "peer_cert": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_verify_callback": {
            "name": "_verify_callback",
            "location": 510,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "cnx": [
                    "int",
                    "str"
                ],
                "x509": [
                    "int",
                    "str"
                ],
                "err_no": [
                    "int",
                    "str"
                ],
                "err_depth": [
                    "int",
                    "str"
                ],
                "return_code": [
                    "int",
                    "str"
                ]
            }
        },
        "_dnsname_to_stdlib.idna_encode": {
            "name": "idna_encode",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "WrappedSocket.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "socket": [
                    "int",
                    "bool",
                    "float"
                ],
                "suppress_ragged_eofs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WrappedSocket.fileno": {
            "name": "fileno",
            "location": 282,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._decref_socketios": {
            "name": "_decref_socketios",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.recv": {
            "name": "recv",
            "location": 292,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.recv_into": {
            "name": "recv_into",
            "location": 317,
            "return": [
                "List[str]",
                "logging.LogRecord",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.settimeout": {
            "name": "settimeout",
            "location": 340,
            "return": [
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "WrappedSocket._send_until_done": {
            "name": "_send_until_done",
            "location": 343,
            "return": [
                "int",
                "pymatgen.io.vasp.inputs.Poscar",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Optional[Exception]",
                    "Optional[bool]",
                    "bytes",
                    "Union[Dict, List]"
                ]
            }
        },
        "WrappedSocket.sendall": {
            "name": "sendall",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "dict",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "WrappedSocket.shutdown": {
            "name": "shutdown",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.close": {
            "name": "close",
            "location": 366,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.getpeercert": {
            "name": "getpeercert",
            "location": 376,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "binary_form": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WrappedSocket.version": {
            "name": "version",
            "location": 390,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._reuse": {
            "name": "_reuse",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._drop": {
            "name": "_drop",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "makefile": {
            "name": "makefile",
            "location": 405,
            "return": [
                "Union[(io.BufferedRWPair, io.BufferedReader, io.BufferedWriter, io.TextIOWrapper, socket.SocketIO)]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int",
                    "float",
                    "Optional[Dict[int, Any]]"
                ],
                "bufsize": [
                    "int",
                    "float",
                    "Optional[Dict[int, Any]]"
                ]
            }
        },
        "PyOpenSSLContext.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "str"
                ]
            }
        },
        "PyOpenSSLContext.options": {
            "name": "options",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "PyOpenSSLContext.verify_mode": {
            "name": "verify_mode",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "PyOpenSSLContext.set_default_verify_paths": {
            "name": "set_default_verify_paths",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyOpenSSLContext.set_ciphers": {
            "name": "set_ciphers",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ciphers": [
                    "str",
                    "denite.util.UserContext",
                    "int"
                ]
            }
        },
        "PyOpenSSLContext.load_verify_locations": {
            "name": "load_verify_locations",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cafile": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "capath": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "cadata": [
                    "str",
                    "gobbli.io.PredictInput",
                    "Optional[str]"
                ]
            }
        },
        "PyOpenSSLContext.load_cert_chain": {
            "name": "load_cert_chain",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certfile": [
                    "str"
                ],
                "keyfile": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "PyOpenSSLContext.set_alpn_protocols": {
            "name": "set_alpn_protocols",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocols": [
                    "int",
                    "str"
                ]
            }
        },
        "PyOpenSSLContext.wrap_socket": {
            "name": "wrap_socket",
            "location": 478,
            "return": [
                "WrappedSocket"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "server_side": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "do_handshake_on_connect": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "suppress_ragged_eofs": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "server_hostname": [
                    "Callable[[float], float]",
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/securetransport.py": {
        "inject_into_urllib3": {
            "name": "inject_into_urllib3",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_from_urllib3": {
            "name": "extract_from_urllib3",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_read_callback": {
            "name": "_read_callback",
            "location": 213,
            "return": [
                "int"
            ],
            "arguments": {
                "connection_id": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "data_buffer": [
                    "int",
                    "ByteString",
                    "Optional[threading.RLock]",
                    "bool"
                ],
                "data_length_pointer": [
                    "str",
                    "bool",
                    "int",
                    "bytes",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "list"
                ]
            }
        },
        "_write_callback": {
            "name": "_write_callback",
            "location": 268,
            "return": [
                "int"
            ],
            "arguments": {
                "connection_id": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "data_buffer": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "data_length_pointer": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "WrappedSocket.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "int",
                    "ssl.SSLContext",
                    "str"
                ]
            }
        },
        "WrappedSocket._raise_on_error": {
            "name": "_raise_on_error",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._set_ciphers": {
            "name": "_set_ciphers",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._set_alpn_protocols": {
            "name": "_set_alpn_protocols",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocols": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "WrappedSocket._custom_validate": {
            "name": "_custom_validate",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "trust_bundle": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "WrappedSocket._evaluate_trust": {
            "name": "_evaluate_trust",
            "location": 434,
            "return": [
                "int",
                "str",
                "tuple",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "trust_bundle": [
                    "str",
                    "int"
                ]
            }
        },
        "WrappedSocket.handshake": {
            "name": "handshake",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_hostname": [
                    "bytes",
                    "int",
                    "bool",
                    "str"
                ],
                "verify": [
                    "bool",
                    "Union[None, int]",
                    "Optional[Union[float, Any]]",
                    "float",
                    "Optional[Tuple[float, float]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "trust_bundle": [
                    "bool",
                    "Union[None, int]",
                    "Optional[Union[float, Any]]",
                    "float",
                    "Optional[Tuple[float, float]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "min_version": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "max_version": [
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "Dict[str, int]",
                    "int",
                    "str"
                ],
                "client_cert": [
                    "bool",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "Optional[str]"
                ],
                "client_key": [
                    "bool",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "Optional[str]"
                ],
                "client_key_passphrase": [
                    "bool",
                    "float",
                    "str"
                ],
                "alpn_protocols": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "WrappedSocket.fileno": {
            "name": "fileno",
            "location": 567,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._decref_socketios": {
            "name": "_decref_socketios",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.recv": {
            "name": "recv",
            "location": 577,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "bufsiz": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WrappedSocket.recv_into": {
            "name": "recv_into",
            "location": 583,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "bytearray",
                    "TextIO"
                ],
                "nbytes": [
                    "ByteString",
                    "venv.Lib.site-packages.sqlalchemy.orm.unitofwork.PostUpdateAll",
                    "List[str]",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "WrappedSocket.settimeout": {
            "name": "settimeout",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "WrappedSocket.gettimeout": {
            "name": "gettimeout",
            "location": 629,
            "return": [
                "str",
                "int",
                "List[dict]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.send": {
            "name": "send",
            "location": 632,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WrappedSocket.sendall": {
            "name": "sendall",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "dict",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "WrappedSocket.shutdown": {
            "name": "shutdown",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.close": {
            "name": "close",
            "location": 659,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.getpeercert": {
            "name": "getpeercert",
            "location": 678,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "binary_form": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WrappedSocket.version": {
            "name": "version",
            "location": 736,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._reuse": {
            "name": "_reuse",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._drop": {
            "name": "_drop",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "makefile": {
            "name": "makefile",
            "location": 776,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [
                    "WrappedSocket"
                ],
                "mode": [
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "buffering": [
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "SecureTransportContext.__init__": {
            "name": "__init__",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "SecureTransportContext.check_hostname": {
            "name": "check_hostname",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "SecureTransportContext.options": {
            "name": "options",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "SecureTransportContext.verify_mode": {
            "name": "verify_mode",
            "location": 839,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[int]",
                    "Callable[[], Any]",
                    "int"
                ]
            }
        },
        "SecureTransportContext.set_default_verify_paths": {
            "name": "set_default_verify_paths",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecureTransportContext.load_default_certs": {
            "name": "load_default_certs",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecureTransportContext.set_ciphers": {
            "name": "set_ciphers",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ciphers": [
                    "bool",
                    "float"
                ]
            }
        },
        "SecureTransportContext.load_verify_locations": {
            "name": "load_verify_locations",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cafile": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "capath": [
                    "Optional[str]",
                    "str",
                    "list"
                ],
                "cadata": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SecureTransportContext.load_cert_chain": {
            "name": "load_cert_chain",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certfile": [
                    "str"
                ],
                "keyfile": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "SecureTransportContext.set_alpn_protocols": {
            "name": "set_alpn_protocols",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocols": [
                    "bool",
                    "float"
                ]
            }
        },
        "SecureTransportContext.wrap_socket": {
            "name": "wrap_socket",
            "location": 891,
            "return": [
                "WrappedSocket"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "int",
                    "Optional[int]",
                    "Optional[Tuple[int, ...]]",
                    "str",
                    "bool"
                ],
                "server_side": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "do_handshake_on_connect": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "suppress_ragged_eofs": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "server_hostname": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/socks.py": {
        "SOCKSConnection.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSConnection._new_conn": {
            "name": "_new_conn",
            "location": 84,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSProxyManager.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proxy_url": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "Optional[List[SoftwareApplication]]",
                    "List[S]"
                ],
                "password": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "Optional[List[SoftwareApplication]]",
                    "List[S]"
                ],
                "num_pools": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "headers": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Dict"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/_appengine_environ.py": {
        "is_appengine": {
            "name": "is_appengine",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_appengine_sandbox": {
            "name": "is_appengine_sandbox",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_local_appengine": {
            "name": "is_local_appengine",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_prod_appengine": {
            "name": "is_prod_appengine",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_prod_appengine_mvms": {
            "name": "is_prod_appengine_mvms",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/_securetransport/bindings.py": {
        "load_cdll": {
            "name": "load_cdll",
            "location": 65,
            "return": [
                "Optional[ctypes.CDLL]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "Dict",
                    "int",
                    "bytes",
                    "None"
                ],
                "macos10_16_path": [
                    "str"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/_securetransport/low_level.py": {
        "_cf_data_from_bytes": {
            "name": "_cf_data_from_bytes",
            "location": 27,
            "return": [
                "int",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "bool",
                "str"
            ],
            "arguments": {
                "bytestring": [
                    "str",
                    "bool",
                    "int",
                    "bytes",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "_cf_dictionary_from_tuples": {
            "name": "_cf_dictionary_from_tuples",
            "location": 37,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "tuples": [
                    "int",
                    "float",
                    "List[list]",
                    "Tuple[int, int]"
                ]
            }
        },
        "_cfstr": {
            "name": "_cfstr",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "py_bstr": [
                    "int",
                    "ByteString",
                    "bool"
                ]
            }
        },
        "_create_cfstring_array": {
            "name": "_create_cfstring_array",
            "location": 73,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_cf_string_to_unicode": {
            "name": "_cf_string_to_unicode",
            "location": 104,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Type",
                    "ctypes.CDLL",
                    "Type[ctypes.c_void_p]",
                    "ctypes.c_int",
                    "ctypes.c_uint32"
                ]
            }
        },
        "_assert_no_error": {
            "name": "_assert_no_error",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "Callable",
                    "Dict[str,Any]"
                ],
                "exception_class": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Callable[str,Any]",
                    "Union[List[str],int]",
                    "Optional[Callable[[str],Any]]"
                ]
            }
        },
        "_cert_array_from_pem": {
            "name": "_cert_array_from_pem",
            "location": 150,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "pem_bundle": [
                    "str",
                    "int"
                ]
            }
        },
        "_is_cert": {
            "name": "_is_cert",
            "location": 196,
            "return": [
                "bool",
                "Sequence[Any]",
                "Type",
                "Dict"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Dict"
                ]
            }
        },
        "_is_identity": {
            "name": "_is_identity",
            "location": 204,
            "return": [
                "bool",
                "Sequence[Any]",
                "Type",
                "Dict"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Dict"
                ]
            }
        },
        "_temporary_keychain": {
            "name": "_temporary_keychain",
            "location": 212,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {}
        },
        "_load_items_from_file": {
            "name": "_load_items_from_file",
            "location": 247,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "keychain": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "path": [
                    "str",
                    "Union[str,bytes,int]",
                    "bytes"
                ]
            }
        },
        "_load_client_cert_chain": {
            "name": "_load_client_cert_chain",
            "location": 302,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "keychain": [
                    "str"
                ]
            }
        },
        "_build_tls_unknown_ca_alert": {
            "name": "_build_tls_unknown_ca_alert",
            "location": 386,
            "return": [
                "bytes"
            ],
            "arguments": {
                "version": [
                    "bool",
                    "str",
                    "Tuple",
                    "int",
                    "Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/contrib/_securetransport/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/packages/six.py": {
        "_add_doc": {
            "name": "_add_doc",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ],
                "doc": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "_import_module": {
            "name": "_import_module",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Sequence[utils.types.A]"
                ]
            }
        },
        "add_move": {
            "name": "add_move",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "move": [
                    "str",
                    "dss.util.types.JSON",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "remove_move": {
            "name": "remove_move",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "assertCountEqual": {
            "name": "assertCountEqual",
            "location": 745,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertRaisesRegex": {
            "name": "assertRaisesRegex",
            "location": 749,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertRegex": {
            "name": "assertRegex",
            "location": 753,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertNotRegex": {
            "name": "assertNotRegex",
            "location": 757,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "with_metaclass": {
            "name": "with_metaclass",
            "location": 930,
            "return": [
                "type"
            ],
            "arguments": {
                "meta": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "add_metaclass": {
            "name": "add_metaclass",
            "location": 954,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "metaclass": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "ensure_binary": {
            "name": "ensure_binary",
            "location": 974,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "ensure_str": {
            "name": "ensure_str",
            "location": 992,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "ensure_text": {
            "name": "ensure_text",
            "location": 1015,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[Union[str, Any]]"
                ],
                "encoding": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "python_2_unicode_compatible": {
            "name": "python_2_unicode_compatible",
            "location": 1034,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "dict",
                    "denite.util.UserContext"
                ]
            }
        },
        "_LazyDescr.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_LazyDescr.__get__": {
            "name": "__get__",
            "location": 95,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "tp": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "MovedModule.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "old": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "new": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[\"ValidatorTypes\"]",
                    "str",
                    "Optional[\"Node\"]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "MovedModule._resolve": {
            "name": "_resolve",
            "location": 117,
            "return": [
                "module"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedModule.__getattr__": {
            "name": "__getattr__",
            "location": 120,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "_LazyModule.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_LazyModule.__dir__": {
            "name": "__dir__",
            "location": 132,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedAttribute.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "old_mod": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "new_mod": [
                    "Optional[str]",
                    "Union[int, str]",
                    "Optional[Sequence[str]]",
                    "Optional[int]",
                    "str"
                ],
                "old_attr": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "new_attr": [
                    "Optional[str]",
                    "Optional[Match]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[List[dict]]",
                    "Optional[dict]"
                ]
            }
        },
        "MovedAttribute._resolve": {
            "name": "_resolve",
            "location": 160,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SixMetaPathImporter.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "six_module_name": [
                    "str",
                    "Container[str]",
                    "types.ModuleType",
                    "bool"
                ]
            }
        },
        "_SixMetaPathImporter._add_module": {
            "name": "_add_module",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "_SixMetaPathImporter._get_module": {
            "name": "_get_module",
            "location": 182,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "_SixMetaPathImporter.find_module": {
            "name": "find_module",
            "location": 185,
            "return": [
                "Optional[_SixMetaPathImporter]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType"
                ]
            }
        },
        "_SixMetaPathImporter.find_spec": {
            "name": "find_spec",
            "location": 190,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "list"
                ],
                "target": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "list"
                ]
            }
        },
        "_SixMetaPathImporter.__get_module": {
            "name": "__get_module",
            "location": 195,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "_SixMetaPathImporter.load_module": {
            "name": "load_module",
            "location": 201,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "bool"
                ]
            }
        },
        "_SixMetaPathImporter.is_package": {
            "name": "is_package",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "_SixMetaPathImporter.get_code": {
            "name": "get_code",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "Union[str, IO]",
                    "str",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "_SixMetaPathImporter.create_module": {
            "name": "create_module",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "_SixMetaPathImporter.exec_module": {
            "name": "exec_module",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "types.ModuleType",
                    "str"
                ]
            }
        },
        "Module_six_moves_urllib.__dir__": {
            "name": "__dir__",
            "location": 535,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_unbound_function": {
            "name": "get_unbound_function",
            "location": 610,
            "return": [
                "str"
            ],
            "arguments": {
                "unbound": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "create_unbound_method": {
            "name": "create_unbound_method",
            "location": 616,
            "return": [
                "mypy.types.Type",
                "Optional[Callable[[], mypy.types.Instance]]"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "denite.util.UserContext",
                    "Dict[str, Any]"
                ],
                "cls": [
                    "dict",
                    "denite.util.UserContext",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_bound_method": {
            "name": "create_bound_method",
            "location": 613,
            "return": [
                "mypy.types.Type",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "bytearray",
                    "Type"
                ],
                "obj": [
                    "dict",
                    "bytearray",
                    "Type"
                ]
            }
        },
        "iterkeys": {
            "name": "iterkeys",
            "location": 658,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "itervalues": {
            "name": "itervalues",
            "location": 661,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "iteritems": {
            "name": "iteritems",
            "location": 664,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "iterlists": {
            "name": "iterlists",
            "location": 667,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "b": {
            "name": "b",
            "location": 716,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "u": {
            "name": "u",
            "location": 721,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "byte2int": {
            "name": "byte2int",
            "location": 727,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "bs": [
                    "Optional[str]",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "indexbytes": {
            "name": "indexbytes",
            "location": 730,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "buf": [
                    "bytes",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Iterable[int]"
                ],
                "i": [
                    "bytes",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Iterable[int]"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 764,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tp": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "value": [
                    "float",
                    "Optional[str]",
                    "Iterable",
                    "T",
                    "str",
                    "bool"
                ],
                "tb": [
                    "str",
                    "bool"
                ]
            }
        },
        "exec_": {
            "name": "exec_",
            "location": 778,
            "return": [],
            "arguments": {
                "_code_": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "_globs_": [
                    "str",
                    "Optional[str]"
                ],
                "_locs_": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "raise_from": {
            "name": "raise_from",
            "location": 811,
            "return": [],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, object]"
                ],
                "from_value": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, object]"
                ]
            }
        },
        "print_": {
            "name": "print_",
            "location": 879,
            "return": [],
            "arguments": {}
        },
        "_update_wrapper": {
            "name": "_update_wrapper",
            "location": 895,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "wrapper": [
                    "str",
                    "Optional[str]"
                ],
                "wrapped": [
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "assigned": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]"
                ],
                "updated": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "wraps": {
            "name": "wraps",
            "location": 915,
            "return": [
                "Callable[([_T], _T)]"
            ],
            "arguments": {
                "wrapped": [
                    "Callable"
                ],
                "assigned": [
                    "Sequence[str]"
                ],
                "updated": [
                    "Sequence[str]"
                ]
            }
        },
        "add_metaclass.wrapper": {
            "name": "wrapper",
            "location": 957,
            "return": [
                "str",
                "authorityspoke.io.schemas.RawFactor",
                "Type",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Type[types.C]",
                    "types.StrucInput",
                    "str",
                    "type",
                    "Type"
                ]
            }
        },
        "advance_iterator": {
            "name": "advance_iterator",
            "location": 582,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "callable": {
            "name": "callable",
            "location": 593,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "mypy.types.Instance",
                    "int",
                    "str"
                ]
            }
        },
        "Iterator.next": {
            "name": "next",
            "location": 620,
            "return": [
                "Union[(_T, _T2)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "print_.write": {
            "name": "write",
            "location": 824,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "with_metaclass.metaclass.__new__": {
            "name": "__new__",
            "location": 936,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "this_bases": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "d": [
                    "str",
                    "int",
                    "TextIO"
                ]
            }
        },
        "with_metaclass.metaclass.__prepare__": {
            "name": "__prepare__",
            "location": 948,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "this_bases": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "X.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/packages/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/packages/backports/makefile.py": {
        "backport_makefile": {
            "name": "backport_makefile",
            "location": 13,
            "return": [
                "Union[(io.BufferedRWPair, io.BufferedReader, io.BufferedWriter, io.TextIOWrapper, socket.SocketIO)]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "list"
                ],
                "buffering": [
                    "int",
                    "bool",
                    "TextIO",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "encoding": [
                    "str",
                    "io.StringIO"
                ],
                "errors": [
                    "str",
                    "io.StringIO"
                ],
                "newline": [
                    "str",
                    "io.StringIO"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/packages/backports/__init__.py": {},
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/connection.py": {
        "is_connection_dropped": {
            "name": "is_connection_dropped",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Mapping",
                    "bool",
                    "Dict"
                ]
            }
        },
        "create_connection": {
            "name": "create_connection",
            "location": 37,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "address": [
                    "Tuple[Union[int,int]]",
                    "str",
                    "int",
                    "Tuple[int,int]"
                ],
                "timeout": [
                    "str",
                    "List[\"ItemShippingTarget\"]",
                    "Optional[str]",
                    "int"
                ],
                "source_address": [
                    "str",
                    "Iterable",
                    "None"
                ],
                "socket_options": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "_set_socket_options": {
            "name": "_set_socket_options",
            "location": 100,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "sock": [
                    "bool",
                    "str",
                    "tuple",
                    "Optional[str]"
                ],
                "options": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "allowed_gai_family": {
            "name": "allowed_gai_family",
            "location": 108,
            "return": [
                "int",
                "str",
                "Iterable[Iterable]",
                "Iterable",
                "float"
            ],
            "arguments": {}
        },
        "_has_ipv6": {
            "name": "_has_ipv6",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/proxy.py": {
        "connection_requires_http_tunnel": {
            "name": "connection_requires_http_tunnel",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "proxy_url": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[dict]",
                    "Dict[str,Any]"
                ],
                "proxy_config": [
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ],
                "destination_scheme": [
                    "Dict[str,Any]",
                    "None",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "create_proxy_ssl_context": {
            "name": "create_proxy_ssl_context",
            "location": 37,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "ssl_version": [
                    "str",
                    "int",
                    "Callable",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "str",
                    "int",
                    "Callable",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "ca_certs": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "ca_cert_dir": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "ca_cert_data": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/queue.py": {
        "LifoQueue._init": {
            "name": "_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "LifoQueue._qsize": {
            "name": "_qsize",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "len": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LifoQueue._put": {
            "name": "_put",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "Callable"
                ]
            }
        },
        "LifoQueue._get": {
            "name": "_get",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/request.py": {
        "make_headers": {
            "name": "make_headers",
            "location": 26,
            "return": [
                "Dict[Text,Union[None,bool,str,dict[str,list[str]]]]",
                "Dict[str,Any]",
                "Dict[str,Union[str,int]]",
                "Dict",
                "Dict[str,Dict[str,str]]",
                "List[dict]",
                "Dict[str,Type]",
                "str"
            ],
            "arguments": {
                "keep_alive": [
                    "bool",
                    "None",
                    "str",
                    "Type[T]",
                    "Type",
                    "Optional[int]"
                ],
                "accept_encoding": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "user_agent": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "int"
                ],
                "basic_auth": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "proxy_basic_auth": [
                    "str",
                    "None",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "disable_cache": [
                    "bool",
                    "None",
                    "str",
                    "Type[T]",
                    "Type",
                    "Optional[int]"
                ]
            }
        },
        "set_file_position": {
            "name": "set_file_position",
            "location": 98,
            "return": [
                "str",
                "None",
                "Type",
                "int"
            ],
            "arguments": {
                "body": [
                    "str",
                    "dict",
                    "Type['Declared']"
                ],
                "pos": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "rewind_body": {
            "name": "rewind_body",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,dict[str,Any]]",
                    "Literal",
                    "Dict[str,Dict[str,Any]]",
                    "str"
                ],
                "body_pos": [
                    "int",
                    "Dict",
                    "None",
                    "str",
                    "Optional[bool]",
                    "Optional[Union[int,str]]"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/response.py": {
        "is_fp_closed": {
            "name": "is_fp_closed",
            "location": 9,
            "return": [
                "bool",
                "Dict[str,int]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "assert_header_parsing": {
            "name": "assert_header_parsing",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "Optional[Sequence]",
                    "Callable"
                ]
            }
        },
        "is_response_to_head": {
            "name": "is_response_to_head",
            "location": 94,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "response": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/retry.py": {
        "_RetryMeta.DEFAULT_METHOD_WHITELIST": {
            "name": "DEFAULT_METHOD_WHITELIST",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "_RetryMeta.DEFAULT_REDIRECT_HEADERS_BLACKLIST": {
            "name": "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "_RetryMeta.BACKOFF_MAX": {
            "name": "BACKOFF_MAX",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "str",
                    "List"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "Retry.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Tuple[Any,int,Dict[str,str]]",
                    "Optional[bool]",
                    "Awaitable"
                ],
                "connect": [
                    "bool",
                    "None",
                    "List",
                    "Mapping[str,Any]",
                    "str",
                    "Mapping",
                    "Optional[Mapping]",
                    "int"
                ],
                "read": [
                    "str",
                    "None",
                    "int",
                    "List[T]",
                    "bytes",
                    "Iterable[Any]"
                ],
                "redirect": [
                    "bool",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "status": [
                    "bool",
                    "None",
                    "List",
                    "Mapping[str,Any]",
                    "str",
                    "Mapping",
                    "Optional[Mapping]",
                    "int"
                ],
                "other": [
                    "bool",
                    "None",
                    "str",
                    "bytes",
                    "Iterable[bytes]",
                    "float",
                    "int",
                    "Dict"
                ],
                "allowed_methods": [
                    "bool",
                    "Optional[Callable]"
                ],
                "status_forcelist": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "backoff_factor": [
                    "int",
                    "bool",
                    "Mapping[str,Any]",
                    "List",
                    "Optional[Mapping]",
                    "str"
                ],
                "raise_on_redirect": [
                    "bool",
                    "Optional[bool]"
                ],
                "raise_on_status": [
                    "bool",
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "history": [
                    "bool",
                    "None",
                    "List",
                    "Mapping[str,Any]",
                    "str",
                    "Mapping",
                    "Optional[Mapping]",
                    "int"
                ],
                "respect_retry_after_header": [
                    "bool",
                    "Mapping[str,Any]",
                    "List",
                    "Optional[Mapping]",
                    "str",
                    "int"
                ],
                "remove_headers_on_redirect": [
                    "Optional[str]",
                    "bool",
                    "Dict[int, str]"
                ],
                "method_whitelist": [
                    "bool",
                    "str",
                    "Callable[[], str]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Retry.new": {
            "name": "new",
            "location": 304,
            "return": [
                "str",
                "Tuple[str, str]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.from_int": {
            "name": "from_int",
            "location": 341,
            "return": [
                "Dict[str,Any]",
                "str",
                "Retry",
                "float",
                "Dict[str,str]",
                "Dict",
                "int",
                "Tuple[Union[str,str,str,str,str]]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Dict"
                ],
                "retries": [
                    "Tuple[List[str],Optional[Any],Optional[Any]]",
                    "Tuple[Union[list[str],Any,None,Any,None]]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "redirect": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Optional[Callable]",
                    "Tuple[List[str],Optional[str]]",
                    "Tuple[List[str],Optional[Any],Optional[Any]]"
                ],
                "default": [
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "Retry.get_backoff_time": {
            "name": "get_backoff_time",
            "location": 354,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.parse_retry_after": {
            "name": "parse_retry_after",
            "location": 371,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "retry_after": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Retry.get_retry_after": {
            "name": "get_retry_after",
            "location": 394,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Retry.sleep_for_retry": {
            "name": "sleep_for_retry",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Retry._sleep_backoff": {
            "name": "_sleep_backoff",
            "location": 412,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.sleep": {
            "name": "sleep",
            "location": 418,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "None"
                ]
            }
        },
        "Retry._is_connection_error": {
            "name": "_is_connection_error",
            "location": 434,
            "return": [
                "bool",
                "int",
                "Generator",
                "Dict[str,int]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "bool",
                    "int"
                ]
            }
        },
        "Retry._is_read_error": {
            "name": "_is_read_error",
            "location": 442,
            "return": [
                "Tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "Retry._is_method_retryable": {
            "name": "_is_method_retryable",
            "location": 448,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Retry.is_retry": {
            "name": "is_retry",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[int]",
                    "int",
                    "Tuple[str]",
                    "Optional[Node]",
                    "None"
                ],
                "status_code": [
                    "int"
                ],
                "has_retry_after": [
                    "bool",
                    "int",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "Retry.is_exhausted": {
            "name": "is_exhausted",
            "location": 488,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.increment": {
            "name": "increment",
            "location": 504,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "Dict[str,Any]",
                    "None"
                ],
                "url": [
                    "Optional[Dict]",
                    "str",
                    "None",
                    "bytes",
                    "Dict"
                ],
                "response": [],
                "error": [
                    "None",
                    "Exception",
                    "Optional[logging.Logger]",
                    "Type",
                    "werkzeug.exceptions.InternalServerError",
                    "Optional[Type[BaseException]]"
                ],
                "_pool": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Dict",
                    "Optional[Dict]",
                    "int"
                ],
                "_stacktrace": [
                    "Dict[str,Any]",
                    "None",
                    "Callable",
                    "str",
                    "logging.Logger",
                    "Dict",
                    "werkzeug.exceptions.BadRequest"
                ]
            }
        },
        "Retry.__repr__": {
            "name": "__repr__",
            "location": 598,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.__getattr__": {
            "name": "__getattr__",
            "location": 604,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict",
                    "List"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/ssltransport.py": {
        "SSLTransport._validate_ssl_context_for_tls_in_tls": {
            "name": "_validate_ssl_context_for_tls_in_tls",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "ssl_context": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SSLTransport.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "int",
                    "float",
                    "bool"
                ],
                "ssl_context": [
                    "str",
                    "bool",
                    "ssl.SSLContext"
                ],
                "server_hostname": [
                    "str",
                    "None",
                    "bool",
                    "ssl.SSLContext"
                ],
                "suppress_ragged_eofs": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "SSLTransport.__enter__": {
            "name": "__enter__",
            "location": 63,
            "return": [
                "SSLTransport"
            ],
            "arguments": {
                "self": [
                    "_TSSLTransport@@SSLTransport@@"
                ]
            }
        },
        "SSLTransport.__exit__": {
            "name": "__exit__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.fileno": {
            "name": "fileno",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.read": {
            "name": "read",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "len": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "List",
                    "Sequence[T]"
                ],
                "buffer": [
                    "List[int]",
                    "None",
                    "List[str]",
                    "List",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "SSLTransport.recv": {
            "name": "recv",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "len": [
                    "int",
                    "str",
                    "Type[T]"
                ],
                "flags": [
                    "int",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "SSLTransport.recv_into": {
            "name": "recv_into",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "bool",
                    "Optional[Callable]",
                    "Optional[float]",
                    "Optional[T]"
                ],
                "nbytes": [
                    "bool",
                    "None",
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "flags": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SSLTransport.sendall": {
            "name": "sendall",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "Exception",
                    "str",
                    "Sequence[str]",
                    "Match[str]",
                    "Match"
                ],
                "flags": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "SSLTransport.send": {
            "name": "send",
            "location": 99,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "flags": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "SSLTransport.makefile": {
            "name": "makefile",
            "location": 105,
            "return": [
                "Union[(io.BufferedRWPair, io.BufferedReader, io.BufferedWriter, io.TextIOWrapper, socket.SocketIO)]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "Text",
                    "str",
                    "int",
                    "bool",
                    "List",
                    "Optional[float]"
                ],
                "buffering": [
                    "int",
                    "None",
                    "TextIO",
                    "bool",
                    "bytes"
                ],
                "encoding": [
                    "str",
                    "None",
                    "io.StringIO"
                ],
                "errors": [
                    "str",
                    "None",
                    "io.StringIO"
                ],
                "newline": [
                    "str",
                    "None",
                    "io.StringIO"
                ]
            }
        },
        "SSLTransport.unwrap": {
            "name": "unwrap",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.close": {
            "name": "close",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.getpeercert": {
            "name": "getpeercert",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "binary_form": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "SSLTransport.version": {
            "name": "version",
            "location": 159,
            "return": [
                "Callable[[T], bool]",
                "List[Union[int, Any]]",
                "List[Union[int, str]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.cipher": {
            "name": "cipher",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.selected_alpn_protocol": {
            "name": "selected_alpn_protocol",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.selected_npn_protocol": {
            "name": "selected_npn_protocol",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.shared_ciphers": {
            "name": "shared_ciphers",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.compression": {
            "name": "compression",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport.settimeout": {
            "name": "settimeout",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str,bytes]"
                ]
            }
        },
        "SSLTransport.gettimeout": {
            "name": "gettimeout",
            "location": 180,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport._decref_socketios": {
            "name": "_decref_socketios",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLTransport._wrap_ssl_read": {
            "name": "_wrap_ssl_read",
            "location": 186,
            "return": [
                "int",
                "str",
                "io.StringIO",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "len": [
                    "bool",
                    "str",
                    "List[float]"
                ],
                "buffer": [
                    "bool",
                    "str",
                    "None",
                    "List[float]"
                ]
            }
        },
        "SSLTransport._ssl_io_loop": {
            "name": "_ssl_io_loop",
            "location": 195,
            "return": [
                "None",
                "List[str]",
                "bool",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/ssl_.py": {
        "_const_compare_digest_backport": {
            "name": "_const_compare_digest_backport",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "list",
                    "Sequence[int]"
                ],
                "b": [
                    "str",
                    "int",
                    "list",
                    "Sequence[int]"
                ]
            }
        },
        "assert_fingerprint": {
            "name": "assert_fingerprint",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fingerprint": [
                    "str",
                    "int"
                ]
            }
        },
        "resolve_cert_reqs": {
            "name": "resolve_cert_reqs",
            "location": 211,
            "return": [
                "str",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "candidate": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[int]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "resolve_ssl_version": {
            "name": "resolve_ssl_version",
            "location": 234,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "candidate": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[T]",
                    "Optional[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "create_urllib3_context": {
            "name": "create_urllib3_context",
            "location": 250,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "ssl_version": [
                    "str"
                ],
                "cert_reqs": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "options": [
                    "str"
                ],
                "ciphers": [
                    "str"
                ]
            }
        },
        "ssl_wrap_socket": {
            "name": "ssl_wrap_socket",
            "location": 355,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sock": [
                    "int",
                    "str"
                ],
                "keyfile": [
                    "float"
                ],
                "certfile": [
                    "int",
                    "Mapping[str, Any]",
                    "bytearray"
                ],
                "cert_reqs": [
                    "AbstractSet[str]"
                ],
                "ca_certs": [
                    "bool",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "server_hostname": [
                    "Callable"
                ],
                "ssl_version": [
                    "AbstractSet[str]"
                ],
                "ciphers": [
                    "AbstractSet[str]"
                ],
                "ssl_context": [
                    "bool",
                    "List[str]"
                ],
                "ca_cert_dir": [
                    "bool",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "key_password": [
                    "Optional[complex]",
                    "Set[str]"
                ],
                "ca_cert_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "tls_in_tls": [
                    "int",
                    "str"
                ]
            }
        },
        "is_ipaddress": {
            "name": "is_ipaddress",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "hostname": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "_is_key_file_encrypted": {
            "name": "_is_key_file_encrypted",
            "location": 470,
            "return": [
                "bool"
            ],
            "arguments": {
                "key_file": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "TextIO",
                    "IO[Any]"
                ]
            }
        },
        "_ssl_wrap_socket_impl": {
            "name": "_ssl_wrap_socket_impl",
            "location": 481,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sock": [
                    "str",
                    "int",
                    "Callable"
                ],
                "ssl_context": [
                    "float"
                ],
                "tls_in_tls": [
                    "bool",
                    "Dict[str, int]",
                    "str"
                ],
                "server_hostname": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "create_urllib3_context.disable_check_hostname": {
            "name": "disable_check_hostname",
            "location": 325,
            "return": [],
            "arguments": {}
        },
        "SSLContext.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "protocol_version": [
                    "bool",
                    "tuple",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SSLContext.load_cert_chain": {
            "name": "load_cert_chain",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "certfile": [
                    "str",
                    "bool"
                ],
                "keyfile": [
                    "str",
                    "bool"
                ]
            }
        },
        "SSLContext.load_verify_locations": {
            "name": "load_verify_locations",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "cafile": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ],
                "capath": [
                    "Optional[str]",
                    "str",
                    "list"
                ],
                "cadata": [
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        },
        "SSLContext.set_ciphers": {
            "name": "set_ciphers",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "cipher_suite": [
                    "bool",
                    "float"
                ]
            }
        },
        "SSLContext.wrap_socket": {
            "name": "wrap_socket",
            "location": 161,
            "return": [
                "ssl.SSLSocket"
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "str",
                    "int",
                    "BinaryIO",
                    "bool"
                ],
                "server_hostname": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "server_side": [
                    "bool"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/ssl_match_hostname.py": {
        "_dnsname_match": {
            "name": "_dnsname_match",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "dn": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "max_wildcards": [
                    "int",
                    "float"
                ]
            }
        },
        "_to_unicode": {
            "name": "_to_unicode",
            "location": 79,
            "return": [
                "float",
                "Dict[str,bool]",
                "str",
                "Dict",
                "List[str]",
                "int",
                "Counter",
                "Deque"
            ],
            "arguments": {
                "obj": [
                    "Dict[str,bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_ipaddress_match": {
            "name": "_ipaddress_match",
            "location": 86,
            "return": [
                "bool",
                "Callable[[T],bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "ipname": [
                    "str",
                    "bytes"
                ],
                "host_ip": [
                    "Callable[[T],bool]",
                    "Iterable[T]",
                    "Callable[T,bool]"
                ]
            }
        },
        "match_hostname": {
            "name": "match_hostname",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "int"
                ],
                "hostname": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/timeout.py": {
        "Timeout.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "connect": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "read": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Timeout.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout._validate_timeout": {
            "name": "_validate_timeout",
            "location": 120,
            "return": [
                "str",
                "Union[int,float]",
                "bool",
                "_Default"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Callable[[dict],None]",
                    "Callable[dict,None]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Timeout.from_float": {
            "name": "from_float",
            "location": 166,
            "return": [
                "Timeout"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[...,None]",
                    "Sequence[Any]",
                    "bool",
                    "List[dict]",
                    "Callable",
                    "List[Dict]"
                ],
                "timeout": [
                    "bytes",
                    "memoryview",
                    "str",
                    "AnyStr",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "Timeout.clone": {
            "name": "clone",
            "location": 181,
            "return": [
                "Timeout",
                "str",
                "int",
                "List[dict]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.start_connect": {
            "name": "start_connect",
            "location": 195,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "float",
                "Callable",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.get_connect_duration": {
            "name": "get_connect_duration",
            "location": 206,
            "return": [
                "int",
                "Type[T]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.connect_timeout": {
            "name": "connect_timeout",
            "location": 221,
            "return": [
                "int",
                "None",
                "List[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.read_timeout": {
            "name": "read_timeout",
            "location": 239,
            "return": [
                "int",
                "Optional[int]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/url.py": {
        "split_first": {
            "name": "split_first",
            "location": 175,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "AbstractSet[Any]",
                    "AbstractSet[T]"
                ],
                "delims": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_encode_invalid_chars": {
            "name": "_encode_invalid_chars",
            "location": 210,
            "return": [
                "str",
                "None",
                "bool"
            ],
            "arguments": {
                "component": [
                    "str",
                    "Union[str,int]",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "allowed_chars": [
                    "str",
                    "bytes",
                    "AnyStr"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "_remove_path_dot_segments": {
            "name": "_remove_path_dot_segments",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_normalize_host": {
            "name": "_normalize_host",
            "location": 274,
            "return": [
                "str",
                "int",
                "bool",
                "bytes",
                "Sequence[cirq.Qid]"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "bytes"
                ],
                "scheme": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_idna_encode": {
            "name": "_idna_encode",
            "location": 302,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[bytes]"
                ]
            }
        },
        "_encode_target": {
            "name": "_encode_target",
            "location": 320,
            "return": [
                "List[str]",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "target": [
                    "int"
                ]
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 330,
            "return": [
                "Url",
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Callable[[str],str]"
                ]
            }
        },
        "get_host": {
            "name": "get_host",
            "location": 427,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "Url.__new__": {
            "name": "__new__",
            "location": 91,
            "return": [
                "Url"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUrl]"
                ],
                "scheme": [
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "Optional[Dict]",
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[Union[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[List[Any]]",
                    "Any"
                ],
                "auth": [
                    "str",
                    "None"
                ],
                "host": [
                    "str",
                    "None"
                ],
                "port": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "Dict",
                    "Optional[str]"
                ],
                "query": [
                    "str",
                    "None"
                ],
                "fragment": [
                    "str",
                    "None"
                ]
            }
        },
        "Url.hostname": {
            "name": "hostname",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.request_uri": {
            "name": "request_uri",
            "location": 115,
            "return": [
                "Text",
                "Mapping[str,Any]",
                "str",
                "Callable",
                "Callable[[None,None],bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.netloc": {
            "name": "netloc",
            "location": 125,
            "return": [
                "Text",
                "str",
                "float",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.url": {
            "name": "url",
            "location": 132,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.__str__": {
            "name": "__str__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_url.ensure_type": {
            "name": "ensure_type",
            "location": 413,
            "return": [
                "None",
                "bool",
                "Dict",
                "Optional[Callable[[bool],None]]"
            ],
            "arguments": {
                "x": [
                    "List[\"Block\"]",
                    "str"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/wait.py": {
        "select_wait_for_socket": {
            "name": "select_wait_for_socket",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "sock": [
                    "List",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "read": [
                    "bool",
                    "int",
                    "Iterable[List[str]]",
                    "float",
                    "Tuple[int]"
                ],
                "write": [
                    "bool",
                    "int",
                    "Iterable[List[str]]",
                    "float",
                    "Tuple[int]"
                ],
                "timeout": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "poll_wait_for_socket": {
            "name": "poll_wait_for_socket",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "sock": [
                    "bool",
                    "Iterable[T]",
                    "str",
                    "int",
                    "List[int]"
                ],
                "read": [
                    "bool",
                    "Iterable[T]",
                    "str",
                    "int",
                    "List[int]"
                ],
                "write": [
                    "bool",
                    "Iterable[T]",
                    "str",
                    "int",
                    "List[int]"
                ],
                "timeout": [
                    "int",
                    "None",
                    "float",
                    "Iterable[List[str]]",
                    "Iterable[list[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "null_wait_for_socket": {
            "name": "null_wait_for_socket",
            "location": 110,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "_have_working_poll": {
            "name": "_have_working_poll",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "wait_for_socket": {
            "name": "wait_for_socket",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "wait_for_read": {
            "name": "wait_for_read",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "sock": [
                    "bool",
                    "List[str]",
                    "Callable[Any,None]",
                    "str",
                    "Callable[[Any],None]",
                    "int"
                ],
                "timeout": [
                    "bool",
                    "None",
                    "Callable[[Any],None]",
                    "List[str]",
                    "str",
                    "int",
                    "Callable[Any,None]"
                ]
            }
        },
        "wait_for_write": {
            "name": "wait_for_write",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "sock": [
                    "str",
                    "bool",
                    "float",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_retry_on_intr": {
            "name": "_retry_on_intr",
            "location": 48,
            "return": [
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "float"
                ],
                "timeout": [
                    "Optional[float]",
                    "float",
                    "Optional[Dict]",
                    "None",
                    "Dict"
                ]
            }
        },
        "poll_wait_for_socket.do_poll": {
            "name": "do_poll",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "T",
                    "int"
                ]
            }
        }
    },
    "Sublime-Fanhuaji-st4/plugin/libs/urllib3/util/__init__.py": {}
}
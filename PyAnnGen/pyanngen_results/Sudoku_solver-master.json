{
    "Sudoku_solver-master/doc/source/conf.py": {},
    "Sudoku_solver-master/sudoku_solver/Digits_extractor.py": {
        "_pre_process_image": {
            "name": "_pre_process_image",
            "location": 7,
            "return": [
                "numpy.ndarray",
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "img": [
                    "numpy.ndarray",
                    "str",
                    "IO[Any]"
                ],
                "skip_dilate": [
                    "bool",
                    "float"
                ]
            }
        },
        "_find_corners_of_largest_polygon": {
            "name": "_find_corners_of_largest_polygon",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "img": [
                    "list[]",
                    "int",
                    "dict[, ]",
                    "Optional[List]",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "_distance_between": {
            "name": "_distance_between",
            "location": 52,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "p1": [
                    "str",
                    "int",
                    "dict",
                    "float",
                    "bool"
                ],
                "p2": [
                    "str",
                    "int",
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "_crop_and_warp": {
            "name": "_crop_and_warp",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "str",
                    "int",
                    "bool"
                ],
                "crop_rect": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "_infer_grid": {
            "name": "_infer_grid",
            "location": 86,
            "return": [
                "List[Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]]"
            ],
            "arguments": {
                "img": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_cut_from_rect": {
            "name": "_cut_from_rect",
            "location": 101,
            "return": [
                "str",
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "img": [
                    "str",
                    "int"
                ],
                "rect": [
                    "str",
                    "int"
                ]
            }
        },
        "_scale_and_centre": {
            "name": "_scale_and_centre",
            "location": 106,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "img": [
                    "int",
                    "str"
                ],
                "size": [
                    "int",
                    "float",
                    "bytearray"
                ],
                "margin": [
                    "int"
                ],
                "background": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "bool",
                    "str"
                ]
            }
        },
        "_find_largest_feature": {
            "name": "_find_largest_feature",
            "location": 141,
            "return": [
                "Tuple[(Any, np.ndarray, Tuple[(Optional[int], Optional[int])])]"
            ],
            "arguments": {
                "inp_img": [
                    "set[]",
                    "int",
                    "set",
                    "str"
                ],
                "scan_tl": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[float]",
                    "float",
                    "Union[str, int]",
                    "str"
                ],
                "scan_br": [
                    "int",
                    "None",
                    "float",
                    "slice",
                    "Optional[int]"
                ]
            }
        },
        "_extract_digit": {
            "name": "_extract_digit",
            "location": 198,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "img": [
                    "int",
                    "typing.Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "rect": [
                    "int",
                    "typing.Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "_get_digits": {
            "name": "_get_digits",
            "location": 221,
            "return": [
                "list"
            ],
            "arguments": {
                "img": [
                    "list[]",
                    "int",
                    "float",
                    "str",
                    "list"
                ],
                "squares": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "size": [
                    "str",
                    "float",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ]
            }
        },
        "parse_grid": {
            "name": "parse_grid",
            "location": 230,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "int"
                ]
            }
        },
        "digits_to_board": {
            "name": "digits_to_board",
            "location": 252,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "digits": [
                    "str",
                    "int",
                    "list[int]",
                    "list[list[str]]",
                    "float",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "get_board": {
            "name": "get_board",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_scale_and_centre.centre_pad": {
            "name": "centre_pad",
            "location": 110,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "Iterator"
                ]
            }
        },
        "_scale_and_centre.scale": {
            "name": "scale",
            "location": 120,
            "return": [
                "int",
                "List[str]",
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "r": [
                    "int",
                    "numpy.ndarray"
                ],
                "x": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "Sudoku_solver-master/sudoku_solver/Draw_png.py": {
        "construct_grid_image": {
            "name": "construct_grid_image",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "typing.Text"
                ],
                "width": [
                    "int",
                    "Sequence[int]",
                    "Callable",
                    "str",
                    "Optional[Dict]",
                    "bool"
                ],
                "height": [
                    "int",
                    "Sequence[int]",
                    "Callable",
                    "str",
                    "Optional[Dict]",
                    "bool"
                ],
                "fontsize": [
                    "bytes",
                    "dict",
                    "Optional[Any]",
                    "Optional[dict]",
                    "int"
                ]
            }
        }
    },
    "Sudoku_solver-master/sudoku_solver/Solve.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Sudoku_solver-master/sudoku_solver/Solver.py": {
        "solve_sudoku": {
            "name": "solve_sudoku",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "img": [
                    "str",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "output_name": [
                    "str"
                ],
                "output_path": [
                    "str"
                ]
            }
        }
    },
    "Sudoku_solver-master/sudoku_solver/__init__.py": {},
    "Sudoku_solver-master/tests/full_test.py": {
        "TestWorkingSudokus.test_full": {
            "name": "test_full",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
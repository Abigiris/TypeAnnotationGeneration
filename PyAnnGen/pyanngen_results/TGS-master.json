{
    "TGS-master/examples/regression_train.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "TGS-master/examples/score_model.py": {},
    "TGS-master/examples/train_formation.py": {},
    "TGS-master/examples/train_model.py": {},
    "TGS-master/lognet/__init__.py": {},
    "TGS-master/lognet/loader/structured_data_loader.py": {
        "create_lazy_loaders": {
            "name": "create_lazy_loaders",
            "location": 65,
            "return": [
                "List[LazyCSVDataset]",
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "root_path": [
                    "List",
                    "List[str]",
                    "str"
                ],
                "header_file": [
                    "List",
                    "List[str]",
                    "str"
                ],
                "file_list": [
                    "str",
                    "Iterable[Optional[Any]]",
                    "bool",
                    "List[str]"
                ],
                "response_features": [
                    "List",
                    "List[str]",
                    "str"
                ]
            }
        },
        "LazyCSVDataset.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_file": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "filename": [
                    "str",
                    "IO[Any]",
                    "Optional[str]"
                ],
                "response_features": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Tuple[str,str]"
                ]
            }
        },
        "LazyCSVDataset.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [
                "Tuple[str]",
                "Optional[numpy.ndarray]",
                "numpy.ndarray",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "LazyCSVDataset.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredDataset.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "header_file": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "file_list": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "response_features": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "StructuredDataset.__getitem__": {
            "name": "__getitem__",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StructuredDataset.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredDataset.get_record_lengths": {
            "name": "get_record_lengths",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TGS-master/lognet/loader/__init__.py": {},
    "TGS-master/lognet/models/ModelFactory.py": {
        "ModelFactory.select": {
            "name": "select",
            "location": 10,
            "return": [
                "str",
                "TorchNN",
                "RandomForest",
                "GradientBoost",
                "MultilayerPerceptron",
                "GeneralizedAdditive",
                "GradientBoostClass"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "model_path": [
                    "Literal",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "None",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "model_type": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "model_params": [
                    "Literal",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "None",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ModelFactory.load": {
            "name": "load",
            "location": 25,
            "return": [
                "str",
                "TextIO",
                "TorchNN",
                "BinaryIO",
                "RandomForest",
                "GradientBoost",
                "MultilayerPerceptron",
                "GeneralizedAdditive",
                "GradientBoostClass"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "MutableSequence",
                    "str",
                    "MutableSequence[str]",
                    "Type",
                    "Type[object]",
                    "int"
                ],
                "model_type": [
                    "bool",
                    "MutableSequence",
                    "str",
                    "MutableSequence[str]",
                    "Type",
                    "Type[object]",
                    "int"
                ],
                "model_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "TGS-master/lognet/models/SmartModel.py": {
        "SmartModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartModel._regression_error": {
            "name": "_regression_error",
            "location": 23,
            "return": [
                "Callable[[Exception], bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "X_valid": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "y_valid": [
                    "str",
                    "List",
                    "Set[str]"
                ],
                "model": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SmartModel._classification_error": {
            "name": "_classification_error",
            "location": 27,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "X_valid": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "y_valid": [
                    "Dict",
                    "bytes",
                    "torch.nn.Module"
                ],
                "model": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SmartModel.train": {
            "name": "train",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "List",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "training_data": [],
                "validation_data": [
                    "bytes",
                    "int",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "features": [
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]"
                ],
                "target": [
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Dict[str,Any]",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]",
                    "BaseException"
                ]
            }
        },
        "SmartModel.predict": {
            "name": "predict",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "List[int]",
                    "bool",
                    "int",
                    "float"
                ],
                "features": [
                    "Dict[str, object]"
                ],
                "target": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "RandomForest.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GradientBoost.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GradientBoost.train": {
            "name": "train",
            "location": 90,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "training_data": [
                    "str",
                    "bytes",
                    "List",
                    "bool",
                    "Dict"
                ],
                "validation_data": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "features": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[int, Dict[int, Any]]",
                    "List[dict]"
                ],
                "target": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[int, Dict[int, Any]]",
                    "List[dict]"
                ]
            }
        },
        "MultilayerPerceptron.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GeneralizedAdditive.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GradientBoostClass.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "TGS-master/lognet/models/structured_models.py": {
        "initialize_embedding": {
            "name": "initialize_embedding",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Tuple[float]"
                ]
            }
        },
        "DenseModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_sizes": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "None",
                    "Optional[List[int]]",
                    "Optional[int]"
                ],
                "n_continuous_variables": [
                    "int",
                    "float",
                    "bool"
                ],
                "embedding_dropout": [
                    "float",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "output_size": [
                    "int",
                    "bool"
                ],
                "layer_sizes": [
                    "int",
                    "float"
                ],
                "linear_layer_dropouts": [
                    "List[str]",
                    "List",
                    "int",
                    "Sequence[Sequence[float]]",
                    "float"
                ],
                "output_range": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "Callable"
                ],
                "use_batchnorm": [
                    "bool",
                    "Optional[str]"
                ],
                "is_regression": [
                    "bool",
                    "float",
                    "Optional[List[Any]]"
                ],
                "is_multilabel": [
                    "bool",
                    "float",
                    "Optional[List[Any]]"
                ]
            }
        },
        "DenseModel.forward": {
            "name": "forward",
            "location": 69,
            "return": [
                "str",
                "float",
                "complex",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "input_continuous": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input_categorical": [
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "TGS-master/lognet/models/TorchNN.py": {
        "TorchNN.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "TorchNN.train": {
            "name": "train",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_data": [
                    "bytes",
                    "bool",
                    "raiden.utils.Address"
                ],
                "validation_data": [
                    "bool",
                    "bytes",
                    "raiden.utils.Address"
                ]
            }
        },
        "TorchNN.predict": {
            "name": "predict",
            "location": 98,
            "return": [
                "List",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "bytes",
                    "int",
                    "torch.Tensor",
                    "raiden.utils.Dict[str,raiden.utils.Any]"
                ]
            }
        }
    },
    "TGS-master/lognet/models/__init__.py": {},
    "TGS-master/lognet/preprocess/DataPrep.py": {
        "DataPrep.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DataPrep._smooth": {
            "name": "_smooth",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "str",
                    "List",
                    "Type",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "feature_names": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "Iterator[int]",
                    "int"
                ],
                "window_length": [
                    "str",
                    "Dict"
                ]
            }
        },
        "DataPrep._shift": {
            "name": "_shift",
            "location": 20,
            "return": [
                "List",
                "str",
                "Optional[Union[str,Any]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "str",
                    "bool",
                    "pandas.DataFrame",
                    "int"
                ],
                "feature_names": [
                    "List",
                    "bool",
                    "int",
                    "str",
                    "pandas.Index"
                ],
                "shift_size": [
                    "int"
                ]
            }
        },
        "DataPrep._compute_log": {
            "name": "_compute_log",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "bool",
                    "Optional[pandas.DataFrame]",
                    "float"
                ],
                "feature": [
                    "bool",
                    "Optional[pandas.DataFrame]",
                    "float"
                ]
            }
        },
        "DataPrep._compute_cube": {
            "name": "_compute_cube",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "str",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "feature": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "DataPrep._apply_transform": {
            "name": "_apply_transform",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "List[int]",
                    "bytes"
                ],
                "feature_names": [
                    "List[tuple[Union[str,Any]]]",
                    "List[str]",
                    "str",
                    "bool",
                    "List[numpy.ndarray]",
                    "List[List[Any]]",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "DataPrep._create_features": {
            "name": "_create_features",
            "location": 48,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "las_data": [
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, bool]",
                    "Dict[str, List[Any]]",
                    "bytes"
                ],
                "info_dict": [
                    "Tuple[dict, dict]",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "features": [
                    "List[dict]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict]",
                    "List[Dict[str,Any]]"
                ],
                "targets": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "pandas.DataFrame"
                ],
                "keep_location": [
                    "bool",
                    "str",
                    "float"
                ],
                "smoothing_window": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str,List[str]]"
                ],
                "n": [
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "numpy.array"
                ]
            }
        },
        "DataPrep.generateFeatures": {
            "name": "generateFeatures",
            "location": 116,
            "return": [
                "str",
                "int",
                "Callable",
                "List[str]",
                "Dict",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "las_data": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "info_dict": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "feature_keys": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "target_keys": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "keep_location": [
                    "bool",
                    "bytes",
                    "str",
                    "Union[str,bytes]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "TGS-master/lognet/preprocess/data_prep.py": {
        "LAStoCSV.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "las_folder_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "metadata_df": [
                    "str",
                    "List[str]"
                ],
                "transforms": [
                    "Dict[str,str]",
                    "None",
                    "bytes",
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "Iterable[str]"
                ]
            }
        },
        "LAStoCSV._create_features": {
            "name": "_create_features",
            "location": 44,
            "return": [
                "None",
                "Optional[bool]",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "las_filename": [
                    "bool",
                    "List[str]",
                    "str",
                    "float"
                ],
                "features": [
                    "list",
                    "Dict[int, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Sequence[dict]",
                    "Optional[Sequence[Any]]",
                    "List[Tuple[str, str]]"
                ],
                "targets": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "smoothing_window": [
                    "int",
                    "bool",
                    "Tuple[str,str]",
                    "str",
                    "Dict[str,Callable]",
                    "List[Tuple[int,int]]"
                ],
                "n": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "LAStoCSV._create_feature_list": {
            "name": "_create_feature_list",
            "location": 117,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "List",
                "bool",
                "Union[str,List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Dict[str,dict[str,int]]",
                    "int",
                    "str",
                    "Dict[int,int]",
                    "Dict[str,Dict[str,int]]",
                    "List[dict]",
                    "Dict[str,Any]",
                    "List[Dict]"
                ],
                "n": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "LAStoCSV._apply_transformation": {
            "name": "_apply_transformation",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features_df": [
                    "Dict"
                ],
                "features": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, List]",
                    "FrozenSet[int]"
                ],
                "targets": [
                    "numpy.ndarray",
                    "keras.utils.Sequence",
                    "int"
                ]
            }
        },
        "LAStoCSV.to_csv": {
            "name": "to_csv",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]",
                    "Union[None,str,List[str]]",
                    "List[str]"
                ],
                "feature_curves": [
                    "List[str]",
                    "int",
                    "Union[str,List[str]]",
                    "Optional[List[str]]",
                    "numpy.ndarray",
                    "Sequence[T]"
                ],
                "target_curves": [
                    "List[str]",
                    "Union[str,List[str]]",
                    "List",
                    "Optional[int]",
                    "bool",
                    "Union[bool,List,Tuple]"
                ],
                "n": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "smoothing_window": [
                    "int",
                    "str",
                    "pandas.core.series.Series",
                    "float"
                ],
                "debug": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Union[bool,List[bool]]"
                ],
                "keep_location": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "TGS-master/lognet/preprocess/FormationPrep.py": {
        "FormationPrep.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basins": [
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict",
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "Dict[str,str]",
                    "bool",
                    "Dict[str,Type[Any]]",
                    "Dict[str,Type]"
                ],
                "formations": [
                    "dict",
                    "numpy.ndarray",
                    "Optional[bytes]",
                    "pandas.DataFrame",
                    "List[Dict]"
                ],
                "column_names": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Optional[List[Any]]",
                    "None",
                    "List[Any]"
                ],
                "depth_bins": [
                    "str",
                    "Mapping",
                    "bool",
                    "Optional[Mapping]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "pandas.DataFrame"
                ]
            }
        },
        "FormationPrep.generateBinSum": {
            "name": "generateBinSum",
            "location": 20,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "las_data": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "info_dict": [
                    "Iterable[str]",
                    "List[str]",
                    "bytes",
                    "Dict[int, Dict[str, Any]]",
                    "list",
                    "int",
                    "Dict[str, Set[int]]"
                ],
                "basin_name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "FormationPrep.finalizeBinMean": {
            "name": "finalizeBinMean",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormationPrep.fillMissingValues": {
            "name": "fillMissingValues",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_df": [
                    "str",
                    "bool"
                ],
                "basin_name": [
                    "int",
                    "Dict"
                ]
            }
        },
        "FormationPrep.getNumFormations": {
            "name": "getNumFormations",
            "location": 71,
            "return": [
                "int",
                "Dict[str,bool]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormationPrep.addLatitudeLongitude": {
            "name": "addLatitudeLongitude",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "features_df": [
                    "str",
                    "int",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "Tuple[Union[float,float,float]]",
                    "Tuple[float,float,float]"
                ],
                "individual_uwi_df_unsorted": [
                    "str",
                    "Tuple[Union[float,float,float]]",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "int",
                    "Tuple[float,float,float]"
                ]
            }
        },
        "FormationPrep.assembleFormations": {
            "name": "assembleFormations",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features_df": [
                    "Union[int, float]",
                    "FrozenSet[int]"
                ],
                "individual_uwi_df_unsorted": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FormationPrep.computeLog": {
            "name": "computeLog",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_df": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "column_names": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        }
    },
    "TGS-master/lognet/preprocess/utils.py": {
        "LASFileUWIMapper.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "las_folder_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "LASFileUWIMapper.__len__": {
            "name": "__len__",
            "location": 28,
            "return": [
                "int",
                "str",
                "List[Dict]",
                "List",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LASFileUWIMapper.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [
                "None",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "uwi": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "TGS-master/lognet/preprocess/__init__.py": {},
    "TGS-master/lognet/utilities/AnalyseResults.py": {
        "Perform_analysis.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perform_analysis.error_rmse": {
            "name": "error_rmse",
            "location": 29,
            "return": [
                "str",
                "int",
                "Set",
                "Dict[str,Union[bool,str]]",
                "bool",
                "List[str]",
                "List[int]",
                "Pattern",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "preddata": [
                    "numpy.ndarray",
                    "numpy.array",
                    "bool",
                    "Sequence[str]"
                ],
                "level": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Perform_analysis.error_mape": {
            "name": "error_mape",
            "location": 36,
            "return": [
                "str",
                "int",
                "Set",
                "Dict[str,Union[bool,str]]",
                "bool",
                "List[str]",
                "List[int]",
                "Pattern",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "preddata": [
                    "str",
                    "bool",
                    "numpy.array"
                ],
                "level": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Perform_analysis.analysis": {
            "name": "analysis",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "preddata": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "level": [
                    "bool",
                    "List",
                    "Exception",
                    "Union[bool,List,Tuple]",
                    "Tuple",
                    "pandas._FilePathOrBuffer[AnyStr]",
                    "pandas._StorageOptions",
                    "pandas.DataFrame"
                ],
                "top_count": [
                    "int",
                    "float",
                    "str",
                    "Optional[Union[int,str]]",
                    "None"
                ],
                "error": [
                    "str",
                    "bool",
                    "Exception",
                    "IO"
                ]
            }
        }
    },
    "TGS-master/lognet/utilities/FileInput.py": {
        "FileInput.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "las_folder_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "csv_file": [
                    "str",
                    "int"
                ]
            }
        },
        "FileInput._readFiles": {
            "name": "_readFiles",
            "location": 26,
            "return": [
                "Tuple[list]",
                "str",
                "int",
                "Optional[Dict[str,Any]]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInput.generateFileList": {
            "name": "generateFileList",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_list": [
                    "bytes",
                    "int",
                    "Tuple[Union[bytes,str]]",
                    "pandas.Index",
                    "Tuple[Union[int,int,bytearray]]",
                    "Tuple[bytes,str]",
                    "Tuple[int,int,bytearray]"
                ],
                "target_list": [
                    "bytes",
                    "int",
                    "Tuple[Union[bytes,str]]",
                    "pandas.Index",
                    "Tuple[Union[int,int,bytearray]]",
                    "Tuple[bytes,str]",
                    "Tuple[int,int,bytearray]"
                ]
            }
        },
        "FileInput.generateFormationList": {
            "name": "generateFormationList",
            "location": 58,
            "return": [
                "Tuple",
                "str",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "feature_list": [
                    "Tuple",
                    "List[str]",
                    "Selector"
                ]
            }
        },
        "FileInput.getFilePath": {
            "name": "getFilePath",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInput.getFileList": {
            "name": "getFileList",
            "location": 80,
            "return": [
                "str",
                "Optional[bytes]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInput.getFileInfo": {
            "name": "getFileInfo",
            "location": 83,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "FileInput.getFormationInfo": {
            "name": "getFormationInfo",
            "location": 86,
            "return": [
                "str",
                "bool",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "TGS-master/lognet/utilities/FileOutput.py": {
        "FileOutput.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_file_path": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "FileOutput._writeHeader": {
            "name": "_writeHeader",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_list": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "FileOutput.write_csv": {
            "name": "write_csv",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "file_data": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "FileOutput.getFilePath": {
            "name": "getFilePath",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TGS-master/lognet/utilities/LASOutput.py": {
        "LASOutput.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_path": [
                    "str",
                    "BinaryIO",
                    "os.PathLike"
                ]
            }
        },
        "LASOutput.write_las": {
            "name": "write_las",
            "location": 28,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "processed_df": [
                    "str",
                    "pandas.core.frame.DataFrame",
                    "pandas.DataFrame",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "filename": [
                    "str"
                ],
                "location": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "TGS-master/lognet/utilities/Plotting.py": {
        "get_formation_patterns": {
            "name": "get_formation_patterns",
            "location": 30,
            "return": [
                "Tuple[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "formation_code": [
                    "str",
                    "int",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "plot_formation_bars": {
            "name": "plot_formation_bars",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "axes": [
                    "str"
                ],
                "depths": [
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "int",
                    "Union[int,float]",
                    "List[Tuple[int,int]]",
                    "Union[numpy.ndarray,xarray.DataArray]"
                ],
                "formations": [
                    "float",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "plot_curves": {
            "name": "plot_curves",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "bool"
                ],
                "depths": [
                    "List[int]",
                    "int",
                    "numpy.ndarray"
                ],
                "curve": [
                    "bool",
                    "numpy.array",
                    "numpy.ndarray",
                    "int"
                ],
                "curve_title": [
                    "int",
                    "Tuple[numpy.dtype]",
                    "None"
                ],
                "color": [
                    "typing.Text"
                ],
                "tick_labels": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "plot_composite": {
            "name": "plot_composite",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "plot_curves": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "figure_size": [
                    "Tuple[int]",
                    "int",
                    "Tuple[int,int]",
                    "List"
                ]
            }
        }
    },
    "TGS-master/lognet/utilities/PlottingMissingCurve.py": {
        "Create_plots.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "List[str]",
                    "bool",
                    "Union[str,List[str]]",
                    "str"
                ],
                "target": [
                    "List[int]",
                    "bool",
                    "int",
                    "Dict"
                ],
                "minmax_dict": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "Create_plots.plot_missing_curve_prediction": {
            "name": "plot_missing_curve_prediction",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "plotdata": [
                    "List[numpy.ndarray]",
                    "OrderedDict",
                    "Dict"
                ]
            }
        },
        "Create_plots.plots": {
            "name": "plots",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "plotdata": [
                    "str",
                    "List[int]",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "TGS-master/lognet/utilities/__init__.py": {},
    "TGS-master/LogNet-master/LogNet-master/setup.py": {},
    "TGS-master/LogNet-master/LogNet-master/examples/generate_allmodels.py": {},
    "TGS-master/LogNet-master/LogNet-master/examples/generate_features.py": {},
    "TGS-master/LogNet-master/LogNet-master/examples/regression_train.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/examples/score_model.py": {},
    "TGS-master/LogNet-master/LogNet-master/examples/train_formation.py": {},
    "TGS-master/LogNet-master/LogNet-master/examples/train_model.py": {},
    "TGS-master/LogNet-master/LogNet-master/lognet/__init__.py": {},
    "TGS-master/LogNet-master/LogNet-master/lognet/loader/structured_data_loader.py": {
        "create_lazy_loaders": {
            "name": "create_lazy_loaders",
            "location": 65,
            "return": [
                "List[LazyCSVDataset]",
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "root_path": [
                    "List",
                    "List[str]",
                    "str"
                ],
                "header_file": [
                    "List",
                    "List[str]",
                    "str"
                ],
                "file_list": [
                    "str",
                    "Iterable[Optional[Any]]",
                    "bool",
                    "List[str]"
                ],
                "response_features": [
                    "List",
                    "List[str]",
                    "str"
                ]
            }
        },
        "LazyCSVDataset.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_file": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "filename": [
                    "str",
                    "IO[Any]",
                    "Optional[str]"
                ],
                "response_features": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Tuple[str,str]"
                ]
            }
        },
        "LazyCSVDataset.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [
                "Tuple[str]",
                "Optional[numpy.ndarray]",
                "numpy.ndarray",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "LazyCSVDataset.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredDataset.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "header_file": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "file_list": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "response_features": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "StructuredDataset.__getitem__": {
            "name": "__getitem__",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StructuredDataset.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredDataset.get_record_lengths": {
            "name": "get_record_lengths",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/loader/__init__.py": {},
    "TGS-master/LogNet-master/LogNet-master/lognet/models/ModelFactory.py": {
        "ModelFactory.select": {
            "name": "select",
            "location": 10,
            "return": [
                "str",
                "TorchNN",
                "RandomForest",
                "GradientBoost",
                "MultilayerPerceptron",
                "GeneralizedAdditive",
                "GradientBoostClass"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "model_path": [
                    "Literal",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "None",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "model_type": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "model_params": [
                    "Literal",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "None",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ModelFactory.load": {
            "name": "load",
            "location": 25,
            "return": [
                "str",
                "TextIO",
                "TorchNN",
                "BinaryIO",
                "RandomForest",
                "GradientBoost",
                "MultilayerPerceptron",
                "GeneralizedAdditive",
                "GradientBoostClass"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "MutableSequence",
                    "str",
                    "MutableSequence[str]",
                    "Type",
                    "Type[object]",
                    "int"
                ],
                "model_type": [
                    "bool",
                    "MutableSequence",
                    "str",
                    "MutableSequence[str]",
                    "Type",
                    "Type[object]",
                    "int"
                ],
                "model_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/models/SmartModel.py": {
        "SmartModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartModel._regression_error": {
            "name": "_regression_error",
            "location": 23,
            "return": [
                "Callable[[Exception], bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "X_valid": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "y_valid": [
                    "str",
                    "List",
                    "Set[str]"
                ],
                "model": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SmartModel._classification_error": {
            "name": "_classification_error",
            "location": 27,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "X_valid": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "y_valid": [
                    "Dict",
                    "bytes",
                    "torch.nn.Module"
                ],
                "model": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SmartModel.train": {
            "name": "train",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "List",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "training_data": [],
                "validation_data": [
                    "bytes",
                    "int",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "features": [
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]"
                ],
                "target": [
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Dict[str,Any]",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]",
                    "BaseException"
                ]
            }
        },
        "SmartModel.predict": {
            "name": "predict",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "List[int]",
                    "bool",
                    "int",
                    "float"
                ],
                "features": [
                    "Dict[str, object]"
                ],
                "target": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "RandomForest.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GradientBoost.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GradientBoost.train": {
            "name": "train",
            "location": 90,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "training_data": [
                    "str",
                    "bytes",
                    "List",
                    "bool",
                    "Dict"
                ],
                "validation_data": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "features": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[int, Dict[int, Any]]",
                    "List[dict]"
                ],
                "target": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[int, Dict[int, Any]]",
                    "List[dict]"
                ]
            }
        },
        "MultilayerPerceptron.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GeneralizedAdditive.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GradientBoostClass.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/models/structured_models.py": {
        "initialize_embedding": {
            "name": "initialize_embedding",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Tuple[float]"
                ]
            }
        },
        "DenseModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_sizes": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "None",
                    "Optional[List[int]]",
                    "Optional[int]"
                ],
                "n_continuous_variables": [
                    "int",
                    "float",
                    "bool"
                ],
                "embedding_dropout": [
                    "float",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "output_size": [
                    "int",
                    "bool"
                ],
                "layer_sizes": [
                    "int",
                    "float"
                ],
                "linear_layer_dropouts": [
                    "List[str]",
                    "List",
                    "int",
                    "Sequence[Sequence[float]]",
                    "float"
                ],
                "output_range": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "Callable"
                ],
                "use_batchnorm": [
                    "bool",
                    "Optional[str]"
                ],
                "is_regression": [
                    "bool",
                    "float",
                    "Optional[List[Any]]"
                ],
                "is_multilabel": [
                    "bool",
                    "float",
                    "Optional[List[Any]]"
                ]
            }
        },
        "DenseModel.forward": {
            "name": "forward",
            "location": 69,
            "return": [
                "str",
                "float",
                "complex",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "input_continuous": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input_categorical": [
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/models/TorchNN.py": {
        "TorchNN.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "TorchNN.train": {
            "name": "train",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_data": [
                    "bytes",
                    "bool",
                    "raiden.utils.Address"
                ],
                "validation_data": [
                    "bool",
                    "bytes",
                    "raiden.utils.Address"
                ]
            }
        },
        "TorchNN.predict": {
            "name": "predict",
            "location": 98,
            "return": [
                "List",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "bytes",
                    "int",
                    "torch.Tensor",
                    "raiden.utils.Dict[str,raiden.utils.Any]"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/models/__init__.py": {},
    "TGS-master/LogNet-master/LogNet-master/lognet/preprocess/DataPrep.py": {
        "DataPrep.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DataPrep._smooth": {
            "name": "_smooth",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "str",
                    "List",
                    "Type",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "feature_names": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "Iterator[int]",
                    "int"
                ],
                "window_length": [
                    "str",
                    "Dict"
                ]
            }
        },
        "DataPrep._shift": {
            "name": "_shift",
            "location": 20,
            "return": [
                "List",
                "str",
                "Optional[Union[str,Any]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "str",
                    "bool",
                    "pandas.DataFrame",
                    "int"
                ],
                "feature_names": [
                    "List",
                    "bool",
                    "int",
                    "str",
                    "pandas.Index"
                ],
                "shift_size": [
                    "int"
                ]
            }
        },
        "DataPrep._compute_log": {
            "name": "_compute_log",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "bool",
                    "Optional[pandas.DataFrame]",
                    "float"
                ],
                "feature": [
                    "bool",
                    "Optional[pandas.DataFrame]",
                    "float"
                ]
            }
        },
        "DataPrep._compute_cube": {
            "name": "_compute_cube",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "str",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "feature": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "DataPrep._apply_transform": {
            "name": "_apply_transform",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_df": [
                    "List[int]",
                    "bytes"
                ],
                "feature_names": [
                    "List[tuple[Union[str,Any]]]",
                    "List[str]",
                    "str",
                    "bool",
                    "List[numpy.ndarray]",
                    "List[List[Any]]",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "DataPrep._create_features": {
            "name": "_create_features",
            "location": 48,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "las_data": [
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, bool]",
                    "Dict[str, List[Any]]",
                    "bytes"
                ],
                "info_dict": [
                    "Tuple[dict, dict]",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "features": [
                    "List[dict]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict]",
                    "List[Dict[str,Any]]"
                ],
                "targets": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "pandas.DataFrame"
                ],
                "keep_location": [
                    "bool",
                    "str",
                    "float"
                ],
                "smoothing_window": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str,List[str]]"
                ],
                "n": [
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "numpy.array"
                ]
            }
        },
        "DataPrep.generateFeatures": {
            "name": "generateFeatures",
            "location": 116,
            "return": [
                "str",
                "int",
                "Callable",
                "List[str]",
                "Dict",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "las_data": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "info_dict": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "feature_keys": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "target_keys": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,bytes]"
                ],
                "keep_location": [
                    "bool",
                    "bytes",
                    "str",
                    "Union[str,bytes]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/preprocess/data_prep.py": {
        "LAStoCSV.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "las_folder_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "metadata_df": [
                    "str",
                    "List[str]"
                ],
                "transforms": [
                    "Dict[str,str]",
                    "None",
                    "bytes",
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "Iterable[str]"
                ]
            }
        },
        "LAStoCSV._create_features": {
            "name": "_create_features",
            "location": 44,
            "return": [
                "None",
                "Optional[bool]",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "las_filename": [
                    "bool",
                    "List[str]",
                    "str",
                    "float"
                ],
                "features": [
                    "list",
                    "Dict[int, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Sequence[dict]",
                    "Optional[Sequence[Any]]",
                    "List[Tuple[str, str]]"
                ],
                "targets": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "smoothing_window": [
                    "int",
                    "bool",
                    "Tuple[str,str]",
                    "str",
                    "Dict[str,Callable]",
                    "List[Tuple[int,int]]"
                ],
                "n": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "LAStoCSV._create_feature_list": {
            "name": "_create_feature_list",
            "location": 117,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "List",
                "bool",
                "Union[str,List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Dict[str,dict[str,int]]",
                    "int",
                    "str",
                    "Dict[int,int]",
                    "Dict[str,Dict[str,int]]",
                    "List[dict]",
                    "Dict[str,Any]",
                    "List[Dict]"
                ],
                "n": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "LAStoCSV._apply_transformation": {
            "name": "_apply_transformation",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features_df": [
                    "Dict"
                ],
                "features": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, List]",
                    "FrozenSet[int]"
                ],
                "targets": [
                    "numpy.ndarray",
                    "keras.utils.Sequence",
                    "int"
                ]
            }
        },
        "LAStoCSV.to_csv": {
            "name": "to_csv",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]",
                    "Union[None,str,List[str]]",
                    "List[str]"
                ],
                "feature_curves": [
                    "List[str]",
                    "int",
                    "Union[str,List[str]]",
                    "Optional[List[str]]",
                    "numpy.ndarray",
                    "Sequence[T]"
                ],
                "target_curves": [
                    "List[str]",
                    "Union[str,List[str]]",
                    "List",
                    "Optional[int]",
                    "bool",
                    "Union[bool,List,Tuple]"
                ],
                "n": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "smoothing_window": [
                    "int",
                    "str",
                    "pandas.core.series.Series",
                    "float"
                ],
                "debug": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Union[bool,List[bool]]"
                ],
                "keep_location": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/preprocess/FormationPrep.py": {
        "FormationPrep.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basins": [
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict",
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "Dict[str,str]",
                    "bool",
                    "Dict[str,Type[Any]]",
                    "Dict[str,Type]"
                ],
                "formations": [
                    "dict",
                    "numpy.ndarray",
                    "Optional[bytes]",
                    "pandas.DataFrame",
                    "List[Dict]"
                ],
                "column_names": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Optional[List[Any]]",
                    "None",
                    "List[Any]"
                ],
                "depth_bins": [
                    "str",
                    "Mapping",
                    "bool",
                    "Optional[Mapping]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "pandas.DataFrame"
                ]
            }
        },
        "FormationPrep.generateBinSum": {
            "name": "generateBinSum",
            "location": 20,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "las_data": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "info_dict": [
                    "Iterable[str]",
                    "List[str]",
                    "bytes",
                    "Dict[int, Dict[str, Any]]",
                    "list",
                    "int",
                    "Dict[str, Set[int]]"
                ],
                "basin_name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "FormationPrep.finalizeBinMean": {
            "name": "finalizeBinMean",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormationPrep.fillMissingValues": {
            "name": "fillMissingValues",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_df": [
                    "str",
                    "bool"
                ],
                "basin_name": [
                    "int",
                    "Dict"
                ]
            }
        },
        "FormationPrep.getNumFormations": {
            "name": "getNumFormations",
            "location": 71,
            "return": [
                "int",
                "Dict[str,bool]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormationPrep.addLatitudeLongitude": {
            "name": "addLatitudeLongitude",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "features_df": [
                    "str",
                    "int",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "Tuple[Union[float,float,float]]",
                    "Tuple[float,float,float]"
                ],
                "individual_uwi_df_unsorted": [
                    "str",
                    "Tuple[Union[float,float,float]]",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "int",
                    "Tuple[float,float,float]"
                ]
            }
        },
        "FormationPrep.assembleFormations": {
            "name": "assembleFormations",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features_df": [
                    "Union[int, float]",
                    "FrozenSet[int]"
                ],
                "individual_uwi_df_unsorted": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FormationPrep.computeLog": {
            "name": "computeLog",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_df": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "column_names": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/preprocess/utils.py": {
        "LASFileUWIMapper.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "las_folder_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "LASFileUWIMapper.__len__": {
            "name": "__len__",
            "location": 28,
            "return": [
                "int",
                "str",
                "List[Dict]",
                "List",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LASFileUWIMapper.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [
                "None",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "uwi": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/preprocess/__init__.py": {},
    "TGS-master/LogNet-master/LogNet-master/lognet/utilities/FileInput.py": {
        "FileInput.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "las_folder_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "csv_file": [
                    "str",
                    "int"
                ]
            }
        },
        "FileInput._readFiles": {
            "name": "_readFiles",
            "location": 26,
            "return": [
                "Tuple[list]",
                "str",
                "int",
                "Optional[Dict[str,Any]]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInput.generateFileList": {
            "name": "generateFileList",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_list": [
                    "bytes",
                    "int",
                    "Tuple[Union[bytes,str]]",
                    "pandas.Index",
                    "Tuple[Union[int,int,bytearray]]",
                    "Tuple[bytes,str]",
                    "Tuple[int,int,bytearray]"
                ],
                "target_list": [
                    "bytes",
                    "int",
                    "Tuple[Union[bytes,str]]",
                    "pandas.Index",
                    "Tuple[Union[int,int,bytearray]]",
                    "Tuple[bytes,str]",
                    "Tuple[int,int,bytearray]"
                ]
            }
        },
        "FileInput.generateFormationList": {
            "name": "generateFormationList",
            "location": 58,
            "return": [
                "Tuple",
                "str",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "feature_list": [
                    "Tuple",
                    "List[str]",
                    "Selector"
                ]
            }
        },
        "FileInput.getFilePath": {
            "name": "getFilePath",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInput.getFileList": {
            "name": "getFileList",
            "location": 80,
            "return": [
                "str",
                "Optional[bytes]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInput.getFileInfo": {
            "name": "getFileInfo",
            "location": 83,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "FileInput.getFormationInfo": {
            "name": "getFormationInfo",
            "location": 86,
            "return": [
                "str",
                "bool",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/utilities/FileOutput.py": {
        "FileOutput.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_file_path": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "FileOutput._writeHeader": {
            "name": "_writeHeader",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_list": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "FileOutput.write_csv": {
            "name": "write_csv",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "file_data": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "FileOutput.getFilePath": {
            "name": "getFilePath",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/utilities/LASOutput.py": {
        "LASOutput.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_path": [
                    "str",
                    "BinaryIO",
                    "os.PathLike"
                ]
            }
        },
        "LASOutput.write_las": {
            "name": "write_las",
            "location": 28,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "processed_df": [
                    "str",
                    "pandas.core.frame.DataFrame",
                    "pandas.DataFrame",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "filename": [
                    "str"
                ],
                "location": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/utilities/Plotting.py": {
        "get_formation_patterns": {
            "name": "get_formation_patterns",
            "location": 30,
            "return": [
                "Tuple[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "formation_code": [
                    "str",
                    "int",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "plot_formation_bars": {
            "name": "plot_formation_bars",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "axes": [
                    "str"
                ],
                "depths": [
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "int",
                    "Union[int,float]",
                    "List[Tuple[int,int]]",
                    "Union[numpy.ndarray,xarray.DataArray]"
                ],
                "formations": [
                    "float",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "plot_curves": {
            "name": "plot_curves",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "bool"
                ],
                "depths": [
                    "List[int]",
                    "int",
                    "numpy.ndarray"
                ],
                "curve": [
                    "bool",
                    "numpy.array",
                    "numpy.ndarray",
                    "int"
                ],
                "curve_title": [
                    "int",
                    "Tuple[numpy.dtype]",
                    "None"
                ],
                "color": [
                    "typing.Text"
                ],
                "tick_labels": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "plot_composite": {
            "name": "plot_composite",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "plot_curves": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "figure_size": [
                    "Tuple[int]",
                    "int",
                    "Tuple[int,int]",
                    "List"
                ]
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/lognet/utilities/__init__.py": {},
    "TGS-master/LogNet-master/LogNet-master/tests/test_formprep.py": {
        "TestFormationPrep.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormationPrep.test_generateBinSum": {
            "name": "test_generateBinSum",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormationPrep.test_fail": {
            "name": "test_fail",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormationPrep.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TGS-master/LogNet-master/LogNet-master/tests/test_LASOutput.py": {
        "test_LASOutput": {
            "name": "test_LASOutput",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TGS-master/LogNet-master/LogNet-master/tests/test_plotting.py": {
        "test_plot_curves": {
            "name": "test_plot_curves",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_formations": {
            "name": "test_plot_formations",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TGS-master/LogNet-master/LogNet-master/tests/test_preprocess.py": {
        "TestPreprocess.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocess.test_shift": {
            "name": "test_shift",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocess.test_smooth": {
            "name": "test_smooth",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocess.test_generate_features": {
            "name": "test_generate_features",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocess.tearDown": {
            "name": "tearDown",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
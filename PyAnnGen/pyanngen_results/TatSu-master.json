{
    "TatSu-master/setup.py": {},
    "TatSu-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "TatSu-master/examples/calc/calc.py": {
        "simple_parse": {
            "name": "simple_parse",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "annotated_parse": {
            "name": "annotated_parse",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_with_basic_semantics": {
            "name": "parse_with_basic_semantics",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_factored": {
            "name": "parse_factored",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_to_model": {
            "name": "parse_to_model",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_and_walk_model": {
            "name": "parse_and_walk_model",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_and_translate": {
            "name": "parse_and_translate",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CalcBasicSemantics.number": {
            "name": "number",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CalcBasicSemantics.term": {
            "name": "term",
            "location": 47,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict"
                ]
            }
        },
        "CalcBasicSemantics.expression": {
            "name": "expression",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ast": []
            }
        },
        "CalcSemantics.number": {
            "name": "number",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CalcSemantics.addition": {
            "name": "addition",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CalcSemantics.subtraction": {
            "name": "subtraction",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CalcSemantics.multiplication": {
            "name": "multiplication",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CalcSemantics.division": {
            "name": "division",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CalcWalker.walk_object": {
            "name": "walk_object",
            "location": 129,
            "return": [
                "List[int]",
                "int",
                "Iterable[str]",
                "Union[int,slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "CalcWalker.walk__add": {
            "name": "walk__add",
            "location": 132,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "CalcWalker.walk__subtract": {
            "name": "walk__subtract",
            "location": 135,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "CalcWalker.walk__multiply": {
            "name": "walk__multiply",
            "location": 138,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "CalcWalker.walk__divide": {
            "name": "walk__divide",
            "location": 141,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "TatSu-master/examples/calc/codegen.py": {
        "PostfixCodeGenerator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/ast.py": {
        "AST.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.frozen": {
            "name": "frozen",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.parseinfo": {
            "name": "parseinfo",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.set_parseinfo": {
            "name": "set_parseinfo",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Union[str,bytes]",
                    "str",
                    "bytes"
                ]
            }
        },
        "AST.copy": {
            "name": "copy",
            "location": 31,
            "return": [
                "AST"
            ],
            "arguments": {
                "self": [
                    "_TAST@@AST@@"
                ]
            }
        },
        "AST.asjson": {
            "name": "asjson",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST._set": {
            "name": "_set",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "value": [
                    "str",
                    "Callable"
                ],
                "force_list": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "Union[str,None]",
                    "Optional[int]"
                ]
            }
        },
        "AST._setlist": {
            "name": "_setlist",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "int",
                    "Type[T]",
                    "Type"
                ],
                "value": [
                    "bytes",
                    "int",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "AST.__copy__": {
            "name": "__copy__",
            "location": 55,
            "return": [
                "AST"
            ],
            "arguments": {
                "self": [
                    "_TAST@@AST@@"
                ]
            }
        },
        "AST.__getitem__": {
            "name": "__getitem__",
            "location": 58,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "static_frame.core.util.GetItemKeyType"
                ]
            }
        },
        "AST.__setitem__": {
            "name": "__setitem__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "AST.__delitem__": {
            "name": "__delitem__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "AST.__setattr__": {
            "name": "__setattr__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple",
                    "bool",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "AST.__getattr__": {
            "name": "__getattr__",
            "location": 80,
            "return": [
                "None",
                "str",
                "Callable[[Any],bool]",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str,str]",
                    "None",
                    "Callable[[Any],str]",
                    "Callable[Any,str]"
                ]
            }
        },
        "AST.__hasattribute__": {
            "name": "__hasattribute__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AST.__reduce__": {
            "name": "__reduce__",
            "location": 100,
            "return": [
                "Tuple[(Type[AST], Tuple[()], None, None, Iterator[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST._safekey": {
            "name": "_safekey",
            "location": 103,
            "return": [
                "str",
                "Tuple",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Tuple",
                    "Optional[str]",
                    "Dict[str,str]",
                    "int",
                    "Callable[[KT],VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "AST._define": {
            "name": "_define",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "Optional[Any]"
                ],
                "list_keys": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "AST.__json__": {
            "name": "__json__",
            "location": 119,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__repr__": {
            "name": "__repr__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__hash__": {
            "name": "__hash__",
            "location": 131,
            "return": [
                "bool",
                "Match",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/bootstrap.py": {
        "main": {
            "name": "main",
            "location": 1426,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "set",
                "Optional[Dict]",
                "Optional[Pattern]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "start": [
                    "str",
                    "int",
                    "None",
                    "Optional[Collection[str]]",
                    "Collection"
                ]
            }
        },
        "EBNFBootstrapBuffer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "None",
                    "Dict"
                ]
            }
        },
        "EBNFBootstrapParser.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "EBNFBootstrapParser._start_": {
            "name": "_start_",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._grammar_": {
            "name": "_grammar_",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._directive_": {
            "name": "_directive_",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._keywords_": {
            "name": "_keywords_",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._keyword_": {
            "name": "_keyword_",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._paramdef_": {
            "name": "_paramdef_",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._rule_": {
            "name": "_rule_",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._decorator_": {
            "name": "_decorator_",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._params_": {
            "name": "_params_",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._first_param_": {
            "name": "_first_param_",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._kwparams_": {
            "name": "_kwparams_",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._pair_": {
            "name": "_pair_",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._expre_": {
            "name": "_expre_",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._choice_": {
            "name": "_choice_",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._option_": {
            "name": "_option_",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._sequence_": {
            "name": "_sequence_",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._element_": {
            "name": "_element_",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._rule_include_": {
            "name": "_rule_include_",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._named_": {
            "name": "_named_",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._named_list_": {
            "name": "_named_list_",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._named_single_": {
            "name": "_named_single_",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._override_": {
            "name": "_override_",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._override_list_": {
            "name": "_override_list_",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._override_single_": {
            "name": "_override_single_",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._override_single_deprecated_": {
            "name": "_override_single_deprecated_",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._term_": {
            "name": "_term_",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._group_": {
            "name": "_group_",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._gather_": {
            "name": "_gather_",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._positive_gather_": {
            "name": "_positive_gather_",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._normal_gather_": {
            "name": "_normal_gather_",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._join_": {
            "name": "_join_",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._positive_join_": {
            "name": "_positive_join_",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._normal_join_": {
            "name": "_normal_join_",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._left_join_": {
            "name": "_left_join_",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._right_join_": {
            "name": "_right_join_",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._separator_": {
            "name": "_separator_",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._positive_closure_": {
            "name": "_positive_closure_",
            "location": 902,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._closure_": {
            "name": "_closure_",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._empty_closure_": {
            "name": "_empty_closure_",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._optional_": {
            "name": "_optional_",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._special_": {
            "name": "_special_",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._lookahead_": {
            "name": "_lookahead_",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._negative_lookahead_": {
            "name": "_negative_lookahead_",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._skip_to_": {
            "name": "_skip_to_",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._atom_": {
            "name": "_atom_",
            "location": 976,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._call_": {
            "name": "_call_",
            "location": 1003,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._void_": {
            "name": "_void_",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._cut_": {
            "name": "_cut_",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._cut_deprecated_": {
            "name": "_cut_deprecated_",
            "location": 1017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._known_name_": {
            "name": "_known_name_",
            "location": 1022,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._name_": {
            "name": "_name_",
            "location": 1027,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._constant_": {
            "name": "_constant_",
            "location": 1031,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._alert_": {
            "name": "_alert_",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._token_": {
            "name": "_token_",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._literal_": {
            "name": "_literal_",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._string_": {
            "name": "_string_",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._raw_string_": {
            "name": "_raw_string_",
            "location": 1108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._STRING_": {
            "name": "_STRING_",
            "location": 1114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._hex_": {
            "name": "_hex_",
            "location": 1136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._float_": {
            "name": "_float_",
            "location": 1140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._int_": {
            "name": "_int_",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._path_": {
            "name": "_path_",
            "location": 1148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._word_": {
            "name": "_word_",
            "location": 1152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._any_": {
            "name": "_any_",
            "location": 1156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._pattern_": {
            "name": "_pattern_",
            "location": 1160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._regexes_": {
            "name": "_regexes_",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._regex_": {
            "name": "_regex_",
            "location": 1174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._boolean_": {
            "name": "_boolean_",
            "location": 1200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapParser._eof_": {
            "name": "_eof_",
            "location": 1212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBootstrapSemantics.start": {
            "name": "start",
            "location": 1218,
            "return": [
                "int",
                "str",
                "Tuple[str,str]",
                "Dict[str,str]",
                "Callable",
                "List",
                "Optional"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Dict[str,str]",
                    "Callable",
                    "str",
                    "Optional",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.grammar": {
            "name": "grammar",
            "location": 1221,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.directive": {
            "name": "directive",
            "location": 1224,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.keywords": {
            "name": "keywords",
            "location": 1227,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.keyword": {
            "name": "keyword",
            "location": 1230,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.paramdef": {
            "name": "paramdef",
            "location": 1233,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.rule": {
            "name": "rule",
            "location": 1236,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.decorator": {
            "name": "decorator",
            "location": 1239,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.params": {
            "name": "params",
            "location": 1242,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.first_param": {
            "name": "first_param",
            "location": 1245,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.kwparams": {
            "name": "kwparams",
            "location": 1248,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.pair": {
            "name": "pair",
            "location": 1251,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.expre": {
            "name": "expre",
            "location": 1254,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.choice": {
            "name": "choice",
            "location": 1257,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.option": {
            "name": "option",
            "location": 1260,
            "return": [
                "Callable",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.sequence": {
            "name": "sequence",
            "location": 1263,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.element": {
            "name": "element",
            "location": 1266,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str,str]",
                "BaseException",
                "List[dict]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Dict[str,str]",
                    "BaseException",
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict]",
                    "List[Dict]"
                ]
            }
        },
        "EBNFBootstrapSemantics.rule_include": {
            "name": "rule_include",
            "location": 1269,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.named": {
            "name": "named",
            "location": 1272,
            "return": [
                "Dict[str,Any]",
                "List",
                "bool",
                "str",
                "List[list]",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "List",
                    "bool",
                    "Dict[str,Any]",
                    "List[list]",
                    "List[List]",
                    "int"
                ]
            }
        },
        "EBNFBootstrapSemantics.named_list": {
            "name": "named_list",
            "location": 1275,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "EBNFBootstrapSemantics.named_single": {
            "name": "named_single",
            "location": 1278,
            "return": [
                "Dict[str,Any]",
                "List",
                "bool",
                "str",
                "List[list]",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "List",
                    "bool",
                    "Dict[str,Any]",
                    "List[list]",
                    "List[List]",
                    "int"
                ]
            }
        },
        "EBNFBootstrapSemantics.override": {
            "name": "override",
            "location": 1281,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.override_list": {
            "name": "override_list",
            "location": 1284,
            "return": [
                "int",
                "List[int]",
                "List[str]",
                "None",
                "List",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "List",
                    "None",
                    "List[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.override_single": {
            "name": "override_single",
            "location": 1287,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.override_single_deprecated": {
            "name": "override_single_deprecated",
            "location": 1290,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.term": {
            "name": "term",
            "location": 1293,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.group": {
            "name": "group",
            "location": 1296,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.gather": {
            "name": "gather",
            "location": 1299,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.positive_gather": {
            "name": "positive_gather",
            "location": 1302,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.normal_gather": {
            "name": "normal_gather",
            "location": 1305,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.join": {
            "name": "join",
            "location": 1308,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.positive_join": {
            "name": "positive_join",
            "location": 1311,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.normal_join": {
            "name": "normal_join",
            "location": 1314,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.left_join": {
            "name": "left_join",
            "location": 1317,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.right_join": {
            "name": "right_join",
            "location": 1320,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.separator": {
            "name": "separator",
            "location": 1323,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.positive_closure": {
            "name": "positive_closure",
            "location": 1326,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.closure": {
            "name": "closure",
            "location": 1329,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.empty_closure": {
            "name": "empty_closure",
            "location": 1332,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.optional": {
            "name": "optional",
            "location": 1335,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.special": {
            "name": "special",
            "location": 1338,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.lookahead": {
            "name": "lookahead",
            "location": 1341,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.negative_lookahead": {
            "name": "negative_lookahead",
            "location": 1344,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.skip_to": {
            "name": "skip_to",
            "location": 1347,
            "return": [
                "int",
                "bytes",
                "str",
                "float",
                "IO",
                "List[str]",
                "List[int]",
                "List[list[str]]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "EBNFBootstrapSemantics.atom": {
            "name": "atom",
            "location": 1350,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.call": {
            "name": "call",
            "location": 1353,
            "return": [
                "Dict",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict"
                ]
            }
        },
        "EBNFBootstrapSemantics.void": {
            "name": "void",
            "location": 1356,
            "return": [
                "int",
                "str",
                "Dict",
                "Dict[str,Any]",
                "Callable[,T]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "Callable[,T]",
                    "str",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.cut": {
            "name": "cut",
            "location": 1359,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.cut_deprecated": {
            "name": "cut_deprecated",
            "location": 1362,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.known_name": {
            "name": "known_name",
            "location": 1365,
            "return": [
                "str",
                "Iterable[tuple[Union[int,Any]]]",
                "bool",
                "int",
                "Dict[str,Any]",
                "Container[str]",
                "Union[List,Dict]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Iterable[Tuple[int,Any]]",
                    "str",
                    "Iterable[tuple[Union[int,Any]]]",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.name": {
            "name": "name",
            "location": 1368,
            "return": [
                "Dict[str,Any]",
                "List",
                "bool",
                "str",
                "List[list]",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "List",
                    "bool",
                    "Dict[str,Any]",
                    "List[list]",
                    "List[List]",
                    "int"
                ]
            }
        },
        "EBNFBootstrapSemantics.constant": {
            "name": "constant",
            "location": 1371,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.alert": {
            "name": "alert",
            "location": 1374,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.token": {
            "name": "token",
            "location": 1377,
            "return": [
                "bool",
                "str",
                "int",
                "Sequence[Tuple[float,float]]",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "bool",
                    "str"
                ]
            }
        },
        "EBNFBootstrapSemantics.literal": {
            "name": "literal",
            "location": 1380,
            "return": [
                "Mapping",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "EBNFBootstrapSemantics.string": {
            "name": "string",
            "location": 1383,
            "return": [
                "int",
                "str",
                "List[str]",
                "Tuple[Union[int,...]]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "int",
                    "Tuple[Union[int,...]]",
                    "bool",
                    "Union[int,Tuple[int,...]]"
                ]
            }
        },
        "EBNFBootstrapSemantics.raw_string": {
            "name": "raw_string",
            "location": 1386,
            "return": [
                "int",
                "str",
                "List[str]",
                "Tuple[Union[int,...]]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[Union[int,...]]",
                    "Union[int,Tuple[int,...]]"
                ]
            }
        },
        "EBNFBootstrapSemantics.STRING": {
            "name": "STRING",
            "location": 1389,
            "return": [
                "int",
                "str",
                "List[str]",
                "Tuple[Union[int,...]]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "int",
                    "Tuple[Union[int,...]]",
                    "bool",
                    "Union[int,Tuple[int,...]]"
                ]
            }
        },
        "EBNFBootstrapSemantics.hex": {
            "name": "hex",
            "location": 1392,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.float": {
            "name": "float",
            "location": 1395,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.int": {
            "name": "int",
            "location": 1398,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.path": {
            "name": "path",
            "location": 1401,
            "return": [
                "str",
                "bool",
                "int",
                "Callable",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "EBNFBootstrapSemantics.word": {
            "name": "word",
            "location": 1404,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.any": {
            "name": "any",
            "location": 1407,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.pattern": {
            "name": "pattern",
            "location": 1410,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.regexes": {
            "name": "regexes",
            "location": 1413,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.regex": {
            "name": "regex",
            "location": 1416,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.boolean": {
            "name": "boolean",
            "location": 1419,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapSemantics.eof": {
            "name": "eof",
            "location": 1422,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFBootstrapParser._grammar_.block1": {
            "name": "block1",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._grammar_.block6": {
            "name": "block6",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._keywords_.block0": {
            "name": "block0",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._keyword_.block0": {
            "name": "block0",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._rule_.block1": {
            "name": "block1",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._params_.block1": {
            "name": "block1",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._kwparams_.sep0": {
            "name": "sep0",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._kwparams_.block0": {
            "name": "block0",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._choice_.block1": {
            "name": "block1",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._sequence_.block1": {
            "name": "block1",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._regexes_.sep0": {
            "name": "sep0",
            "location": 1166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EBNFBootstrapParser._regexes_.block0": {
            "name": "block0",
            "location": 1169,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/tatsu/buffering.py": {
        "Buffer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Type[BaseConfig]",
                    "str",
                    "None",
                    "Dict",
                    "Type"
                ]
            }
        },
        "Buffer.filename": {
            "name": "filename",
            "location": 60,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.ignorecase": {
            "name": "ignorecase",
            "location": 64,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.whitespace": {
            "name": "whitespace",
            "location": 68,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.build_whitespace_re": {
            "name": "build_whitespace_re",
            "location": 72,
            "return": [
                "Optional[Union[(Pattern[str], _T0)]]"
            ],
            "arguments": {
                "whitespace": [
                    "bool",
                    "Optional[List[str]]",
                    "Match",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "Buffer._preprocess": {
            "name": "_preprocess",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer._postprocess": {
            "name": "_postprocess",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer._preprocess_block": {
            "name": "_preprocess_block",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[Callable[[None],None]]",
                    "bool",
                    "Callable[None,None]",
                    "None"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "Buffer.split_block_lines": {
            "name": "split_block_lines",
            "location": 102,
            "return": [
                "List[str]",
                "bool",
                "Optional[Dict[str,str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "Buffer.join_block_lines": {
            "name": "join_block_lines",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "Counter[str]",
                    "Union[str,bytes]"
                ]
            }
        },
        "Buffer.process_block": {
            "name": "process_block",
            "location": 108,
            "return": [
                "Tuple[(_T1, _T2)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "lines": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "index": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Buffer.include": {
            "name": "include",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "index": [
                    "int",
                    "str",
                    "float",
                    "Dict[int,object]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "i": [
                    "int",
                    "str",
                    "List[Tuple[int,str]]",
                    "List[tuple[Union[int,str]]]"
                ],
                "j": [
                    "int",
                    "str"
                ],
                "name": [
                    "Optional[Callable[[bool],None]]",
                    "Callable[bool,None]",
                    "None"
                ],
                "block": [
                    "Optional[Callable[[bool],None]]",
                    "Callable[bool,None]",
                    "None"
                ]
            }
        },
        "Buffer.include_file": {
            "name": "include_file",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Callable",
                    "Type[Any]",
                    "Type"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Type[Any]",
                    "Type"
                ],
                "lines": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "i": [
                    "str",
                    "int"
                ],
                "j": [
                    "str",
                    "int"
                ]
            }
        },
        "Buffer.get_include": {
            "name": "get_include",
            "location": 123,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Buffer.replace_lines": {
            "name": "replace_lines",
            "location": 133,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "List[str]"
                ],
                "j": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "block": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Buffer.pos": {
            "name": "pos",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Buffer.line": {
            "name": "line",
            "location": 155,
            "return": [
                "int",
                "float",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.col": {
            "name": "col",
            "location": 159,
            "return": [
                "int",
                "str",
                "bytes",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.posline": {
            "name": "posline",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[str]",
                    "None",
                    "float",
                    "Optional[float]",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Buffer.poscol": {
            "name": "poscol",
            "location": 167,
            "return": [
                "int",
                "float",
                "Tuple[Tuple[int,Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[int]",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "Buffer.atend": {
            "name": "atend",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.ateol": {
            "name": "ateol",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.current": {
            "name": "current",
            "location": 180,
            "return": [
                "None",
                "str",
                "Optional[BaseException]",
                "Optional[str]",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.at": {
            "name": "at",
            "location": 185,
            "return": [
                "None",
                "str",
                "Optional[BaseException]",
                "Optional[str]",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "Sequence[T]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Buffer.peek": {
            "name": "peek",
            "location": 190,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Buffer.next": {
            "name": "next",
            "location": 193,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.goto": {
            "name": "goto",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "Buffer.move": {
            "name": "move",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Buffer.comments": {
            "name": "comments",
            "location": 206,
            "return": [
                "CommentInfo",
                "str",
                "Callable",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "Callable",
                    "str"
                ],
                "clear": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Buffer._index_comments": {
            "name": "_index_comments",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comments": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "selector": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Buffer._eat_regex": {
            "name": "_eat_regex",
            "location": 237,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "Callable[[KT,VT],bool]",
                    "Callable[T,bool]",
                    "Optional[Callable]",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Buffer.eat_whitespace": {
            "name": "eat_whitespace",
            "location": 241,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.eat_comments": {
            "name": "eat_comments",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.eat_eol_comments": {
            "name": "eat_eol_comments",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.next_token": {
            "name": "next_token",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.skip_to": {
            "name": "skip_to",
            "location": 260,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Dict[str,str]",
                    "Type"
                ]
            }
        },
        "Buffer.skip_past": {
            "name": "skip_past",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int,int]]",
                    "Iterable[tuple[Union[int,int]]]"
                ]
            }
        },
        "Buffer.skip_to_eol": {
            "name": "skip_to_eol",
            "location": 273,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.scan_space": {
            "name": "scan_space",
            "location": 276,
            "return": [
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "bool",
                "Iterable[int]",
                "str",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.is_space": {
            "name": "is_space",
            "location": 282,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.is_name_char": {
            "name": "is_name_char",
            "location": 285,
            "return": [
                "bool",
                "Dict[str,str]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Optional[str]",
                    "Union[str,None]",
                    "Type"
                ]
            }
        },
        "Buffer.match": {
            "name": "match",
            "location": 288,
            "return": [
                "int",
                "str",
                "List[float]",
                "bool",
                "List",
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "List[float]",
                    "List"
                ]
            }
        },
        "Buffer.matchre": {
            "name": "matchre",
            "location": 310,
            "return": [
                "bool",
                "Dict[str,AsyncGenerator]",
                "None",
                "str",
                "float",
                "Iterator",
                "List[str]",
                "Dict[str,bool]",
                "Pattern",
                "bytes",
                "List"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Buffer._scanre": {
            "name": "_scanre",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Buffer.linecount": {
            "name": "linecount",
            "location": 328,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.line_info": {
            "name": "line_info",
            "location": 331,
            "return": [
                "LineInfo",
                "str",
                "Tuple[str,str]",
                "Callable[[KT],VT]",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "List[int]",
                    "None",
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "Buffer.lookahead_pos": {
            "name": "lookahead_pos",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.lookahead": {
            "name": "lookahead",
            "location": 355,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.get_line": {
            "name": "get_line",
            "location": 363,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Buffer.get_lines": {
            "name": "get_lines",
            "location": 368,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "None",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ],
                "end": [
                    "Optional[int]",
                    "int",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Buffer.line_index": {
            "name": "line_index",
            "location": 375,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "bool",
                    "Union[str,list]"
                ],
                "end": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Buffer.__repr__": {
            "name": "__repr__",
            "location": 380,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.__json__": {
            "name": "__json__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/color.py": {
        "init": {
            "name": "init",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/tatsu/contexts.py": {
        "tatsumasu": {
            "name": "tatsumasu",
            "location": 53,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "leftrec": {
            "name": "leftrec",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "impl": [
                    "bool",
                    "int"
                ]
            }
        },
        "nomemo": {
            "name": "nomemo",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "impl": [
                    "bool",
                    "int",
                    "Type[Exception]"
                ]
            }
        },
        "isname": {
            "name": "isname",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "impl": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "tatsumasu.decorator": {
            "name": "decorator",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "impl": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "closure.__hash__": {
            "name": "__hash__",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "ParseContext._initialize_caches": {
            "name": "_initialize_caches",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.active_config": {
            "name": "active_config",
            "location": 129,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.semantics": {
            "name": "semantics",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.encoding": {
            "name": "encoding",
            "location": 137,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.parseinfo": {
            "name": "parseinfo",
            "location": 141,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.trace": {
            "name": "trace",
            "location": 145,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.trace_length": {
            "name": "trace_length",
            "location": 149,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.trace_separator": {
            "name": "trace_separator",
            "location": 153,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.trace_filename": {
            "name": "trace_filename",
            "location": 157,
            "return": [
                "str",
                "dict",
                "Union[Literal, Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.comments_re": {
            "name": "comments_re",
            "location": 161,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.eol_comments_re": {
            "name": "eol_comments_re",
            "location": 165,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.whitespace": {
            "name": "whitespace",
            "location": 169,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.ignorecase": {
            "name": "ignorecase",
            "location": 173,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.nameguard": {
            "name": "nameguard",
            "location": 177,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.memoize_lookaheads": {
            "name": "memoize_lookaheads",
            "location": 181,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.left_recursion": {
            "name": "left_recursion",
            "location": 185,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.colorize": {
            "name": "colorize",
            "location": 189,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.keywords": {
            "name": "keywords",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.namechars": {
            "name": "namechars",
            "location": 197,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._reset": {
            "name": "_reset",
            "location": 200,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Sequence",
                    "str"
                ]
            }
        },
        "ParseContext._set_furthest_exception": {
            "name": "_set_furthest_exception",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Exception]"
                ]
            }
        },
        "ParseContext.parse": {
            "name": "parse",
            "location": 214,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ParseContext.tokenizer": {
            "name": "tokenizer",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.tokenizercls": {
            "name": "tokenizercls",
            "location": 248,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.last_node": {
            "name": "last_node",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "ParseContext._pos": {
            "name": "_pos",
            "location": 263,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._clear_memoization_caches": {
            "name": "_clear_memoization_caches",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._goto": {
            "name": "_goto",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ParseContext._next": {
            "name": "_next",
            "location": 274,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._next_token": {
            "name": "_next_token",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ruleinfo": [
                    "List[str]",
                    "list",
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ParseContext._define": {
            "name": "_define",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "int",
                    "static_frame.core.util.GetItemKeyType"
                ],
                "list_keys": [
                    "str",
                    "int",
                    "static_frame.core.util.GetItemKeyType"
                ]
            }
        },
        "ParseContext.state": {
            "name": "state",
            "location": 289,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.ast": {
            "name": "ast",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "ParseContext.name_last_node": {
            "name": "name_last_node",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "ParseContext.add_last_node_to_name": {
            "name": "add_last_node_to_name",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "ParseContext._safe_name": {
            "name": "_safe_name",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, int]",
                    "type",
                    "Dict[str, Any]"
                ],
                "ast": [
                    "str",
                    "Tuple[str, int]",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParseContext.ast_set": {
            "name": "ast_set",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[list]",
                    "Optional[int]"
                ],
                "as_list": [
                    "bool",
                    "str"
                ]
            }
        },
        "ParseContext.ast_append": {
            "name": "ast_append",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[str, int]]"
                ],
                "value": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "ParseContext._push_ast": {
            "name": "_push_ast",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "copyast": [
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ParseContext._pop_ast": {
            "name": "_pop_ast",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._merge_ast": {
            "name": "_merge_ast",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.cst": {
            "name": "cst",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "ParseContext._push_cst": {
            "name": "_push_cst",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._pop_cst": {
            "name": "_pop_cst",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._merge_cst": {
            "name": "_merge_cst",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "extend": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ParseContext._append_cst": {
            "name": "_append_cst",
            "location": 381,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ParseContext._extend_cst": {
            "name": "_extend_cst",
            "location": 394,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ]
            }
        },
        "ParseContext._copy_node": {
            "name": "_copy_node",
            "location": 412,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[str]",
                    "typed_asast3.AST"
                ]
            }
        },
        "ParseContext._is_cut_set": {
            "name": "_is_cut_set",
            "location": 420,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._cut": {
            "name": "_cut",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._memoization": {
            "name": "_memoization",
            "location": 443,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._rulestack": {
            "name": "_rulestack",
            "location": 446,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._find_rule": {
            "name": "_find_rule",
            "location": 455,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ParseContext._find_semantic_action": {
            "name": "_find_semantic_action",
            "location": 459,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ParseContext._trace": {
            "name": "_trace",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "ParseContext._trace_event": {
            "name": "_trace_event",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "ParseContext._trace_entry": {
            "name": "_trace_entry",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._trace_success": {
            "name": "_trace_success",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._trace_failure": {
            "name": "_trace_failure",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ParseContext._trace_recursion": {
            "name": "_trace_recursion",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._trace_cut": {
            "name": "_trace_cut",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._trace_match": {
            "name": "_trace_match",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Type"
                ],
                "name": [
                    "str",
                    "int",
                    "bool"
                ],
                "failed": [
                    "str"
                ]
            }
        },
        "ParseContext._make_exception": {
            "name": "_make_exception",
            "location": 544,
            "return": [
                "Iterable[str]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[Dict[str, Any]]",
                    "Tuple[bytes]",
                    "dict",
                    "Sequence",
                    "NamedTuple"
                ],
                "exclass": [
                    "List[Dict[str, Any]]",
                    "Tuple[bytes]",
                    "dict",
                    "Sequence",
                    "NamedTuple"
                ]
            }
        },
        "ParseContext._error": {
            "name": "_error",
            "location": 548,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Optional[List[\"DeliveryItem\"]]",
                    "Dict[str, List]"
                ],
                "exclass": [
                    "dict",
                    "Optional[List[\"DeliveryItem\"]]",
                    "Dict[str, List]"
                ]
            }
        },
        "ParseContext._fail": {
            "name": "_fail",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._get_parseinfo": {
            "name": "_get_parseinfo",
            "location": 554,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Callable[..., T]",
                    "Dict[str, str]",
                    "dict"
                ],
                "pos": [
                    "str",
                    "int",
                    "Callable[..., T]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "ParseContext.rule": {
            "name": "rule",
            "location": 567,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext.memokey": {
            "name": "memokey",
            "location": 571,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._memoize": {
            "name": "_memoize",
            "location": 574,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "type",
                    "Union[int, slice]",
                    "static_frame.core.util.Bloc2DKeyType",
                    "dict"
                ],
                "memo": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "ParseContext._forget": {
            "name": "_forget",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "KT",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "ParseContext._memo_for": {
            "name": "_memo_for",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ParseContext._mkresult": {
            "name": "_mkresult",
            "location": 590,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ParseContext._save_result": {
            "name": "_save_result",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "tuple",
                    "Container[str]",
                    "Optional[List[int]]"
                ],
                "result": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "ParseContext._is_recursive": {
            "name": "_is_recursive",
            "location": 598,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ruleinfo": [
                    "str",
                    "int"
                ]
            }
        },
        "ParseContext._set_left_recursion_guard": {
            "name": "_set_left_recursion_guard",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "ParseContext._call": {
            "name": "_call",
            "location": 605,
            "return": [
                "Tuple[int, str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "ruleinfo": [
                    "denite.util.UserContext",
                    "str"
                ]
            }
        },
        "ParseContext._clear_recursion_errors": {
            "name": "_clear_recursion_errors",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._recursive_call": {
            "name": "_recursive_call",
            "location": 639,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "ruleinfo": [
                    "int",
                    "bool"
                ]
            }
        },
        "ParseContext._invoke_rule": {
            "name": "_invoke_rule",
            "location": 678,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "ruleinfo": [
                    "str",
                    "dict",
                    "int"
                ],
                "key": [
                    "str",
                    "KT",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ParseContext._get_node": {
            "name": "_get_node",
            "location": 704,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Exception",
                    "Dict[str, str]",
                    "Union[str, List[str]]",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "ruleinfo": [
                    "Exception",
                    "Dict[str, str]",
                    "Union[str, List[str]]",
                    "bool",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "ParseContext._invoke_semantic_rule": {
            "name": "_invoke_semantic_rule",
            "location": 714,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "dict"
                ],
                "node": [
                    "Type"
                ]
            }
        },
        "ParseContext._token": {
            "name": "_token",
            "location": 724,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "dict"
                ]
            }
        },
        "ParseContext._constant": {
            "name": "_constant",
            "location": 733,
            "return": [
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "literal": [
                    "str",
                    "Type",
                    "Sequence[str]",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "ParseContext._alert": {
            "name": "_alert",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Set[str]",
                    "dict"
                ],
                "level": [
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "ParseContext._pattern": {
            "name": "_pattern",
            "location": 745,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "ParseContext._eof": {
            "name": "_eof",
            "location": 754,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._eol": {
            "name": "_eol",
            "location": 757,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._check_eof": {
            "name": "_check_eof",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._try": {
            "name": "_try",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._option": {
            "name": "_option",
            "location": 779,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._choice": {
            "name": "_choice",
            "location": 795,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._optional": {
            "name": "_optional",
            "location": 803,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._group": {
            "name": "_group",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._if": {
            "name": "_if",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._ifnot": {
            "name": "_ifnot",
            "location": 832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._isolate": {
            "name": "_isolate",
            "location": 841,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "drop": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParseContext._repeat": {
            "name": "_repeat",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "int",
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "dropprefix": [
                    "str"
                ]
            }
        },
        "ParseContext._closure": {
            "name": "_closure",
            "location": 871,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Optional[str]",
                    "ImportError",
                    "int",
                    "Dict[str, object]",
                    "List[str]"
                ],
                "sep": [
                    "str",
                    "Optional[str]",
                    "ImportError",
                    "int",
                    "Dict[str, object]",
                    "List[str]"
                ],
                "omitsep": [
                    "str",
                    "Optional[str]",
                    "ImportError",
                    "int",
                    "Dict[str, object]",
                    "List[str]"
                ]
            }
        },
        "ParseContext._positive_closure": {
            "name": "_positive_closure",
            "location": 885,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Optional[str]",
                    "ImportError",
                    "int",
                    "Dict[str, object]",
                    "List[str]"
                ],
                "sep": [
                    "str",
                    "Optional[str]",
                    "ImportError",
                    "int",
                    "Dict[str, object]",
                    "List[str]"
                ],
                "omitsep": [
                    "str",
                    "Optional[str]",
                    "ImportError",
                    "int",
                    "Dict[str, object]",
                    "List[str]"
                ]
            }
        },
        "ParseContext._empty_closure": {
            "name": "_empty_closure",
            "location": 897,
            "return": [
                "closure"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._gather": {
            "name": "_gather",
            "location": 902,
            "return": [
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Tuple[object]",
                    "Type"
                ],
                "sep": [
                    "Tuple[object]",
                    "Type"
                ]
            }
        },
        "ParseContext._positive_gather": {
            "name": "_positive_gather",
            "location": 905,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "ParseContext._join": {
            "name": "_join",
            "location": 908,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "float",
                    "Exception",
                    "int"
                ],
                "sep": [
                    "float",
                    "Exception",
                    "int"
                ]
            }
        },
        "ParseContext._positive_join": {
            "name": "_positive_join",
            "location": 911,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "ParseContext._left_join": {
            "name": "_left_join",
            "location": 914,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "ParseContext._right_join": {
            "name": "_right_join",
            "location": 919,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "ParseContext._check_name": {
            "name": "_check_name",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ParseContext._void": {
            "name": "_void",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._any": {
            "name": "_any",
            "location": 934,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._skip_to": {
            "name": "_skip_to",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "tatsumasu.decorator.wrapper": {
            "name": "wrapper",
            "location": 56,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseContext._cut.prune": {
            "name": "prune",
            "location": 438,
            "return": [],
            "arguments": {
                "cache": [
                    "Union[str, Pattern]",
                    "int",
                    "bool",
                    "dict"
                ],
                "cutpos": [
                    "Union[str, Pattern]",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "ParseContext._clear_recursion_errors.filter": {
            "name": "filter",
            "location": 634,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Sequence",
                    "type"
                ]
            }
        }
    },
    "TatSu-master/tatsu/diagrams.py": {
        "draw": {
            "name": "draw",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "grammar": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "GraphvizWalker.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker.graph": {
            "name": "graph",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker.draw": {
            "name": "draw",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "GraphvizWalker.push_graph": {
            "name": "push_graph",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "int",
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "GraphvizWalker.pop_graph": {
            "name": "pop_graph",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker.node": {
            "name": "node",
            "location": 50,
            "return": [
                "str",
                "Dict",
                "int",
                "Callable",
                "Dict[str,Any]",
                "Dict[str,int]",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "Dict[str,list[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "id": [
                    "int",
                    "None",
                    "str",
                    "Optional[Iterable[str]]",
                    "Type",
                    "Iterable[str]",
                    "Optional[int]"
                ]
            }
        },
        "GraphvizWalker.tnode": {
            "name": "tnode",
            "location": 65,
            "return": [
                "str",
                "Tuple[str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GraphvizWalker.dot": {
            "name": "dot",
            "location": 68,
            "return": [
                "str",
                "int",
                "Dict[str,str]",
                "Tuple[Union[Any,Any,Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker.start_node": {
            "name": "start_node",
            "location": 75,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker.ref_node": {
            "name": "ref_node",
            "location": 78,
            "return": [
                "str",
                "Dict[str,str]",
                "int",
                "Dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "GraphvizWalker.rule_node": {
            "name": "rule_node",
            "location": 83,
            "return": [
                "str",
                "int",
                "Dict[str,str]",
                "Dict[str,dict[str,str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GraphvizWalker.end_node": {
            "name": "end_node",
            "location": 88,
            "return": [
                "str",
                "int",
                "Dict[str,int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker.edge": {
            "name": "edge",
            "location": 94,
            "return": [
                "int",
                "str",
                "Callable",
                "Exception",
                "bool",
                "None",
                "Set[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "e": []
            }
        },
        "GraphvizWalker.redge": {
            "name": "redge",
            "location": 101,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,list[Any]]",
                "float",
                "Pattern",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal]]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "Type[object]",
                    "Type"
                ],
                "e": [
                    "str",
                    "int",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "GraphvizWalker.zedge": {
            "name": "zedge",
            "location": 106,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,list[Any]]",
                "float",
                "Pattern",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal]]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Type",
                    "str",
                    "Dict",
                    "bool"
                ],
                "e": [
                    "Type",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "GraphvizWalker.nedge": {
            "name": "nedge",
            "location": 110,
            "return": [
                "str",
                "Optional[int]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Type",
                    "int"
                ],
                "e": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "GraphvizWalker.path": {
            "name": "path",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "GraphvizWalker.subgraph": {
            "name": "subgraph",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "bunch": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "GraphvizWalker.concat": {
            "name": "concat",
            "location": 119,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphvizWalker._walk_decorator": {
            "name": "_walk_decorator",
            "location": 122,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "GraphvizWalker.walk_default": {
            "name": "walk_default",
            "location": 125,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict"
                ]
            }
        },
        "GraphvizWalker.walk__decorator": {
            "name": "walk__decorator",
            "location": 128,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "GraphvizWalker.walk__grammar": {
            "name": "walk__grammar",
            "location": 131,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "Dict",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "GraphvizWalker.walk__rule": {
            "name": "walk__rule",
            "location": 149,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float"
                ]
            }
        },
        "GraphvizWalker.walk__based_rule": {
            "name": "walk__based_rule",
            "location": 161,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "int",
                    "float",
                    "Container"
                ]
            }
        },
        "GraphvizWalker.walk__rule_ref": {
            "name": "walk__rule_ref",
            "location": 164,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "rr": [
                    "int"
                ]
            }
        },
        "GraphvizWalker.walk__special": {
            "name": "walk__special",
            "location": 168,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Set[int]"
                ]
            }
        },
        "GraphvizWalker.walk__override": {
            "name": "walk__override",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "bytes"
                ]
            }
        },
        "GraphvizWalker.walk__named": {
            "name": "walk__named",
            "location": 175,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "str",
                    "IO",
                    "Dict[str,Any]",
                    "Callable[[None],None]",
                    "Callable[None,None]"
                ]
            }
        },
        "GraphvizWalker.walk__named_list": {
            "name": "walk__named_list",
            "location": 178,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "Dict[str,Any]",
                    "str",
                    "Type"
                ]
            }
        },
        "GraphvizWalker.walk__cut": {
            "name": "walk__cut",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "GraphvizWalker.walk__optional": {
            "name": "walk__optional",
            "location": 186,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "GraphvizWalker.walk__closure": {
            "name": "walk__closure",
            "location": 195,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "GraphvizWalker.walk__positive_closure": {
            "name": "walk__positive_closure",
            "location": 206,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "GraphvizWalker.walk__join": {
            "name": "walk__join",
            "location": 214,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "Tuple[float]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GraphvizWalker.walk__group": {
            "name": "walk__group",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GraphvizWalker.walk__choice": {
            "name": "walk__choice",
            "location": 224,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Iterable[Any]"
                ]
            }
        },
        "GraphvizWalker.walk__sequence": {
            "name": "walk__sequence",
            "location": 234,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "GraphvizWalker.walk__lookahead": {
            "name": "walk__lookahead",
            "location": 246,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "la": [
                    "Optional[Callable[[str],bool]]",
                    "int",
                    "Callable[str,bool]",
                    "None"
                ]
            }
        },
        "GraphvizWalker.walk__negative_lookahead": {
            "name": "walk__negative_lookahead",
            "location": 252,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "la": [
                    "Optional[Callable[[str],bool]]",
                    "int",
                    "Callable[str,bool]",
                    "None"
                ]
            }
        },
        "GraphvizWalker.walk__rule_include": {
            "name": "walk__rule_include",
            "location": 258,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "la": [
                    "Optional[Callable[[str],bool]]",
                    "int",
                    "Callable[str,bool]",
                    "None"
                ]
            }
        },
        "GraphvizWalker.walk__pattern": {
            "name": "walk__pattern",
            "location": 264,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GraphvizWalker.walk__token": {
            "name": "walk__token",
            "location": 268,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Set",
                    "str",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ]
            }
        },
        "GraphvizWalker.walk__void": {
            "name": "walk__void",
            "location": 272,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "GraphvizWalker.walk__constant": {
            "name": "walk__constant",
            "location": 276,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "GraphvizWalker.walk__eof": {
            "name": "walk__eof",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "TatSu-master/tatsu/exceptions.py": {
        "FailedParse.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "str",
                    "float",
                    "Union[str,int]",
                    "int"
                ],
                "stack": [
                    "str",
                    "float",
                    "Union[str,int]"
                ],
                "item": [
                    "Optional[str]",
                    "str",
                    "Optional[object]",
                    "None",
                    "Union[int,List]",
                    "int",
                    "Optional[Iterable[Any]]",
                    "List"
                ]
            }
        },
        "FailedParse.message": {
            "name": "message",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedParse.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedToken.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "bool",
                    "str",
                    "int"
                ],
                "stack": [
                    "bool",
                    "str",
                    "int"
                ],
                "token": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "FailedToken.message": {
            "name": "message",
            "location": 88,
            "return": [
                "Text",
                "bytes",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedPattern.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "stack": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "pattern": [
                    "str",
                    "Union[str,dict]",
                    "Dict"
                ]
            }
        },
        "FailedPattern.message": {
            "name": "message",
            "location": 98,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedRef.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable",
                    "None",
                    "bytes"
                ],
                "stack": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable",
                    "None",
                    "bytes"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FailedRef.message": {
            "name": "message",
            "location": 108,
            "return": [
                "Text",
                "Iterable[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedCut.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nested": [
                    "bool",
                    "str"
                ]
            }
        },
        "FailedCut.message": {
            "name": "message",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedCut.__reduce__": {
            "name": "__reduce__",
            "location": 122,
            "return": [
                "Tuple[(Type[FailedCut], Tuple[Any])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedChoice.message": {
            "name": "message",
            "location": 128,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedLookahead.message": {
            "name": "message",
            "location": 134,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedLeftRecursion.message": {
            "name": "message",
            "location": 140,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/grammars.py": {
        "ref": {
            "name": "ref",
            "location": 35,
            "return": [
                "Tuple[_ref]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "kdot": {
            "name": "kdot",
            "location": 39,
            "return": [
                "Counter",
                "str",
                "List[str]",
                "int",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "float",
                    "T"
                ],
                "y": [
                    "List[str]",
                    "int",
                    "float"
                ],
                "k": [
                    "int",
                    "Tuple[float,float]",
                    "float",
                    "Callable[[None],bool]",
                    "str"
                ]
            }
        },
        "pythonize_name": {
            "name": "pythonize_name",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[Union[dict,dict]]",
                    "pathlib.Path",
                    "bool",
                    "Tuple[Dict,Dict]"
                ]
            }
        },
        "_ref.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBNFBuffer.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "comments_re": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "eol_comments_re": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "EBNFBuffer.process_block": {
            "name": "process_block",
            "location": 65,
            "return": [
                "Tuple[(_T1, _T2)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bytes"
                ],
                "lines": [
                    "int",
                    "str"
                ],
                "index": [
                    "str",
                    "int",
                    "SupportsInt"
                ]
            }
        },
        "EBNFBuffer.pragma": {
            "name": "pragma",
            "location": 79,
            "return": [
                "int",
                "str",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "str",
                    "Dict",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "None"
                ],
                "name": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ],
                "arg": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "bool",
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "List[Dict[str,Any]]"
                ],
                "lines": [
                    "int",
                    "str",
                    "Dict",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "None"
                ],
                "index": [
                    "int",
                    "str",
                    "Dict",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "None"
                ],
                "i": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "str",
                    "Dict",
                    "Optional[Tuple[int,int]]"
                ]
            }
        },
        "ModelContext.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "Dict",
                    "bool",
                    "None",
                    "str"
                ],
                "config": [
                    "None"
                ]
            }
        },
        "ModelContext.pos": {
            "name": "pos",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelContext._find_rule": {
            "name": "_find_rule",
            "location": 101,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Model.classes": {
            "name": "classes",
            "location": 107,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "bool",
                    "str",
                    "None"
                ],
                "ctx": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Model.parse": {
            "name": "parse",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "denite.util.UserContext"
                ]
            }
        },
        "Model.defines": {
            "name": "defines",
            "location": 130,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._add_defined_attributes": {
            "name": "_add_defined_attributes",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ],
                "ast": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Model.lookahead": {
            "name": "lookahead",
            "location": 146,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "T",
                    "Union[int,float]"
                ]
            }
        },
        "Model.lookahead_str": {
            "name": "lookahead_str",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.firstset": {
            "name": "firstset",
            "location": 154,
            "return": [
                "int",
                "Set",
                "str",
                "Callable",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str"
                ]
            }
        },
        "Model.followset": {
            "name": "followset",
            "location": 159,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "KT"
                ]
            }
        },
        "Model.missing_rules": {
            "name": "missing_rules",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Model._used_rule_names": {
            "name": "_used_rule_names",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._first": {
            "name": "_first",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Model._follow": {
            "name": "_follow",
            "location": 171,
            "return": [
                "float",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "str",
                    "int"
                ],
                "fl": [
                    "bool",
                    "str",
                    "int"
                ],
                "a": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Model.is_nullable": {
            "name": "is_nullable",
            "location": 174,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "None"
                ]
            }
        },
        "Model._nullable": {
            "name": "_nullable",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.at_same_pos": {
            "name": "at_same_pos",
            "location": 181,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Model.comments_str": {
            "name": "comments_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.nodecount": {
            "name": "nodecount",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pretty": {
            "name": "pretty",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pretty_lean": {
            "name": "pretty_lean",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._to_str": {
            "name": "_to_str",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.parse": {
            "name": "parse",
            "location": 211,
            "return": [
                "str",
                "int",
                "Iterator[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Void._to_str": {
            "name": "_to_str",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Void._nullable": {
            "name": "_nullable",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Any.parse": {
            "name": "parse",
            "location": 222,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [
                    "_TAny@@Any@@"
                ],
                "ctx": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "Any._to_str": {
            "name": "_to_str",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Fail.parse": {
            "name": "parse",
            "location": 230,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Fail._to_str": {
            "name": "_to_str",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Comment.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "None",
                    "int",
                    "IO[str]",
                    "List[str]",
                    "IO"
                ]
            }
        },
        "Comment._to_str": {
            "name": "_to_str",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "EOLComment._to_str": {
            "name": "_to_str",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "EOF.parse": {
            "name": "parse",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ]
            }
        },
        "EOF._to_str": {
            "name": "_to_str",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Decorator.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "float",
                    "None"
                ],
                "exp": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Callable",
                    "Optional[Callable]",
                    "Hashable",
                    "Optional[Hashable]",
                    "bool"
                ]
            }
        },
        "Decorator.parse": {
            "name": "parse",
            "location": 270,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Decorator.defines": {
            "name": "defines",
            "location": 273,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decorator.missing_rules": {
            "name": "missing_rules",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Decorator._used_rule_names": {
            "name": "_used_rule_names",
            "location": 279,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decorator._first": {
            "name": "_first",
            "location": 282,
            "return": [
                "bool",
                "Callable",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "Callable[...,None]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "List[str]",
                    "T",
                    "List[Tuple[str,Any]]"
                ],
                "f": [
                    "Callable[...,None]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "List[str]",
                    "T",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "Decorator._follow": {
            "name": "_follow",
            "location": 285,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "Dict[str,object]",
                    "static_frame.core.util.IndexConstructor"
                ],
                "fl": [
                    "bool",
                    "Dict[str,object]",
                    "static_frame.core.util.IndexConstructor"
                ],
                "a": [
                    "bool",
                    "Dict[str,object]",
                    "static_frame.core.util.IndexConstructor"
                ]
            }
        },
        "Decorator.nodecount": {
            "name": "nodecount",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decorator._to_str": {
            "name": "_to_str",
            "location": 291,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "int",
                    "pathlib.Path",
                    "Dict"
                ]
            }
        },
        "Decorator._nullable": {
            "name": "_nullable",
            "location": 294,
            "return": [
                "tatsu.leftrec._Single"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decorator.at_same_pos": {
            "name": "at_same_pos",
            "location": 297,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Group.parse": {
            "name": "parse",
            "location": 306,
            "return": [
                "str",
                "List[str]",
                "type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Group._to_str": {
            "name": "_to_str",
            "location": 311,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "Union[str,Tuple[Any]]",
                    "List[int]",
                    "str",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "Token.__post_init__": {
            "name": "__post_init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.parse": {
            "name": "parse",
            "location": 325,
            "return": [
                "str",
                "OrderedDict",
                "Mapping",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Token._first": {
            "name": "_first",
            "location": 328,
            "return": [
                "Set[Tuple[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Token._to_str": {
            "name": "_to_str",
            "location": 331,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Constant.__post_init__": {
            "name": "__post_init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.parse": {
            "name": "parse",
            "location": 340,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Constant._first": {
            "name": "_first",
            "location": 349,
            "return": [
                "Set[Tuple[()]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Constant._to_str": {
            "name": "_to_str",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Constant._nullable": {
            "name": "_nullable",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.__post_init__": {
            "name": "__post_init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.parse": {
            "name": "parse",
            "location": 365,
            "return": [
                "int",
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "Alert._to_str": {
            "name": "_to_str",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Pattern.__post_init__": {
            "name": "__post_init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pattern.pattern": {
            "name": "pattern",
            "location": 383,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pattern.parse": {
            "name": "parse",
            "location": 386,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Pattern._first": {
            "name": "_first",
            "location": 389,
            "return": [
                "Set[tuple[Pattern]]",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Pattern._to_str": {
            "name": "_to_str",
            "location": 396,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Pattern._nullable": {
            "name": "_nullable",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pattern.__repr__": {
            "name": "__repr__",
            "location": 410,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lookahead.parse": {
            "name": "parse",
            "location": 415,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Lookahead._to_str": {
            "name": "_to_str",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "int",
                    "pathlib.Path",
                    "Dict"
                ]
            }
        },
        "Lookahead._nullable": {
            "name": "_nullable",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NegativeLookahead.parse": {
            "name": "parse",
            "location": 427,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "NegativeLookahead._to_str": {
            "name": "_to_str",
            "location": 431,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "Union[str,Tuple[Any]]",
                    "List[int]",
                    "str",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "NegativeLookahead._nullable": {
            "name": "_nullable",
            "location": 434,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipTo.parse": {
            "name": "parse",
            "location": 439,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "SkipTo._first": {
            "name": "_first",
            "location": 443,
            "return": [
                "Optional[int]",
                "list",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Exception",
                    "None",
                    "BaseException",
                    "Optional[str]",
                    "Optional[Exception]"
                ],
                "f": [
                    "str",
                    "Exception",
                    "None",
                    "BaseException",
                    "Optional[str]",
                    "Optional[Exception]"
                ]
            }
        },
        "SkipTo._to_str": {
            "name": "_to_str",
            "location": 447,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "int",
                    "pathlib.Path",
                    "Dict"
                ]
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "bool",
                    "Union[str,List[str],Tuple[str,...]]",
                    "List[str]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "Sequence.parse": {
            "name": "parse",
            "location": 457,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Sequence.defines": {
            "name": "defines",
            "location": 461,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.missing_rules": {
            "name": "missing_rules",
            "location": 464,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "float",
                    "Tuple",
                    "str"
                ]
            }
        },
        "Sequence._used_rule_names": {
            "name": "_used_rule_names",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence._first": {
            "name": "_first",
            "location": 470,
            "return": [
                "Set[tuple]",
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "float",
                    "int",
                    "List[Union[PipeChain,str]]",
                    "List[Union[P,str]]",
                    "Tuple[bool,str]",
                    "Tuple[Union[bool,str]]"
                ],
                "f": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "Sequence._follow": {
            "name": "_follow",
            "location": 481,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "Dict[str,int]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Tuple[float,float]"
                ],
                "fl": [
                    "Dict",
                    "List[float]",
                    "float",
                    "bool",
                    "List[Tuple[int,int,int]]",
                    "List[tuple[Union[int,int,int]]]"
                ],
                "a": [
                    "_T2@@"
                ]
            }
        },
        "Sequence.nodecount": {
            "name": "nodecount",
            "location": 490,
            "return": [
                "int",
                "List[str]",
                "str",
                "List[Tuple[Any,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence._to_str": {
            "name": "_to_str",
            "location": 493,
            "return": [
                "str",
                "Callable[[T], List[T]]"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Sequence._nullable": {
            "name": "_nullable",
            "location": 502,
            "return": [
                "tatsu.leftrec._All"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.at_same_pos": {
            "name": "at_same_pos",
            "location": 505,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Choice.__init__": {
            "name": "__init__",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "Choice.parse": {
            "name": "parse",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Choice.defines": {
            "name": "defines",
            "location": 530,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.missing_rules": {
            "name": "missing_rules",
            "location": 533,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "float",
                    "Tuple",
                    "str"
                ]
            }
        },
        "Choice._used_rule_names": {
            "name": "_used_rule_names",
            "location": 536,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice._first": {
            "name": "_first",
            "location": 539,
            "return": [
                "Dict[str,Any]",
                "deoplete.util.UserContext",
                "Dict",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "f": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "Choice._follow": {
            "name": "_follow",
            "location": 546,
            "return": [
                "float",
                "int",
                "str",
                "bool",
                "List[int]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool",
                    "List[int]",
                    "int",
                    "Pattern",
                    "Pattern[str]"
                ],
                "fl": [
                    "str",
                    "bool",
                    "List[int]",
                    "int",
                    "Pattern",
                    "Pattern[str]"
                ],
                "a": [
                    "str",
                    "bool",
                    "List[int]",
                    "int",
                    "Pattern",
                    "Pattern[str]"
                ]
            }
        },
        "Choice.nodecount": {
            "name": "nodecount",
            "location": 551,
            "return": [
                "int",
                "bool",
                "Tuple[int,int]",
                "Tuple",
                "Union[List[str],str]",
                "denite.util.UserContext",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice._to_str": {
            "name": "_to_str",
            "location": 554,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "int",
                    "Union[str,bool,None]",
                    "float",
                    "str"
                ]
            }
        },
        "Choice._nullable": {
            "name": "_nullable",
            "location": 567,
            "return": [
                "tatsu.leftrec._Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.at_same_pos": {
            "name": "at_same_pos",
            "location": 570,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Option.parse": {
            "name": "parse",
            "location": 575,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "str",
                "Optional[Union[str,Any]]",
                "Dict[str,tuple[Union[Any,Any]]]",
                "List[tuple[Union[Any,str]]]",
                "Dict[str,Union[int,None]]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "int"
                ]
            }
        },
        "Closure.parse": {
            "name": "parse",
            "location": 582,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Closure._first": {
            "name": "_first",
            "location": 585,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "AbstractSet[int]",
                    "int",
                    "AbstractSet"
                ],
                "f": [
                    "str",
                    "List"
                ]
            }
        },
        "Closure._to_str": {
            "name": "_to_str",
            "location": 592,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "Closure._nullable": {
            "name": "_nullable",
            "location": 599,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositiveClosure.parse": {
            "name": "parse",
            "location": 604,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PositiveClosure._first": {
            "name": "_first",
            "location": 607,
            "return": [
                "bool",
                "deoplete.util.UserContext",
                "Set[tuple]",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "AbstractSet[int]",
                    "int",
                    "AbstractSet"
                ],
                "f": [
                    "str",
                    "List"
                ]
            }
        },
        "PositiveClosure._to_str": {
            "name": "_to_str",
            "location": 614,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "int",
                    "pathlib.Path",
                    "Dict"
                ]
            }
        },
        "PositiveClosure._nullable": {
            "name": "_nullable",
            "location": 617,
            "return": [
                "tatsu.leftrec._Single"
            ],
            "arguments": {
                "self": []
            }
        },
        "Join.__init__": {
            "name": "__init__",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ]
            }
        },
        "Join.parse": {
            "name": "parse",
            "location": 628,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        },
        "Join._do_parse": {
            "name": "_do_parse",
            "location": 637,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ],
                "exp": [
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "Join._to_str": {
            "name": "_to_str",
            "location": 640,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Callable",
                    "Pattern",
                    "Optional[int]"
                ]
            }
        },
        "Join._nullable": {
            "name": "_nullable",
            "location": 648,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositiveJoin._do_parse": {
            "name": "_do_parse",
            "location": 653,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ],
                "exp": [
                    "bool"
                ],
                "sep": [
                    "bool"
                ]
            }
        },
        "PositiveJoin._to_str": {
            "name": "_to_str",
            "location": 656,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "int",
                    "pathlib.Path",
                    "Dict"
                ]
            }
        },
        "PositiveJoin._nullable": {
            "name": "_nullable",
            "location": 659,
            "return": [
                "tatsu.leftrec._Single"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftJoin._do_parse": {
            "name": "_do_parse",
            "location": 666,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ],
                "exp": [
                    "bool"
                ],
                "sep": [
                    "bool"
                ]
            }
        },
        "RightJoin._do_parse": {
            "name": "_do_parse",
            "location": 673,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ],
                "exp": [
                    "bool"
                ],
                "sep": [
                    "bool"
                ]
            }
        },
        "Gather._do_parse": {
            "name": "_do_parse",
            "location": 680,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ],
                "exp": [
                    "typing.Any"
                ],
                "sep": [
                    "typing.Any"
                ]
            }
        },
        "PositiveGather._do_parse": {
            "name": "_do_parse",
            "location": 685,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ],
                "exp": [
                    "bool"
                ],
                "sep": [
                    "bool"
                ]
            }
        },
        "PositiveGather._to_str": {
            "name": "_to_str",
            "location": 688,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "int",
                    "pathlib.Path",
                    "Dict"
                ]
            }
        },
        "PositiveGather._nullable": {
            "name": "_nullable",
            "location": 691,
            "return": [
                "tatsu.leftrec._Single"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyClosure.parse": {
            "name": "parse",
            "location": 696,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "EmptyClosure._first": {
            "name": "_first",
            "location": 699,
            "return": [
                "Set[Tuple[()]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "EmptyClosure._to_str": {
            "name": "_to_str",
            "location": 702,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "EmptyClosure._nullable": {
            "name": "_nullable",
            "location": 705,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optional.parse": {
            "name": "parse",
            "location": 710,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Optional._first": {
            "name": "_first",
            "location": 716,
            "return": [
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "List"
                ],
                "f": [
                    "str",
                    "List"
                ]
            }
        },
        "Optional._to_str": {
            "name": "_to_str",
            "location": 719,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "Optional._nullable": {
            "name": "_nullable",
            "location": 734,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cut.parse": {
            "name": "parse",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Cut._first": {
            "name": "_first",
            "location": 743,
            "return": [
                "Set[Tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Cut._to_str": {
            "name": "_to_str",
            "location": 746,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Cut._nullable": {
            "name": "_nullable",
            "location": 749,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Named.__init__": {
            "name": "__init__",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "None",
                    "Exception",
                    "denite.util.Nvim"
                ]
            }
        },
        "Named.parse": {
            "name": "parse",
            "location": 758,
            "return": [
                "Dict[str,str]",
                "str",
                "Dict",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "Named.defines": {
            "name": "defines",
            "location": 763,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Named._to_str": {
            "name": "_to_str",
            "location": 766,
            "return": [
                "Text",
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NamedList.parse": {
            "name": "parse",
            "location": 773,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "opentrons.protocol_api.contexts.ProtocolContext"
                ]
            }
        },
        "NamedList.defines": {
            "name": "defines",
            "location": 778,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedList._to_str": {
            "name": "_to_str",
            "location": 781,
            "return": [
                "Text",
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "denite.util.Nvim",
                    "List[str]"
                ]
            }
        },
        "Override.__init__": {
            "name": "__init__",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "bool",
                    "None",
                    "List[Callable]",
                    "str",
                    "Union[pathlib.Path,str]",
                    "int"
                ]
            }
        },
        "Override.defines": {
            "name": "defines",
            "location": 791,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverrideList.__init__": {
            "name": "__init__",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "bool",
                    "None",
                    "List[Callable]",
                    "str",
                    "Union[pathlib.Path,str]",
                    "int"
                ]
            }
        },
        "OverrideList.defines": {
            "name": "defines",
            "location": 799,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Special._first": {
            "name": "_first",
            "location": 804,
            "return": [
                "Set[Tuple[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Special._to_str": {
            "name": "_to_str",
            "location": 807,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Special._nullable": {
            "name": "_nullable",
            "location": 810,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleRef.__post_init__": {
            "name": "__post_init__",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleRef.parse": {
            "name": "parse",
            "location": 819,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Any"
                ]
            }
        },
        "RuleRef.missing_rules": {
            "name": "missing_rules",
            "location": 827,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RuleRef._used_rule_names": {
            "name": "_used_rule_names",
            "location": 832,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleRef._first": {
            "name": "_first",
            "location": 835,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Deque",
                    "Deque[int]",
                    "List",
                    "str",
                    "List[list[str]]",
                    "Dict[str,object]",
                    "List[List[str]]",
                    "bool"
                ],
                "f": [
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "Mapping",
                    "T",
                    "Mapping[str,Any]"
                ]
            }
        },
        "RuleRef._follow": {
            "name": "_follow",
            "location": 839,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "str",
                    "int"
                ],
                "fl": [
                    "str",
                    "bool",
                    "Tuple"
                ],
                "a": [
                    "bool",
                    "int"
                ]
            }
        },
        "RuleRef.firstset": {
            "name": "firstset",
            "location": 843,
            "return": [
                "int",
                "Dict[Union[str,None],str]",
                "Callable",
                "Dict",
                "str",
                "Set"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "KT"
                ]
            }
        },
        "RuleRef._to_str": {
            "name": "_to_str",
            "location": 848,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "RuleRef.is_nullable": {
            "name": "is_nullable",
            "location": 851,
            "return": [
                "str",
                "Type",
                "int",
                "type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "RuleInclude.__init__": {
            "name": "__init__",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "Callable",
                    "nevergrad.common.Union[pathlib.Path,str]"
                ]
            }
        },
        "RuleInclude._to_str": {
            "name": "_to_str",
            "location": 861,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "int",
                    "Callable[,T]"
                ]
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Sequence[int]",
                    "bool",
                    "float"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "exp": [
                    "Sequence[int]",
                    "bool",
                    "float"
                ],
                "params": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "kwparams": [
                    "Any",
                    "Optional[Any]",
                    "bool",
                    "None",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "decorators": [
                    "str",
                    "None",
                    "Dict",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]",
                    "Callable[[str],bool]",
                    "Callable[[List],bool]"
                ]
            }
        },
        "Rule.parse": {
            "name": "parse",
            "location": 879,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ]
            }
        },
        "Rule._parse_rhs": {
            "name": "_parse_rhs",
            "location": 883,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ],
                "exp": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Rule._first": {
            "name": "_first",
            "location": 898,
            "return": [
                "int",
                "str",
                "Callable",
                "None",
                "bool",
                "List[str]",
                "Dict",
                "float",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "Type",
                    "Callable[...,None]",
                    "Sequence[float]",
                    "Callable[...,T]"
                ],
                "f": [
                    "Type",
                    "Callable[...,None]",
                    "Sequence[float]",
                    "Callable[...,T]"
                ]
            }
        },
        "Rule._follow": {
            "name": "_follow",
            "location": 902,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int",
                    "Optional[List[Any]]"
                ],
                "fl": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int",
                    "Optional[List[Any]]"
                ],
                "a": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Rule._nullable": {
            "name": "_nullable",
            "location": 905,
            "return": [
                "tatsu.leftrec._Single"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.param_repr": {
            "name": "param_repr",
            "location": 909,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "slice"
                ]
            }
        },
        "Rule._to_str": {
            "name": "_to_str",
            "location": 917,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "str",
                    "Type",
                    "Optional[Exception]"
                ]
            }
        },
        "BasedRule.__init__": {
            "name": "__init__",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "exp": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "base": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "params": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "kwparams": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "decorators": [
                    "str",
                    "None",
                    "Optional[Union[str,pathlib.Path]]"
                ]
            }
        },
        "BasedRule.parse": {
            "name": "parse",
            "location": 977,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        },
        "BasedRule.defines": {
            "name": "defines",
            "location": 980,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__init__": {
            "name": "__init__",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "None"
                ],
                "directives": [
                    "None"
                ]
            }
        },
        "Grammar.keywords": {
            "name": "keywords",
            "location": 1016,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.semantics": {
            "name": "semantics",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "Tuple[int, int]",
                    "float",
                    "str",
                    "Mapping[str, Any]",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "Grammar.missing_rules": {
            "name": "missing_rules",
            "location": 1027,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "str",
                    "int"
                ]
            }
        },
        "Grammar._used_rule_names": {
            "name": "_used_rule_names",
            "location": 1030,
            "return": [
                "Union[(set, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.used_rules": {
            "name": "used_rules",
            "location": 1045,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.first_sets": {
            "name": "first_sets",
            "location": 1050,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar._calc_lookahead_sets": {
            "name": "_calc_lookahead_sets",
            "location": 1053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "Callable[,bool]",
                    "KT",
                    "str"
                ]
            }
        },
        "Grammar._calc_first_sets": {
            "name": "_calc_first_sets",
            "location": 1057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "Dict",
                    "lib.Path",
                    "Dict[str,LabwareDefinition]",
                    "bool"
                ]
            }
        },
        "Grammar._calc_follow_sets": {
            "name": "_calc_follow_sets",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "List",
                    "Callable[[T],None]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Grammar.parse": {
            "name": "parse",
            "location": 1080,
            "return": [
                "List[util.Block]",
                "util.XYZ"
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "None"
                ],
                "ctx": [
                    "bool",
                    "None"
                ]
            }
        },
        "Grammar.nodecount": {
            "name": "nodecount",
            "location": 1093,
            "return": [
                "int",
                "str",
                "Tuple",
                "Union[List[str],str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar._to_str": {
            "name": "_to_str",
            "location": 1096,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lean": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Join.parse.sep": {
            "name": "sep",
            "location": 629,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {}
        },
        "Join.parse.exp": {
            "name": "exp",
            "location": 632,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/tatsu/infos.py": {
        "ParserConfig.__post_init__": {
            "name": "__post_init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserConfig.new": {
            "name": "new",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "config": [
                    "None"
                ],
                "owner": [
                    "None"
                ]
            }
        },
        "ParserConfig.effective_rule_name": {
            "name": "effective_rule_name",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserConfig._find_common": {
            "name": "_find_common",
            "location": 84,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserConfig.replace_config": {
            "name": "replace_config",
            "location": 91,
            "return": [
                "ParserConfig"
            ],
            "arguments": {
                "self": [
                    "_TParserConfig@@ParserConfig@@"
                ],
                "other": [
                    "None"
                ]
            }
        },
        "ParserConfig.replace": {
            "name": "replace",
            "location": 99,
            "return": [
                "ParserConfig"
            ],
            "arguments": {
                "self": [
                    "_TParserConfig@@ParserConfig@@"
                ]
            }
        },
        "ParserConfig.merge": {
            "name": "merge",
            "location": 106,
            "return": [
                "ParserConfig"
            ],
            "arguments": {
                "self": [
                    "_TParserConfig@@ParserConfig@@"
                ]
            }
        },
        "ParserConfig.asdict": {
            "name": "asdict",
            "location": 114,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PosLine.build_line_cache": {
            "name": "build_line_cache",
            "location": 128,
            "return": [
                "Tuple[(list, int)]"
            ],
            "arguments": {
                "lines": []
            }
        },
        "LineIndexInfo.block_index": {
            "name": "block_index",
            "location": 149,
            "return": [
                "list"
            ],
            "arguments": {
                "name": [],
                "n": []
            }
        },
        "CommentInfo.new_comment": {
            "name": "new_comment",
            "location": 167,
            "return": [
                "CommentInfo"
            ],
            "arguments": {}
        },
        "ParseInfo.text_lines": {
            "name": "text_lines",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseInfo.line_index": {
            "name": "line_index",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseInfo.buffer": {
            "name": "buffer",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RuleInfo.__hash__": {
            "name": "__hash__",
            "location": 211,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleInfo.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RuleInfo.__ne__": {
            "name": "__ne__",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "TatSu-master/tatsu/leftrec.py": {
        "follow": {
            "name": "follow",
            "location": 11,
            "return": [
                "bool",
                "Dict[str,Any]",
                "str",
                "Dict[str,str]",
                "Type",
                "Callable",
                "Set",
                "List[str]",
                "Mapping"
            ],
            "arguments": {
                "node": [
                    "Dict[str,Any]",
                    "bool",
                    "Type",
                    "Set",
                    "Mapping"
                ],
                "rule_dict": [
                    "Set[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "resolve_nullability": {
            "name": "resolve_nullability",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "grammar": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "rule_dict": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "find_left_recursion": {
            "name": "find_left_recursion",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "grammar": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "Nullable.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "float",
                    "bool"
                ],
                "resolved": [
                    "bool",
                    "int",
                    "float"
                ],
                "nullable": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Nullable.resolve": {
            "name": "resolve",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Iterable",
                    "bool",
                    "Sequence[str]"
                ],
                "rule_dict": [
                    "str",
                    "Iterable",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "Nullable.resolve_with": {
            "name": "resolve_with",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "_All.resolve": {
            "name": "resolve",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Iterable",
                    "bool",
                    "Sequence[str]"
                ],
                "rule_dict": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]"
                ]
            }
        },
        "_Any.resolve": {
            "name": "resolve",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Iterable",
                    "bool",
                    "Sequence[str]"
                ],
                "rule_dict": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]"
                ]
            }
        },
        "_Single.resolve": {
            "name": "resolve",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Iterable",
                    "bool",
                    "Sequence[str]"
                ],
                "rule_dict": []
            }
        },
        "resolve_nullability.walk": {
            "name": "walk",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "resolve_nullability.resolve": {
            "name": "resolve",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Set[int]",
                    "int"
                ]
            }
        },
        "find_left_recursion.walk": {
            "name": "walk",
            "location": 144,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "model": [
                    "str"
                ]
            }
        }
    },
    "TatSu-master/tatsu/model.py": {},
    "TatSu-master/tatsu/objectmodel.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": []
            }
        },
        "Node.__post_init__": {
            "name": "__post_init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.parent": {
            "name": "parent",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.line": {
            "name": "line",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.endline": {
            "name": "endline",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.text_lines": {
            "name": "text_lines",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.line_index": {
            "name": "line_index",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.col": {
            "name": "col",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.context": {
            "name": "context",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.line_info": {
            "name": "line_info",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.text": {
            "name": "text",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.comments": {
            "name": "comments",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node._deref": {
            "name": "_deref",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node._find_children": {
            "name": "_find_children",
            "location": 106,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.children_list": {
            "name": "children_list",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.children_set": {
            "name": "children_set",
            "location": 139,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.children": {
            "name": "children",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.asjson": {
            "name": "asjson",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._pubdict": {
            "name": "_pubdict",
            "location": 148,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__json__": {
            "name": "__json__",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 164,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node._nonrefdict": {
            "name": "_nonrefdict",
            "location": 185,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__getstate__": {
            "name": "__getstate__",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__setstate__": {
            "name": "__setstate__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Node._find_children.with_parent": {
            "name": "with_parent",
            "location": 107,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Node._find_children.children_of": {
            "name": "children_of",
            "location": 111,
            "return": [],
            "arguments": {
                "child": []
            }
        }
    },
    "TatSu-master/tatsu/parser.py": {
        "EBNFParser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "semantics": [
                    "Optional[float]",
                    "None",
                    "str",
                    "Optional[int]",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "GrammarGenerator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar_name": [
                    "str",
                    "None"
                ],
                "semantics": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "float"
                ],
                "parseinfo": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Union[int,List[int]]",
                    "str"
                ]
            }
        }
    },
    "TatSu-master/tatsu/parser_semantics.py": {
        "EBNFGrammarSemantics.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EBNFGrammarSemantics.token": {
            "name": "token",
            "location": 20,
            "return": [
                "grammars.Token"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Dict[str,str]",
                    "Sequence[Tuple[float,float]]",
                    "bytes",
                    "Sequence[tuple[Union[float,float]]]",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.pattern": {
            "name": "pattern",
            "location": 26,
            "return": [
                "grammars.Pattern"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "Callable",
                    "List",
                    "Dict",
                    "dss.util.types.JSON"
                ]
            }
        },
        "EBNFGrammarSemantics.regexes": {
            "name": "regexes",
            "location": 29,
            "return": [
                "str",
                "int",
                "Callable",
                "List[list[str]]",
                "List",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "List",
                    "List[list[str]]",
                    "List[str]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "EBNFGrammarSemantics.regex": {
            "name": "regex",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.string": {
            "name": "string",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.hex": {
            "name": "hex",
            "location": 48,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.float": {
            "name": "float",
            "location": 51,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.int": {
            "name": "int",
            "location": 54,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.cut_deprecated": {
            "name": "cut_deprecated",
            "location": 57,
            "return": [
                "grammars.Cut"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EBNFGrammarSemantics.override_single_deprecated": {
            "name": "override_single_deprecated",
            "location": 61,
            "return": [
                "grammars.Override"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.sequence": {
            "name": "sequence",
            "location": 65,
            "return": [
                "Sequence",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.choice": {
            "name": "choice",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "bool",
                    "list",
                    "List[T]",
                    "List[float]",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.new_name": {
            "name": "new_name",
            "location": 77,
            "return": [
                "str",
                "Type",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "EBNFGrammarSemantics.known_name": {
            "name": "known_name",
            "location": 82,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "EBNFGrammarSemantics.boolean": {
            "name": "boolean",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.rule": {
            "name": "rule",
            "location": 90,
            "return": [
                "grammars.Rule"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "EBNFGrammarSemantics.rule_include": {
            "name": "rule_include",
            "location": 113,
            "return": [
                "grammars.RuleInclude"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Dict",
                    "Union[int,str]"
                ]
            }
        },
        "EBNFGrammarSemantics.grammar": {
            "name": "grammar",
            "location": 120,
            "return": [
                "grammars.Grammar"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "TatSu-master/tatsu/parsing.py": {
        "Parser._find_rule": {
            "name": "_find_rule",
            "location": 11,
            "return": [
                "int",
                "str",
                "Set",
                "List",
                "bytes",
                "None",
                "bool",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal]]",
                "List[str]",
                "Dict[str,list[Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Parser.rule_list": {
            "name": "rule_list",
            "location": 21,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "Type",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "TatSu-master/tatsu/rendering.py": {
        "render": {
            "name": "render",
            "location": 13,
            "return": [
                "bool",
                "denite.util.UserContext",
                "Text",
                "Optional[int]",
                "str",
                "Mapping",
                "Any",
                "MutableMapping",
                "Match",
                "Type"
            ],
            "arguments": {
                "item": [
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[Any]",
                    "Match",
                    "Any",
                    "MutableMapping[str,Any]",
                    "None",
                    "MutableMapping",
                    "Type[object]",
                    "Type"
                ],
                "join": [
                    "Text",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "RenderingFormatter.render": {
            "name": "render",
            "location": 31,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ],
                "join": [
                    "Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "RenderingFormatter.format_field": {
            "name": "format_field",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "format_spec": [
                    "str",
                    "Type"
                ]
            }
        },
        "Renderer.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "bool",
                    "None",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Type",
                    "Dict[str,Any]",
                    "Dict",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Renderer.counter": {
            "name": "counter",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "Type",
                    "int",
                    "complex",
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        },
        "Renderer.reset_counter": {
            "name": "reset_counter",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Renderer.formatter": {
            "name": "formatter",
            "location": 94,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Renderer.rend": {
            "name": "rend",
            "location": 97,
            "return": [
                "int",
                "Optional[int]",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "join": [
                    "Text",
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "Renderer.indent": {
            "name": "indent",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T"
                ],
                "ind": [
                    "int",
                    "str",
                    "T"
                ],
                "multiplier": [
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "Renderer.trim": {
            "name": "trim",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T"
                ],
                "tabwidth": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Renderer.render_fields": {
            "name": "render_fields",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Renderer.render": {
            "name": "render",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderer.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderer.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/semantics.py": {
        "ASTSemantics.group": {
            "name": "group",
            "location": 13,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "str",
                    "None",
                    "int",
                    "List[Dict[str,Any]]",
                    "Union[str,List]",
                    "List[dict[str,Any]]",
                    "List"
                ]
            }
        },
        "ASTSemantics.element": {
            "name": "element",
            "location": 16,
            "return": [
                "str",
                "List[Dict]",
                "List[List[Any]]",
                "List[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "List[Exception]",
                    "int",
                    "None",
                    "float",
                    "Union[str,List]",
                    "str",
                    "Iterable[T]",
                    "List"
                ]
            }
        },
        "ASTSemantics.sequence": {
            "name": "sequence",
            "location": 19,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "str",
                    "None",
                    "int",
                    "List[Dict[str,Any]]",
                    "Union[str,List]",
                    "List[dict[str,Any]]",
                    "List"
                ]
            }
        },
        "ASTSemantics.choice": {
            "name": "choice",
            "location": 22,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "Sequence[int]",
                    "List[List[int]]",
                    "Sequence[Any]"
                ]
            }
        },
        "ModelBuilderSemantics.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Type",
                    "None",
                    "AbstractSet[TemplatePropertyVariable]",
                    "Type[T]",
                    "AbstractSet"
                ],
                "base_type": [
                    "str",
                    "bool",
                    "Type"
                ],
                "types": [
                    "bool",
                    "None",
                    "str",
                    "Callable[[int],Any]",
                    "Type",
                    "Callable[[str],Any]",
                    "Callable[int,Any]",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "ModelBuilderSemantics._register_constructor": {
            "name": "_register_constructor",
            "location": 43,
            "return": [
                "int",
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "constructor": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ModelBuilderSemantics._find_existing_constructor": {
            "name": "_find_existing_constructor",
            "location": 47,
            "return": [
                "None",
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "bool",
                    "Type",
                    "Iterable"
                ]
            }
        },
        "ModelBuilderSemantics._get_constructor": {
            "name": "_get_constructor",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "Exception",
                    "bytes",
                    "bool",
                    "Union[str,bytes]",
                    "int"
                ],
                "base": [
                    "str"
                ]
            }
        },
        "ModelBuilderSemantics._default": {
            "name": "_default",
            "location": 76,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict"
                ]
            }
        }
    },
    "TatSu-master/tatsu/symtables.py": {
        "join_symtables": {
            "name": "join_symtables",
            "location": 16,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "tables": [
                    "Tuple[str]",
                    "int",
                    "List[str]",
                    "List[int]",
                    "Callable"
                ]
            }
        },
        "join_symtables.join_namespaces": {
            "name": "join_namespaces",
            "location": 17,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[List[Any]]",
                    "type",
                    "dict"
                ],
                "target": [
                    "T",
                    "int",
                    "bool"
                ]
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignorecase": [
                    "int",
                    "bool",
                    "float"
                ],
                "duplicates": [
                    "int",
                    "bool",
                    "float"
                ],
                "separator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Namespace.entries": {
            "name": "entries",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.symbols": {
            "name": "symbols",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.names": {
            "name": "names",
            "location": 57,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.all_names": {
            "name": "all_names",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__contains__": {
            "name": "__contains__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Namespace.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Namespace.get": {
            "name": "get",
            "location": 83,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "Namespace.insert": {
            "name": "insert",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Namespace.lookup_all": {
            "name": "lookup_all",
            "location": 96,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "qualname": [
                    "str"
                ],
                "drill": [
                    "str",
                    "dict"
                ]
            }
        },
        "Namespace.lookup": {
            "name": "lookup",
            "location": 101,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Dict[str, Any]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "qualname": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "dict"
                ],
                "drill": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "Namespace._lookup_drilldown": {
            "name": "_lookup_drilldown",
            "location": 107,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "namelist": [
                    "float",
                    "str",
                    "denite.util.UserContext",
                    "bytes",
                    "int"
                ],
                "drill": [
                    "float",
                    "str",
                    "denite.util.UserContext",
                    "bytes",
                    "int"
                ],
                "max": [
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "float",
                    "bytes"
                ]
            }
        },
        "Namespace.resolve": {
            "name": "resolve",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "qualname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Namespace.filter": {
            "name": "filter",
            "location": 122,
            "return": [
                "list",
                "str",
                "dict",
                "Union[int, None]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Namespace.filter_first": {
            "name": "filter_first",
            "location": 125,
            "return": [
                "bool",
                "Iterable",
                "str",
                "List[object]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "dict"
                ]
            }
        },
        "Namespace.all": {
            "name": "all",
            "location": 131,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.asjson": {
            "name": "asjson",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__json__": {
            "name": "__json__",
            "location": 140,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.add_reference": {
            "name": "add_reference",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qualname": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "from_node": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Symbol.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[\"CustomerResourceIdentifier\"]",
                    "Optional[str]"
                ],
                "node": [
                    "int",
                    "str",
                    "bool"
                ],
                "ignorecase": [
                    "bool",
                    "int"
                ],
                "duplicates": [
                    "bool",
                    "int"
                ]
            }
        },
        "Symbol.node": {
            "name": "node",
            "location": 161,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.line": {
            "name": "line",
            "location": 165,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.endline": {
            "name": "endline",
            "location": 169,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.parent": {
            "name": "parent",
            "location": 173,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.references": {
            "name": "references",
            "location": 178,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.insert": {
            "name": "insert",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "static_frame.core.util.NameType",
                    "str",
                    "dict",
                    "Callable[[dict], None]"
                ]
            }
        },
        "Symbol.qualpath": {
            "name": "qualpath",
            "location": 185,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.qualname": {
            "name": "qualname",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "Symbol._lookup_drilldown": {
            "name": "_lookup_drilldown",
            "location": 193,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "namelist": [
                    "str",
                    "int"
                ],
                "drill": [
                    "str",
                    "bytes",
                    "List[int]",
                    "float"
                ],
                "max": [
                    "str",
                    "bytes",
                    "List[int]",
                    "float"
                ]
            }
        },
        "Symbol.resolve": {
            "name": "resolve",
            "location": 205,
            "return": [
                "str",
                "float",
                "int",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "qualname": [
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "Symbol.filter": {
            "name": "filter",
            "location": 208,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "Symbol.filter_first": {
            "name": "filter_first",
            "location": 212,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "bool",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "Symbol.add_reference": {
            "name": "add_reference",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qualname": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "node": []
            }
        },
        "Symbol.line_index": {
            "name": "line_index",
            "location": 223,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "include_entries": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "list"
                ],
                "include_references": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "list"
                ]
            }
        },
        "Symbol.reference_line_index": {
            "name": "reference_line_index",
            "location": 240,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__json__": {
            "name": "__json__",
            "location": 251,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__getstate__": {
            "name": "__getstate__",
            "location": 258,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__setstate__": {
            "name": "__setstate__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BasedSymbol.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "int",
                    "str"
                ],
                "node": [
                    "bool",
                    "int",
                    "str"
                ],
                "duplicates": [
                    "bool",
                    "int"
                ]
            }
        },
        "BasedSymbol.bases": {
            "name": "bases",
            "location": 275,
            "return": [
                "str",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasedSymbol.add_base": {
            "name": "add_base",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "KT",
                    "Callable",
                    "T"
                ]
            }
        },
        "BasedSymbol._lookup_drilldown": {
            "name": "_lookup_drilldown",
            "location": 282,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "namelist": [
                    "deoplete.util.UserContext",
                    "denite.util.UserContext",
                    "str"
                ],
                "drill": [
                    "deoplete.util.UserContext",
                    "denite.util.UserContext",
                    "str"
                ],
                "max": [
                    "deoplete.util.UserContext",
                    "denite.util.UserContext",
                    "str"
                ]
            }
        },
        "BasedSymbol.__json__": {
            "name": "__json__",
            "location": 293,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/synth.py": {
        "synthesize": {
            "name": "synthesize",
            "location": 15,
            "return": [
                "Type",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable[[float],bool]",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "bases": [
                    "Optional[float]",
                    "float",
                    "int"
                ]
            }
        },
        "_Synthetic.__reduce__": {
            "name": "__reduce__",
            "location": 7,
            "return": [
                "Tuple[(Any, Tuple[()], Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/tokenizing.py": {
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.error": {
            "name": "error",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.filename": {
            "name": "filename",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.ignorecase": {
            "name": "ignorecase",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.pos": {
            "name": "pos",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.goto": {
            "name": "goto",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Tokenizer.atend": {
            "name": "atend",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.ateol": {
            "name": "ateol",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.current": {
            "name": "current",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.token": {
            "name": "token",
            "location": 40,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.next": {
            "name": "next",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.next_token": {
            "name": "next_token",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.match": {
            "name": "match",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Optional[int]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Tokenizer.matchre": {
            "name": "matchre",
            "location": 52,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Tokenizer.posline": {
            "name": "posline",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Tokenizer.line_info": {
            "name": "line_info",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "Type",
                    "None",
                    "bytes"
                ]
            }
        },
        "Tokenizer.get_lines": {
            "name": "get_lines",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "None",
                    "bool"
                ],
                "end": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "Tokenizer.lookahead": {
            "name": "lookahead",
            "location": 64,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.lookahead_pos": {
            "name": "lookahead_pos",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/tool.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 30,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 157,
            "return": [
                "Optional[str]",
                "str",
                "Dict",
                "List[None]",
                "Set",
                "Dict[str,str]",
                "Dict[Type,dict[str,str]]",
                "Dict[str,dict[str,str]]"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "List[str]",
                    "Dict[str,util.JSONType]",
                    "Dict[str,T]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "semantics": [
                    "str",
                    "None",
                    "bool",
                    "Optional[List[int]]",
                    "List[str]",
                    "Optional[Callable]",
                    "List[int]",
                    "Optional[Callable[...,Any]]",
                    "Callable"
                ],
                "asmodel": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "Dict[str,Any]"
                ],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ],
                "input": [
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Mapping",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "start": [
                    "Dict[str,Any]",
                    "None",
                    "Mapping[str,str]",
                    "Optional[int]",
                    "Mapping",
                    "bool",
                    "int"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ],
                "semantics": [
                    "str",
                    "NamedTuple",
                    "None",
                    "int"
                ],
                "asmodel": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "config": [
                    "str",
                    "NamedTuple",
                    "None",
                    "int"
                ]
            }
        },
        "to_python_sourcecode": {
            "name": "to_python_sourcecode",
            "location": 180,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "config": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "to_python_model": {
            "name": "to_python_model",
            "location": 185,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]",
                    "Dict",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]",
                    "Dict"
                ],
                "filename": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]",
                    "Dict"
                ],
                "base_type": [
                    "bool",
                    "None",
                    "str",
                    "Type",
                    "Callable",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "config": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "genmodel": {
            "name": "genmodel",
            "location": 191,
            "return": [
                "Optional[str]",
                "Optional[Type]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Type[BaseConfig]",
                    "Type",
                    "Dict[str,util.JSONType]",
                    "Dict[str,T]"
                ],
                "grammar": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[bool]",
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "semantics": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Type[BaseConfig]",
                    "Type",
                    "Dict[str,util.JSONType]",
                    "Dict[str,T]"
                ],
                "config": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Type[BaseConfig]",
                    "Type",
                    "Dict[str,util.JSONType]",
                    "Dict[str,T]"
                ]
            }
        },
        "gencode": {
            "name": "gencode",
            "location": 198,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "grammar": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "trace": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "codegen": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "prepare_for_output": {
            "name": "prepare_for_output",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "content": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "codegen": [
                    "List[str]",
                    "dict",
                    "str",
                    "Callable",
                    "Optional[argparse.Namespace]"
                ]
            }
        },
        "parse_args.import_class": {
            "name": "import_class",
            "location": 115,
            "return": [
                "bool",
                "Type",
                "str",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "TatSu-master/tatsu/walkers.py": {
        "NodeWalker.__new__": {
            "name": "__new__",
            "location": 12,
            "return": [
                "NodeWalker"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNodeWalker]"
                ]
            }
        },
        "NodeWalker.walk": {
            "name": "walk",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeWalker._walk_children": {
            "name": "_walk_children",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeWalker._find_walker": {
            "name": "_find_walker",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "prefix": []
            }
        },
        "PreOrderWalker.walk": {
            "name": "walk",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DepthFirstWalker.walk": {
            "name": "walk",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ContextWalker.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_context": []
            }
        },
        "ContextWalker.get_node_context": {
            "name": "get_node_context",
            "location": 104,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ]
            }
        },
        "ContextWalker.enter_context": {
            "name": "enter_context",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ContextWalker.leave_context": {
            "name": "leave_context",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ContextWalker.push_context": {
            "name": "push_context",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ContextWalker.pop_context": {
            "name": "pop_context",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextWalker.initial_context": {
            "name": "initial_context",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextWalker.context": {
            "name": "context",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextWalker.new_context": {
            "name": "new_context",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeWalker._find_walker.pythonize_match": {
            "name": "pythonize_match",
            "location": 30,
            "return": [],
            "arguments": {
                "m": []
            }
        }
    },
    "TatSu-master/tatsu/_config.py": {},
    "TatSu-master/tatsu/_version.py": {},
    "TatSu-master/tatsu/__init__.py": {},
    "TatSu-master/tatsu/__main__.py": {},
    "TatSu-master/tatsu/codegen/cgbase.py": {
        "DelegatingRenderingFormatter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DelegatingRenderingFormatter.render": {
            "name": "render",
            "location": 23,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Pattern",
                "Iterator",
                "List[str]",
                "bytes",
                "Dict",
                "Dict[str,str]",
                "List"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "str"
                ],
                "join": [
                    "Text",
                    "List[str]",
                    "str"
                ]
            }
        },
        "DelegatingRenderingFormatter.convert_field": {
            "name": "convert_field",
            "location": 29,
            "return": [
                "int",
                "tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict",
                    "bool",
                    "Union[dict,List[Any]]",
                    "List[str]",
                    "List[Any]",
                    "List",
                    "VT"
                ],
                "conversion": [
                    "str",
                    "bool"
                ]
            }
        },
        "ModelRenderer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "codegen": [
                    "str",
                    "List[Tuple[int,int]]",
                    "bool",
                    "List[tuple[Union[int,int]]]",
                    "Optional[str]",
                    "None"
                ],
                "node": [
                    "str",
                    "List[Tuple[int,int]]",
                    "bool",
                    "List[tuple[Union[int,int]]]",
                    "Optional[str]",
                    "None"
                ],
                "template": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ModelRenderer.__postinit__": {
            "name": "__postinit__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelRenderer.__getattr__": {
            "name": "__getattr__",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ModelRenderer.node": {
            "name": "node",
            "location": 58,
            "return": [
                "blib2to3.pytree.Node",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelRenderer.codegen": {
            "name": "codegen",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelRenderer.context": {
            "name": "context",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelRenderer.get_renderer": {
            "name": "get_renderer",
            "location": 69,
            "return": [
                "Optional[str]",
                "str",
                "tuple",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ]
            }
        },
        "ModelRenderer.render": {
            "name": "render",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modules": [
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "CodeGenerator._find_module_renderers": {
            "name": "_find_module_renderers",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "modules": [
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "ClassVar",
                    "bool",
                    "Callable"
                ]
            }
        },
        "CodeGenerator._find_renderer_class": {
            "name": "_find_renderer_class",
            "location": 114,
            "return": [
                "None",
                "str",
                "Optional[type]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict"
                ]
            }
        },
        "CodeGenerator.get_renderer": {
            "name": "get_renderer",
            "location": 135,
            "return": [
                "None",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str,Any]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Iterable[T]",
                    "None",
                    "Optional[str]",
                    "Dict",
                    "T"
                ]
            }
        },
        "CodeGenerator.render": {
            "name": "render",
            "location": 148,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "Dict[str,str]"
                ],
                "join": [
                    "Text",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "TatSu-master/tatsu/codegen/objectmodel.py": {
        "codegen": {
            "name": "codegen",
            "location": 33,
            "return": [
                "str",
                "Callable",
                "list",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "base_type": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_get_node_class_name": {
            "name": "_get_node_class_name",
            "location": 37,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Sequence[str]]",
                "Union[None,List[str]]"
            ],
            "arguments": {
                "rule": [
                    "str"
                ]
            }
        },
        "_typespec": {
            "name": "_typespec",
            "location": 51,
            "return": [
                "List[TypeSpec]"
            ],
            "arguments": {
                "rule": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "_get_full_name": {
            "name": "_get_full_name",
            "location": 66,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Callable[...,Awaitable[None]]",
                    "Exception",
                    "Callable[...,collections.abc.Awaitable[None]]"
                ]
            }
        },
        "BaseTypeRenderer.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_type": [
                    "str"
                ]
            }
        },
        "BaseTypeRenderer.render_fields": {
            "name": "render_fields",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Container[Taxon]",
                    "Container",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "BaseClassRenderer.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "Dict",
                    "str",
                    "Mapping",
                    "denite.util.UserContext",
                    "Mapping[str,Any]"
                ]
            }
        },
        "ObjectModelCodeGenerator._find_renderer_class": {
            "name": "_find_renderer_class",
            "location": 128,
            "return": [
                "None",
                "str",
                "Optional[type]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict",
                    "Iterable[bytes]"
                ]
            }
        },
        "Rule.render_fields": {
            "name": "render_fields",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "int"
                ]
            }
        },
        "Grammar.render_fields": {
            "name": "render_fields",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "type",
                    "Container[\"Taxon\"]",
                    "Optional[int]"
                ]
            }
        }
    },
    "TatSu-master/tatsu/codegen/python.py": {
        "codegen": {
            "name": "codegen",
            "location": 36,
            "return": [
                "Union[str, List[str]]",
                "str"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "PythonCodeGenerator._find_renderer_class": {
            "name": "_find_renderer_class",
            "location": 25,
            "return": [
                "None",
                "str",
                "Optional[type]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict",
                    "Iterable[bytes]"
                ]
            }
        },
        "Base.defines": {
            "name": "defines",
            "location": 41,
            "return": [
                "int",
                "blib2to3.pytree.Node",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.make_defines_declaration": {
            "name": "make_defines_declaration",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.render_fields": {
            "name": "render_fields",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Token.render_fields": {
            "name": "render_fields",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "Constant.render_fields": {
            "name": "render_fields",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Dict",
                    "MutableMapping[str,Any]",
                    "Mapping[str,str]",
                    "str"
                ]
            }
        },
        "Alert.render_fields": {
            "name": "render_fields",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Type"
                ]
            }
        },
        "Pattern.render_fields": {
            "name": "render_fields",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Sequence.render_fields": {
            "name": "render_fields",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "int"
                ]
            }
        },
        "Choice.render_fields": {
            "name": "render_fields",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Choice.render": {
            "name": "render",
            "location": 179,
            "return": [
                "Iterable",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.render_fields": {
            "name": "render_fields",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "Tuple[Set[str],Set[str]]"
                ]
            }
        },
        "Closure.render_fields": {
            "name": "render_fields",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,List[Callable]]",
                    "Dict[str,list[Callable]]"
                ]
            }
        },
        "Closure.render": {
            "name": "render",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Join.render_fields": {
            "name": "render_fields",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,List[Callable]]",
                    "Dict[str,list[Callable]]"
                ]
            }
        },
        "Join.render": {
            "name": "render",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Named.__str__": {
            "name": "__str__",
            "location": 328,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Named.render_fields": {
            "name": "render_fields",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Dict"
                ]
            }
        },
        "RuleInclude.render_fields": {
            "name": "render_fields",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str"
                ]
            }
        },
        "Rule.param_repr": {
            "name": "param_repr",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "Rule.render": {
            "name": "render",
            "location": 383,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.render_fields": {
            "name": "render_fields",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "BasedRule.defines": {
            "name": "defines",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasedRule.render_fields": {
            "name": "render_fields",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Type",
                    "str",
                    "Dict"
                ]
            }
        },
        "Grammar.render_fields": {
            "name": "render_fields",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Dict",
                    "Dict[str,Any]",
                    "MutableMapping[str,Any]",
                    "Type",
                    "MutableMapping",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        }
    },
    "TatSu-master/tatsu/codegen/__init__.py": {
        "codegen": {
            "name": "codegen",
            "location": 12,
            "return": [
                "str",
                "float",
                "bytearray"
            ],
            "arguments": {
                "model": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "target": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        }
    },
    "TatSu-master/tatsu/collections/orderedset.py": {
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "str",
                    "Optional[Callable]",
                    "float",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__getitem__": {
            "name": "__getitem__",
            "location": 30,
            "return": [
                "Tuple",
                "str",
                "List[str]",
                "List[Dict]",
                "Union[List,Tuple]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "float",
                    "List[int]"
                ]
            }
        },
        "OrderedSet.copy": {
            "name": "copy",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__getstate__": {
            "name": "__getstate__",
            "location": 38,
            "return": [
                "Optional[str]",
                "Tuple[None]",
                "Optional[int]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__setstate__": {
            "name": "__setstate__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[Outcome]",
                    "None",
                    "Union[str,bool]",
                    "str",
                    "bool"
                ]
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[int]",
                    "int",
                    "float",
                    "str",
                    "List[bytes]",
                    "List[str]",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "OrderedSet.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "OrderedSet.pop": {
            "name": "pop",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str,Any]",
                "Dict",
                "Set[str]",
                "Tuple[str]",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict",
                    "str",
                    "bool",
                    "List[str]",
                    "List",
                    "T"
                ]
            }
        },
        "OrderedSet.clear": {
            "name": "clear",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 75,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [
                "Text",
                "str",
                "List[str]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "bool",
                "List[str]",
                "int",
                "Set[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[List[Type]]",
                    "int",
                    "List[Type]",
                    "None"
                ]
            }
        },
        "OrderedSet.union": {
            "name": "union",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__and__": {
            "name": "__and__",
            "location": 94,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "OrderedSet.intersection": {
            "name": "intersection",
            "location": 97,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.difference": {
            "name": "difference",
            "location": 102,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.issubset": {
            "name": "issubset",
            "location": 107,
            "return": [
                "bool",
                "List[str]",
                "int",
                "Set[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[List[Type]]",
                    "int",
                    "List[Type]",
                    "None"
                ]
            }
        },
        "OrderedSet.issuperset": {
            "name": "issuperset",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "OrderedSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 115,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "bool"
                ]
            }
        },
        "OrderedSet.difference_update": {
            "name": "difference_update",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.intersection_update": {
            "name": "intersection_update",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/collections/tail.py": {
        "Tail.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Tail.start": {
            "name": "start",
            "location": 11,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tail.tailfull": {
            "name": "tailfull",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tail.insert": {
            "name": "insert",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[object]",
                    "float",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "value": [
                    "str",
                    "Optional[object]",
                    "float",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Tail.flush": {
            "name": "flush",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tail.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Tail.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "float",
                    "int",
                    "None",
                    "Optional[object]",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "float",
                    "int",
                    "None",
                    "Optional[object]",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Tail.__delitem__": {
            "name": "__delitem__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Tail.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/collections/__init__.py": {},
    "TatSu-master/tatsu/g2e/semantics.py": {
        "camel2py": {
            "name": "camel2py",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,dict]",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "ANTLRSemantics.grammar": {
            "name": "grammar",
            "location": 25,
            "return": [
                "model.Grammar"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "ANTLRSemantics.rule": {
            "name": "rule",
            "location": 31,
            "return": [
                "Optional[model.Rule]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Union[int,slice]",
                    "int"
                ]
            }
        },
        "ANTLRSemantics.alternatives": {
            "name": "alternatives",
            "location": 52,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "ast": []
            }
        },
        "ANTLRSemantics.elements": {
            "name": "elements",
            "location": 60,
            "return": [
                "int",
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "List[int]",
                    "int",
                    "bytes",
                    "str",
                    "List",
                    "src.core.model.library.Library"
                ]
            }
        },
        "ANTLRSemantics.predicate_or_action": {
            "name": "predicate_or_action",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.named": {
            "name": "named",
            "location": 72,
            "return": [
                "model.Named"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "Callable",
                    "rflx.model.Enumeration"
                ]
            }
        },
        "ANTLRSemantics.syntactic_predicate": {
            "name": "syntactic_predicate",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.optional": {
            "name": "optional",
            "location": 81,
            "return": [
                "model.Optional"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "Dict[int,Any]",
                    "allennlp.models.model.Model",
                    "int",
                    "model.Snapshot"
                ]
            }
        },
        "ANTLRSemantics.closure": {
            "name": "closure",
            "location": 86,
            "return": [
                "model.Closure"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict[str,Any]",
                    "allennlp.models.model.Model",
                    "str",
                    "int"
                ]
            }
        },
        "ANTLRSemantics.positive_closure": {
            "name": "positive_closure",
            "location": 91,
            "return": [
                "model.PositiveClosure"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Dict[int,Any]",
                    "bool",
                    "str",
                    "allennlp.models.model.Model"
                ]
            }
        },
        "ANTLRSemantics.negative": {
            "name": "negative",
            "location": 96,
            "return": [
                "model.Sequence"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "float",
                    "Dict[str,model.Integration]"
                ]
            }
        },
        "ANTLRSemantics.subexp": {
            "name": "subexp",
            "location": 101,
            "return": [
                "model.Group"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.regexp": {
            "name": "regexp",
            "location": 104,
            "return": [
                "model.Pattern"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "List",
                    "List[list[str]]",
                    "List[str]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "ANTLRSemantics.charset_optional": {
            "name": "charset_optional",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.charset_closure": {
            "name": "charset_closure",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.charset_positive_closure": {
            "name": "charset_positive_closure",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.charset_or": {
            "name": "charset_or",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "ANTLRSemantics.charset_negative_or": {
            "name": "charset_negative_or",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "ANTLRSemantics.escape": {
            "name": "escape",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]",
                    "List[T]",
                    "Exception",
                    "float"
                ]
            }
        },
        "ANTLRSemantics.charset_atom": {
            "name": "charset_atom",
            "location": 128,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.charset_char": {
            "name": "charset_char",
            "location": 131,
            "return": [
                "str",
                "bool",
                "List[List[int]]",
                "List[dict[str,Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "ANTLRSemantics.charset_range": {
            "name": "charset_range",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ANTLRSemantics.newranges": {
            "name": "newranges",
            "location": 137,
            "return": [
                "model.Pattern"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "List",
                    "List[list[str]]",
                    "List[str]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "ANTLRSemantics.newrange": {
            "name": "newrange",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int"
                ]
            }
        },
        "ANTLRSemantics.negative_newrange": {
            "name": "negative_newrange",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int"
                ]
            }
        },
        "ANTLRSemantics.rule_ref": {
            "name": "rule_ref",
            "location": 152,
            "return": [
                "model.RuleRef"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "float"
                ]
            }
        },
        "ANTLRSemantics.any": {
            "name": "any",
            "location": 156,
            "return": [
                "model.Pattern"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.string": {
            "name": "string",
            "location": 159,
            "return": [
                "model.Token"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ANTLRSemantics.eof": {
            "name": "eof",
            "location": 165,
            "return": [
                "model.EOF"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ANTLRSemantics.token": {
            "name": "token",
            "location": 168,
            "return": [
                "Union[(model.Fail, model.Token)]"
            ],
            "arguments": {
                "self": [],
                "ast": []
            }
        },
        "ANTLRSemantics.token_ref": {
            "name": "token_ref",
            "location": 179,
            "return": [
                "str",
                "int",
                "Type[T]",
                "List[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "Iterable[Any]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        }
    },
    "TatSu-master/tatsu/g2e/__init__.py": {
        "antlr_grammar": {
            "name": "antlr_grammar",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "translate": {
            "name": "translate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Optional[Any]",
                    "Any"
                ],
                "filename": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Union[int,float]",
                    "int",
                    "float"
                ],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "waterbutler.core.path.WaterButlerPath"
                ],
                "encoding": [
                    "str",
                    "Text"
                ],
                "trace": [
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/tatsu/g2e/__main__.py": {},
    "TatSu-master/tatsu/mixins/indent.py": {
        "IndentPrintMixin.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IndentPrintMixin.print": {
            "name": "print",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndentPrintMixin.as_printed": {
            "name": "as_printed",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndentPrintMixin.as_printed_lines": {
            "name": "as_printed_lines",
            "location": 24,
            "return": [
                "str",
                "bool",
                "Type",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndentPrintMixin.indent": {
            "name": "indent",
            "location": 29,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndentPrintMixin.current_indentation": {
            "name": "current_indentation",
            "location": 37,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndentPrintMixin.io_print": {
            "name": "io_print",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "IndentPrintMixin._do_print_lines": {
            "name": "_do_print_lines",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "IndentPrintMixin.indented_lines": {
            "name": "indented_lines",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "TatSu-master/tatsu/mixins/__init__.py": {},
    "TatSu-master/tatsu/util/misc.py": {
        "first": {
            "name": "first",
            "location": 10,
            "return": [
                "_undefined",
                "Callable",
                "bool",
                "Optional[T]"
            ],
            "arguments": {
                "iterable": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int,int]"
                ],
                "default": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "match_to_find": {
            "name": "match_to_find",
            "location": 41,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "m": [
                    "Dict[str,Any]"
                ]
            }
        },
        "findalliter": {
            "name": "findalliter",
            "location": 53,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "string": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "pos": [
                    "str",
                    "None",
                    "Dict",
                    "bool",
                    "Union[int,str]",
                    "int"
                ],
                "endpos": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ],
                "flags": [
                    "str",
                    "int"
                ]
            }
        },
        "findfirst": {
            "name": "findfirst",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int"
                ],
                "string": [
                    "str",
                    "int"
                ],
                "pos": [
                    "str",
                    "int",
                    "None"
                ],
                "endpos": [
                    "str",
                    "int",
                    "None"
                ],
                "flags": [
                    "int",
                    "str"
                ],
                "default": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "TatSu-master/tatsu/util/parproc.py": {
        "processing_loop": {
            "name": "processing_loop",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "process": [
                    "Callable",
                    "str",
                    "bool",
                    "AbstractSet[str]",
                    "AbstractSet"
                ],
                "filenames": [
                    "str",
                    "IO[str]",
                    "Callable"
                ]
            }
        },
        "process_payload": {
            "name": "process_payload",
            "location": 73,
            "return": [
                "ParprocResult"
            ],
            "arguments": {
                "process": [
                    "List[str]",
                    "int",
                    "List[Dict]",
                    "Dict[str,Any]",
                    "List[dict]"
                ],
                "task": [],
                "pickable": [
                    "bool",
                    "list",
                    "Optional[bool]",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "_executor_pmap": {
            "name": "_executor_pmap",
            "location": 94,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "executor": [
                    "int",
                    "Tuple[float]"
                ],
                "process": [
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "Mapping"
                ],
                "tasks": [
                    "Tuple[int]",
                    "str",
                    "int",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "_thread_pmap": {
            "name": "_thread_pmap",
            "location": 105,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "process": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ],
                "tasks": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "_process_pmap": {
            "name": "_process_pmap",
            "location": 109,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "process": [
                    "str",
                    "int"
                ],
                "tasks": [
                    "str",
                    "int"
                ]
            }
        },
        "_imap_pmap": {
            "name": "_imap_pmap",
            "location": 113,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "process": [
                    "str",
                    "int"
                ],
                "tasks": [
                    "str",
                    "List[str]",
                    "Sequence[Tuple[str, Any]]"
                ]
            }
        },
        "_imap_pmap_ng": {
            "name": "_imap_pmap_ng",
            "location": 130,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "process": [
                    "int",
                    "str"
                ],
                "tasks": [
                    "int",
                    "str"
                ]
            }
        },
        "process_in_parallel": {
            "name": "process_in_parallel",
            "location": 143,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "payloads": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Dict[str,Callable[,None]]"
                ],
                "process": [
                    "int",
                    "Dict",
                    "float"
                ]
            }
        },
        "file_process_progress": {
            "name": "file_process_progress",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "latest_result": [
                    "bool",
                    "str",
                    "Dict[str,str]"
                ],
                "results_count": [
                    "int",
                    "float",
                    "bool",
                    "Callable"
                ],
                "success_count": [
                    "int"
                ],
                "total": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "total_time": [
                    "bool",
                    "str",
                    "int",
                    "Union[str,Iterable[str]]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "format_minutes": {
            "name": "format_minutes",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "result": [
                    "Dict",
                    "str",
                    "float",
                    "Union[int,float]",
                    "int"
                ]
            }
        },
        "format_hours": {
            "name": "format_hours",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "time": [
                    "float",
                    "int",
                    "str",
                    "time.Time",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "file_process_summary": {
            "name": "file_process_summary",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[str, str]"
                ],
                "total_time": [
                    "int",
                    "Callable",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "results": [
                    "str",
                    "Dict[int,Any]",
                    "int",
                    "defaultdict"
                ],
                "verbose": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "ParprocResult.success": {
            "name": "success",
            "location": 35,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/tatsu/util/testing.py": {
        "parallel_test_run": {
            "name": "parallel_test_run",
            "location": 7,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "parse": [
                    "str"
                ],
                "options": [
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 40,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "generic_main": {
            "name": "generic_main",
            "location": 92,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "parse": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "parallel_test_run.pysearch": {
            "name": "pysearch",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "TatSu-master/tatsu/util/unicode_characters.py": {},
    "TatSu-master/tatsu/util/_common.py": {
        "is_posix": {
            "name": "is_posix",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_prints": {
            "name": "_prints",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "warning": {
            "name": "warning",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "error": {
            "name": "error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 81,
            "return": [
                "int",
                "Dict[str, List[str]]",
                "Dict[str, int]",
                "str",
                "Iterable"
            ],
            "arguments": {}
        },
        "is_list": {
            "name": "is_list",
            "location": 87,
            "return": [
                "type",
                "Type[Any]",
                "bool"
            ],
            "arguments": {
                "o": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "to_list": {
            "name": "to_list",
            "location": 91,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "o": [
                    "Optional[\"Outcome\"]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "bool"
                ]
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "simplify_list": {
            "name": "simplify_list",
            "location": 110,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]"
            ],
            "arguments": {
                "x": [
                    "list",
                    "int",
                    "tuple"
                ]
            }
        },
        "extend_list": {
            "name": "extend_list",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence",
                    "List[T]"
                ],
                "default": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "contains_sublist": {
            "name": "contains_sublist",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "lst": [
                    "List[int]",
                    "bool",
                    "Dict[str, str]",
                    "List[Tuple[int, int]]",
                    "List[float]",
                    "list",
                    "str",
                    "int"
                ],
                "sublst": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "List[List[int]]",
                    "Sequence[T]",
                    "list",
                    "List[float]"
                ]
            }
        },
        "join_lists": {
            "name": "join_lists",
            "location": 130,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "lists": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "Type[Any]",
                    "List[str]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 134,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "o": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "compress_seq": {
            "name": "compress_seq",
            "location": 143,
            "return": [
                "list"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "eval_escapes": {
            "name": "eval_escapes",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "isiter": {
            "name": "isiter",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "Iterable[Any]",
                    "Union[str, 'Type']",
                    "datetime.timedelta"
                ]
            }
        },
        "trim": {
            "name": "trim",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "tabwidth": [
                    "str",
                    "bool"
                ]
            }
        },
        "indent": {
            "name": "indent",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "indent": [
                    "str"
                ],
                "multiplier": [
                    "str"
                ]
            }
        },
        "format_if": {
            "name": "format_if",
            "location": 216,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]",
                    "float"
                ],
                "values": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]",
                    "float"
                ]
            }
        },
        "notnone": {
            "name": "notnone",
            "location": 220,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "value": [
                    "Optional[datetime.timedelta]",
                    "Optional[str]",
                    "float",
                    "bytes",
                    "str",
                    "Optional[object]",
                    "Optional[Dict[str, Any]]"
                ],
                "default": [
                    "Optional[datetime.timedelta]",
                    "Optional[str]",
                    "float",
                    "bytes",
                    "str",
                    "Optional[object]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "timestamp": {
            "name": "timestamp",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "asjson": {
            "name": "asjson",
            "location": 228,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "obj": [
                    "type"
                ],
                "seen": [
                    "Optional[int]",
                    "Type",
                    "Match[str]"
                ]
            }
        },
        "minjson": {
            "name": "minjson",
            "location": 262,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, List[str]]",
                    "bool",
                    "str",
                    "Dict[str, object]"
                ],
                "typesfiltered": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "plainjson": {
            "name": "plainjson",
            "location": 279,
            "return": [
                "Union[(dict, list, str, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, object]"
                ]
            }
        },
        "asjsons": {
            "name": "asjsons",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "prune_dict": {
            "name": "prune_dict",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Callable[[Any], str]",
                    "str"
                ],
                "predicate": [
                    "Callable[[Any], str]",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "dict",
                    "type"
                ]
            }
        },
        "safe_name": {
            "name": "safe_name",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 314,
            "return": [
                "itertools.zip_longest"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "bool"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "bool"
                ],
                "fillvalue": [
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "generic_main": {
            "name": "generic_main",
            "location": 318,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "custom_main": [
                    "bool",
                    "list",
                    "argparse.ArgumentParser"
                ],
                "parser_class": [
                    "str",
                    "bool",
                    "IO[str]"
                ],
                "name": [
                    "argparse.ArgumentParser",
                    "bool",
                    "str"
                ]
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 371,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fun": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "left_assoc": {
            "name": "left_assoc",
            "location": 386,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "elements": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "right_assoc": {
            "name": "right_assoc",
            "location": 398,
            "return": [
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "elements": [
                    "str",
                    "list",
                    "List[Dict]"
                ]
            }
        },
        "try_read": {
            "name": "try_read",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "filelist_from_patterns": {
            "name": "filelist_from_patterns",
            "location": 437,
            "return": [
                "List[pathlib.Path]"
            ],
            "arguments": {
                "patterns": [
                    "argparse._SubParsersAction",
                    "str",
                    "int",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "ignore": [
                    "argparse._SubParsersAction",
                    "str",
                    "int",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "base": [
                    "argparse._SubParsersAction",
                    "str",
                    "int",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "sizesort": [
                    "argparse._SubParsersAction",
                    "str",
                    "int",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "short_relative_path": {
            "name": "short_relative_path",
            "location": 471,
            "return": [
                "Union[(str, pathlib.Path)]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ],
                "base": [
                    "str",
                    "pathlib.Path",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "extend_list._null": {
            "name": "_null",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "eval_escapes.decode_match": {
            "name": "decode_match",
            "location": 165,
            "return": [
                "dict",
                "int",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "match": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "deprecated.wrapper": {
            "name": "wrapper",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "right_assoc.assoc": {
            "name": "assoc",
            "location": 402,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "it": [
                    "str",
                    "bytes"
                ]
            }
        },
        "memory_use": {
            "name": "memory_use",
            "location": 417,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "filelist_from_patterns.excluded": {
            "name": "excluded",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "BinaryIO",
                    "pathlib2.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "generic_main.ListRules.__call__": {
            "name": "__call__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "namespace": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "values": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "option_string": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "TatSu-master/tatsu/util/__init__.py": {},
    "TatSu-master/test/ast_test.py": {
        "suite": {
            "name": "suite",
            "location": 49,
            "return": [
                "unittest.suite.TestSuite"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ASTTests.test_ast": {
            "name": "test_ast",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTTests.test_init": {
            "name": "test_init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTTests.test_empty": {
            "name": "test_empty",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTTests.test_add": {
            "name": "test_add",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTTests.test_iter": {
            "name": "test_iter",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/buffering_test.py": {
        "suite": {
            "name": "suite",
            "location": 108,
            "return": [
                "unittest.suite.TestSuite"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BufferingTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_pos_consistency": {
            "name": "test_pos_consistency",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_next_consisntency": {
            "name": "test_next_consisntency",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_goto_consistency": {
            "name": "test_goto_consistency",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_line_consistency": {
            "name": "test_line_consistency",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_line_info_consistency": {
            "name": "test_line_info_consistency",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_linecount": {
            "name": "test_linecount",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferingTests.test_namechars": {
            "name": "test_namechars",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/codegen_test.py": {
        "suite": {
            "name": "suite",
            "location": 43,
            "return": [
                "unittest.suite.TestSuite"
            ],
            "arguments": {}
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator._find_renderer_class": {
            "name": "_find_renderer_class",
            "location": 14,
            "return": [
                "Optional[bool]",
                "Union[str, None]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict",
                    "Node",
                    "List[N]",
                    "str",
                    "src.evalg.encoding.BinaryTree.Node",
                    "List[kedro.pipeline.node.Node]",
                    "yaml.Node"
                ]
            }
        },
        "Super.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "TestCodegen.test_basic_codegen": {
            "name": "test_basic_codegen",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/diagram_test.py": {
        "suite": {
            "name": "suite",
            "location": 29,
            "return": [
                "unittest.suite.TestSuite"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DiagramTests.test_dot": {
            "name": "test_dot",
            "location": 15,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/misc_test.py": {
        "MiscTests.test_import_mapping_from_collectionsABC": {
            "name": "test_import_mapping_from_collectionsABC",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/model_test.py": {
        "test_node_kwargs": {
            "name": "test_node_kwargs",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_node_kwargs.Atom.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "None",
                    "bool",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "symbol": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[InstrumentBase]",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "TatSu-master/test/parser_equivalence_test.py": {
        "generate_and_load_parser": {
            "name": "generate_and_load_parser",
            "location": 44,
            "return": [
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Type"
                ],
                "grammar": [
                    "str"
                ]
            }
        },
        "test_model_parse": {
            "name": "test_model_parse",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_codegen_parse": {
            "name": "test_codegen_parse",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_messages": {
            "name": "test_error_messages",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_checked": {
            "name": "test_name_checked",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_checked.subtest": {
            "name": "subtest",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        }
    },
    "TatSu-master/test/parsing_test.py": {
        "suite": {
            "name": "suite",
            "location": 108,
            "return": [
                "unittest.suite.TestSuite"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockIncludeBuffer.get_include": {
            "name": "get_include",
            "location": 13,
            "return": [
                "Tuple[(str, _T1)]"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "filename": [
                    "_T1@@"
                ]
            }
        },
        "ParsingTests.test_include": {
            "name": "test_include",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingTests.test_multiple_include": {
            "name": "test_multiple_include",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingTests.test_real_include": {
            "name": "test_real_include",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingTests.test_escape_sequences": {
            "name": "test_escape_sequences",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingTests.test_rule_name": {
            "name": "test_rule_name",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingTests.test_rule_capitalization": {
            "name": "test_rule_capitalization",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsingTests.test_startrule_issue62": {
            "name": "test_startrule_issue62",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/pickle_test.py": {
        "test_synth_model": {
            "name": "test_synth_model",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_class_synth_model": {
            "name": "test_nested_class_synth_model",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/test/walker_test.py": {
        "test_walk_node_ast": {
            "name": "test_walk_node_ast",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_walk_node_ast.PW.walk_Node": {
            "name": "walk_Node",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "TatSu-master/test/__init__.py": {},
    "TatSu-master/test/__main__.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/test/grammar/alerts_test.py": {
        "test_alert_interpolation": {
            "name": "test_alert_interpolation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/test/grammar/constants_test.py": {
        "test_constant_interpolation": {
            "name": "test_constant_interpolation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_constant_interpolation_free": {
            "name": "test_constant_interpolation_free",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_constant_interpolation_multiline": {
            "name": "test_constant_interpolation_multiline",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/test/grammar/defines_test.py": {
        "test_name_in_option": {
            "name": "test_name_in_option",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_by_option": {
            "name": "test_by_option",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inner_options": {
            "name": "test_inner_options",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/test/grammar/directive_test.py": {
        "DirectiveTests.test_whitespace_directive": {
            "name": "test_whitespace_directive",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_whitespace_none_directive": {
            "name": "test_whitespace_none_directive",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_eol_comments_re_directive": {
            "name": "test_eol_comments_re_directive",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_left_recursion_directive": {
            "name": "test_left_recursion_directive",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_whitespace_no_newlines": {
            "name": "test_whitespace_no_newlines",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_grammar_directive": {
            "name": "test_grammar_directive",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_parseinfo_directive": {
            "name": "test_parseinfo_directive",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveTests.test_nameguard_directive": {
            "name": "test_nameguard_directive",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/error_test.py": {
        "test_missing_rule": {
            "name": "test_missing_rule",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_rules": {
            "name": "test_missing_rules",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TatSu-master/test/grammar/firstfollow_test.py": {
        "FirstFollowTests.test_direct_left_recursion": {
            "name": "test_direct_left_recursion",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        },
        "FirstFollowTests.test_indirect_left_recursion": {
            "name": "test_indirect_left_recursion",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        },
        "FirstFollowTests.test_nullability": {
            "name": "test_nullability",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/join_test.py": {
        "JoinTests.test_positive_join": {
            "name": "test_positive_join",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_normal_join": {
            "name": "test_normal_join",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_group_join": {
            "name": "test_group_join",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_positive_gather": {
            "name": "test_positive_gather",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_normal_gather": {
            "name": "test_normal_gather",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_group_gather": {
            "name": "test_group_gather",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_left_join": {
            "name": "test_left_join",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinTests.test_right_join": {
            "name": "test_right_join",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/keyword_test.py": {
        "KeywordTests.test_keywords_in_rule_names": {
            "name": "test_keywords_in_rule_names",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_python_keywords_in_rule_names": {
            "name": "test_python_keywords_in_rule_names",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_define_keywords": {
            "name": "test_define_keywords",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_check_keywords": {
            "name": "test_check_keywords",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_check_unicode_name": {
            "name": "test_check_unicode_name",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_sparse_keywords": {
            "name": "test_sparse_keywords",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_ignorecase_keywords": {
            "name": "test_ignorecase_keywords",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_python_keywords_in_rule_names.Semantics.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordTests.test_python_keywords_in_rule_names.Semantics.not_": {
            "name": "not_",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": []
            }
        }
    },
    "TatSu-master/test/grammar/left_recursion_test.py": {
        "LeftRecursionTests.test_direct_left_recursion": {
            "name": "test_direct_left_recursion",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        },
        "LeftRecursionTests.test_calc": {
            "name": "test_calc",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "LeftRecursionTests.test_calc_indirect": {
            "name": "test_calc_indirect",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ]
            }
        },
        "LeftRecursionTests.test_indirect_left_recursion": {
            "name": "test_indirect_left_recursion",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "LeftRecursionTests.test_indirect_left_recursion_with_cut": {
            "name": "test_indirect_left_recursion_with_cut",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "LeftRecursionTests.test_indirect_left_recursion_complex": {
            "name": "test_indirect_left_recursion_complex",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        },
        "LeftRecursionTests.test_no_left_recursion": {
            "name": "test_no_left_recursion",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "LeftRecursionTests.test_nested_left_recursion": {
            "name": "test_nested_left_recursion",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ]
            }
        },
        "LeftRecursionTests.test_interlocking_cycles": {
            "name": "test_interlocking_cycles",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool"
                ]
            }
        },
        "LeftRecursionTests.test_mutual_left_recursion": {
            "name": "test_mutual_left_recursion",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        },
        "LeftRecursionTests.test_left_recursion_bug": {
            "name": "test_left_recursion_bug",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "LeftRecursionTests.test_left_recursion_with_right_associativity": {
            "name": "test_left_recursion_with_right_associativity",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "LeftRecursionTests.test_partial_input_bug": {
            "name": "test_partial_input_bug",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "str",
                    "bool"
                ]
            }
        },
        "LeftRecursionTests.test_dropped_input_bug": {
            "name": "test_dropped_input_bug",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "str",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "LeftRecursionTests.test_change_start_rule": {
            "name": "test_change_start_rule",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "LeftRecursionTests.test_with_gather": {
            "name": "test_with_gather",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "Tuple[int,int]",
                    "bool"
                ]
            }
        },
        "LeftRecursionTests.test_not_at_top_level": {
            "name": "test_not_at_top_level",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftRecursionTests.test_associativity": {
            "name": "test_associativity",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftRecursionTests.test_peg_associativity": {
            "name": "test_peg_associativity",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftRecursionTests.test_nullable_void": {
            "name": "test_nullable_void",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftRecursionTests.test_leftrec_with_void": {
            "name": "test_leftrec_with_void",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/lookahead_test.py": {
        "LookaheadTests.test_skip_to": {
            "name": "test_skip_to",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool"
                ]
            }
        }
    },
    "TatSu-master/test/grammar/parameter_test.py": {
        "ParameterTests.test_keyword_params": {
            "name": "test_keyword_params",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterTests.test_35_only_keyword_params": {
            "name": "test_35_only_keyword_params",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterTests.test_36_params_and_keyword_params": {
            "name": "test_36_params_and_keyword_params",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterTests.test_36_param_combinations": {
            "name": "test_36_param_combinations",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterTests.test_36_unichars": {
            "name": "test_36_unichars",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterTests.test_numbers_and_unicode": {
            "name": "test_numbers_and_unicode",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterTests.test_36_param_combinations.assert_equal": {
            "name": "assert_equal",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "value": []
            }
        },
        "ParameterTests.test_36_unichars._trydelete": {
            "name": "_trydelete",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "pymodule": []
            }
        },
        "ParameterTests.test_36_unichars.assert_equal": {
            "name": "assert_equal",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "value": []
            }
        },
        "ParameterTests.test_36_param_combinations.TC36Semantics.rule_positional": {
            "name": "rule_positional",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "ast": [],
                "p1": [],
                "p2": [],
                "p3": [],
                "p4": []
            }
        },
        "ParameterTests.test_36_param_combinations.TC36Semantics.rule_keyword": {
            "name": "rule_keyword",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "ast": [],
                "k1": [],
                "k2": [],
                "k3": [],
                "k4": []
            }
        },
        "ParameterTests.test_36_param_combinations.TC36Semantics.rule_all": {
            "name": "rule_all",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "ast": [],
                "p1": [],
                "p2": [],
                "p3": [],
                "p4": [],
                "k1": [],
                "k2": [],
                "k3": [],
                "k4": []
            }
        },
        "ParameterTests.test_36_unichars.UnicharsSemantics.rule_positional": {
            "name": "rule_positional",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "ast": [],
                "p1": []
            }
        },
        "ParameterTests.test_36_unichars.UnicharsSemantics.rule_keyword": {
            "name": "rule_keyword",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "ast": [],
                "k1": []
            }
        },
        "ParameterTests.test_36_unichars.UnicharsSemantics.rule_all": {
            "name": "rule_all",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "ast": [],
                "p1": [],
                "k1": []
            }
        }
    },
    "TatSu-master/test/grammar/pattern_test.py": {
        "PatternTests.test_patterns_with_newlines": {
            "name": "test_patterns_with_newlines",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatternTests.test_pattern_concatenation": {
            "name": "test_pattern_concatenation",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatternTests.test_ignorecase_not_for_pattern": {
            "name": "test_ignorecase_not_for_pattern",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatternTests.test_ignorecase_pattern": {
            "name": "test_ignorecase_pattern",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatternTests.test_multiline_pattern": {
            "name": "test_multiline_pattern",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/pretty_test.py": {
        "PrettyTests.test_pretty": {
            "name": "test_pretty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrettyTests.test_slashed_pattern": {
            "name": "test_slashed_pattern",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/semantics_test.py": {
        "MyNode.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "SemanticsTests.test_builder_semantics": {
            "name": "test_builder_semantics",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemanticsTests.test_builder_subclassing": {
            "name": "test_builder_subclassing",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemanticsTests.test_builder_basetype_codegen": {
            "name": "test_builder_basetype_codegen",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemanticsTests.test_optional_attributes": {
            "name": "test_optional_attributes",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TatSu-master/test/grammar/stateful_test.py": {
        "StatefulTests.test_stateful": {
            "name": "test_stateful",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Tuple[int, int]"
                ]
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.ul_start": {
            "name": "ul_start",
            "location": 35,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.ul_end": {
            "name": "ul_end",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.ul_marker": {
            "name": "ul_marker",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.ul": {
            "name": "ul",
            "location": 51,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.li": {
            "name": "li",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StatefulTests.test_stateful.StatefulSemantics.li_text": {
            "name": "li_text",
            "location": 57,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "ast": [
                    "float",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "TatSu-master/test/grammar/syntax_test.py": {
        "SyntaxTests.test_update_ast": {
            "name": "test_update_ast",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_include_and_override": {
            "name": "test_include_and_override",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_ast_assignment": {
            "name": "test_ast_assignment",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_optional_closure": {
            "name": "test_optional_closure",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_optional_sequence": {
            "name": "test_optional_sequence",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_group_ast": {
            "name": "test_group_ast",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_partial_options": {
            "name": "test_partial_options",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_partial_choice": {
            "name": "test_partial_choice",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_new_override": {
            "name": "test_new_override",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_list_override": {
            "name": "test_list_override",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_based_rule": {
            "name": "test_based_rule",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_rule_include": {
            "name": "test_rule_include",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_48_rule_override": {
            "name": "test_48_rule_override",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_failed_ref": {
            "name": "test_failed_ref",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_empty_match_token": {
            "name": "test_empty_match_token",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_empty_closure": {
            "name": "test_empty_closure",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_parseinfo": {
            "name": "test_parseinfo",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_raw_string": {
            "name": "test_raw_string",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_any": {
            "name": "test_any",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_constant": {
            "name": "test_constant",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_ast_assignment.p": {
            "name": "p",
            "location": 61,
            "return": [
                "tuple",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "input": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "rule": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SyntaxTests.test_include_and_override.FakeIncludesBuffer.get_include": {
            "name": "get_include",
            "location": 43,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "TatSu-master/test/grammar/__init__.py": {},
    "TatSu-master/test/zzz_bootstrap/bootstrap_test.py": {
        "suite": {
            "name": "suite",
            "location": 182,
            "return": [
                "unittest.suite.TestSuite"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BootstrapTests.test_bootstrap": {
            "name": "test_bootstrap",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootstrapTests.test_bootstrap.PrintNameWalker.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootstrapTests.test_bootstrap.PrintNameWalker.walk_default": {
            "name": "walk_default",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "denite.util.UserContext",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "children": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "TatSu-master/test/zzz_bootstrap/__init__.py": {}
}
{
    "TrackLater-master/setup.py": {},
    "TrackLater-master/tracklater/database.py": {},
    "TrackLater-master/tracklater/main.py": {
        "store_parser_to_database": {
            "name": "store_parser_to_database",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "module_name": [
                    "str",
                    "int"
                ],
                "start_date": [
                    "str",
                    "list[]",
                    "list",
                    "models.KippoProject"
                ],
                "end_date": [
                    "str",
                    "list[]",
                    "list",
                    "models.KippoProject"
                ]
            }
        },
        "set_parser_caching_data": {
            "name": "set_parser_caching_data",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "module_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "tuple[typing.Union[str,str,None]]",
                    "Tuple[str, Optional[str]]",
                    "list[str]",
                    "medtagger.database.models.User",
                    "List[str]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "int"
                ],
                "end_date": [
                    "int",
                    "str"
                ],
                "modules": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Sequence[bytes]",
                    "typing.Sequence[bytes]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TrackLater-master/tracklater/models.py": {
        "Project.to_dict": {
            "name": "to_dict",
            "location": 27,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.to_dict": {
            "name": "to_dict",
            "location": 45,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.duration": {
            "name": "duration",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.to_dict": {
            "name": "to_dict",
            "location": 86,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TrackLater-master/tracklater/settings_utils.py": {
        "helper": {
            "name": "helper",
            "location": 37,
            "return": [
                "int",
                "None",
                "bool",
                "Mapping",
                "str",
                "float",
                "Dict[str, Any]",
                "dict[, ]",
                "typing.Callable[..., str]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Hashable",
                    "typing.Hashable",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "list[str]",
                    "\"VersionedAnalyzer\"",
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "\"BooleanArray\"",
                    "int",
                    "T",
                    "Union[str, int]"
                ],
                "group": [
                    "typing.Text",
                    "str",
                    "dict",
                    "Hashable",
                    "int"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "dict[, ]",
                    "Callable[..., str]",
                    "typing.Callable[..., str]"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/test_settings.py": {},
    "TrackLater-master/tracklater/utils.py": {
        "parse_time": {
            "name": "parse_time",
            "location": 11,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "timestr": [
                    "str"
                ]
            }
        },
        "_str": {
            "name": "_str",
            "location": 15,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "list[]",
                    "logging.LogRecord",
                    "list"
                ]
            }
        },
        "obj_from_dict": {
            "name": "obj_from_dict",
            "location": 36,
            "return": [
                "typing.Type",
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "dict",
                    "Callable",
                    "T",
                    "str"
                ]
            }
        },
        "FixedOffset.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FixedOffset.utcoffset": {
            "name": "utcoffset",
            "location": 26,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "typing.Callable[[], None]",
                    "int",
                    "datetime.datetime",
                    "Callable[[], None]",
                    "bool"
                ]
            }
        },
        "FixedOffset.tzname": {
            "name": "tzname",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "typing.Callable[[], None]",
                    "int",
                    "datetime.datetime",
                    "Callable[[], None]",
                    "bool"
                ]
            }
        },
        "FixedOffset.dst": {
            "name": "dst",
            "location": 32,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "typing.Callable[[], None]",
                    "int",
                    "datetime.datetime",
                    "Callable[[], None]",
                    "bool"
                ]
            }
        },
        "obj_from_dict._func": {
            "name": "_func",
            "location": 67,
            "return": [
                "str",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {}
        }
    },
    "TrackLater-master/tracklater/views.py": {
        "index": {
            "name": "index",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "json_serial": {
            "name": "json_serial",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime",
                    "list",
                    "str"
                ]
            }
        },
        "listmodules": {
            "name": "listmodules",
            "location": 45,
            "return": [
                "None",
                "Iterable[str]",
                "bool",
                "dict",
                "str",
                "users.models.CustomUser"
            ],
            "arguments": {}
        },
        "getsettings": {
            "name": "getsettings",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "fetchdata": {
            "name": "fetchdata",
            "location": 64,
            "return": [
                "None",
                "Iterable[str]",
                "bool",
                "dict",
                "str",
                "users.models.CustomUser"
            ],
            "arguments": {}
        },
        "parseTimestamp": {
            "name": "parseTimestamp",
            "location": 112,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "stamp": [
                    "str",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "updateentry": {
            "name": "updateentry",
            "location": 120,
            "return": [
                "None",
                "Iterable[str]",
                "bool",
                "dict",
                "str",
                "users.models.CustomUser"
            ],
            "arguments": {}
        },
        "deleteentry": {
            "name": "deleteentry",
            "location": 175,
            "return": [
                "None",
                "int",
                "str",
                "float",
                "Callable"
            ],
            "arguments": {}
        },
        "MyEncoder.default": {
            "name": "default",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "dict[str, list[str]]",
                    "Dict[str, List[str]]",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "int",
                    "dict[, ]",
                    "dict",
                    "typing.IO",
                    "Dict[str, Any]",
                    "list[dict[str, typing.Any]]",
                    "IO[bytes]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 10,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TrackLater-master/tracklater/tests/conftest.py": {
        "mock_settings": {
            "name": "mock_settings",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 22,
            "return": [
                "Callable"
            ],
            "arguments": {}
        }
    },
    "TrackLater-master/tracklater/tests/test_app.py": {
        "client": {
            "name": "client",
            "location": 16,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "db": [
                    "set"
                ]
            }
        },
        "test_app_root": {
            "name": "test_app_root",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_app_listmodules": {
            "name": "test_app_listmodules",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_app_fetchdata": {
            "name": "test_app_fetchdata",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_database_entries": {
            "name": "test_database_entries",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "db": []
            }
        },
        "test_database_projects": {
            "name": "test_database_projects",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ],
                "db": [
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_database_issues": {
            "name": "test_database_issues",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "db": []
            }
        },
        "test_database_jira_caching": {
            "name": "test_database_jira_caching",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "db": []
            }
        },
        "test_database_slack_caching": {
            "name": "test_database_slack_caching",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "db": []
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_gitmodule.py": {
        "mock_git": {
            "name": "mock_git",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "parser": {
            "name": "parser",
            "location": 17,
            "return": [
                "Parser",
                "src.engine.parser.Parser",
                "aule.parser.Parser"
            ],
            "arguments": {}
        },
        "test_get_entries": {
            "name": "test_get_entries",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Container"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_jira.py": {
        "parser": {
            "name": "parser",
            "location": 15,
            "return": [
                "Parser",
                "src.engine.parser.Parser",
                "aule.parser.Parser"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 22,
            "return": [
                "Provider",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_create_parser": {
            "name": "test_create_parser",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "tracklater.timemodules.jira.Parser"
                ]
            }
        },
        "test_fetch_issues": {
            "name": "test_fetch_issues",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "tracklater.timemodules.jira.Provider"
                ]
            }
        },
        "test_get_group_issues": {
            "name": "test_get_group_issues",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "tracklater.timemodules.jira.Parser"
                ],
                "provider": [
                    "tracklater.timemodules.jira.Provider"
                ]
            }
        },
        "test_get_issues": {
            "name": "test_get_issues",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "tracklater.timemodules.jira.Parser"
                ]
            }
        },
        "test_cache": {
            "name": "test_cache",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "tracklater.timemodules.jira.Parser"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_main.py": {
        "test_obj_from_dict": {
            "name": "test_obj_from_dict",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider_normal": {
            "name": "test_provider_normal",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "tests.mock_vws.utils.Endpoint",
                    "str"
                ]
            }
        },
        "test_provider_testing": {
            "name": "test_provider_testing",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "TestProvider.normal_method": {
            "name": "normal_method",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "None",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestProvider.test_normal_method": {
            "name": "test_normal_method",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "None"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_slack.py": {
        "parser": {
            "name": "parser",
            "location": 12,
            "return": [
                "Parser",
                "src.engine.parser.Parser",
                "aule.parser.Parser"
            ],
            "arguments": {}
        },
        "test_get_entries": {
            "name": "test_get_entries",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Container"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_taiga.py": {
        "parser": {
            "name": "parser",
            "location": 12,
            "return": [
                "Parser",
                "src.engine.parser.Parser",
                "aule.parser.Parser"
            ],
            "arguments": {}
        },
        "test_get_issues": {
            "name": "test_get_issues",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Container"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_thyme.py": {
        "parser": {
            "name": "parser",
            "location": 11,
            "return": [
                "Parser",
                "src.engine.parser.Parser",
                "aule.parser.Parser"
            ],
            "arguments": {}
        },
        "test_get_entries": {
            "name": "test_get_entries",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Container"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/test_toggl.py": {
        "parser": {
            "name": "parser",
            "location": 13,
            "return": [
                "Parser",
                "src.engine.parser.Parser",
                "aule.parser.Parser"
            ],
            "arguments": {}
        },
        "test_toggl_get_entries": {
            "name": "test_toggl_get_entries",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Optional[projects.models.projects.Project]"
                ]
            }
        },
        "test_toggl_get_projects": {
            "name": "test_toggl_get_projects",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Container"
                ]
            }
        },
        "test_toggl_add_modify_delete": {
            "name": "test_toggl_add_modify_delete",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "tracklater.timemodules.toggl.Parser"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/tests/__init__.py": {},
    "TrackLater-master/tracklater/timemodules/clockify.py": {
        "get_setting": {
            "name": "get_setting",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "int",
                    "Iterable[Hashable]",
                    "None",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "Iterable[Hashable]",
                    "typing.Iterable[typing.Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "group": [
                    "typing.Text",
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_entries": {
            "name": "get_entries",
            "location": 48,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_projects": {
            "name": "get_projects",
            "location": 73,
            "return": [
                "List[tracklater.models.Project]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.create_entry": {
            "name": "create_entry",
            "location": 97,
            "return": [
                "tracklater.models.Entry"
            ],
            "arguments": {
                "self": [],
                "new_entry": [
                    "tracklater.models.Entry"
                ],
                "issue": [
                    "Optional[tracklater.models.Issue]"
                ]
            }
        },
        "Parser.update_entry": {
            "name": "update_entry",
            "location": 120,
            "return": [
                "tracklater.models.Entry"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ],
                "new_entry": [
                    "tracklater.models.Entry"
                ],
                "issue": [
                    "Optional[tracklater.models.Issue]"
                ]
            }
        },
        "Parser.delete_entry": {
            "name": "delete_entry",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ]
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Provider.workspace_request": {
            "name": "workspace_request",
            "location": 157,
            "return": [
                "Union[(dict, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Provider.request": {
            "name": "request",
            "location": 163,
            "return": [
                "Union[(dict, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Provider.test_request": {
            "name": "test_request",
            "location": 185,
            "return": [
                "Union[(dict, str, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/github.py": {
        "Parser.get_issues": {
            "name": "get_issues",
            "location": 17,
            "return": [
                "List[tracklater.models.Issue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.github_login": {
            "name": "github_login",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Provider.get_issues": {
            "name": "get_issues",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "project_id": [
                    "str",
                    "list[str]",
                    "bool",
                    "Literal",
                    "typing.Type",
                    "List[str]",
                    "Type[Any]",
                    "models.PermissionLookup"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/gitmodule.py": {
        "get_setting": {
            "name": "get_setting",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "int",
                    "Iterable[Hashable]",
                    "None",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "Iterable[Hashable]",
                    "typing.Iterable[typing.Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "group": [
                    "typing.Text",
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "git_time_to_datetime": {
            "name": "git_time_to_datetime",
            "location": 24,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
            ],
            "arguments": {
                "_datetime": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.get_entries": {
            "name": "get_entries",
            "location": 30,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.get_log_entries": {
            "name": "get_log_entries",
            "location": 54,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "repo_path": [
                    "str",
                    "int",
                    "bool"
                ],
                "start_date": [
                    "int",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Union[str, int]",
                    "raiden.utils.Optional[raiden.utils.BlockNumber]"
                ]
            }
        },
        "Provider.test_get_log_entries": {
            "name": "test_get_log_entries",
            "location": 67,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "repo_path": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "list",
                    "list[]"
                ],
                "start_date": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/interfaces.py": {
        "testing_decorator": {
            "name": "testing_decorator",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "testing_decorator._func": {
            "name": "_func",
            "location": 20,
            "return": [
                "Type",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "ProviderMetaclass.__new__": {
            "name": "__new__",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "List[zerver.models.DefaultStreamGroup]",
                "Type",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "local": [
                    "str"
                ]
            }
        },
        "AbstractParser.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "_datetime.datetime"
                ],
                "end_date": [
                    "_datetime.datetime"
                ]
            }
        },
        "AbstractParser.set_database_values": {
            "name": "set_database_values",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[datetime.date]"
                ],
                "end_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]"
                ],
                "issue_count": [
                    "int",
                    "str"
                ],
                "entry_count": [
                    "int",
                    "str"
                ],
                "project_count": [
                    "str",
                    "Dict[Optional[str], str]",
                    "Dict[str, str]",
                    "Type[Dict[str, Any]]",
                    "Optional[dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "AbstractParser.get_offset_dates": {
            "name": "get_offset_dates",
            "location": 70,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractParser.capabilities": {
            "name": "capabilities",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractParser.parse": {
            "name": "parse",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryMixin.parse": {
            "name": "parse",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryMixin.capabilities": {
            "name": "capabilities",
            "location": 125,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryMixin.get_entries": {
            "name": "get_entries",
            "location": 130,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMixin.parse": {
            "name": "parse",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMixin.capabilities": {
            "name": "capabilities",
            "location": 140,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMixin.get_projects": {
            "name": "get_projects",
            "location": 145,
            "return": [
                "List[tracklater.models.Project]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueMixin.parse": {
            "name": "parse",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueMixin.capabilities": {
            "name": "capabilities",
            "location": 155,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueMixin.get_issues": {
            "name": "get_issues",
            "location": 160,
            "return": [
                "List[tracklater.models.Issue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueMixin.find_issue": {
            "name": "find_issue",
            "location": 163,
            "return": [
                "Optional[tracklater.models.Issue]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Callable",
                    "str",
                    "Callable[[str], None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AddEntryMixin.create_entry": {
            "name": "create_entry",
            "location": 172,
            "return": [
                "tracklater.models.Entry"
            ],
            "arguments": {
                "self": [],
                "new_entry": [
                    "tracklater.models.Entry"
                ],
                "issue": [
                    "tracklater.models.Issue"
                ]
            }
        },
        "AddEntryMixin.capabilities": {
            "name": "capabilities",
            "location": 176,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteEntryMixin.delete_entry": {
            "name": "delete_entry",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ]
            }
        },
        "DeleteEntryMixin.capabilities": {
            "name": "capabilities",
            "location": 187,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateEntryMixin.update_entry": {
            "name": "update_entry",
            "location": 194,
            "return": [
                "tracklater.models.Entry"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ],
                "new_entry": [
                    "tracklater.models.Entry"
                ],
                "issue": [
                    "tracklater.models.Issue"
                ]
            }
        },
        "UpdateEntryMixin.capabilities": {
            "name": "capabilities",
            "location": 198,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/jira.py": {
        "get_setting": {
            "name": "get_setting",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "int",
                    "Iterable[Hashable]",
                    "None",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "Iterable[Hashable]",
                    "typing.Iterable[typing.Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "group": [
                    "typing.Text",
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_issues": {
            "name": "get_issues",
            "location": 27,
            "return": [
                "List[tracklater.models.Issue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_group_issues": {
            "name": "get_group_issues",
            "location": 34,
            "return": [
                "List[tracklater.models.Issue]"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "zerver.models.UserProfile",
                    "str",
                    "int",
                    "Optional[Iterable[T]]"
                ],
                "group": [
                    "list[str]",
                    "salon.models.Stylist",
                    "typing.Mapping",
                    "str",
                    "List[str]",
                    "Mapping[str, Any]",
                    "logging.LogRecord"
                ],
                "group_settings": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "Provider.fetch_issues": {
            "name": "fetch_issues",
            "location": 78,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "project_key": [
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "start_from": [
                    "int",
                    "float",
                    "bool",
                    "Callable",
                    "Optional[object]",
                    "Optional[float]"
                ]
            }
        },
        "Provider.test_fetch_issues": {
            "name": "test_fetch_issues",
            "location": 93,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Callable[..., None]",
                    "str",
                    "typing.Callable[..., None]",
                    "dict",
                    "dict[, ]"
                ],
                "project_key": [
                    "Callable[..., None]",
                    "str",
                    "typing.Callable[..., None]",
                    "dict",
                    "dict[, ]"
                ],
                "start_from": [
                    "Sequence[str]",
                    "None",
                    "Callable",
                    "typing.Sequence[str]",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/slack.py": {
        "Parser.get_entries": {
            "name": "get_entries",
            "location": 58,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncProvider.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slack_token": [
                    "bool",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slack_token": [
                    "str",
                    "esm.models.dashboard_clienDashboardClient"
                ]
            }
        },
        "Provider.api_call": {
            "name": "api_call",
            "location": 109,
            "return": [
                "bool",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.test_api_call": {
            "name": "test_api_call",
            "location": 116,
            "return": [
                "Optional[Dict[(str, List[Dict[(str, Union[(str, Dict[(str, str)])])]])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/taiga.py": {
        "Parser.get_issues": {
            "name": "get_issues",
            "location": 17,
            "return": [
                "List[tracklater.models.Issue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.taiga_login": {
            "name": "taiga_login",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.taiga_fetch_issues": {
            "name": "taiga_fetch_issues",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "start_from": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "int",
                    "float",
                    "apistar.interfaces.Router",
                    "bool"
                ]
            }
        },
        "Provider.login": {
            "name": "login",
            "location": 61,
            "return": [
                "bool",
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.test_login": {
            "name": "test_login",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Provider.get_project": {
            "name": "get_project",
            "location": 74,
            "return": [
                "dict",
                "int",
                "str",
                "Optional[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "project_slug": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Provider.test_get_project": {
            "name": "test_get_project",
            "location": 81,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "credentials": []
            }
        },
        "Provider.get_issues": {
            "name": "get_issues",
            "location": 84,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "Provider.test_get_issues": {
            "name": "test_get_issues",
            "location": 93,
            "return": [
                "List[Dict[(str, Union[(int, str)])]]"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/thyme.py": {
        "get_setting": {
            "name": "get_setting",
            "location": 15,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "int",
                    "Iterable[Hashable]",
                    "None",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "Iterable[Hashable]",
                    "typing.Iterable[typing.Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "group": [
                    "typing.Text",
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_window": {
            "name": "get_window",
            "location": 25,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "list[]",
                    "int",
                    "bool",
                    "list",
                    "Dict[str, Any]"
                ],
                "id": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Parser.get_entries": {
            "name": "get_entries",
            "location": 37,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._read_files": {
            "name": "_read_files",
            "location": 41,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_snapshot_entry": {
            "name": "_parse_snapshot_entry",
            "location": 50,
            "return": [
                "Optional[Dict[(str, Union[(dict, str, datetime.datetime)])]]"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "Parser._generate_sessions": {
            "name": "_generate_sessions",
            "location": 60,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "str",
                    "list[dict[, ]]",
                    "tuple[typing.Union[int,int,int]]",
                    "bool",
                    "List[Dict]",
                    "Mapping[str, Any]",
                    "Tuple[int, int, int]",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "Provider.read_files": {
            "name": "read_files",
            "location": 137,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "end_date": [
                    "str",
                    "datetime.date",
                    "Optional[str]"
                ]
            }
        },
        "Provider.test_read_files": {
            "name": "test_read_files",
            "location": 160,
            "return": [
                "List[Dict[(str, Union[(int, str, List[Union[(int, Dict[(str, Union[(int, str)])])]])])]]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "bool",
                    "None",
                    "int",
                    "list[str]",
                    "typing.Any",
                    "List[str]",
                    "Iterable[datetime.date]",
                    "Any",
                    "datetime.datetime"
                ],
                "end_date": [
                    "bool",
                    "None",
                    "int",
                    "list[str]",
                    "typing.Any",
                    "List[str]",
                    "Iterable[datetime.date]",
                    "Any",
                    "datetime.datetime"
                ]
            }
        },
        "Parser._generate_sessions._init_session": {
            "name": "_init_session",
            "location": 61,
            "return": [
                "Entry",
                "raiden.utils.BlockNumber",
                "int",
                "dict",
                "str",
                "jumeaux.models.DidChallengeAddOnPayload",
                "bool"
            ],
            "arguments": {
                "entry": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Parser._generate_sessions._end_session": {
            "name": "_end_session",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "Callable",
                    "Optional[Callable]",
                    "Type"
                ],
                "entry": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "Optional[str]",
                    "List[int]",
                    "Optional[Callable]",
                    "employees.models.Report",
                    "float"
                ]
            }
        },
        "Parser._generate_sessions._add_window": {
            "name": "_add_window",
            "location": 89,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, Dict[str, str]]",
                "bytes",
                "story.models.Character",
                "str",
                "bool"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "purplship.core.utils.Element"
                ],
                "window": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "seconds": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/toggl.py": {
        "get_setting": {
            "name": "get_setting",
            "location": 20,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "default": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "group": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Set[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_entries": {
            "name": "get_entries",
            "location": 30,
            "return": [
                "List[tracklater.models.Entry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_projects": {
            "name": "get_projects",
            "location": 51,
            "return": [
                "List[tracklater.models.Project]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.create_entry": {
            "name": "create_entry",
            "location": 78,
            "return": [
                "tracklater.models.Entry"
            ],
            "arguments": {
                "self": [],
                "new_entry": [
                    "tracklater.models.Entry"
                ],
                "issue": [
                    "Optional[tracklater.models.Issue]"
                ]
            }
        },
        "Parser.update_entry": {
            "name": "update_entry",
            "location": 96,
            "return": [
                "tracklater.models.Entry"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ],
                "new_entry": [
                    "tracklater.models.Entry"
                ],
                "issue": [
                    "Optional[tracklater.models.Issue]"
                ]
            }
        },
        "Parser.delete_entry": {
            "name": "delete_entry",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ]
            }
        },
        "Parser.push_session": {
            "name": "push_session",
            "location": 124,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict"
                ],
                "name": [
                    "str"
                ],
                "entry_id": [
                    "str"
                ],
                "project_id": [
                    "str"
                ]
            }
        },
        "Parser.update_time_entry": {
            "name": "update_time_entry",
            "location": 150,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "Parser.delete_time_entry": {
            "name": "delete_time_entry",
            "location": 160,
            "return": [
                "Union[(dict, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "Provider.request": {
            "name": "request",
            "location": 173,
            "return": [
                "Union[(dict, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Provider.test_request": {
            "name": "test_request",
            "location": 192,
            "return": [
                "Union[(dict, str, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        }
    },
    "TrackLater-master/tracklater/timemodules/__init__.py": {}
}
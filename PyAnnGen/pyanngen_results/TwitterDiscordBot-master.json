{
    "TwitterDiscordBot-master/test/help.py": {
        "get_user_mock": {
            "name": "get_user_mock",
            "location": 48,
            "return": [
                "unittest.mock.NonCallableMagicMock"
            ],
            "arguments": {
                "screen_name": [
                    "str"
                ]
            }
        }
    },
    "TwitterDiscordBot-master/test/test.py": {
        "TestHelpFunctions.test_post_tweets_to_discord": {
            "name": "test_post_tweets_to_discord",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generate_from_twitter_status_mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestHelpFunctions.test_read_last_fetched_ids_from_file": {
            "name": "test_read_last_fetched_ids_from_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpFunctions.test_read_last_fetched_ids_from_file_not_exists": {
            "name": "test_read_last_fetched_ids_from_file_not_exists",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_parser_mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestHelpFunctions.test_save_last_fetched_ids_to_file": {
            "name": "test_save_last_fetched_ids_to_file",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_parser_mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "open_mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestHelpFunctions.test_save_last_fetched_ids_to_file_not_exists": {
            "name": "test_save_last_fetched_ids_to_file_not_exists",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_parser_mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "open_mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "TwitterDiscordBot-master/test/test_discord.py": {
        "TestDiscordPost.test_generate_from_twitter_status_with_full_text_and_media": {
            "name": "test_generate_from_twitter_status_with_full_text_and_media",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscordPost.test_generate_from_twitter_status_without_full_text_and_media": {
            "name": "test_generate_from_twitter_status_without_full_text_and_media",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscordPost.test_generate_from_twitter_status_retweet": {
            "name": "test_generate_from_twitter_status_retweet",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscordPost.test_generate_from_twitter_status_has_video": {
            "name": "test_generate_from_twitter_status_has_video",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscordPost.test_save_with_embeds": {
            "name": "test_save_with_embeds",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_post_mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "sleep_mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestDiscordPost.test_save_without_embeds": {
            "name": "test_save_without_embeds",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_post_mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "sleep_mock": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "TwitterDiscordBot-master/test/test_twitter.py": {
        "TestTwitterUser.test_init": {
            "name": "test_init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTwitterHelpingFuctions.test_get_twitter_user_timeline_no_last_id": {
            "name": "test_get_twitter_user_timeline_no_last_id",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTwitterHelpingFuctions.test_get_twitter_user_timeline_has_last_id": {
            "name": "test_get_twitter_user_timeline_has_last_id",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TwitterDiscordBot-master/test/__init__.py": {},
    "TwitterDiscordBot-master/twitter_discord_bot/configs.py": {},
    "TwitterDiscordBot-master/twitter_discord_bot/debug.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TwitterDiscordBot-master/twitter_discord_bot/discord_api.py": {
        "DiscordPost._get_medias_from_twitter_status": {
            "name": "_get_medias_from_twitter_status",
            "location": 26,
            "return": [
                "Optional[List[Dict[(str, Dict[(str, str)])]]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "DiscordPost.generate_from_twitter_status": {
            "name": "generate_from_twitter_status",
            "location": 44,
            "return": [
                "DiscordPost"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDiscordPost]"
                ],
                "user": [
                    "twitter_discord_bot.twitter_api.TwitterUserWrapper"
                ],
                "status": [
                    "float",
                    "int",
                    "tweepy.API",
                    "bool"
                ]
            }
        },
        "DiscordPost.save": {
            "name": "save",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "webhook_url": [
                    "str"
                ],
                "sleep_seconds": [
                    "float"
                ]
            }
        }
    },
    "TwitterDiscordBot-master/twitter_discord_bot/models.py": {},
    "TwitterDiscordBot-master/twitter_discord_bot/twitter_api.py": {
        "get_twitter_users_infos": {
            "name": "get_twitter_users_infos",
            "location": 95,
            "return": [
                "Dict[(str, TwitterUserWrapper)]"
            ],
            "arguments": {
                "api": [
                    "str",
                    "asgard.models.accounAccount"
                ],
                "twitter_accounts": [
                    "List[twitter_discord_bot.models.TwitterAccount]"
                ]
            }
        },
        "get_twitter_user_timeline": {
            "name": "get_twitter_user_timeline",
            "location": 111,
            "return": [
                "list"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "Dict[str,str]",
                    "None",
                    "grouper.models.group.Group",
                    "dict[str, str]"
                ],
                "user": [
                    "TwitterUserWrapper"
                ],
                "since_id": [
                    "int"
                ]
            }
        },
        "TwitterUserWrapper.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "int",
                    "str",
                    "bool"
                ],
                "screen_name": [
                    "str"
                ]
            }
        },
        "TwitterUserWrapper._contruct_for_testing": {
            "name": "_contruct_for_testing",
            "location": 42,
            "return": [
                "TwitterUserWrapper"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "screen_name": [
                    "str"
                ],
                "user_id": [
                    "int"
                ],
                "profile_image_url": [
                    "str"
                ]
            }
        },
        "TwitterUserWrapper._sync_with_twitter_api": {
            "name": "_sync_with_twitter_api",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterUserWrapper._init_if_needed": {
            "name": "_init_if_needed",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterUserWrapper.name": {
            "name": "name",
            "location": 80,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterUserWrapper.user_id": {
            "name": "user_id",
            "location": 85,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterUserWrapper.profile_image_url": {
            "name": "profile_image_url",
            "location": 90,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TwitterDiscordBot-master/twitter_discord_bot/twitter_discord_bot.py": {
        "_get_twitter_accounts": {
            "name": "_get_twitter_accounts",
            "location": 36,
            "return": [
                "List[twitter_discord_bot.models.TwitterAccount]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_twitter_bearer_token": {
            "name": "_get_twitter_bearer_token",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_discord_webhooks": {
            "name": "_get_discord_webhooks",
            "location": 58,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_post_tweets_to_discord": {
            "name": "_post_tweets_to_discord",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "twitter_discord_bot.twitter_api.TwitterUserWrapper"
                ],
                "statuses": [
                    "list"
                ],
                "webhook_url": [
                    "str"
                ]
            }
        },
        "_fetch_and_post": {
            "name": "_fetch_and_post",
            "location": 93,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "twitter_api": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "twitter_accounts": [
                    "List[twitter_discord_bot.models.TwitterAccount]"
                ],
                "discord_webhooks": [
                    "Mapping[(str, str)]"
                ],
                "last_fetched_posts": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "_read_last_fetched_ids_from_file": {
            "name": "_read_last_fetched_ids_from_file",
            "location": 152,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_save_last_fetched_ids_to_file": {
            "name": "_save_last_fetched_ids_to_file",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "last_fetched_ids": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main._quit": {
            "name": "_quit",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "signo": [
                    "str",
                    "bytes"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "TwitterDiscordBot-master/twitter_discord_bot/__init__.py": {},
    "TwitterDiscordBot-master/twitter_discord_bot/__main__.py": {}
}
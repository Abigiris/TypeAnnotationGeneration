{
    "Ulauncher-6/setup.py": {
        "data_files_from_path": {
            "name": "data_files_from_path",
            "location": 20,
            "return": [
                "List[Tuple[(str, List[str])]]"
            ],
            "arguments": {
                "target_path": [
                    "List[pathlib.Path]",
                    "pathlib.Path",
                    "str",
                    "None",
                    "norfs.fs.base.Path",
                    "Optional[str]"
                ],
                "source_path": []
            }
        },
        "build_preferences.initialize_options": {
            "name": "initialize_options",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_preferences.finalize_options": {
            "name": "finalize_options",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_preferences.run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_wrapper.run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/docs/conf.py": {},
    "Ulauncher-6/scripts/aur-update.py": {
        "run_shell": {
            "name": "run_shell",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "int",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "get_targz_link": {
            "name": "get_targz_link",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_set_pkg_key_": {
            "name": "_set_pkg_key_",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "val": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "file": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "set_pkg_key": {
            "name": "set_pkg_key",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "KT"
                ],
                "val": [
                    "bytes",
                    "str",
                    "int",
                    "KT"
                ]
            }
        },
        "push_update": {
            "name": "push_update",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/api/client/test_Client.py": {
        "TestClient.UnloadEvent": {
            "name": "UnloadEvent",
            "location": 11,
            "return": [
                "arxiv.submission.Client"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "List[dict]",
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestClient.sock_client": {
            "name": "sock_client",
            "location": 15,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "google.cloud.pubsub.Client",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestClient.mainloop": {
            "name": "mainloop",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestClient.framer": {
            "name": "framer",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestClient.timer": {
            "name": "timer",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestClient.extension": {
            "name": "extension",
            "location": 31,
            "return": [
                "str",
                "Iterator[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.client": {
            "name": "client",
            "location": 37,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "libqtile.ipc.Client",
                    "baseplate.lib.metrics.Client",
                    "Client"
                ],
                "framer": [
                    "bool",
                    "float"
                ],
                "sock_client": [
                    "libqtile.ipc.Client",
                    "baseplate.lib.metrics.Client",
                    "Client"
                ]
            }
        },
        "TestClient.test_connect__connect_is_called": {
            "name": "test_connect__connect_is_called",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "mainloop": []
            }
        },
        "TestClient.test_on_message__trigger_event__is_called": {
            "name": "test_on_message__trigger_event__is_called",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Dict[str,Any]"
                ],
                "extension": []
            }
        },
        "TestClient.test_on_close__UnloadEvent__is_triggered": {
            "name": "test_on_close__UnloadEvent__is_triggered",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "extension": [],
                "UnloadEvent": []
            }
        },
        "TestClient.test_send__ws_send__is_called": {
            "name": "test_send__ws_send__is_called",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Ulauncher-6/tests/api/client/test_Extension.py": {
        "TestExtension.client": {
            "name": "client",
            "location": 10,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestExtension.response": {
            "name": "response",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Dict",
                    "float"
                ]
            }
        },
        "TestExtension.extension": {
            "name": "extension",
            "location": 18,
            "return": [
                "Extension",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.listener": {
            "name": "listener",
            "location": 22,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_trigger_event__on_event__is_called": {
            "name": "test_trigger_event__on_event__is_called",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [],
                "listener": [
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "TestExtension.test_trigger_event__action__is_sent": {
            "name": "test_trigger_event__action__is_sent",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [],
                "listener": [],
                "client": [
                    "Dict[str,Any]"
                ],
                "response": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "Ulauncher-6/tests/api/shared/test_event.py": {
        "SampleEvent1.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SampleEvent2.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestBaseEvent.test_eq__objects_of_the_same_class__are_equal": {
            "name": "test_eq__objects_of_the_same_class__are_equal",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseEvent.test_ineq__objects_of_the_same_class__are_equal": {
            "name": "test_ineq__objects_of_the_same_class__are_equal",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseEvent.test_eq__objects_of_different_classes__are_not_equal": {
            "name": "test_eq__objects_of_different_classes__are_not_equal",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/api/shared/action/test_ActionList.py": {
        "EmptyAction.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep_app_open": []
            }
        },
        "EmptyAction.run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionList.test_keep_app_open": {
            "name": "test_keep_app_open",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionList.test_run": {
            "name": "test_run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/api/shared/action/test_RenderResultListAction.py": {
        "TestRenderResultListAction.GLib": {
            "name": "GLib",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestRenderResultListAction.result_list": {
            "name": "result_list",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRenderResultListAction.action": {
            "name": "action",
            "location": 18,
            "return": [
                "RenderResultListAction",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "result_list": [
                    "List[str]",
                    "int",
                    "str",
                    "List[Tuple[int,int,int]]",
                    "List[tuple[Union[int,int,int]]]"
                ]
            }
        },
        "TestRenderResultListAction.test_keep_app_open": {
            "name": "test_keep_app_open",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "TestRenderResultListAction.test_run": {
            "name": "test_run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ],
                "mocker": [
                    "Mapping[str, Any]"
                ],
                "result_list": [],
                "GLib": []
            }
        }
    },
    "Ulauncher-6/tests/api/shared/action/test_RunScriptAction.py": {
        "TestRunScriptAction.test_run": {
            "name": "test_run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/api/shared/action/test_SetUserQueryAction.py": {
        "TestSetUserQueryAction.window": {
            "name": "window",
            "location": 9,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Dict[str, Any]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestSetUserQueryAction.action": {
            "name": "action",
            "location": 14,
            "return": [
                "SetUserQueryAction",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetUserQueryAction.test_keep_app_open": {
            "name": "test_keep_app_open",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "TestSetUserQueryAction.test_update_query": {
            "name": "test_update_query",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Callable",
                    "bool"
                ],
                "window": [
                    "List[str]",
                    "Dict[str,Dict]",
                    "Dict[str,dict]"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/test_ModeHandler.py": {
        "TestSearch.RenderAction": {
            "name": "RenderAction",
            "location": 9,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSearch.search_mode": {
            "name": "search_mode",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearch.search": {
            "name": "search",
            "location": 17,
            "return": [
                "str",
                "ModeHandler"
            ],
            "arguments": {
                "self": [],
                "search_mode": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestSearch.test_on_query_change__run__is_called": {
            "name": "test_on_query_change__run__is_called",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "Optional[Dict[str, Any]]",
                    "Tuple[str, str]"
                ],
                "search_mode": [
                    "str"
                ],
                "RenderAction": [
                    "str"
                ]
            }
        },
        "TestSearch.test_on_query_change__on_query_change__is_called_on_search_mode": {
            "name": "test_on_query_change__on_query_change__is_called_on_search_mode",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "Optional[Dict[str, Any]]",
                    "Tuple[str, str]"
                ],
                "search_mode": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[str]",
                    "int"
                ]
            }
        },
        "TestSearch.test_on_key_press_event__run__is_called": {
            "name": "test_on_key_press_event__run__is_called",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "float",
                    "int",
                    "Optional[str]",
                    "str",
                    "None",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ],
                "search_mode": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/test_Query.py": {
        "TestQuery.test_keyword": {
            "name": "test_keyword",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_argument": {
            "name": "test_argument",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_get_keyword": {
            "name": "test_get_keyword",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_get_argument": {
            "name": "test_get_argument",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/test_AppResult.py": {
        "TestAppResult.patch_DesktopAppInfo_new": {
            "name": "patch_DesktopAppInfo_new",
            "location": 15,
            "return": [
                "int",
                "Tuple[float, float]",
                "str",
                "rl_algorithms.utils.config.ConfigDict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Callable",
                    "List[dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "TestAppResult.patch_DesktopAppInfo_get_all": {
            "name": "patch_DesktopAppInfo_get_all",
            "location": 21,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "TextIO",
                    "str",
                    "int",
                    "gi.repository.GLib.Variant",
                    "django.db.migrations.state.StateApps"
                ]
            }
        },
        "TestAppResult.app1": {
            "name": "app1",
            "location": 27,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppResult.app2": {
            "name": "app2",
            "location": 31,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppResult._app_starts": {
            "name": "_app_starts",
            "location": 35,
            "return": [
                "bool",
                "int",
                "str",
                "rl_algorithms.utils.config.ConfigDict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "TestAppResult.test_get_name": {
            "name": "test_get_name",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app1": [
                    "str"
                ]
            }
        },
        "TestAppResult.test_get_description": {
            "name": "test_get_description",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app1": []
            }
        },
        "TestAppResult.test_icon": {
            "name": "test_icon",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app1": []
            }
        },
        "TestAppResult.test_search_score": {
            "name": "test_search_score",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app1": []
            }
        },
        "TestAppResult.test_on_enter": {
            "name": "test_on_enter",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app1": [],
                "mocker": [],
                "_app_starts": []
            }
        },
        "TestAppResult.test_get_most_frequent": {
            "name": "test_get_most_frequent",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppResult.patch_DesktopAppInfo_new.mkappinfo": {
            "name": "mkappinfo",
            "location": 16,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "app_id": [
                    "str"
                ]
            }
        },
        "TestAppResult.patch_DesktopAppInfo_get_all.get_all_appinfo": {
            "name": "get_all_appinfo",
            "location": 22,
            "return": [
                "str",
                "Optional[Callable[[Dict], bool]]",
                "dict",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_DeferredResultRenderer.py": {
        "TestDeferredResultRenderer.timer": {
            "name": "timer",
            "location": 15,
            "return": [
                "bytearray",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestDeferredResultRenderer.GLib": {
            "name": "GLib",
            "location": 19,
            "return": [
                "bytearray",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestDeferredResultRenderer.event": {
            "name": "event",
            "location": 23,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeferredResultRenderer.manifest": {
            "name": "manifest",
            "location": 27,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeferredResultRenderer.controller": {
            "name": "controller",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestDeferredResultRenderer.renderer": {
            "name": "renderer",
            "location": 37,
            "return": [
                "DeferredResultRenderer",
                "List[int]",
                "Dict[str,int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeferredResultRenderer.test_handle_event__result__instanceof_BaseAction": {
            "name": "test_handle_event__result__instanceof_BaseAction",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "renderer": [],
                "event": [],
                "controller": []
            }
        },
        "TestDeferredResultRenderer.test_handle_event__loading_timer__is_canceled": {
            "name": "test_handle_event__loading_timer__is_canceled",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "renderer": [],
                "event": [],
                "controller": []
            }
        },
        "TestDeferredResultRenderer.test_handle_response__action__is_ran": {
            "name": "test_handle_response__action__is_ran",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "renderer": [],
                "controller": []
            }
        },
        "TestDeferredResultRenderer.test_handle_response__keep_app_open_is_False__hide_is_called": {
            "name": "test_handle_response__keep_app_open_is_False__hide_is_called",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "renderer": [],
                "controller": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]"
                ],
                "GLib": [],
                "mocker": [
                    "dict"
                ]
            }
        },
        "TestDeferredResultRenderer.test_on_query_change__loading__is_canceled": {
            "name": "test_on_query_change__loading__is_canceled",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "renderer": []
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionController.py": {
        "TestExtensionController.controllers": {
            "name": "controllers",
            "location": 17,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionController.PreferencesEvent": {
            "name": "PreferencesEvent",
            "location": 21,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "str"
                ]
            }
        },
        "TestExtensionController.result_renderer": {
            "name": "result_renderer",
            "location": 28,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestExtensionController.extPrefs": {
            "name": "extPrefs",
            "location": 33,
            "return": [
                "int",
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Iterable",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "TestExtensionController.controller": {
            "name": "controller",
            "location": 38,
            "return": [
                "ExtensionController",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "controllers": [
                    "Dict",
                    "bool",
                    "bytes"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestExtensionController.test_configure__typical": {
            "name": "test_configure__typical",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "RuntimeError"
                ],
                "controllers": [
                    "Dict",
                    "neuromation.api.Config",
                    "bool",
                    "str"
                ],
                "extPrefs": [
                    "str",
                    "bool"
                ],
                "PreferencesEvent": [
                    "List[str]"
                ]
            }
        },
        "TestExtensionController.test_trigger_event__send__is_called": {
            "name": "test_trigger_event__send__is_called",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "int"
                ]
            }
        },
        "TestExtensionController.test_handle_query__KeywordQueryEvent__is_sent_with_query": {
            "name": "test_handle_query__KeywordQueryEvent__is_sent_with_query",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "result_renderer": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestExtensionController.test_handle_response__unsupported_data_type__exception_raised": {
            "name": "test_handle_response__unsupported_data_type__exception_raised",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestExtensionController.test_handle_response__is_called": {
            "name": "test_handle_response__is_called",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "result_renderer": [
                    "str",
                    "Dict"
                ],
                "mocker": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionDownloader.py": {
        "TestExtensionDownloader.ext_db": {
            "name": "ext_db",
            "location": 13,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionDownloader.downloader": {
            "name": "downloader",
            "location": 17,
            "return": [
                "ExtensionDownloader",
                "str",
                "bytes",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "ext_db": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestExtensionDownloader.gh_ext": {
            "name": "gh_ext",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestExtensionDownloader.download_tarball": {
            "name": "download_tarball",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionDownloader.ExtensionRemote": {
            "name": "ExtensionRemote",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionDownloader.untar": {
            "name": "untar",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionDownloader.datetime": {
            "name": "datetime",
            "location": 49,
            "return": [
                "str",
                "int",
                "float",
                "datetime.datetime",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "float",
                    "datetime.datetime",
                    "List[int]"
                ]
            }
        },
        "TestExtensionDownloader.test_download": {
            "name": "test_download",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "str",
                    "bool",
                    "int"
                ],
                "mocker": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "untar": [
                    "mock.MagicMock"
                ],
                "ext_db": [],
                "download_tarball": [
                    "mock.MagicMock"
                ],
                "datetime": []
            }
        },
        "TestExtensionDownloader.test_download_raises_AlreadyDownloadedError": {
            "name": "test_download_raises_AlreadyDownloadedError",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downloader": [],
                "ext_db": [
                    "mock.MagicMock"
                ],
                "mocker": [
                    "Callable"
                ]
            }
        },
        "TestExtensionDownloader.test_update": {
            "name": "test_update",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "str",
                    "Optional[Dict[str,bytes]]",
                    "bool",
                    "Dict[str,bytes]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "ext_db": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "gh_ext": [],
                "download_tarball": [
                    "Iterable[Tuple[int,int]]",
                    "Iterable[tuple[Union[int,int]]]"
                ],
                "untar": [
                    "mock.MagicMock"
                ],
                "datetime": [
                    "Dict",
                    "int"
                ]
            }
        },
        "TestExtensionDownloader.test_get_new_version_raises_ExtensionIsUpToDateError": {
            "name": "test_get_new_version_raises_ExtensionIsUpToDateError",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downloader": [],
                "ext_db": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExtensionDownloader.test_get_new_version__returns_new_version": {
            "name": "test_get_new_version__returns_new_version",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "ext_db": [
                    "str"
                ],
                "gh_ext": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionManifest.py": {
        "TestExtensionManifest.valid_manifest": {
            "name": "valid_manifest",
            "location": 10,
            "return": [
                "Dict[Text,Union[Text,list[dict[Text,Text]]]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_open__manifest_file__is_read": {
            "name": "test_open__manifest_file__is_read",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_validate__name_empty__exception_raised": {
            "name": "test_validate__name_empty__exception_raised",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_validate__valid_manifest__no_exceptions_raised": {
            "name": "test_validate__valid_manifest__no_exceptions_raised",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_manifest": [
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "TestExtensionManifest.test_validate__prefs_empty_id__exception_raised": {
            "name": "test_validate__prefs_empty_id__exception_raised",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_manifest": [
                    "int",
                    "Union[str, Iterable[str]]",
                    "dict"
                ]
            }
        },
        "TestExtensionManifest.test_validate__prefs_incorrect_type__exception_raised": {
            "name": "test_validate__prefs_incorrect_type__exception_raised",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_manifest": [
                    "int",
                    "dict",
                    "Union[str, Iterable[str]]",
                    "Iterable[float]"
                ]
            }
        },
        "TestExtensionManifest.test_validate__type_kw_empty_name__exception_raised": {
            "name": "test_validate__type_kw_empty_name__exception_raised",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_manifest": [
                    "int",
                    "dict",
                    "Union[str, Iterable[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestExtensionManifest.test_validate__raises_error_if_empty_default_value_for_keyword": {
            "name": "test_validate__raises_error_if_empty_default_value_for_keyword",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_manifest": [
                    "Callable",
                    "Union[str, Iterable[str]]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "TestExtensionManifest.test_validate__doesnt_raise_if_empty_default_value_for_non_keyword": {
            "name": "test_validate__doesnt_raise_if_empty_default_value_for_non_keyword",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid_manifest": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[float]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "TestExtensionManifest.test_check_compatibility__required_api_version_2__exception_raised": {
            "name": "test_check_compatibility__required_api_version_2__exception_raised",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_check_compatibility__manifest_version_12__exception_raised": {
            "name": "test_check_compatibility__manifest_version_12__exception_raised",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_check_compatibility__required_api_version_1__no_exceptions": {
            "name": "test_check_compatibility__required_api_version_1__no_exceptions",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_get_option__option_exists__value_returned": {
            "name": "test_get_option__option_exists__value_returned",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionManifest.test_get_option__option_doesnt_exist__default_returned": {
            "name": "test_get_option__option_doesnt_exist__default_returned",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionMode.py": {
        "TestExtensionMode.extServer": {
            "name": "extServer",
            "location": 11,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Iterable",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "TestExtensionMode.resultRenderer": {
            "name": "resultRenderer",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestExtensionMode.test_is_enabled__controller_is_running__returns_true": {
            "name": "test_is_enabled__controller_is_running__returns_true",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extServer": []
            }
        },
        "TestExtensionMode.xtest_is_enabled__query_only_contains_keyword__returns_false": {
            "name": "xtest_is_enabled__query_only_contains_keyword__returns_false",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extServer": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "TestExtensionMode.test_is_enabled__keyword__is_used_to_get_controller": {
            "name": "test_is_enabled__keyword__is_used_to_get_controller",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extServer": [
                    "bool"
                ]
            }
        },
        "TestExtensionMode.test_handle_query__controller_handle_query__is_called": {
            "name": "test_handle_query__controller_handle_query__is_called",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extServer": []
            }
        },
        "TestExtensionMode.test_handle_query__controller_handle_query__is_returned": {
            "name": "test_handle_query__controller_handle_query__is_returned",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extServer": []
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionPreferences.py": {
        "TestExtensionPreferences.db": {
            "name": "db",
            "location": 12,
            "return": [
                "set",
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestExtensionPreferences.manifest_prefs": {
            "name": "manifest_prefs",
            "location": 24,
            "return": [
                "List[dict[Text,Text]]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionPreferences.manifest": {
            "name": "manifest",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "manifest_prefs": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestExtensionPreferences.prefs": {
            "name": "prefs",
            "location": 51,
            "return": [
                "ExtensionPreferences",
                "bool",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionPreferences.test_get_items__db_open__is_called_once": {
            "name": "test_get_items__db_open__is_called_once",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [
                    "str",
                    "dict"
                ],
                "db": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "TestExtensionPreferences.test_get__user_value_empty__value_is_default": {
            "name": "test_get__user_value_empty__value_is_default",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [
                    "str"
                ]
            }
        },
        "TestExtensionPreferences.test_get__user_value_not_empty__value_is_user_value": {
            "name": "test_get__user_value_not_empty__value_is_user_value",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [
                    "str",
                    "list"
                ],
                "db": []
            }
        },
        "TestExtensionPreferences.test_get_active_keywords__one_keyword__is_returned": {
            "name": "test_get_active_keywords__one_keyword__is_returned",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [
                    "str"
                ]
            }
        },
        "TestExtensionPreferences.test_get_dict": {
            "name": "test_get_dict",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [
                    "str"
                ]
            }
        },
        "TestExtensionPreferences.test_set__db_put__is_called": {
            "name": "test_set__db_put__is_called",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [],
                "db": [
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestExtensionPreferences.test_set__db_commit__is_called": {
            "name": "test_set__db_commit__is_called",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [],
                "db": []
            }
        },
        "TestExtensionPreferences.db.find": {
            "name": "find",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "default": [
                    "None"
                ]
            }
        },
        "TestExtensionPreferences.test_get__user_value_not_empty__value_is_user_value.find": {
            "name": "find",
            "location": 64,
            "return": [
                "None",
                "str",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionRemote.py": {
        "base64_file_attachment": {
            "name": "base64_file_attachment",
            "location": 20,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "TestExtensionRemote.json_fetch": {
            "name": "json_fetch",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionRemote.remote": {
            "name": "remote",
            "location": 31,
            "return": [
                "ExtensionRemote",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionRemote.test_validate_versions": {
            "name": "test_validate_versions",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": []
            }
        },
        "TestExtensionRemote.test_get_compatible_ref_from_versions_json_mismatch__raises": {
            "name": "test_get_compatible_ref_from_versions_json_mismatch__raises",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [],
                "mocker": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestExtensionRemote.test_ext_id": {
            "name": "test_ext_id",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "str"
                ]
            }
        },
        "TestExtensionRemote.test_invalid_urls": {
            "name": "test_invalid_urls",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionRemote.test_get_download_url": {
            "name": "test_get_download_url",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "str"
                ]
            }
        },
        "TestExtensionRemote.test_get_commit": {
            "name": "test_get_commit",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [],
                "json_fetch": []
            }
        },
        "TestExtensionRemote.test_get_compatible_ref_from_versions_json": {
            "name": "test_get_compatible_ref_from_versions_json",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [],
                "json_fetch": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestExtensionRemote.test_get_compatible_ref_from_versions_json__mult_compatible": {
            "name": "test_get_compatible_ref_from_versions_json__mult_compatible",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote": [],
                "json_fetch": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionRunner.py": {
        "TestExtensionRunner.runner": {
            "name": "runner",
            "location": 11,
            "return": [
                "ExtensionRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionRunner.find_extensions": {
            "name": "find_extensions",
            "location": 17,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "TestExtensionRunner.timer": {
            "name": "timer",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionRunner.get_options": {
            "name": "get_options",
            "location": 25,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "List[List[int]]",
                    "str",
                    "Callable"
                ]
            }
        },
        "TestExtensionRunner.ExtensionPreferences": {
            "name": "ExtensionPreferences",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionRunner.json_dumps": {
            "name": "json_dumps",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExtensionRunner.SubprocessLauncher": {
            "name": "SubprocessLauncher",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionRunner.DataInputStream": {
            "name": "DataInputStream",
            "location": 41,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "bytes",
                    "set"
                ]
            }
        },
        "TestExtensionRunner.ProcessErrorExtractor": {
            "name": "ProcessErrorExtractor",
            "location": 45,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Sequence"
                ]
            }
        },
        "TestExtensionRunner.time": {
            "name": "time",
            "location": 49,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TestExtensionRunner.test_run__basic_execution__is_called": {
            "name": "test_run__basic_execution__is_called",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "str"
                ],
                "ExtensionPreferences": [],
                "SubprocessLauncher": [],
                "DataInputStream": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestExtensionRunner.test_run_all__run__called_with_extension_ids": {
            "name": "test_run_all__run__called_with_extension_ids",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "mocker": [
                    "bool",
                    "str",
                    "Hashable",
                    "int"
                ],
                "find_extensions": [
                    "str"
                ]
            }
        },
        "TestExtensionRunner.test_set_extension_error": {
            "name": "test_set_extension_error",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestExtensionRunner.test_read_stderr_line": {
            "name": "test_read_stderr_line",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "DataInputStream": [
                    "bool"
                ]
            }
        },
        "TestExtensionRunner.test_handle_wait__signaled": {
            "name": "test_handle_wait__signaled",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "Callable"
                ],
                "DataInputStream": [
                    "str",
                    "Dict",
                    "List",
                    "List[bytes]",
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "None"
                ],
                "SubprocessLauncher": [
                    "str",
                    "Dict",
                    "List",
                    "List[bytes]",
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "None"
                ]
            }
        },
        "TestExtensionRunner.test_handle_wait__rapid_exit": {
            "name": "test_handle_wait__rapid_exit",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "str",
                    "bool",
                    "tuple",
                    "Optional[int]"
                ],
                "DataInputStream": [
                    "bool",
                    "str",
                    "Optional[Callable[,None]]",
                    "Callable[,None]",
                    "None"
                ],
                "SubprocessLauncher": [
                    "bool",
                    "str",
                    "Optional[Callable[,None]]",
                    "Callable[,None]",
                    "None"
                ],
                "time": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "int"
                ],
                "ProcessErrorExtractor": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "TestExtensionRunner.test_handle_wait__restart": {
            "name": "test_handle_wait__restart",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "DataInputStream": [
                    "int",
                    "Callable",
                    "List[str]",
                    "bool"
                ],
                "SubprocessLauncher": [
                    "int",
                    "Callable",
                    "List[str]",
                    "bool"
                ],
                "time": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestExtensionRunner.test_stop": {
            "name": "test_stop",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "timer": [],
                "SubprocessLauncher": [
                    "bool",
                    "Dict"
                ],
                "DataInputStream": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestExtensionRunner.test_confirm_termination": {
            "name": "test_confirm_termination",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ExtensionServer.py": {
        "TestExtensionServer.SocketService": {
            "name": "SocketService",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionServer.UnixSocketAddress": {
            "name": "UnixSocketAddress",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionServer.ExtensionController": {
            "name": "ExtensionController",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionServer.path_exists": {
            "name": "path_exists",
            "location": 22,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestExtensionServer.GObject": {
            "name": "GObject",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionServer.unlink": {
            "name": "unlink",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionServer.PickleFramer": {
            "name": "PickleFramer",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestExtensionServer.server": {
            "name": "server",
            "location": 40,
            "return": [
                "ExtensionServer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtensionServer.test_start": {
            "name": "test_start",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Sequence[Union[int, float]]",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "TestExtensionServer.test_start__clean_socket": {
            "name": "test_start__clean_socket",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "dict"
                ],
                "path_exists": [
                    "mock.MagicMock"
                ],
                "unlink": [
                    "Iterable"
                ]
            }
        },
        "TestExtensionServer.test_start__server_is_running__exception_raised": {
            "name": "test_start__server_is_running__exception_raised",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Union[int, float]",
                    "Sequence[Union[int, float]]"
                ]
            }
        },
        "TestExtensionServer.test_handle_incoming": {
            "name": "test_handle_incoming",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "bool",
                    "Optional[str]"
                ],
                "PickleFramer": [
                    "str"
                ]
            }
        },
        "TestExtensionServer.test_handle_registration": {
            "name": "test_handle_registration",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Optional[str]",
                    "bool"
                ],
                "PickleFramer": [],
                "GObject": [],
                "ExtensionController": []
            }
        },
        "TestExtensionServer.test_stop": {
            "name": "test_stop",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": []
            }
        },
        "TestExtensionServer.test_get_controller_by_keyword__keyword_found__controller_returned": {
            "name": "test_get_controller_by_keyword__keyword_found__controller_returned",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "str"
                ]
            }
        },
        "TestExtensionServer.test_get_controller_by_keyword__keyword_not_found__None_returned": {
            "name": "test_get_controller_by_keyword__keyword_not_found__None_returned",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_extension_finder.py": {
        "test_find_extensions__test_extension__is_found": {
            "name": "test_find_extensions__test_extension__is_found",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_ProcessErrorExtractor.py": {
        "TestProcessErrorExtractor.test_is_import_error__true": {
            "name": "test_is_import_error__true",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessErrorExtractor.test_is_import_error__false": {
            "name": "test_is_import_error__false",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessErrorExtractor.test_get_missing_package_name__returns_name": {
            "name": "test_get_missing_package_name__returns_name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/modes/apps/extensions/test_extension/main.py": {
        "exit_gracefully": {
            "name": "exit_gracefully",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/calc/test_CalcMode.py": {
        "TestCalcMode.mode": {
            "name": "mode",
            "location": 9,
            "return": [
                "CalcMode",
                "List[int]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalcMode.test_is_enabled": {
            "name": "test_is_enabled",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "TestCalcMode.test_eval_expr_no_floating_point_errors": {
            "name": "test_eval_expr_no_floating_point_errors",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalcMode.test_eval_expr_rounding": {
            "name": "test_eval_expr_rounding",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalcMode.test_eval_expr_syntax_variation": {
            "name": "test_eval_expr_syntax_variation",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalcMode.test_handle_query": {
            "name": "test_handle_query",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List",
                    "None"
                ]
            }
        },
        "TestCalcMode.test_handle_query__invalid_expr": {
            "name": "test_handle_query__invalid_expr",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "bool",
                    "str",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/calc/test_CalcResult.py": {
        "TestCalcResult.DoNothingAction": {
            "name": "DoNothingAction",
            "location": 8,
            "return": [
                "float",
                "bytearray",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TestCalcResult.CopyToClipboardAction": {
            "name": "CopyToClipboardAction",
            "location": 12,
            "return": [
                "bytearray",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestCalcResult.test_get_name": {
            "name": "test_get_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalcResult.test_get_description": {
            "name": "test_get_description",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalcResult.test_on_enter": {
            "name": "test_on_enter",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "CopyToClipboardAction": [
                    "bool"
                ]
            }
        },
        "TestCalcResult.test_on_enter__error__DoNothingAction_returned": {
            "name": "test_on_enter__error__DoNothingAction_returned",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "DoNothingAction": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "CopyToClipboardAction": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/file_browser/test_FileBrowserMode.py": {
        "MockDirEntry.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "atime": [
                    "bool",
                    "str",
                    "Sequence",
                    "int",
                    "Mapping",
                    "None",
                    "Mapping[str,Any]",
                    "Optional[str]"
                ],
                "is_file": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "MockDirEntry.is_file": {
            "name": "is_file",
            "location": 14,
            "return": [
                "str",
                "Set[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDirEntry.stat": {
            "name": "stat",
            "location": 17,
            "return": [
                "types.SimpleNamespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileBrowserMode.scandir": {
            "name": "scandir",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestFileBrowserMode.SetUserQueryAction": {
            "name": "SetUserQueryAction",
            "location": 35,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TestFileBrowserMode.mode": {
            "name": "mode",
            "location": 39,
            "return": [
                "str",
                "FileBrowserMode"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileBrowserMode.test_is_enabled": {
            "name": "test_is_enabled",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "TestFileBrowserMode.test_list_files": {
            "name": "test_list_files",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "List[str]",
                    "IO",
                    "Dict[str,str]"
                ]
            }
        },
        "TestFileBrowserMode.test_filter_dot_files": {
            "name": "test_filter_dot_files",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "TestFileBrowserMode.test_handle_query__path_from_q_exists__dir_listing_rendered": {
            "name": "test_handle_query__path_from_q_exists__dir_listing_rendered",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileBrowserMode.test_handle_query__invalid_path__empty_list_rendered": {
            "name": "test_handle_query__invalid_path__empty_list_rendered",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "TestFileBrowserMode.test_handle_key_press_event": {
            "name": "test_handle_key_press_event",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "mocker": [],
                "SetUserQueryAction": []
            }
        },
        "TestFileBrowserMode.test_handle_key_press_event__not_backspace": {
            "name": "test_handle_key_press_event__not_backspace",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "mocker": [],
                "SetUserQueryAction": []
            }
        },
        "TestFileBrowserMode.test_handle_key_press_event__ctrl_pressed": {
            "name": "test_handle_key_press_event__ctrl_pressed",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "mocker": [],
                "SetUserQueryAction": []
            }
        },
        "TestFileBrowserMode.test_handle_key_press_event__wrong_cursor_position": {
            "name": "test_handle_key_press_event__wrong_cursor_position",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "mocker": [],
                "SetUserQueryAction": []
            }
        },
        "TestFileBrowserMode.test_handle_key_press_event__not_dir": {
            "name": "test_handle_key_press_event__not_dir",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bytes",
                    "Callable",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "mocker": [],
                "SetUserQueryAction": [
                    "Callable"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/file_browser/test_FileBrowserResult.py": {
        "TestFileBrowserResult.test_get_name": {
            "name": "test_get_name",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileBrowserResult.test_icon": {
            "name": "test_icon",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/tests/modes/shortcuts/test_ShortcutMode.py": {
        "TestShortcutMode.mode": {
            "name": "mode",
            "location": 8,
            "return": [
                "ShortcutMode",
                "List[int]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutMode.shortcuts_db": {
            "name": "shortcuts_db",
            "location": 12,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestShortcutMode.ShortcutResult": {
            "name": "ShortcutResult",
            "location": 16,
            "return": [
                "str",
                "float",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Type",
                    "str",
                    "bool"
                ]
            }
        },
        "TestShortcutMode.test_is_enabled__query_starts_with_query_and_space__returns_true": {
            "name": "test_is_enabled__query_starts_with_query_and_space__returns_true",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [],
                "shortcuts_db": [
                    "bytes"
                ]
            }
        },
        "TestShortcutMode.test_is_enabled__query_starts_with_query__returns_false": {
            "name": "test_is_enabled__query_starts_with_query__returns_false",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "Set[str]"
                ],
                "shortcuts_db": [
                    "bytes"
                ]
            }
        },
        "TestShortcutMode.test_is_enabled__query_doesnt_start_with_query__returns_false": {
            "name": "test_is_enabled__query_doesnt_start_with_query__returns_false",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "Set[str]"
                ],
                "shortcuts_db": [
                    "bytes"
                ]
            }
        },
        "TestShortcutMode.test_is_enabled__query_run_without_argument__returns_true": {
            "name": "test_is_enabled__query_run_without_argument__returns_true",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [],
                "shortcuts_db": []
            }
        },
        "TestShortcutMode.test_handle_query__return_value__is": {
            "name": "test_handle_query__return_value__is",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [],
                "shortcuts_db": [],
                "ShortcutResult": []
            }
        },
        "TestShortcutMode.test_handle_query__ShortcutResult__is_called": {
            "name": "test_handle_query__ShortcutResult__is_called",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "shortcuts_db": [
                    "bytes"
                ],
                "ShortcutResult": [
                    "dict"
                ]
            }
        },
        "TestShortcutMode.test_get_default_items__ShortcutResults__returned": {
            "name": "test_get_default_items__ShortcutResults__returned",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "shortcuts_db": [
                    "bytes"
                ],
                "ShortcutResult": [
                    "str"
                ]
            }
        },
        "TestShortcutMode.test_get_searchable_items": {
            "name": "test_get_searchable_items",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "shortcuts_db": [
                    "bytes"
                ],
                "ShortcutResult": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/tests/modes/shortcuts/test_ShortcutResult.py": {
        "TestShortcutResult.OpenAction": {
            "name": "OpenAction",
            "location": 9,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestShortcutResult.RunScriptAction": {
            "name": "RunScriptAction",
            "location": 13,
            "return": [
                "float",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "TestShortcutResult.SetUserQueryAction": {
            "name": "SetUserQueryAction",
            "location": 17,
            "return": [
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TestShortcutResult.item": {
            "name": "item",
            "location": 21,
            "return": [
                "ShortcutResult",
                "str",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutResult.test_keyword": {
            "name": "test_keyword",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int"
                ]
            }
        },
        "TestShortcutResult.test_name": {
            "name": "test_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "TestShortcutResult.test_get_description": {
            "name": "test_get_description",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestShortcutResult.test_icon": {
            "name": "test_icon",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestShortcutResult.test_on_enter": {
            "name": "test_on_enter",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "int"
                ],
                "OpenAction": [],
                "SetUserQueryAction": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "TestShortcutResult.test_on_enter__default_search": {
            "name": "test_on_enter__default_search",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "List[Dict]",
                    "dict"
                ],
                "OpenAction": [],
                "SetUserQueryAction": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestShortcutResult.test_on_enter__run_without_arguments": {
            "name": "test_on_enter__run_without_arguments",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "List[dict]"
                ],
                "OpenAction": [],
                "SetUserQueryAction": [
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestShortcutResult.test_on_enter__misspelled_kw": {
            "name": "test_on_enter__misspelled_kw",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "int"
                ],
                "OpenAction": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "int"
                ],
                "SetUserQueryAction": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestShortcutResult.test_on_enter__run_file": {
            "name": "test_on_enter__run_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "RunScriptAction": []
            }
        }
    },
    "Ulauncher-6/tests/modes/shortcuts/test_ShortcutsDb.py": {
        "TestShortcutsDb.get_default_shortcuts": {
            "name": "get_default_shortcuts",
            "location": 9,
            "return": [
                "list",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "TestShortcutsDb.db": {
            "name": "db",
            "location": 15,
            "return": [
                "Callable",
                "ShortcutsDb"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "bool",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestShortcutsDb.test_put_shortcut": {
            "name": "test_put_shortcut",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "TestShortcutsDb.test_commit__ensures_user_path": {
            "name": "test_commit__ensures_user_path",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Optional[int]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "mocker": []
            }
        }
    },
    "Ulauncher-6/tests/ui/test_ItemNavigation.py": {
        "TestItemNavigation.items": {
            "name": "items",
            "location": 9,
            "return": [
                "List",
                "int",
                "Optional[bool]",
                "Optional[Dict[str,Any]]",
                "bool",
                "Optional[Sequence[Any]]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItemNavigation.nav": {
            "name": "nav",
            "location": 13,
            "return": [
                "ItemNavigation",
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "TestItemNavigation.test_select_is_called": {
            "name": "test_select_is_called",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "bool",
                    "int"
                ],
                "items": []
            }
        },
        "TestItemNavigation.test_select_and_deselect_is_called": {
            "name": "test_select_and_deselect_is_called",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "str",
                    "int"
                ],
                "items": []
            }
        },
        "TestItemNavigation.test_go_up_from_start": {
            "name": "test_go_up_from_start",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [],
                "items": []
            }
        },
        "TestItemNavigation.test_go_up_from_1st": {
            "name": "test_go_up_from_1st",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [],
                "items": []
            }
        },
        "TestItemNavigation.test_go_up_from_last": {
            "name": "test_go_up_from_last",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "str",
                    "int"
                ],
                "items": []
            }
        },
        "TestItemNavigation.test_go_down_from_2nd": {
            "name": "test_go_down_from_2nd",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [],
                "items": []
            }
        },
        "TestItemNavigation.test_go_down_from_last": {
            "name": "test_go_down_from_last",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "str",
                    "int"
                ],
                "items": []
            }
        },
        "TestItemNavigation.test_enter_by_index": {
            "name": "test_enter_by_index",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "bool",
                    "int"
                ],
                "items": []
            }
        },
        "TestItemNavigation.test_enter_no_index": {
            "name": "test_enter_no_index",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "float"
                ],
                "items": [
                    "Callable[[Any, Any], Any]"
                ]
            }
        },
        "TestItemNavigation.test_enter__alternative": {
            "name": "test_enter__alternative",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nav": [
                    "Callable[[list], None]",
                    "bool"
                ],
                "items": [
                    "Callable[[Any, Any], Any]"
                ]
            }
        }
    },
    "Ulauncher-6/tests/ui/test_preferences_context_server.py": {
        "TestPreferencesContextServer.settings": {
            "name": "settings",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPreferencesContextServer.ulauncherWindow": {
            "name": "ulauncherWindow",
            "location": 14,
            "return": [
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "TestPreferencesContextServer.autostart_pref": {
            "name": "autostart_pref",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPreferencesContextServer.webview": {
            "name": "webview",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPreferencesContextServer.hotkey_dialog": {
            "name": "hotkey_dialog",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPreferencesContextServer.context_server": {
            "name": "context_server",
            "location": 31,
            "return": [
                "PreferencesContextServer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "List[str]",
                    "Callable"
                ],
                "webview": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "autostart_pref": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "ulauncherWindow": [
                    "bool",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "TestPreferencesContextServer.test_apply_settings_show_indicator_icon": {
            "name": "test_apply_settings_show_indicator_icon",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_server": [],
                "settings": [
                    "float"
                ]
            }
        },
        "TestPreferencesContextServer.test_set_hotkey_show_app": {
            "name": "test_set_hotkey_show_app",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_server": [],
                "settings": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestPreferencesContextServer.test_set_autostart": {
            "name": "test_set_autostart",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_server": [],
                "autostart_pref": []
            }
        },
        "TestPreferencesContextServer.test_set_theme_name": {
            "name": "test_set_theme_name",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_server": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "settings": [
                    "Optional[int]",
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "Callable",
                    "None"
                ],
                "ulauncherWindow": [
                    "Callable",
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "TestPreferencesContextServer.test_show_hotkey_dialog": {
            "name": "test_show_hotkey_dialog",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_server": [],
                "hotkey_dialog": []
            }
        },
        "TestPreferencesContextServer.test_set_grab_mouse_pointer": {
            "name": "test_set_grab_mouse_pointer",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_server": [
                    "dict"
                ],
                "settings": []
            }
        }
    },
    "Ulauncher-6/tests/ui/test_ResultWidget.py": {
        "TestResultWidget.item_obj": {
            "name": "item_obj",
            "location": 13,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResultWidget.Theme": {
            "name": "Theme",
            "location": 17,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestResultWidget.scroll_to_focus": {
            "name": "scroll_to_focus",
            "location": 21,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestResultWidget.result_wgt": {
            "name": "result_wgt",
            "location": 25,
            "return": [
                "ResultWidget",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "str"
                ],
                "item_obj": [
                    "str"
                ]
            }
        },
        "TestResultWidget.item_box": {
            "name": "item_box",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "TestResultWidget.builder": {
            "name": "builder",
            "location": 35,
            "return": [
                "str",
                "Dict[str, Sequence[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResultWidget.pixbuf": {
            "name": "pixbuf",
            "location": 39,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResultWidget.test_initialize": {
            "name": "test_initialize",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": [],
                "item_obj": [
                    "Iterable[T]",
                    "Dict"
                ],
                "mocker": []
            }
        },
        "TestResultWidget.test_set_index": {
            "name": "test_set_index",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [],
                "mocker": []
            }
        },
        "TestResultWidget.test_select": {
            "name": "test_select",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [],
                "item_box": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "mocker": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestResultWidget.test_deselect": {
            "name": "test_deselect",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [],
                "item_box": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "mocker": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestResultWidget.test_set_icon": {
            "name": "test_set_icon",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ],
                "builder": [],
                "pixbuf": [
                    "int"
                ]
            }
        },
        "TestResultWidget.test_set_name": {
            "name": "test_set_name",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [
                    "str",
                    "int",
                    "type"
                ],
                "builder": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestResultWidget.test_on_click": {
            "name": "test_on_click",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "str",
                    "int"
                ],
                "result_wgt": [
                    "str",
                    "int"
                ]
            }
        },
        "TestResultWidget.test_on_click_alt_enter": {
            "name": "test_on_click_alt_enter",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "str",
                    "int"
                ],
                "result_wgt": [
                    "str",
                    "int"
                ]
            }
        },
        "TestResultWidget.test_set_description": {
            "name": "test_set_description",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [
                    "float",
                    "List[List[int]]",
                    "str"
                ],
                "builder": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestResultWidget.test_no_description": {
            "name": "test_no_description",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [
                    "str"
                ],
                "builder": []
            }
        },
        "TestResultWidget.test_set_shortcut": {
            "name": "test_set_shortcut",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ],
                "builder": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestResultWidget.test_keyword": {
            "name": "test_keyword",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_wgt": [],
                "item_obj": []
            }
        }
    },
    "Ulauncher-6/tests/ui/windows/test_HotkeyDialog.py": {
        "TestHotkeyDialog.dialog": {
            "name": "dialog",
            "location": 12,
            "return": [
                "HotkeyDialog",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHotkeyDialog.event": {
            "name": "event",
            "location": 18,
            "return": [
                "Iterable",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHotkeyDialog.widget": {
            "name": "widget",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHotkeyDialog.emit": {
            "name": "emit",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dialog": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "mocker": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "TestHotkeyDialog.test_on_key_press__invalid_hotkey": {
            "name": "test_on_key_press__invalid_hotkey",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "widget": [],
                "event": [
                    "ui.window.Window"
                ]
            }
        },
        "TestHotkeyDialog.test_on_key_press__valid_hotkey": {
            "name": "test_on_key_press__valid_hotkey",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dialog": [
                    "Callable",
                    "str"
                ],
                "widget": [
                    "Callable"
                ],
                "event": [
                    "bytes"
                ],
                "emit": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/tests/ui/windows/test_UlauncherWindow.py": {
        "TestUlauncherWindow.init_styles": {
            "name": "init_styles",
            "location": 15,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestUlauncherWindow.is_x11_compatible": {
            "name": "is_x11_compatible",
            "location": 19,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestUlauncherWindow.Theme": {
            "name": "Theme",
            "location": 25,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestUlauncherWindow.load_available_themes": {
            "name": "load_available_themes",
            "location": 29,
            "return": [
                "bytes",
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.get_scaling_factor": {
            "name": "get_scaling_factor",
            "location": 33,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.new_image_from_surface": {
            "name": "new_image_from_surface",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "TestUlauncherWindow.load_icon": {
            "name": "load_icon",
            "location": 43,
            "return": [
                "bytes",
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.AppResult": {
            "name": "AppResult",
            "location": 47,
            "return": [
                "bytes",
                "str",
                "Tuple[int, int]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]"
                ]
            }
        },
        "TestUlauncherWindow.settings": {
            "name": "settings",
            "location": 51,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestUlauncherWindow.get_scr_geometry": {
            "name": "get_scr_geometry",
            "location": 55,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.Keybinder": {
            "name": "Keybinder",
            "location": 59,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestUlauncherWindow.GtkBuilder": {
            "name": "GtkBuilder",
            "location": 63,
            "return": [
                "dict",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.result": {
            "name": "result",
            "location": 67,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUlauncherWindow.os_path_exists": {
            "name": "os_path_exists",
            "location": 71,
            "return": [
                "int",
                "bytes",
                "Tuple[int, int]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.get_asset": {
            "name": "get_asset",
            "location": 75,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestUlauncherWindow.window": {
            "name": "window",
            "location": 79,
            "return": [
                "UlauncherWindow",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUlauncherWindow.test_create_item_widgets": {
            "name": "test_create_item_widgets",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "result": [
                    "bool"
                ],
                "GtkBuilder": [
                    "bool"
                ],
                "get_asset": []
            }
        }
    },
    "Ulauncher-6/tests/utils/test_fold_user_path.py": {
        "test_fold_user_path": {
            "name": "test_fold_user_path",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/utils/test_fuzzy_search.py": {
        "test_get_matching_indexes": {
            "name": "test_get_matching_indexes",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_score": {
            "name": "test_get_score",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "xtest_speed": {
            "name": "xtest_speed",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/utils/test_KeyValueJsonDb.py": {
        "TestKeyValueJsonDb.db_name": {
            "name": "db_name",
            "location": 9,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestKeyValueJsonDb.db": {
            "name": "db",
            "location": 13,
            "return": [
                "dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str",
                    "int"
                ]
            }
        },
        "TestKeyValueJsonDb.test_commit": {
            "name": "test_commit",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str",
                    "int"
                ]
            }
        },
        "TestKeyValueJsonDb.test_remove": {
            "name": "test_remove",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        }
    },
    "Ulauncher-6/tests/utils/test_Router.py": {
        "TestRouter.router": {
            "name": "router",
            "location": 11,
            "return": [
                "Router",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRouter.test_router_route_raises": {
            "name": "test_router_route_raises",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "str",
                    "float"
                ]
            }
        },
        "TestRouter.test_router_dispatch_raises": {
            "name": "test_router_dispatch_raises",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "TestRouter.test_router_dispatch": {
            "name": "test_router_dispatch",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "TestRouter.test_router_dispatch.get_all": {
            "name": "get_all",
            "location": 28,
            "return": [
                "Text",
                "str",
                "Set",
                "List[str]",
                "Dict",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "url_params": [
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/tests/utils/test_Settings.py": {
        "TestSettings.filename": {
            "name": "filename",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "TestSettings.settings": {
            "name": "settings",
            "location": 14,
            "return": [
                "Settings",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_load_from_file": {
            "name": "test_load_from_file",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Callable",
                    "str"
                ],
                "filename": [
                    "str",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]",
                    "Iterable[str]",
                    "settings.Settings"
                ]
            }
        },
        "TestSettings.test_save_to_file": {
            "name": "test_save_to_file",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "Optional[str]",
                    "Optional[Pattern[str]]",
                    "Dict[str, str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "TestSettings.test_without_file": {
            "name": "test_without_file",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str"
                ]
            }
        },
        "TestSettings.test_subscribe_to_property_change_signal": {
            "name": "test_subscribe_to_property_change_signal",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "TestSettings.test_get_property_default": {
            "name": "test_get_property_default",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Callable",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        }
    },
    "Ulauncher-6/tests/utils/test_string.py": {
        "test_remove_accents": {
            "name": "test_remove_accents",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/utils/test_text_highlighter.py": {
        "test_highlight_text": {
            "name": "test_highlight_text",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/tests/utils/test_Theme.py": {
        "TestTheme.theme": {
            "name": "theme",
            "location": 9,
            "return": [
                "Theme",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestTheme.test_validate__not_raises_on_valid_manifest": {
            "name": "test_validate__not_raises_on_valid_manifest",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "theme": [
                    "str"
                ]
            }
        },
        "TestTheme.test_validate__raises_on_invalid_manifest_version": {
            "name": "test_validate__raises_on_invalid_manifest_version",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "theme": [
                    "str"
                ]
            }
        },
        "TestTheme.test_validate__raises_when_css_file_doesnt_exist": {
            "name": "test_validate__raises_when_css_file_doesnt_exist",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "theme": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/tests/utils/test_timer.py": {
        "TestTimer.GLib": {
            "name": "GLib",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestTimer.test_timer_subsecond": {
            "name": "test_timer_subsecond",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GLib": []
            }
        },
        "TestTimer.test_timer_second": {
            "name": "test_timer_second",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GLib": []
            }
        }
    },
    "Ulauncher-6/tests/utils/test_version.py": {
        "TestVersion.test_valid_range": {
            "name": "test_valid_range",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.test_satisfies": {
            "name": "test_satisfies",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/config.py": {
        "get_asset": {
            "name": "get_asset",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_options": {
            "name": "get_options",
            "location": 66,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_default_shortcuts": {
            "name": "get_default_shortcuts",
            "location": 94,
            "return": [
                "Dict[(str, Dict[(str, Union[(bool, float, str)])])]"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/main.py": {
        "reload_config": {
            "name": "reload_config",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[paradigm.models.Base,tests.utils.Args]",
                    "Tuple[Union[paradigm.models.Base,tests.utils.Args]]"
                ],
                "logger": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "str",
                    "trinity.config.ChainConfig"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.except_hook": {
            "name": "except_hook",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "exctype": [
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[Union[int, float]]",
                    "float",
                    "bytes",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ],
                "value": [
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[Union[int, float]]",
                    "float",
                    "bytes",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ],
                "tb": [
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[Union[int, float]]",
                    "float",
                    "bytes",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/__init__.py": {},
    "Ulauncher-6/ulauncher/api/extension.py": {
        "Extension.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.subscribe": {
            "name": "subscribe",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "listener": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Extension.trigger_event": {
            "name": "trigger_event",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "Extension.run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.on_query_change": {
            "name": "on_query_change",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[dict]",
                    "None",
                    "bool",
                    "Dict"
                ]
            }
        },
        "Extension.on_item_enter": {
            "name": "on_item_enter",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Iterable[bytes]",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[bool]",
                    "Tuple",
                    "List[Dict]"
                ]
            }
        },
        "Extension.on_preferences_update": {
            "name": "on_preferences_update",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "bool",
                    "str",
                    "int"
                ],
                "value": [
                    "bool",
                    "str",
                    "int"
                ],
                "previous_value": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Extension.on_unload": {
            "name": "on_unload",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesUpdateEventListener.on_event": {
            "name": "on_event",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping"
                ],
                "extension": [
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/__init__.py": {},
    "Ulauncher-6/ulauncher/api/client/Client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Client.connect": {
            "name": "connect",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.on_message": {
            "name": "on_message",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framer": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "event": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "Client.on_close": {
            "name": "on_close",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framer": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Client.send": {
            "name": "send",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Dict",
                    "logging.LogRecord",
                    "MutableMapping",
                    "MutableMapping[str,Any]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/client/EventListener.py": {
        "EventListener.on_event": {
            "name": "on_event",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "extension": [
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/client/Extension.py": {},
    "Ulauncher-6/ulauncher/api/client/setup_logging.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/api/client/__init__.py": {},
    "Ulauncher-6/ulauncher/api/result/extension_result.py": {
        "ExtensionResult.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionResult.on_enter": {
            "name": "on_enter",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        },
        "ExtensionResult.on_alt_enter": {
            "name": "on_alt_enter",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/result/extension_small_result.py": {},
    "Ulauncher-6/ulauncher/api/result/result.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text",
                    "str",
                    "Dict[str,str]"
                ],
                "description": [
                    "Text",
                    "str",
                    "int"
                ],
                "keyword": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "icon": [
                    "str",
                    "None",
                    "List",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "highlightable": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "float",
                    "Optional[float]"
                ],
                "on_enter": [
                    "str",
                    "None",
                    "List",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "on_alt_enter": [
                    "str",
                    "None",
                    "List",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Result.get_keyword": {
            "name": "get_keyword",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.get_name": {
            "name": "get_name",
            "location": 51,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.get_icon": {
            "name": "get_icon",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.get_name_highlighted": {
            "name": "get_name_highlighted",
            "location": 57,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "myaku.datastore.Query"
                ],
                "color": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Result.get_description": {
            "name": "get_description",
            "location": 74,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Iterable",
                    "bytes",
                    "None",
                    "Union[str,bytes]",
                    "int",
                    "Optional[dict]",
                    "Optional[int]"
                ]
            }
        },
        "Result.on_enter": {
            "name": "on_enter",
            "location": 82,
            "return": [
                "None",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "alerta.database.base.Query",
                    "Query"
                ]
            }
        },
        "Result.on_alt_enter": {
            "name": "on_alt_enter",
            "location": 90,
            "return": [
                "None",
                "utils.Node",
                "trezor.utils.Writer",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Query"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/result/searchable_result.py": {
        "SearchableResult.search_score": {
            "name": "search_score",
            "location": 9,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "Tuple"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/result/small_result.py": {},
    "Ulauncher-6/ulauncher/api/result/__init__.py": {},
    "Ulauncher-6/ulauncher/api/shared/errors.py": {
        "UlauncherAPIError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Sequence[int]"
                ],
                "error_name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/event.py": {
        "BaseEvent.__eq__": {
            "name": "__eq__",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseEvent.__ne__": {
            "name": "__ne__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "RegisterEvent.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "KeywordQueryEvent.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "KeywordQueryEvent.get_keyword": {
            "name": "get_keyword",
            "location": 35,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordQueryEvent.get_query": {
            "name": "get_query",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordQueryEvent.get_argument": {
            "name": "get_argument",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemEnterEvent.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "DataFrame",
                    "T"
                ]
            }
        },
        "ItemEnterEvent.get_data": {
            "name": "get_data",
            "location": 68,
            "return": [
                "Dict[str, str]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesUpdateEvent.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "previous_value": [
                    "str",
                    "List[str]",
                    "Callable",
                    "int",
                    "Callable[[str],str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "TextIO",
                    "Optional[TextIO]",
                    "None"
                ],
                "value": [
                    "bool",
                    "str",
                    "Type",
                    "Optional[Type]",
                    "None",
                    "Optional[Union[str,int]]",
                    "Callable",
                    "Optional[Callable]",
                    "Optional[bool]"
                ]
            }
        },
        "PreferencesEvent.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "Callable",
                    "str",
                    "Tuple",
                    "List[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/query.py": {
        "Query._get_components": {
            "name": "_get_components",
            "location": 3,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.keyword": {
            "name": "keyword",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.argument": {
            "name": "argument",
            "location": 12,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.get_keyword": {
            "name": "get_keyword",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.get_argument": {
            "name": "get_argument",
            "location": 18,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/Response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "action": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/socket_path.py": {
        "get_socket_path": {
            "name": "get_socket_path",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/api/shared/__init__.py": {},
    "Ulauncher-6/ulauncher/api/shared/action/ActionList.py": {
        "ActionList.keep_app_open": {
            "name": "keep_app_open",
            "location": 12,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionList.run": {
            "name": "run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/BaseAction.py": {
        "BaseAction.run": {
            "name": "run",
            "location": 4,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/CopyToClipboardAction.py": {
        "CopyToClipboardAction.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "int"
                ]
            }
        },
        "CopyToClipboardAction.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/DoNothingAction.py": {
        "DoNothingAction.run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/ExtensionCustomAction.py": {
        "ExtensionCustomAction.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "keep_app_open": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "ExtensionCustomAction.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/HideWindowAction.py": {
        "HideWindowAction.run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/OpenAction.py": {
        "OpenAction.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Mapping[str,Dict[str,Any]]",
                    "Mapping",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "OpenAction.run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/OpenUrlAction.py": {},
    "Ulauncher-6/ulauncher/api/shared/action/RenderResultListAction.py": {
        "RenderResultListAction.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_list": [
                    "List[str]"
                ]
            }
        },
        "RenderResultListAction.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/RunScriptAction.py": {
        "RunScriptAction.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "RunScriptAction.run": {
            "name": "run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunScriptAction.remove_temp_file": {
            "name": "remove_temp_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/SetUserQueryAction.py": {
        "SetUserQueryAction.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_query": [
                    "str",
                    "bool",
                    "Tuple[int]",
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "SetUserQueryAction.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetUserQueryAction._update_query": {
            "name": "_update_query",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/api/shared/action/__init__.py": {},
    "Ulauncher-6/ulauncher/api/shared/item/ExtensionResultItem.py": {},
    "Ulauncher-6/ulauncher/api/shared/item/ExtensionSmallResultItem.py": {},
    "Ulauncher-6/ulauncher/api/shared/item/ResultItem.py": {},
    "Ulauncher-6/ulauncher/api/shared/item/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/BaseMode.py": {
        "BaseMode.is_enabled": {
            "name": "is_enabled",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ]
            }
        },
        "BaseMode.on_query_change": {
            "name": "on_query_change",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[dict]",
                    "None",
                    "bool",
                    "Dict"
                ]
            }
        },
        "BaseMode.handle_key_press_event": {
            "name": "handle_key_press_event",
            "location": 18,
            "return": [
                "ulauncher.api.shared.action.DoNothingAction.DoNothingAction"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "str",
                    "int"
                ],
                "event": [
                    "str",
                    "int"
                ],
                "query": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseMode.handle_query": {
            "name": "handle_query",
            "location": 27,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[dict]",
                    "None",
                    "bool",
                    "Dict"
                ]
            }
        },
        "BaseMode.get_searchable_items": {
            "name": "get_searchable_items",
            "location": 33,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMode.get_fallback_results": {
            "name": "get_fallback_results",
            "location": 39,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/ModeHandler.py": {
        "ModeHandler.get_instance": {
            "name": "get_instance",
            "location": 18,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ModeHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modes": [
                    "int",
                    "bool"
                ]
            }
        },
        "ModeHandler.on_query_change": {
            "name": "on_query_change",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]",
                    "bool"
                ]
            }
        },
        "ModeHandler.on_key_press_event": {
            "name": "on_key_press_event",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "Dict"
                ],
                "event": [
                    "Dict"
                ],
                "query": []
            }
        },
        "ModeHandler.get_mode_from_query": {
            "name": "get_mode_from_query",
            "location": 58,
            "return": [
                "None",
                "str",
                "Optional[List[str]]",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List",
                    "Callable"
                ]
            }
        },
        "ModeHandler.search": {
            "name": "search",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "ulauncher.search.Query.Query"
                ],
                "min_score": [
                    "str",
                    "int"
                ],
                "limit": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/QueryHistoryDb.py": {
        "QueryHistoryDb.get_instance": {
            "name": "get_instance",
            "location": 11,
            "return": [
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]",
                "list",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Union[str, int]",
                    "Match[str]"
                ]
            }
        },
        "QueryHistoryDb.save_query": {
            "name": "save_query",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "django.db.models.Model"
                ],
                "item_name": [
                    "str",
                    "bool",
                    "django.db.models.Model"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/apps/AppMode.py": {
        "AppMode.get_searchable_items": {
            "name": "get_searchable_items",
            "location": 10,
            "return": [
                "Generator[(ulauncher.modes.apps.AppResult.AppResult, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/apps/AppResult.py": {
        "AppResult.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_info": [
                    "dict",
                    "config.Config"
                ]
            }
        },
        "AppResult.from_id": {
            "name": "from_id",
            "location": 34,
            "return": [
                "Optional[AppResult]"
            ],
            "arguments": {
                "app_id": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "AppResult.get_most_frequent": {
            "name": "get_most_frequent",
            "location": 42,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Optional[int]",
                    "Iterable[int]"
                ]
            }
        },
        "AppResult.search_score": {
            "name": "search_score",
            "location": 55,
            "return": [
                "float",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "int",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Type",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "AppResult.on_enter": {
            "name": "on_enter",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/apps/launch_app.py": {
        "launch_app": {
            "name": "launch_app",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app_id": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/apps/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/calc/CalcMode.py": {
        "normalize_expr": {
            "name": "normalize_expr",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "eval_expr": {
            "name": "eval_expr",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "expr": []
            }
        },
        "_is_enabled": {
            "name": "_is_enabled",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Set",
                    "Set[str]",
                    "Dict"
                ]
            }
        },
        "_eval": {
            "name": "_eval",
            "location": 88,
            "return": [
                "Decimal",
                "bool",
                "List[tuple[Union[int,int]]]",
                "int",
                "Tuple[Union[str,str,str,str,str,str,str]]",
                "Sequence[int]",
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "CalcMode.is_enabled": {
            "name": "is_enabled",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "CalcMode.handle_query": {
            "name": "handle_query",
            "location": 112,
            "return": [
                "List[ulauncher.modes.calc.CalcResult.CalcResult]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/calc/CalcResult.py": {
        "CalcResult.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Dict[str,Any]",
                    "None",
                    "Type",
                    "Dict[Hashable,Any]",
                    "List[str]"
                ],
                "error": [
                    "Text",
                    "Dict[str,Any]",
                    "Type",
                    "config.Config"
                ]
            }
        },
        "CalcResult.on_enter": {
            "name": "on_enter",
            "location": 18,
            "return": [
                "Union[(ulauncher.api.shared.action.CopyToClipboardAction.CopyToClipboardAction, ulauncher.api.shared.action.DoNothingAction.DoNothingAction)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/calc/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/extensions/DeferredResultRenderer.py": {
        "DeferredResultRenderer.get_instance": {
            "name": "get_instance",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "DeferredResultRenderer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeferredResultRenderer.get_active_controller": {
            "name": "get_active_controller",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeferredResultRenderer.handle_event": {
            "name": "handle_event",
            "location": 36,
            "return": [
                "ulauncher.api.shared.action.DoNothingAction.DoNothingAction"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "gi.repository.GLib.Variant"
                ],
                "controller": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "DeferredResultRenderer.handle_response": {
            "name": "handle_response",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str,Any]",
                    "purplship.core.utils.xml.Element",
                    "purplship.core.utils.Element"
                ],
                "controller": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "DeferredResultRenderer.on_query_change": {
            "name": "on_query_change",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeferredResultRenderer._cancel_loading": {
            "name": "_cancel_loading",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeferredResultRenderer._hide_window": {
            "name": "_hide_window",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionController.py": {
        "ExtensionController.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controllers": [
                    "int",
                    "Optional[bytes]",
                    "str"
                ],
                "framer": [
                    "str",
                    "int",
                    "Dict[str,dict[Any,int]]",
                    "cmk.utils.type_defs.ServiceName",
                    "Dict[str,Dict[Any,int]]"
                ],
                "extension_id": [
                    "Dict[type,Any]",
                    "Dict[Type,Any]"
                ]
            }
        },
        "ExtensionController._send_event": {
            "name": "_send_event",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "logging.Logger"
                ]
            }
        },
        "ExtensionController.handle_query": {
            "name": "handle_query",
            "location": 56,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "Query",
                    "Callable(id)[[object],int]"
                ]
            }
        },
        "ExtensionController.trigger_event": {
            "name": "trigger_event",
            "location": 70,
            "return": [
                "bool",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "List",
                    "int",
                    "Dict"
                ]
            }
        },
        "ExtensionController.get_manifest": {
            "name": "get_manifest",
            "location": 81,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionController.get_icon_path": {
            "name": "get_icon_path",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ExtensionController.handle_response": {
            "name": "handle_response",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framer": [
                    "Tuple[bytes]",
                    "List[str]"
                ],
                "response": [
                    "Dict",
                    "Iterator",
                    "flask.Response",
                    "requests.Response"
                ]
            }
        },
        "ExtensionController.handle_close": {
            "name": "handle_close",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framer": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionDb.py": {
        "ExtensionDb.get_instance": {
            "name": "get_instance",
            "location": 22,
            "return": [
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]",
                "list",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionDownloader.py": {
        "untar": {
            "name": "untar",
            "location": 143,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "BinaryIO"
                ],
                "ext_path": [
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "download_tarball": {
            "name": "download_tarball",
            "location": 163,
            "return": [
                "str",
                "List",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "ExtensionDownloader.get_instance": {
            "name": "get_instance",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "ExtensionDownloader.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext_db": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "ExtensionDownloader.download": {
            "name": "download",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ExtensionDownloader.remove": {
            "name": "remove",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ExtensionDownloader.update": {
            "name": "update",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ext_id": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "ExtensionDownloader.get_new_version": {
            "name": "get_new_version",
            "location": 119,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": [],
                "ext_id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ExtensionDownloader._find_extension": {
            "name": "_find_extension",
            "location": 136,
            "return": [
                "str",
                "int",
                "List[T]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ext_id": [
                    "str",
                    "int",
                    "BinaryIO"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionKeywordResult.py": {
        "ExtensionKeywordResult.on_enter": {
            "name": "on_enter",
            "location": 6,
            "return": [
                "ulauncher.api.shared.action.SetUserQueryAction.SetUserQueryAction"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionManifest.py": {
        "ExtensionManifest.open": {
            "name": "open",
            "location": 54,
            "return": [
                "ExtensionManifest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TExtensionManifest]"
                ],
                "extension_id": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "extensions_dir": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ExtensionManifest.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ExtensionManifest.get_name": {
            "name": "get_name",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_description": {
            "name": "get_description",
            "location": 65,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_icon": {
            "name": "get_icon",
            "location": 68,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_required_api_version": {
            "name": "get_required_api_version",
            "location": 71,
            "return": [
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_developer_name": {
            "name": "get_developer_name",
            "location": 74,
            "return": [
                "str",
                "Dict[str, Type]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_preferences": {
            "name": "get_preferences",
            "location": 77,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_instructions": {
            "name": "get_instructions",
            "location": 80,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.get_option": {
            "name": "get_option",
            "location": 83,
            "return": [
                "str",
                "dict",
                "Iterable[T]",
                "Type",
                "Dict[str, Any]",
                "Optional[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "None"
                ]
            }
        },
        "ExtensionManifest.validate": {
            "name": "validate",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManifest.check_compatibility": {
            "name": "check_compatibility",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionMode.py": {
        "ExtensionMode.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionMode.is_enabled": {
            "name": "is_enabled",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "ExtensionMode.on_query_change": {
            "name": "on_query_change",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[dict]",
                    "None",
                    "bool",
                    "Dict"
                ]
            }
        },
        "ExtensionMode.handle_query": {
            "name": "handle_query",
            "location": 30,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "ExtensionMode.get_searchable_items": {
            "name": "get_searchable_items",
            "location": 42,
            "return": [
                "Generator[(ulauncher.modes.extensions.ExtensionKeywordResult.ExtensionKeywordResult, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionPreferences.py": {
        "ExtensionPreferences.create_instance": {
            "name": "create_instance",
            "location": 38,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "ext_id": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ExtensionPreferences.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext_id": [
                    "str",
                    "bool"
                ],
                "manifest": [
                    "int",
                    "bool",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,L]"
                ],
                "ext_preferences_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "ExtensionPreferences.get_items": {
            "name": "get_items",
            "location": 47,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "None",
                    "Tuple[type]",
                    "Tuple[Type]"
                ]
            }
        },
        "ExtensionPreferences.get_dict": {
            "name": "get_dict",
            "location": 77,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionPreferences.get": {
            "name": "get",
            "location": 87,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool"
                ]
            }
        },
        "ExtensionPreferences.get_active_keywords": {
            "name": "get_active_keywords",
            "location": 97,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionPreferences.set": {
            "name": "set",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "ExtensionPreferences._open_db": {
            "name": "_open_db",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionRemote.py": {
        "json_fetch": {
            "name": "json_fetch",
            "location": 19,
            "return": [
                "Tuple[None]",
                "bool",
                "Tuple[Optional[Exception]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "ExtensionRemote.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ExtensionRemote.get_download_url": {
            "name": "get_download_url",
            "location": 65,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ExtensionRemote.fetch_file": {
            "name": "fetch_file",
            "location": 70,
            "return": [
                "None",
                "Dict",
                "str",
                "int",
                "Dict[str,str]",
                "List[str]",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "ExtensionRemote.get_compatible_commit_from_tags": {
            "name": "get_compatible_commit_from_tags",
            "location": 85,
            "return": [
                "Tuple[Union[int,str,bytes,list[int]]]",
                "str",
                "None",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionRemote.get_compatible_commit_from_versions_json": {
            "name": "get_compatible_commit_from_versions_json",
            "location": 119,
            "return": [
                "None",
                "bool",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionRemote.get_commit": {
            "name": "get_commit",
            "location": 133,
            "return": [
                "Tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ExtensionRemote.get_latest_compatible_commit": {
            "name": "get_latest_compatible_commit",
            "location": 162,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int",
                "Tuple[Union[bytes,bytes]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionRemote.validate_versions": {
            "name": "validate_versions",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "versions": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionRunner.py": {
        "ExtensionRunner.get_instance": {
            "name": "get_instance",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "ExtensionRunner.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionRunner.run_all": {
            "name": "run_all",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionRunner.run": {
            "name": "run",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension_id": [
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ExtensionRunner.read_stderr_line": {
            "name": "read_stderr_line",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extproc": [
                    "bool",
                    "None",
                    "str",
                    "Optional[psycopg2.extensions.connection]",
                    "cmk.gui.plugins.metrics.utils.P.erfometer",
                    "cmk.gui.plugins.metrics.utils.TranslatedMetrics"
                ]
            }
        },
        "ExtensionRunner.handle_stderr": {
            "name": "handle_stderr",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_stream": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "result": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "extension_id": [
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "ExtensionRunner.handle_wait": {
            "name": "handle_wait",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subprocess": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "result": [
                    "str",
                    "Dict[str,str]",
                    "List[float]",
                    "Dict"
                ],
                "extension_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ExtensionRunner.stop": {
            "name": "stop",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ExtensionRunner.confirm_termination": {
            "name": "confirm_termination",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extproc": [
                    "str",
                    "float",
                    "logging.LogRecord"
                ]
            }
        },
        "ExtensionRunner.is_running": {
            "name": "is_running",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "extension_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ExtensionRunner.set_extension_error": {
            "name": "set_extension_error",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension_id": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]"
                ],
                "errorName": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "ExtensionRunner.get_extension_error": {
            "name": "get_extension_error",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension_id": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ExtensionServer.py": {
        "ExtensionServer.get_instance": {
            "name": "get_instance",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "ExtensionServer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionServer.start": {
            "name": "start",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionServer.handle_incoming": {
            "name": "handle_incoming",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "bool",
                    "str"
                ],
                "conn": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "source": [
                    "bool",
                    "str"
                ]
            }
        },
        "ExtensionServer.handle_pending_close": {
            "name": "handle_pending_close",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framer": [
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "ExtensionServer.handle_registration": {
            "name": "handle_registration",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framer": [],
                "event": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "ExtensionServer.stop": {
            "name": "stop",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionServer.is_running": {
            "name": "is_running",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionServer.get_controllers": {
            "name": "get_controllers",
            "location": 89,
            "return": [
                "dict_values[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionServer.get_controller_by_keyword": {
            "name": "get_controller_by_keyword",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyword": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/extension_finder.py": {
        "find_extensions": {
            "name": "find_extensions",
            "location": 4,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "ext_dir": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/ProcessErrorExtractor.py": {
        "ProcessErrorExtractor.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ]
            }
        },
        "ProcessErrorExtractor.is_import_error": {
            "name": "is_import_error",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessErrorExtractor.get_missing_package_name": {
            "name": "get_missing_package_name",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/extensions/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/file_browser/FileBrowserMode.py": {
        "FileBrowserMode.is_enabled": {
            "name": "is_enabled",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "FileBrowserMode.list_files": {
            "name": "list_files",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path_str": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "sort_by_atime": [
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "FileBrowserMode.filter_dot_files": {
            "name": "filter_dot_files",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "file_list": [
                    "List[str]",
                    "List[pathlib.Path]"
                ]
            }
        },
        "FileBrowserMode.handle_query": {
            "name": "handle_query",
            "location": 39,
            "return": [
                "List[ulauncher.modes.file_browser.FileBrowserResult.FileBrowserResult]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "List"
                ]
            }
        },
        "FileBrowserMode.handle_key_press_event": {
            "name": "handle_key_press_event",
            "location": 72,
            "return": [
                "Union[(ulauncher.api.shared.action.DoNothingAction.DoNothingAction, ulauncher.api.shared.action.SetUserQueryAction.SetUserQueryAction)]"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int"
                ],
                "event": [
                    "dict",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "query": [
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/file_browser/FileBrowserResult.py": {
        "FileBrowserResult.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "FileBrowserResult.get_name_highlighted": {
            "name": "get_name_highlighted",
            "location": 23,
            "return": [
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "bool",
                "Dict[str, Any]",
                "Tuple[bool, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Container",
                    "T",
                    "int",
                    "Dict",
                    "Container[T]"
                ],
                "color": [
                    "str",
                    "raiden.utils.Type"
                ]
            }
        },
        "FileBrowserResult.on_enter": {
            "name": "on_enter",
            "location": 27,
            "return": [
                "Union[(ulauncher.api.shared.action.OpenAction.OpenAction, ulauncher.api.shared.action.SetUserQueryAction.SetUserQueryAction)]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FileBrowserResult.on_alt_enter": {
            "name": "on_alt_enter",
            "location": 33,
            "return": [
                "List[Union[(ulauncher.modes.file_browser.alt_menu.CopyPathToClipboardItem.CopyPathToClipboardItem, ulauncher.modes.file_browser.alt_menu.OpenFolderItem.OpenFolderItem)]]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/file_browser/get_icon_from_path.py": {
        "get_icon_from_path": {
            "name": "get_icon_from_path",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/file_browser/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/file_browser/alt_menu/CopyPathToClipboardItem.py": {
        "CopyPathToClipboardItem.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CopyPathToClipboardItem.on_enter": {
            "name": "on_enter",
            "location": 16,
            "return": [
                "ulauncher.api.shared.action.CopyToClipboardAction.CopyToClipboardAction"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/file_browser/alt_menu/OpenFolderItem.py": {
        "OpenFolderItem.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "Text",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "OpenFolderItem.on_enter": {
            "name": "on_enter",
            "location": 16,
            "return": [
                "ulauncher.api.shared.action.OpenAction.OpenAction"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/file_browser/alt_menu/__init__.py": {},
    "Ulauncher-6/ulauncher/modes/shortcuts/ShortcutMode.py": {
        "ShortcutMode.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortcutMode.is_enabled": {
            "name": "is_enabled",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool"
                ]
            }
        },
        "ShortcutMode._get_active_shortcut": {
            "name": "_get_active_shortcut",
            "location": 17,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str,Tuple[str,Any]]",
                    "Optional[Union[str,int]]"
                ]
            }
        },
        "ShortcutMode._create_items": {
            "name": "_create_items",
            "location": 25,
            "return": [
                "List[ulauncher.modes.shortcuts.ShortcutResult.ShortcutResult]"
            ],
            "arguments": {
                "self": [],
                "shortcuts": [
                    "List[list[float]]",
                    "int",
                    "List[int]",
                    "Dict[str,Any]",
                    "Tuple",
                    "List[List[float]]",
                    "str"
                ],
                "default_search": [
                    "bool",
                    "int",
                    "List[List[float]]",
                    "List[int]",
                    "Dict[str,Any]",
                    "Tuple",
                    "str"
                ]
            }
        },
        "ShortcutMode.handle_query": {
            "name": "handle_query",
            "location": 28,
            "return": [
                "List[ulauncher.modes.shortcuts.ShortcutResult.ShortcutResult]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "ShortcutMode.get_fallback_results": {
            "name": "get_fallback_results",
            "location": 38,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "set",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortcutMode.get_searchable_items": {
            "name": "get_searchable_items",
            "location": 42,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/shortcuts/ShortcutResult.py": {
        "ShortcutResult.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyword": [
                    "str",
                    "bool",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ],
                "name": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "cmd": [
                    "str",
                    "bool",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ],
                "icon": [
                    "str",
                    "List",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "default_search": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Dict[str,Any]]"
                ],
                "run_without_argument": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ShortcutResult.get_name_highlighted": {
            "name": "get_name_highlighted",
            "location": 21,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "ulauncher.search.Query.Query"
                ],
                "color": [
                    "str"
                ]
            }
        },
        "ShortcutResult.get_description": {
            "name": "get_description",
            "location": 28,
            "return": [
                "str",
                "Mapping[str,List[str]]",
                "Text"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int,slice]",
                    "Union[KspNativeControl,int]",
                    "Union[int,str]"
                ]
            }
        },
        "ShortcutResult.on_enter": {
            "name": "on_enter",
            "location": 47,
            "return": [
                "Union[(ulauncher.api.shared.action.OpenAction.OpenAction, ulauncher.api.shared.action.RunScriptAction.RunScriptAction, ulauncher.api.shared.action.SetUserQueryAction.SetUserQueryAction)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "ulauncher.search.Query.Query"
                ]
            }
        },
        "ShortcutResult._is_url": {
            "name": "_is_url",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/shortcuts/ShortcutsDb.py": {
        "ShortcutsDb.get_instance": {
            "name": "get_instance",
            "location": 14,
            "return": [
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]",
                "list",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "ShortcutsDb.commit": {
            "name": "commit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortcutsDb.get_shortcuts": {
            "name": "get_shortcuts",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortcutsDb.put_shortcut": {
            "name": "put_shortcut",
            "location": 36,
            "return": [
                "Union[(str, _T6)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "keyword": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "cmd": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "icon": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "is_default_search": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "run_without_argument": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]",
                    "config.Config",
                    "bool"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/modes/shortcuts/__init__.py": {},
    "Ulauncher-6/ulauncher/ui/AppIndicator.py": {
        "create_menu_item": {
            "name": "create_menu_item",
            "location": 31,
            "return": [
                "int",
                "bool",
                "float",
                "List[int]"
            ],
            "arguments": {
                "label": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "command": [
                    "str",
                    "Dict[str,int]",
                    "List[int]",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "AppIndicator.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "List[str]"
                ]
            }
        },
        "AppIndicator.switch": {
            "name": "switch",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "bool",
                    "str",
                    "Callable[[str],int]",
                    "List[dict]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/ItemNavigation.py": {
        "ItemNavigation.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_widgets": [
                    "int",
                    "str",
                    "float",
                    "Tuple",
                    "Union[str,float]"
                ]
            }
        },
        "ItemNavigation.get_default": {
            "name": "get_default",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "ItemNavigation.select_default": {
            "name": "select_default",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[str]",
                    "str",
                    "List[Product]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ]
            }
        },
        "ItemNavigation.select": {
            "name": "select",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[int]",
                    "List",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "ItemNavigation.go_up": {
            "name": "go_up",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemNavigation.go_down": {
            "name": "go_down",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemNavigation.enter": {
            "name": "enter",
            "location": 50,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Dict",
                    "Type"
                ],
                "index": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict",
                    "Optional[T]",
                    "List[Dict[str,Any]]"
                ],
                "alt": [
                    "bool",
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/preferences_context_server.py": {
        "get_extension_info": {
            "name": "get_extension_info",
            "location": 69,
            "return": [
                "Dict[Text,Union[str,int,dict,None,dict[str,Any]]]",
                "Dict",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "ext_id": [
                    "str",
                    "int"
                ],
                "prefs": [
                    "str",
                    "int",
                    "qutebrowser.utils.usertypes.Backend",
                    "Optional[Exception]"
                ],
                "error": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "get_all_extensions": {
            "name": "get_all_extensions",
            "location": 97,
            "return": [
                "List",
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "PreferencesContextServer.get_instance": {
            "name": "get_instance",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ],
                "application": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "PreferencesContextServer.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "int",
                    "float",
                    "apistar.interfaces.Router",
                    "bool"
                ]
            }
        },
        "PreferencesContextServer.serve_file": {
            "name": "serve_file",
            "location": 147,
            "return": [
                "None",
                "Set[str]",
                "str",
                "Tuple[int,str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "scheme_request": []
            }
        },
        "PreferencesContextServer.on_scheme_callback": {
            "name": "on_scheme_callback",
            "location": 162,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "scheme_request": []
            }
        },
        "PreferencesContextServer.notify_client": {
            "name": "notify_client",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "DefaultDict[Any,Set[Any]]",
                    "DefaultDict"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "DefaultDict[Any,Set[Any]]",
                    "DefaultDict"
                ]
            }
        },
        "PreferencesContextServer.get_all": {
            "name": "get_all",
            "location": 212,
            "return": [
                "Dict[Text,Union[list,dict[Text,]]]",
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "str",
                    "Set[str]",
                    "List[cmk.gui.plugins.views.utils.Sorter.Entry]",
                    "List[E]"
                ]
            }
        },
        "PreferencesContextServer.apply_settings": {
            "name": "apply_settings",
            "location": 240,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Type",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "PreferencesContextServer.apply_autostart": {
            "name": "apply_autostart",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_enabled": [
                    "str",
                    "bool",
                    "starfish.core.util.logging.Log"
                ]
            }
        },
        "PreferencesContextServer.apply_theme": {
            "name": "apply_theme",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesContextServer.set_hotkey_show_app": {
            "name": "set_hotkey_show_app",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "PreferencesContextServer.show_hotkey_dialog": {
            "name": "show_hotkey_dialog",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "PreferencesContextServer.show_file_chooser": {
            "name": "show_file_chooser",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "IO[str]",
                    "Dict[str,str]",
                    "Dict[str,dict]"
                ]
            }
        },
        "PreferencesContextServer.open_url": {
            "name": "open_url",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Sized"
                ]
            }
        },
        "PreferencesContextServer.open_extensions_dir": {
            "name": "open_extensions_dir",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "Tuple[Tuple[str,str]]",
                    "Tuple[tuple[Union[str,str]]]"
                ]
            }
        },
        "PreferencesContextServer.shortcut_get_all": {
            "name": "shortcut_get_all",
            "location": 325,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "ulauncher.search.Query.Query",
                    "None",
                    "Optional[Callable[[dict],None]]",
                    "Callable[dict,None]"
                ]
            }
        },
        "PreferencesContextServer.shortcut_update": {
            "name": "shortcut_update",
            "location": 332,
            "return": [
                "Dict[Text,]",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PreferencesContextServer.shortcut_remove": {
            "name": "shortcut_remove",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]",
                    "Type"
                ]
            }
        },
        "PreferencesContextServer.extension_get_all": {
            "name": "extension_get_all",
            "location": 353,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "ulauncher.search.Query.Query",
                    "None",
                    "Optional[Callable[[dict],None]]",
                    "Callable[dict,None]"
                ]
            }
        },
        "PreferencesContextServer.extension_add": {
            "name": "extension_add",
            "location": 358,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "PreferencesContextServer.extension_update_prefs": {
            "name": "extension_update_prefs",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Callable]",
                    "Optional[str]"
                ]
            }
        },
        "PreferencesContextServer.extension_check_updates": {
            "name": "extension_check_updates",
            "location": 378,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "PreferencesContextServer.extension_update_ext": {
            "name": "extension_update_ext",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict[str, Set[str]]",
                    "int"
                ]
            }
        },
        "PreferencesContextServer.extension_remove": {
            "name": "extension_remove",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "Dict[str,Set[str]]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/ResultWidget.py": {
        "ResultWidget.initialize": {
            "name": "initialize",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "str",
                    "bool"
                ],
                "result": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Iterable[Any]",
                    "int",
                    "Mapping[Any, Any]",
                    "Sequence[str]"
                ],
                "index": [
                    "bool",
                    "str",
                    "int"
                ],
                "query": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,Any]",
                    "None",
                    "List[InlineContent]",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "ResultWidget.set_index": {
            "name": "set_index",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "str",
                    "List",
                    "bytes",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "ResultWidget.select": {
            "name": "select",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultWidget.deselect": {
            "name": "deselect",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultWidget.scroll_to_focus": {
            "name": "scroll_to_focus",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultWidget.set_icon": {
            "name": "set_icon",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icon": [
                    "str",
                    "BaseException",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ResultWidget.set_name_highlighted": {
            "name": "set_name_highlighted",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_selected": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "ResultWidget.set_name": {
            "name": "set_name",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "ResultWidget.get_name": {
            "name": "get_name",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultWidget.on_click": {
            "name": "on_click",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "event": [
                    "Dict",
                    "None",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]",
                    "Optional[tuple]",
                    "Tuple"
                ]
            }
        },
        "ResultWidget.on_mouse_hover": {
            "name": "on_mouse_hover",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "event": [
                    "int",
                    "str"
                ]
            }
        },
        "ResultWidget.set_description": {
            "name": "set_description",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ResultWidget.set_shortcut": {
            "name": "set_shortcut",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "ResultWidget.get_keyword": {
            "name": "get_keyword",
            "location": 137,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/SmallResultWidget.py": {},
    "Ulauncher-6/ulauncher/ui/UlauncherApp.py": {
        "UlauncherApp.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherApp.do_before_emit": {
            "name": "do_before_emit",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "str"
                ]
            }
        },
        "UlauncherApp.do_activate": {
            "name": "do_activate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherApp.do_command_line": {
            "name": "do_command_line",
            "location": 50,
            "return": [
                "int",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherApp.setup": {
            "name": "setup",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "UlauncherApp.toggle_appindicator": {
            "name": "toggle_appindicator",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UlauncherApp.bind_hotkey": {
            "name": "bind_hotkey",
            "location": 93,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "accel_name": [
                    "str"
                ]
            }
        },
        "UlauncherApp.show_preferences": {
            "name": "show_preferences",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/__init__.py": {},
    "Ulauncher-6/ulauncher/ui/windows/HotkeyDialog.py": {
        "HotkeyDialog.on_destroy": {
            "name": "on_destroy",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HotkeyDialog.on_key_press": {
            "name": "on_key_press",
            "location": 35,
            "return": [
                "None",
                "Set",
                "Union[tuple,list]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict"
                ],
                "event": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "HotkeyDialog.is_valid_hotkey": {
            "name": "is_valid_hotkey",
            "location": 64,
            "return": [
                "bool",
                "str",
                "Callable[,bool]",
                "List[str]",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Set[str]"
                ],
                "accel_name": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/windows/PreferencesWindow.py": {
        "PreferencesWindow.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesWindow._init_webview": {
            "name": "_init_webview",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesWindow.load_page": {
            "name": "load_page",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Text",
                    "str",
                    "Dict",
                    "TextIO",
                    "Optional[str]"
                ]
            }
        },
        "PreferencesWindow.present": {
            "name": "present",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PreferencesWindow.show": {
            "name": "show",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/windows/UlauncherWindow.py": {
        "UlauncherWindow.get_instance": {
            "name": "get_instance",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "UlauncherWindow.on_focus_out": {
            "name": "on_focus_out",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "List[tuple[Union[str,Callable]]]",
                    "int",
                    "sqlalchemy.orm.query.Query",
                    "List[Tuple[str,Callable]]"
                ],
                "event": [
                    "List[tuple[Union[str,Callable]]]",
                    "int",
                    "sqlalchemy.orm.query.Query",
                    "List[Tuple[str,Callable]]"
                ]
            }
        },
        "UlauncherWindow.on_focus_in": {
            "name": "on_focus_in",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.on_input_changed": {
            "name": "on_input_changed",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "UlauncherWindow.on_input_key_press": {
            "name": "on_input_key_press",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int",
                    "cmk.utils.type_defs.HostName"
                ],
                "event": [
                    "dict",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "UlauncherWindow.get_input": {
            "name": "get_input",
            "location": 138,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.init_styles": {
            "name": "init_styles",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "UlauncherWindow.apply_css": {
            "name": "apply_css",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "bytes",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "UlauncherWindow.set_cursor": {
            "name": "set_cursor",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor_name": [
                    "str"
                ]
            }
        },
        "UlauncherWindow.init_theme": {
            "name": "init_theme",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.show_preferences": {
            "name": "show_preferences",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.position_window": {
            "name": "position_window",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.show_window": {
            "name": "show_window",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.on_mouse_down": {
            "name": "on_mouse_down",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "event": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "UlauncherWindow.on_mouse_up": {
            "name": "on_mouse_up",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.on_mouse_move": {
            "name": "on_mouse_move",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "event": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "UlauncherWindow._get_input_text": {
            "name": "_get_input_text",
            "location": 237,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow._get_user_query": {
            "name": "_get_user_query",
            "location": 240,
            "return": [
                "Query",
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.select_result": {
            "name": "select_result",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Type",
                    "str",
                    "bool"
                ]
            }
        },
        "UlauncherWindow.enter_result": {
            "name": "enter_result",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "str",
                    "None",
                    "List[str]"
                ],
                "alt": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "UlauncherWindow.hide": {
            "name": "hide",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.get_pointer_device": {
            "name": "get_pointer_device",
            "location": 257,
            "return": [
                "str",
                "Set[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.hide_and_clear_input": {
            "name": "hide_and_clear_input",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.show_results": {
            "name": "show_results",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Dict",
                    "int"
                ]
            }
        },
        "UlauncherWindow._render_prefs_icon": {
            "name": "_render_prefs_icon",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherWindow.create_item_widgets": {
            "name": "create_item_widgets",
            "location": 305,
            "return": [
                "List",
                "bool",
                "int",
                "Dict[str,Tuple[int,int]]",
                "Dict[str,Callable[,Any]]"
            ],
            "arguments": {
                "items": [
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Dict[str,Any]",
                    "Iterable[Tuple[Hashable,Any]]"
                ],
                "query": [
                    "Union[Dict,List,str]",
                    "Dict",
                    "List",
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/ui/windows/__init__.py": {},
    "Ulauncher-6/ulauncher/utils/environment.py": {},
    "Ulauncher-6/ulauncher/utils/fold_user_path.py": {
        "fold_user_path": {
            "name": "fold_user_path",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/framer.py": {
        "PickleFramer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleFramer.set_connection": {
            "name": "set_connection",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "float"
                ]
            }
        },
        "PickleFramer.is_closing": {
            "name": "is_closing",
            "location": 52,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleFramer.close": {
            "name": "close",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleFramer.send": {
            "name": "send",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict",
                    "int",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "PickleFramer._close_ready": {
            "name": "_close_ready",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "result": [
                    "str",
                    "Optional[Iterable]",
                    "Iterable",
                    "None"
                ],
                "user": [
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "PickleFramer._read_data": {
            "name": "_read_data",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleFramer._read_ready": {
            "name": "_read_ready",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "result": [
                    "str"
                ],
                "user": [
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "PickleFramer._ingest_data": {
            "name": "_ingest_data",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "bool",
                    "List['PlotInfo']"
                ]
            }
        },
        "PickleFramer._write_next": {
            "name": "_write_next",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleFramer._write_done": {
            "name": "_write_done",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "result": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user": [
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/fuzzy_search.py": {
        "_get_matching_blocks_native": {
            "name": "_get_matching_blocks_native",
            "location": 9,
            "return": [
                "List[difflib.Match]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Collection[str]]",
                    "Collection",
                    "Optional[bool]",
                    "bool",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Collection[str]]",
                    "Collection",
                    "Optional[bool]",
                    "bool",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "get_matching_blocks": {
            "name": "get_matching_blocks",
            "location": 26,
            "return": [
                "Tuple[Union[list[tuple[str]],int]]",
                "str",
                "Optional[str]",
                "Set[str]",
                "Tuple[str,str]"
            ],
            "arguments": {
                "query": [
                    "str"
                ],
                "text": [
                    "str",
                    "Dict"
                ]
            }
        },
        "get_score": {
            "name": "get_score",
            "location": 40,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "text": [
                    "str",
                    "Sequence[int]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "_get_matching_blocks": {
            "name": "_get_matching_blocks",
            "location": 18,
            "return": [
                "type",
                "Type[T]",
                "bool",
                "dict"
            ],
            "arguments": {
                "query": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/icon.py": {
        "get_icon_path": {
            "name": "get_icon_path",
            "location": 19,
            "return": [
                "str",
                "Optional[List[str]]",
                "None"
            ],
            "arguments": {
                "icon": [
                    "str"
                ],
                "size": [
                    "int",
                    "str",
                    "bool",
                    "os.PathLike"
                ],
                "base_path": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_icon": {
            "name": "load_icon",
            "location": 42,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "icon": [
                    "int",
                    "Optional[float]",
                    "List[AnyStr]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "size": [
                    "int",
                    "Optional[int]",
                    "List[AnyStr]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/launch_detached.py": {
        "launch_detached": {
            "name": "launch_detached",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "IO",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/logging.py": {
        "mkcolor": {
            "name": "mkcolor",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "color": [],
                "bold": [
                    "bool"
                ]
            }
        },
        "ColoredFormatter.format": {
            "name": "format",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/mypy_extensions.py": {
        "_TypedDict": {
            "name": "_TypedDict",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/utils/named_tuple_from_dict.py": {
        "namedtuple_from_dict": {
            "name": "namedtuple_from_dict",
            "location": 4,
            "return": [
                "str",
                "Type",
                "List",
                "Mapping",
                "Exception",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "Mapping",
                    "Exception",
                    "Mapping[str,Any]",
                    "Callable",
                    "bytes",
                    "Dict"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/Router.py": {
        "Router.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.dispatch": {
            "name": "dispatch",
            "location": 27,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "bool"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "Router.route": {
            "name": "route",
            "location": 41,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Router.route.decorator": {
            "name": "decorator",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "callback": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/Settings.py": {
        "Settings.get_instance": {
            "name": "get_instance",
            "location": 100,
            "return": [
                "str",
                "bool",
                "List[list[Any]]",
                "pricemonitor.config.Coin",
                "Dict[str,str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.load_from_file": {
            "name": "load_from_file",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Settings.save_to_file": {
            "name": "save_to_file",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.do_get_property": {
            "name": "do_get_property",
            "location": 129,
            "return": [
                "str",
                "neuromation.api.config._AuthConfig",
                "IO"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping"
                ]
            }
        },
        "Settings.do_set_property": {
            "name": "do_set_property",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Settings.get_all": {
            "name": "get_all",
            "location": 137,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.get_jump_keys": {
            "name": "get_jump_keys",
            "location": 140,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/string.py": {
        "remove_accents": {
            "name": "remove_accents",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/systemd_controller.py": {
        "systemctl_unit_run": {
            "name": "systemctl_unit_run",
            "location": 8,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {}
        },
        "UlauncherSystemdController.is_allowed": {
            "name": "is_allowed",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherSystemdController.is_enabled": {
            "name": "is_enabled",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UlauncherSystemdController.switch": {
            "name": "switch",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/text_highlighter.py": {
        "highlight_text": {
            "name": "highlight_text",
            "location": 4,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[str,int]]",
                    "int"
                ],
                "text": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "cmk.utils.type_defs.CheckPluginName"
                ],
                "open_tag": [
                    "Text",
                    "str",
                    "List[str]"
                ],
                "close_tag": [
                    "Text",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/Theme.py": {
        "load_available_themes": {
            "name": "load_available_themes",
            "location": 15,
            "return": [
                "Dict[(Any, Theme)]"
            ],
            "arguments": {}
        },
        "Theme.get_current": {
            "name": "get_current",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Theme.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Theme.get_manifest_version": {
            "name": "get_manifest_version",
            "location": 53,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.get_name": {
            "name": "get_name",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.get_display_name": {
            "name": "get_display_name",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Type]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.get_matched_text_hl_colors": {
            "name": "get_matched_text_hl_colors",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.get_extend_theme": {
            "name": "get_extend_theme",
            "location": 65,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.get_css_file": {
            "name": "get_css_file",
            "location": 68,
            "return": [
                "str",
                "Optional[str]",
                "virgene.config.Config",
                "List[str]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.clear_cache": {
            "name": "clear_cache",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme._read": {
            "name": "_read",
            "location": 77,
            "return": [
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,Union[str,None]]",
                "Dict[str,tuple[Union[int,str]]]",
                "Dict[str,dict]",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.validate": {
            "name": "validate",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.compile_css": {
            "name": "compile_css",
            "location": 97,
            "return": [
                "str",
                "Callable",
                "bytes",
                "List[int]",
                "os.PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme._get_path_for_generated_css": {
            "name": "_get_path_for_generated_css",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/timer.py": {
        "timer": {
            "name": "timer",
            "location": 25,
            "return": [
                "TimerContext"
            ],
            "arguments": {
                "delay_sec": [
                    "bytes",
                    "Iterable[str]",
                    "T"
                ],
                "func": [
                    "Dict[str,Any]",
                    "str"
                ],
                "repeat": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "TimerContext.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "List[str]",
                    "str"
                ],
                "func": [
                    "str",
                    "int",
                    "List"
                ],
                "repeat": [
                    "bool",
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "TimerContext.cancel": {
            "name": "cancel",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerContext.trigger": {
            "name": "trigger",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_data": [
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[dict]",
                    "None"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/version.py": {
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [
                "Tuple[(int, Optional[int])]"
            ],
            "arguments": {
                "version_string": [
                    "str",
                    "bytes"
                ]
            }
        },
        "unpack_range": {
            "name": "unpack_range",
            "location": 14,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "range_string": [
                    "str",
                    "int"
                ]
            }
        },
        "valid_range": {
            "name": "valid_range",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "range": [
                    "int"
                ]
            }
        },
        "satisfies": {
            "name": "satisfies",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "version_string": [
                    "str"
                ],
                "expected_range": [
                    "int",
                    "str",
                    "List[int]",
                    "float",
                    "List[None]",
                    "Dict[str,int]",
                    "List"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/wm.py": {
        "get_monitor": {
            "name": "get_monitor",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "use_mouse_position": [
                    "bool",
                    "int"
                ]
            }
        },
        "get_scaling_factor": {
            "name": "get_scaling_factor",
            "location": 34,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {}
        },
        "get_windows_stacked": {
            "name": "get_windows_stacked",
            "location": 43,
            "return": [
                "reversed"
            ],
            "arguments": {}
        },
        "get_xserver_time": {
            "name": "get_xserver_time",
            "location": 48,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/utils/xinit.py": {},
    "Ulauncher-6/ulauncher/utils/__init__.py": {},
    "Ulauncher-6/ulauncher/utils/db/KeyValueJsonDb.py": {
        "KeyValueJsonDb.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "Union[str,pathlib.Path]",
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "_compaUnion[_compapathlib.Path,str]"
                ]
            }
        },
        "KeyValueJsonDb.open": {
            "name": "open",
            "location": 29,
            "return": [
                "KeyValueJsonDb"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValueJsonDb.commit": {
            "name": "commit",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValueJsonDb.remove": {
            "name": "remove",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "Optional[dict]",
                    "int",
                    "Dict",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "KeyValueJsonDb.set_records": {
            "name": "set_records",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "records": [
                    "bool",
                    "float"
                ]
            }
        },
        "KeyValueJsonDb.get_records": {
            "name": "get_records",
            "location": 65,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValueJsonDb.put": {
            "name": "put",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "KeyValueJsonDb.find": {
            "name": "find",
            "location": 71,
            "return": [
                "Optional[bool]",
                "bool",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/db/__init__.py": {},
    "Ulauncher-6/ulauncher/utils/decorator/debounce.py": {
        "debounce": {
            "name": "debounce",
            "location": 4,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "wait": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "debounce.decorator": {
            "name": "decorator",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "debounce.decorator.debounced": {
            "name": "debounced",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debounce.decorator.debounced.call_it": {
            "name": "call_it",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/utils/decorator/glib_idle_add.py": {
        "glib_idle_add": {
            "name": "glib_idle_add",
            "location": 5,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Sequence"
                ]
            }
        },
        "glib_idle_add.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/utils/decorator/run_async.py": {
        "run_async": {
            "name": "run_async",
            "location": 5,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "run_async._run_async": {
            "name": "_run_async",
            "location": 30,
            "return": [
                "Awaitable",
                "bool"
            ],
            "arguments": {
                "func": [
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        },
        "run_async._run_async.async_func": {
            "name": "async_func",
            "location": 32,
            "return": [
                "Thread",
                "Dict[str,Dict[str,int]]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/utils/decorator/singleton.py": {
        "singleton": {
            "name": "singleton",
            "location": 7,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "singleton.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Ulauncher-6/ulauncher/utils/decorator/__init__.py": {},
    "Ulauncher-6/ulauncher/utils/desktop/notification.py": {
        "show_notification": {
            "name": "show_notification",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "summary": [
                    "int",
                    "str",
                    "Union[str,int]"
                ],
                "body": [
                    "int",
                    "str",
                    "Union[str,int]"
                ],
                "icon": [
                    "Text",
                    "int",
                    "str",
                    "Union[str,int]"
                ]
            }
        }
    },
    "Ulauncher-6/ulauncher/utils/desktop/__init__.py": {}
}
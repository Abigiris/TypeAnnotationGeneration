{
    "WS_THEbotIT-main/legacy_tst_runner.py": {},
    "WS_THEbotIT-main/archive/__init__.py": {},
    "WS_THEbotIT-main/archive/offline/__init__.py": {},
    "WS_THEbotIT-main/archive/offline/commons_download/commons_download.py": {},
    "WS_THEbotIT-main/archive/offline/commons_download/__init__.py": {},
    "WS_THEbotIT-main/archive/offline/download_RE_pics_OCR/160118_download_RE_OCR.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[float,int]",
                    "Optional[str]",
                    "int"
                ],
                "digits": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "WS_THEbotIT-main/archive/offline/download_RE_pics_OCR/download.py": {
        "get_archive": {
            "name": "get_archive",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "item": [
                    "str",
                    "bool"
                ]
            }
        },
        "unrar": {
            "name": "unrar",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "get_archives_and_unzip": {
            "name": "get_archives_and_unzip",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "WS_THEbotIT-main/archive/offline/download_RE_pics_OCR/make_single_pages.py": {
        "from_IA": {
            "name": "from_IA",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "book": [
                    "str",
                    "int",
                    "Dict[int,int]"
                ],
                "item": [
                    "str",
                    "bool",
                    "List[Product]"
                ],
                "filepattern": [
                    "int",
                    "float"
                ],
                "start": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "steps": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "finish": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "make_single_pages": {
            "name": "make_single_pages",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "WS_THEbotIT-main/archive/offline/download_RE_pics_OCR/RE_compiler.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "WS_THEbotIT-main/archive/offline/mass_download_bilder/download.py": {},
    "WS_THEbotIT-main/archive/offline/mass_download_bilder/__init__.py": {},
    "WS_THEbotIT-main/archive/offline/themenseite_auto/themenseite_GDZ.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        }
    },
    "WS_THEbotIT-main/archive/offline/themenseite_auto/__init__.py": {},
    "WS_THEbotIT-main/archive/offline/watchlist_crawler/watchlist_crawler.py": {
        "crawler_cat_index_site": {
            "name": "crawler_cat_index_site",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cat_crawler": {
            "name": "cat_crawler",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "WS_THEbotIT-main/archive/offline/watchlist_crawler/__init__.py": {},
    "WS_THEbotIT-main/archive/online/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2015/150810_Edda_delete.py": {},
    "WS_THEbotIT-main/archive/online/2015/150810_Edda_Links.py": {},
    "WS_THEbotIT-main/archive/online/2015/150814_touch_all_sites.py": {},
    "WS_THEbotIT-main/archive/online/2015/150817_replace_thumb_copernicus.py": {},
    "WS_THEbotIT-main/archive/online/2015/150818_unify_SperrSatz.py": {
        "substitute_sperrsatz": {
            "name": "substitute_sperrsatz",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "template": [
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2015/150818_unify_SperrSchrift.py": {},
    "WS_THEbotIT-main/archive/online/2015/150821_template_conversion_for_Venus_Urania.py": {},
    "WS_THEbotIT-main/archive/online/2015/150826_RE_link_conversion.py": {
        "build_arg": {
            "name": "build_arg",
            "location": 10,
            "return": [
                "Tuple[(str, Any, Any)]"
            ],
            "arguments": {
                "searcher": []
            }
        },
        "decide_REIA_or_REWL": {
            "name": "decide_REIA_or_REWL",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "re_sub": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2015/150827_Orbis_400_zu_400px.py": {},
    "WS_THEbotIT-main/archive/online/2015/150902_Liste_alter_Unkorrigierter_Werke.py": {},
    "WS_THEbotIT-main/archive/online/2015/150904_replace_Adolf_Loos.py": {},
    "WS_THEbotIT-main/archive/online/2015/150910_Adolf_Loos_insert_chapter.py": {},
    "WS_THEbotIT-main/archive/online/2015/150914_add_pages_Saint_Germain.py": {},
    "WS_THEbotIT-main/archive/online/2015/150916_increase_proofread_Henochbuch.py": {},
    "WS_THEbotIT-main/archive/online/2015/150916_increase_proofread_Schumann.py": {},
    "WS_THEbotIT-main/archive/online/2015/151007_DaHil_Indexlinks.py": {},
    "WS_THEbotIT-main/archive/online/2015/151021_make_pages_ns0_orbis_pictus.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2015/151022_orbis_insert_chapter.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2015/151022_orbis_set_ref.py": {},
    "WS_THEbotIT-main/archive/online/2015/151029_Textdaten_to_Kapitel.py": {},
    "WS_THEbotIT-main/archive/online/2015/151116_Hefterstellung_Gartenlaube_1953.py": {
        "magazine": {
            "name": "magazine",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [],
                "first_page": [],
                "last_page": []
            }
        },
        "volume": {
            "name": "volume",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "page_dict": [],
                "year": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2015/151203_Erstellung_Abbyy_Fine.py": {},
    "WS_THEbotIT-main/archive/online/2015/151207_PND_to_GND.py": {},
    "WS_THEbotIT-main/archive/online/2015/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2016/160105_Textdaten_to_Kapitel_Zimmerische_Chronik.py": {},
    "WS_THEbotIT-main/archive/online/2016/160120_replace_Adolf_Loos.py": {},
    "WS_THEbotIT-main/archive/online/2016/160202_proofread_status_pages_ns0_orbis_pictus.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160211_wackernagel_einstellen.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[float,int]",
                    "Optional[str]",
                    "int"
                ],
                "digits": [
                    "int"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160215_upload_RE_III_1.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[float,int]",
                    "Optional[str]",
                    "int"
                ],
                "digits": [
                    "int"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160301_correct_HT_template.py": {
        "substitute_ht": {
            "name": "substitute_ht",
            "location": 9,
            "return": [
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "re_ht": [
                    "int",
                    "Hashable",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160315_increase_proofread_clavierbuch.py": {},
    "WS_THEbotIT-main/archive/online/2016/160318_RE_author.py": {
        "frame_year": {
            "name": "frame_year",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "year": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160321_replace_Reichsfuersten.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        },
        "convert_template": {
            "name": "convert_template",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160328_replace_blitzlexikon.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        },
        "get_buchstabe": {
            "name": "get_buchstabe",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "wort": []
            }
        },
        "convert_link": {
            "name": "convert_link",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "hit": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160331_replace_blitzlexikon_Fusszeilen.py": {},
    "WS_THEbotIT-main/archive/online/2016/160411_replace_Schouwaert.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160413_touch_all_index.py": {},
    "WS_THEbotIT-main/archive/online/2016/160414_replace_cats.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[float,int]",
                    "Optional[str]",
                    "int"
                ],
                "digits": [
                    "int"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160415_add_cat.py": {},
    "WS_THEbotIT-main/archive/online/2016/160415_replace_cats_pics.py": {},
    "WS_THEbotIT-main/archive/online/2016/160427_all_sites_delete_blocksatz.py": {
        "check_for_em": {
            "name": "check_for_em",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Callable",
                    "float",
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Union[str,Type]",
                    "bool"
                ]
            }
        },
        "convert_block": {
            "name": "convert_block",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160427_all_sites_delete_blocksatz_Fkraus.py": {},
    "WS_THEbotIT-main/archive/online/2016/160516_replace_cats_Hilbert.py": {},
    "WS_THEbotIT-main/archive/online/2016/160519_proofread_bibel_randnotizen.py": {},
    "WS_THEbotIT-main/archive/online/2016/160527_replace_RE_siehe.py": {
        "convert_RE_siehe": {
            "name": "convert_RE_siehe",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [
                    "int",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160603_replace_Register_Links.py": {
        "convert_one_link": {
            "name": "convert_one_link",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [],
                "keyword": []
            }
        },
        "convert_numbers": {
            "name": "convert_numbers",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "hit": [],
                "keyword": []
            }
        },
        "convert_line": {
            "name": "convert_line",
            "location": 25,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "line": [
                    "_T0@@"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160711_replace_citations.py": {
        "add_zeros": {
            "name": "add_zeros",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [],
                "digits": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/160915_replace_table_orbis.py": {
        "convert_table": {
            "name": "convert_table",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/161216_vor_nach.py": {
        "convert_vor": {
            "name": "convert_vor",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [],
                "number": []
            }
        },
        "convert_nach": {
            "name": "convert_nach",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [],
                "number": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2016/161218_canal_suez.py": {},
    "WS_THEbotIT-main/archive/online/2016/167707_cleanup_converter_mess.py": {},
    "WS_THEbotIT-main/archive/online/2016/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2017/170110_hilbert_kapitel.py": {},
    "WS_THEbotIT-main/archive/online/2017/170208_list_for_pfaerrich.py": {},
    "WS_THEbotIT-main/archive/online/2017/170719_link_convert.py": {},
    "WS_THEbotIT-main/archive/online/2017/170720_link_convert_search.py": {},
    "WS_THEbotIT-main/archive/online/2017/20170730_Ping_One.py": {
        "PingOne.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "debug": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "PingOne.task": {
            "name": "task",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2017/20170730_Ping_Two.py": {
        "PingTwo.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "debug": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "PingTwo.task": {
            "name": "task",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2017/20170922_fix_index_pictures.py": {
        "FixIndex.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "debug": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "FixIndex._search": {
            "name": "_search",
            "location": 23,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixIndex.task": {
            "name": "task",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2017/20171015_link_convert_dnb.py": {
        "convert_link": {
            "name": "convert_link",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "hit": [
                    "Type",
                    "dict",
                    "Type[T]",
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2017/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2018/20180125_fix_re_structure.py": {
        "FixReStructure.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "debug": [
                    "float",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "FixReStructure.get_lemmas": {
            "name": "get_lemmas",
            "location": 23,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixReStructure.process_text": {
            "name": "process_text",
            "location": 33,
            "return": [
                "str",
                "List[float]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "FixReStructure.task": {
            "name": "task",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConverter.test_parse_text_without_comment": {
            "name": "test_parse_text_without_comment",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConverter.test_parse_text_with_whitspace": {
            "name": "test_parse_text_with_whitspace",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConverter.test_parse_text_with_comment": {
            "name": "test_parse_text_with_comment",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2018/convert_deprecated_re_templates.py": {
        "ConvertDeprecatedReTemplates.convert_re_nachtrag": {
            "name": "convert_re_nachtrag",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "ConvertDeprecatedReTemplates._gemeinfrei_todesjahr": {
            "name": "_gemeinfrei_todesjahr",
            "location": 31,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "Dict",
                "Dict[str,Any]",
                "str",
                "List[int]",
                "List[Union[str,dict[Text,Text]]]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "argument_list": [
                    "List",
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "ConvertDeprecatedReTemplates.convert_re_platzhalter": {
            "name": "convert_re_platzhalter",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "ConvertDeprecatedReTemplates.convert_re_nachtrag_platzhalter": {
            "name": "convert_re_nachtrag_platzhalter",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "ConvertDeprecatedReTemplates.convert_all": {
            "name": "convert_all",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "article_text": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConvertDeprecatedReTemplates.search_pages": {
            "name": "search_pages",
            "location": 89,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertDeprecatedReTemplates.task": {
            "name": "task",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2018/hilbert_timer.py": {
        "HilbertTimer.get_count": {
            "name": "get_count",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "HilbertTimer.get_days_to_end_of_2018": {
            "name": "get_days_to_end_of_2018",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "HilbertTimer.replace_in_page": {
            "name": "replace_in_page",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "HilbertTimer.task": {
            "name": "task",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2018/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2020/aachener_stadtrechnung.py": {
        "AachenerStadtrechnung.get_list": {
            "name": "get_list",
            "location": 11,
            "return": [
                "str",
                "Union[str, Pattern]",
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "AachenerStadtrechnung.task": {
            "name": "task",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2020/arthur_stein.py": {
        "ArthurStein.get_list": {
            "name": "get_list",
            "location": 9,
            "return": [
                "str",
                "Union[str, Pattern]",
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "ArthurStein.task": {
            "name": "task",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArthurStein.join_lists": {
            "name": "join_lists",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "some_list": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "ArthurStein.is_protected": {
            "name": "is_protected",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "lemma": [
                    "str",
                    "List[float]",
                    "dict",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2020/page_redirects.py": {
        "PageRedirects.task": {
            "name": "task",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2020/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2022/revert_bot_errors.py": {
        "RevertBotDeletions.task": {
            "name": "task",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/online/2022/__init__.py": {},
    "WS_THEbotIT-main/archive/online/2022/upload_blitzlexikon/upload.py": {
        "UploadBlitzBot.task": {
            "name": "task",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/service/ws_status.py": {
        "RowBasic.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBasic.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "logger": []
            }
        },
        "RowBasic.build_row": {
            "name": "build_row",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBasic.get_sites_in_cat": {
            "name": "get_sites_in_cat",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "list_of_cat": [],
                "namespace": [
                    "None"
                ],
                "depth": [
                    "None"
                ],
                "any_template": [],
                "union": [
                    "bool"
                ]
            }
        },
        "RowBearbeitungen.build_row": {
            "name": "build_row",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBearbeitungen.get_wiki_bearbeitungen": {
            "name": "get_wiki_bearbeitungen",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowSeitenstatistik.build_row": {
            "name": "build_row",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowSeitenstatistik.get_all_sites": {
            "name": "get_all_sites",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBearbeitungsstand.build_row": {
            "name": "build_row",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBearbeitungsstand.make_percent": {
            "name": "make_percent",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "counter": [],
                "denominator": []
            }
        },
        "WsStatus.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "debug": []
            }
        },
        "WsStatus.task": {
            "name": "task",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WsStatus.new_row": {
            "name": "new_row",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "placeholder": []
            }
        },
        "WsStatus.load_text_from_site": {
            "name": "load_text_from_site",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma": []
            }
        },
        "WsStatus.save_text_to_site": {
            "name": "save_text_to_site",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/archive/service/__init__.py": {},
    "WS_THEbotIT-main/service/author_list.py": {
        "AuthorList.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "debug": []
            }
        },
        "AuthorList.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [
                "AuthorList"
            ],
            "arguments": {
                "self": [
                    "_TAuthorList@@AuthorList@@"
                ]
            }
        },
        "AuthorList.task": {
            "name": "task",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorList._run_searcher": {
            "name": "_run_searcher",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorList._strip_spaces": {
            "name": "_strip_spaces",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_string": []
            }
        },
        "AuthorList._build_database": {
            "name": "_build_database",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_list": []
            }
        },
        "AuthorList._sort_author_list": {
            "name": "_sort_author_list",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "list_authors": []
            }
        },
        "AuthorList._convert_to_table": {
            "name": "_convert_to_table",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorList._handle_birth_and_death": {
            "name": "_handle_birth_and_death",
            "location": 265,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "author_dict": []
            }
        }
    },
    "WS_THEbotIT-main/service/runner.py": {},
    "WS_THEbotIT-main/service/__init__.py": {},
    "WS_THEbotIT-main/service/gl/create_magazine.py": {
        "search_for_refs": {
            "name": "search_for_refs",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "GlCreateMagazine.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "debug": []
            }
        },
        "GlCreateMagazine.__enter__": {
            "name": "__enter__",
            "location": 47,
            "return": [
                "GlCreateMagazine"
            ],
            "arguments": {
                "self": [
                    "_TGlCreateMagazine@@GlCreateMagazine@@"
                ]
            }
        },
        "GlCreateMagazine.task": {
            "name": "task",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlCreateMagazine.process_pages": {
            "name": "process_pages",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temp_data": []
            }
        },
        "GlCreateMagazine.process_indexes": {
            "name": "process_indexes",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlCreateMagazine.process_actual_pages": {
            "name": "process_actual_pages",
            "location": 101,
            "return": [
                "Dict[(Any, set)]"
            ],
            "arguments": {
                "self": [],
                "dictionary_of_new_pages": []
            }
        },
        "GlCreateMagazine.make_magazines": {
            "name": "make_magazines",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary_of_magazines_by_year": []
            }
        },
        "GlCreateMagazine.make_magazine": {
            "name": "make_magazine",
            "location": 143,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "year": [],
                "magazine": []
            }
        },
        "GlCreateMagazine.convert_page_no": {
            "name": "convert_page_no",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "page": []
            }
        },
        "GlCreateMagazine.make_magazine_text": {
            "name": "make_magazine_text",
            "location": 185,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "year": [],
                "magazine": [],
                "quality": [],
                "list_of_pages": [],
                "last": []
            }
        },
        "GlCreateMagazine._get_indexes": {
            "name": "_get_indexes",
            "location": 260,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlCreateMagazine.search_pages": {
            "name": "search_pages",
            "location": 268,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/gl/status.py": {
        "GlStatus.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "debug": []
            }
        },
        "GlStatus.task": {
            "name": "task",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlStatus.to_percent": {
            "name": "to_percent",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "counter": [],
                "denominator": []
            }
        },
        "GlStatus.projektstand": {
            "name": "projektstand",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "temp_text": [],
                "alle": [],
                "fertig": [],
                "korrigiert": [],
                "unkorrigiert": [],
                "articles": []
            }
        },
        "GlStatus.alle_seiten": {
            "name": "alle_seiten",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_text": [],
                "all_lemmas": []
            }
        },
        "GlStatus.korrigierte_seiten": {
            "name": "korrigierte_seiten",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_text": [],
                "korrigiert": []
            }
        },
        "GlStatus.fertige_seiten": {
            "name": "fertige_seiten",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_text": [],
                "fertig": []
            }
        },
        "GlStatus.year": {
            "name": "year",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "year": [],
                "temp_text": []
            }
        },
        "GlStatus.petscan": {
            "name": "petscan",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "categories": [],
                "not_categories": [],
                "article": [
                    "bool"
                ],
                "year": [
                    "None"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/gl/test_create_magazine.py": {
        "TestSearchForRefs.test_data_provider": {
            "name": "test_data_provider",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[Any]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/gl/test_status.py": {
        "TestGlStatus.test_projektstand": {
            "name": "test_projektstand",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlStatus.test_to_percent": {
            "name": "test_to_percent",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/gl/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/public_domain.py": {},
    "WS_THEbotIT-main/service/ws_re/status.py": {
        "make_html_color": {
            "name": "make_html_color",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "min_value": [],
                "max_value": [],
                "value": []
            }
        },
        "ReStatus.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "debug": []
            }
        },
        "ReStatus.task": {
            "name": "task",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReStatus.user_page_the_it": {
            "name": "user_page_the_it",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "korrigiert": []
            }
        },
        "ReStatus.history": {
            "name": "history",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fertig": [],
                "korrigiert": [],
                "unkorrigiert": []
            }
        },
        "ReStatus.get_sum_of_cat": {
            "name": "get_sum_of_cat",
            "location": 66,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "cats": [],
                "negacats": []
            }
        },
        "ReStatus.petscan": {
            "name": "petscan",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "categories": [],
                "negative_categories": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/test_status.py": {
        "TestMakeHtmlColor.test_in_range": {
            "name": "test_in_range",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeHtmlColor.test_max_and_min": {
            "name": "test_max_and_min",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeHtmlColor.test_out_of_limits": {
            "name": "test_out_of_limits",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeHtmlColor.test_recursive": {
            "name": "test_recursive",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/test_volumes.py": {
        "TestVolume.test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_init_by_name": {
            "name": "test_init_by_name",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_init_supp_or_register": {
            "name": "test_init_supp_or_register",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_init_year_as_int": {
            "name": "test_init_year_as_int",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_volume_type": {
            "name": "test_volume_type",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolume.test_sort_key": {
            "name": "test_sort_key",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_len": {
            "name": "test_len",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter": {
            "name": "test_iter",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter_first_series": {
            "name": "test_iter_first_series",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter_second_series": {
            "name": "test_iter_second_series",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter_supplements": {
            "name": "test_iter_supplements",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter_register": {
            "name": "test_iter_register",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter_all_volumes": {
            "name": "test_iter_all_volumes",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_iter_main_volumes": {
            "name": "test_iter_main_volumes",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_get": {
            "name": "test_get",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test_pre_post": {
            "name": "test_pre_post",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVolumes.test__volume_part_of_main_volume": {
            "name": "test__volume_part_of_main_volume",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/volumes.py": {
        "Volume.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "year": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "bool",
                    "Optional[bytes]",
                    "bytes"
                ],
                "data_item": [
                    "bool",
                    "Sequence",
                    "Callable",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "start": [
                    "bool",
                    "None",
                    "Sequence",
                    "Callable",
                    "Optional[int]",
                    "int"
                ],
                "end": [
                    "bool",
                    "None",
                    "Sequence",
                    "Callable",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Volume.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.name": {
            "name": "name",
            "location": 46,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.file_name": {
            "name": "file_name",
            "location": 50,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.year": {
            "name": "year",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.data_item": {
            "name": "data_item",
            "location": 58,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.start": {
            "name": "start",
            "location": 62,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.end": {
            "name": "end",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.type": {
            "name": "type",
            "location": 70,
            "return": [
                "str",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume._compute_sortkey": {
            "name": "_compute_sortkey",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.sort_key": {
            "name": "sort_key",
            "location": 96,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.__getitem__": {
            "name": "__getitem__",
            "location": 111,
            "return": [
                "Volume"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List",
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "Iterable[T]",
                    "Type",
                    "Type[object]"
                ]
            }
        },
        "Volumes.__setitem__": {
            "name": "__setitem__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "slice"
                ],
                "value": [
                    "str",
                    "bool",
                    "slice"
                ]
            }
        },
        "Volumes.__delitem__": {
            "name": "__delitem__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ]
            }
        },
        "Volumes.__len__": {
            "name": "__len__",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.__iter__": {
            "name": "__iter__",
            "location": 126,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.special_volume_iterator": {
            "name": "special_volume_iterator",
            "location": 130,
            "return": [
                "Generator[(Volume, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "volume_type": [
                    "Type",
                    "bool"
                ]
            }
        },
        "Volumes.first_series": {
            "name": "first_series",
            "location": 137,
            "return": [
                "Generator[Volume,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.second_series": {
            "name": "second_series",
            "location": 142,
            "return": [
                "Generator[Volume,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.supplements": {
            "name": "supplements",
            "location": 147,
            "return": [
                "Generator[Volume,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.register": {
            "name": "register",
            "location": 152,
            "return": [
                "Generator[Volume,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.all_volumes": {
            "name": "all_volumes",
            "location": 157,
            "return": [
                "Generator[Volume,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes.main_volumes": {
            "name": "main_volumes",
            "location": 162,
            "return": [
                "Generator[str,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volumes._main_volume_of_volume": {
            "name": "_main_volume_of_volume",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "volume_key": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "Volumes.is_volume_part_of_main_volume": {
            "name": "is_volume_part_of_main_volume",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "volume": [
                    "str",
                    "int"
                ],
                "main_volume": [
                    "str",
                    "int"
                ]
            }
        },
        "Volumes.get_neighbours": {
            "name": "get_neighbours",
            "location": 179,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "volume_str": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/_update_items_in_volumes.py": {},
    "WS_THEbotIT-main/service/ws_re/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/download/archive.py": {
        "Archive.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Iterable[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Archive.get_source": {
            "name": "get_source",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.get_target": {
            "name": "get_target",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/download/base.py": {
        "DownloadTarget.get_source": {
            "name": "get_source",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadTarget.get_target": {
            "name": "get_target",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/download/data.py": {},
    "WS_THEbotIT-main/service/ws_re/download/mapping.py": {
        "Mapping.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "float",
                    "Callable",
                    "IO",
                    "Union[str,IO[bytes]]",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "Mapping._get_raw_files_photo_mapping": {
            "name": "_get_raw_files_photo_mapping",
            "location": 22,
            "return": [
                "Dict[(int, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapping.get_source": {
            "name": "get_source",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapping.get_target": {
            "name": "get_target",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/download/raw_files.py": {
        "RawFiles.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "pathlib.Path",
                    "Optional[Union[str,pathlib.Path]]"
                ]
            }
        },
        "RawFiles.get_source": {
            "name": "get_source",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawFiles.get_target": {
            "name": "get_target",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/download/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/integration_test/test_integration.py": {
        "_raise_count_errors": {
            "name": "_raise_count_errors",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "errors": [
                    "Type",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "TestAuthors.setUpClass": {
            "name": "setUpClass",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestAuthors.test_all_mappings_have_target": {
            "name": "test_all_mappings_have_target",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.setUpClass": {
            "name": "setUpClass",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestIntegrationRegister.test_length_of_alphabetic": {
            "name": "test_length_of_alphabetic",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.test_previous_next_in_order": {
            "name": "test_previous_next_in_order",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.test_previous_double_lemmas": {
            "name": "test_previous_double_lemmas",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.test_all_authors_has_a_target_in_mapping": {
            "name": "test_all_authors_has_a_target_in_mapping",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.test_no_missplaced_lemmas": {
            "name": "test_no_missplaced_lemmas",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.test_no_double_lemma": {
            "name": "test_no_double_lemma",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalyse.test_compare_lemma": {
            "name": "test_compare_lemma",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/integration_test/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/register/author.py": {
        "Author.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Callable[[float],bool]",
                    "Optional[str]"
                ],
                "author_dict": [
                    "Sequence",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Author.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.death": {
            "name": "death",
            "location": 18,
            "return": [
                "None",
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.birth": {
            "name": "birth",
            "location": 24,
            "return": [
                "None",
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.first_name": {
            "name": "first_name",
            "location": 30,
            "return": [
                "None",
                "Tuple[str]",
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.last_name": {
            "name": "last_name",
            "location": 36,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.redirect": {
            "name": "redirect",
            "location": 42,
            "return": [
                "None",
                "int",
                "bool",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.ws_lemma": {
            "name": "ws_lemma",
            "location": 48,
            "return": [
                "None",
                "Dict[str,Any]",
                "bytes",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.wp_lemma": {
            "name": "wp_lemma",
            "location": 54,
            "return": [
                "None",
                "Dict[str,Any]",
                "bytes",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.name": {
            "name": "name",
            "location": 60,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.update_internal_dict": {
            "name": "update_internal_dict",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author_dict": [
                    "Dict[str,str]",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "Author.to_dict": {
            "name": "to_dict",
            "location": 66,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Author.year_public_domain": {
            "name": "year_public_domain",
            "location": 70,
            "return": [
                "int",
                "bool",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/authors.py": {
        "Authors.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Authors.__iter__": {
            "name": "__iter__",
            "location": 25,
            "return": [
                "Generator[(service.ws_re.register.author.Author, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authors.get_author_by_mapping": {
            "name": "get_author_by_mapping",
            "location": 31,
            "return": [
                "List",
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str,List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "issue": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "List[dict[str,Any]]",
                    "Optional[str]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Authors.get_author": {
            "name": "get_author",
            "location": 46,
            "return": [
                "service.ws_re.register.author.Author"
            ],
            "arguments": {
                "self": [],
                "author_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Authors.set_mappings": {
            "name": "set_mappings",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "Authors.set_author": {
            "name": "set_author",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "str",
                    "Dict[str, service.ws_re.register._AuthorDict]",
                    "Optional[\"Response\"]",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        },
        "Authors._to_dict": {
            "name": "_to_dict",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authors.persist": {
            "name": "persist",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authors.authors_dict": {
            "name": "authors_dict",
            "location": 77,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authors.authors_mapping": {
            "name": "authors_mapping",
            "location": 81,
            "return": [
                "str",
                "bytes",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/author_crawler.py": {
        "AuthorCrawler.get_mapping": {
            "name": "get_mapping",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "mapping": []
            }
        },
        "AuthorCrawler._split_mappings": {
            "name": "_split_mappings",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mapping": []
            }
        },
        "AuthorCrawler._extract_mapping": {
            "name": "_extract_mapping",
            "location": 33,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, str)])])]"
            ],
            "arguments": {
                "cls": [],
                "single_mapping": []
            }
        },
        "AuthorCrawler._extract_complex_mapping": {
            "name": "_extract_complex_mapping",
            "location": 42,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "cls": [],
                "single_mapping": []
            }
        },
        "AuthorCrawler.get_authors": {
            "name": "get_authors",
            "location": 57,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "cls": [],
                "text": []
            }
        },
        "AuthorCrawler._split_author_table": {
            "name": "_split_author_table",
            "location": 65,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "raw_table": []
            }
        },
        "AuthorCrawler._split_author": {
            "name": "_split_author",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "author_sub_table": []
            }
        },
        "AuthorCrawler._extract_author_infos": {
            "name": "_extract_author_infos",
            "location": 79,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "author": []
            }
        },
        "AuthorCrawler._extract_years": {
            "name": "_extract_years",
            "location": 110,
            "return": [
                "Tuple[(Optional[int], Optional[int])]"
            ],
            "arguments": {
                "years": []
            }
        },
        "AuthorCrawler._extract_wp_lemma": {
            "name": "_extract_wp_lemma",
            "location": 117,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "wp_column": []
            }
        },
        "AuthorCrawler._get_author": {
            "name": "_get_author",
            "location": 124,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "cls": [],
                "author_lines": []
            }
        },
        "AuthorCrawler.process_author_infos": {
            "name": "process_author_infos",
            "location": 146,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "wiki": []
            }
        },
        "AuthorCrawler.get_author_mapping": {
            "name": "get_author_mapping",
            "location": 153,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "wiki": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/clean.py": {
        "CleanAuthors.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanAuthors._get_deletable_authors": {
            "name": "_get_deletable_authors",
            "location": 17,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanAuthors._get_all_authors_from_mapping": {
            "name": "_get_all_authors_from_mapping",
            "location": 26,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanAuthors.delete_authors_without_mapping": {
            "name": "delete_authors_without_mapping",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanAuthors.delete_mappings_without_use": {
            "name": "delete_mappings_without_use",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanAuthors.remap": {
            "name": "remap",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanAuthors._filter_and_replace": {
            "name": "_filter_and_replace",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_author": [
                    "Dict[str,Any]",
                    "Union[object,type]",
                    "Type"
                ]
            }
        },
        "CleanAuthors._create_candidates": {
            "name": "_create_candidates",
            "location": 77,
            "return": [
                "List[service.ws_re.register.author.Author]"
            ],
            "arguments": {
                "self": [],
                "old_author": [
                    "str",
                    "bool"
                ]
            }
        },
        "CleanAuthors._filter_candidates": {
            "name": "_filter_candidates",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "new_candidates": [
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "old_author": [
                    "Optional[List[Any]]",
                    "List[Any]",
                    "object",
                    "Set[str]",
                    "None",
                    "Optional[Dict[object,Any]]",
                    "Dict[object,Any]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/lemma.py": {
        "_generate_translation_dict": {
            "name": "_generate_translation_dict",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "_generate_regex_list": {
            "name": "_generate_regex_list",
            "location": 47,
            "return": [
                "List[Tuple[(Pattern, Any)]]"
            ],
            "arguments": {
                "raw_list": []
            }
        },
        "_generate_pre_striping_regex": {
            "name": "_generate_pre_striping_regex",
            "location": 54,
            "return": [
                "List[Tuple[(Pattern[str], str)]]"
            ],
            "arguments": {}
        },
        "_generate_pre_translate_regex": {
            "name": "_generate_pre_translate_regex",
            "location": 65,
            "return": [
                "List[Tuple[(Pattern[str], str)]]"
            ],
            "arguments": {}
        },
        "_generate_pre_finalize_regex": {
            "name": "_generate_pre_finalize_regex",
            "location": 75,
            "return": [
                "List[Tuple[(Pattern[str], str)]]"
            ],
            "arguments": {}
        },
        "Lemma.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [],
                "volume": [],
                "authors": []
            }
        },
        "Lemma._recalc_lemma": {
            "name": "_recalc_lemma",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma._init_chapters": {
            "name": "_init_chapters",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__getitem__": {
            "name": "__getitem__",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Lemma.__len__": {
            "name": "__len__",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__iter__": {
            "name": "__iter__",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.volume": {
            "name": "volume",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemma.chapters": {
            "name": "chapters",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemma.sort_key": {
            "name": "sort_key",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemma.short_description": {
            "name": "short_description",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemma._set_sort_key": {
            "name": "_set_sort_key",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma._strip_accents": {
            "name": "_strip_accents",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "accent_string": []
            }
        },
        "Lemma.make_sort_key": {
            "name": "make_sort_key",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "lemma": []
            }
        },
        "Lemma.keys": {
            "name": "keys",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.lemma_dict": {
            "name": "lemma_dict",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemma._get_chapter_dicts": {
            "name": "_get_chapter_dicts",
            "location": 199,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.is_valid": {
            "name": "is_valid",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.get_table_row": {
            "name": "get_table_row",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "print_volume": []
            }
        },
        "Lemma._escape_link_for_templates": {
            "name": "_escape_link_for_templates",
            "location": 237,
            "return": [
                "Any"
            ],
            "arguments": {
                "link": []
            }
        },
        "Lemma.get_link": {
            "name": "get_link",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.get_wiki_links": {
            "name": "get_wiki_links",
            "location": 250,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma._process_wiki_link": {
            "name": "_process_wiki_link",
            "location": 271,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "wiki_type": []
            }
        },
        "Lemma._get_start_column": {
            "name": "_get_start_column",
            "location": 280,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "lemma_chapter": []
            }
        },
        "Lemma._get_pages": {
            "name": "_get_pages",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lemma_chapter": []
            }
        },
        "Lemma._get_author_str": {
            "name": "_get_author_str",
            "location": 293,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lemma_chapter": []
            }
        },
        "Lemma._get_public_domain_year": {
            "name": "_get_public_domain_year",
            "location": 304,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.status": {
            "name": "status",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemma.update_lemma_dict": {
            "name": "update_lemma_dict",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_dict": [],
                "remove_items": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/lemma_chapter.py": {
        "LemmaChapter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter_dict": [
                    "str",
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "bytes",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LemmaChapter.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmaChapter.is_valid": {
            "name": "is_valid",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmaChapter.get_dict": {
            "name": "get_dict",
            "location": 23,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmaChapter.start": {
            "name": "start",
            "location": 31,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmaChapter.end": {
            "name": "end",
            "location": 35,
            "return": [
                "None",
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmaChapter.author": {
            "name": "author",
            "location": 41,
            "return": [
                "None",
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/printer.py": {
        "ReRegisterPrinter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "None"
                ],
                "debug": [
                    "bool"
                ],
                "log_to_screen": [
                    "bool"
                ],
                "log_to_wiki": [
                    "bool"
                ]
            }
        },
        "ReRegisterPrinter.task": {
            "name": "task",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReRegisterPrinter._print_author": {
            "name": "_print_author",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReRegisterPrinter._print_alphabetic": {
            "name": "_print_alphabetic",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReRegisterPrinter._print_pd": {
            "name": "_print_pd",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReRegisterPrinter._print_short": {
            "name": "_print_short",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReRegisterPrinter._print_volume": {
            "name": "_print_volume",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/registers.py": {
        "Registers.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Registers.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "service.ws_re.register.register_types.volume.VolumeRegister"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "Registers.persist": {
            "name": "persist",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registers.alphabetic": {
            "name": "alphabetic",
            "location": 40,
            "return": [
                "Generator[service.ws_re.register.register_types.alphabetic.AlphabeticRegister,None,None]",
                "Generator[AlphabeticRegister]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registers.author": {
            "name": "author",
            "location": 56,
            "return": [
                "Generator[service.ws_re.register.register_types.author.AuthorRegister,None,None]",
                "Generator[AuthorRegister]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registers.short": {
            "name": "short",
            "location": 63,
            "return": [
                "Generator[service.ws_re.register.register_types.short.ShortRegister,None,None]",
                "Generator[ShortRegister]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registers.pd": {
            "name": "pd",
            "location": 69,
            "return": [
                "Generator[service.ws_re.register.register_types.public_domain.PublicDomainRegister,None,None]",
                "Generator[PublicDomainRegister]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registers.volumes": {
            "name": "volumes",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registers.authors": {
            "name": "authors",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/repo.py": {
        "DataRepo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataRepo.get_data_path": {
            "name": "get_data_path",
            "location": 21,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "DataRepo._get_git_repo": {
            "name": "_get_git_repo",
            "location": 27,
            "return": [
                "Repo",
                "pathlib.Path",
                "None",
                "str",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "DataRepo.pull": {
            "name": "pull",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataRepo.push": {
            "name": "push",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataRepo.mock_data": {
            "name": "mock_data",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "mock": [
                    "str",
                    "Set[str]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_author.py": {
        "TestAuthor.test_author": {
            "name": "test_author",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthor.testPublicDomain": {
            "name": "testPublicDomain",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_authors.py": {
        "TestAuthors.test_load_data": {
            "name": "test_load_data",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthors.test_set_mapping": {
            "name": "test_set_mapping",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthors.test_set_author": {
            "name": "test_set_author",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthors.test_persist": {
            "name": "test_persist",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthors.test_iter": {
            "name": "test_iter",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_author_crawler.py": {
        "TestAuthorCrawler.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_split_mappings": {
            "name": "test_split_mappings",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_extract_mapping": {
            "name": "test_extract_mapping",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_get_mapping": {
            "name": "test_get_mapping",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_extract_author_infos": {
            "name": "test_extract_author_infos",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_extract_years": {
            "name": "test_extract_years",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_extract_wp_lemma": {
            "name": "test_extract_wp_lemma",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_split_author_table": {
            "name": "test_split_author_table",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_split_author": {
            "name": "test_split_author",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_get_author_mapping": {
            "name": "test_get_author_mapping",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_get_author_mapping_bug_meyer": {
            "name": "test_get_author_mapping_bug_meyer",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_get_complete_authors": {
            "name": "test_get_complete_authors",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_bug_kazarow": {
            "name": "test_bug_kazarow",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorCrawler.test_bug_groebe": {
            "name": "test_bug_groebe",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_base.py": {
        "copy_tst_data": {
            "name": "copy_tst_data",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path"
                ],
                "destination": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "clear_tst_path": {
            "name": "clear_tst_path",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "renew_path": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Iterable[str]"
                ]
            }
        },
        "BaseTestRegister.setUpClass": {
            "name": "setUpClass",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "BaseTestRegister.tearDownClass": {
            "name": "tearDownClass",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable",
                    "Type[Any]",
                    "Type[T]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_clean.py": {
        "TestCleanAuthors.setUpClass": {
            "name": "setUpClass",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestCleanAuthors.test_clean_authors": {
            "name": "test_clean_authors",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCleanAuthors.test_clean_mapping": {
            "name": "test_clean_mapping",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemapAuthors.setUpClass": {
            "name": "setUpClass",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestRemapAuthors.test_remap": {
            "name": "test_remap",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_lemma.py": {
        "TestLemma.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_from_dict_errors": {
            "name": "test_from_dict_errors",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_link": {
            "name": "test_get_link",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_wiki_links": {
            "name": "test_wiki_links",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_wiki_links_bug_multipart_lemma": {
            "name": "test_wiki_links_bug_multipart_lemma",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_pages": {
            "name": "test_get_pages",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_author": {
            "name": "test_get_author",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_public_domain_year": {
            "name": "test_get_public_domain_year",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_lemma_status": {
            "name": "test_get_lemma_status",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_is_valid": {
            "name": "test_is_valid",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_row": {
            "name": "test_get_row",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_get_row_no_chapter": {
            "name": "test_get_row_no_chapter",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_strip_accents": {
            "name": "test_strip_accents",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_sort_key": {
            "name": "test_sort_key",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testlist": []
            }
        },
        "TestLemma.test_sort_key_provide_by_lemma": {
            "name": "test_sort_key_provide_by_lemma",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_return_dict": {
            "name": "test_return_dict",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemma.test_set_lemma_dict": {
            "name": "test_set_lemma_dict",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_lemma_chapter.py": {
        "TestLemmaChapter.test_error_in_is_valid": {
            "name": "test_error_in_is_valid",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemmaChapter.test_no_author": {
            "name": "test_no_author",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLemmaChapter.test_return_dict": {
            "name": "test_return_dict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_printer.py": {
        "TestReRegisterPrinter.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_print_alphabetic": {
            "name": "test_print_alphabetic",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_print_volume": {
            "name": "test_print_volume",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_print_short": {
            "name": "test_print_short",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_print_pd": {
            "name": "test_print_pd",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_print_author": {
            "name": "test_print_author",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_task_on_monday": {
            "name": "test_task_on_monday",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReRegisterPrinter.test_task_other_day": {
            "name": "test_task_other_day",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_registers.py": {
        "TestRegisters.test_init": {
            "name": "test_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisters.test_not_all_there": {
            "name": "test_not_all_there",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisters.test_alphabetic": {
            "name": "test_alphabetic",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisters.test_author": {
            "name": "test_author",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisters.test_persist": {
            "name": "test_persist",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_repo.py": {
        "TestDataRepo.setUpClass": {
            "name": "setUpClass",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestDataRepo.tearDownClass": {
            "name": "tearDownClass",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable",
                    "Type[Any]",
                    "Type[T]"
                ]
            }
        },
        "TestDataRepo.test_data_path": {
            "name": "test_data_path",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataRepo.test__get_git_repo": {
            "name": "test__get_git_repo",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataRepo.test_pull": {
            "name": "test_pull",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataRepo.test_pushing_nothing_to_push": {
            "name": "test_pushing_nothing_to_push",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataRepo.test_pushing_changes": {
            "name": "test_pushing_changes",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataRepo.test_mock_data": {
            "name": "test_mock_data",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/test_updater.py": {
        "TestUpdater.setUpClass": {
            "name": "setUpClass",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestUpdater.test_update_lemma": {
            "name": "test_update_lemma",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_lemma_by_sortkey": {
            "name": "test_update_lemma_by_sortkey",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_lemma_by_sortkey_pre_and_post": {
            "name": "test_update_lemma_by_sortkey_pre_and_post",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_lemma_by_sortkey_pre_and_next_lemma_other_name": {
            "name": "test_update_lemma_by_sortkey_pre_and_next_lemma_other_name",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_sortkey_raise_error": {
            "name": "test_update_by_sortkey_raise_error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_sortkey_raise_error_missing_key": {
            "name": "test_update_by_sortkey_raise_error_missing_key",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_no_update_possible": {
            "name": "test_update_no_update_possible",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_next_and_previous": {
            "name": "test_update_next_and_previous",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_next_and_previous_in_normal_update": {
            "name": "test_update_next_and_previous_in_normal_update",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_next_and_previous_in_update_by_sortkey": {
            "name": "test_update_next_and_previous_in_update_by_sortkey",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_insert": {
            "name": "test_update_by_insert",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_replace": {
            "name": "test_update_by_replace",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_insert_after_previous": {
            "name": "test_update_by_insert_after_previous",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_insert_no_next_exists": {
            "name": "test_update_by_insert_no_next_exists",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_insert_before_next": {
            "name": "test_update_by_insert_before_next",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_by_insert_before_next_no_previous": {
            "name": "test_update_by_insert_before_next_no_previous",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_create_next_previous_supplement_by_sort_key": {
            "name": "test_update_create_next_previous_supplement_by_sort_key",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_create_next_previous_supplement_by_name": {
            "name": "test_update_create_next_previous_supplement_by_name",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_create_next_previous_supplement_by_name_pre_exists": {
            "name": "test_update_create_next_previous_supplement_by_name_pre_exists",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_create_next_previous_supplement_by_name_next_exists": {
            "name": "test_update_create_next_previous_supplement_by_name_next_exists",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdater.test_update_pre_and_next_not_possible": {
            "name": "test_update_pre_and_next_not_possible",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBugUpdates.test_duplicate_lemmas_in_supplements": {
            "name": "test_duplicate_lemmas_in_supplements",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBugUpdates.test_update_create_next_previous_supplement_by_name": {
            "name": "test_update_create_next_previous_supplement_by_name",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBugUpdates.test_update_create_next_previous_supplement_by_sort_key": {
            "name": "test_update_create_next_previous_supplement_by_sort_key",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBugUpdates.test_acutius_1a": {
            "name": "test_acutius_1a",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBugUpdates.test_prokleides_2": {
            "name": "test_prokleides_2",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBugUpdates.test_bug_no_previous_but_not": {
            "name": "test_bug_no_previous_but_not",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMissingIndices.test_update_missing_lemma": {
            "name": "test_update_missing_lemma",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_number": []
            }
        },
        "TestMissingIndices.test_update_missing_lemma_sort": {
            "name": "test_update_missing_lemma_sort",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_number": []
            }
        },
        "TestMissingIndices.test_update_missing_lemma_supple": {
            "name": "test_update_missing_lemma_supple",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_number": []
            }
        },
        "TestMissingIndices.test_update_missing_lemma_sort_supple": {
            "name": "test_update_missing_lemma_sort_supple",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_number": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/updater.py": {
        "Updater.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume_register": [
                    "bool",
                    "str"
                ]
            }
        },
        "Updater.__enter__": {
            "name": "__enter__",
            "location": 15,
            "return": [
                "Updater"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "Updater.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.update_lemma": {
            "name": "update_lemma",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [],
                "remove_items": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "dict[, ]",
                    "dict[str, str]",
                    "typing.Mapping"
                ],
                "self_supplement": [
                    "bool"
                ]
            }
        },
        "Updater._update_lemma_by_name": {
            "name": "_update_lemma_by_name",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [],
                "remove_items": [
                    "list[dict[, ]]",
                    "dict[, ]"
                ],
                "self_supplement": [
                    "dict[, ]"
                ]
            }
        },
        "Updater._update_by_sortkey": {
            "name": "_update_by_sortkey",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [
                    "str",
                    "bytes"
                ],
                "remove_items": []
            }
        },
        "Updater._update_in_supplements_with_neighbour_creation": {
            "name": "_update_in_supplements_with_neighbour_creation",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_to_update": [],
                "lemma_dict": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "remove_items": [
                    "dict[str, dict[str, float]]",
                    "int",
                    "dict[str, list[str]]"
                ]
            }
        },
        "Updater._u_i_s_w_n_c_2": {
            "name": "_u_i_s_w_n_c_2",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [],
                "lemma_dict": [],
                "lemma_to_update": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, str]"
                ]
            }
        },
        "Updater._u_i_s_w_n_c_1": {
            "name": "_u_i_s_w_n_c_1",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ],
                "lemma_dict": [
                    "list[typing.Callable[, ]]",
                    "bytes",
                    "list[]"
                ],
                "lemma_to_update": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, str]"
                ]
            }
        },
        "Updater._update_pre_and_post_exists": {
            "name": "_update_pre_and_post_exists",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [
                    "bytes"
                ]
            }
        },
        "Updater._update_pre_exists": {
            "name": "_update_pre_exists",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": []
            }
        },
        "Updater._update_post_exists": {
            "name": "_update_post_exists",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [
                    "bytes"
                ]
            }
        },
        "Updater._try_update_next_and_previous": {
            "name": "_try_update_next_and_previous",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_lemma_dict": [
                    "dict[str, typing.Any]"
                ],
                "lemma_to_update": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Updater._try_update_next": {
            "name": "_try_update_next",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_lemma_dict": [],
                "lemma_to_update": [
                    "dict[, ]"
                ]
            }
        },
        "Updater._try_update_previous": {
            "name": "_try_update_previous",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_lemma_dict": [],
                "lemma_to_update": [
                    "dict[, ]"
                ]
            }
        },
        "Updater.try_update_previous_next_of_surrounding_lemmas": {
            "name": "try_update_previous_next_of_surrounding_lemmas",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma_dict": [],
                "lemma_to_update": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/_base.py": {},
    "WS_THEbotIT-main/service/ws_re/register/_typing.py": {},
    "WS_THEbotIT-main/service/ws_re/register/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/register/register_types/alphabetic.py": {
        "AlphabeticRegister.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "end": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "before_start": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "after_next_start": [
                    "int",
                    "str",
                    "List",
                    "Dict"
                ],
                "registers": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "AlphabeticRegister.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphabeticRegister.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphabeticRegister.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "AlphabeticRegister.start": {
            "name": "start",
            "location": 33,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphabeticRegister.end": {
            "name": "end",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphabeticRegister._is_lemma_in_range": {
            "name": "_is_lemma_in_range",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str",
                    "int",
                    "Iterable[bool]"
                ]
            }
        },
        "AlphabeticRegister._get_header": {
            "name": "_get_header",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlphabeticRegister.get_register_str": {
            "name": "get_register_str",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/author.py": {
        "AuthorRegister.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [],
                "authors": [],
                "registers": []
            }
        },
        "AuthorRegister.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister.__len__": {
            "name": "__len__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AuthorRegister.author": {
            "name": "author",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister._is_lemma_of_author": {
            "name": "_is_lemma_of_author",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lemma": []
            }
        },
        "AuthorRegister._get_header": {
            "name": "_get_header",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister._get_footer": {
            "name": "_get_footer",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister.get_register_str": {
            "name": "get_register_str",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister.overview_line": {
            "name": "overview_line",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorRegister.proofread_parts_of_20": {
            "name": "proofread_parts_of_20",
            "location": 75,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "sum_lemmas": [],
                "fer": [],
                "kor": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/public_domain.py": {
        "PublicDomainRegister.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "authors": [
                    "str",
                    "Dict[str,Callable[,None]]"
                ],
                "registers": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PublicDomainRegister.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicDomainRegister.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicDomainRegister.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "PublicDomainRegister._get_pd_authors": {
            "name": "_get_pd_authors",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicDomainRegister._is_lemma_of_author": {
            "name": "_is_lemma_of_author",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str"
                ]
            }
        },
        "PublicDomainRegister.get_register_str": {
            "name": "get_register_str",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/short.py": {
        "ShortRegister.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_issue": [
                    "str",
                    "int"
                ],
                "registers": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ShortRegister.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortRegister.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortRegister._init_lemmas": {
            "name": "_init_lemmas",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortRegister.get_register_str": {
            "name": "get_register_str",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/test_alphabetic.py": {
        "TestAlphabeticRegister.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlphabeticRegister.test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlphabeticRegister.test_squash_lemmas": {
            "name": "test_squash_lemmas",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlphabeticRegister.test_squash_lemmas_empty": {
            "name": "test_squash_lemmas_empty",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlphabeticRegister.test_make_header": {
            "name": "test_make_header",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlphabeticRegister.test_make_table": {
            "name": "test_make_table",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/test_author.py": {
        "TestAuthorRegister.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorRegister.test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorRegister.test_make_table": {
            "name": "test_make_table",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorRegister.test_overview_line": {
            "name": "test_overview_line",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorRegister.test_proofread_parts_of_20": {
            "name": "test_proofread_parts_of_20",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorRegister.test_bug_to_much_percent": {
            "name": "test_bug_to_much_percent",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/test_public_domain.py": {
        "TestPublicDomainRegister.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicDomainRegister.test_pd_authors": {
            "name": "test_pd_authors",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicDomainRegister.test_init": {
            "name": "test_init",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicDomainRegister.test_make_table": {
            "name": "test_make_table",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/test_short.py": {
        "TestShortRegister.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortRegister.test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortRegister.test_make_table": {
            "name": "test_make_table",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/test_volume.py": {
        "TestRegister.test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_header_band": {
            "name": "test_header_band",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_header_vg_nf": {
            "name": "test_header_vg_nf",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_header_proof_read": {
            "name": "test_header_proof_read",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get_table": {
            "name": "test_get_table",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_persist": {
            "name": "test_persist",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_normalize_sort_key": {
            "name": "test_normalize_sort_key",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get_lemma_by_name": {
            "name": "test_get_lemma_by_name",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get_lemma_by_sort_key": {
            "name": "test_get_lemma_by_sort_key",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get_lemma_self_append": {
            "name": "test_get_lemma_self_append",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get_lemma_by_id": {
            "name": "test_get_lemma_by_id",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get_id_of_lemma": {
            "name": "test_get_id_of_lemma",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegister.test_json_integrity": {
            "name": "test_json_integrity",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/volume.py": {
        "VolumeRegister.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": [
                    "str",
                    "Exception",
                    "int"
                ],
                "authors": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "VolumeRegister.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.__len__": {
            "name": "__len__",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.volume": {
            "name": "volume",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.authors": {
            "name": "authors",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.lemmas": {
            "name": "lemmas",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister._get_header": {
            "name": "_get_header",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.get_register_str": {
            "name": "get_register_str",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.persist": {
            "name": "persist",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeRegister.__getitem__": {
            "name": "__getitem__",
            "location": 69,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "VolumeRegister.get_lemma_by_name": {
            "name": "get_lemma_by_name",
            "location": 72,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Dict",
                "List"
            ],
            "arguments": {
                "self": [],
                "lemma_name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "self_supplement": [
                    "bool",
                    "str"
                ]
            }
        },
        "VolumeRegister.get_lemma_by_sort_key": {
            "name": "get_lemma_by_sort_key",
            "location": 81,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "sort_key": [
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "self_supplement": [
                    "bool",
                    "int",
                    "Iterable[Iterable[T]]",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "VolumeRegister.get_index_of_lemma": {
            "name": "get_index_of_lemma",
            "location": 92,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "lemma_input": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "self_supplement": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable",
                    "Dict[str,List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "VolumeRegister.__contains__": {
            "name": "__contains__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lemma_name": [
                    "str"
                ]
            }
        },
        "VolumeRegister.normalize_sort_key": {
            "name": "normalize_sort_key",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "lemma_dict": [
                    "service.ws_re.register._LemmaDict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/_base.py": {
        "Register.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register._init_lemmas": {
            "name": "_init_lemmas",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_function": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Register.lemmas": {
            "name": "lemmas",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.squash_lemmas": {
            "name": "squash_lemmas",
            "location": 27,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "lemmas": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Register._get_table": {
            "name": "_get_table",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "print_volume": [
                    "str",
                    "bool"
                ]
            }
        },
        "Register.proof_read": {
            "name": "proof_read",
            "location": 77,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/register/register_types/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/scanner/base.py": {
        "ReScanner.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "debug": [
                    "bool",
                    "str",
                    "int"
                ],
                "log_to_screen": [
                    "bool",
                    "str",
                    "int"
                ],
                "log_to_wiki": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ReScanner.__enter__": {
            "name": "__enter__",
            "location": 36,
            "return": [
                "ReScanner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScanner.compile_lemma_list": {
            "name": "compile_lemma_list",
            "location": 46,
            "return": [
                "Dict[str, Dict[str, int]]",
                "set",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScanner._petscan_search": {
            "name": "_petscan_search",
            "location": 71,
            "return": [
                "List",
                "List[str]",
                "int",
                "bool",
                "List[Dict[str,Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScanner._prepare_searcher": {
            "name": "_prepare_searcher",
            "location": 81,
            "return": [
                "PetScan",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScanner._activate_tasks": {
            "name": "_activate_tasks",
            "location": 98,
            "return": [
                "List",
                "str",
                "bytes",
                "List[str]",
                "golem_messages.message.tasks.ReportComputedTask"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScanner._save_re_page": {
            "name": "_save_re_page",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "re_page": [
                    "service.ws_re.template.re_page.RePage",
                    "str",
                    "int"
                ],
                "list_of_done_tasks": [
                    "List[str]",
                    "int",
                    "bool",
                    "float",
                    "Optional[List[str]]"
                ]
            }
        },
        "ReScanner._add_lemma_to_data": {
            "name": "_add_lemma_to_data",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "ReScanner._process_task": {
            "name": "_process_task",
            "location": 116,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, object]"
                ],
                "re_page": [
                    "str",
                    "List[str]",
                    "Coroutine",
                    "Dict[str,Any]",
                    "collections.abc.Coroutine",
                    "Optional[str]",
                    "None"
                ],
                "lemma": [
                    "str",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "ReScanner.get_oldest_datetime": {
            "name": "get_oldest_datetime",
            "location": 131,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScanner.task": {
            "name": "task",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/test.py": {
        "TestReScanner.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_search_prepare_debug": {
            "name": "test_search_prepare_debug",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_search_prepare": {
            "name": "test_search_prepare",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_compile_lemmas_no_old_lemmas": {
            "name": "test_compile_lemmas_no_old_lemmas",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_compile_lemmas_old_lemmas": {
            "name": "test_compile_lemmas_old_lemmas",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_get_oldest_processed": {
            "name": "test_get_oldest_processed",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_activate_tasks": {
            "name": "test_activate_tasks",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner._mock_surroundings": {
            "name": "_mock_surroundings",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner._mock_task": {
            "name": "_mock_task",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_one_tasks_one_lemma": {
            "name": "test_one_tasks_one_lemma",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_two_tasks_one_lemma": {
            "name": "test_two_tasks_one_lemma",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_lemma_raise_exception": {
            "name": "test_lemma_raise_exception",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_lemma_raise_exception_second_not": {
            "name": "test_lemma_raise_exception_second_not",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_re_page_return_success_nothing_changed": {
            "name": "test_re_page_return_success_nothing_changed",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_re_page_return_success_text_changed": {
            "name": "test_re_page_return_success_text_changed",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_re_page_return_no_success_nothing_changed": {
            "name": "test_re_page_return_no_success_nothing_changed",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_re_page_return_no_success_but_text_has_changed": {
            "name": "test_re_page_return_no_success_but_text_has_changed",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_watchdog": {
            "name": "test_watchdog",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_save_going_wrong": {
            "name": "test_save_going_wrong",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_lemma_processed_are_saved": {
            "name": "test_lemma_processed_are_saved",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_reload_deprecated_lemma_data_none_there": {
            "name": "test_reload_deprecated_lemma_data_none_there",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_reload_deprecated_lemma_data": {
            "name": "test_reload_deprecated_lemma_data",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.SearchStringChecker.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_string": []
            }
        },
        "TestReScanner.SearchStringChecker.is_part_of_searchstring": {
            "name": "is_part_of_searchstring",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "part": []
            }
        },
        "TestReScanner.SearchStringChecker.is_empty": {
            "name": "is_empty",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.ONE1Task.task": {
            "name": "task",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.TWO2Task.task": {
            "name": "task",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScanner.test_save_going_wrong.side_effect": {
            "name": "side_effect",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestReScanner.WAITTask.task": {
            "name": "task",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/add_short_description.py": {
        "KURZTask.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "logger": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "KURZTask._get_short_description_text_from_source": {
            "name": "_get_short_description_text_from_source",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "starting_letter": []
            }
        },
        "KURZTask._load_short_descriptions": {
            "name": "_load_short_descriptions",
            "location": 26,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "KURZTask._parse_short_description": {
            "name": "_parse_short_description",
            "location": 37,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "source_text": []
            }
        },
        "KURZTask.task": {
            "name": "task",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/author_or_redirect.py": {
        "REAUTask.task": {
            "name": "task",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/base_task.py": {
        "ReScannerTask.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "None"
                ],
                "logger": [
                    "str",
                    "List[str]",
                    "Callable",
                    "int",
                    "Tuple[tuple[Union[str,...]]]",
                    "bool",
                    "Tuple[Tuple[str,...]]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        },
        "ReScannerTask.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "ReScannerTask"
            ],
            "arguments": {
                "self": [
                    "_TReScannerTask@@ReScannerTask@@"
                ]
            }
        },
        "ReScannerTask.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "ReScannerTask.task": {
            "name": "task",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScannerTask.run": {
            "name": "run",
            "location": 35,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "self": [],
                "re_page": [
                    "int",
                    "float"
                ]
            }
        },
        "ReScannerTask.load_task": {
            "name": "load_task",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScannerTask.finish_task": {
            "name": "finish_task",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReScannerTask.name": {
            "name": "name",
            "location": 57,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReporterMixin.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report_wiki": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ReporterMixin._build_entry": {
            "name": "_build_entry",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReporterMixin._data_exists": {
            "name": "_data_exists",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReporterMixin.report_data_entries": {
            "name": "report_data_entries",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/death_re_links.py": {
        "DEALTask.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "logger": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "DEALTask.task": {
            "name": "task",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEALTask._check_link": {
            "name": "_check_link",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link_to_check": []
            }
        },
        "DEALTask._build_entry": {
            "name": "_build_entry",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEALTask.finish_task": {
            "name": "finish_task",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/death_wp_links.py": {
        "DEWPTask.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ],
                "logger": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ],
                "debug": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ]
            }
        },
        "DEWPTask.task": {
            "name": "task",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEWPTask._build_entry": {
            "name": "_build_entry",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEWPTask._data_exists": {
            "name": "_data_exists",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEWPTask.finish_task": {
            "name": "finish_task",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/error_handling.py": {
        "ERROTask.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ],
                "logger": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ],
                "debug": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ]
            }
        },
        "ERROTask.task": {
            "name": "task",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERROTask.append_error": {
            "name": "append_error",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str",
                    "int"
                ],
                "reason": [
                    "str",
                    "int"
                ]
            }
        },
        "ERROTask._build_entry": {
            "name": "_build_entry",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERROTask.finish_task": {
            "name": "finish_task",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/move_to_public_domain.py": {
        "PDKSTask.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "logger": [],
                "debug": []
            }
        },
        "PDKSTask.task": {
            "name": "task",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/register_scanner.py": {
        "SCANTask.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [],
                "logger": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "SCANTask.task": {
            "name": "task",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SCANTask.finish_task": {
            "name": "finish_task",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SCANTask._fetch_wp_link": {
            "name": "_fetch_wp_link",
            "location": 45,
            "return": [
                "tuple[typing.Union[dict[, ],list[]]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "article_list": []
            }
        },
        "SCANTask._fetch_ws_link": {
            "name": "_fetch_ws_link",
            "location": 59,
            "return": [
                "tuple[typing.Union[dict[, ],list[]]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "article_list": []
            }
        },
        "SCANTask._fetch_wd_link": {
            "name": "_fetch_wd_link",
            "location": 74,
            "return": [
                "tuple[typing.Union[dict[, ],list[]]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "SCANTask._get_link_from_wd": {
            "name": "_get_link_from_wd",
            "location": 83,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "self": [],
                "possible_source_wikis": []
            }
        },
        "SCANTask._get_target_from_wd": {
            "name": "_get_target_from_wd",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SCANTask._fetch_sort_key": {
            "name": "_fetch_sort_key",
            "location": 105,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "article_list": []
            }
        },
        "SCANTask._fetch_lemma": {
            "name": "_fetch_lemma",
            "location": 112,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],list[]]]"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "SCANTask._fetch_redirect": {
            "name": "_fetch_redirect",
            "location": 117,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "article_list": []
            }
        },
        "SCANTask._fetch_previous": {
            "name": "_fetch_previous",
            "location": 128,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "article_list": []
            }
        },
        "SCANTask._fetch_next": {
            "name": "_fetch_next",
            "location": 136,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "article_list": []
            }
        },
        "SCANTask._fetch_short_description": {
            "name": "_fetch_short_description",
            "location": 144,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "article_list": []
            }
        },
        "SCANTask._fetch_no_creative_height": {
            "name": "_fetch_no_creative_height",
            "location": 152,
            "return": [
                "tuple[typing.Union[dict[typing.Text, bool],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "article_list": []
            }
        },
        "SCANTask._fetch_pages": {
            "name": "_fetch_pages",
            "location": 159,
            "return": [
                "tuple[typing.Union[dict[typing.Text, list[]],list[]]]",
                "tuple[typing.Union[dict[, ],list[]]]",
                "tuple[typing.Union[dict[typing.Text, ],list[]]]"
            ],
            "arguments": {
                "self": [],
                "article_list": []
            }
        },
        "SCANTask._analyse_simple_article_list": {
            "name": "_analyse_simple_article_list",
            "location": 173,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "article_list": []
            }
        },
        "SCANTask._analyse_complex_article_list": {
            "name": "_analyse_complex_article_list",
            "location": 188,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "article_list": []
            }
        },
        "SCANTask._create_chapter_dict": {
            "name": "_create_chapter_dict",
            "location": 211,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "article": [],
                "spalte_end": [],
                "spalte_start": []
            }
        },
        "SCANTask._fetch_proof_read": {
            "name": "_fetch_proof_read",
            "location": 219,
            "return": [
                "tuple[typing.Union[dict[typing.Text, int],list[]]]",
                "tuple[typing.Union[dict[, ],list[typing.Text]]]"
            ],
            "arguments": {
                "article_list": []
            }
        },
        "SCANTask._process_from_article_list": {
            "name": "_process_from_article_list",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SCANTask._update_lemma": {
            "name": "_update_lemma",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "band_info": [],
                "delete_list": [],
                "self_supplement": [],
                "update_dict": []
            }
        },
        "SCANTask._write_strategy_statistic": {
            "name": "_write_strategy_statistic",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [],
                "update_dict": [],
                "issue_no": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_add_short_description.py": {
        "TestKURZTaskProcessSource.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.tearDown": {
            "name": "tearDown",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_load_from_source_pages": {
            "name": "test_load_from_source_pages",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_load_short_descriptions_from_text": {
            "name": "test_load_short_descriptions_from_text",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_add_short_description_to_lemma": {
            "name": "test_add_short_description_to_lemma",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_add_short_description_to_lemma_sort_key": {
            "name": "test_add_short_description_to_lemma_sort_key",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_existing_short_description_to_lemma": {
            "name": "test_existing_short_description_to_lemma",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_existing_verweis_dont_add": {
            "name": "test_existing_verweis_dont_add",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSource.test_existing_verweis_remove_short_description": {
            "name": "test_existing_verweis_remove_short_description",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKURZTaskProcessSourceLoadReality.test_load_real_sources": {
            "name": "test_load_real_sources",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_author_or_redirect.py": {
        "TestREAUTask.test_add_cat": {
            "name": "test_add_cat",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestREAUTask.test_no_cat_if_nachtrag": {
            "name": "test_no_cat_if_nachtrag",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestREAUTask.test_remove_cat": {
            "name": "test_remove_cat",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_base_task.py": {
        "TaskTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_name": {
            "name": "test_name",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_init_and_delete": {
            "name": "test_init_and_delete",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_process_task": {
            "name": "test_process_task",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_process_task_alter_text": {
            "name": "test_process_task_alter_text",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_execute_with_exception": {
            "name": "test_execute_with_exception",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_execute_with_exception_altered": {
            "name": "test_execute_with_exception_altered",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_register_processed_title": {
            "name": "test_register_processed_title",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.test_process_two_tasks_alter_one": {
            "name": "test_process_two_tasks_alter_one",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskTestCase.PageMock.title": {
            "name": "title",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.NAMETask.task": {
            "name": "task",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.NAM1Task.task": {
            "name": "task",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.NAMEMoreExplanationTask.task": {
            "name": "task",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.MINITask.task": {
            "name": "task",
            "location": 47,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.MINIAlterTask.task": {
            "name": "task",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.EXCETask.task": {
            "name": "task",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.EXCEAlteredTask.task": {
            "name": "task",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReScannerTask.ALNAAltereNotAllTask.task": {
            "name": "task",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_death_re_links.py": {
        "TestDEALTask.test_process_next_previous_process_two": {
            "name": "test_process_next_previous_process_two",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEALTask.test_process": {
            "name": "test_process",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "title": [
                    "str",
                    "int"
                ],
                "exists_mocks": [
                    "bool",
                    "str"
                ],
                "expect": [
                    "str"
                ]
            }
        },
        "TestDEALTask.test_build_entries": {
            "name": "test_build_entries",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_death_wp_links.py": {
        "TestDEWPTask.test_link_is_missing": {
            "name": "test_link_is_missing",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEWPTask.test_link_is_existend": {
            "name": "test_link_is_existend",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEWPTask.test_link_is_existend_but_redirect": {
            "name": "test_link_is_existend_but_redirect",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEWPTask.test_link_several_links": {
            "name": "test_link_several_links",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEWPTask.test_build_entries": {
            "name": "test_build_entries",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEWPTask.test_data_exists": {
            "name": "test_data_exists",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDEWPTask.test_bug_invalid_title": {
            "name": "test_bug_invalid_title",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_error_handling.py": {
        "TestERROTask.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestERROTask.test_process": {
            "name": "test_process",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestERROTask.test_finish_up": {
            "name": "test_finish_up",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestERROTask.test_finish_up_no_errors": {
            "name": "test_finish_up_no_errors",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_move_to_public_domain.py": {
        "TestCOPDTask.test_process_newly_public_domain_tj": {
            "name": "test_process_newly_public_domain_tj",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCOPDTask.test_process_newly_public_domain_gj": {
            "name": "test_process_newly_public_domain_gj",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCOPDTask.test_process_newly_public_domain_tj_not_yet": {
            "name": "test_process_newly_public_domain_tj_not_yet",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCOPDTask.test_process_newly_public_domain_gj_not_yet": {
            "name": "test_process_newly_public_domain_gj_not_yet",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCOPDTask.test_process_newly_public_domain_height_of_creation": {
            "name": "test_process_newly_public_domain_height_of_creation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/test_register_scanner.py": {
        "TestSCANTask.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.setUpClass": {
            "name": "setUpClass",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSCANTask.tearDownClass": {
            "name": "tearDownClass",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSCANTask.test_fetch_wikipedia_wikisource_link": {
            "name": "test_fetch_wikipedia_wikisource_link",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_fetch_wikipedia_link_no_link": {
            "name": "test_fetch_wikipedia_link_no_link",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_sortkey": {
            "name": "test_sortkey",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_lemma": {
            "name": "test_lemma",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_proof_read": {
            "name": "test_proof_read",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "result": []
            }
        },
        "TestSCANTask.test_redirect": {
            "name": "test_redirect",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "result": []
            }
        },
        "TestSCANTask.test_previous": {
            "name": "test_previous",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "result": []
            }
        },
        "TestSCANTask.test_next": {
            "name": "test_next",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "result": []
            }
        },
        "TestSCANTask.test_short_description": {
            "name": "test_short_description",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "result": []
            }
        },
        "TestSCANTask.test_no_creative_height": {
            "name": "test_no_creative_height",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "result": []
            }
        },
        "TestSCANTask.test_pages": {
            "name": "test_pages",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "expect": []
            }
        },
        "TestSCANTask.test_pages_complex": {
            "name": "test_pages_complex",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "expect": []
            }
        },
        "TestSCANTask.test_fetch_from_properties": {
            "name": "test_fetch_from_properties",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_fetch_from_properties_self_append": {
            "name": "test_fetch_from_properties_self_append",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_fetch_from_properties_lemma_not_found": {
            "name": "test_fetch_from_properties_lemma_not_found",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSCANTask.test_get_wd_sitelink": {
            "name": "test_get_wd_sitelink",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/base.py": {
        "get_article_type": {
            "name": "get_article_type",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "re_page": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/task.py": {
        "DATATask.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ],
                "logger": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ],
                "debug": [
                    "bool",
                    "tools.bots.pi.WikiLogger"
                ]
            }
        },
        "DATATask.task": {
            "name": "task",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DATATask._create_remove_summary": {
            "name": "_create_remove_summary",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "claims_to_remove": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int",
                    "Type[Signature]"
                ]
            }
        },
        "DATATask._create_add_summary": {
            "name": "_create_add_summary",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "item_dict_add": [
                    "dict",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "DATATask._serialize_claims_to_add": {
            "name": "_serialize_claims_to_add",
            "location": 114,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "claims_to_add": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "Iterable[T]"
                ]
            }
        },
        "DATATask._get_claimes_to_change": {
            "name": "_get_claimes_to_change",
            "location": 123,
            "return": [
                "Dict[(str, Union[(dict, List[str])])]"
            ],
            "arguments": {
                "self": [],
                "data_item": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/test.py": {
        "TestDATATask.test_develop": {
            "name": "test_develop",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/test_task.py": {
        "TestDATATask.test__create_add_summary": {
            "name": "test__create_add_summary",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDATATask.test__create_add_summary_just_claims": {
            "name": "test__create_add_summary_just_claims",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDATATask.test__create_add_summary_no_claims": {
            "name": "test__create_add_summary_no_claims",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDATATask.test__create_remove_summary": {
            "name": "test__create_remove_summary",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDATATask.PseudoClaim.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pseudo_id": [
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/claim_factory.py": {
        "ClaimFactory.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "re_page": [
                    "int",
                    "float"
                ],
                "logger": [
                    "bool",
                    "golem_messages.datastructures.tasks.TaskHeader",
                    "str",
                    "T",
                    "Tuple[str, str]",
                    "float"
                ]
            }
        },
        "ClaimFactory._get_claim_json": {
            "name": "_get_claim_json",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimFactory.execute_pre_action": {
            "name": "execute_pre_action",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimFactory.get_claims_to_update": {
            "name": "get_claims_to_update",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "data_item": [
                    "list",
                    "List[int]",
                    "Optional[List[Any]]",
                    "int",
                    "Sequence[T]",
                    "Callable",
                    "str"
                ]
            }
        },
        "ClaimFactory.get_property_string": {
            "name": "get_property_string",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Awaitable",
                    "Dict[str, Any]",
                    "Iterable[Any]",
                    "dict"
                ]
            }
        },
        "ClaimFactory._filter_new_vs_old_claim_list": {
            "name": "_filter_new_vs_old_claim_list",
            "location": 65,
            "return": [
                "Tuple[(list, _T1)]"
            ],
            "arguments": {
                "new_claim_list": [
                    "service.ws_re.scanner.tasks.wikidata.claims._ClaimList",
                    "list"
                ],
                "old_claim_list": [
                    "service.ws_re.scanner.tasks.wikidata.claims._ClaimList",
                    "Dict[str, Any]",
                    "int",
                    "Optional[int]",
                    "List[dict]",
                    "list",
                    "dict"
                ]
            }
        },
        "ClaimFactory._create_claim_dictionary": {
            "name": "_create_claim_dictionary",
            "location": 97,
            "return": [
                "Dict[(str, Union[(Dict[(str, _T0)], _T1)])]"
            ],
            "arguments": {
                "self": [],
                "claims_to_add": [
                    "dict",
                    "Optional[Dict[str, Dict]]",
                    "str"
                ],
                "claims_to_remove": [
                    "service.ws_re.scanner.tasks.wikidata.claims._ClaimList",
                    "dict",
                    "\"MutableRangeSet[T]\"",
                    "\"User\""
                ]
            }
        },
        "ClaimFactory.get_diff_claims_for_replacement": {
            "name": "get_diff_claims_for_replacement",
            "location": 103,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "claim_list": [
                    "dict",
                    "str",
                    "List[str]"
                ],
                "data_item": []
            }
        },
        "ClaimFactory.get_old_claims": {
            "name": "get_old_claims",
            "location": 110,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data_item": [
                    "Sequence['cirq.Qid']",
                    "int"
                ]
            }
        },
        "ClaimFactory.create_claim_json": {
            "name": "create_claim_json",
            "location": 119,
            "return": [
                "Dict[(str, Union[(dict, list, str)])]"
            ],
            "arguments": {
                "snak_parameter": [
                    "int",
                    "str",
                    "bytes",
                    "dict"
                ],
                "qualifiers": [
                    "dict",
                    "service.ws_re.scanner.tasks.wikidata.claims._ClaimList",
                    "List[Dict[str, Any]]",
                    "Iterable"
                ],
                "references": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ClaimFactory._add_references": {
            "name": "_add_references",
            "location": 145,
            "return": [
                "List[Dict[(str, Union[(list, Dict[(Any, List[Dict[(str, Any)]])])])]]"
            ],
            "arguments": {
                "references": [
                    "Callable[[], Any]",
                    "Optional[int]"
                ]
            }
        },
        "ClaimFactory._add_qualifiers": {
            "name": "_add_qualifiers",
            "location": 157,
            "return": [
                "Tuple[(Dict[(Any, List[Dict[(str, Any)]])], list)]"
            ],
            "arguments": {
                "qualifiers": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "ClaimFactory.create_snak_json": {
            "name": "create_snak_json",
            "location": 167,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "snak_parameter": [
                    "service.ws_re.scanner.tasks.wikidata.claims._base.SnakParameter",
                    "int",
                    "dict"
                ]
            }
        },
        "ClaimFactory._authors_of_first_article": {
            "name": "_authors_of_first_article",
            "location": 206,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "bool",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimFactory._volume_of_first_article": {
            "name": "_volume_of_first_article",
            "location": 219,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/non_claims.py": {
        "NonClaims.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "re_page": [
                    "int",
                    "float",
                    "Union[str,float]",
                    "str"
                ]
            }
        },
        "NonClaims.dict": {
            "name": "dict",
            "location": 30,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonClaims._proofread_badge": {
            "name": "_proofread_badge",
            "location": 49,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonClaims._languages": {
            "name": "_languages",
            "location": 57,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "labels_or_descriptions": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict[str,int]",
                    "int",
                    "Mapping",
                    "Mapping[str,Any]"
                ]
            }
        },
        "NonClaims.labels_and_sitelinks_has_changed": {
            "name": "labels_and_sitelinks_has_changed",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "old_non_claims": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p1433_published_in.py": {
        "P1433PublishedIn._get_claim_json": {
            "name": "_get_claim_json",
            "location": 13,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p1476_title.py": {
        "P1476Title._get_claim_json": {
            "name": "_get_claim_json",
            "location": 13,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p155_follows_p156_followed_by.py": {
        "Neighbour.neighbour": {
            "name": "neighbour",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neighbour._get_claim_json": {
            "name": "_get_claim_json",
            "location": 16,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neighbour._get_item_of_neighbour_lemma": {
            "name": "_get_item_of_neighbour_lemma",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neighbour._get_lemma_of_neighbour": {
            "name": "_get_lemma_of_neighbour",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p31_instance_of.py": {
        "P31InstanceOf._get_claim_json": {
            "name": "_get_claim_json",
            "location": 18,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p361_part_of.py": {
        "P361PartOf._get_claim_json": {
            "name": "_get_claim_json",
            "location": 15,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p3903_column.py": {
        "P3903Column._get_claim_json": {
            "name": "_get_claim_json",
            "location": 13,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p407_language_of_work_or_name.py": {
        "P407LanguageOfWorkOrName._get_claim_json": {
            "name": "_get_claim_json",
            "location": 14,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p50_author.py": {
        "P50Author._get_claim_json": {
            "name": "_get_claim_json",
            "location": 15,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "P50Author._get_author_list": {
            "name": "_get_author_list",
            "location": 21,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p577_publication_date.py": {
        "P577PublicationDate._get_claim_json": {
            "name": "_get_claim_json",
            "location": 13,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p6216_copyright_status.py": {
        "P6216CopyrightStatus._get_claim_json": {
            "name": "_get_claim_json",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "P6216CopyrightStatus.published_95_years_ago": {
            "name": "published_95_years_ago",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P6216CopyrightStatus.xx_years_after_authors_death": {
            "name": "xx_years_after_authors_death",
            "location": 63,
            "return": [
                "Dict[(str, Union[(dict, list, str)])]"
            ],
            "arguments": {
                "self": [],
                "years": []
            }
        },
        "P6216CopyrightStatus.min_years_since_death": {
            "name": "min_years_since_death",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "P6216CopyrightStatus.threshold_of_originality": {
            "name": "threshold_of_originality",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/p921_main_subject.py": {
        "P921MainSubject._get_claim_json": {
            "name": "_get_claim_json",
            "location": 17,
            "return": [
                "List[Dict[(str, Union[(dict, list, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "P921MainSubject.get_claims_to_update": {
            "name": "get_claims_to_update",
            "location": 40,
            "return": [
                "Dict[(str, Union[(Dict[(str, list)], List[nothing])])]"
            ],
            "arguments": {
                "self": [],
                "data_item": [
                    "int",
                    "str",
                    "Dict",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_claim_factory.py": {
        "BaseTestClaimFactory.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestClaimFactory._create_mock_page": {
            "name": "_create_mock_page",
            "location": 32,
            "return": [
                "service.ws_re.template.re_page.RePage"
            ],
            "arguments": {
                "text": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "title": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestClaimFactory.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test_property_string": {
            "name": "test_property_string",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__filter_new_vs_old_claim_list": {
            "name": "test__filter_new_vs_old_claim_list",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_dictionary": {
            "name": "test__create_claim_dictionary",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_wikibase_item": {
            "name": "test__create_claim_json_wikibase_item",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_time_just_year": {
            "name": "test__create_claim_json_time_just_year",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_string": {
            "name": "test__create_claim_json_string",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_monolingualtext": {
            "name": "test__create_claim_json_monolingualtext",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_with_qualifier": {
            "name": "test__create_claim_json_with_qualifier",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_with_reference": {
            "name": "test__create_claim_json_with_reference",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.test__create_claim_json_exception": {
            "name": "test__create_claim_json_exception",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.P1234FactoryDummy._get_claim_json": {
            "name": "_get_claim_json",
            "location": 45,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimFactory.setUp.get_json": {
            "name": "get_json",
            "location": 52,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]],typing.Text]]"
            ],
            "arguments": {
                "letter": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_non_claims.py": {
        "TestNonClaims.test_article": {
            "name": "test_article",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_index": {
            "name": "test_index",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_crossref": {
            "name": "test_crossref",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_prologue": {
            "name": "test_prologue",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_badge_fertig": {
            "name": "test_badge_fertig",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_badge_korrigiert": {
            "name": "test_badge_korrigiert",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_badge_unkorrigiert": {
            "name": "test_badge_unkorrigiert",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_labels_and_sitelinks_has_changed_no_change": {
            "name": "test_labels_and_sitelinks_has_changed_no_change",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_labels_and_sitelinks_has_changed_nothing_there": {
            "name": "test_labels_and_sitelinks_has_changed_nothing_there",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonClaims.test_labels_and_sitelinks_has_changed_more_languages": {
            "name": "test_labels_and_sitelinks_has_changed_more_languages",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_p1476_title.py": {
        "TestP1476Title.test__get_claim_json_main_aritcle": {
            "name": "test__get_claim_json_main_aritcle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_p31_instance_of.py": {
        "TestP31InstanceOf.test__get_claim_json_main_aritcle": {
            "name": "test__get_claim_json_main_aritcle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP31InstanceOf.test__get_claim_json_main_cross_reference": {
            "name": "test__get_claim_json_main_cross_reference",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_p3903_columns.py": {
        "TestP3903Column.test__get_claim_json_start_and_end": {
            "name": "test__get_claim_json_start_and_end",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP3903Column.test__get_claim_json_only_start": {
            "name": "test__get_claim_json_only_start",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_p50_author.py": {
        "TestP50Author.test__get_claim_json_no_author_available": {
            "name": "test__get_claim_json_no_author_available",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_author_without_wiki_presence": {
            "name": "test__get_claim_json_author_without_wiki_presence",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_bug_wagner": {
            "name": "test__get_claim_json_bug_wagner",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_bug_Arderikka_2": {
            "name": "test__get_claim_json_bug_Arderikka_2",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_bug_find_author_without_ws_lemma": {
            "name": "test__get_claim_json_bug_find_author_without_ws_lemma",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_bug_author_from_non_de_wikipedia": {
            "name": "test__get_claim_json_bug_author_from_non_de_wikipedia",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_bug_johannes_schmidt": {
            "name": "test__get_claim_json_bug_johannes_schmidt",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP50Author.test__get_claim_json_bug_circus": {
            "name": "test__get_claim_json_bug_circus",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/test_p6216_copyright_status.py": {
        "TestP6216CopyrightStatus.test_xx_years_after_authors_death": {
            "name": "test_xx_years_after_authors_death",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_pma_50": {
            "name": "test_min_years_since_death_pma_50",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_pma_70": {
            "name": "test_min_years_since_death_pma_70",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_pma_80": {
            "name": "test_min_years_since_death_pma_80",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_pma_100": {
            "name": "test_min_years_since_death_pma_100",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_multiple_authors": {
            "name": "test_min_years_since_death_multiple_authors",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_no_death": {
            "name": "test_min_years_since_death_no_death",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_min_years_since_death_author_not_known": {
            "name": "test_min_years_since_death_author_not_known",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_only_pma_claim": {
            "name": "test_only_pma_claim",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_published_95_years_ago": {
            "name": "test_published_95_years_ago",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_published_95_years_ago_yes": {
            "name": "test_published_95_years_ago_yes",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_no_at_all": {
            "name": "test_no_at_all",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_threshold_of_originality": {
            "name": "test_threshold_of_originality",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_threshold_of_originality_yes": {
            "name": "test_threshold_of_originality_yes",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestP6216CopyrightStatus.test_threshold_of_originality_cross_reference": {
            "name": "test_threshold_of_originality_cross_reference",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/_base.py": {},
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/_typing.py": {},
    "WS_THEbotIT-main/service/ws_re/scanner/tasks/wikidata/claims/__init__.py": {},
    "WS_THEbotIT-main/service/ws_re/template/article.py": {
        "Article.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "article_type": [],
                "re_daten_properties": [
                    "None"
                ],
                "text": [
                    "typing.Text"
                ],
                "author": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "Article.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.article_type": {
            "name": "article_type",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Article.text": {
            "name": "text",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Article.author": {
            "name": "author",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "Article.common_free": {
            "name": "common_free",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.__len__": {
            "name": "__len__",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [
                "Generator[(service.ws_re.template.property.Property, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.__getitem__": {
            "name": "__getitem__",
            "location": 125,
            "return": [
                "service.ws_re.template.property.Property"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Article._init_properties": {
            "name": "_init_properties",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "properties_dict": []
            }
        },
        "Article.__hash__": {
            "name": "__hash__",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.from_text": {
            "name": "from_text",
            "location": 148,
            "return": [
                "Article"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArticle]"
                ],
                "article_text": []
            }
        },
        "Article._extract_properties": {
            "name": "_extract_properties",
            "location": 198,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "Article._correct_keyword": {
            "name": "_correct_keyword",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "template_property": []
            }
        },
        "Article._get_pre_text": {
            "name": "_get_pre_text",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.to_text": {
            "name": "to_text",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/template/property.py": {
        "Property.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "default": [
                    "str",
                    "Callable",
                    "int",
                    "service.ws_re.template._PropertyValueType",
                    "Type",
                    "Optional[Type]",
                    "None"
                ]
            }
        },
        "Property._return_by_type": {
            "name": "_return_by_type",
            "location": 12,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "service.ws_re.template._PropertyValueType"
                ]
            }
        },
        "Property._set_bool_by_str": {
            "name": "_set_bool_by_str",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "on_off": [
                    "str",
                    "Dict",
                    "bool",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Property.value": {
            "name": "value",
            "location": 38,
            "return": [
                "str",
                "int",
                "dict[str, str]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "tuple"
                ]
            }
        },
        "Property.name": {
            "name": "name",
            "location": 54,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.value_to_string": {
            "name": "value_to_string",
            "location": 57,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.__hash__": {
            "name": "__hash__",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/template/re_page.py": {
        "RePage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki_page": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RePage._init_page_dict": {
            "name": "_init_page_dict",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "int",
                    "str",
                    "None",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "RePage.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.__delitem__": {
            "name": "__delitem__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "int",
                    "str",
                    "None",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "RePage.__setitem__": {
            "name": "__setitem__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Dict",
                    "List[int]"
                ],
                "item": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Dict",
                    "List[int]"
                ]
            }
        },
        "RePage.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.clean_articles": {
            "name": "clean_articles",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.has_changed": {
            "name": "has_changed",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.is_writable": {
            "name": "is_writable",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.save": {
            "name": "save",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "int",
                    "IO",
                    "Dict"
                ]
            }
        },
        "RePage.append": {
            "name": "append",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_article": [
                    "str",
                    "service.ws_re.template.article.Article",
                    "List[int]",
                    "bytes",
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "RePage.__hash__": {
            "name": "__hash__",
            "location": 117,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.lemma": {
            "name": "lemma",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.lemma_without_prefix": {
            "name": "lemma_without_prefix",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.lemma_as_link": {
            "name": "lemma_as_link",
            "location": 132,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.only_articles": {
            "name": "only_articles",
            "location": 136,
            "return": [
                "List",
                "int",
                "str",
                "List[Tuple[str,str]]",
                "Tuple[int,int]",
                "List[Dict]",
                "bool",
                "List[Tuple[int,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.first_article": {
            "name": "first_article",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.splitted_article_list": {
            "name": "splitted_article_list",
            "location": 144,
            "return": [
                "List[list]",
                "str",
                "List[int]",
                "List[Dict]",
                "List[List[Any]]",
                "List[str]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.complex_construction": {
            "name": "complex_construction",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RePage.add_error_category": {
            "name": "add_error_category",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ],
                "note": [
                    "str",
                    "None",
                    "Exception",
                    "int",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "RePage.remove_error_category": {
            "name": "remove_error_category",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "int",
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "None"
                ]
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/template/test_article.py": {
        "TestReArticle.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_article_type": {
            "name": "test_article_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_wrong_article_type": {
            "name": "test_wrong_article_type",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_set_text": {
            "name": "test_set_text",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_wrong_type_text": {
            "name": "test_wrong_type_text",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_set_author": {
            "name": "test_set_author",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_wrong_type_author": {
            "name": "test_wrong_type_author",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_properties_access": {
            "name": "test_properties_access",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_properties_iterate": {
            "name": "test_properties_iterate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_properties_init": {
            "name": "test_properties_init",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_properties_exception": {
            "name": "test_properties_exception",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_simple_article": {
            "name": "test_simple_article",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_simple_article_with_whitespaces": {
            "name": "test_simple_article_with_whitespaces",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text": {
            "name": "test_from_text",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_wrong_keywords": {
            "name": "test_from_text_wrong_keywords",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_short_keywords": {
            "name": "test_from_text_short_keywords",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_wrong_property_in_REDaten": {
            "name": "test_from_text_wrong_property_in_REDaten",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_two_REDaten_templates": {
            "name": "test_from_text_two_REDaten_templates",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_no_REDaten_templates": {
            "name": "test_from_text_no_REDaten_templates",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_two_REAuthor_templates": {
            "name": "test_from_text_two_REAuthor_templates",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_no_REAuthor_templates": {
            "name": "test_from_text_no_REAuthor_templates",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_wrong_order_of_templates": {
            "name": "test_from_text_wrong_order_of_templates",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_complete_article": {
            "name": "test_complete_article",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_REAbschnitt": {
            "name": "test_from_text_REAbschnitt",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_text_in_front_of_article": {
            "name": "test_from_text_text_in_front_of_article",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_text_after_article": {
            "name": "test_from_text_text_after_article",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_from_text_bug_bad_whitespace": {
            "name": "test_from_text_bug_bad_whitespace",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_to_text_simple": {
            "name": "test_to_text_simple",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_to_text_REAbschnitt": {
            "name": "test_to_text_REAbschnitt",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_to_text_changed_properties": {
            "name": "test_to_text_changed_properties",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_hash": {
            "name": "test_hash",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_1": {
            "name": "test_bug_1",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_2": {
            "name": "test_bug_2",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_corrupt_author": {
            "name": "test_bug_corrupt_author",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_corrupt_start_template": {
            "name": "test_bug_corrupt_start_template",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_correct_case": {
            "name": "test_correct_case",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_shortened_parameter": {
            "name": "test_bug_shortened_parameter",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_dot_added_to_author": {
            "name": "test_bug_dot_added_to_author",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_issue_number_deleted_from_author": {
            "name": "test_bug_issue_number_deleted_from_author",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_issue_OFF_deleted_from_author": {
            "name": "test_bug_issue_OFF_deleted_from_author",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_issue_OFF_deleted_from_author_no_OFF": {
            "name": "test_bug_issue_OFF_deleted_from_author_no_OFF",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_common_free": {
            "name": "test_common_free",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReArticle.test_bug_common_free": {
            "name": "test_bug_common_free",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/template/test_property.py": {
        "TestReProperty.test_init": {
            "name": "test_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_format_bool": {
            "name": "test_format_bool",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_wrong_default": {
            "name": "test_wrong_default",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_set_bool_with_ON_and_OFF": {
            "name": "test_set_bool_with_ON_and_OFF",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_set_bool_bug_non_capitalized": {
            "name": "test_set_bool_bug_non_capitalized",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_set_value_not_stripped": {
            "name": "test_set_value_not_stripped",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_hash": {
            "name": "test_hash",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReProperty.test_repr": {
            "name": "test_repr",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/template/test_re_page.py": {
        "TestRePage.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_mock": [
                    "str"
                ],
                "page_mock": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TestRePage.test_simple_RePage_with_one_article": {
            "name": "test_simple_RePage_with_one_article",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_double_article": {
            "name": "test_double_article",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_combined_article_with_abschnitt": {
            "name": "test_combined_article_with_abschnitt",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_combined_article_with_abschnitt_and_normal_article": {
            "name": "test_combined_article_with_abschnitt_and_normal_article",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_wrong_structure_too_much_REAutor": {
            "name": "test_wrong_structure_too_much_REAutor",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_raise_at_redirect": {
            "name": "test_raise_at_redirect",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_wrong_structure_order_of_templates_not_correct": {
            "name": "test_wrong_structure_order_of_templates_not_correct",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_wrong_structure_corrupt_template": {
            "name": "test_wrong_structure_corrupt_template",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_back_to_str": {
            "name": "test_back_to_str",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_back_to_str_combined": {
            "name": "test_back_to_str_combined",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_back_to_str_combined_with_additional_text": {
            "name": "test_back_to_str_combined_with_additional_text",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_save_because_of_changes": {
            "name": "test_save_because_of_changes",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_dont_save_because_no_changes": {
            "name": "test_dont_save_because_no_changes",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_append": {
            "name": "test_append",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_delete": {
            "name": "test_delete",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_clean_article_list": {
            "name": "test_clean_article_list",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_hash": {
            "name": "test_hash",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_lemma": {
            "name": "test_lemma",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_has_changed": {
            "name": "test_has_changed",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_has_not_changed": {
            "name": "test_has_not_changed",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_page_is_locked": {
            "name": "test_page_is_locked",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_page_is_locked_detect_it": {
            "name": "test_page_is_locked_detect_it",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_page_no_lock": {
            "name": "test_page_no_lock",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_bug_too_much_blanks": {
            "name": "test_bug_too_much_blanks",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_get_splitted_article_list": {
            "name": "test_get_splitted_article_list",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_get_splitted_article_list_pre_text": {
            "name": "test_get_splitted_article_list_pre_text",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_complex_page": {
            "name": "test_complex_page",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_add_error_cat": {
            "name": "test_add_error_cat",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_add_error_cat_no_dublicate_category": {
            "name": "test_add_error_cat_no_dublicate_category",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_add_error_cat_with_note": {
            "name": "test_add_error_cat_with_note",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_add_error_cat_with_already_there": {
            "name": "test_add_error_cat_with_already_there",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_remove_error_cat": {
            "name": "test_remove_error_cat",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_remove_error_cat_other_cat_exists": {
            "name": "test_remove_error_cat_other_cat_exists",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_remove_error_cat_no_cat_there": {
            "name": "test_remove_error_cat_no_cat_there",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_filter_just_articles_from_article_list": {
            "name": "test_filter_just_articles_from_article_list",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRePage.test_page_is_locked.side_effect": {
            "name": "side_effect",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "summary": [],
                "botflag": []
            }
        }
    },
    "WS_THEbotIT-main/service/ws_re/template/_typing.py": {},
    "WS_THEbotIT-main/service/ws_re/template/__init__.py": {},
    "WS_THEbotIT-main/tools/abbyy_xml.py": {
        "AbbyyXML.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml_string": [
                    "str",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "AbbyyXML.get_text": {
            "name": "get_text",
            "location": 10,
            "return": [
                "Optional[str]",
                "str",
                "List[List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbbyyXML.process_document": {
            "name": "process_document",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbbyyXML._process_child_items_with_function": {
            "name": "_process_child_items_with_function",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "child_name": [
                    "str",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "child_xml": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "child_handler_function": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "append_new_line": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "AbbyyXML.process_page": {
            "name": "process_page",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "page_xml": [
                    "str",
                    "int"
                ]
            }
        },
        "AbbyyXML.process_block": {
            "name": "process_block",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "block_xml": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "AbbyyXML.process_text": {
            "name": "process_text",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text_xml": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AbbyyXML.process_par": {
            "name": "process_par",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "par_xml": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AbbyyXML.process_line": {
            "name": "process_line",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line_xml": [
                    "str",
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AbbyyXML.process_formatting": {
            "name": "process_formatting",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatting_xml": [
                    "str",
                    "Callable",
                    "bytes"
                ]
            }
        },
        "AbbyyXML.process_char": {
            "name": "process_char",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "char_xml": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/bot_scheduler.py": {
        "BotScheduler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "str",
                    "Union[str,List[str],Tuple[str,...]]",
                    "bool",
                    "List[str]",
                    "Mapping[str,str]",
                    "Tuple[Union[str,...]]",
                    "Mapping"
                ],
                "debug": [
                    "str",
                    "Union[str,List[str],Tuple[str,...]]",
                    "bool",
                    "List[str]",
                    "Mapping[str,str]",
                    "Tuple[Union[str,...]]",
                    "Mapping"
                ]
            }
        },
        "BotScheduler.now": {
            "name": "now",
            "location": 23,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotScheduler._last_day_of_month": {
            "name": "_last_day_of_month",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotScheduler.daily_bots": {
            "name": "daily_bots",
            "location": 34,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_config": [
                    "dict",
                    "int",
                    "tuple",
                    "Callable",
                    "str"
                ]
            }
        },
        "BotScheduler.weekly_bots": {
            "name": "weekly_bots",
            "location": 42,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_config": [
                    "dict",
                    "int",
                    "tuple",
                    "Callable",
                    "str"
                ]
            }
        },
        "BotScheduler.monthly_bots": {
            "name": "monthly_bots",
            "location": 50,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_config": [
                    "dict",
                    "int",
                    "tuple",
                    "Callable",
                    "str"
                ]
            }
        },
        "BotScheduler.bots_on_last_day_of_month": {
            "name": "bots_on_last_day_of_month",
            "location": 58,
            "return": [
                "int",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "new_config": [
                    "bool",
                    "Type",
                    "int"
                ]
            }
        },
        "BotScheduler.run_bot": {
            "name": "run_bot",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "bot_to_run": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "BotScheduler.run_dailys": {
            "name": "run_dailys",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotScheduler.run_weeklys": {
            "name": "run_weeklys",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotScheduler.run_monthlys": {
            "name": "run_monthlys",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotScheduler.task": {
            "name": "task",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBot.task": {
            "name": "task",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/date_conversion.py": {
        "DateConversion.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rawstring": []
            }
        },
        "DateConversion.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateConversion._chop_ref": {
            "name": "_chop_ref",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "rawstring": []
            }
        },
        "DateConversion._month_to_int": {
            "name": "_month_to_int",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "month": []
            }
        },
        "DateConversion._day_to_int": {
            "name": "_day_to_int",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "day": []
            }
        }
    },
    "WS_THEbotIT-main/tools/petscan.py": {
        "listify": {
            "name": "listify",
            "location": 13,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "item": [
                    "Iterable[Any]",
                    "T",
                    "List"
                ]
            }
        },
        "PetScan.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.set_language": {
            "name": "set_language",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "bool",
                    "float"
                ]
            }
        },
        "PetScan.set_project": {
            "name": "set_project",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proj": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "PetScan.set_timeout": {
            "name": "set_timeout",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sec": [
                    "str",
                    "int",
                    "Callable",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "PetScan.add_options": {
            "name": "add_options",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_options": [
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,str]",
                    "Type[T]",
                    "None",
                    "Type"
                ]
            }
        },
        "PetScan.set_logic_union": {
            "name": "set_logic_union",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.set_search_depth": {
            "name": "set_search_depth",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "str",
                    "bool",
                    "Any"
                ]
            }
        },
        "PetScan.add_positive_category": {
            "name": "add_positive_category",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int"
                ],
                "search_depth": [
                    "int",
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "List"
                ]
            }
        },
        "PetScan.add_negative_category": {
            "name": "add_negative_category",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int"
                ],
                "search_depth": [
                    "int",
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "List"
                ]
            }
        },
        "PetScan.add_namespace": {
            "name": "add_namespace",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "int",
                    "Optional[str]",
                    "str",
                    "datetime.datetime",
                    "None"
                ]
            }
        },
        "PetScan.activate_redirects": {
            "name": "activate_redirects",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.deactivate_redirects": {
            "name": "deactivate_redirects",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.add_yes_template": {
            "name": "add_yes_template",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PetScan.add_any_template": {
            "name": "add_any_template",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PetScan.add_no_template": {
            "name": "add_no_template",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PetScan.add_yes_outlink": {
            "name": "add_yes_outlink",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outlink": [
                    "float",
                    "int"
                ]
            }
        },
        "PetScan.add_any_outlink": {
            "name": "add_any_outlink",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outlink": [
                    "float",
                    "int"
                ]
            }
        },
        "PetScan.add_no_outlink": {
            "name": "add_no_outlink",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outlink": [
                    "int",
                    "str"
                ]
            }
        },
        "PetScan.add_yes_links_to": {
            "name": "add_yes_links_to",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Callable[,T]",
                    "float"
                ]
            }
        },
        "PetScan.add_any_links_to": {
            "name": "add_any_links_to",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Callable[,T]",
                    "float"
                ]
            }
        },
        "PetScan.add_no_links_to": {
            "name": "add_no_links_to",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "List[str]",
                    "str",
                    "Callable[,T]",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PetScan.last_change_before": {
            "name": "last_change_before",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_change": [
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "PetScan.last_change_after": {
            "name": "last_change_after",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_change": [
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "PetScan.max_age": {
            "name": "max_age",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "str",
                    "bool",
                    "float",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "PetScan.only_new": {
            "name": "only_new",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.smaller_then": {
            "name": "smaller_then",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_size": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "PetScan.larger_then": {
            "name": "larger_then",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_size": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "PetScan.get_wikidata_items": {
            "name": "get_wikidata_items",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.get_pages_with_wd_items": {
            "name": "get_pages_with_wd_items",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.get_pages_without_wd_items": {
            "name": "get_pages_without_wd_items",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.set_regex_filter": {
            "name": "set_regex_filter",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str",
                    "bool"
                ]
            }
        },
        "PetScan.set_last_edit_bots": {
            "name": "set_last_edit_bots",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[List[str]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "PetScan.set_last_edit_flagged": {
            "name": "set_last_edit_flagged",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[List[str]]"
                ]
            }
        },
        "PetScan.set_last_edit_anons": {
            "name": "set_last_edit_anons",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[List[str]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "PetScan._set_last_edit": {
            "name": "_set_last_edit",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_of_user": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Optional[int]",
                    "None"
                ],
                "allowed": [
                    "bool",
                    "str",
                    "Type",
                    "Tuple",
                    "Union[str,Tuple[str,str]]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "PetScan.set_sort_criteria": {
            "name": "set_sort_criteria",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "criteria": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PetScan.set_sortorder_decending": {
            "name": "set_sortorder_decending",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan._construct_list_argument": {
            "name": "_construct_list_argument",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "cat_list": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "int",
                    "List",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "PetScan._construct_options": {
            "name": "_construct_options",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan._construct_string": {
            "name": "_construct_string",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetScan.run": {
            "name": "run",
            "location": 230,
            "return": [
                "bool",
                "[dict]",
                "int",
                "Dict[str, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/template_finder.py": {
        "TemplateFinder.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_to_search": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TemplateFinder.get_positions": {
            "name": "get_positions",
            "location": 15,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "str"
                ]
            }
        },
        "TemplateFinder.get_start_positions_of_regex": {
            "name": "get_start_positions_of_regex",
            "location": 49,
            "return": [
                "list"
            ],
            "arguments": {
                "regex_pattern": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/template_handler.py": {
        "TemplateHandler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_str": [
                    "Text",
                    "str",
                    "Union[str,int]"
                ]
            }
        },
        "TemplateHandler._process_template_str": {
            "name": "_process_template_str",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_str": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TemplateHandler.get_parameterlist": {
            "name": "get_parameterlist",
            "location": 53,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateHandler.get_parameter": {
            "name": "get_parameter",
            "location": 56,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "Set",
                    "List[str]"
                ]
            }
        },
        "TemplateHandler.get_str": {
            "name": "get_str",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "str_complex": [
                    "bool",
                    "str",
                    "Union[str,Pattern[str]]"
                ]
            }
        },
        "TemplateHandler.update_parameters": {
            "name": "update_parameters",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_parameters": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TemplateHandler.set_title": {
            "name": "set_title",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "bool",
                    "float"
                ]
            }
        },
        "TemplateHandler._cut_spaces": {
            "name": "_cut_spaces",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_string": [
                    "str"
                ]
            }
        },
        "TemplateHandler._save_argument": {
            "name": "_save_argument",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "search_pattern": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "template_str": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "has_key": [
                    "bool",
                    "Dict[str,str]",
                    "Tuple[bool,Optional[str]]",
                    "Tuple[Union[bool,str,None]]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/test.py": {
        "real_wiki_test": {
            "name": "real_wiki_test",
            "location": 8,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "List",
                    "float",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/test_bots_scheduler.py": {
        "TestBotScheduler.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_get_weekday": {
            "name": "test_get_weekday",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_last_day_of_month": {
            "name": "test_last_day_of_month",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_bot_run": {
            "name": "test_bot_run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_wrong_type_runner": {
            "name": "test_wrong_type_runner",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_run_daily": {
            "name": "test_run_daily",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_run_weekly": {
            "name": "test_run_weekly",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_run_weekly_nothing_to_do": {
            "name": "test_run_weekly_nothing_to_do",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_run_monthly": {
            "name": "test_run_monthly",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_run_monthly_nothing_to_do": {
            "name": "test_run_monthly_nothing_to_do",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_run_last_day_of_month": {
            "name": "test_run_last_day_of_month",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.test_empty_run": {
            "name": "test_empty_run",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.Bot1.task": {
            "name": "task",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotScheduler.Bot2.task": {
            "name": "task",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/test_date_conversion.py": {
        "TestDateConversion.test_data_provider": {
            "name": "test_data_provider",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[Any]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/test_petscan.py": {
        "TestCatScan.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_add_options": {
            "name": "test_add_options",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_add_categoy": {
            "name": "test_add_categoy",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_add_namespace": {
            "name": "test_add_namespace",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_activate_redirects": {
            "name": "test_activate_redirects",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_deactivate_redirects": {
            "name": "test_deactivate_redirects",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_last_change_before": {
            "name": "test_last_change_before",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_last_change_after": {
            "name": "test_last_change_after",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_max_age": {
            "name": "test_max_age",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_only_new": {
            "name": "test_only_new",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_smaller_then": {
            "name": "test_smaller_then",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_larger_then": {
            "name": "test_larger_then",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_get_wikidata": {
            "name": "test_get_wikidata",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_get_Pages_with_wikidata": {
            "name": "test_get_Pages_with_wikidata",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_get_Pages_without_wikidata": {
            "name": "test_get_Pages_without_wikidata",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_set_or": {
            "name": "test_set_or",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_set_regex": {
            "name": "test_set_regex",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_set_last_edits": {
            "name": "test_set_last_edits",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_construct_cat_string": {
            "name": "test_construct_cat_string",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_construct_templates": {
            "name": "test_construct_templates",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_construct_outlinks": {
            "name": "test_construct_outlinks",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_construct_links_to": {
            "name": "test_construct_links_to",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_construct_options": {
            "name": "test_construct_options",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_construct_string": {
            "name": "test_construct_string",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_do_positive": {
            "name": "test_do_positive",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCatScan.test_do_negative": {
            "name": "test_do_negative",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/test_template_finder.py": {
        "TestTemplateFinder.test_find_simple_template": {
            "name": "test_find_simple_template",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_find_simple_template_fail": {
            "name": "test_find_simple_template_fail",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_find_two_templates": {
            "name": "test_find_two_templates",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_find_template_with_argument": {
            "name": "test_find_template_with_argument",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_find_nested_template": {
            "name": "test_find_nested_template",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_find_nested_template_with_offset": {
            "name": "test_find_nested_template_with_offset",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_find_complex": {
            "name": "test_find_complex",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateFinder.test_get_start_positions_of_regex": {
            "name": "test_get_start_positions_of_regex",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/test_template_handler.py": {
        "TestTemplateHandler.test_template_from_page": {
            "name": "test_template_from_page",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_get_parameter": {
            "name": "test_get_parameter",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_get_str": {
            "name": "test_get_str",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_without_key": {
            "name": "test_without_key",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_update_parameters": {
            "name": "test_update_parameters",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_template_in_template": {
            "name": "test_template_in_template",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_set_title": {
            "name": "test_set_title",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_link_with_text": {
            "name": "test_link_with_text",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_second_equal": {
            "name": "test_second_equal",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_bug_no_arguments": {
            "name": "test_bug_no_arguments",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateHandler.test_bug_authorlist": {
            "name": "test_bug_authorlist",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/_typing.py": {},
    "WS_THEbotIT-main/tools/__init__.py": {
        "fetch_text_from_wiki_site": {
            "name": "fetch_text_from_wiki_site",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "wiki": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "lemma": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/pi.py": {
        "_get_data_path": {
            "name": "_get_data_path",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "WikiLogger.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ],
                "start_time": [
                    "int",
                    "list[str]"
                ],
                "log_to_screen": [
                    "bool"
                ]
            }
        },
        "WikiLogger.__enter__": {
            "name": "__enter__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger.__exit__": {
            "name": "__exit__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "WikiLogger.tear_down": {
            "name": "tear_down",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger._get_logger_names": {
            "name": "_get_logger_names",
            "location": 67,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger._setup_logger_properties": {
            "name": "_setup_logger_properties",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger.debug": {
            "name": "debug",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "float"
                ]
            }
        },
        "WikiLogger.info": {
            "name": "info",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "WikiLogger.warning": {
            "name": "warning",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "WikiLogger.error": {
            "name": "error",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "WikiLogger.critical": {
            "name": "critical",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "WikiLogger.exception": {
            "name": "exception",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "exc_info": []
            }
        },
        "WikiLogger.create_wiki_log_lines": {
            "name": "create_wiki_log_lines",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedTimestamp.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "int"
                ]
            }
        },
        "PersistedTimestamp.__enter__": {
            "name": "__enter__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedTimestamp.__exit__": {
            "name": "__exit__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "PersistedTimestamp.set_up": {
            "name": "set_up",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedTimestamp.tear_down": {
            "name": "tear_down",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedTimestamp.last_run": {
            "name": "last_run",
            "location": 162,
            "return": [
                "int",
                "dict[str, str]",
                "str",
                "bytes",
                "dict[str, typing.Union[str,None]]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PersistedTimestamp.start_of_run": {
            "name": "start_of_run",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistedTimestamp.success_last_run": {
            "name": "success_last_run",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistedTimestamp.success_this_run": {
            "name": "success_this_run",
            "location": 179,
            "return": [
                "int",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "OneTimeBot.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "None",
                    "int",
                    "float"
                ],
                "debug": [
                    "bool"
                ],
                "log_to_screen": [
                    "bool"
                ],
                "log_to_wiki": [
                    "bool"
                ]
            }
        },
        "OneTimeBot.__enter__": {
            "name": "__enter__",
            "location": 206,
            "return": [
                "OneTimeBot"
            ],
            "arguments": {
                "self": [
                    "_TOneTimeBot@@OneTimeBot@@"
                ]
            }
        },
        "OneTimeBot.__exit__": {
            "name": "__exit__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "OneTimeBot.task": {
            "name": "task",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneTimeBot.get_bot_name": {
            "name": "get_bot_name",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ]
            }
        },
        "OneTimeBot.bot_name": {
            "name": "bot_name",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneTimeBot.run": {
            "name": "run",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneTimeBot._watchdog": {
            "name": "_watchdog",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneTimeBot.send_log_to_wiki": {
            "name": "send_log_to_wiki",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneTimeBot.save_if_changed": {
            "name": "save_if_changed",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "page": [],
                "text": [
                    "str"
                ],
                "change_msg": [
                    "str",
                    "None"
                ]
            }
        },
        "OneTimeBot.get_lemma_str_from_cat": {
            "name": "get_lemma_str_from_cat",
            "location": 262,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "list[]",
                    "int"
                ]
            }
        },
        "PersistedData.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "int"
                ]
            }
        },
        "PersistedData.__getitem__": {
            "name": "__getitem__",
            "location": 275,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.Collection",
                    "dict[, ]",
                    "list[]",
                    "typing.MutableMapping",
                    "str"
                ]
            }
        },
        "PersistedData.__setitem__": {
            "name": "__setitem__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "PersistedData.__delitem__": {
            "name": "__delitem__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "PersistedData.__len__": {
            "name": "__len__",
            "location": 284,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.__iter__": {
            "name": "__iter__",
            "location": 287,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.assign_dict": {
            "name": "assign_dict",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "PersistedData.dump": {
            "name": "dump",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "bool"
                ]
            }
        },
        "PersistedData.load": {
            "name": "load",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.update": {
            "name": "update",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_to_update": [
                    "str",
                    "None",
                    "dict[str, object]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "PersistedData._recover_data": {
            "name": "_recover_data",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_of_data": [
                    "str",
                    "Exception"
                ]
            }
        },
        "PersistedData.get_broken": {
            "name": "get_broken",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.get_deprecated": {
            "name": "get_deprecated",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalBot.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "debug": [
                    "bool"
                ],
                "log_to_screen": [
                    "bool"
                ],
                "log_to_wiki": [
                    "bool"
                ]
            }
        },
        "CanonicalBot.__enter__": {
            "name": "__enter__",
            "location": 338,
            "return": [
                "CanonicalBot"
            ],
            "arguments": {
                "self": [
                    "_TCanonicalBot@@CanonicalBot@@"
                ]
            }
        },
        "CanonicalBot.__exit__": {
            "name": "__exit__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "typing.Type",
                    "bytes",
                    "str"
                ]
            }
        },
        "CanonicalBot.task": {
            "name": "task",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalBot.create_timestamp_for_search": {
            "name": "create_timestamp_for_search",
            "location": 363,
            "return": [
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "days_in_past": [
                    "int"
                ]
            }
        },
        "CanonicalBot.data_outdated": {
            "name": "data_outdated",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalBot.last_run_successful": {
            "name": "last_run_successful",
            "location": 378,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/test_pi.py": {
        "_remove_data_folder": {
            "name": "_remove_data_folder",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup_data_path": {
            "name": "setup_data_path",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "test_class": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "teardown_data_path": {
            "name": "teardown_data_path",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetDataPath.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataPath.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataPath.test_folder_exist": {
            "name": "test_folder_exist",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataPath.test_make_folder": {
            "name": "test_make_folder",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.tearDown": {
            "name": "tearDown",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_logfile_names": {
            "name": "test_logfile_names",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_log_message": {
            "name": "test_log_message",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_tear_down": {
            "name": "test_tear_down",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_format_log_lines_for_wiki": {
            "name": "test_format_log_lines_for_wiki",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_exception": {
            "name": "test_exception",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.setUp": {
            "name": "setUp",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.tearDown": {
            "name": "tearDown",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_start_timestamp": {
            "name": "test_start_timestamp",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_last_run_timestamp": {
            "name": "test_last_run_timestamp",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_persist_timestamp": {
            "name": "test_persist_timestamp",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_persist_timestamp_false": {
            "name": "test_persist_timestamp_false",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_no_timestamp_there": {
            "name": "test_no_timestamp_there",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_devalidate_timestamp_of_last_run": {
            "name": "test_devalidate_timestamp_of_last_run",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedTimestamp.test_wrong_value_of_success_this_run": {
            "name": "test_wrong_value_of_success_this_run",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.tearDown": {
            "name": "tearDown",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_get_bot_name": {
            "name": "test_get_bot_name",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_not_implemented": {
            "name": "test_not_implemented",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_basic_run": {
            "name": "test_basic_run",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_timestamp_return_start_time": {
            "name": "test_timestamp_return_start_time",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_timestamp_load_last_run": {
            "name": "test_timestamp_load_last_run",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_timestamp_tear_down": {
            "name": "test_timestamp_tear_down",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_return_value_run": {
            "name": "test_return_value_run",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_logging": {
            "name": "test_logging",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_watchdog": {
            "name": "test_watchdog",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_send_log_to_wiki": {
            "name": "test_send_log_to_wiki",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_save_if_changed_positive": {
            "name": "test_save_if_changed_positive",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_save_if_changed_negativ": {
            "name": "test_save_if_changed_negativ",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_throw_exception_in_task": {
            "name": "test_throw_exception_in_task",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData._make_json_file": {
            "name": "_make_json_file",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text"
                ],
                "data": [
                    "typing.Text"
                ]
            }
        },
        "TestPersistedData.setUp": {
            "name": "setUp",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.tearDown": {
            "name": "tearDown",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_delete_key": {
            "name": "test_delete_key",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_iter_over_keys": {
            "name": "test_iter_over_keys",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_assign_complete_dict": {
            "name": "test_assign_complete_dict",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_assign_complete_dict_wrong_type": {
            "name": "test_assign_complete_dict_wrong_type",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_dump": {
            "name": "test_dump",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_dump_value_is_correct": {
            "name": "test_dump_value_is_correct",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_dump_different_keys": {
            "name": "test_dump_different_keys",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_load_data_from_file": {
            "name": "test_load_data_from_file",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_load_data_from_old_file": {
            "name": "test_load_data_from_old_file",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_no_data_to_load": {
            "name": "test_no_data_to_load",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_flag_old_file_as_deprecated": {
            "name": "test_flag_old_file_as_deprecated",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_delete_old_data_file": {
            "name": "test_delete_old_data_file",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_flag_old_file_as_deprecated_keep_broken_file": {
            "name": "test_flag_old_file_as_deprecated_keep_broken_file",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_flag_data_as_broken": {
            "name": "test_flag_data_as_broken",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_for_boolean_value": {
            "name": "test_for_boolean_value",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_update_data": {
            "name": "test_update_data",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_get_back_from_broken": {
            "name": "test_get_back_from_broken",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_get_back_from_deprecated": {
            "name": "test_get_back_from_deprecated",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_get_back_data_no_data_there": {
            "name": "test_get_back_data_no_data_there",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.setUp": {
            "name": "setUp",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.tearDown": {
            "name": "tearDown",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.create_timestamp": {
            "name": "create_timestamp",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_name": [
                    "str",
                    "bytes"
                ],
                "date": [],
                "success": [
                    "bool"
                ]
            }
        },
        "TestCanonicalBot.create_data": {
            "name": "create_data",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_name": [
                    "str",
                    "dict[str, list[str]]",
                    "None"
                ],
                "data": [
                    "None",
                    "dict[, ]",
                    "int",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "TestCanonicalBot.test_basic_run": {
            "name": "test_basic_run",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_load_and_store_data": {
            "name": "test_load_and_store_data",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_last_run_failure": {
            "name": "test_last_run_failure",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_no_load_model_outdated": {
            "name": "test_no_load_model_outdated",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_keep_broken_data": {
            "name": "test_keep_broken_data",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_set_timestamp_for_searcher": {
            "name": "test_set_timestamp_for_searcher",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_set_timestamp_for_searcher_no_successful_run": {
            "name": "test_set_timestamp_for_searcher_no_successful_run",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_last_run_successful_true": {
            "name": "test_last_run_successful_true",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_last_run_successful_false_1": {
            "name": "test_last_run_successful_false_1",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_last_run_successful_false_2": {
            "name": "test_last_run_successful_false_2",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_data_outdated": {
            "name": "test_data_outdated",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_data_outdated_not_outdated_1": {
            "name": "test_data_outdated_not_outdated_1",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.test_data_outdated_not_outdated_2": {
            "name": "test_data_outdated_not_outdated_2",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.MinimalBot.task": {
            "name": "task",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.LogBot.task": {
            "name": "task",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.SuccessBot.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "TestOneTimeBot.SuccessBot.task": {
            "name": "task",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.ExceptionBot.task": {
            "name": "task",
            "location": 308,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.MinimalCanonicalBot.task": {
            "name": "task",
            "location": 509,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.DataOutdatedBot.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.DataOutdatedBot.task": {
            "name": "task",
            "location": 540,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalBot.DataThrowException.task": {
            "name": "task",
            "location": 554,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_watchdog.WatchdogBot.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOneTimeBot.test_watchdog.WatchdogBot.task": {
            "name": "task",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/__init__.py": {},
    "WS_THEbotIT-main/tools/bots/cloud/lambda_bot.py": {
        "LambdaBot.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiki": [
                    "int",
                    "None",
                    "float",
                    "Union[float,int]",
                    "bool"
                ],
                "debug": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "log_to_screen": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "log_to_wiki": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float",
                    "Sequence[str]"
                ]
            }
        },
        "LambdaBot.__enter__": {
            "name": "__enter__",
            "location": 26,
            "return": [
                "LambdaBot"
            ],
            "arguments": {
                "self": [
                    "_TLambdaBot@@LambdaBot@@"
                ]
            }
        },
        "LambdaBot.__exit__": {
            "name": "__exit__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "str",
                    "int"
                ]
            }
        },
        "LambdaBot._load_data": {
            "name": "_load_data",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot._dump_data": {
            "name": "_dump_data",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot.task": {
            "name": "task",
            "location": 61,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot.get_bot_name": {
            "name": "get_bot_name",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[...,T]",
                    "Dict"
                ]
            }
        },
        "LambdaBot.bot_name": {
            "name": "bot_name",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot.run": {
            "name": "run",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot._watchdog": {
            "name": "_watchdog",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot.send_log_to_wiki": {
            "name": "send_log_to_wiki",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot.save_if_changed": {
            "name": "save_if_changed",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "page": [
                    "str",
                    "float"
                ],
                "text": [
                    "str"
                ],
                "change_msg": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LambdaBot.data_outdated": {
            "name": "data_outdated",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaBot.create_timestamp_for_search": {
            "name": "create_timestamp_for_search",
            "location": 109,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "Dict",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/logger.py": {
        "WikiLogger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ],
                "start_time": [
                    "int",
                    "List[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "datetime.timedelta"
                ],
                "log_to_screen": [
                    "bool",
                    "int"
                ]
            }
        },
        "WikiLogger.__enter__": {
            "name": "__enter__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger.__exit__": {
            "name": "__exit__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "WikiLogger.tear_down": {
            "name": "tear_down",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger._get_logger_name": {
            "name": "_get_logger_name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger._setup_logger_properties": {
            "name": "_setup_logger_properties",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLogger.debug": {
            "name": "debug",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "float",
                    "Tuple[Tuple[str,...]]",
                    "Tuple[tuple[Union[str,...]]]"
                ]
            }
        },
        "WikiLogger.info": {
            "name": "info",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Tuple[tuple[Union[str,...]]]",
                    "Tuple[Tuple[str,...]]",
                    "logging.Logger"
                ]
            }
        },
        "WikiLogger.warning": {
            "name": "warning",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "WikiLogger.error": {
            "name": "error",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "WikiLogger.critical": {
            "name": "critical",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "WikiLogger.exception": {
            "name": "exception",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "logging.Logger"
                ],
                "exc_info": [
                    "logging.Logger"
                ]
            }
        },
        "WikiLogger.create_wiki_log_lines": {
            "name": "create_wiki_log_lines",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/persisted_data.py": {
        "PersistedData.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "int"
                ]
            }
        },
        "PersistedData.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "Iterable[Sequence[str]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]",
                    "Type",
                    "MutableMapping",
                    "Collection[str]",
                    "Collection",
                    "str",
                    "Union[Dict,List]",
                    "Dict",
                    "List",
                    "Iterable"
                ]
            }
        },
        "PersistedData.__setitem__": {
            "name": "__setitem__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ]
            }
        },
        "PersistedData.__delitem__": {
            "name": "__delitem__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "PersistedData.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.assign_dict": {
            "name": "assign_dict",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_dict": [
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ]
            }
        },
        "PersistedData.dump": {
            "name": "dump",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "PersistedData._load_from_bucket": {
            "name": "_load_from_bucket",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_appendix": [
                    "str",
                    "Text"
                ]
            }
        },
        "PersistedData._copy_to_deprecated": {
            "name": "_copy_to_deprecated",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.load": {
            "name": "load",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.update": {
            "name": "update",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_to_update": [
                    "str",
                    "Optional[str]",
                    "Dict[str,object]",
                    "Dict[str,str]",
                    "None",
                    "Dict"
                ]
            }
        },
        "PersistedData.get_broken": {
            "name": "get_broken",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedData.get_deprecated": {
            "name": "get_deprecated",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/status.py": {
        "Status.__post_init__": {
            "name": "__post_init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.from_dict": {
            "name": "from_dict",
            "location": 30,
            "return": [
                "Status"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStatus]"
                ],
                "class_dict": [
                    "bool",
                    "str"
                ]
            }
        },
        "Status.to_dict": {
            "name": "to_dict",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.close_run": {
            "name": "close_run",
            "location": 47,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "finish": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/status_manager.py": {
        "StatusManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "float",
                    "List"
                ]
            }
        },
        "StatusManager.last_runs": {
            "name": "last_runs",
            "location": 23,
            "return": [
                "Dict[str,Literal]",
                "str",
                "Dict",
                "List",
                "BaseException",
                "int",
                "bool",
                "Callable[[KT],VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusManager.last_run": {
            "name": "last_run",
            "location": 34,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "List",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusManager.last_finished_runs": {
            "name": "last_finished_runs",
            "location": 40,
            "return": [
                "List",
                "List[str]",
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusManager.last_successful_runs": {
            "name": "last_successful_runs",
            "location": 44,
            "return": [
                "List",
                "List[str]",
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusManager.last_successful_run": {
            "name": "last_successful_run",
            "location": 48,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "bool",
                "List",
                "List[Tuple[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusManager.finish_run": {
            "name": "finish_run",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "bool",
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/test_base.py": {
        "TestCloudBase.setUpClass": {
            "name": "setUpClass",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCloudBase.tearDownClass": {
            "name": "tearDownClass",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestCloudBase._make_json_file": {
            "name": "_make_json_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Text",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ],
                "data": [
                    "Text",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestCloudBase.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudBase._create_data_bucket": {
            "name": "_create_data_bucket",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestCloudBase._create_manage_table": {
            "name": "_create_manage_table",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "IO",
                    "Dict[str,str]",
                    "IO[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestCloudBase._truncate_manage_table": {
            "name": "_truncate_manage_table",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/test_lambda_bot.py": {
        "TestLambdaBot.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_get_bot_name": {
            "name": "test_get_bot_name",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_not_implemented": {
            "name": "test_not_implemented",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_basic_run": {
            "name": "test_basic_run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_return_value_run": {
            "name": "test_return_value_run",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_logging": {
            "name": "test_logging",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_watchdog": {
            "name": "test_watchdog",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_send_log_to_wiki": {
            "name": "test_send_log_to_wiki",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_save_if_changed_positive": {
            "name": "test_save_if_changed_positive",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_save_if_changed_negativ": {
            "name": "test_save_if_changed_negativ",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_throw_exception_in_task": {
            "name": "test_throw_exception_in_task",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_load_and_store_data": {
            "name": "test_load_and_store_data",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_last_run_failure": {
            "name": "test_last_run_failure",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_no_load_model_outdated": {
            "name": "test_no_load_model_outdated",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_data_outdated_not_outdated_1": {
            "name": "test_data_outdated_not_outdated_1",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_data_outdated_not_outdated_2": {
            "name": "test_data_outdated_not_outdated_2",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_keep_broken_data": {
            "name": "test_keep_broken_data",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_set_timestamp_for_searcher": {
            "name": "test_set_timestamp_for_searcher",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_set_timestamp_for_searcher_no_successful_run": {
            "name": "test_set_timestamp_for_searcher_no_successful_run",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_last_run_successful_true": {
            "name": "test_last_run_successful_true",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_last_run_successful_false_1": {
            "name": "test_last_run_successful_false_1",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_last_run_successful_false_2": {
            "name": "test_last_run_successful_false_2",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.MinimalBot.task": {
            "name": "task",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.LogBot.task": {
            "name": "task",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.SuccessBot.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestLambdaBot.SuccessBot.task": {
            "name": "task",
            "location": 53,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.ExceptionBot.task": {
            "name": "task",
            "location": 124,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.AddDataBot.task": {
            "name": "task",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.DataOutdatedBot.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.DataOutdatedBot.task": {
            "name": "task",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.DataThrowException.task": {
            "name": "task",
            "location": 190,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_watchdog.WatchdogBot.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaBot.test_watchdog.WatchdogBot.task": {
            "name": "task",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/test_logger.py": {
        "TestWikilogger.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_logfile_names": {
            "name": "test_logfile_names",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_log_message": {
            "name": "test_log_message",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_tear_down": {
            "name": "test_tear_down",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_format_log_lines_for_wiki": {
            "name": "test_format_log_lines_for_wiki",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikilogger.test_exception": {
            "name": "test_exception",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/test_persisted_data.py": {
        "TestPersistedData.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_load_from_bucket_copy_to_deprecated": {
            "name": "test_load_from_bucket_copy_to_deprecated",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_load_from_bucket_no_data": {
            "name": "test_load_from_bucket_no_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_delete_key": {
            "name": "test_delete_key",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_iter_over_keys": {
            "name": "test_iter_over_keys",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_assign_complete_dict": {
            "name": "test_assign_complete_dict",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_assign_complete_dict_wrong_type": {
            "name": "test_assign_complete_dict_wrong_type",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_dump": {
            "name": "test_dump",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_dump_unsucessful": {
            "name": "test_dump_unsucessful",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_load_data_from_file_no_format": {
            "name": "test_load_data_from_file_no_format",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_no_data_to_load": {
            "name": "test_no_data_to_load",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_for_boolean_value": {
            "name": "test_for_boolean_value",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_update_data": {
            "name": "test_update_data",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_get_back_from_broken": {
            "name": "test_get_back_from_broken",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_get_back_from_deprecated": {
            "name": "test_get_back_from_deprecated",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_get_back_data_no_data_there": {
            "name": "test_get_back_data_no_data_there",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedData.test_persitence_date": {
            "name": "test_persitence_date",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/test_status.py": {
        "TestStatus.test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatus.test_from_dict": {
            "name": "test_from_dict",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatus.test_to_dict": {
            "name": "test_to_dict",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatus.test_create_start_time": {
            "name": "test_create_start_time",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatus.test_close_run_timestamp": {
            "name": "test_close_run_timestamp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatus.test_finish_success": {
            "name": "test_finish_success",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatus.test_output": {
            "name": "test_output",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/test_status_manager.py": {
        "TestStatusManager.test_init": {
            "name": "test_init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_get_last_runs": {
            "name": "test_get_last_runs",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_get_last_run": {
            "name": "test_get_last_run",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_get_last_finished_runs": {
            "name": "test_get_last_finished_runs",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_get_last_successful_runs": {
            "name": "test_get_last_successful_runs",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_finish_run": {
            "name": "test_finish_run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_finish_success": {
            "name": "test_finish_success",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusManager.test_finish_no_success": {
            "name": "test_finish_no_success",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WS_THEbotIT-main/tools/bots/cloud/__init__.py": {}
}
{
    "Weekly-Drop-master/manage.py": {},
    "Weekly-Drop-master/config/urls.py": {},
    "Weekly-Drop-master/config/wsgi.py": {},
    "Weekly-Drop-master/config/__init__.py": {},
    "Weekly-Drop-master/config/settings/base.py": {
        "get_secret": {
            "name": "get_secret",
            "location": 17,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "setting": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "secrets": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "Weekly-Drop-master/config/settings/local.py": {},
    "Weekly-Drop-master/config/settings/production.py": {},
    "Weekly-Drop-master/config/settings/test.py": {},
    "Weekly-Drop-master/config/settings/__init__.py": {},
    "Weekly-Drop-master/docs/conf.py": {},
    "Weekly-Drop-master/docs/__init__.py": {},
    "Weekly-Drop-master/trendingAlbums/admin.py": {},
    "Weekly-Drop-master/trendingAlbums/apps.py": {},
    "Weekly-Drop-master/trendingAlbums/models.py": {
        "getRedditObjects": {
            "name": "getRedditObjects",
            "location": 57,
            "return": [
                "int",
                "raiden.utils.Nonce",
                "list",
                "Tuple[int]"
            ],
            "arguments": {}
        },
        "clearDB": {
            "name": "clearDB",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "filterFreshOnly": {
            "name": "filterFreshOnly",
            "location": 84,
            "return": [
                "str",
                "bytes",
                "raiden.utils.signer.Signer",
                "List[float]",
                "Optional[float]"
            ],
            "arguments": {
                "topics_data": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "checkFresh": {
            "name": "checkFresh",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "title": [
                    "int",
                    "str",
                    "Tuple[int]",
                    "datetime.timedelta"
                ]
            }
        },
        "checkFreshSingle": {
            "name": "checkFreshSingle",
            "location": 103,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "checkFreshEP": {
            "name": "checkFreshEP",
            "location": 110,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "checkFreshAlbum": {
            "name": "checkFreshAlbum",
            "location": 117,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_date": {
            "name": "get_date",
            "location": 124,
            "return": [
                "dt.datetime"
            ],
            "arguments": {
                "created": [
                    "float",
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "fixDates": {
            "name": "fixDates",
            "location": 131,
            "return": [
                "raiden.utils.signer.Signer",
                "dict",
                "str",
                "Dict[str, Any]",
                "Callable",
                "pandas.DataFrame"
            ],
            "arguments": {
                "topics_data": [
                    "str",
                    "Dict[str,float]",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str,List[annofabapi.models.TaskHistory]]"
                ]
            }
        },
        "utc_to_local": {
            "name": "utc_to_local",
            "location": 145,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "utc_dt": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping",
                    "List[int]",
                    "Type",
                    "Type[T]",
                    "django.forms.ModelForm"
                ]
            }
        },
        "readyToUpdate": {
            "name": "readyToUpdate",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "getNextThursday": {
            "name": "getNextThursday",
            "location": 176,
            "return": [
                "str",
                "float",
                "Optional[str]",
                "datetime.datetime",
                "datetime.date",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "latest_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "getRedditPosts": {
            "name": "getRedditPosts",
            "location": 197,
            "return": [
                "dict",
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "getDateTime": {
            "name": "getDateTime",
            "location": 229,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "str_time": [
                    "str",
                    "datetime.timezone",
                    "datetime.datetime"
                ]
            }
        },
        "getSpotifyAlbums": {
            "name": "getSpotifyAlbums",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "convertRedditSpotify": {
            "name": "convertRedditSpotify",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "album": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[S]",
                    "datetime.datetime",
                    "List[zerver.models.Stream]"
                ]
            }
        },
        "checkCorrectAlbum": {
            "name": "checkCorrectAlbum",
            "location": 308,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "album": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.date"
                ],
                "title": [
                    "str",
                    "List[str]",
                    "List",
                    "Set"
                ],
                "spotifyclient": [
                    "str",
                    "List[str]",
                    "list",
                    "set"
                ]
            }
        }
    },
    "Weekly-Drop-master/trendingAlbums/tests.py": {},
    "Weekly-Drop-master/trendingAlbums/urls.py": {},
    "Weekly-Drop-master/trendingAlbums/views.py": {
        "AlbumView.get_context_data": {
            "name": "get_context_data",
            "location": 10,
            "return": [
                "Dict",
                "Dict[AbstractSet,set[Any]]",
                "str",
                "Tuple[dict]",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Weekly-Drop-master/trendingAlbums/__init__.py": {},
    "Weekly-Drop-master/trendingAlbums/migrations/0001_initial.py": {},
    "Weekly-Drop-master/trendingAlbums/migrations/0002_spotifyalbum.py": {},
    "Weekly-Drop-master/trendingAlbums/migrations/0003_spotifyalbum_album_type.py": {},
    "Weekly-Drop-master/trendingAlbums/migrations/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "Weekly-Drop-master/weekly_drop/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/contrib/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/contrib/sites/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/contrib/sites/migrations/0001_initial.py": {},
    "Weekly-Drop-master/weekly_drop/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "Weekly-Drop-master/weekly_drop/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/contrib/sites/migrations/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 17,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/admin.py": {},
    "Weekly-Drop-master/weekly_drop/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/urls.py": {},
    "Weekly-Drop-master/weekly_drop/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/users/migrations/0001_initial.py": {},
    "Weekly-Drop-master/weekly_drop/users/migrations/__init__.py": {},
    "Weekly-Drop-master/weekly_drop/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ]
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Weekly-Drop-master/weekly_drop/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "Weekly-Drop-master/weekly_drop/users/tests/__init__.py": {}
}
{
    "aads-class-pub-main/src/exercises/avl_tree/avl_tree.py": {
        "AVLTreeNode.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "float",
                    "bool",
                    "str",
                    "List[List[Callable]]",
                    "list[list[typing.Callable[, ]]]",
                    "dict",
                    "dict[, ]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "val": [
                    "float",
                    "bool",
                    "str",
                    "List[List[Callable]]",
                    "list[list[typing.Callable[, ]]]",
                    "dict",
                    "dict[, ]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "balance": [
                    "bool",
                    "typing.Callable[[], bool]",
                    "str",
                    "Optional[Callable[[], bool]]",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "left": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "List[List[Callable]]",
                    "dict",
                    "list[list[typing.Callable[, ]]]",
                    "Callable[[str], str]",
                    "dict[, ]",
                    "typing.Callable[str, str]"
                ],
                "right": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "List[List[Callable]]",
                    "dict",
                    "list[list[typing.Callable[, ]]]",
                    "Callable[[str], str]",
                    "dict[, ]",
                    "typing.Callable[str, str]"
                ],
                "parent": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "List[List[Callable]]",
                    "dict",
                    "list[list[typing.Callable[, ]]]",
                    "Callable[[str], str]",
                    "dict[, ]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "AVLTreeNode.get_balance": {
            "name": "get_balance",
            "location": 18,
            "return": [
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVLTreeNode.set_balance": {
            "name": "set_balance",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "list[float]",
                    "List[float]",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "AVLTree.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVLTree.put": {
            "name": "put",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "AVLTree._put": {
            "name": "_put",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "value": [
                    "bytes",
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "current_node": [
                    "AVLTreeNode"
                ]
            }
        },
        "AVLTree.update_balance": {
            "name": "update_balance",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "AVLTreeNode"
                ]
            }
        },
        "AVLTree.rebalance": {
            "name": "rebalance",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "AVLTreeNode"
                ]
            }
        },
        "AVLTree.rotate_left": {
            "name": "rotate_left",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rotation_root": [
                    "AVLTreeNode"
                ]
            }
        },
        "AVLTree.rotate_right": {
            "name": "rotate_right",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rotation_root": [
                    "AVLTreeNode"
                ]
            }
        }
    },
    "aads-class-pub-main/src/exercises/avl_tree/binary_search_tree.py": {
        "BinaryTreeNode.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[bool]"
                ],
                "value": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "left": [
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "right": [
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "parent": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BinaryTreeNode.get_child_left": {
            "name": "get_child_left",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.set_child_left": {
            "name": "set_child_left",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BinaryTreeNode.get_child_right": {
            "name": "get_child_right",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.set_child_right": {
            "name": "set_child_right",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BinaryTreeNode.get_parent": {
            "name": "get_parent",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.set_parent": {
            "name": "set_parent",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "BinaryTreeNode.is_child_left": {
            "name": "is_child_left",
            "location": 48,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_child_right": {
            "name": "is_child_right",
            "location": 52,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_root": {
            "name": "is_root",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_leaf": {
            "name": "is_leaf",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.has_a_child": {
            "name": "has_a_child",
            "location": 64,
            "return": [
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.has_children": {
            "name": "has_children",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.get_key": {
            "name": "get_key",
            "location": 72,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.set_key": {
            "name": "set_key",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryTreeNode.get_value": {
            "name": "get_value",
            "location": 82,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.set_value": {
            "name": "set_value",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "BinaryTreeNode.replace_payload": {
            "name": "replace_payload",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "Union[Callable[[Dict], Hashable], str]"
                ],
                "value": [
                    "str"
                ],
                "left": [
                    "bytes",
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "dict"
                ],
                "right": [
                    "bytes",
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "dict"
                ]
            }
        },
        "BinaryTreeNode.find_successor": {
            "name": "find_successor",
            "location": 103,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.find_min": {
            "name": "find_min",
            "location": 118,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.splice_out": {
            "name": "splice_out",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.__iter__": {
            "name": "__iter__",
            "location": 146,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.__len__": {
            "name": "__len__",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.size": {
            "name": "size",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.__iter__": {
            "name": "__iter__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.__getitem__": {
            "name": "__getitem__",
            "location": 177,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "BinarySearchTree.get_root": {
            "name": "get_root",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.set_root": {
            "name": "set_root",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BinarySearchTree.get": {
            "name": "get",
            "location": 194,
            "return": [
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "BinarySearchTree._get": {
            "name": "_get",
            "location": 204,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "current_node": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BinarySearchTree.__setitem__": {
            "name": "__setitem__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "BinarySearchTree.put": {
            "name": "put",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "BinarySearchTree._put": {
            "name": "_put",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[float]",
                    "dict"
                ],
                "value": [
                    "bytes",
                    "Union[int, str]",
                    "str"
                ],
                "current_node": [
                    "bytes",
                    "Optional[float]",
                    "str",
                    "List[Tuple]"
                ]
            }
        },
        "BinarySearchTree.__contains__": {
            "name": "__contains__",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "KT"
                ]
            }
        },
        "BinarySearchTree.__delitem__": {
            "name": "__delitem__",
            "location": 248,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "BinarySearchTree.delete": {
            "name": "delete",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "BinarySearchTree._delete": {
            "name": "_delete",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_node": []
            }
        },
        "BinarySearchTree.inorder": {
            "name": "inorder",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree._inorder": {
            "name": "_inorder",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict",
                    "bytearray",
                    "bool",
                    "str"
                ]
            }
        },
        "BinarySearchTree.postorder": {
            "name": "postorder",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree._postorder": {
            "name": "_postorder",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict",
                    "int"
                ]
            }
        },
        "BinarySearchTree.preorder": {
            "name": "preorder",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree._preorder": {
            "name": "_preorder",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str",
                    "Optional[\"Node\"]",
                    "List[List[Any]]"
                ]
            }
        },
        "BinarySearchTree.clear": {
            "name": "clear",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/exercises/avl_tree/__init__.py": {},
    "aads-class-pub-main/src/exercises/binheapmax/binheapmax.py": {
        "BinaryHeapMax.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapMax._perc_up": {
            "name": "_perc_up",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur_idx": [
                    "int"
                ]
            }
        },
        "BinaryHeapMax._perc_down": {
            "name": "_perc_down",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur_idx": [
                    "int"
                ]
            }
        },
        "BinaryHeapMax.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "BinaryHeapMax.remove": {
            "name": "remove",
            "location": 31,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapMax.heapify": {
            "name": "heapify",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "not_a_heap": [
                    "list"
                ]
            }
        },
        "BinaryHeapMax._get_max_child": {
            "name": "_get_max_child",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "parent_idx": [
                    "int"
                ]
            }
        },
        "BinaryHeapMax.__len__": {
            "name": "__len__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapMax.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/exercises/binheapmax/__init__.py": {},
    "aads-class-pub-main/src/exercises/bloomfilter/bloomfilter.py": {
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BloomFilter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "BloomFilter.hash": {
            "name": "hash",
            "location": 19,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "BloomFilter.add": {
            "name": "add",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "BloomFilter.__contains__": {
            "name": "__contains__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "BloomFilter.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BloomFilter.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/exercises/bloomfilter/__init__.py": {},
    "aads-class-pub-main/src/exercises/dijkstra/dijkstra.py": {
        "read_toml": {
            "name": "read_toml",
            "location": 9,
            "return": [
                "pythonds3.graphs.Graph",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "find_path": {
            "name": "find_path",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "g": [
                    "str",
                    "bool",
                    "typing.Callable[[], bool]",
                    "pythonds3.graphs.Graph",
                    "int",
                    "Callable[[], bool]"
                ],
                "start": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/exercises/dijkstra/__init__.py": {},
    "aads-class-pub-main/src/exercises/gui/draw.py": {
        "main": {
            "name": "main",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GoToCommand.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "y": [
                    "float",
                    "int"
                ],
                "width": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "color": [
                    "typing.Text",
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "GoToCommand.draw": {
            "name": "draw",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turtle": [
                    "int",
                    "bool",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "GoToCommand.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircleCommand.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "radius": [
                    "int",
                    "float",
                    "str"
                ],
                "width": [
                    "int",
                    "float",
                    "str"
                ],
                "color": [
                    "typing.Text",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "CircleCommand.draw": {
            "name": "draw",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turtle": [
                    "int",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "CircleCommand.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeginFillCommand.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BeginFillCommand.draw": {
            "name": "draw",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turtle": [
                    "int"
                ]
            }
        },
        "BeginFillCommand.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndFillCommand.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndFillCommand.draw": {
            "name": "draw",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turtle": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EndFillCommand.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PenUpCommand.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PenUpCommand.draw": {
            "name": "draw",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turtle": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PenUpCommand.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PenDownCommand.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PenDownCommand.draw": {
            "name": "draw",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turtle": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PenDownCommand.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyList.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyList.append": {
            "name": "append",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PyList.removeLast": {
            "name": "removeLast",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyList.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyList.__len__": {
            "name": "__len__",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawingApplication.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "DrawingApplication.buildWindow": {
            "name": "buildWindow",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawingApplication.buildWindow.newWindow": {
            "name": "newWindow",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.parse": {
            "name": "parse",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "DrawingApplication.buildWindow.loadFile": {
            "name": "loadFile",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.addToFile": {
            "name": "addToFile",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.write": {
            "name": "write",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "DrawingApplication.buildWindow.saveFile": {
            "name": "saveFile",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.circleHandler": {
            "name": "circleHandler",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.getPenColor": {
            "name": "getPenColor",
            "location": 371,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.getFillColor": {
            "name": "getFillColor",
            "location": 388,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.beginFillHandler": {
            "name": "beginFillHandler",
            "location": 398,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.endFillHandler": {
            "name": "endFillHandler",
            "location": 408,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.penUpHandler": {
            "name": "penUpHandler",
            "location": 419,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.penDownHandler": {
            "name": "penDownHandler",
            "location": 428,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DrawingApplication.buildWindow.clickHandler": {
            "name": "clickHandler",
            "location": 438,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bytes"
                ],
                "y": [
                    "int",
                    "bytes"
                ]
            }
        },
        "DrawingApplication.buildWindow.dragHandler": {
            "name": "dragHandler",
            "location": 451,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bytes"
                ],
                "y": [
                    "int",
                    "bytes"
                ]
            }
        },
        "DrawingApplication.buildWindow.undoHandler": {
            "name": "undoHandler",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/exercises/hashing/hashing.py": {
        "hash_remainder": {
            "name": "hash_remainder",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_mid_sqr": {
            "name": "hash_mid_sqr",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_folding": {
            "name": "hash_folding",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_str": {
            "name": "hash_str",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "hash_str_weighted": {
            "name": "hash_str_weighted",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "aads-class-pub-main/src/exercises/hashing/__init__.py": {},
    "aads-class-pub-main/src/exercises/partition/partition.py": {
        "read_xml": {
            "name": "read_xml",
            "location": 47,
            "return": [
                "tuple"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Partition.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Set[int]",
                    "set[int]"
                ]
            }
        },
        "Partition.forest": {
            "name": "forest",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.add": {
            "name": "add",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Edge"
                ]
            }
        },
        "Partition._find_root": {
            "name": "_find_root",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "Partition.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.__iter__": {
            "name": "__iter__",
            "location": 42,
            "return": [
                "listiterator[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/exercises/partition/__init__.py": {},
    "aads-class-pub-main/src/exercises/trees/traversal.py": {
        "get_preorder": {
            "name": "get_preorder",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "inorder": [
                    "str"
                ],
                "postorder": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/exercises/trees/__init__.py": {},
    "aads-class-pub-main/src/notes/btree/btree.py": {
        "btreemain": {
            "name": "btreemain",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "readRecord": {
            "name": "readRecord",
            "location": 535,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "file": [
                    "str",
                    "TextIO",
                    "bytes",
                    "Optional[int]"
                ],
                "recNum": [
                    "bool",
                    "List[List[int]]",
                    "str",
                    "int",
                    "bytes"
                ],
                "recSize": [
                    "str",
                    "TextIO",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "readField": {
            "name": "readField",
            "location": 541,
            "return": [
                "int",
                "None",
                "str",
                "List[int]",
                "float",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "record": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Union[str, int, bool]]",
                    "bool",
                    "Optional[dict]",
                    "float"
                ],
                "colTypes": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Type"
                ],
                "fieldNum": [
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BTreeNode.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degree": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[Dict[str, int]]",
                    "str",
                    "Optional[str]"
                ],
                "numberOfKeys": [
                    "int",
                    "dict",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, Set[str]]",
                    "str",
                    "Dict[str, str]"
                ],
                "items": [
                    "None",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[T]",
                    "str"
                ],
                "child": [
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "index": [
                    "None",
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "BTreeNode.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTreeNode.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTreeNode.addItemAndSplit": {
            "name": "addItemAndSplit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "str",
                    "Callable",
                    "List[Dict]",
                    "bool"
                ],
                "left": [
                    "str",
                    "Callable",
                    "List[Dict]",
                    "bool"
                ],
                "right": [
                    "str",
                    "Callable",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "BTreeNode.getChild": {
            "name": "getChild",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Tuple[int,int,int]",
                    "Tuple[int, int]",
                    "Dict[int, List[Any]]",
                    "List['Photo']"
                ]
            }
        },
        "BTreeNode.setChild": {
            "name": "setChild",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "List[List[int]]"
                ],
                "childIndex": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "BTreeNode.childIndexOf": {
            "name": "childIndexOf",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "anIndex": [
                    "Callable[[KT, VT], bool]",
                    "bool",
                    "float",
                    "T",
                    "bytes"
                ]
            }
        },
        "BTreeNode.clear": {
            "name": "clear",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTreeNode.copyItemsAndChildren": {
            "name": "copyItemsAndChildren",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fromNode": [
                    "float",
                    "str"
                ],
                "start": [
                    "float",
                    "str"
                ],
                "finish": [
                    "float",
                    "str"
                ],
                "index": [
                    "float",
                    "str"
                ]
            }
        },
        "BTreeNode.copyWithRight": {
            "name": "copyWithRight",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aNode": [
                    "list",
                    "bool"
                ],
                "parentNode": [
                    "list",
                    "bool"
                ]
            }
        },
        "BTreeNode.insertItem": {
            "name": "insertItem",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "left": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "right": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "BTreeNode.isFull": {
            "name": "isFull",
            "location": 151,
            "return": [
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTreeNode.removeChild": {
            "name": "removeChild",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BTreeNode.removeItem": {
            "name": "removeItem",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "List[int]",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Dict[str, List]",
                    "Tuple[List, List]"
                ]
            }
        },
        "BTreeNode.searchNode": {
            "name": "searchNode",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "List[List[Any]]",
                    "Iterable[T]",
                    "list",
                    "os.DirEntry",
                    "int",
                    "dict"
                ]
            }
        },
        "BTreeNode.setIndex": {
            "name": "setIndex",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anInteger": [
                    "float",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BTreeNode.setNumberOfKeys": {
            "name": "setNumberOfKeys",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anInt": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "BTree.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degree": [
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "nodes": [],
                "rootIndex": [
                    "int"
                ],
                "freeIndex": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "BTree.__repr__": {
            "name": "__repr__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTree.__str__": {
            "name": "__str__",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTree.delete": {
            "name": "delete",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "List[str]",
                    "List[dict]",
                    "List[int]",
                    "str",
                    "Callable",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BTree.getFreeIndex": {
            "name": "getFreeIndex",
            "location": 240,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTree.getFreeNode": {
            "name": "getFreeNode",
            "location": 245,
            "return": [
                "BTreeNode"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTree.inorderOn": {
            "name": "inorderOn",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aFile": [
                    "str",
                    "os.PathLike",
                    "bytes"
                ]
            }
        },
        "BTree.inorderOnFrom": {
            "name": "inorderOnFrom",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aFile": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "index": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "BTree.insert": {
            "name": "insert",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "BTree.levelByLevel": {
            "name": "levelByLevel",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aFile": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "BTree.readFrom": {
            "name": "readFrom",
            "location": 281,
            "return": [
                "None",
                "Optional[float]",
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "BTree.recycle": {
            "name": "recycle",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aNode": [
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "BTree.retrieve": {
            "name": "retrieve",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "Callable",
                    "bool",
                    "List[Dict]",
                    "list",
                    "Sequence[str]"
                ]
            }
        },
        "BTree.__searchTree": {
            "name": "__searchTree",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "List[List[Any]]",
                    "list",
                    "Callable"
                ]
            }
        },
        "BTree.update": {
            "name": "update",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anItem": [
                    "list",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "BTree.writeAt": {
            "name": "writeAt",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Iterable[float]",
                    "Callable[[T], T]",
                    "Iterable[T]",
                    "str",
                    "Sequence[int]"
                ],
                "aNode": [
                    "int",
                    "Iterable[float]",
                    "Callable[[T], T]",
                    "Iterable[T]",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "Item.__init__": {
            "name": "__init__",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Union[str, int]"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Item.__repr__": {
            "name": "__repr__",
            "location": 603,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.__eq__": {
            "name": "__eq__",
            "location": 606,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "Set[VT]"
                ]
            }
        },
        "Item.__lt__": {
            "name": "__lt__",
            "location": 612,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Item.__gt__": {
            "name": "__gt__",
            "location": 615,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Item.__ge__": {
            "name": "__ge__",
            "location": 618,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Item.getValue": {
            "name": "getValue",
            "location": 621,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.getKey": {
            "name": "getKey",
            "location": 624,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/notes/environment/hello.py": {
        "greet": {
            "name": "greet",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "audience": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/notes/environment/__init__.py": {},
    "aads-class-pub-main/src/notes/graphs/graph.py": {
        "main": {
            "name": "main",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Vertex.key": {
            "name": "key",
            "location": 32,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_neighbor": {
            "name": "get_neighbor",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vertex"
                ]
            }
        },
        "Vertex.set_neighbor": {
            "name": "set_neighbor",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vertex"
                ],
                "weight": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Vertex.neighbors": {
            "name": "neighbors",
            "location": 45,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.distance": {
            "name": "distance",
            "location": 55,
            "return": [
                "",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Vertex.previous": {
            "name": "previous",
            "location": 65,
            "return": [
                "",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Vertex.color": {
            "name": "color",
            "location": 75,
            "return": [
                "",
                "dict[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "set[bytes]",
                "list[]",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Vertex.discovered": {
            "name": "discovered",
            "location": 85,
            "return": [
                "",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Vertex.finalized": {
            "name": "finalized",
            "location": 95,
            "return": [
                "",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Vertex.get_weight": {
            "name": "get_weight",
            "location": 99,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vertex"
                ]
            }
        },
        "Vertex.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__lt__": {
            "name": "__lt__",
            "location": 116,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vertex"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_vertex": {
            "name": "add_vertex",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_vertex": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "to_vertex": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "weight": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Graph.get_vertex": {
            "name": "get_vertex",
            "location": 141,
            "return": [
                "Optional[Vertex]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Graph.get_vertices": {
            "name": "get_vertices",
            "location": 145,
            "return": [
                "dict_keys"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.reset_distances": {
            "name": "reset_distances",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__contains__": {
            "name": "__contains__",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Graph.__iter__": {
            "name": "__iter__",
            "location": 158,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__len__": {
            "name": "__len__",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.bfs": {
            "name": "bfs",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "bool"
                ]
            }
        },
        "Graph.dfs": {
            "name": "dfs",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.dijkstra": {
            "name": "dijkstra",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Vertex"
                ]
            }
        },
        "Graph.traverse": {
            "name": "traverse",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Iterator[bytes]",
                    "typing.Iterator",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "dst": [
                    "Iterator[bytes]",
                    "typing.Iterator",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Graph.read_file": {
            "name": "read_file",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "aads-class-pub-main/src/notes/graphs/mst.py": {
        "kruskal": {
            "name": "kruskal",
            "location": 9,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "g": [
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/anomalycounter/anomalycounter.py": {
        "count": {
            "name": "count",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/anomalycounter/__init__.py": {},
    "aads-class-pub-main/src/projects/classy/classifier.py": {
        "classify": {
            "name": "classify",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "people": [
                    "dict"
                ]
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 18,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/classy/__init__.py": {},
    "aads-class-pub-main/src/projects/compdecomp/huffman.py": {
        "build_tree": {
            "name": "build_tree",
            "location": 38,
            "return": [
                "Node"
            ],
            "arguments": {
                "all_freq": [
                    "dict"
                ]
            }
        },
        "traverse_tree": {
            "name": "traverse_tree",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "Node"
                ]
            }
        },
        "follow_tree": {
            "name": "follow_tree",
            "location": 61,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "tree": [
                    "Node"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "mark_tree": {
            "name": "mark_tree",
            "location": 73,
            "return": [
                "Optional[tuple]"
            ],
            "arguments": {
                "d1": [
                    "dict"
                ],
                "d2": [
                    "dict"
                ],
                "root": [
                    "Node"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "print_codes": {
            "name": "print_codes",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict"
                ],
                "weights": [
                    "dict"
                ]
            }
        },
        "load_codes": {
            "name": "load_codes",
            "location": 99,
            "return": [
                "Node"
            ],
            "arguments": {
                "codes": [
                    "dict"
                ]
            }
        },
        "compress": {
            "name": "compress",
            "location": 110,
            "return": [
                "Tuple[(bytes, int)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "codes": [
                    "dict"
                ]
            }
        },
        "decompress": {
            "name": "decompress",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "bytestream": [
                    "bytes"
                ],
                "padding": [
                    "int"
                ],
                "tree": [
                    "Node"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "weight": [
                    "int"
                ],
                "left": [
                    "int",
                    "None",
                    "List[Tuple[int, float]]",
                    "str",
                    "float",
                    "Tuple[str]",
                    "list[tuple[typing.Union[int,float]]]",
                    "tuple[str]"
                ],
                "right": [
                    "int",
                    "None",
                    "List[Tuple[int, float]]",
                    "str",
                    "float",
                    "Tuple[str]",
                    "list[tuple[typing.Union[int,float]]]",
                    "tuple[str]"
                ]
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/projects/compdecomp/__init__.py": {},
    "aads-class-pub-main/src/projects/convexhull/convexhull.py": {
        "get_convex": {
            "name": "get_convex",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "measure_convex": {
            "name": "measure_convex",
            "location": 23,
            "return": [
                "float"
            ],
            "arguments": {
                "hull_points": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/convexhull/__init__.py": {},
    "aads-class-pub-main/src/projects/exam_strategy/exam_strategy.py": {
        "knapsack": {
            "name": "knapsack",
            "location": 14,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "capacity": [
                    "int"
                ],
                "items": [
                    "List[Item]"
                ]
            }
        },
        "pick_questions_to_answer": {
            "name": "pick_questions_to_answer",
            "location": 26,
            "return": [
                "Tuple[(List[int], int)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/exam_strategy/__init__.py": {},
    "aads-class-pub-main/src/projects/interview/stack.py": {
        "StackError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 43,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 54,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__bool__": {
            "name": "__bool__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__len__": {
            "name": "__len__",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aads-class-pub-main/src/projects/interview/__init__.py": {},
    "aads-class-pub-main/src/projects/lawnmower/lawnmower.py": {
        "evaluate": {
            "name": "evaluate",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/lawnmower/__init__.py": {},
    "aads-class-pub-main/src/projects/subarray/subarray.py": {
        "kadane": {
            "name": "kadane",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "array": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/subarray/__init__.py": {},
    "aads-class-pub-main/src/projects/subway/subway.py": {
        "read_file": {
            "name": "read_file",
            "location": 9,
            "return": [
                "Tuple[(Any, str, str)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "find_routes": {
            "name": "find_routes",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "g": [
                    "str",
                    "bool",
                    "pythonds3.graphs.Graph"
                ],
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aads-class-pub-main/src/projects/subway/__init__.py": {},
    "aads-class-pub-main/src/projects/tictactoe/tic_tac_toe.py": {
        "minimax": {
            "name": "minimax",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "player": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "board": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "depth": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "None",
                    "List[int]",
                    "Collection[T]",
                    "int",
                    "Optional[bytes]",
                    "float",
                    "List[List]",
                    "T"
                ],
                "screen": [
                    "None",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Board.getscreen": {
            "name": "getscreen",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.__getitem__": {
            "name": "__getitem__",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Board.__hash__": {
            "name": "__hash__",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.reset": {
            "name": "reset",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.eval": {
            "name": "eval",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.full": {
            "name": "full",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.drawXOs": {
            "name": "drawXOs",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.available": {
            "name": "available",
            "location": 134,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.clone": {
            "name": "clone",
            "location": 143,
            "return": [
                "Board"
            ],
            "arguments": {
                "self": [
                    "_TBoard"
                ]
            }
        },
        "Dummy.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummy.eval": {
            "name": "eval",
            "location": 160,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummy.goto": {
            "name": "goto",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "X.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "X.eval": {
            "name": "eval",
            "location": 202,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "O.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "O.eval": {
            "name": "eval",
            "location": 218,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToe.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "TicTacToe.buildWindow": {
            "name": "buildWindow",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToe.buildWindow.drawGrid": {
            "name": "drawGrid",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TicTacToe.buildWindow.newGame": {
            "name": "newGame",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TicTacToe.buildWindow.startHandler": {
            "name": "startHandler",
            "location": 298,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TicTacToe.buildWindow.levelHandler": {
            "name": "levelHandler",
            "location": 307,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TicTacToe.buildWindow.quitHandler": {
            "name": "quitHandler",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TicTacToe.buildWindow.computerTurn": {
            "name": "computerTurn",
            "location": 322,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TicTacToe.buildWindow.mouseClick": {
            "name": "mouseClick",
            "location": 342,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "Union[int, bool]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "aads-class-pub-main/src/projects/tictactoe/__init__.py": {},
    "aads-class-pub-main/tests/exercises/avl_tree/test_avl_tree.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 17,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_balance": {
            "name": "test_balance",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_RL_rotation_simple": {
            "name": "test_RL_rotation_simple",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_LR_rotation_simple": {
            "name": "test_LR_rotation_simple",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_L_rotation": {
            "name": "test_L_rotation",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_R_rotation": {
            "name": "test_R_rotation",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_RL_rotation": {
            "name": "test_RL_rotation",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_LR_rotation": {
            "name": "test_LR_rotation",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_rotations": {
            "name": "test_all_rotations",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "nodes": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Callable",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "traversal": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/exercises/binheapmax/test_binheapmax.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 26,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_heapify": {
            "name": "test_heapify",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "pqueue": [
                    "str",
                    "int",
                    "Tuple[int, str]",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        },
        "test_insert": {
            "name": "test_insert",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Callable"
                ],
                "pqueue": [
                    "str",
                    "int",
                    "Tuple[int, str]",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        },
        "test_remove": {
            "name": "test_remove",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "pqueue": [
                    "str",
                    "int",
                    "Tuple[int, str]",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/exercises/bloomfilter/test_bloomfilter.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 26,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "the_bloom_filter": {
            "name": "the_bloom_filter",
            "location": 34,
            "return": [
                "BloomFilter",
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "test_bloomfilter_len": {
            "name": "test_bloomfilter_len",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bloomfilter_small_filter": {
            "name": "test_bloomfilter_small_filter",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "bytes"
                ],
                "typos": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_bloomfilter_medium_filter": {
            "name": "test_bloomfilter_medium_filter",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "pathlib.Path"
                ],
                "typos": [
                    "str",
                    "pathlib.Path"
                ],
                "_": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_bloomfilter_large_filter": {
            "name": "test_bloomfilter_large_filter",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "the_bloom_filter": [
                    "str",
                    "bool"
                ],
                "_": [
                    "str",
                    "bool",
                    "int"
                ],
                "typos": [
                    "str"
                ],
                "expected": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/exercises/dijkstra/test_dijkstra.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 16,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_dijkstra_1": {
            "name": "test_dijkstra_1",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "pathlib.Path"
                ],
                "distance": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_dijkstra_2": {
            "name": "test_dijkstra_2",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "pathlib.Path"
                ],
                "distance": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_dijkstra_3": {
            "name": "test_dijkstra_3",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "pathlib.Path"
                ],
                "distance": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/exercises/hashing/test_hashing.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 32,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_simple_remainder": {
            "name": "test_simple_remainder",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ],
                "size": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ],
                "expected": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "test_mid_square": {
            "name": "test_mid_square",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "size": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_hash_folding": {
            "name": "test_hash_folding",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[pathlib.Path]",
                    "list[pathlib.Path]"
                ],
                "size": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[pathlib.Path]",
                    "list[pathlib.Path]"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[pathlib.Path]",
                    "list[pathlib.Path]"
                ]
            }
        },
        "test_naive_string": {
            "name": "test_naive_string",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "int"
                ],
                "size": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_weighted_string": {
            "name": "test_weighted_string",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "float"
                ],
                "size": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "float"
                ],
                "expected": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "float"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/exercises/partition/test_partition.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 29,
            "return": [
                "generator"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_partition": {
            "name": "test_partition",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "expected": [
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/exercises/trees/test_traversal.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 26,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_traversal": {
            "name": "test_traversal",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inorder": [
                    "str",
                    "float"
                ],
                "postorder": [
                    "str",
                    "float"
                ],
                "preorder": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/notes/environment/test_hello.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 27,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_greet": {
            "name": "test_greet",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "IO",
                    "typing.IO",
                    "Union[bytes, str]",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int",
                    "IO",
                    "typing.IO",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        },
        "test_greet_err": {
            "name": "test_greet_err",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "typing.Callable[typing.Any, None]",
                    "bytes",
                    "Callable[[Any], None]",
                    "int",
                    "str",
                    "dict[, ]",
                    "dict",
                    "Union['Contributor', 'Coverage']"
                ],
                "expected": [
                    "bytes",
                    "Optional[Union[str, Any]]",
                    "int",
                    "dict",
                    "str",
                    "typing.Any",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/anomalycounter/test_anomalycounter.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 28,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_anomalycounter": {
            "name": "test_anomalycounter",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[pathlib.Path, ModuleSummary]",
                    "Dict[pathlib.Path, ModuleSummary]",
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "typing.TextIO",
                    "TextIO"
                ],
                "expected": [
                    "dict[pathlib.Path, ModuleSummary]",
                    "Dict[pathlib.Path, ModuleSummary]",
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "typing.TextIO",
                    "TextIO"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/classy/test_classy.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 27,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_read_file": {
            "name": "test_read_file",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "expected": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_classifier": {
            "name": "test_classifier",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "zoo": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_classy": {
            "name": "test_classy",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "expected": [
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/compdecomp/test_compdecomp.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 28,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ],
                "attribs": [
                    "tuple"
                ]
            }
        },
        "test_build_tree": {
            "name": "test_build_tree",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "total_weight": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_traverse_tree": {
            "name": "test_traverse_tree",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [],
                "tree": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_follow_tree_to_leaf": {
            "name": "test_follow_tree_to_leaf",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "code2char": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_follow_tree_to_none": {
            "name": "test_follow_tree_to_none",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "code2char": [
                    "str",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_mark_tree": {
            "name": "test_mark_tree",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "int"
                ],
                "char2code": [
                    "str"
                ],
                "code2char": [
                    "str"
                ]
            }
        },
        "test_load_codes": {
            "name": "test_load_codes",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "tree": [
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "test_compression": {
            "name": "test_compression",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "padding": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "test_decompression": {
            "name": "test_decompression",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "text": [
                    "bytes",
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/convexhull/test_convexhull.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 29,
            "return": [
                "generator"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_convex_points": {
            "name": "test_convex_points",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "points": [
                    "pathlib.Path"
                ]
            }
        },
        "test_first_point": {
            "name": "test_first_point",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "last": []
            }
        },
        "test_convex_length": {
            "name": "test_convex_length",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "length": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/exam_strategy/test_exam_strategy.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 29,
            "return": [
                "generator"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_selection": {
            "name": "test_selection",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "selected": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_total_value": {
            "name": "test_total_value",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "total_val": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/interview/test_stack.py": {
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_push": {
            "name": "test_push",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "str",
                    "list[list[typing.Any]]",
                    "bool",
                    "List[List[Any]]",
                    "Callable"
                ]
            }
        },
        "test_pop": {
            "name": "test_pop",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "list[int]",
                    "int",
                    "list[]",
                    "List[int]",
                    "list",
                    "Sequence[str]"
                ],
                "result": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_pop_error": {
            "name": "test_pop_error",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "bool"
                ]
            }
        },
        "test_peek": {
            "name": "test_peek",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "list[int]",
                    "int",
                    "list[]",
                    "List[int]",
                    "list",
                    "Sequence[str]"
                ],
                "result": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_peek_error": {
            "name": "test_peek_error",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool": {
            "name": "test_bool",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "str",
                    "dict[, ]",
                    "Callable[..., None]",
                    "dict",
                    "int",
                    "Literal"
                ],
                "num": [
                    "str",
                    "bool",
                    "int"
                ],
                "result": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "bool",
                    "Optional[float]",
                    "Sequence[str]",
                    "Sequence",
                    "Literal"
                ],
                "size": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_operations": {
            "name": "test_operations",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "list[]",
                    "int",
                    "Callable",
                    "list",
                    "Optional[int]",
                    "Sequence[str]",
                    "bool"
                ],
                "result": [
                    "typing.Iterable[typing.Iterable[str]]",
                    "bool",
                    "Iterable[Iterable[str]]",
                    "int",
                    "list"
                ],
                "size": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/lawnmower/test_lawnmower.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 16,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_evaluate": {
            "name": "test_evaluate",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data_file": [
                    "str",
                    "Optional[pathlib.Path]",
                    "None",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "expected_file": [
                    "str",
                    "Sequence[str]",
                    "IO[Any]",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/subarray/test_subarray.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 17,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "test_classy": {
            "name": "test_classy",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "IO",
                    "typing.IO",
                    "Union[bytes, str]",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int",
                    "IO",
                    "typing.IO",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/subway/test_subway.py": {
        "test_subway": {
            "name": "test_subway",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "expected": [
                    "Tuple[int, int]",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "aads-class-pub-main/tests/projects/tictactoe/test_tictactoe.py": {
        "get_cases": {
            "name": "get_cases",
            "location": 29,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "category": [
                    "str"
                ]
            }
        },
        "board0": {
            "name": "board0",
            "location": 37,
            "return": [
                "Board",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "board1": {
            "name": "board1",
            "location": 49,
            "return": [
                "Board",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "board2": {
            "name": "board2",
            "location": 54,
            "return": [
                "Board",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "board3": {
            "name": "board3",
            "location": 66,
            "return": [
                "Board",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "board4": {
            "name": "board4",
            "location": 78,
            "return": [
                "Board",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_board_eq_01": {
            "name": "test_board_eq_01",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "board0": [
                    "str",
                    "float"
                ],
                "board1": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_eq_12": {
            "name": "test_board_eq_12",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "board1": [
                    "str",
                    "float"
                ],
                "board2": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_eq_23": {
            "name": "test_board_eq_23",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "board2": [
                    "str",
                    "float"
                ],
                "board3": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_eq_34": {
            "name": "test_board_eq_34",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "board3": [
                    "str",
                    "float"
                ],
                "board4": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_eval_1": {
            "name": "test_board_eval_1",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "board1": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_eval_2": {
            "name": "test_board_eval_2",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "board2": [
                    "str",
                    "float"
                ],
                "board3": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_eval_4": {
            "name": "test_board_eval_4",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "board4": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_full_1": {
            "name": "test_board_full_1",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "board1": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_full_2": {
            "name": "test_board_full_2",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "board2": [
                    "str",
                    "float"
                ],
                "board3": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_full_4": {
            "name": "test_board_full_4",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "board4": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_board_avail_1": {
            "name": "test_board_avail_1",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "board1": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_avail_2": {
            "name": "test_board_avail_2",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "board2": [
                    "str",
                    "float"
                ],
                "board3": [
                    "str",
                    "float"
                ]
            }
        },
        "test_board_avail_4": {
            "name": "test_board_avail_4",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "board4": [
                    "str",
                    "float"
                ]
            }
        },
        "test_minimax_0c": {
            "name": "test_minimax_0c",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board0": []
            }
        },
        "test_minimax_0h": {
            "name": "test_minimax_0h",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board0": [
                    "str",
                    "float"
                ]
            }
        },
        "test_minimax_2c": {
            "name": "test_minimax_2c",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board3": []
            }
        },
        "test_minimax_2h": {
            "name": "test_minimax_2h",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board3": [
                    "str",
                    "float"
                ]
            }
        },
        "test_minimax_4c": {
            "name": "test_minimax_4c",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board4": []
            }
        },
        "test_minimax_4h": {
            "name": "test_minimax_4h",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board4": [
                    "str",
                    "float"
                ]
            }
        },
        "test_minimax_param": {
            "name": "test_minimax_param",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "board": [
                    "Mapping[str, Any]",
                    "bool",
                    "typing.Mapping"
                ],
                "evaluation": [
                    "str",
                    "float"
                ]
            }
        }
    }
}
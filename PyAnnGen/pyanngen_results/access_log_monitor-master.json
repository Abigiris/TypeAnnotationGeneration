{
    "access_log_monitor-master/conftest.py": {
        "project_root": {
            "name": "project_root",
            "location": 7,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "sample_log_path": {
            "name": "sample_log_path",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "project_root": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_analyzer.py": {
        "LogAnalyzer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datastore": [
                    "Optional[access_log_monitor.log_store.LogStore]"
                ]
            }
        },
        "LogAnalyzer.requests_per_second": {
            "name": "requests_per_second",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "_datetime.datetime"
                ],
                "current_time": [
                    "Optional[_datetime.datetime]"
                ]
            }
        },
        "LogAnalyzer.report": {
            "name": "report",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "_datetime.datetime"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_analyzer_test.py": {
        "test_requests_per_second_returns_zero_if_interval_too_short": {
            "name": "test_requests_per_second_returns_zero_if_interval_too_short",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_requests_per_second_returns_zero_if_no_hits_over_interval": {
            "name": "test_requests_per_second_returns_zero_if_no_hits_over_interval",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_requests_per_second_returns_value_rounded_to_tenths_place": {
            "name": "test_requests_per_second_returns_value_rounded_to_tenths_place",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_deque.py": {
        "LogDeque.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "Optional[list]"
                ]
            }
        },
        "LogDeque.add": {
            "name": "add",
            "location": 19,
            "return": [
                "LogDeque"
            ],
            "arguments": {
                "self": [
                    "_TLogDeque"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ],
                "entry": [
                    "access_log_monitor.log_line.LogLine"
                ]
            }
        },
        "LogDeque.peek": {
            "name": "peek",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "since_time": [
                    "_datetime.datetime"
                ]
            }
        },
        "LogDeque.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogDeque.__iter__": {
            "name": "__iter__",
            "location": 59,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_deque_test.py": {
        "test_peek_returns_all_entries_since_given_time": {
            "name": "test_peek_returns_all_entries_since_given_time",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_peek_returns_empty_list_if_no_entries_match": {
            "name": "test_peek_returns_empty_list_if_no_entries_match",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_inserts_in_descending_chrono_order_when_inserted_in_desc_order": {
            "name": "test_add_inserts_in_descending_chrono_order_when_inserted_in_desc_order",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_inserts_in_descending_chrono_order_when_inserted_in_asc_order": {
            "name": "test_add_inserts_in_descending_chrono_order_when_inserted_in_asc_order",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_inserts_in_descending_chrono_order_when_inserted_in_mixed_order": {
            "name": "test_add_inserts_in_descending_chrono_order_when_inserted_in_mixed_order",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "access_log_monitor-master/access_log_monitor/log_entry_format.py": {},
    "access_log_monitor-master/access_log_monitor/log_line.py": {
        "LogLine.site_section": {
            "name": "site_section",
            "location": 22,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogLine.from_log_line": {
            "name": "from_log_line",
            "location": 30,
            "return": [
                "Optional[LogLine]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Dict[str, Iterable[Any]]"
                ],
                "log_line": [
                    "str"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_line_test.py": {
        "test_site_section_parses_base_path": {
            "name": "test_site_section_parses_base_path",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_site_section_returns_empty_string_if_parse_fails": {
            "name": "test_site_section_returns_empty_string_if_parse_fails",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "access_log_monitor-master/access_log_monitor/log_manager.py": {
        "LogManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LogManager.last_entry": {
            "name": "last_entry",
            "location": 19,
            "return": [
                "str",
                "Type",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogManager.last_updated_at": {
            "name": "last_updated_at",
            "location": 25,
            "return": [
                "float",
                "MutableMapping[str, Any]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogManager.has_been_updated": {
            "name": "has_been_updated",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_manager_test.py": {
        "test_constructor_raises_if_file_doesnt_exist": {
            "name": "test_constructor_raises_if_file_doesnt_exist",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_entry": {
            "name": "test_last_entry",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_log_path": [
                    "str"
                ]
            }
        },
        "test_last_updated_at_returns_rounded_unix_epoch_time": {
            "name": "test_last_updated_at_returns_rounded_unix_epoch_time",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_log_path": [
                    "str"
                ]
            }
        },
        "test_has_been_updated_returns_true_if_theres_been_update": {
            "name": "test_has_been_updated_returns_true_if_theres_been_update",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_been_updated_returns_false_if_log_hasnt_been_updated": {
            "name": "test_has_been_updated_returns_false_if_log_hasnt_been_updated",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitor.py": {
        "perform_monitoring": {
            "name": "perform_monitoring",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "access_log_monitor.log_manager.LogManager"
                ],
                "datastore": [
                    "access_log_monitor.log_store.LogStore"
                ],
                "analyzer": [
                    "access_log_monitor.log_analyzer.LogAnalyzer"
                ],
                "monitors": [
                    "List[access_log_monitor.log_monitors.log_monitor.LogMonitor]"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitor_test.py": {
        "test_interval_statistics": {
            "name": "test_interval_statistics",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_high_traffic_alerting": {
            "name": "test_high_traffic_alerting",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ],
                "project_root": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_return_to_normal_traffic_alerting": {
            "name": "test_return_to_normal_traffic_alerting",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "float"
                ],
                "project_root": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_store.py": {
        "LogStore.add": {
            "name": "add",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "Optional[access_log_monitor.log_line.LogLine]"
                ]
            }
        },
        "LogStore.peek": {
            "name": "peek",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "_datetime.datetime"
                ]
            }
        },
        "DequeDataStore.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DequeDataStore.add": {
            "name": "add",
            "location": 39,
            "return": [
                "DequeDataStore"
            ],
            "arguments": {
                "self": [
                    "_TDequeDataStore"
                ],
                "entry": [
                    "Optional[access_log_monitor.log_line.LogLine]"
                ]
            }
        },
        "DequeDataStore.peek": {
            "name": "peek",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "_datetime.datetime"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_store_test.py": {
        "test_adding_non_loglines_is_a_no_op": {
            "name": "test_adding_non_loglines_is_a_no_op",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adding_an_entry_parses_date": {
            "name": "test_adding_an_entry_parses_date",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "access_log_monitor-master/access_log_monitor/log_utils.py": {
        "read_last_line": {
            "name": "read_last_line",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "most_common_by": {
            "name": "most_common_by",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "value_of": [
                    "Callable"
                ],
                "collection": [
                    "Collection"
                ]
            }
        },
        "percent": {
            "name": "percent",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "predicate": [
                    "Callable[([Any], bool)]"
                ],
                "collection": [
                    "Collection"
                ]
            }
        },
        "now_utc": {
            "name": "now_utc",
            "location": 52,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "is_interval_complete": {
            "name": "is_interval_complete",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "start_time": [
                    "_datetime.datetime"
                ],
                "delta": [
                    "_datetime.timedelta"
                ],
                "current_time": [
                    "_datetime.datetime"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_utils_test.py": {
        "test_read_last_line_returns_the_last_line_as_string": {
            "name": "test_read_last_line_returns_the_last_line_as_string",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_read_last_line_fails_with_empty_string": {
            "name": "test_read_last_line_fails_with_empty_string",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_most_common_by_counts_by_given_callable_result": {
            "name": "test_most_common_by_counts_by_given_callable_result",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_most_common_by_returns_first_by_insertion_if_ordered_and_no_winner": {
            "name": "test_most_common_by_returns_first_by_insertion_if_ordered_and_no_winner",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_percent_computes_percents_correctly_by_predicate": {
            "name": "test_percent_computes_percents_correctly_by_predicate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_now_utc_abbreviates_microseconds": {
            "name": "test_now_utc_abbreviates_microseconds",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_now_utc_sets_values_with_kwargs": {
            "name": "test_now_utc_sets_values_with_kwargs",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_is_interval_complete_returns_false_if_not": {
            "name": "test_is_interval_complete_returns_false_if_not",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_is_interval_complete_returns_true_if_it_is": {
            "name": "test_is_interval_complete_returns_true_if_it_is",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "access_log_monitor-master/access_log_monitor/__init__.py": {},
    "access_log_monitor-master/access_log_monitor/log_monitors/alerting_monitor.py": {
        "AlertingMonitor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold_rps": [
                    "int"
                ],
                "interval_sec": [
                    "int"
                ]
            }
        },
        "AlertingMonitor.process": {
            "name": "process",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "access_log_monitor.log_analyzer.LogAnalyzer"
                ]
            }
        },
        "AlertingMonitor.__trigger_alert": {
            "name": "__trigger_alert",
            "location": 40,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "curr_time": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "avg_reqs_per_sec": [
                    "int",
                    "float"
                ]
            }
        },
        "AlertingMonitor.__recover_from_alert": {
            "name": "__recover_from_alert",
            "location": 58,
            "return": [
                "None",
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "curr_time": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitors/alerting_monitor_test.py": {
        "test_process_alerts_if_unalerted_and_over_threshold_rps": {
            "name": "test_process_alerts_if_unalerted_and_over_threshold_rps",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_process_no_ops_if_unalerted_and_below_threshold_rps": {
            "name": "test_process_no_ops_if_unalerted_and_below_threshold_rps",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_process_recovers_if_alerted_and_below_threshold_rps": {
            "name": "test_process_recovers_if_alerted_and_below_threshold_rps",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_process_no_ops_if_alerted_and_above_threshold_rps": {
            "name": "test_process_no_ops_if_alerted_and_above_threshold_rps",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitors/log_monitor.py": {
        "LogMonitor.process": {
            "name": "process",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "access_log_monitor.log_analyzer.LogAnalyzer"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitors/reporting_monitor.py": {
        "ReportingMonitor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval_sec": [
                    "int"
                ]
            }
        },
        "ReportingMonitor.process": {
            "name": "process",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "access_log_monitor.log_analyzer.LogAnalyzer"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitors/reporting_monitor_test.py": {
        "test_process_prints_summary_at_end_of_each_interval": {
            "name": "test_process_prints_summary_at_end_of_each_interval",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "capsys": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "access_log_monitor-master/access_log_monitor/log_monitors/__init__.py": {},
    "access_log_monitor-master/util/log_writer.py": {
        "reset_log": {
            "name": "reset_log",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "logfile": [
                    "str",
                    "List[Tuple[int]]",
                    "os.PathLike",
                    "int",
                    "IO[Any]"
                ]
            }
        },
        "generate_entry": {
            "name": "generate_entry",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "write_entry_to_log": {
            "name": "write_entry_to_log",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [
                    "bool",
                    "bytes",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "str",
                    "tuple[typing.Union[int,slice,int,slice]]"
                ],
                "logfile": [
                    "str",
                    "list",
                    "float",
                    "Tuple[FrozenSet[int]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "random_sleep": {
            "name": "random_sleep",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
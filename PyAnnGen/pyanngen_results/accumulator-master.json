{
    "accumulator-master/accumulator.py": {},
    "accumulator-master/exceptions.py": {},
    "accumulator-master/providers/base.py": {
        "BaseProvider.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ]
            }
        }
    },
    "accumulator-master/providers/bitbucket.py": {},
    "accumulator-master/providers/github.py": {},
    "accumulator-master/providers/gitlab.py": {},
    "accumulator-master/providers/__init__.py": {
        "get_provider_class": {
            "name": "get_provider_class",
            "location": 11,
            "return": [
                "Type[providers.base.BaseProvider]"
            ],
            "arguments": {
                "resource_name": [
                    "str"
                ]
            }
        },
        "get_provider": {
            "name": "get_provider",
            "location": 19,
            "return": [
                "providers.base.BaseProvider"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "accumulator-master/tests/test__providers__general.py": {
        "github_repo_strings": {
            "name": "github_repo_strings",
            "location": 10,
            "return": [
                "list[typing.Text]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "repo_strings": {
            "name": "repo_strings",
            "location": 19,
            "return": [
                "str",
                "Union[List[str], List[Any]]",
                "dict",
                "bool",
                "typing.Pattern",
                "set[str]",
                "bytes",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "github_repo_strings": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[str, Pattern[str]]",
                    "typing.Pattern",
                    "Set[str]",
                    "set[str]",
                    "Optional[bytes]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "invalid_repo_strings": {
            "name": "invalid_repo_strings",
            "location": 24,
            "return": [
                "list[typing.Text]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test__get_provider__returns_provider": {
            "name": "test__get_provider__returns_provider",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_strings": [
                    "str",
                    "bool"
                ]
            }
        },
        "test__get_provider__raises_exception_on_invalid": {
            "name": "test__get_provider__raises_exception_on_invalid",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_repo_strings": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "accumulator-master/tests/test__providers__github.py": {},
    "accumulator-master/tests/__init__.py": {},
    "accumulator-master/utils/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "Parser.get_parsed": {
            "name": "get_parsed",
            "location": 40,
            "return": [
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 57,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._get_protocols": {
            "name": "_get_protocols",
            "location": 123,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "accumulator-master/utils/__init__.py": {}
}
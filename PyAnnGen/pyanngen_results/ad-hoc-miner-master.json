{
    "ad-hoc-miner-master/setup.py": {},
    "ad-hoc-miner-master/vocabulary.py": {},
    "ad-hoc-miner-master/sensibility/lexical_analysis.py": {
        "Lexeme.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexeme.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexeme.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__eq__": {
            "name": "__eq__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "Position.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Location.spans_single_line": {
            "name": "spans_single_line",
            "location": 95,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.column": {
            "name": "column",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.line": {
            "name": "line",
            "location": 133,
            "return": [
                "Type[T]",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.lines": {
            "name": "lines",
            "location": 140,
            "return": [
                "typing.Iterator[builtins.int]",
                "typing.Generator[range]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.location": {
            "name": "location",
            "location": 147,
            "return": [
                "tuple",
                "Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.loc": {
            "name": "loc",
            "location": 154,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.spans_single_line": {
            "name": "spans_single_line",
            "location": 161,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Type[BaseException]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ad-hoc-miner-master/sensibility/__init__.py": {},
    "ad-hoc-miner-master/sensibility/language/python.py": {
        "is_physical_token": {
            "name": "is_physical_token",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "sensibility.lexical_analysis.Lexeme"
                ]
            }
        },
        "open_closed_tokens": {
            "name": "open_closed_tokens",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "token": [
                    "sensibility.lexical_analysis.Lexeme"
                ]
            }
        },
        "Python.tokenize": {
            "name": "tokenize",
            "location": 39,
            "return": [
                "Sequence[sensibility.lexical_analysis.Token]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes])]"
                ]
            }
        },
        "Python.check_syntax": {
            "name": "check_syntax",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Python.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 112,
            "return": [
                "sensibility.language.SourceSummary"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "Python.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 135,
            "return": [
                "Iterable[Tuple[(sensibility.lexical_analysis.Location, str)]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "Python.tokenize.open_as_file": {
            "name": "open_as_file",
            "location": 60,
            "return": [
                "str",
                "BytesIO"
            ],
            "arguments": {}
        }
    },
    "ad-hoc-miner-master/sensibility/language/__init__.py": {
        "Language.id": {
            "name": "id",
            "location": 54,
            "return": [
                "str",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.name": {
            "name": "name",
            "location": 58,
            "return": [
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.matches_extension": {
            "name": "matches_extension",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, os.PathLike)]"
                ]
            }
        },
        "Language.summarize": {
            "name": "summarize",
            "location": 77,
            "return": [
                "SourceSummary"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes], Iterable[sensibility.lexical_analysis.Token])]"
                ]
            }
        },
        "Language.vocabularize": {
            "name": "vocabularize",
            "location": 85,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes], Iterable[sensibility.lexical_analysis.Token])]"
                ]
            }
        },
        "Language.vocabularize_with_locations": {
            "name": "vocabularize_with_locations",
            "location": 93,
            "return": [
                "Iterable[Tuple[(sensibility.lexical_analysis.Location, str)]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes], Iterable[sensibility.lexical_analysis.Token])]"
                ]
            }
        },
        "Language.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.tokenize": {
            "name": "tokenize",
            "location": 108,
            "return": [
                "Iterable[sensibility.lexical_analysis.Token]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes])]"
                ]
            }
        },
        "Language.check_syntax": {
            "name": "check_syntax",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Language.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 114,
            "return": [
                "SourceSummary"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "Language.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 117,
            "return": [
                "Iterable[Tuple[(sensibility.lexical_analysis.Location, str)]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "Language._as_tokens": {
            "name": "_as_tokens",
            "location": 124,
            "return": [
                "Iterable[sensibility.lexical_analysis.Token]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes], Iterable[sensibility.lexical_analysis.Token])]"
                ]
            }
        },
        "LanguageProxy.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.is_initialized": {
            "name": "is_initialized",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.wrapped_language": {
            "name": "wrapped_language",
            "location": 162,
            "return": [
                "int",
                "typing.Literal",
                "Callable",
                "str",
                "dict[str, typing.Type]",
                "dict[str, str]",
                "set[]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.__getattr__": {
            "name": "__getattr__",
            "location": 171,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LanguageProxy.set_language": {
            "name": "set_language",
            "location": 181,
            "return": [
                "LanguageProxy"
            ],
            "arguments": {
                "self": [
                    "_TLanguageProxy"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "LanguageProxy.determine_language": {
            "name": "determine_language",
            "location": 188,
            "return": [
                "Language"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.load_langauge_by_name": {
            "name": "load_langauge_by_name",
            "location": 203,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LanguageProxy.name": {
            "name": "name",
            "location": 218,
            "return": [
                "str",
                "Dict[str, str]",
                "list",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.tokenize": {
            "name": "tokenize",
            "location": 221,
            "return": [
                "Iterable[sensibility.lexical_analysis.Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.check_syntax": {
            "name": "check_syntax",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 227,
            "return": [
                "SourceSummary"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 230,
            "return": [
                "Iterable[Tuple[(sensibility.lexical_analysis.Location, str)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ad-hoc-miner-master/sensibility/language/javascript/__init__.py": {
        "synthetic_file": {
            "name": "synthetic_file",
            "location": 106,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "source": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "_tokenize": {
            "name": "_tokenize",
            "location": 120,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "file_obj": [
                    "IO[bytes]"
                ]
            }
        },
        "from_esprima_format": {
            "name": "from_esprima_format",
            "location": 130,
            "return": [
                "sensibility.lexical_analysis.Token"
            ],
            "arguments": {
                "token": []
            }
        },
        "JavaScript.tokenize": {
            "name": "tokenize",
            "location": 41,
            "return": [
                "Sequence[sensibility.lexical_analysis.Token]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes])]"
                ]
            }
        },
        "JavaScript.check_syntax": {
            "name": "check_syntax",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "JavaScript.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 66,
            "return": [
                "sensibility.language.SourceSummary"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "JavaScript.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 73,
            "return": [
                "Iterable[Tuple[(sensibility.lexical_analysis.Location, str)]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "SafeSourceFile.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Union[(bytes, str, IO[bytes])]"
                ]
            }
        },
        "SafeSourceFile.__enter__": {
            "name": "__enter__",
            "location": 89,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafeSourceFile.__exit__": {
            "name": "__exit__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringifyLexeme.__call__": {
            "name": "__call__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "StringifyLexeme.Boolean": {
            "name": "Boolean",
            "location": 180,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_T0"
                ]
            }
        },
        "StringifyLexeme.Identifier": {
            "name": "Identifier",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Keyword": {
            "name": "Keyword",
            "location": 186,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_T0"
                ]
            }
        },
        "StringifyLexeme.Null": {
            "name": "Null",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Numeric": {
            "name": "Numeric",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Punctuator": {
            "name": "Punctuator",
            "location": 195,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_T0"
                ]
            }
        },
        "StringifyLexeme.String": {
            "name": "String",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.RegularExpression": {
            "name": "RegularExpression",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Template": {
            "name": "Template",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/connection.py": {
        "get_sqlite3_path": {
            "name": "get_sqlite3_path",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_sqlite3_connection": {
            "name": "get_sqlite3_connection",
            "location": 53,
            "return": [
                "sqlite3.dbapi2.Connection"
            ],
            "arguments": {}
        },
        "github_token": {
            "name": "github_token",
            "location": 66,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "ad-hoc-miner-master/sensibility/miner/corpus.py": {
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mappings": [
                    "Set[sensibility.miner.models.SourceFileInRepository]"
                ],
                "summary": [
                    "sensibility.language.SourceSummary"
                ]
            }
        },
        "FileInfo.filehash": {
            "name": "filehash",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.owner": {
            "name": "owner",
            "location": 58,
            "return": [
                "bool",
                "Iterable[str]",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.name": {
            "name": "name",
            "location": 62,
            "return": [
                "str",
                "Type",
                "zerver.models.Realm",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.href": {
            "name": "href",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.license": {
            "name": "license",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.path": {
            "name": "path",
            "location": 74,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.n_tokens": {
            "name": "n_tokens",
            "location": 78,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.sloc": {
            "name": "sloc",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.is_unique": {
            "name": "is_unique",
            "location": 86,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo._any": {
            "name": "_any",
            "location": 90,
            "return": [
                "Callable",
                "List[int]",
                "app.models.Article",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "url": [
                    "str"
                ],
                "read_only": [
                    "bool",
                    "str",
                    "bytes",
                    "Sequence[Sequence[Any]]",
                    "Optional[str]",
                    "Union[models.address.ZipCode, str]"
                ]
            }
        },
        "Corpus.language": {
            "name": "language",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.empty": {
            "name": "empty",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__getitem__": {
            "name": "__getitem__",
            "location": 130,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str"
                ]
            }
        },
        "Corpus.set_metadata": {
            "name": "set_metadata",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.insert_repository": {
            "name": "insert_repository",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "sensibility.miner.models.RepositoryMetadata"
                ]
            }
        },
        "Corpus.insert_source_file_from_repo": {
            "name": "insert_source_file_from_repo",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "sensibility.miner.models.SourceFileInRepository"
                ]
            }
        },
        "Corpus.insert_source_summary": {
            "name": "insert_source_summary",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str"
                ],
                "summary": [
                    "sensibility.language.SourceSummary"
                ]
            }
        },
        "Corpus.insert_failure": {
            "name": "insert_failure",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str"
                ]
            }
        },
        "Corpus.get_source": {
            "name": "get_source",
            "location": 189,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str"
                ]
            }
        },
        "Corpus.get_info": {
            "name": "get_info",
            "location": 198,
            "return": [
                "FileInfo"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str"
                ]
            }
        },
        "Corpus._initialize_sqlite3": {
            "name": "_initialize_sqlite3",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "read_only": [
                    "bool"
                ]
            }
        },
        "Corpus._initialize_sqlite3.set_sqlite_pragma": {
            "name": "set_sqlite_pragma",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dbapi_connection": [
                    "str",
                    "int",
                    "float"
                ],
                "_connection_record": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/downloader.py": {
        "clean_path": {
            "name": "clean_path",
            "location": 258,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "coerce_to_bytes": {
            "name": "coerce_to_bytes",
            "location": 267,
            "return": [
                "bytes"
            ],
            "arguments": {
                "thing": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Downloader.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.loop_forever": {
            "name": "loop_forever",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.get_a_job": {
            "name": "get_a_job",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.acknowledge": {
            "name": "acknowledge",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str"
                ]
            }
        },
        "Downloader.do_job": {
            "name": "do_job",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str"
                ]
            }
        },
        "Downloader.download": {
            "name": "download",
            "location": 106,
            "return": [
                "Iterator[sensibility.miner.models.SourceFileInRepository]"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "sensibility.miner.models.RepositoryMetadata"
                ]
            }
        },
        "Downloader.log_error": {
            "name": "log_error",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str"
                ]
            }
        },
        "Downloader.insert_repository": {
            "name": "insert_repository",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "sensibility.miner.models.RepositoryMetadata"
                ]
            }
        },
        "Downloader.insert_source_file": {
            "name": "insert_source_file",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "sensibility.miner.models.SourceFileInRepository"
                ]
            }
        },
        "Downloader.extract_sources": {
            "name": "extract_sources",
            "location": 139,
            "return": [
                "Iterator[Tuple[(pathlib.PurePosixPath, bytes)]]"
            ],
            "arguments": {
                "self": [],
                "archive": [
                    "zipfile.ZipFile"
                ]
            }
        },
        "Downloader.zip_url_for": {
            "name": "zip_url_for",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "repo": [
                    "sensibility.miner.models.RepositoryMetadata"
                ]
            }
        },
        "GitHubGraphQLClient.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubGraphQLClient.fetch_repository": {
            "name": "fetch_repository",
            "location": 168,
            "return": [
                "sensibility.miner.models.RepositoryMetadata"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "sensibility.miner.models.RepositoryID"
                ]
            }
        },
        "GitHubGraphQLClient.query": {
            "name": "query",
            "location": 205,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "GitHubGraphQLClient.update_rate_limit": {
            "name": "update_rate_limit",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "requests.models.Response"
                ]
            }
        },
        "GitHubGraphQLClient.ratelimit_reset": {
            "name": "ratelimit_reset",
            "location": 239,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubGraphQLClient.seconds_until_reset": {
            "name": "seconds_until_reset",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubGraphQLClient.wait_for_rate_limit": {
            "name": "wait_for_rate_limit",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/models.py": {
        "RepositoryID.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepositoryID.parse": {
            "name": "parse",
            "location": 57,
            "return": [
                "RepositoryID"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRepositoryID]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "SourceFile.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes"
                ]
            }
        },
        "SourceFile.filehash": {
            "name": "filehash",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFile.__repr__": {
            "name": "__repr__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSourceFile.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str"
                ]
            }
        },
        "MockSourceFile.source": {
            "name": "source",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSourceFile.filehash": {
            "name": "filehash",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.owner": {
            "name": "owner",
            "location": 111,
            "return": [
                "bool",
                "Iterable[str]",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.name": {
            "name": "name",
            "location": 115,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.filehash": {
            "name": "filehash",
            "location": 119,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.revision": {
            "name": "revision",
            "location": 123,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.license": {
            "name": "license",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.href": {
            "name": "href",
            "location": 131,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/names.py": {
        "WithErrors.errors": {
            "name": "errors",
            "location": 31,
            "return": [
                "typing.Text",
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueName.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "WorkQueueName.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "queue_id": [
                    "uuid.UUID"
                ]
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/rate_limit.py": {
        "wait_for_rate_limit": {
            "name": "wait_for_rate_limit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "resource": [
                    "bytes",
                    "typing.Text"
                ]
            }
        },
        "seconds_until": {
            "name": "seconds_until",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/rqueue.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "client": [
                    "redis.client.Redis"
                ]
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "AnyStr"
                ]
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__lshift__": {
            "name": "__lshift__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AnyStr"
                ]
            }
        },
        "Queue.__rshift__": {
            "name": "__rshift__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Queue"
                ]
            }
        },
        "Queue.__iter__": {
            "name": "__iter__",
            "location": 48,
            "return": [
                "listiterator[Union[(bytes, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.clear": {
            "name": "clear",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.remove": {
            "name": "remove",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "AnyStr"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Queue.transfer": {
            "name": "transfer",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Queue"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "WorkQueue.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "Queue"
                ]
            }
        },
        "WorkQueue.name": {
            "name": "name",
            "location": 69,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueue.get": {
            "name": "get",
            "location": 72,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "WorkQueue.acknowledge": {
            "name": "acknowledge",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "AnyStr"
                ]
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/util.py": {
        "filehashes": {
            "name": "filehashes",
            "location": 26,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/_schema.py": {
        "_to": {
            "name": "_to",
            "location": 50,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "ad-hoc-miner-master/sensibility/miner/__init__.py": {},
    "ad-hoc-miner-master/stubs/github3.py": {
        "login": {
            "name": "login",
            "location": 14,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "GitHub.search_repositories": {
            "name": "search_repositories",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "sort": []
            }
        },
        "GitHub.rate_limit": {
            "name": "rate_limit",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ad-hoc-miner-master/stubs/lazy_object_proxy.py": {
        "Proxy": {
            "name": "Proxy",
            "location": 4,
            "return": [],
            "arguments": {
                "factory": []
            }
        }
    },
    "ad-hoc-miner-master/stubs/redis.py": {
        "Redis.lpush": {
            "name": "lpush",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.rpop": {
            "name": "rpop",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.delete": {
            "name": "delete",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.brpoplpush": {
            "name": "brpoplpush",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "dest": [],
                "timeout": []
            }
        },
        "StrictRedis.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "StrictRedis.lrem": {
            "name": "lrem",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "count": [],
                "value": []
            }
        }
    },
    "ad-hoc-miner-master/stubs/dateutil/__init__.py": {},
    "ad-hoc-miner-master/stubs/dateutil/parser/__init__.py": {
        "parse": {
            "name": "parse",
            "location": 3,
            "return": [],
            "arguments": {
                "timestr": []
            }
        }
    },
    "ad-hoc-miner-master/tests/location_factory.py": {
        "LocationFactory.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "sensibility.lexical_analysis.Position"
                ]
            }
        },
        "LocationFactory.across": {
            "name": "across",
            "location": 11,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ]
            }
        },
        "LocationFactory.until": {
            "name": "until",
            "location": 16,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": [],
                "end": [
                    "sensibility.lexical_analysis.Position"
                ]
            }
        },
        "LocationFactory.single": {
            "name": "single",
            "location": 21,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationFactory.newline": {
            "name": "newline",
            "location": 24,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationFactory.next_line": {
            "name": "next_line",
            "location": 29,
            "return": [
                "LocationFactory"
            ],
            "arguments": {
                "self": [
                    "_TLocationFactory"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "LocationFactory.space": {
            "name": "space",
            "location": 33,
            "return": [
                "LocationFactory"
            ],
            "arguments": {
                "self": [
                    "_TLocationFactory"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "ad-hoc-miner-master/tests/test_corpus.py": {
        "test_create": {
            "name": "test_create",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": []
            }
        },
        "test_insert_source_summary": {
            "name": "test_insert_source_summary",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_corpus": [
                    "str",
                    "pathlib.Path"
                ],
                "repo_file": [
                    "pathlib.Path"
                ]
            }
        },
        "test_insert_and_retrieve": {
            "name": "test_insert_and_retrieve",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[pathlib.Path]"
                ],
                "source_file": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "test_metadata": {
            "name": "test_metadata",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "test_insert_duplicate": {
            "name": "test_insert_duplicate",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "sensibility.miner.corpus.Corpus"
                ],
                "repo_file": [
                    "sensibility.miner.models.SourceFileInRepository"
                ]
            }
        },
        "source_file": {
            "name": "source_file",
            "location": 80,
            "return": [
                "SourceFile",
                "str",
                "Sequence[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "Optional[pathlib.Path]",
                "List[str]",
                "pathlib.PosixPath"
            ],
            "arguments": {}
        },
        "repo_file": {
            "name": "repo_file",
            "location": 87,
            "return": [
                "SourceFileInRepository",
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "repository": {
            "name": "repository",
            "location": 96,
            "return": [
                "RepositoryMetadata",
                "dict",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "corpus": {
            "name": "corpus",
            "location": 106,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {}
        },
        "empty_corpus": {
            "name": "empty_corpus",
            "location": 117,
            "return": [
                "Corpus",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "engine": {
            "name": "engine",
            "location": 122,
            "return": [
                "int",
                "str",
                "Tuple[float, float]",
                "users.models.CustomUser"
            ],
            "arguments": {}
        }
    },
    "ad-hoc-miner-master/tests/test_language_proxy.py": {
        "test_environment_variables": {
            "name": "test_environment_variables",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_extension": {
            "name": "test_match_extension",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ad-hoc-miner-master/tests/test_lang_javascript.py": {
        "test_sanity_check": {
            "name": "test_sanity_check",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_syntax": {
            "name": "test_check_syntax",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_summarize": {
            "name": "test_summarize",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocabularize": {
            "name": "test_vocabularize",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ad-hoc-miner-master/tests/test_lang_python.py": {
        "test_sanity_check": {
            "name": "test_sanity_check",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_summarize": {
            "name": "test_summarize",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocabularize": {
            "name": "test_vocabularize",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ad-hoc-miner-master/tests/test_rqueue.py": {
        "redis_running": {
            "name": "redis_running",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "redis_client": {
            "name": "redis_client",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_base_queue": {
            "name": "test_base_queue",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "redis_client": []
            }
        },
        "test_work_queue": {
            "name": "test_work_queue",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "redis_client": [
                    "str",
                    "slice"
                ]
            }
        }
    }
}
{
    "admin-backend-master/vochabular/manage.py": {},
    "admin-backend-master/vochabular/api/admin.py": {},
    "admin-backend-master/vochabular/api/apps.py": {},
    "admin-backend-master/vochabular/api/models.py": {
        "create_user_profile": {
            "name": "create_user_profile",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "list[str]",
                    "List[str]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "Iterable[str]"
                ],
                "instance": [
                    "tuple[]",
                    "tuple",
                    "set[str]",
                    "Optional[Set[str]]",
                    "int",
                    "None",
                    "models.User",
                    "list[C]",
                    "List['cirq.Circuit']",
                    "Iterable[Any]"
                ],
                "created": [
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "list[str]",
                    "List[str]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "Language.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "bool",
                "set",
                "zam_repondeur.models.Lecture",
                "django.db.migrations.state.StateApps",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.translation_progress": {
            "name": "translation_progress",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.translations": {
            "name": "translations",
            "location": 101,
            "return": [
                "Tuple[(collections.defaultdict, collections.defaultdict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str",
                "int",
                "float",
                "dict",
                "core.Year.Month"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentType.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentType.isTitle": {
            "name": "isTitle",
            "location": 147,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentType.isText": {
            "name": "isText",
            "location": 150,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentType.isDialogue": {
            "name": "isDialogue",
            "location": 153,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentType.isBubble": {
            "name": "isBubble",
            "location": 156,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component.__str__": {
            "name": "__str__",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translation.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [
                "str",
                "Type",
                "int",
                "BaseException",
                "Tuple[str, int]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Media.__str__": {
            "name": "__str__",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordGroup.__str__": {
            "name": "__str__",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__str__": {
            "name": "__str__",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordTranslation.__str__": {
            "name": "__str__",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "admin-backend-master/vochabular/api/schema.py": {},
    "admin-backend-master/vochabular/api/tests.py": {},
    "admin-backend-master/vochabular/api/views.py": {},
    "admin-backend-master/vochabular/api/__init__.py": {},
    "admin-backend-master/vochabular/api/graphql/chapter.py": {
        "ProgressType.resolve_lang": {
            "name": "resolve_lang",
            "location": 14,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "parent": [
                    "bool"
                ],
                "info": [
                    "bool"
                ]
            }
        },
        "ProgressType.resolve_progress": {
            "name": "resolve_progress",
            "location": 18,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "parent": [
                    "bool"
                ],
                "info": [
                    "bool"
                ]
            }
        },
        "ChapterType.get_node": {
            "name": "get_node",
            "location": 30,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[int]",
                "server.models.Bike"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "ChapterQuery.resolve_name": {
            "name": "resolve_name",
            "location": 47,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "info": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "ChapterQuery.resolve_chapters": {
            "name": "resolve_chapters",
            "location": 51,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "ChapterQuery.resolve_chapter": {
            "name": "resolve_chapter",
            "location": 55,
            "return": [
                "str",
                "dict",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "IntroduceChapter.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 75,
            "return": [
                "IntroduceChapter"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceChapter]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "chapter_data": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Type[object]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UpdateChapter.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 91,
            "return": [
                "UpdateChapter"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUpdateChapter]"
                ],
                "root": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "info": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "chapter_data": [
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "chapter_id": [
                    "int",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "float",
                    "zerver.models.Realm",
                    "None",
                    "Iterable[Any]",
                    "Optional[float]"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/comment.py": {
        "CommentType.get_node": {
            "name": "get_node",
            "location": 16,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[int]",
                "server.models.Bike"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "CommentQuery.resolve_comments": {
            "name": "resolve_comments",
            "location": 25,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "CommentQuery.resolve_comment": {
            "name": "resolve_comment",
            "location": 29,
            "return": [
                "str",
                "dict",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "IntroduceComment.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 49,
            "return": [
                "IntroduceComment"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceComment]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "comment_data": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/component.py": {
        "ComponentTypeType.get_node": {
            "name": "get_node",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]",
                "type",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Component_Type.get_node": {
            "name": "get_node",
            "location": 27,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[int]",
                "server.models.Bike"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "ComponentQuery.resolve_component_types": {
            "name": "resolve_component_types",
            "location": 38,
            "return": [
                "str",
                "mypy.types.Type",
                "Callable[..., T]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Type",
                    "typing.Type",
                    "List[mypy.types.Type.VarDef]",
                    "list[D]"
                ]
            }
        },
        "ComponentQuery.resolve_component_type": {
            "name": "resolve_component_type",
            "location": 42,
            "return": [
                "mypy.types.Type",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "Iterable[str]"
                ],
                "id": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "T"
                ]
            }
        },
        "ComponentQuery.resolve_components": {
            "name": "resolve_components",
            "location": 46,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "ComponentQuery.resolve_component": {
            "name": "resolve_component",
            "location": 50,
            "return": [
                "str",
                "dict",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "IntroduceComponentType.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 70,
            "return": [
                "IntroduceComponentType"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceComponentType]"
                ],
                "root": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "None",
                    "dict",
                    "List[str]",
                    "dict[, ]",
                    "list[str]"
                ],
                "info": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "None",
                    "dict",
                    "List[str]",
                    "dict[, ]",
                    "list[str]"
                ],
                "componentType_data": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "IntroduceComponent.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 97,
            "return": [
                "IntroduceComponent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceComponent]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "component_data": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Type[object]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UpdateComponent.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 111,
            "return": [
                "UpdateComponent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUpdateComponent]"
                ],
                "root": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "info": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "component_data": [
                    "int"
                ],
                "component_id": [
                    "int",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "float",
                    "zerver.models.Realm",
                    "None",
                    "Iterable[Any]",
                    "Optional[float]"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/language.py": {
        "LanguageQuery.resolve_languages": {
            "name": "resolve_languages",
            "location": 17,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "LanguageQuery.resolve_language": {
            "name": "resolve_language",
            "location": 21,
            "return": [
                "str",
                "dict",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/media.py": {
        "MediaUrlType.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any], None]",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "url": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "MediaQuery.resolve_medias": {
            "name": "resolve_medias",
            "location": 33,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "MediaQuery.resolve_media_url": {
            "name": "resolve_media_url",
            "location": 37,
            "return": [
                "MediaUrlType",
                "dict",
                "str",
                "zerver.models.Realm",
                "apistar.types.WSGIEnviron",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Iterable[Dict]",
                    "typing.Iterable[dict[, ]]"
                ],
                "file_type": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "accounts.models.Account",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/profile.py": {
        "ProfileQuery.resolve_profile": {
            "name": "resolve_profile",
            "location": 20,
            "return": [
                "bool",
                "Optional[int]",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "UpdateProfile.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 43,
            "return": [
                "UpdateProfile"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUpdateProfile]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "profile_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "username": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/text.py": {
        "LanguageType.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]"
                ],
                "description": [
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "TextQuery.resolve_texts": {
            "name": "resolve_texts",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "List[dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TextQuery.resolve_translations": {
            "name": "resolve_translations",
            "location": 44,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "IntroduceText.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 68,
            "return": [
                "IntroduceText"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceText]"
                ],
                "root": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "info": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "text_data": [
                    "str",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "IntroduceTranslation.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 81,
            "return": [
                "IntroduceTranslation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceTranslation]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]"
                ],
                "translation_data": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Type[object]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UpdateText.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 95,
            "return": [
                "UpdateText"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUpdateText]"
                ],
                "root": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "List[dict]",
                    "list[dict[, ]]",
                    "list",
                    "list[]"
                ],
                "info": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "List[dict]",
                    "list[dict[, ]]",
                    "list",
                    "list[]"
                ],
                "text_data": [
                    "str"
                ],
                "text_id": [
                    "str",
                    "int"
                ]
            }
        },
        "UpdateTranslation.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 112,
            "return": [
                "UpdateText"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "root": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "info": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict[, ]",
                    "dict"
                ],
                "translation_data": [
                    "bytes",
                    "int",
                    "str",
                    "IO[str]",
                    "typing.IO"
                ],
                "translation_id": [
                    "int",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "float",
                    "zerver.models.Realm",
                    "None",
                    "Iterable[Any]",
                    "Optional[float]"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/word.py": {
        "WordGroupType.get_node": {
            "name": "get_node",
            "location": 17,
            "return": [
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "id": [
                    "str",
                    "list[]",
                    "int",
                    "list",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordType.get_node": {
            "name": "get_node",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "type",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "WordQuery.resolve_word_groups": {
            "name": "resolve_word_groups",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "WordQuery.resolve_word_group": {
            "name": "resolve_word_group",
            "location": 41,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "cirq.google.engine.clienquantum.types.Any_pb2.Any"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "WordQuery.resolve_words": {
            "name": "resolve_words",
            "location": 45,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "WordQuery.resolve_word": {
            "name": "resolve_word",
            "location": 49,
            "return": [
                "str",
                "dict",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "IntroduceWordGroup.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 67,
            "return": [
                "IntroduceWordGroup"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceWordGroup]"
                ],
                "root": [
                    "list[str]",
                    "graphene.ResolveInfo",
                    "str",
                    "float",
                    "List[str]"
                ],
                "info": [
                    "list[str]",
                    "graphene.ResolveInfo",
                    "str",
                    "float",
                    "List[str]"
                ],
                "word_group_data": [
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "UpdateWordGroup.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 82,
            "return": [
                "UpdateWordGroup"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUpdateWordGroup]"
                ],
                "root": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "info": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "word_group_data": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Union[Iterable, str]"
                ],
                "word_group_id": [
                    "int",
                    "bytes",
                    "str",
                    "List[Optional[str]]",
                    "list[typing.Optional[str]]"
                ]
            }
        },
        "IntroduceWord.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 97,
            "return": [
                "IntroduceWord"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIntroduceWord]"
                ],
                "root": [
                    "int",
                    "graphene.ResolveInfo"
                ],
                "info": [
                    "int",
                    "graphene.ResolveInfo"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/graphql/xml.py": {
        "genChapterXML": {
            "name": "genChapterXML",
            "location": 23,
            "return": [
                "GeneratedXMLType"
            ],
            "arguments": {
                "chapter": [
                    "api.models.Chapter"
                ]
            }
        },
        "saveXML": {
            "name": "saveXML",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "xml": [
                    "str",
                    "List[List[str]]",
                    "list[list[str]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "XMLQuery.resolve_chapterXML": {
            "name": "resolve_chapterXML",
            "location": 19,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ],
                "id": [
                    "int"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/migrations/0001_initial.py": {},
    "admin-backend-master/vochabular/api/migrations/0002_component_order_in_chapter.py": {
        "getOrderedList": {
            "name": "getOrderedList",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "payload": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "Dict[str, float]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "dict[str, float]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/api/migrations/0003_auto_20191123_1208.py": {
        "setDefaultUUID": {
            "name": "setDefaultUUID",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "getTimestampSQL": {
            "name": "getTimestampSQL",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getUUIDSQL": {
            "name": "getUUIDSQL",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "admin-backend-master/vochabular/api/migrations/0004_auto_20191123_1453.py": {},
    "admin-backend-master/vochabular/api/migrations/0005_cascading_delete.py": {
        "get_cascade_delete": {
            "name": "get_cascade_delete",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "admin-backend-master/vochabular/api/migrations/0006_auto_20200403_1636.py": {},
    "admin-backend-master/vochabular/api/migrations/0007_chapter_disable_children.py": {},
    "admin-backend-master/vochabular/api/migrations/__init__.py": {},
    "admin-backend-master/vochabular/api/xml/generator.py": {
        "title_component": {
            "name": "title_component",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "component": [
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Tuple[Dict[str, Any], int]",
                    "tuple[typing.Union[dict[str, typing.Any],int]]",
                    "Set[int]",
                    "set[int]",
                    "List[annofabapi.models.Task]",
                    "list[T]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "elem": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.Sequence[float]",
                    "Sequence[float]",
                    "bool"
                ],
                "tag": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.Sequence[float]",
                    "Sequence[float]",
                    "bool"
                ]
            }
        },
        "text_component": {
            "name": "text_component",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "component": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "zerver.models.Realm",
                    "list[str]",
                    "dict",
                    "List[str]"
                ],
                "elem": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "Mapping",
                    "models.Credentials",
                    "typing.Mapping"
                ]
            }
        },
        "dialogue_component": {
            "name": "dialogue_component",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "dialogue": [
                    "str",
                    "zerver.models.Realm"
                ],
                "elem": [
                    "int",
                    "float",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "XMLGenerator.createChapter": {
            "name": "createChapter",
            "location": 23,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "int",
                    "None",
                    "bytes",
                    "Optional[int]",
                    "annofabapi.models.Inspection",
                    "bool",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/vochabular/auth.py": {
        "user_handler": {
            "name": "user_handler",
            "location": 6,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "payload": [
                    "dict[str, dict[str, typing.Any]]",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_key": {
            "name": "get_key",
            "location": 17,
            "return": [
                "Union[(cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey, cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey, cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey)]"
            ],
            "arguments": {
                "cert_str": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "admin-backend-master/vochabular/vochabular/heroku.py": {},
    "admin-backend-master/vochabular/vochabular/settings.py": {},
    "admin-backend-master/vochabular/vochabular/urls.py": {},
    "admin-backend-master/vochabular/vochabular/wsgi.py": {},
    "admin-backend-master/vochabular/vochabular/__init__.py": {}
}
{
    "adopy-master/adopy/types.py": {},
    "adopy-master/adopy/__init__.py": {},
    "adopy-master/adopy/base/_engine.py": {
        "Engine.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "adopy.base._task.Task"
                ],
                "model": [
                    "adopy.base._model.Model"
                ],
                "grid_design": [
                    "Dict[(str, Any)]"
                ],
                "grid_param": [
                    "Dict[(str, Any)]"
                ],
                "grid_response": [
                    "Dict[(str, Any)]"
                ],
                "noise_ratio": [
                    "float"
                ],
                "dtype": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Union[numpy.ndarray, xarray.DataArray]"
                ]
            }
        },
        "Engine.task": {
            "name": "task",
            "location": 66,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.model": {
            "name": "model",
            "location": 71,
            "return": [
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.grid_design": {
            "name": "grid_design",
            "location": 76,
            "return": [
                "str",
                "pandas.DataFrame",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.grid_param": {
            "name": "grid_param",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.grid_response": {
            "name": "grid_response",
            "location": 92,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.log_prior": {
            "name": "log_prior",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.log_post": {
            "name": "log_post",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.prior": {
            "name": "prior",
            "location": 136,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.post": {
            "name": "post",
            "location": 144,
            "return": [
                "Callable",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.marg_post": {
            "name": "marg_post",
            "location": 152,
            "return": [
                "dict[, ]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.log_lik": {
            "name": "log_lik",
            "location": 160,
            "return": [
                "str",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "numpy.ndarray",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.marg_log_lik": {
            "name": "marg_log_lik",
            "location": 193,
            "return": [
                "str",
                "numpy.ndarray",
                "List[Dict[str, Any]]",
                "tuple",
                "float",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.ent": {
            "name": "ent",
            "location": 204,
            "return": [
                "Set[str]",
                "Callable[[str, str], float]",
                "List[int]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.ent_marg": {
            "name": "ent_marg",
            "location": 217,
            "return": [
                "Set[str]",
                "Callable[[str, str], float]",
                "List[int]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.ent_cond": {
            "name": "ent_cond",
            "location": 230,
            "return": [
                "Set[str]",
                "Callable[[str, str], float]",
                "List[int]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.mutual_info": {
            "name": "mutual_info",
            "location": 242,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.post_mean": {
            "name": "post_mean",
            "location": 253,
            "return": [
                "pandas.DataFrame",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.post_cov": {
            "name": "post_cov",
            "location": 263,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.post_sd": {
            "name": "post_sd",
            "location": 273,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.dtype": {
            "name": "dtype",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._update_mutual_info": {
            "name": "_update_mutual_info",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.reset": {
            "name": "reset",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_design": {
            "name": "get_design",
            "location": 319,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "typing.Text",
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Engine.update": {
            "name": "update",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "design": [
                    "Dict[str, Any]",
                    "dict",
                    "pyspark.sql.types.StructType",
                    "List[dict]"
                ],
                "response": [
                    "dict",
                    "pyspark.sql.types.StructType",
                    "Dict[str, Any]",
                    "List[dict]",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "adopy-master/adopy/base/_model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "adopy.base._task.Task"
                ],
                "params": [
                    "Iterable[str]"
                ],
                "func": [
                    "Optional[Callable]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Model.name": {
            "name": "name",
            "location": 121,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.task": {
            "name": "task",
            "location": 128,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.params": {
            "name": "params",
            "location": 133,
            "return": [
                "list[]",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.extract_params": {
            "name": "extract_params",
            "location": 137,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bytearray",
                    "adopy.types.data_like"
                ]
            }
        },
        "Model.compute": {
            "name": "compute",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adopy-master/adopy/base/_task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "designs": [
                    "Iterable[str]"
                ],
                "responses": [
                    "Iterable[str]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Task.name": {
            "name": "name",
            "location": 56,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.designs": {
            "name": "designs",
            "location": 63,
            "return": [
                "list[]",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.responses": {
            "name": "responses",
            "location": 68,
            "return": [
                "list[]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.extract_designs": {
            "name": "extract_designs",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bytearray",
                    "adopy.types.data_like"
                ]
            }
        },
        "Task.extract_responses": {
            "name": "extract_responses",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List['PlotInfo']",
                    "list[I]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, List[str]]",
                    "bool",
                    "dict[str, list[str]]"
                ]
            }
        }
    },
    "adopy-master/adopy/base/__init__.py": {},
    "adopy-master/adopy/functions/_const.py": {
        "const_positive": {
            "name": "const_positive",
            "location": 1,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "const_01": {
            "name": "const_01",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "adopy-master/adopy/functions/_grid.py": {
        "marginalize": {
            "name": "marginalize",
            "location": 18,
            "return": [
                "dict"
            ],
            "arguments": {
                "post": [
                    "bool",
                    "str",
                    "int"
                ],
                "grid_param": [
                    "bool",
                    "str",
                    "int"
                ],
                "axis": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_nearest_grid_index": {
            "name": "get_nearest_grid_index",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "design": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[str]",
                    "float"
                ],
                "designs": [
                    "str",
                    "int",
                    "float",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "make_grid_matrix": {
            "name": "make_grid_matrix",
            "location": 36,
            "return": [
                "str",
                "tuple",
                "List[int]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "axes_dict": [
                    "Dict[(GK, GV)]"
                ],
                "columns": [
                    "Optional[List[str]]"
                ],
                "dtype": [
                    "Callable[[T], bool]",
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "adopy-master/adopy/functions/_utils.py": {
        "extract_vars_from_data": {
            "name": "extract_vars_from_data",
            "location": 16,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "adopy.types.data_like",
                    "bytes",
                    "dict",
                    "list[typing.Any]",
                    "pandas.DataFrame",
                    "Optional[List[Any]]"
                ],
                "keys": [
                    "Iterable[str]"
                ]
            }
        },
        "expand_multiple_dims": {
            "name": "expand_multiple_dims",
            "location": 43,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "pre": [
                    "int"
                ],
                "post": [
                    "int"
                ]
            }
        },
        "make_vector_shape": {
            "name": "make_vector_shape",
            "location": 64,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "axis": [
                    "int"
                ]
            }
        }
    },
    "adopy-master/adopy/functions/__init__.py": {},
    "adopy-master/adopy/tasks/cra.py": {
        "TaskCRA.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelLinear.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelLinear.compute": {
            "name": "compute",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "p_var": [],
                "a_var": [],
                "r_var": [],
                "r_fix": [],
                "alpha": [],
                "beta": [],
                "gamma": []
            }
        },
        "ModelExp.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExp.compute": {
            "name": "compute",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "p_var": [],
                "a_var": [],
                "r_var": [],
                "r_fix": [],
                "alpha": [],
                "beta": [],
                "gamma": []
            }
        },
        "EngineCRA.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "grid_design": [],
                "grid_param": []
            }
        }
    },
    "adopy-master/adopy/tasks/dd.py": {
        "TaskDD.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExp.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExp.compute": {
            "name": "compute",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "t_ss": [],
                "t_ll": [],
                "r_ss": [],
                "r_ll": [],
                "r": [],
                "tau": []
            }
        },
        "ModelHyp.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelHyp.compute": {
            "name": "compute",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "t_ss": [],
                "t_ll": [],
                "r_ss": [],
                "r_ll": [],
                "k": [],
                "tau": []
            }
        },
        "ModelHPB.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelHPB.compute": {
            "name": "compute",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "t_ss": [],
                "t_ll": [],
                "r_ss": [],
                "r_ll": [],
                "k": [],
                "s": [],
                "tau": []
            }
        },
        "ModelCOS.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCOS.compute": {
            "name": "compute",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "t_ss": [],
                "t_ll": [],
                "r_ss": [],
                "r_ll": [],
                "r": [],
                "s": [],
                "tau": []
            }
        },
        "ModelQH.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelQH.compute": {
            "name": "compute",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "t_ss": [],
                "t_ll": [],
                "r_ss": [],
                "r_ll": [],
                "beta": [],
                "delta": [],
                "tau": []
            }
        },
        "ModelDE.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDE.compute": {
            "name": "compute",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "choice": [],
                "t_ss": [],
                "t_ll": [],
                "r_ss": [],
                "r_ll": [],
                "omega": [],
                "r": [],
                "s": [],
                "tau": []
            }
        },
        "EngineDD.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "grid_design": [],
                "grid_param": []
            }
        },
        "ModelExp.compute.discount": {
            "name": "discount",
            "location": 109,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "ModelHyp.compute.discount": {
            "name": "discount",
            "location": 160,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "ModelHPB.compute.discount": {
            "name": "discount",
            "location": 213,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "ModelCOS.compute.discount": {
            "name": "discount",
            "location": 266,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "ModelQH.compute.discount": {
            "name": "discount",
            "location": 322,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "ModelDE.compute.discount": {
            "name": "discount",
            "location": 378,
            "return": [],
            "arguments": {
                "delay": []
            }
        }
    },
    "adopy-master/adopy/tasks/psi.py": {
        "Task2AFC.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModelPsi.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[dict]",
                    "dict[, ]"
                ]
            }
        },
        "_ModelPsi._compute_prob": {
            "name": "_compute_prob",
            "location": 60,
            "return": [
                "dict",
                "Iterable[str]",
                "List[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "st": [
                    "bool",
                    "Callable"
                ],
                "th": [
                    "bool",
                    "Callable"
                ],
                "sl": [
                    "bool",
                    "Callable"
                ],
                "gr": [
                    "bool",
                    "Callable"
                ],
                "lr": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "ModelLogistic.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelLogistic.compute": {
            "name": "compute",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "choice": [
                    "int",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "fklearn.types.DateType",
                    "dict"
                ],
                "stimulus": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "guess_rate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "lapse_rate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "threshold": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "slope": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ModelWeibull.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelWeibull.compute": {
            "name": "compute",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "choice": [
                    "int",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "fklearn.types.DateType",
                    "dict"
                ],
                "stimulus": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "guess_rate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "lapse_rate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "threshold": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "slope": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ModelProbit.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelProbit.compute": {
            "name": "compute",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "choice": [
                    "int",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "fklearn.types.DateType",
                    "dict"
                ],
                "stimulus": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "guess_rate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "lapse_rate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "threshold": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "slope": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EnginePsi.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "dict[str, int]",
                    "str",
                    "Dict[str, int]",
                    "int",
                    "eth.chains.base.BaseChain"
                ],
                "grid_design": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "None",
                    "Union[int, str]",
                    "Optional[bool]"
                ],
                "grid_param": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "None",
                    "Union[int, str]",
                    "Optional[bool]"
                ],
                "d_step": [
                    "int"
                ]
            }
        },
        "EnginePsi.d_step": {
            "name": "d_step",
            "location": 227,
            "return": [
                "",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Sequence[Any]",
                    "float"
                ]
            }
        },
        "EnginePsi.get_design": {
            "name": "get_design",
            "location": 232,
            "return": [
                "str",
                "base.ConfigOptions",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "typing.Text",
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "EnginePsi.update": {
            "name": "update",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "design": [
                    "dict[str, typing.Union[int,str]]",
                    "Dict[str, Union[int, str]]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, float]",
                    "dict",
                    "Dict[str, float]"
                ],
                "response": [
                    "dict[, ]",
                    "fausweb.base.Response",
                    "dict"
                ]
            }
        }
    },
    "adopy-master/adopy/tasks/__init__.py": {},
    "adopy-master/docs/source/conf.py": {
        "setup": {
            "name": "setup",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "adopy-master/tests/test_base.py": {
        "task": {
            "name": "task",
            "location": 13,
            "return": [
                "Task",
                "str",
                "int",
                "Type",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {}
        },
        "task_noname": {
            "name": "task_noname",
            "location": 20,
            "return": [
                "Task",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "test_task": {
            "name": "test_task",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "asyncio.tasks.Task[Any]",
                    "prefeccore.task.Task"
                ],
                "task_noname": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "func_logistic_log_lik": {
            "name": "func_logistic_log_lik",
            "location": 49,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "choice": [
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "list[]",
                    "Tuple[int, int, int]",
                    "list"
                ],
                "stimulus": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "guess_rate": [
                    "str",
                    "Optional[str]"
                ],
                "lapse_rate": [
                    "str",
                    "Optional[str]"
                ],
                "threshold": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "slope": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "model": {
            "name": "model",
            "location": 57,
            "return": [
                "Model",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "model_noname": {
            "name": "model_noname",
            "location": 65,
            "return": [
                "Model",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "task": [
                    "list[T]",
                    "Task",
                    "dict[str, typing.Any]",
                    "collections.abc.Awaitable[]",
                    "List[google.cloud.tasks_v2.types.task_pb2.Task]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Awaitable",
                    "List[asyncio.Task]",
                    "annofabapi.dataclass.task.Task",
                    "dict"
                ]
            }
        },
        "test_model": {
            "name": "test_model",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "model_noname": [],
                "task": []
            }
        },
        "grid_design": {
            "name": "grid_design",
            "location": 99,
            "return": [
                "dict[typing.Text, ]",
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "grid_param": {
            "name": "grid_param",
            "location": 106,
            "return": [
                "dict[typing.Text, list[float]]",
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "grid_response": {
            "name": "grid_response",
            "location": 116,
            "return": [
                "dict[typing.Text, list[int]]",
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {}
        },
        "engine": {
            "name": "engine",
            "location": 121,
            "return": [
                "Engine"
            ],
            "arguments": {
                "task": [
                    "bool",
                    "None",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[\"DiscountCodeState\"]"
                ],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[\"DiscountCodeState\"]"
                ],
                "grid_design": [
                    "bool",
                    "None",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[\"DiscountCodeState\"]"
                ],
                "grid_param": [
                    "bool",
                    "None",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[\"DiscountCodeState\"]"
                ],
                "grid_response": [
                    "bool",
                    "None",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[\"DiscountCodeState\"]"
                ]
            }
        },
        "test_engine": {
            "name": "test_engine",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [],
                "task": [
                    "keanu.Model"
                ],
                "model": [
                    "keanu.Model",
                    "TestModule.Model"
                ]
            }
        },
        "test_engine_get_design": {
            "name": "test_engine_get_design",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "engine": [
                    "bool"
                ],
                "design_type": [
                    "bool"
                ]
            }
        },
        "test_engine_single_update": {
            "name": "test_engine_single_update",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "engine": [],
                "choice": []
            }
        },
        "test_engine_multiple_update": {
            "name": "test_engine_multiple_update",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "adopy-master/tests/test_cra.py": {
        "grid_design": {
            "name": "grid_design",
            "location": 8,
            "return": [
                "dict[tuple[typing.Text], ]",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "grid_param": {
            "name": "grid_param",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_classes": {
            "name": "test_classes",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "design_type": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "typing.Callable[bool, None]",
                    "Optional[DefaultDict[str, Any]]",
                    "None",
                    "typing.DefaultDict"
                ],
                "model": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "grid_design": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "grid_param": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "response": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    },
    "adopy-master/tests/test_dd.py": {
        "make_grid": {
            "name": "make_grid",
            "location": 10,
            "return": [
                "Optional[int]",
                "int",
                "List[float]",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "end": [
                    "int",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "n": [
                    "int",
                    "list[int]",
                    "numpy.ndarray",
                    "float",
                    "List[int]",
                    "Optional[float]"
                ]
            }
        },
        "grid_design": {
            "name": "grid_design",
            "location": 15,
            "return": [
                "dict[tuple[typing.Text], ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_classes": {
            "name": "test_classes",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "design_type": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "typing.Callable[bool, None]",
                    "Optional[DefaultDict[str, Any]]",
                    "None",
                    "typing.DefaultDict"
                ],
                "model": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "grid_design": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "grid_param": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "response": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    },
    "adopy-master/tests/test_functions.py": {
        "test_get_nearest_grid_index": {
            "name": "test_get_nearest_grid_index",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expand_multiple_dims": {
            "name": "test_expand_multiple_dims",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adopy-master/tests/test_psi.py": {
        "grid_design": {
            "name": "grid_design",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "grid_param": {
            "name": "grid_param",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_classes": {
            "name": "test_classes",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "design_type": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "typing.Callable[bool, None]",
                    "Optional[DefaultDict[str, Any]]",
                    "None",
                    "typing.DefaultDict"
                ],
                "model": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "grid_design": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "grid_param": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[float]"
                ],
                "response": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    }
}
{
    "adt-master/setup.py": {},
    "adt-master/adt/case.py": {
        "TupleConstructor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "int"
                ]
            }
        },
        "TupleConstructor.constructCase": {
            "name": "constructCase",
            "location": 12,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleConstructor.deconstructCase": {
            "name": "deconstructCase",
            "location": 16,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "float",
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "bool"
                ],
                "callback": [
                    "str",
                    "List[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool,Any]",
                    "Any"
                ]
            }
        },
        "TupleConstructor.getTypes": {
            "name": "getTypes",
            "location": 21,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleConstructor.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityConstructor.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argType": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "IdentityConstructor.constructCase": {
            "name": "constructCase",
            "location": 34,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IdentityConstructor.deconstructCase": {
            "name": "deconstructCase",
            "location": 37,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool,Any]",
                    "Any"
                ],
                "callback": [
                    "str",
                    "List[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool,Any]",
                    "Any"
                ]
            }
        },
        "IdentityConstructor.getTypes": {
            "name": "getTypes",
            "location": 40,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityConstructor.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseConstructor.constructCase": {
            "name": "constructCase",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseConstructor.deconstructCase": {
            "name": "deconstructCase",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ],
                "callback": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "CaseConstructor.getTypes": {
            "name": "getTypes",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseConstructor.__getitem__": {
            "name": "__getitem__",
            "location": 60,
            "return": [
                "Union[(CaseConstructor, IdentityConstructor, TupleConstructor)]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "CaseConstructor.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseMeta.__getitem__": {
            "name": "__getitem__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "adt-master/adt/decorator.py": {
        "adt": {
            "name": "adt",
            "location": 9,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [
                    "_T0@@"
                ]
            }
        },
        "_installInit": {
            "name": "_installInit",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "_installRepr": {
            "name": "_installRepr",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "_installStr": {
            "name": "_installStr",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "_installEq": {
            "name": "_installEq",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "_installHash": {
            "name": "_installHash",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "_installOneConstructor": {
            "name": "_installOneConstructor",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "case": []
            }
        },
        "_installOneAccessor": {
            "name": "_installOneAccessor",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "case": []
            }
        },
        "_installMatch": {
            "name": "_installMatch",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "cases": []
            }
        },
        "_installInit._init": {
            "name": "_init",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "orig_init": []
            }
        },
        "_installRepr._repr": {
            "name": "_repr",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_installStr._str": {
            "name": "_str",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_installEq._eq": {
            "name": "_eq",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "cls": []
            }
        },
        "_installHash._hash": {
            "name": "_hash",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_installOneConstructor.constructor": {
            "name": "constructor",
            "location": 104,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_installOneAccessor.accessor": {
            "name": "accessor",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "_case": []
            }
        },
        "_installMatch.match": {
            "name": "match",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "_cases": []
            }
        }
    },
    "adt-master/adt/mypy_plugin.py": {
        "plugin": {
            "name": "plugin",
            "location": 32,
            "return": [
                "Type[ADTPlugin]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Tuple[str, str]",
                    "tuple"
                ]
            }
        },
        "get_fullname": {
            "name": "get_fullname",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "Mapping[str, float]",
                    "str",
                    "bool"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 48,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "x": [
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "float",
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "_convert_case_type": {
            "name": "_convert_case_type",
            "location": 75,
            "return": [
                "mypy.types.Type",
                "mypy.types.Type.dDictType"
            ],
            "arguments": {
                "type_context": [
                    "mypy.types.CallableType",
                    "mypy.nodes.ClassDef"
                ]
            }
        },
        "_transform_class": {
            "name": "_transform_class",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "IO",
                    "str",
                    "mypy.types.CallableType",
                    "mypy.plugin.CheckerPluginInterface",
                    "type",
                    "Optional[List[\"custom_index\"]]"
                ]
            }
        },
        "_get_and_delete_cases": {
            "name": "_get_and_delete_cases",
            "location": 196,
            "return": [
                "Optional[List[_CaseDef]]"
            ],
            "arguments": {
                "context": [
                    "denite.util.UserContext",
                    "int"
                ]
            }
        },
        "_add_constructor_for_case": {
            "name": "_add_constructor_for_case",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "Callable",
                    "str",
                    "type",
                    "Optional[str]",
                    "mypy.nodes.Expression"
                ],
                "case": [
                    "bool",
                    "Callable",
                    "str",
                    "type",
                    "Optional[str]",
                    "mypy.nodes.Expression"
                ],
                "selfType": [
                    "bool",
                    "Callable",
                    "str",
                    "type",
                    "Optional[str]",
                    "mypy.nodes.Expression"
                ]
            }
        },
        "_add_accessor_for_case": {
            "name": "_add_accessor_for_case",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "int",
                    "List[str]"
                ],
                "case": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_add_match": {
            "name": "_add_match",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "mypy.types.Type",
                    "bool"
                ],
                "cases": [
                    "mypy.types.Type",
                    "mypy.nodes.Expression",
                    "Callable[[str], str]"
                ]
            }
        },
        "_add_typevar": {
            "name": "_add_typevar",
            "location": 301,
            "return": [
                "mypy.types.Type",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict"
                ],
                "tVarName": [
                    "str",
                    "mypy.types.Type"
                ]
            }
        },
        "_callable_type_for_adt_case": {
            "name": "_callable_type_for_adt_case",
            "location": 316,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "context": [
                    "mypy.types.TupleType",
                    "List[mypy.nodes.Lvalue]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "mypy.types.Type"
                ],
                "case": [
                    "mypy.nodes.TypeVarExpr",
                    "str",
                    "Optional[Type]",
                    "mypy.nodes.TypeInfo",
                    "Optional[str]",
                    "Type"
                ],
                "resultType": [
                    "bool",
                    "mypy.nodes.TypeVarExpr",
                    "str",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "_add_method": {
            "name": "_add_method",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.types.Type",
                    "mypy.plugin.ClassDefContext",
                    "mypy.nodes.Context"
                ],
                "name": [
                    "str",
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.FunctionContext"
                ],
                "args": [],
                "return_type": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.Lvalue",
                    "List[mypy.types.Type]",
                    "mypy.types.CallableType"
                ],
                "self_type": [
                    "None",
                    "mypy.nodes.Context",
                    "mypy.types.Type.VarId",
                    "mypy.nodes.FuncDef",
                    "bool"
                ],
                "tvar_def": [
                    "None",
                    "Optional[mypy.types.TypeVarDef]",
                    "Optional[mypy.types.Type.VarDef]",
                    "int",
                    "Callable",
                    "Optional[Callable]"
                ],
                "is_classmethod": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "ADTPlugin.get_type_analyze_hook": {
            "name": "get_type_analyze_hook",
            "location": 59,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ADTPlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 66,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "_CaseDef.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "type",
                    "Type[T]",
                    "List[mypy.types.Instance]",
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]"
                ],
                "types": [
                    "str",
                    "dict",
                    "mypy.nodes.SymbolTable",
                    "Type[Any]"
                ]
            }
        },
        "_CaseDef._normalize_types": {
            "name": "_normalize_types",
            "location": 115,
            "return": [
                "List",
                "mypy.types.Type",
                "List[mypy.types.Type]",
                "str"
            ],
            "arguments": {
                "types": [
                    "mypy.types.Instance",
                    "Callable[[str], mypy.types.Instance]",
                    "T",
                    "Optional[mypy.types.Type]",
                    "Type[Any]",
                    "BinaryIO",
                    "mypy.types.Type",
                    "List[mypy.nodes.Expression]"
                ]
            }
        },
        "_CaseDef.constructor_args": {
            "name": "constructor_args",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CaseDef.accessor_return": {
            "name": "accessor_return",
            "location": 139,
            "return": [
                "mypy.types.Type",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CaseDef.match_lambda": {
            "name": "match_lambda",
            "location": 149,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.RefExpr",
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "return_type": [
                    "Optional[mypy.types.Type]",
                    "str",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ]
            }
        },
        "_CaseDef.__hash__": {
            "name": "__hash__",
            "location": 158,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CaseDef.__eq__": {
            "name": "__eq__",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "List[str]"
                ]
            }
        },
        "_CaseDef.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CaseDef.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adt-master/adt/__init__.py": {},
    "adt-master/tests/helpers.py": {
        "invalidPatternMatch": {
            "name": "invalidPatternMatch",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "adt-master/tests/test_either.py": {
        "TestEither.test_left": {
            "name": "test_left",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEither.test_right": {
            "name": "test_right",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEither.test_equalsItself": {
            "name": "test_equalsItself",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Tuple[dict,dict]",
                    "int",
                    "Tuple[Union[dict,dict]]",
                    "Dict"
                ]
            }
        },
        "TestEither.test_exhaustivePatternMatchSucceeds": {
            "name": "test_exhaustivePatternMatchSucceeds",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[rflx.expression.Expr]"
                ]
            }
        },
        "TestEither.test_inexhaustivePatternMatchThrows": {
            "name": "test_inexhaustivePatternMatchThrows",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable",
                    "Hashable",
                    "int"
                ]
            }
        },
        "TestEither.test_accessorsConsistentWithMatching": {
            "name": "test_accessorsConsistentWithMatching",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "hypothesis.strategies.SearchStrategy[rflx.expression.Expr]"
                ]
            }
        }
    },
    "adt-master/tests/test_empty.py": {},
    "adt-master/tests/test_hash.py": {
        "TestHash.test_hash_correct": {
            "name": "test_hash_correct",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adt-master/tests/test_invalid.py": {
        "TestInvalid.test_cannotSetDefaultValuesForCases": {
            "name": "test_cannotSetDefaultValuesForCases",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adt-master/tests/test_list.py": {
        "TestList.test_construction": {
            "name": "test_construction",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestList.test_equalsItself": {
            "name": "test_equalsItself",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "str"
                ]
            }
        },
        "TestList.test_exhaustivePatternMatchSucceeds": {
            "name": "test_exhaustivePatternMatchSucceeds",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float"
                ]
            }
        },
        "TestList.test_inexhaustivePatternMatchThrows": {
            "name": "test_inexhaustivePatternMatchThrows",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "Tuple[int]",
                    "Sequence['cirq.Qid']",
                    "str",
                    "list"
                ]
            }
        },
        "TestList.test_accessorsConsistentWithMatching": {
            "name": "test_accessorsConsistentWithMatching",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float"
                ]
            }
        }
    },
    "adt-master/tests/test_maybe.py": {
        "Maybe.map": {
            "name": "map",
            "location": 19,
            "return": [
                "str",
                "Dict[str, int]",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Iterable[Any]",
                    "collections.abc.AsyncIterator",
                    "List[float]",
                    "List",
                    "AsyncIterator[T]"
                ]
            }
        },
        "Maybe.flatMap": {
            "name": "flatMap",
            "location": 23,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "Iterable[Any]",
                    "int",
                    "float",
                    "Iterable"
                ]
            }
        },
        "TestMaybe.test_equalsItself": {
            "name": "test_equalsItself",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestMaybe.test_mapIdentity": {
            "name": "test_mapIdentity",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "TestMaybe.test_mapNothingReturnsNothing": {
            "name": "test_mapNothingReturnsNothing",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestMaybe.test_mapJust": {
            "name": "test_mapJust",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestMaybe.test_flatMapIdentity": {
            "name": "test_flatMapIdentity",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float"
                ]
            }
        },
        "TestMaybe.test_flatMapToNothingReturnsNothing": {
            "name": "test_flatMapToNothingReturnsNothing",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestMaybe.test_flatMapOfNothingReturnsNothing": {
            "name": "test_flatMapOfNothingReturnsNothing",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestMaybe.test_flatMapOfJust": {
            "name": "test_flatMapOfJust",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "adt-master/tests/test_mypy_plugin.py": {
        "TestMyPyPlugin.test_issue21": {
            "name": "test_issue21",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyPyPlugin.test_issue25": {
            "name": "test_issue25",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyPyPlugin.test_issue26": {
            "name": "test_issue26",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyPyPlugin.test_readme_examples": {
            "name": "test_readme_examples",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyPyPlugin._call_mypy_on_source_file": {
            "name": "_call_mypy_on_source_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMyPyPlugin._call_mypy_on_path": {
            "name": "_call_mypy_on_path",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testfile": [
                    "str"
                ]
            }
        }
    },
    "adt-master/tests/test_overrides.py": {
        "optionality": {
            "name": "optionality",
            "location": 10,
            "return": [
                "str",
                "bool",
                "float",
                "Iterable[Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "OverriddenAccessors.intvalue": {
            "name": "intvalue",
            "location": 20,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverriddenAccessors.strvalue": {
            "name": "strvalue",
            "location": 25,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[float, float]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverriddenMatch.match": {
            "name": "match",
            "location": 35,
            "return": [
                "Dict[str, int]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "intvalue": [
                    "IO[str]",
                    "Dict[str,Any]",
                    "IO",
                    "str"
                ],
                "strvalue": [
                    "IO[str]",
                    "Dict[str,Any]",
                    "IO",
                    "str"
                ]
            }
        },
        "TestOverrides.test_overriddenAccessorIntvalue": {
            "name": "test_overriddenAccessorIntvalue",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_overriddenAccessorStrvalue": {
            "name": "test_overriddenAccessorStrvalue",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_overriddenMatchIntvalue": {
            "name": "test_overriddenMatchIntvalue",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_overriddenMatchStrvalue": {
            "name": "test_overriddenMatchStrvalue",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adt-master/tests/test_readme.py": {
        "extract_code_from_readme": {
            "name": "extract_code_from_readme",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_extract_code_blocks_from_file": {
            "name": "_extract_code_blocks_from_file",
            "location": 40,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Iterable[str]",
                    "List[Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "_code_blocks_to_str": {
            "name": "_code_blocks_to_str",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "code_blocks": [
                    "Iterable[Iterable[str]]",
                    "str",
                    "bytes",
                    "Dict[str,Union[Any,Any]]"
                ]
            }
        },
        "TestMyPyPlugin.test_readmeExamplesAreExecutable": {
            "name": "test_readmeExamplesAreExecutable",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adt-master/tests/__init__.py": {},
    "adt-master/tests/source_files/issue21.py": {},
    "adt-master/tests/source_files/issue25.py": {},
    "adt-master/tests/source_files/issue26.py": {
        "ExampleADT.safe_integer": {
            "name": "safe_integer",
            "location": 12,
            "return": [
                "str",
                "bytes",
                "Tuple[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adt-master/tests/source_files/__init__.py": {}
}
{
    "advanced_python-master/algorithms/fibonacci_number.py": {
        "fib": {
            "name": "fib",
            "location": 5,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "fib_func": {
            "name": "fib_func",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "FibonacciNumber.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FibonacciNumber.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "FibonacciNumberIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FibonacciNumberIterator.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "FibonacciNumberIterator.__next__": {
            "name": "__next__",
            "location": 43,
            "return": [
                "float",
                "Optional[Callable[[str], bool]]",
                "list[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advanced_python-master/annotations/annotations1.py": {
        "indent_right": {
            "name": "indent_right",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        }
    },
    "advanced_python-master/annotations/annotations2.py": {
        "Track.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "duration": [
                    "datetime.time"
                ]
            }
        },
        "Track.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "artist": [
                    "str"
                ],
                "release_year": [
                    "str"
                ],
                "tracks": [
                    "List[Track]"
                ]
            }
        },
        "Album.all_tracks_shorter_than": {
            "name": "all_tracks_shorter_than",
            "location": 25,
            "return": [
                "List[Track]"
            ],
            "arguments": {
                "self": [],
                "minutes": [
                    "int",
                    "float",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "Optional[int]",
                    "str"
                ],
                "seconds": [
                    "int",
                    "float",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "advanced_python-master/annotations/annotations3.py": {
        "hundreds": {
            "name": "hundreds",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "advanced_python-master/annotations/annotations4.py": {},
    "advanced_python-master/annotations/annotations5.py": {
        "nothing": {
            "name": "nothing",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "forever": {
            "name": "forever",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "generate_two": {
            "name": "generate_two",
            "location": 21,
            "return": [
                "Iterable[int]"
            ],
            "arguments": {}
        }
    },
    "advanced_python-master/decorators/decorators_p1.py": {
        "my_new_decorator": {
            "name": "my_new_decorator",
            "location": 7,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "func_to_decorate": []
            }
        },
        "original_function": {
            "name": "original_function",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_new_decorator.wrapper_around_original_function": {
            "name": "wrapper_around_original_function",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advanced_python-master/decorators/decorators_p2.py": {
        "bread": {
            "name": "bread",
            "location": 2,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ingredients": {
            "name": "ingredients",
            "location": 10,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "cheese": {
            "name": "cheese",
            "location": 18,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "func": {
            "name": "func",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bread.wrapper": {
            "name": "wrapper",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ingredients.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cheese.wrapper": {
            "name": "wrapper",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advanced_python-master/decorators/decorators_p3.py": {
        "my_decorator": {
            "name": "my_decorator",
            "location": 2,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "original_function": {
            "name": "original_function",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ]
            }
        },
        "my_decorator.wrapper": {
            "name": "wrapper",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advanced_python-master/decorators/decorators_p4.py": {
        "method_friendly_decorator": {
            "name": "method_friendly_decorator",
            "location": 2,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "method_to_decorate": [
                    "Callable[[], bool]",
                    "str",
                    "List[dict]",
                    "int",
                    "list",
                    "float",
                    "bool"
                ]
            }
        },
        "method_friendly_decorator.wrapper": {
            "name": "wrapper",
            "location": 3,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "Optional[Dict]",
                    "Callable[[T], T]"
                ]
            }
        },
        "Car.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Car.get_real_price": {
            "name": "get_real_price",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Car.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advanced_python-master/decorators/decorators_p5.py": {
        "decorator_maker": {
            "name": "decorator_maker",
            "location": 2,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "dec_arg1": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "dec_arg2": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "decorated_function": {
            "name": "decorated_function",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "func_arg1": [
                    "T",
                    "None"
                ],
                "func_arg2": [
                    "T",
                    "None"
                ]
            }
        },
        "decorated_func_2": {
            "name": "decorated_func_2",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "dec_arg1": [
                    "List[Dict[str, Any]]",
                    "str",
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "dec_arg2": [
                    "List[Dict[str, Any]]",
                    "str",
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "decorated_func_3": {
            "name": "decorated_func_3",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "func_arg1": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "func_arg2": [
                    "str",
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "decorator_maker.my_decorator": {
            "name": "my_decorator",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decorated_func": [
                    "Callable",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "decorator_maker.my_decorator.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func_arg1": [
                    "None",
                    "str",
                    "int"
                ],
                "func_arg2": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "advanced_python-master/decorators/decorators_p6.py": {
        "decorator_with_args": {
            "name": "decorator_with_args",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "decorated_decorator": [
                    "Dict[str, Dict[str, int]]",
                    "dict[str, dict[str, int]]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "decorated_decorator": {
            "name": "decorated_decorator",
            "location": 18,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "decorated_function": {
            "name": "decorated_function",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "f_args1": [
                    "str",
                    "None",
                    "Callable",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "dict[str, str]"
                ],
                "f_args2": [
                    "str",
                    "None",
                    "Callable",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "decorator_with_args.decorator_maker": {
            "name": "decorator_maker",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "decorated_decorator.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "func_args1": [
                    "None",
                    "Callable",
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, float]"
                ],
                "func_args2": [
                    "None",
                    "Callable",
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, float]"
                ]
            }
        },
        "decorator_with_args.decorator_maker.decorator_wrapper": {
            "name": "decorator_wrapper",
            "location": 10,
            "return": [
                "List[Dict[str, Any]]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "func": []
            }
        }
    },
    "advanced_python-master/decorators/examples.py": {
        "benchmark": {
            "name": "benchmark",
            "location": 5,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "logging": {
            "name": "logging",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "counter": {
            "name": "counter",
            "location": 23,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "reverse_string": {
            "name": "reverse_string",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "list[str]",
                    "Optional[int]",
                    "Mapping[str, str]",
                    "List[str]"
                ]
            }
        },
        "get_random_quote": {
            "name": "get_random_quote",
            "location": 50,
            "return": [
                "str",
                "int",
                "typing.Text"
            ],
            "arguments": {}
        },
        "benchmark.wrapper": {
            "name": "wrapper",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "logging.wrapper": {
            "name": "wrapper",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "counter.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        }
    },
    "advanced_python-master/functools/functools_p1.py": {
        "get_webpage": {
            "name": "get_webpage",
            "location": 8,
            "return": [
                "None",
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "advanced_python-master/functools/functools_p2.py": {
        "func": {
            "name": "func",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "elem1": [
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "str",
                    "int",
                    "Optional[str]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]"
                ],
                "elem2": [
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "str",
                    "int",
                    "Optional[str]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "advanced_python-master/functools/functools_p3.py": {
        "Book.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "float",
                    "bool"
                ],
                "pages": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Book.__lt__": {
            "name": "__lt__",
            "location": 10,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "advanced_python-master/functools/functools_p4.py": {
        "my_func": {
            "name": "my_func",
            "location": 7,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "a": [
                    "_T0"
                ],
                "b": [
                    "_T1"
                ]
            }
        }
    },
    "advanced_python-master/generators_and_iterators/generators.py": {
        "simple_generator": {
            "name": "simple_generator",
            "location": 18,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "val": []
            }
        }
    },
    "advanced_python-master/generators_and_iterators/iterators.py": {
        "Squares.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "Squares.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [
                "SquareIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquareIterator.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "SquareIterator.__next__": {
            "name": "__next__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CubeVolume.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "CubeVolume.__iter__": {
            "name": "__iter__",
            "location": 68,
            "return": [
                "CubeVolumeIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubeVolumeIterator.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "CubeVolumeIterator.__next__": {
            "name": "__next__",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircleSquare.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "CircleSquare.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [
                "CircleSquareIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircleSquareIterator.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "CircleSquareIterator.__next__": {
            "name": "__next__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FibonacciNumber.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FibonacciNumber.__iter__": {
            "name": "__iter__",
            "location": 132,
            "return": [
                "FibonacciNumberIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FibonacciNumberIterator.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "FibonacciNumberIterator.__next__": {
            "name": "__next__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "advent-of-code-18-master/py/common/octree.py": {
        "Octree.nonempty": {
            "name": "nonempty",
            "location": 12,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Octree.volume": {
            "name": "volume",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Octree.bounds": {
            "name": "bounds",
            "location": 25,
            "return": [
                "float",
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Octree.octants": {
            "name": "octants",
            "location": 29,
            "return": [
                "Iterable[Octree]",
                "Generator[Octree]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Octree.octants.bounds": {
            "name": "bounds",
            "location": 30,
            "return": [
                "float",
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "low": [
                    "str",
                    "List[int]"
                ],
                "lb": [
                    "str",
                    "List[int]"
                ],
                "ub": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/common/pt3.py": {},
    "advent-of-code-18-master/py/common/__init__.py": {},
    "advent-of-code-18-master/py/day08/main.py": {
        "meta_iter": {
            "name": "meta_iter",
            "location": 3,
            "return": [
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "T",
                    "str",
                    "Dict"
                ]
            }
        },
        "node_value": {
            "name": "node_value",
            "location": 16,
            "return": [
                "Callable[[str, Any], Tuple[bytes, int]]",
                "Iterator[object]",
                "dict",
                "str",
                "Set[int]",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Iterable",
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 32,
            "return": [
                "List[int]",
                "int",
                "bool",
                "List",
                "Iterable[int]",
                "float",
                "List[List[int]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 36,
            "return": [
                "bool",
                "List[str]",
                "int",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 39,
            "return": [
                "bool",
                "Tuple[str, str]",
                "str",
                "List[dict]",
                "Dict[str, str]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "meta_iter.visit": {
            "name": "visit",
            "location": 4,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "it": []
            }
        },
        "node_value.visit": {
            "name": "visit",
            "location": 17,
            "return": [
                "bool",
                "Generator"
            ],
            "arguments": {
                "it": []
            }
        }
    },
    "advent-of-code-18-master/py/day09/circular_list.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "left": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "float",
                    "List[tuple[Union[int,float]]]"
                ],
                "right": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "float",
                    "List[tuple[Union[int,float]]]"
                ]
            }
        },
        "CircularList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularList._insert_first": {
            "name": "_insert_first",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict",
                    "str",
                    "List[str]",
                    "List",
                    "Sequence[Any]",
                    "Callable",
                    "VT"
                ]
            }
        },
        "CircularList._right": {
            "name": "_right",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularList._left": {
            "name": "_left",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularList.insert_right": {
            "name": "insert_right",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Sequence[T]",
                    "Optional[Sequence[T]]",
                    "bool",
                    "None",
                    "Sequence[Any]",
                    "T"
                ]
            }
        },
        "CircularList.move_right": {
            "name": "move_right",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularList.move_left": {
            "name": "move_left",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircularList.delete_move_right": {
            "name": "delete_move_right",
            "location": 43,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-18-master/py/day09/main.py": {
        "player_scores": {
            "name": "player_scores",
            "location": 4,
            "return": [
                "int",
                "Dict[str,Any]",
                "Callable",
                "str",
                "Type",
                "List[str]"
            ],
            "arguments": {
                "nplayers": [
                    "int",
                    "Callable",
                    "str"
                ],
                "nturns": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "winning_score": {
            "name": "winning_score",
            "location": 21,
            "return": [
                "str",
                "dict",
                "int",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "nplayers": [
                    "str",
                    "int",
                    "Union[str,int,float]",
                    "List[int]",
                    "float"
                ],
                "nturns": [
                    "str",
                    "int",
                    "Union[str,int,float]",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day09/__init__.py": {},
    "advent-of-code-18-master/py/day12/main.py": {
        "empty_tree": {
            "name": "empty_tree",
            "location": 4,
            "return": [
                "InnerNode",
                "Optional[int]",
                "LeafNode",
                "Optional[Period]",
                "Optional[str]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "trace_path": {
            "name": "trace_path",
            "location": 9,
            "return": [
                "str",
                "bool",
                "Type",
                "Pattern"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Type[List[Any]]",
                    "Type",
                    "Pattern[str]",
                    "Pattern"
                ],
                "path": [
                    "str",
                    "Type[List[Any]]",
                    "Pattern[str]"
                ]
            }
        },
        "generate_rule_tree": {
            "name": "generate_rule_tree",
            "location": 14,
            "return": [
                "List",
                "str",
                "Optional[TreeNode]",
                "BaseException",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "mapping": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "List[libkol.types.ItemQuantity]"
                ]
            }
        },
        "apply_rules": {
            "name": "apply_rules",
            "location": 22,
            "return": [
                "Text",
                "str",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "rules": [
                    "Dict",
                    "Sequence[str]"
                ],
                "init_state": [
                    "Dict",
                    "Sequence[str]"
                ]
            }
        },
        "apply_rules_loop": {
            "name": "apply_rules_loop",
            "location": 31,
            "return": [
                "typing.Generator[typing.Union[tuple[typing.Union[int,...]],None,tuple[],str,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "rules": [
                    "Optional[Tuple[int,...]]",
                    "Tuple[Union[int,...]]",
                    "Tuple",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ],
                "state": [
                    "Optional[Tuple[int,...]]",
                    "Tuple[Union[int,...]]",
                    "Tuple",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 36,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "n": [
                    "float",
                    "int"
                ],
                "rules": [
                    "float",
                    "str",
                    "bool"
                ],
                "init_state": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "rules": [
                    "int",
                    "Dict[str,float]",
                    "bytes",
                    "str"
                ],
                "init_state": [
                    "str",
                    "int",
                    "Dict[str,float]",
                    "bytes"
                ]
            }
        },
        "parse_input": {
            "name": "parse_input",
            "location": 54,
            "return": [
                "Tuple[Union[str,bool,None,Match,dict[str,str]]]",
                "str",
                "bool",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "apply_rules.apply": {
            "name": "apply",
            "location": 23,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "node": [],
                "seq": [
                    "str"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day12/node.py": {
        "LeafNode.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "None",
                    "str",
                    "int",
                    "T"
                ],
                "warp": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "float",
                    "List[tuple[Union[int,float]]]"
                ]
            }
        },
        "InnerNode.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edges": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day12/__init__.py": {},
    "advent-of-code-18-master/py/day13/cartlib.py": {
        "next_cart_state": {
            "name": "next_cart_state",
            "location": 48,
            "return": [
                "Iterable[str]",
                "Sequence[str]",
                "int",
                "float"
            ],
            "arguments": {
                "tracks": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ],
                "cart": [
                    "float",
                    "bytes"
                ]
            }
        },
        "parse_input": {
            "name": "parse_input",
            "location": 62,
            "return": [
                "Tuple[Union[str,set[str],list[Cart]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day13/main.py": {
        "sim_steps": {
            "name": "sim_steps",
            "location": 3,
            "return": [
                "typing.Generator[tuple[typing.Union[str,str,list[tuple[typing.Union[typing.Any,typing.Any]]],list[tuple[typing.Union[float,str]]],typing.OrderedDict]]]"
            ],
            "arguments": {
                "tracks": [
                    "bool",
                    "Dict"
                ],
                "carts": [
                    "str"
                ]
            }
        },
        "first_crash_pos": {
            "name": "first_crash_pos",
            "location": 13,
            "return": [
                "Tuple",
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tracks": [
                    "int",
                    "Callable",
                    "str"
                ],
                "carts": [
                    "str",
                    "int"
                ]
            }
        },
        "find_survivor_pos": {
            "name": "find_survivor_pos",
            "location": 23,
            "return": [
                "Tuple",
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "tracks": [
                    "int",
                    "Set",
                    "str"
                ],
                "carts": [
                    "str",
                    "bool",
                    "Type",
                    "Match[str]"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day13/__init__.py": {},
    "advent-of-code-18-master/py/day14/main.py": {
        "sliding_win": {
            "name": "sliding_win",
            "location": 3,
            "return": [
                "typing.Generator[list[int]]"
            ],
            "arguments": {
                "it": [
                    "List[int]",
                    "int",
                    "Union[int,List[int]]"
                ],
                "n": [
                    "int",
                    "List[int]",
                    "Union[int,List[int]]"
                ]
            }
        },
        "digits": {
            "name": "digits",
            "location": 10,
            "return": [
                "typing.Generator[typing.Union[int,float]]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[float]"
                ]
            }
        },
        "bakery_iter": {
            "name": "bakery_iter",
            "location": 17,
            "return": [
                "typing.Generator[typing.Union[list[],list[int]]]",
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "format_scores": {
            "name": "format_scores",
            "location": 30,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "Dict",
                    "int",
                    "Union[int,str]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 38,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "find_seq": [
                    "int"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day15/main.py": {
        "render_str_game": {
            "name": "render_str_game",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "level": [
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "bool",
                    "Sequence[str]"
                ],
                "players": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "parse_input": {
            "name": "parse_input",
            "location": 25,
            "return": [
                "Tuple[list[Player]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "move_step": {
            "name": "move_step",
            "location": 37,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "str"
            ],
            "arguments": {
                "level": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "players": [
                    "str",
                    "bool",
                    "List['cirq.Qid']"
                ],
                "player_id": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "positions_around": {
            "name": "positions_around",
            "location": 68,
            "return": [
                "typing.Generator[tuple[typing.Union[int,float,int,float]]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "attack_step": {
            "name": "attack_step",
            "location": 74,
            "return": [
                "Tuple",
                "None",
                "bool",
                "Optional[bool]",
                "Dict",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "players": [
                    "int",
                    "str",
                    "List[int]",
                    "List[str]"
                ],
                "player_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[int,str]",
                    "Tuple[Optional[str],str]"
                ]
            }
        },
        "game_finished": {
            "name": "game_finished",
            "location": 88,
            "return": [
                "bool",
                "List[int]",
                "List",
                "Optional[dict]",
                "Tuple[int,int]",
                "str",
                "int",
                "List[Tuple[int,str,str]]"
            ],
            "arguments": {
                "players": [
                    "list",
                    "str"
                ]
            }
        },
        "run_game": {
            "name": "run_game",
            "location": 91,
            "return": [
                "str",
                "Tuple[int]",
                "int",
                "bool",
                "Tuple[float]",
                "List[int]",
                "float",
                "List[List[Any]]"
            ],
            "arguments": {
                "level": [
                    "int",
                    "float",
                    "bool"
                ],
                "init_players": [
                    "bytes",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Tuple[Union[Any,Any]]",
                    "int",
                    "Optional[Tuple[Any,Any]]"
                ],
                "show": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 137,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "show": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "render_str_game.rendercell": {
            "name": "rendercell",
            "location": 16,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "cell": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "move_step.next_to_enemy": {
            "name": "next_to_enemy",
            "location": 44,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "move_step.cellval": {
            "name": "cellval",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "float",
                    "List[int]",
                    "Sequence[int]"
                ]
            }
        },
        "move_step.pickorder": {
            "name": "pickorder",
            "location": 53,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "target": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day15/pathfind.py": {
        "positions_around": {
            "name": "positions_around",
            "location": 7,
            "return": [
                "typing.Generator[tuple[typing.Union[int,float,int,float]]]"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "pathfind_to_targets": {
            "name": "pathfind_to_targets",
            "location": 14,
            "return": [
                "List[tuple]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "pos": [
                    "bool",
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "cellval": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "pathfind_from_targets": {
            "name": "pathfind_from_targets",
            "location": 47,
            "return": [
                "List[tuple[Union[str,float,int,dict[bool,str]]]]",
                "int",
                "List[int]",
                "Sequence[Any]",
                "List[str]"
            ],
            "arguments": {
                "start": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "targets": [
                    "str",
                    "int"
                ],
                "cellval": [
                    "int",
                    "bool"
                ]
            }
        },
        "pathfind_to_targets.first_move": {
            "name": "first_move",
            "location": 27,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day15/__init__.py": {},
    "advent-of-code-18-master/py/day17/main.py": {
        "parse_clay": {
            "name": "parse_clay",
            "location": 6,
            "return": [
                "Dict",
                "int",
                "Set",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "clay_bounds": {
            "name": "clay_bounds",
            "location": 21,
            "return": [
                "List[Union[int,str,tuple[Union[Any,Any]],Pattern]]",
                "int",
                "str",
                "Sequence[float]",
                "List[int]"
            ],
            "arguments": {
                "clay": [
                    "Tuple[Union[float,float]]",
                    "Optional[int]",
                    "Tuple[float,float]",
                    "float"
                ]
            }
        },
        "render_str": {
            "name": "render_str",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "clay": [
                    "int",
                    "str",
                    "Type",
                    "float"
                ],
                "visited": [
                    "str",
                    "Sequence[str]"
                ],
                "blocked": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "reachable_from": {
            "name": "reachable_from",
            "location": 47,
            "return": [
                "Set[Pt]",
                "float",
                "Sequence[float]",
                "Tuple[int,int]",
                "Tuple"
            ],
            "arguments": {
                "pt": [
                    "int",
                    "float",
                    "bool"
                ],
                "clay": [
                    "int",
                    "Optional[int]"
                ],
                "blocked": [
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "runwater": {
            "name": "runwater",
            "location": 55,
            "return": [
                "Tuple[set[list[Union[int,Callable,str]]]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "water_pt": [
                    "int",
                    "Callable",
                    "str"
                ],
                "clay": [
                    "float",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "parse_clay.pt_range": {
            "name": "pt_range",
            "location": 7,
            "return": [
                "str",
                "Generator[Pt]"
            ],
            "arguments": {
                "axis": [
                    "bytes",
                    "int",
                    "List[str]",
                    "list",
                    "Iterable[int]"
                ],
                "p": [
                    "bytes",
                    "int",
                    "List[str]",
                    "list",
                    "Iterable[int]"
                ],
                "s1": [
                    "bytes",
                    "int",
                    "List[str]",
                    "list",
                    "Iterable[int]"
                ],
                "s2": [
                    "bytes",
                    "int",
                    "List[str]",
                    "list",
                    "Iterable[int]"
                ]
            }
        },
        "render_str.char": {
            "name": "char",
            "location": 29,
            "return": [
                "Text",
                "int",
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "pt": [
                    "float",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day17/__init__.py": {},
    "advent-of-code-18-master/py/day23/geo.py": {
        "mdist": {
            "name": "mdist",
            "location": 6,
            "return": [
                "Callable",
                "str",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "a": [
                    "common.Pt3"
                ],
                "b": [
                    "common.Pt3"
                ]
            }
        },
        "contains_pt": {
            "name": "contains_pt",
            "location": 11,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "pt": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "bbox": {
            "name": "bbox",
            "location": 14,
            "return": [
                "Octree",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bots": [
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "in_bbox": {
            "name": "in_bbox",
            "location": 22,
            "return": [
                "bool",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "octree": [
                    "str",
                    "common.Octree",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ],
                "bot": [
                    "str",
                    "common.Octree",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ]
            }
        },
        "in_bbox.dist": {
            "name": "dist",
            "location": 23,
            "return": [
                "int",
                "str",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Sequence[str]",
                    "Optional[Tuple[int, int]]",
                    "int",
                    "bool"
                ],
                "lower": [
                    "str",
                    "Sequence[str]",
                    "Optional[Tuple[int, int]]",
                    "int",
                    "bool"
                ],
                "upper": [
                    "str",
                    "Sequence[str]",
                    "Optional[Tuple[int, int]]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day23/main.py": {
        "parse_input": {
            "name": "parse_input",
            "location": 9,
            "return": [
                "List",
                "List[str]",
                "float",
                "ImmutableSet[T]",
                "List[Dict[str,str]]"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 17,
            "return": [
                "int",
                "List",
                "List[Dict[str,Any]]",
                "frozenset",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "bots": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "int"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 24,
            "return": [
                "int",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "bots": [
                    "str",
                    "int",
                    "List[N]",
                    "List[int]",
                    "List[geo.Nanobot]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_input.parse_line": {
            "name": "parse_line",
            "location": 10,
            "return": [
                "Nanobot",
                "int",
                "List[int]",
                "str",
                "float",
                "bytes",
                "Tuple[int]",
                "List"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "part2.push": {
            "name": "push",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "vol": [
                    "bool",
                    "str"
                ]
            }
        },
        "part2.HeapItem.key": {
            "name": "key",
            "location": 32,
            "return": [
                "Tuple",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "part2.HeapItem.__lt__": {
            "name": "__lt__",
            "location": 35,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "advent-of-code-18-master/py/day23/__init__.py": {},
    "advent-of-code-18-master/py/day24/main.py": {
        "parse_army": {
            "name": "parse_army",
            "location": 58,
            "return": [
                "Army",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "load_army": {
            "name": "load_army",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "damage_done": {
            "name": "damage_done",
            "location": 89,
            "return": [
                "int",
                "bool",
                "float",
                "str",
                "Callable[[Mapping],T]"
            ],
            "arguments": {
                "attacker": [
                    "str"
                ],
                "defender": [
                    "str"
                ]
            }
        },
        "plan_attack": {
            "name": "plan_attack",
            "location": 96,
            "return": [
                "Dict[,int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "attackers": [
                    "int",
                    "Set[str]",
                    "Iterable[Any]"
                ],
                "defenders": [
                    "str",
                    "List",
                    "Dict"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 137,
            "return": [
                "Tuple[int]",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "army1": [
                    "List[tuple[Union[int,int]]]",
                    "str",
                    "List[Tuple[int,int]]",
                    "int",
                    "bool"
                ],
                "army2": [
                    "List[tuple[Union[int,int]]]",
                    "str",
                    "List[Tuple[int,int]]",
                    "int",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 178,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[float]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "immune": [
                    "str",
                    "tuple",
                    "bool",
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[List[int]]"
                ],
                "infection": [
                    "str",
                    "Tuple",
                    "bool",
                    "float",
                    "None",
                    "Optional[float]",
                    "List[int]",
                    "int",
                    "Optional[List[int]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Group.take_damage": {
            "name": "take_damage",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "damage": [
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "Group.effective_power": {
            "name": "effective_power",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.units_remaining": {
            "name": "units_remaining",
            "location": 30,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.alive": {
            "name": "alive",
            "location": 34,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Army.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "Army.with_boost": {
            "name": "with_boost",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "boost": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "Army.alive": {
            "name": "alive",
            "location": 51,
            "return": [
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Army.units_remaining": {
            "name": "units_remaining",
            "location": 55,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_army.parse_group": {
            "name": "parse_group",
            "location": 59,
            "return": [
                "Group",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "group": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Tuple[str, str]",
                    "float"
                ]
            }
        },
        "plan_attack.turn_weight": {
            "name": "turn_weight",
            "location": 98,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "attacker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plan_attack.attack_weight": {
            "name": "attack_weight",
            "location": 101,
            "return": [
                "Tuple",
                "str",
                "List[List[str]]",
                "float",
                "int"
            ],
            "arguments": {
                "attacker_i": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "bool"
                ],
                "defender_i": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "part1.label": {
            "name": "label",
            "location": 139,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "l": [
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[T]",
                    "Mapping[str, Mapping[str, Any]]"
                ],
                "it": [
                    "float",
                    "Optional[Callable]",
                    "bool"
                ]
            }
        },
        "part1.unit_counts": {
            "name": "unit_counts",
            "location": 143,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "part2.wins_with_boost": {
            "name": "wins_with_boost",
            "location": 179,
            "return": [
                "bool",
                "str",
                "Union[str,int,float]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "boost": [
                    "int"
                ]
            }
        },
        "part2.binsearch": {
            "name": "binsearch",
            "location": 183,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "lo": [
                    "int",
                    "str",
                    "IO[str]"
                ],
                "hi": [
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Callable[[str], str]",
                    "str"
                ],
                "p": [
                    "bool",
                    "List[Tuple[int, int]]",
                    "float"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day24/__init__.py": {},
    "advent-of-code-18-master/py/day25/main.py": {
        "parse": {
            "name": "parse",
            "location": 5,
            "return": [
                "List[Pt]",
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "mdist": {
            "name": "mdist",
            "location": 12,
            "return": [
                "str",
                "Optional[int]",
                "Optional[List[int]]"
            ],
            "arguments": {
                "pt1": [
                    "int"
                ],
                "pt2": [
                    "int"
                ]
            }
        },
        "points_within": {
            "name": "points_within",
            "location": 18,
            "return": [
                "Iterable[Pt]",
                "Generator[Text]"
            ],
            "arguments": {
                "dist": [
                    "str",
                    "int",
                    "float",
                    "List[str]"
                ],
                "pt": [
                    "str",
                    "int",
                    "float",
                    "List[str]"
                ],
                "pts": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 23,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "pts": [
                    "Dict[str,Any]",
                    "Set[int]",
                    "bool",
                    "str",
                    "List[dict]",
                    "Dict[str,list[Any]]",
                    "List[Dict]",
                    "Dict[str,List[Any]]"
                ]
            }
        }
    },
    "advent-of-code-18-master/py/day25/__init__.py": {}
}
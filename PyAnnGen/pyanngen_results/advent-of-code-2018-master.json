{
    "advent-of-code-2018-master/codewars/papers_please/papers_please/inspector.py": {
        "Inspector.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Union[Dict, None]",
                    "Dict[str, Any]",
                    "Iterable",
                    "Iterable[Tuple[Any, Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Inspector.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inspector.receive_bulletin": {
            "name": "receive_bulletin",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bulletin": []
            }
        },
        "Inspector.inspect": {
            "name": "inspect",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_entrant": [
                    "dict",
                    "str"
                ]
            }
        },
        "Inspector._pass": {
            "name": "_pass",
            "location": 73,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, bool]",
                    "int"
                ]
            }
        },
        "Inspector._fail": {
            "name": "_fail",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "check": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Inspector._str_to_dict": {
            "name": "_str_to_dict",
            "location": 83,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "str_dict": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Inspector._parse_bulletin": {
            "name": "_parse_bulletin",
            "location": 88,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "bulletin": [
                    "str"
                ]
            }
        },
        "Inspector._update_list_of_nations": {
            "name": "_update_list_of_nations",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "dict"
                ]
            }
        },
        "Inspector._update_wanted_by_the_state": {
            "name": "_update_wanted_by_the_state",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "Inspector._update_required_vaccinations": {
            "name": "_update_required_vaccinations",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "int",
                    "BinaryIO",
                    "Dict[str, Any]"
                ]
            }
        },
        "Inspector._update_required_documents": {
            "name": "_update_required_documents",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "int",
                    "BinaryIO",
                    "Dict[str, Any]"
                ]
            }
        },
        "Inspector._check_denied_countries": {
            "name": "_check_denied_countries",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[int, Dict[int, Any]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Inspector._check_required_docs": {
            "name": "_check_required_docs",
            "location": 128,
            "return": [
                "typing.Tuple[builtins.bool, builtins.str]"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Inspector._check_no_conflicting_info": {
            "name": "_check_no_conflicting_info",
            "location": 131,
            "return": [
                "typing.Tuple[builtins.bool, builtins.str]"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "dict"
                ]
            }
        },
        "Inspector._check_all_docs_current": {
            "name": "_check_all_docs_current",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "dict",
                    "Mapping",
                    "Dict[str, float]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Inspector._check_not_wanted_criminal": {
            "name": "_check_not_wanted_criminal",
            "location": 145,
            "return": [
                "typing.Tuple[builtins.bool, builtins.str]"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Inspector._check_cert_of_vaccination": {
            "name": "_check_cert_of_vaccination",
            "location": 148,
            "return": [
                "typing.Tuple[builtins.bool, builtins.str]"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "dict",
                    "Iterable['Context']",
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "Inspector._check_foreigner_paperwork": {
            "name": "_check_foreigner_paperwork",
            "location": 151,
            "return": [
                "typing.Tuple[builtins.bool, builtins.str]"
            ],
            "arguments": {
                "self": [],
                "entrant": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "advent-of-code-2018-master/codewars/papers_please/papers_please/__init__.py": {},
    "advent-of-code-2018-master/codewars/papers_please/papers_please/tests/test_inspector.py": {
        "test_str_to_dict": {
            "name": "test_str_to_dict",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_bulletin": {
            "name": "test_parse_bulletin",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_denied_citizens": {
            "name": "test_denied_citizens",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_russia_denied_country": {
            "name": "test_russia_denied_country",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_allowed_denied_countries_updated": {
            "name": "test_allowed_denied_countries_updated",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expired_passport_denied": {
            "name": "test_expired_passport_denied",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2018-master/day1/main.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "Tuple[int]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2018-master/day2/main.py": {
        "get_string_similarity": {
            "name": "get_string_similarity",
            "location": 3,
            "return": [
                "Tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "s1": [
                    "list",
                    "str",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "s2": [
                    "List",
                    "str",
                    "List[Optional[str]]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "Tuple[Union[int,dict,str]]",
                "str",
                "Dict",
                "Tuple[str,Optional[str]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2018-master/day3/main.py": {
        "parse_claim": {
            "name": "parse_claim",
            "location": 8,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "claim": [
                    "str",
                    "int",
                    "Match"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "Tuple[Union[tuple[Union[float,float]],str,list[int],bytes,tuple[Union[list[Any],list[Any],list[Any]]],tuple[Union[str,str]]]]",
                "bool",
                "str",
                "Optional[bool]",
                "int",
                "Optional[bytes]"
            ],
            "arguments": {
                "inpt": [
                    "Text",
                    "str",
                    "int",
                    "List[str]"
                ],
                "width": [
                    "int"
                ],
                "length": [
                    "int"
                ],
                "draw": [
                    "bool",
                    "List[int]",
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "advent-of-code-2018-master/day4/main.py": {
        "time_generator": {
            "name": "time_generator",
            "location": 52,
            "return": [
                "typing.Generator[typing.Union[int,float]]"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "float",
                    "datetime.timedelta"
                ],
                "end_time": [
                    "int",
                    "float",
                    "Optional[int]",
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [
                "Tuple[Union[tuple,tuple[Union[str,str,str]]]]",
                "str",
                "List[int]",
                "T"
            ],
            "arguments": {
                "test": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Observation.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "Observation.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guard.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "Guard.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2018-master/day5/main.py": {
        "react_polymer": {
            "name": "react_polymer",
            "location": 7,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "polymer": [
                    "bytes",
                    "str",
                    "tuple",
                    "int"
                ]
            }
        },
        "left_bisect": {
            "name": "left_bisect",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "int",
                    "str"
                ],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "right_bisect": {
            "name": "right_bisect",
            "location": 28,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "j": [
                    "str"
                ]
            }
        },
        "recursive_react_polymer": {
            "name": "recursive_react_polymer",
            "location": 31,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "list",
                    "List[List[Any]]",
                    "List[List[int]]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "find_smallest_polymer_possible": {
            "name": "find_smallest_polymer_possible",
            "location": 55,
            "return": [
                "int",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [
                "Tuple[Union[int,list[str],list,dict,list[float]]]",
                "str",
                "List",
                "List[Tuple[str,str]]",
                "Set[str]",
                "List[Tuple[str,Any,str]]",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2018-master/day6/main.py": {
        "find_closest_point": {
            "name": "find_closest_point",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "coord": [
                    "int",
                    "Set",
                    "str"
                ],
                "points": [
                    "Set",
                    "str",
                    "int"
                ]
            }
        },
        "find_sum_distances": {
            "name": "find_sum_distances",
            "location": 17,
            "return": [
                "bool",
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "coord": [
                    "int",
                    "Set",
                    "str"
                ],
                "points": [
                    "Set",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "bytes",
                    "list",
                    "List[int]"
                ],
                "threshold": [
                    "str",
                    "Dict",
                    "bytes",
                    "Sequence[str]"
                ]
            }
        }
    },
    "advent-of-code-2018-master/day7/main.py": {
        "read_sample": {
            "name": "read_sample",
            "location": 6,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "read_input": {
            "name": "read_input",
            "location": 18,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "Callable[[List], List[str]]"
            ],
            "arguments": {}
        },
        "parse_instruction": {
            "name": "parse_instruction",
            "location": 23,
            "return": [
                "Tuple",
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "instruction": [
                    "str"
                ]
            }
        },
        "generate_graph": {
            "name": "generate_graph",
            "location": 30,
            "return": [
                "Dict[Union[list,dict,str,list[str]],Node]",
                "int",
                "Iterable[str]",
                "Union[int,slice]",
                "Set[int]"
            ],
            "arguments": {
                "instructions": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "find_path": {
            "name": "find_path",
            "location": 42,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "nodes": []
            }
        },
        "vprint": {
            "name": "vprint",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bytes"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Mapping[str,str]",
                    "List[List[str]]",
                    "Dict"
                ]
            }
        },
        "generate_graph2": {
            "name": "generate_graph2",
            "location": 80,
            "return": [
                "Dict[Union[list,dict,tuple[Union[float,Any]],Sequence[str],list[str],set],Node2]",
                "int",
                "Iterable[str]",
                "Union[int,slice]",
                "Set[int]"
            ],
            "arguments": {
                "instructions": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "offset": [
                    "bool",
                    "int"
                ]
            }
        },
        "do_work": {
            "name": "do_work",
            "location": 92,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Dict[str,Any]",
                "float",
                "Callable"
            ],
            "arguments": {
                "nodes": [
                    "Dict[str,Any]",
                    "float"
                ],
                "num_workers": [
                    "str",
                    "Dict[str,Any]",
                    "Union[Dict,List]",
                    "Dict",
                    "List"
                ],
                "verbose": [
                    "bool",
                    "Optional[int]",
                    "Callable",
                    "Union[float,None]",
                    "Union[bool,None]",
                    "Union[int,None]"
                ]
            }
        },
        "Node2.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ID": [
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "offset": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Node2.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node2.get_duration": {
            "name": "get_duration",
            "location": 73,
            "return": [
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
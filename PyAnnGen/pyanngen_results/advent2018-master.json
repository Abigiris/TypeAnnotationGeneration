{
    "advent2018-master/src/advent/alchemical_reduction.py": {
        "_react_list": {
            "name": "_react_list",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "polymer_list": [
                    "List[str]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "polymer_input": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "polymer_input": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/a_regular_map.py": {
        "process_map_path": {
            "name": "process_map_path",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "map_regex_iter": [
                    "Iterator[str]"
                ],
                "map_nodes": [
                    "Dict[(Tuple[(int, int)], int)]"
                ],
                "start_location": [
                    "Tuple[(int, int)]"
                ],
                "start_distance": [
                    "int"
                ]
            }
        },
        "process_map_regex": {
            "name": "process_map_regex",
            "location": 46,
            "return": [
                "Dict[(Tuple[(int, int)], int)]"
            ],
            "arguments": {
                "map_regex_iter": [
                    "Iterator[str]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "map_regex": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "map_regex": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/beverage_bandits.py": {
        "part1": {
            "name": "part1",
            "location": 202,
            "return": [
                "int"
            ],
            "arguments": {
                "battle_map_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 209,
            "return": [
                "int"
            ],
            "arguments": {
                "battle_map_text": [
                    "str"
                ]
            }
        },
        "Vector.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Vector.__add__": {
            "name": "__add__",
            "location": 17,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "Vector"
                ]
            }
        },
        "Vector.__lt__": {
            "name": "__lt__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vector"
                ]
            }
        },
        "Vector.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Vector.__hash__": {
            "name": "__hash__",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.distance": {
            "name": "distance",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Vector"
                ]
            }
        },
        "Vector.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hit_points": [
                    "int"
                ],
                "allegiance": [
                    "str"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "attack_power": [
                    "int"
                ]
            }
        },
        "Actor.distance": {
            "name": "distance",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Actor.in_range": {
            "name": "in_range",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[float]",
                    "int",
                    "float",
                    "AbstractSet[T]",
                    "None",
                    "AbstractSet[T_co]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Actor.is_enemy": {
            "name": "is_enemy",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "typing.Type",
                    "Generic",
                    "typing.Generic",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Actor.__lt__": {
            "name": "__lt__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Actor.attack": {
            "name": "attack",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Actor"
                ]
            }
        },
        "Actor.take_damage": {
            "name": "take_damage",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "damage_amount": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]",
                    "Dict[int, Tuple[int, int]]",
                    "dict[int, tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "Actor.move": {
            "name": "move",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "Vector"
                ]
            }
        },
        "Actor.alive": {
            "name": "alive",
            "location": 74,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.adjacent": {
            "name": "adjacent",
            "location": 78,
            "return": [
                "list[]",
                "int",
                "List[str]",
                "Tuple[int]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battle.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "battle_map_text": [
                    "str"
                ],
                "elf_attack_power": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "list",
                    "bytes"
                ]
            }
        },
        "Battle.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battle.is_empty": {
            "name": "is_empty",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "bytes",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "Battle.move": {
            "name": "move",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actor": [
                    "int",
                    "Callable",
                    "str"
                ],
                "direction": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Battle.attack": {
            "name": "attack",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actor": [
                    "Actor"
                ],
                "target": [
                    "Actor"
                ]
            }
        },
        "Battle.outcome": {
            "name": "outcome",
            "location": 131,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battle.simulate": {
            "name": "simulate",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battle.simulate._nearest_movement_direction": {
            "name": "_nearest_movement_direction",
            "location": 135,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "point": [
                    "bytes"
                ],
                "targets": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/chocolate_charts.py": {
        "_gen_score_sequence": {
            "name": "_gen_score_sequence",
            "location": 11,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "initial_scores": [
                    "List[int]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "initial_scores": [
                    "List[int]"
                ],
                "attempted_recipes": [
                    "int"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "initial_scores": [
                    "List[int]"
                ],
                "match_sequence_str": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/chronal_calibration.py": {
        "part1": {
            "name": "part1",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "adjustments": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "adjustments": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/chronal_charge.py": {
        "power_level": {
            "name": "power_level",
            "location": 12,
            "return": [
                "int",
                "str",
                "Tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "serial": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "grid_power_levels": {
            "name": "grid_power_levels",
            "location": 17,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "serial": [
                    "int"
                ],
                "size": [
                    "int",
                    "Optional[Collection[int]]",
                    "float"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 32,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "serial": [
                    "int"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 41,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "serial": [
                    "int"
                ]
            }
        }
    },
    "advent2018-master/src/advent/chronal_classification.py": {
        "_exec": {
            "name": "_exec",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "reg": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[str]"
                ],
                "loc": [
                    "str"
                ],
                "res": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 36,
            "return": [
                "int",
                "bool",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "sample_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "sample_text": [
                    "str"
                ],
                "program_text": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/chronal_conversion.py": {
        "_value_of_r3": {
            "name": "_value_of_r3",
            "location": 9,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "part1": {
            "name": "part1",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/src/advent/chronal_coordinates.py": {
        "text_to_points": {
            "name": "text_to_points",
            "location": 10,
            "return": [
                "Iterator[Tuple[(int, int)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "manhattan": {
            "name": "manhattan",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "Tuple[(int, int)]"
                ],
                "b": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "inside": {
            "name": "inside",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Tuple[(int, int)]"
                ],
                "low": [
                    "Tuple[(int, int)]"
                ],
                "high": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "input_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "input_text": [
                    "str"
                ],
                "threshold": [
                    "int"
                ]
            }
        }
    },
    "advent2018-master/src/advent/experimental_emergency_teleportation.py": {
        "_parse_coordinate_text": {
            "name": "_parse_coordinate_text",
            "location": 11,
            "return": [
                "List[Tuple[(Tuple[(int, ...)], int)]]"
            ],
            "arguments": {
                "coordinate_text": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "coordinate_text": [
                    "str"
                ]
            }
        },
        "_count_overlap": {
            "name": "_count_overlap",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "nanobots": [
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_count_in_range": {
            "name": "_count_in_range",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "nanobots": [
                    "str",
                    "float",
                    "Optional[Iterable]",
                    "int"
                ],
                "coordinates": [
                    "str",
                    "float",
                    "int",
                    "Optional[Iterable]",
                    "typing.Iterable[]",
                    "None"
                ]
            }
        },
        "_sample_range": {
            "name": "_sample_range",
            "location": 50,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "nanobots": [
                    "bool",
                    "List[List[int]]",
                    "List[dict]"
                ],
                "left_coordinate": [
                    "bool",
                    "str",
                    "List[float]",
                    "list[float]"
                ],
                "right_coordinate": [
                    "bool",
                    "str",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "_search_axis": {
            "name": "_search_axis",
            "location": 67,
            "return": [
                "bool",
                "dict",
                "str",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {
                "axis": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "left_coordinate": [
                    "bool",
                    "int"
                ],
                "right_coordinate": [
                    "bool",
                    "int"
                ],
                "nanobots": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Optional[Callable]",
                    "Callable",
                    "Optional[Callable[[], None]]",
                    "dict"
                ]
            }
        },
        "_nanobots_range": {
            "name": "_nanobots_range",
            "location": 88,
            "return": [
                "Tuple[(Tuple[(Any, Any, Any)], Tuple[(Any, Any, Any)])]"
            ],
            "arguments": {
                "nanobots": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "coordinate_text": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/four_dimensional_adventure.py": {
        "parse": {
            "name": "parse",
            "location": 50,
            "return": [
                "Iterable[Tuple[(int, ...)]]"
            ],
            "arguments": {
                "puzzle_input": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle_input": [
                    "str"
                ]
            }
        },
        "KdTree.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "float",
                    "bool"
                ],
                "points": [
                    "Iterable[Tuple[(int, ...)]]"
                ]
            }
        },
        "KdTree.build_tree": {
            "name": "build_tree",
            "location": 19,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "List[Tuple[(int, ...)]]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "KdTree.points_in_range": {
            "name": "points_in_range",
            "location": 32,
            "return": [
                "List[Tuple[(int, ...)]]"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "Tuple[(int, ...)]"
                ],
                "distance": [
                    "int"
                ]
            }
        },
        "KdTree.points_in_range._search_points_in_range": {
            "name": "_search_points_in_range",
            "location": 33,
            "return": [
                "list[]",
                "str",
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "bytes",
                "list"
            ],
            "arguments": {
                "node": [
                    "List[str]"
                ],
                "depth": [
                    "List[str]",
                    "int",
                    "Sequence[Sequence[Any]]",
                    "List[List]"
                ]
            }
        }
    },
    "advent2018-master/src/advent/go_with_the_flow.py": {
        "_execute": {
            "name": "_execute",
            "location": 13,
            "return": [
                "Iterator[List[int]]"
            ],
            "arguments": {
                "ip": [
                    "int",
                    "List[Tuple[str, Any]]",
                    "str",
                    "bytes"
                ],
                "text": [
                    "List[Tuple[(str, List[int])]]"
                ],
                "ip_register": [
                    "int"
                ],
                "registers": [
                    "List[int]"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 22,
            "return": [
                "Tuple[(List[Tuple[(str, List[int])]], int)]"
            ],
            "arguments": {
                "program_text": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "program_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "program_text": [
                    "str"
                ]
            }
        },
        "part2_patch": {
            "name": "part2_patch",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "program_text": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/immune_system_simulator_20xx.py": {
        "parse_unit_description": {
            "name": "parse_unit_description",
            "location": 40,
            "return": [
                "Unit"
            ],
            "arguments": {
                "unit_description": [
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 61,
            "return": [
                "Tuple[(List[Unit], List[Unit])]"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "choose_targets": {
            "name": "choose_targets",
            "location": 79,
            "return": [
                "Dict[(Unit, Unit)]"
            ],
            "arguments": {
                "immune": [
                    "List[Unit]"
                ],
                "infection": [
                    "List[Unit]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "_simulate_battle": {
            "name": "_simulate_battle",
            "location": 104,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "immune": [
                    "_T0"
                ],
                "infection": [
                    "_T1"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "Unit.effective_strength": {
            "name": "effective_strength",
            "location": 14,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.attack_order": {
            "name": "attack_order",
            "location": 18,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit._attack_multiplier": {
            "name": "_attack_multiplier",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attacker": [
                    "bool",
                    "SupportsFloat"
                ]
            }
        },
        "Unit.effective_damage": {
            "name": "effective_damage",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "defender": [
                    "Unit"
                ]
            }
        },
        "Unit.defend_order": {
            "name": "defend_order",
            "location": 34,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "self": [],
                "attacker": [
                    "Unit"
                ]
            }
        },
        "choose_targets._add_attackers": {
            "name": "_add_attackers",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attackers": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Set[str]]"
                ],
                "defenders": [
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "advent2018-master/src/advent/inventory_management_system.py": {
        "is_letter_repeated_2_3_times": {
            "name": "is_letter_repeated_2_3_times",
            "location": 10,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "box_id": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "box_ids": [
                    "str"
                ]
            }
        },
        "common_characters": {
            "name": "common_characters",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "this": [
                    "str"
                ],
                "that": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "box_ids_text": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/marble_mania.py": {
        "part1": {
            "name": "part1",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "players": [
                    "int"
                ],
                "last_marble": [
                    "int"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "players": [
                    "int"
                ],
                "last_marble": [
                    "int"
                ]
            }
        }
    },
    "advent2018-master/src/advent/memory_maneuver.py": {
        "part1": {
            "name": "part1",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "license_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "license_text": [
                    "str"
                ]
            }
        },
        "part1.process_record": {
            "name": "process_record",
            "location": 12,
            "return": [
                "list[]"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "part2.process_record": {
            "name": "process_record",
            "location": 27,
            "return": [
                "list[]",
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "list",
                    "Optional[int]",
                    "List[int]"
                ],
                "parent": [
                    "int",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "advent2018-master/src/advent/mine_cart_madness.py": {},
    "advent2018-master/src/advent/mode_maze.py": {
        "erosion_level": {
            "name": "erosion_level",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coords": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "depth": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "geologic_index": {
            "name": "geologic_index",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coords": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]"
                ],
                "depth": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "coords": [
                    "Tuple[(int, int)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "_valid_tools": {
            "name": "_valid_tools",
            "location": 39,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "location": [
                    "Tuple[(int, int)]"
                ],
                "depth": [
                    "int"
                ],
                "target": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "target": [
                    "Tuple[(int, int)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minutes_elapsed": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "location": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "equipped": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "None",
                    "bool",
                    "List[str]",
                    "tuple[]",
                    "list[str]",
                    "int"
                ],
                "target": [
                    "tuple[]",
                    "int",
                    "tuple",
                    "dict"
                ]
            }
        },
        "Action.__lt__": {
            "name": "__lt__",
            "location": 62,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "advent2018-master/src/advent/no_matter_how_you_slice_it.py": {
        "parse_claims_text": {
            "name": "parse_claims_text",
            "location": 51,
            "return": [
                "Iterator[Claim]"
            ],
            "arguments": {
                "claims_text": [
                    "str"
                ]
            }
        },
        "_generate_y_events": {
            "name": "_generate_y_events",
            "location": 64,
            "return": [
                "Iterator[Tuple[(int, Claim)]]"
            ],
            "arguments": {
                "claims": [
                    "Iterator[Claim]"
                ]
            }
        },
        "_generate_x_events": {
            "name": "_generate_x_events",
            "location": 70,
            "return": [
                "Iterator[Tuple[(int, Claim)]]"
            ],
            "arguments": {
                "claims": [
                    "Iterator[Claim]"
                ]
            }
        },
        "_scan_claims": {
            "name": "_scan_claims",
            "location": 76,
            "return": [
                "Iterator[Tuple[(Set[Claim], Rect)]]"
            ],
            "arguments": {
                "claims": [
                    "Iterator[Claim]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "claims_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "claims_text": [
                    "str"
                ]
            }
        },
        "Rect.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "int"
                ],
                "y1": [
                    "int"
                ],
                "x2": [
                    "int"
                ],
                "y2": [
                    "int"
                ]
            }
        },
        "Rect.area": {
            "name": "area",
            "location": 18,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Rect.__hash__": {
            "name": "__hash__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Claim.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Claim.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "object"
                ]
            }
        },
        "Claim.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Claim.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent2018-master/src/advent/reservoir_research.py": {
        "generate_map": {
            "name": "generate_map",
            "location": 11,
            "return": [
                "Tuple[(Tuple[(int, int)], List[List[str]])]"
            ],
            "arguments": {
                "scan_locations": [
                    "str"
                ]
            }
        },
        "_tile_totals": {
            "name": "_tile_totals",
            "location": 68,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "offset": [
                    "Tuple[(int, int)]"
                ],
                "map_": [
                    "List[List[str]]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "scan_locations": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "scan_locations": [
                    "str"
                ]
            }
        },
        "_tile_totals._scan_and_fill_horiz": {
            "name": "_scan_and_fill_horiz",
            "location": 70,
            "return": [
                "None",
                "Optional[str]",
                "tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "location": [
                    "List[Tuple[str, str]]",
                    "Iterable[Iterable[T]]",
                    "Tuple[int, int]"
                ]
            }
        },
        "_tile_totals._scan_and_fill": {
            "name": "_scan_and_fill",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "location": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "advent2018-master/src/advent/response_record.py": {
        "_guard_sleep_journal": {
            "name": "_guard_sleep_journal",
            "location": 12,
            "return": [
                "Tuple[(Dict[(int, int)], Dict[(int, List[Tuple[(int, int)]])])]"
            ],
            "arguments": {
                "response_record_text": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "response_record_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "response_record_text": [
                    "str"
                ]
            }
        },
        "impl1": {
            "name": "impl1",
            "location": 87,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "response_record_text": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/settlers_of_the_north_pole.py": {
        "parse": {
            "name": "parse",
            "location": 10,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "input_map_str": [
                    "str"
                ]
            }
        },
        "resource_value": {
            "name": "resource_value",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "map_": [
                    "List[List[str]]"
                ]
            }
        },
        "map_str": {
            "name": "map_str",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "map_": [
                    "List[List[str]]"
                ]
            }
        },
        "next_state": {
            "name": "next_state",
            "location": 25,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "map_": [
                    "List[List[str]]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "input_map_str": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "input_map_str": [
                    "str"
                ],
                "minutes": [
                    "int"
                ]
            }
        }
    },
    "advent2018-master/src/advent/subterranean_sustainability.py": {
        "_parser": {
            "name": "_parser",
            "location": 11,
            "return": [
                "Tuple[(List[bool], Dict[(Tuple[(bool, ...)], bool)])]"
            ],
            "arguments": {
                "growth_rules": [
                    "str"
                ]
            }
        },
        "_next_state": {
            "name": "_next_state",
            "location": 22,
            "return": [
                "Tuple[(List[bool], int)]"
            ],
            "arguments": {
                "state": [
                    "List[bool]"
                ],
                "rules": [
                    "Dict[(Tuple[(bool, ...)], bool)]"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "_print_state": {
            "name": "_print_state",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "List[bool]"
                ]
            }
        },
        "_final_state": {
            "name": "_final_state",
            "location": 42,
            "return": [
                "Tuple[(List[bool], int)]"
            ],
            "arguments": {
                "state": [
                    "List[bool]"
                ],
                "rules": [
                    "Dict[(Tuple[(bool, ...)], bool)]"
                ],
                "generations": [
                    "int"
                ]
            }
        },
        "answer": {
            "name": "answer",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "growth_rules": [
                    "str"
                ],
                "generations": [
                    "int"
                ]
            }
        },
        "_next_state.window_state": {
            "name": "window_state",
            "location": 24,
            "return": [
                "",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "window_size": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "dict",
                    "bool",
                    "List[bool]",
                    "list",
                    "tuple"
                ]
            }
        }
    },
    "advent2018-master/src/advent/the_stars_align.py": {
        "parser": {
            "name": "parser",
            "location": 11,
            "return": [
                "List[Tuple[(Tuple[(int, ...)], ...)]]"
            ],
            "arguments": {
                "particles_text": [
                    "str"
                ]
            }
        },
        "_bounds": {
            "name": "_bounds",
            "location": 21,
            "return": [
                "Tuple[(Tuple[(int, int)], Tuple[(int, int)])]"
            ],
            "arguments": {
                "particles": [
                    "List[Tuple[(Tuple[(int, ...)], ...)]]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 31,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "particles_text": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/src/advent/the_sum_of_its_parts.py": {
        "_parse": {
            "name": "_parse",
            "location": 10,
            "return": [
                "Tuple[(Set[str], Dict[(str, List[str])])]"
            ],
            "arguments": {
                "instructions_text": [
                    "str"
                ]
            }
        },
        "_common": {
            "name": "_common",
            "location": 23,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "instructions_text": [
                    "str"
                ],
                "parallelism": [
                    "int"
                ],
                "ticks_offset": [
                    "int"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "instructions_text": [
                    "str"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "instructions_text": [
                    "str"
                ],
                "workers": [
                    "int"
                ],
                "base_time": [
                    "int"
                ]
            }
        }
    },
    "advent2018-master/src/advent/__init__.py": {},
    "advent2018-master/src/advent/input/__init__.py": {
        "text": {
            "name": "text",
            "location": 9,
            "return": [
                "type",
                "NamedTuple",
                "bool"
            ],
            "arguments": {
                "input_name": [
                    "str"
                ]
            }
        }
    },
    "advent2018-master/tests/test_alchemical_reduction.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_a_regular_map.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "map_regex": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "furthest_room": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_beverage_bandits.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_battle_map": {
            "name": "test_battle_map",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_battle_actors": {
            "name": "test_battle_actors",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_battle_start_at_round_zero": {
            "name": "test_battle_start_at_round_zero",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_battle_str_matches_text": {
            "name": "test_battle_str_matches_text",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_battle_actors_health": {
            "name": "test_battle_actors_health",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_battle_space_is_empty": {
            "name": "test_battle_space_is_empty",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "y": [
                    "bool"
                ],
                "is_empty": [
                    "bool"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_chocolate_charts.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recipes": [
                    "int"
                ],
                "next_scores": [
                    "int"
                ]
            }
        },
        "test_part2": {
            "name": "test_part2",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recipes": [
                    "str",
                    "int"
                ],
                "sequence": [
                    "str",
                    "int"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_chronal_calibration.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "adjustment": [
                    "Type",
                    "str",
                    "typing.Type"
                ],
                "frequency": [
                    "Type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_part2": {
            "name": "test_part2",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "adjustment": [
                    "Type",
                    "str",
                    "typing.Type"
                ],
                "frequency": [
                    "Type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_chronal_charge.py": {
        "test_power_level": {
            "name": "test_power_level",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_power_levels": {
            "name": "test_power_levels",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "params": [
                    "str",
                    "float"
                ],
                "level": [
                    "str",
                    "float"
                ]
            }
        },
        "test_part1": {
            "name": "test_part1",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "serial": [
                    "str",
                    "bytes"
                ],
                "coordinates": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_part2": {
            "name": "test_part2",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "serial": [
                    "str",
                    "bytes"
                ],
                "coordinates": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_chronal_classification.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_chronal_conversion.py": {
        "test_part1_based_on_puzzle_input": {
            "name": "test_part1_based_on_puzzle_input",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_based_on_puzzle_input": {
            "name": "test_part2_based_on_puzzle_input",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_chronal_coordinates.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_experimental_emergency_teleportation.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_four_dimensional_adventure.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "puzzle_input": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "constellations": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "test_kdtree": {
            "name": "test_kdtree",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kdtree_points_in_range": {
            "name": "test_kdtree_points_in_range",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_go_with_the_flow.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_immune_system_simulator_20xx.py": {
        "test_parse_unit_description": {
            "name": "test_parse_unit_description",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "description": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "unit": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_parse": {
            "name": "test_parse",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1": {
            "name": "test_part1",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_target_defenders": {
            "name": "test_target_defenders",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unit_effective_strength": {
            "name": "test_unit_effective_strength",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_inventory_management_system.py": {
        "test_is_letter_repeated_2_3_times": {
            "name": "test_is_letter_repeated_2_3_times",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "box_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "count": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "test_part1": {
            "name": "test_part1",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_common_characters": {
            "name": "test_common_characters",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "this": [
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "that": [
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "common": [
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_marble_mania.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": [],
                "score": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_part2": {
            "name": "test_part2",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": [],
                "score": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_memory_maneuver.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_mine_cart_madness.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cart_turn": {
            "name": "test_cart_turn",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cart_order": {
            "name": "test_cart_order",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "high_pos": [
                    "str",
                    "float"
                ],
                "low_pos": [
                    "str",
                    "float"
                ]
            }
        },
        "test_part1_collision_order": {
            "name": "test_part1_collision_order",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_mode_maze.py": {
        "test_geologic_index": {
            "name": "test_geologic_index",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "float"
                ],
                "index": [
                    "str",
                    "float"
                ]
            }
        },
        "test_erosion_level": {
            "name": "test_erosion_level",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "float"
                ],
                "depth": [
                    "str",
                    "float"
                ],
                "level": [
                    "str",
                    "float"
                ]
            }
        },
        "test_part1": {
            "name": "test_part1",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_no_matter_how_you_slice_it.py": {
        "test_claims": {
            "name": "test_claims",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1": {
            "name": "test_part1",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_reservoir_research.py": {
        "test_map": {
            "name": "test_map",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1": {
            "name": "test_part1",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_response_record.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impl1": {
            "name": "test_impl1",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_settlers_of_the_north_pole.py": {
        "test_parse_map": {
            "name": "test_parse_map",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resource_value": {
            "name": "test_resource_value",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_state": {
            "name": "test_next_state",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1": {
            "name": "test_part1",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_subterranean_sustainability.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_data": {
            "name": "test_part1_with_puzzle_data",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_data": {
            "name": "test_part2_with_puzzle_data",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_the_stars_align.py": {
        "test_parser": {
            "name": "test_parser",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1": {
            "name": "test_part1",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "advent2018-master/tests/test_the_sum_of_its_parts.py": {
        "test_part1": {
            "name": "test_part1",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2": {
            "name": "test_part2",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part1_with_puzzle_input": {
            "name": "test_part1_with_puzzle_input",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part2_with_puzzle_input": {
            "name": "test_part2_with_puzzle_input",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
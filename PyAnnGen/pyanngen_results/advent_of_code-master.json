{
    "advent_of_code-master/main.py": {
        "cli": {
            "name": "cli",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "solve": {
            "name": "solve",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "solver": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "float"
                ],
                "year": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "day": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "part": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Solver.main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "year": [
                    "int",
                    "List[str]"
                ],
                "day": [
                    "int",
                    "List[str]"
                ],
                "part": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/__init__.py": {},
    "advent_of_code-master/src/utils/cli.py": {
        "YearType.convert": {
            "name": "convert",
            "location": 21,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "DayType.convert": {
            "name": "convert",
            "location": 36,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "PartType.convert": {
            "name": "convert",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        }
    },
    "advent_of_code-master/src/utils/__init__.py": {},
    "advent_of_code-master/src/year2015/day01a.py": {
        "solve": {
            "name": "solve",
            "location": 26,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day01b.py": {
        "solve": {
            "name": "solve",
            "location": 17,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day02a.py": {
        "process_data": {
            "name": "process_data",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 46,
            "return": [
                "bool",
                "List",
                "Optional[Union[str,Any]]",
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day02b.py": {
        "solve": {
            "name": "solve",
            "location": 31,
            "return": [
                "bool",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day03a.py": {
        "visit_houses": {
            "name": "visit_houses",
            "location": 38,
            "return": [
                "collections.defaultdict[(Coordinates, Any)]"
            ],
            "arguments": {
                "task": [
                    "List",
                    "Optional[List]",
                    "Callable",
                    "Exception",
                    "Callable[...,T]",
                    "Type[T]",
                    "Iterable[Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "bool",
                    "Optional[Set[str]]",
                    "Callable",
                    "Set[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day03b.py": {
        "solve": {
            "name": "solve",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "dict",
                    "RuntimeError",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day04a.py": {
        "solve": {
            "name": "solve",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]"
                ],
                "zeros": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day04b.py": {
        "solve": {
            "name": "solve",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day05a.py": {
        "process_data": {
            "name": "process_data",
            "location": 38,
            "return": [
                "str",
                "bytes",
                "Dict[str,List[int]]",
                "List",
                "Dict",
                "Optional[float]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "is_nice": {
            "name": "is_nice",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 68,
            "return": [
                "bool",
                "int",
                "Set[int]",
                "List",
                "str"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day05b.py": {
        "is_nice": {
            "name": "is_nice",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 53,
            "return": [
                "bool",
                "int",
                "Set[int]",
                "List",
                "str"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day06a.py": {
        "process_data": {
            "name": "process_data",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "update_light": {
            "name": "update_light",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "command": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[bool]",
                    "str"
                ],
                "light": [
                    "Dict[str,Any]",
                    "float",
                    "Set",
                    "bool"
                ]
            }
        },
        "compute_result": {
            "name": "compute_result",
            "location": 77,
            "return": [
                "bool",
                "List[str]",
                "List",
                "List[Tuple[Any,...]]",
                "List[Dict[str,str]]",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Callable"
                ],
                "execute": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 100,
            "return": [
                "List[List[int]]",
                "bool",
                "int",
                "Set[Hashable]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day06b.py": {
        "update_light": {
            "name": "update_light",
            "location": 30,
            "return": [
                "int",
                "float",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[bool]",
                    "str"
                ],
                "light": [
                    "float",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 49,
            "return": [
                "List[List[int]]",
                "bool",
                "int",
                "Set[Hashable]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/day07a.py": {
        "process_data": {
            "name": "process_data",
            "location": 67,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_value": {
            "name": "get_value",
            "location": 96,
            "return": [
                "str",
                "Dict",
                "int",
                "None",
                "List",
                "float"
            ],
            "arguments": {
                "wire": [
                    "int"
                ],
                "wires": [
                    "Dict",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 140,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "HDict.__hash__": {
            "name": "__hash__",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2015/day07b.py": {
        "solve": {
            "name": "solve",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2015/__init__.py": {},
    "advent_of_code-master/src/year2016/day01a.py": {
        "processed_data": {
            "name": "processed_data",
            "location": 78,
            "return": [
                "List[Instruction]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int"
                ]
            }
        },
        "update_direction": {
            "name": "update_direction",
            "location": 83,
            "return": [
                "None",
                "int",
                "Optional[bool]",
                "str",
                "List[str]",
                "bool",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "direction": [
                    "bool",
                    "str",
                    "Dict"
                ],
                "turn": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 93,
            "return": [
                "str",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "Tuple[int,int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Point.move": {
            "name": "move",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "distance": [
                    "int",
                    "List[tuple[Union[int,int,str]]]",
                    "List[Tuple[int,int,str]]",
                    "Iterable[Any]",
                    "Iterable"
                ]
            }
        },
        "Point.distance_from_zero": {
            "name": "distance_from_zero",
            "location": 65,
            "return": [
                "int",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 73,
            "return": [
                "bool",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day01b.py": {
        "in_between": {
            "name": "in_between",
            "location": 21,
            "return": [
                "Generator[(src.year2016.day01a.Point, Any, None)]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "src.year2016.day1a.Point",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "end": [
                    "int",
                    "str",
                    "src.year2016.day1a.Point"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 46,
            "return": [
                "str",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day02a.py": {
        "processed_data": {
            "name": "processed_data",
            "location": 135,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Keypad.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int"
                ],
                "row": [
                    "int",
                    "Optional[int]"
                ],
                "col": [
                    "int"
                ]
            }
        },
        "Keypad.move": {
            "name": "move",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "int",
                    "float"
                ],
                "times": [
                    "int",
                    "float"
                ]
            }
        },
        "Keypad.can_move_up": {
            "name": "can_move_up",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keypad.can_move_right": {
            "name": "can_move_right",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keypad.can_move_down": {
            "name": "can_move_down",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keypad.can_move_left": {
            "name": "can_move_left",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keypad.complete_layout": {
            "name": "complete_layout",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keypad.current_digit": {
            "name": "current_digit",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2016/day02b.py": {
        "solve": {
            "name": "solve",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day03a.py": {
        "process_data": {
            "name": "process_data",
            "location": 24,
            "return": [
                "List[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "is_bad": {
            "name": "is_bad",
            "location": 41,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "triangle": [
                    "str",
                    "int"
                ]
            }
        },
        "count_possible": {
            "name": "count_possible",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "triangles": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day03b.py": {
        "process_data": {
            "name": "process_data",
            "location": 27,
            "return": [
                "List[Tuple[(nothing, nothing, nothing)]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day04a.py": {
        "process_data": {
            "name": "process_data",
            "location": 39,
            "return": [
                "List[Room]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Union[Contributor,Coverage]"
                ]
            }
        },
        "is_real": {
            "name": "is_real",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "room": [
                    "bool",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 65,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day04b.py": {
        "shift": {
            "name": "shift",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "char": [
                    "str",
                    "int",
                    "T"
                ],
                "key": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "decipher": {
            "name": "decipher",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "ciphered_name": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "key": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day05a.py": {
        "solve": {
            "name": "solve",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day05b.py": {
        "print_password": {
            "name": "print_password",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day06a.py": {
        "process_data": {
            "name": "process_data",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Union[Contributor,Coverage]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day06b.py": {
        "solve": {
            "name": "solve",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day07a.py": {
        "process_line": {
            "name": "process_line",
            "location": 96,
            "return": [
                "IP"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "process_date": {
            "name": "process_date",
            "location": 117,
            "return": [
                "List[IP]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Sequence[str]",
                    "Dict",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "int",
                    "str"
                ]
            }
        },
        "IP.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supernet_parts": [
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "List",
                    "None",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]"
                ],
                "hypernet_parts": [
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "List",
                    "None",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "IP._has_abba": {
            "name": "_has_abba",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "part": [
                    "List[Tuple[int, int]]",
                    "List[dict]",
                    "list",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "float",
                    "str",
                    "List[Tuple[int, Any]]"
                ]
            }
        },
        "IP.support_tls": {
            "name": "support_tls",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IP.abas": {
            "name": "abas",
            "location": 69,
            "return": [
                "Generator[str,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "IP.support_ssl": {
            "name": "support_ssl",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IP.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/day07b.py": {
        "solve": {
            "name": "solve",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2016/__init__.py": {},
    "advent_of_code-master/src/year2017/day01a.py": {
        "solve": {
            "name": "solve",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day01b.py": {
        "solve": {
            "name": "solve",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day02a.py": {
        "process_data": {
            "name": "process_data",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 42,
            "return": [
                "bool",
                "List",
                "Optional[Union[str,Any]]",
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day02b.py": {
        "find_division": {
            "name": "find_division",
            "location": 37,
            "return": [
                "int",
                "bool",
                "Callable",
                "Dict[str,Union[str,int]]"
            ],
            "arguments": {
                "row": [
                    "List[int]",
                    "List[str]",
                    "Iterable[object]",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 48,
            "return": [
                "bool",
                "str",
                "Optional[Union[str,Any]]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day03a.py": {
        "get_circle_number": {
            "name": "get_circle_number",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "get_deviation": {
            "name": "get_deviation",
            "location": 70,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "str"
                ],
                "circle": [
                    "bool",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 91,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "task": [
                    "int",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day03b.py": {
        "solve": {
            "name": "solve",
            "location": 108,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "task": [
                    "int",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "bool"
                ]
            }
        },
        "Memory.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.side_length": {
            "name": "side_length",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Memory.adjust_direction": {
            "name": "adjust_direction",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Memory.neighbors": {
            "name": "neighbors",
            "location": 79,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.sum_neighbors": {
            "name": "sum_neighbors",
            "location": 87,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.__iter__": {
            "name": "__iter__",
            "location": 91,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2017/day04a.py": {
        "duplicates": {
            "name": "duplicates",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "passphrase": [
                    "str"
                ]
            }
        },
        "count_valid": {
            "name": "count_valid",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "passphrases": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "valid": [
                    "Callable",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day04b.py": {
        "anagrams": {
            "name": "anagrams",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "passphrase": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day05a.py": {
        "solve": {
            "name": "solve",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day05b.py": {
        "solve": {
            "name": "solve",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day06a.py": {
        "solve": {
            "name": "solve",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[int,int,str]",
                    "Tuple[Union[int,int,str]]"
                ]
            }
        },
        "Memory.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "banks": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Memory.redistribute": {
            "name": "redistribute",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2017/day06b.py": {
        "solve": {
            "name": "solve",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[int,int,str]",
                    "Tuple[Union[int,int,str]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day07a.py": {
        "process_line": {
            "name": "process_line",
            "location": 77,
            "return": [
                "Tuple[(str, int, List[str])]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Union[Contributor,Coverage]"
                ]
            }
        },
        "find_root": {
            "name": "find_root",
            "location": 104,
            "return": [
                "Dict[str,Any]",
                "None",
                "str",
                "Tuple[Union[str,Any]]"
            ],
            "arguments": {
                "tree": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "List[Mapping[str,str]]",
                    "List[Dict[str,Any]]",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 114,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day07b.py": {
        "find_unique": {
            "name": "find_unique",
            "location": 40,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "children": [
                    "List[int]",
                    "Set[int]"
                ]
            }
        },
        "unbalanced": {
            "name": "unbalanced",
            "location": 50,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Optional[str]"
                ],
                "tree": [
                    "str",
                    "Dict",
                    "Type"
                ],
                "weights": [
                    "str",
                    "Dict[str,int]",
                    "bool",
                    "float",
                    "Dict"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 72,
            "return": [
                "Tuple",
                "Iterable[str]",
                "List",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day08a.py": {
        "process_line": {
            "name": "process_line",
            "location": 58,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 64,
            "return": [
                "List[Instruction]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "perform_instructions": {
            "name": "perform_instructions",
            "location": 73,
            "return": [
                "Tuple[(collections.defaultdict, Any)]"
            ],
            "arguments": {
                "instructions": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 91,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day08b.py": {
        "solve": {
            "name": "solve",
            "location": 12,
            "return": [
                "int",
                "bytes",
                "str",
                "Callable",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day09a.py": {
        "solve": {
            "name": "solve",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day09b.py": {
        "solve": {
            "name": "solve",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day10a.py": {
        "process_data": {
            "name": "process_data",
            "location": 105,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict",
                    "int",
                    "Union[Iterable,str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Rope.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Set[str]",
                    "None",
                    "bytearray",
                    "Optional[List[Dict]]",
                    "List[dict]"
                ]
            }
        },
        "Rope.reverse": {
            "name": "reverse",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "str",
                    "List",
                    "Mapping[str,Any]",
                    "Callable",
                    "Mapping",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Rope.move": {
            "name": "move",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "List"
                ]
            }
        },
        "Rope.first_two_multiply": {
            "name": "first_two_multiply",
            "location": 100,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2017/day10b.py": {
        "process_data": {
            "name": "process_data",
            "location": 73,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "sequence": [
                    "List",
                    "Tuple[int]",
                    "int",
                    "float"
                ],
                "chunk": [
                    "List",
                    "int",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "compress": {
            "name": "compress",
            "location": 83,
            "return": [
                "list"
            ],
            "arguments": {
                "sparse_hash": [
                    "List[int]",
                    "str"
                ],
                "chunk": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "to_hex": {
            "name": "to_hex",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "float",
                    "Dict",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day11a.py": {
        "solve": {
            "name": "solve",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day11b.py": {
        "solve": {
            "name": "solve",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day12a.py": {
        "process_data": {
            "name": "process_data",
            "location": 58,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "Dict",
                    "bytes",
                    "None"
                ]
            }
        },
        "process_nodes": {
            "name": "process_nodes",
            "location": 63,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "connections": [
                    "str",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day12b.py": {
        "solve": {
            "name": "solve",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2017/day13a.py": {
        "solve": {
            "name": "solve",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/src/year2017/__init__.py": {},
    "advent_of_code-master/src/year2018/day01a.py": {
        "process_data": {
            "name": "process_data",
            "location": 53,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day01b.py": {
        "solve": {
            "name": "solve",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day02a.py": {
        "process_data": {
            "name": "process_data",
            "location": 50,
            "return": [
                "Generator[(Counter[nothing], Any, None)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day02b.py": {
        "get_similar_id_part": {
            "name": "get_similar_id_part",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "box1": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Callable"
                ],
                "box2": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day03a.py": {
        "parse_claim": {
            "name": "parse_claim",
            "location": 81,
            "return": [
                "Claim"
            ],
            "arguments": {
                "raw_claim": [
                    "str"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 91,
            "return": [
                "Generator[(Claim, Any, None)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "apply_claim": {
            "name": "apply_claim",
            "location": 97,
            "return": [
                "int",
                "str",
                "Callable",
                "List"
            ],
            "arguments": {
                "fabric": [
                    "int",
                    "List",
                    "str"
                ],
                "claim": [
                    "str",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "side": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day03b.py": {
        "apply_claim": {
            "name": "apply_claim",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "fabric": [
                    "List[List[int]]",
                    "float",
                    "List[list[int]]",
                    "int"
                ],
                "claim": [
                    "int",
                    "Dict",
                    "Optional[int]",
                    "float",
                    "None"
                ],
                "not_overlap": [
                    "Set[int]",
                    "Callable",
                    "List[int]",
                    "T"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 35,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "side": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day04a.py": {
        "total_minutes": {
            "name": "total_minutes",
            "location": 164,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "guard_minutes": [
                    "str",
                    "float",
                    "bool",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "Record.parse": {
            "name": "parse",
            "location": 117,
            "return": [
                "Record"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRecord]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Record.parse_all": {
            "name": "parse_all",
            "location": 138,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Match[str]",
                    "Match",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "str",
                    "Match[str]",
                    "Match",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Record.parse_task": {
            "name": "parse_task",
            "location": 144,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day04b.py": {
        "most_sleepy": {
            "name": "most_sleepy",
            "location": 20,
            "return": [
                "bytes",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "guard_minutes": [
                    "str",
                    "float",
                    "bool",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day05a.py": {
        "react": {
            "name": "react",
            "location": 43,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "char1": [
                    "str"
                ],
                "char2": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day05b.py": {
        "solve": {
            "name": "solve",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day06a.py": {
        "solve": {
            "name": "solve",
            "location": 216,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "Coordinate.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "bool"
                ]
            }
        },
        "Coordinate.__sub__": {
            "name": "__sub__",
            "location": 93,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "List[int]",
                "float",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "Coordinate.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [
                "bool",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Coordinate.__hash__": {
            "name": "__hash__",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinate.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dot.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Pin.from_string": {
            "name": "from_string",
            "location": 122,
            "return": [
                "Pin"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPin]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Pin.parse_task": {
            "name": "parse_task",
            "location": 128,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Iterable",
                    "Callable",
                    "Type",
                    "T",
                    "Type[T]"
                ],
                "task": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pins": [
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "dots": [
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "width": [
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "height": [
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Grid.__eq__": {
            "name": "__eq__",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Grid.parse_task": {
            "name": "parse_task",
            "location": 157,
            "return": [
                "Grid"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGrid]"
                ],
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Grid.calc_distances": {
            "name": "calc_distances",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.largest_area": {
            "name": "largest_area",
            "location": 183,
            "return": [
                "int",
                "Set",
                "Callable",
                "List",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.display": {
            "name": "display",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2018/day06b.py": {
        "solve": {
            "name": "solve",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "limit": [
                    "int",
                    "float",
                    "List[Tuple[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "Grid.calc_sum_distances": {
            "name": "calc_sum_distances",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.closest_region_size": {
            "name": "closest_region_size",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "List[List[str]]",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day07a.py": {
        "process_date": {
            "name": "process_date",
            "location": 75,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Sequence[str]",
                    "Dict",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "next_step": {
            "name": "next_step",
            "location": 86,
            "return": [
                "float",
                "Text",
                "Optional[int]",
                "None"
            ],
            "arguments": {
                "parents": [
                    "str",
                    "Pattern[str]",
                    "int",
                    "Set"
                ],
                "done": [
                    "Pattern[str]",
                    "str",
                    "Pattern",
                    "int",
                    "Set"
                ],
                "todo": [
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "ordered_steps": {
            "name": "ordered_steps",
            "location": 97,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "parents": [
                    "Set",
                    "str",
                    "bool",
                    "Callable"
                ],
                "steps": [
                    "Callable"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "int",
                    "str"
                ],
                "steps": [
                    "str",
                    "int",
                    "list"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day07b.py": {
        "solve": {
            "name": "solve",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "int",
                    "str",
                    "bool"
                ],
                "steps": [
                    "dict",
                    "Sequence[Any]",
                    "List[str]",
                    "T",
                    "List[int]"
                ],
                "workers": [
                    "int",
                    "List[int]",
                    "Tuple",
                    "List"
                ],
                "duration": [
                    "int",
                    "float",
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Optional[float]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day08a.py": {
        "parse_tree": {
            "name": "parse_tree",
            "location": 62,
            "return": [
                "Tuple[(Node, Any)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "sum_metadata": {
            "name": "sum_metadata",
            "location": 85,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 95,
            "return": [
                "float",
                "dict",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[int,Any]",
                    "Dict",
                    "T"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day08b.py": {
        "get_node_value": {
            "name": "get_node_value",
            "location": 37,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int",
                    "Node",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 58,
            "return": [
                "Optional[str]",
                "bool",
                "Union[str, None]",
                "Type[BaseException]",
                "Callable[..., None]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[int,Any]",
                    "Dict",
                    "T"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day09a.py": {
        "parse_task": {
            "name": "parse_task",
            "location": 187,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "annofabapi.dataclass.task.Task"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 193,
            "return": [
                "str",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ]
            }
        },
        "Marble.insert_new": {
            "name": "insert_new",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marble": [
                    "Dict[str,Any]"
                ]
            }
        },
        "Marble.remove_counter_clockwise": {
            "name": "remove_counter_clockwise",
            "location": 110,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "int",
                    "float"
                ]
            }
        },
        "Marble.get_zero_marble": {
            "name": "get_zero_marble",
            "location": 131,
            "return": [
                "Marble"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMarble]"
                ]
            }
        },
        "Marble.__str__": {
            "name": "__str__",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "players_number": [
                    "int"
                ],
                "marbles": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Game.make_turn": {
            "name": "make_turn",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.next_player": {
            "name": "next_player",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.current_player": {
            "name": "current_player",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.finished": {
            "name": "finished",
            "location": 177,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.winner": {
            "name": "winner",
            "location": 182,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2018/day09b.py": {
        "solve": {
            "name": "solve",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day10a.py": {
        "solve": {
            "name": "solve",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "Point.from_line": {
            "name": "from_line",
            "location": 184,
            "return": [
                "Point"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPoint]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Point.parse_task": {
            "name": "parse_task",
            "location": 189,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "task": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Point.move": {
            "name": "move",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.back": {
            "name": "back",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sky.move": {
            "name": "move",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sky.back": {
            "name": "back",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sky.bounds": {
            "name": "bounds",
            "location": 220,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sky.move_till_min_area": {
            "name": "move_till_min_area",
            "location": 228,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sky.area": {
            "name": "area",
            "location": 243,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sky.__str__": {
            "name": "__str__",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2018/day10b.py": {
        "solve": {
            "name": "solve",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day11a.py": {
        "solve": {
            "name": "solve",
            "location": 143,
            "return": [
                "int",
                "str",
                "Callable",
                "Final",
                "Type",
                "Dict[str,Union[float,str]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "float",
                    "int"
                ],
                "side": [
                    "int",
                    "str"
                ]
            }
        },
        "Grid.show": {
            "name": "show",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.get_power_level": {
            "name": "get_power_level",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Match",
                    "Set[str]"
                ],
                "y": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "serial": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Grid.get_square_power": {
            "name": "get_square_power",
            "location": 121,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Set[str]",
                    "List[int]",
                    "Set"
                ],
                "y": [
                    "int",
                    "Optional[int]",
                    "Sequence[int]"
                ],
                "size": [
                    "int",
                    "float",
                    "List"
                ]
            }
        },
        "Grid.get_biggest_square": {
            "name": "get_biggest_square",
            "location": 129,
            "return": [
                "Tuple[(Tuple[(int, int)], Any)]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day11b.py": {
        "solve": {
            "name": "solve",
            "location": 54,
            "return": [
                "Tuple[(Tuple[(int, int)], int)]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "CachedGrid.get_border_power": {
            "name": "get_border_power",
            "location": 35,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[list]",
                    "Set[int]"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "CachedGrid.get_square_power": {
            "name": "get_square_power",
            "location": 45,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "size": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day12a.py": {
        "process_data": {
            "name": "process_data",
            "location": 123,
            "return": [
                "Tuple[(Dict[(int, Any)], dict)]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "get_pattern": {
            "name": "get_pattern",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "generation": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "i": [
                    "int",
                    "float",
                    "str",
                    "Union[float,str]",
                    "List[Dict]"
                ]
            }
        },
        "print_plants": {
            "name": "print_plants",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "generation": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "bool"
                ],
                "generation_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_new_generation": {
            "name": "get_new_generation",
            "location": 164,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "generation": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "patterns": [
                    "str",
                    "Dict[str,str]",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/day12b.py": {
        "solve": {
            "name": "solve",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2018/__init__.py": {},
    "advent_of_code-master/src/year2019/day01a.py": {
        "count_fuel": {
            "name": "count_fuel",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mass": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 45,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 50,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day01b.py": {
        "solve": {
            "name": "solve",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day02a.py": {
        "solve": {
            "name": "solve",
            "location": 90,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day02b.py": {
        "solve": {
            "name": "solve",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day03a.py": {
        "parse_command": {
            "name": "parse_command",
            "location": 78,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Grid.plot": {
            "name": "plot",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wire": [
                    "str"
                ]
            }
        },
        "Grid.merge": {
            "name": "merge",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int"
                ]
            }
        },
        "Grid.reset": {
            "name": "reset",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.shift": {
            "name": "shift",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ]
            }
        },
        "Grid.intersections": {
            "name": "intersections",
            "location": 121,
            "return": [
                "List",
                "Dict",
                "Set[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.closest": {
            "name": "closest",
            "location": 126,
            "return": [
                "int",
                "Iterable[int]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day03b.py": {
        "solve": {
            "name": "solve",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Grid.plot": {
            "name": "plot",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wire": [
                    "str"
                ]
            }
        },
        "Grid.merge": {
            "name": "merge",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Dict",
                    "str",
                    "Node",
                    "src.evalg.encoding.BinaryTree.Node"
                ]
            }
        },
        "Grid.closest": {
            "name": "closest",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.intersections": {
            "name": "intersections",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day04a.py": {
        "two_adjacent": {
            "name": "two_adjacent",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Sized"
                ]
            }
        },
        "never_decrease": {
            "name": "never_decrease",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 39,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_passwords": {
            "name": "get_passwords",
            "location": 44,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day04b.py": {
        "at_least_one_equal_pair": {
            "name": "at_least_one_equal_pair",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int",
                    "Dict",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day05a.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day05b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day06a.py": {
        "process_data": {
            "name": "process_data",
            "location": 25,
            "return": [
                "Dict[(Any, Object)]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Object.traverse": {
            "name": "traverse",
            "location": 17,
            "return": [
                "int",
                "Optional[str]",
                "Tuple[str,str]",
                "Union[List[str],str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Object.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day06b.py": {
        "process_data": {
            "name": "process_data",
            "location": 9,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "closest_distance": {
            "name": "closest_distance",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "T"
                ],
                "stop": [
                    "int",
                    "str",
                    "T"
                ],
                "orbit_map": [
                    "Dict[str, Any]",
                    "float",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day07a.py": {
        "compute_output": {
            "name": "compute_output",
            "location": 8,
            "return": [
                "List",
                "int",
                "str",
                "Tuple[int]",
                "List[bytes]",
                "Iterable[float]"
            ],
            "arguments": {
                "program": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "int",
                    "Iterable[float]"
                ],
                "phases": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "int",
                    "Iterable[float]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 23,
            "return": [
                "bytes",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day07b.py": {
        "compute_output": {
            "name": "compute_output",
            "location": 8,
            "return": [
                "List",
                "str",
                "DefaultDict",
                "int",
                "Tuple[int]",
                "List[str]",
                "List[bytes]",
                "Iterable[float]"
            ],
            "arguments": {
                "program": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "int",
                    "Iterable[float]"
                ],
                "phases": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "int",
                    "Iterable[float]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 29,
            "return": [
                "bytes",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day08a.py": {
        "parse_layers": {
            "name": "parse_layers",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List[List[str]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day08b.py": {
        "find_top": {
            "name": "find_top",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "layers": [
                    "List[str]",
                    "List[object]",
                    "str",
                    "bool",
                    "List",
                    "Sized",
                    "Optional[List]"
                ],
                "pixel": [
                    "str"
                ]
            }
        },
        "decode_image": {
            "name": "decode_image",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "layers": [
                    "Sequence[int]",
                    "Sequence[T]",
                    "src.core.model.profile.Profile",
                    "src.core.model.scripScript",
                    "src.core.model.library.Library"
                ]
            }
        },
        "print_image": {
            "name": "print_image",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "str",
                    "List",
                    "int",
                    "Set[str]",
                    "Optional[int]",
                    "Optional[Set[str]]",
                    "float"
                ],
                "cols": [
                    "bool",
                    "bytes",
                    "List[int]",
                    "float"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day09a.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day09b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day10a.py": {
        "solve": {
            "name": "solve",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "Chart.from_string": {
            "name": "from_string",
            "location": 21,
            "return": [
                "Chart"
            ],
            "arguments": {
                "cls": [
                    "Type[_TChart]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "Chart.not_base": {
            "name": "not_base",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[int,bool]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[int,bool]"
                ]
            }
        },
        "Chart.set_base": {
            "name": "set_base",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "Callable[...,None]",
                    "bool"
                ],
                "y": [
                    "int",
                    "str"
                ]
            }
        },
        "Chart.asteroids": {
            "name": "asteroids",
            "location": 39,
            "return": [
                "Generator[(Tuple[(int, int)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chart.atan2": {
            "name": "atan2",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Chart.distance_to": {
            "name": "distance_to",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bytes",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "bool"
                ],
                "y": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Chart.seen_from": {
            "name": "seen_from",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "base_x": [
                    "int",
                    "Dict",
                    "float",
                    "str"
                ],
                "base_y": [
                    "int",
                    "Dict",
                    "float",
                    "str"
                ]
            }
        },
        "Chart.remove_till": {
            "name": "remove_till",
            "location": 71,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "str",
                    "Callable[[int,int],None]",
                    "Optional[int]"
                ]
            }
        },
        "Chart.optimal_station_position": {
            "name": "optimal_station_position",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chart.most_observant": {
            "name": "most_observant",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day10b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day11a.py": {
        "solve": {
            "name": "solve",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        },
        "Coordinates.__add__": {
            "name": "__add__",
            "location": 42,
            "return": [
                "Coordinates",
                "bool",
                "Dict",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Panel.paint": {
            "name": "paint",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Hull.print": {
            "name": "print",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cpu": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Robot.load_program": {
            "name": "load_program",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "str",
                    "bool"
                ]
            }
        },
        "Robot.paint": {
            "name": "paint",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hull": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Robot.step": {
            "name": "step",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hull": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Robot.rotate": {
            "name": "rotate",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "str",
                    "int",
                    "float",
                    "Union[float,int]"
                ]
            }
        },
        "Robot.move": {
            "name": "move",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.is_halt": {
            "name": "is_halt",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day11b.py": {
        "solve": {
            "name": "solve",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day12a.py": {
        "solve": {
            "name": "solve",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Moon.apply_velocity": {
            "name": "apply_velocity",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.from_string": {
            "name": "from_string",
            "location": 29,
            "return": [
                "Moon"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMoon]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "Moon.coordinates": {
            "name": "coordinates",
            "location": 35,
            "return": [
                "Tuple",
                "str",
                "int",
                "bool",
                "List[int]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.velocity": {
            "name": "velocity",
            "location": 40,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.potential_energy": {
            "name": "potential_energy",
            "location": 45,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.kinetic_energy": {
            "name": "kinetic_energy",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.energy": {
            "name": "energy",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.apply_gravity": {
            "name": "apply_gravity",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.apply_velocity": {
            "name": "apply_velocity",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.step": {
            "name": "step",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.from_raw_data": {
            "name": "from_raw_data",
            "location": 92,
            "return": [
                "System"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSystem]"
                ],
                "data": [
                    "str",
                    "int",
                    "Mapping[str,Any]",
                    "Dict[str,str]",
                    "Mapping"
                ]
            }
        },
        "System.snapshot_x": {
            "name": "snapshot_x",
            "location": 106,
            "return": [
                "List[tuple]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.snapshot_y": {
            "name": "snapshot_y",
            "location": 111,
            "return": [
                "List[tuple]",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.snapshot_z": {
            "name": "snapshot_z",
            "location": 116,
            "return": [
                "List[tuple]",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.potential_energy": {
            "name": "potential_energy",
            "location": 121,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.kinetic_energy": {
            "name": "kinetic_energy",
            "location": 126,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.energy": {
            "name": "energy",
            "location": 131,
            "return": [
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day12b.py": {
        "lcd": {
            "name": "lcd",
            "location": 9,
            "return": [
                "int",
                "str",
                "Tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "List[float]"
                ]
            }
        },
        "steps_until_repeat": {
            "name": "steps_until_repeat",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 52,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day13a.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2019/day13b.py": {
        "solve": {
            "name": "solve",
            "location": 112,
            "return": [
                "int"
            ],
            "arguments": {
                "task": []
            }
        },
        "Tile.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arcade.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [],
                "cpu": [
                    "None"
                ]
            }
        },
        "Arcade.play": {
            "name": "play",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arcade.move_paddle": {
            "name": "move_paddle",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arcade.update_map": {
            "name": "update_map",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arcade.print": {
            "name": "print",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arcade.make_free": {
            "name": "make_free",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arcade.is_finished": {
            "name": "is_finished",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/day14a.py": {
        "get_multiplier": {
            "name": "get_multiplier",
            "location": 39,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str",
                    "float"
                ],
                "reaction": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ChemicalRecipe.from_str": {
            "name": "from_str",
            "location": 22,
            "return": [
                "ChemicalRecipe"
            ],
            "arguments": {
                "cls": [
                    "Type[_TChemicalRecipe]"
                ],
                "string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Factory.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reactions": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Factory.from_raw_data": {
            "name": "from_raw_data",
            "location": 59,
            "return": [
                "Factory"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFactory]"
                ],
                "data": [
                    "str",
                    "Sequence[str]",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "Factory.add_to_production": {
            "name": "add_to_production",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chemical": [
                    "int",
                    "Set",
                    "Tuple[int,int,int,int]",
                    "Tuple[Union[int,int,int,int]]"
                ],
                "quantity": [
                    "int",
                    "Set",
                    "Tuple[int,int,int,int]",
                    "Tuple[Union[int,int,int,int]]"
                ]
            }
        },
        "Factory.produce": {
            "name": "produce",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/intcode.py": {
        "Instruction.execute": {
            "name": "execute",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "computer": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Instruction.get_param_addrs": {
            "name": "get_param_addrs",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "float"
                ],
                "n": [
                    "int",
                    "str"
                ],
                "computer": [
                    "str",
                    "int"
                ]
            }
        },
        "Instruction.next_instruction": {
            "name": "next_instruction",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "complex",
                    "bytes",
                    "bool"
                ],
                "computer": [
                    "Type",
                    "int",
                    "complex",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Sum.execute": {
            "name": "execute",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "Type[Any]",
                    "bool"
                ],
                "computer": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Multiply.execute": {
            "name": "execute",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "Type[Any]",
                    "bool"
                ],
                "computer": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Input.execute": {
            "name": "execute",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str"
                ],
                "computer": [
                    "Callable",
                    "Type[T]",
                    "AsyncGenerator",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "Print.execute": {
            "name": "execute",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str"
                ],
                "computer": [
                    "str",
                    "bytes",
                    "Type",
                    "Type[T]",
                    "T"
                ]
            }
        },
        "JumpIfTrue.execute": {
            "name": "execute",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "list"
                ],
                "computer": [
                    "str",
                    "Type[T]",
                    "list"
                ]
            }
        },
        "JumpIfFalse.execute": {
            "name": "execute",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "list"
                ],
                "computer": [
                    "str",
                    "Type[T]",
                    "list"
                ]
            }
        },
        "LessThan.execute": {
            "name": "execute",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "Type[Any]",
                    "bool"
                ],
                "computer": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Equals.execute": {
            "name": "execute",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "Type[Any]",
                    "bool"
                ],
                "computer": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "RelativeBaseOffset.execute": {
            "name": "execute",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str"
                ],
                "computer": [
                    "Callable",
                    "Type[T]",
                    "Type['AbstractIntegrationConversation']",
                    "bytes"
                ]
            }
        },
        "Exit.execute": {
            "name": "execute",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "computer": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Computer.__getitem__": {
            "name": "__getitem__",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Computer.__setitem__": {
            "name": "__setitem__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "Computer.load_program": {
            "name": "load_program",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "Computer.next": {
            "name": "next",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Computer.execute": {
            "name": "execute",
            "location": 269,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.set_noun_and_verb": {
            "name": "set_noun_and_verb",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noun": [
                    "bool",
                    "float"
                ],
                "verb": [
                    "bool",
                    "float"
                ]
            }
        },
        "Computer.reset": {
            "name": "reset",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.load_sram_to_dram": {
            "name": "load_sram_to_dram",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.jump": {
            "name": "jump",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Computer.stop": {
            "name": "stop",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.pause": {
            "name": "pause",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.offset_relative_base": {
            "name": "offset_relative_base",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "Iterable",
                    "Union[bytes,str]",
                    "Callable[str,Any]",
                    "Callable[[str],Any]",
                    "Mapping",
                    "T",
                    "Mapping[str,Any]"
                ]
            }
        },
        "Computer.program_is_loaded": {
            "name": "program_is_loaded",
            "location": 312,
            "return": [
                "int",
                "List[int]",
                "List[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.instruction": {
            "name": "instruction",
            "location": 317,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.opcode": {
            "name": "opcode",
            "location": 327,
            "return": [
                "int",
                "str",
                "Callable[[Mapping],T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.mode": {
            "name": "mode",
            "location": 333,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.output": {
            "name": "output",
            "location": 339,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.noun": {
            "name": "noun",
            "location": 345,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.verb": {
            "name": "verb",
            "location": 351,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.current_position": {
            "name": "current_position",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.relative_base": {
            "name": "relative_base",
            "location": 362,
            "return": [
                "str",
                "int",
                "bytearray",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2019/__init__.py": {},
    "advent_of_code-master/src/year2020/day01a.py": {
        "process_data": {
            "name": "process_data",
            "location": 6,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "find_2020_summands": {
            "name": "find_2020_summands",
            "location": 10,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "numbers": [
                    "List[List[Any]]",
                    "list",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day01b.py": {
        "find_three_2020_summands": {
            "name": "find_three_2020_summands",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "numbers": [
                    "list",
                    "List[List[Any]]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day02a.py": {
        "process_data": {
            "name": "process_data",
            "location": 24,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "is_valid": {
            "name": "is_valid",
            "location": 35,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "policy": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "Policy.from_str": {
            "name": "from_str",
            "location": 17,
            "return": [
                "Policy",
                "str",
                "int",
                "Optional[Dict]",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day02b.py": {
        "xor": {
            "name": "xor",
            "location": 7,
            "return": [
                "bool",
                "float",
                "Tuple[Any,Any,Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "b": [
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "is_valid": {
            "name": "is_valid",
            "location": 11,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "policy": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day03a.py": {
        "process_data": {
            "name": "process_data",
            "location": 7,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "count_trees": {
            "name": "count_trees",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "plan": [
                    "List['cirq.Qid']",
                    "int"
                ],
                "x_shift": [
                    "Dict",
                    "int",
                    "Union[int,float]",
                    "float"
                ],
                "y_shift": [
                    "float",
                    "int",
                    "Sequence[T]",
                    "Type"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day03b.py": {
        "solve": {
            "name": "solve",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day04a.py": {
        "process_data": {
            "name": "process_data",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "task": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict",
                    "int"
                ],
                "document": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 45,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "int",
                "List",
                "Dict[str,Any]",
                "float"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict",
                    "annofabapi.dataclass.task.Task"
                ]
            }
        },
        "Passport.from_str": {
            "name": "from_str",
            "location": 26,
            "return": [
                "Passport"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPassport]"
                ],
                "data": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Passport.is_valid": {
            "name": "is_valid",
            "location": 34,
            "return": [
                "bool",
                "Optional[int]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day04b.py": {
        "solve": {
            "name": "solve",
            "location": 102,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "int",
                "List",
                "Dict[str,Any]",
                "float"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Passport.valid_byr": {
            "name": "valid_byr",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.valid_iyr": {
            "name": "valid_iyr",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.valid_eyr": {
            "name": "valid_eyr",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.valid_hgt": {
            "name": "valid_hgt",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.valid_hcl": {
            "name": "valid_hcl",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.valid_ecl": {
            "name": "valid_ecl",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.valid_pid": {
            "name": "valid_pid",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passport.is_valid": {
            "name": "is_valid",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day05a.py": {
        "binary_search": {
            "name": "binary_search",
            "location": 13,
            "return": [
                "int",
                "bool",
                "bytes",
                "str",
                "Dict[Tuple[str,str],Tuple[float,float]]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "Optional[int]",
                    "T",
                    "bool"
                ],
                "stop": [
                    "int",
                    "str",
                    "Optional[int]",
                    "T",
                    "bool"
                ],
                "steps": [
                    "int",
                    "bool",
                    "str"
                ],
                "step_id": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 43,
            "return": [
                "List[Seat]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Seat.row": {
            "name": "row",
            "location": 28,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seat.column": {
            "name": "column",
            "location": 32,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seat.pk": {
            "name": "pk",
            "location": 36,
            "return": [
                "int",
                "List[str]",
                "List[int]",
                "List[Tuple[int, int]]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seat.__lt__": {
            "name": "__lt__",
            "location": 39,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day05b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "Set",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day06a.py": {
        "process_data": {
            "name": "process_data",
            "location": 6,
            "return": [
                "List[set]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Optional[Tuple[str]]",
                    "Tuple[str]",
                    "None"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day06b.py": {
        "process_data": {
            "name": "process_data",
            "location": 7,
            "return": [
                "list"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day07a.py": {
        "process_data": {
            "name": "process_data",
            "location": 8,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day07b.py": {
        "process_data": {
            "name": "process_data",
            "location": 29,
            "return": [
                "collections.defaultdict[(Any, list)]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "count_bags": {
            "name": "count_bags",
            "location": 39,
            "return": [
                "bool",
                "int",
                "str",
                "List[int]",
                "float",
                "bytes"
            ],
            "arguments": {
                "bags": [
                    "List[str]",
                    "str",
                    "Dict[str,Dict[str,int]]",
                    "Optional[Callable]",
                    "Set",
                    "int",
                    "Dict"
                ],
                "parent": [
                    "int",
                    "Dict[str,Dict[str,int]]",
                    "List[str]",
                    "str",
                    "Optional[Callable]",
                    "Set",
                    "Dict"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "InnerBag.from_text": {
            "name": "from_text",
            "location": 16,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day08a.py": {
        "process_data": {
            "name": "process_data",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 54,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "instructions": [
                    "List[float]",
                    "Sequence[T]",
                    "str",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 82,
            "return": [
                "int",
                "bytes",
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Operation.from_str": {
            "name": "from_str",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "op": [
                    "str"
                ]
            }
        },
        "Instruction.from_line": {
            "name": "from_line",
            "location": 33,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInstruction]"
                ],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Instruction.swap": {
            "name": "swap",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.is_swapable": {
            "name": "is_swapable",
            "location": 46,
            "return": [
                "bool",
                "Iterable[T]",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day08b.py": {
        "attempt": {
            "name": "attempt",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instructions": []
            }
        },
        "solve": {
            "name": "solve",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day09a.py": {
        "is_valid": {
            "name": "is_valid",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "Dict",
                    "float",
                    "bool"
                ],
                "preamble": [
                    "Dict",
                    "float",
                    "bool"
                ]
            }
        },
        "first_invalid": {
            "name": "first_invalid",
            "location": 15,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict",
                    "Callable[[bytes],bytes]",
                    "Dict[str,Any]"
                ],
                "preamble_length": [
                    "bytes",
                    "dict",
                    "Callable[[bytes], bytes]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[int,Any]",
                    "Dict",
                    "T"
                ],
                "preamble_length": [
                    "int",
                    "str",
                    "Callable",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day09b.py": {
        "find_contagious_range": {
            "name": "find_contagious_range",
            "location": 9,
            "return": [
                "collections.deque"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str",
                    "List",
                    "List[str]",
                    "List[int]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "data": [
                    "Dict",
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 24,
            "return": [
                "Callable",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[int,Any]",
                    "Dict",
                    "T"
                ],
                "preamble_length": [
                    "int",
                    "str",
                    "Dict",
                    "Tuple",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day10a.py": {
        "process_data": {
            "name": "process_data",
            "location": 7,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "bytes",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        },
        "find_differences": {
            "name": "find_differences",
            "location": 11,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "adapters": [
                    "Set",
                    "str",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day10b.py": {
        "solve": {
            "name": "solve",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "solve.count_arrangements": {
            "name": "count_arrangements",
            "location": 12,
            "return": [
                "int",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "List",
                    "List[int]",
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day11a.py": {
        "count_adjacent": {
            "name": "count_adjacent",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "j": [
                    "int",
                    "List",
                    "str"
                ],
                "matrix": [
                    "int",
                    "List[int]",
                    "Sequence[Mapping[str, Any]]",
                    "list"
                ]
            }
        },
        "generate_next": {
            "name": "generate_next",
            "location": 93,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "Callable",
                    "Optional[Union[str,Any]]"
                ],
                "limit": [
                    "str",
                    "List",
                    "Tuple"
                ],
                "count_rule": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "count_occupied": {
            "name": "count_occupied",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "count_rule": [
                    "str",
                    "float"
                ],
                "count_limit": [
                    "str",
                    "float"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 120,
            "return": [
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Cell.generate_new": {
            "name": "generate_new",
            "location": 28,
            "return": [
                "str",
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "occupied": [
                    "str",
                    "Iterable[T]",
                    "Callable[[T],bool]"
                ],
                "limit": [
                    "str",
                    "Iterable[T]",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Matrix.from_task": {
            "name": "from_task",
            "location": 45,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMatrix]"
                ],
                "task": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Matrix.occupied": {
            "name": "occupied",
            "location": 53,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_inside": {
            "name": "is_inside",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "List",
                    "bytes",
                    "Dict[int,str]"
                ],
                "j": [
                    "int",
                    "Sequence",
                    "List"
                ]
            }
        },
        "Matrix.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [
                "str",
                "Callable",
                "OrderedDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "Matrix.__len__": {
            "name": "__len__",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__iter__": {
            "name": "__iter__",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day11b.py": {
        "count_visible": {
            "name": "count_visible",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "j": [
                    "int",
                    "str",
                    "List"
                ],
                "matrix": [
                    "int",
                    "Dict"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 29,
            "return": [
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day12a.py": {
        "process_data": {
            "name": "process_data",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "bytes",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Instruction.from_line": {
            "name": "from_line",
            "location": 28,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "dict",
                "tuple",
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "line": [
                    "str",
                    "int"
                ]
            }
        },
        "Ship.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Ship.apply_instructions": {
            "name": "apply_instructions",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Ship.turn": {
            "name": "turn",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Ship.apply_instruction": {
            "name": "apply_instruction",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Ship.manhattan_distance": {
            "name": "manhattan_distance",
            "location": 69,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day12b.py": {
        "solve": {
            "name": "solve",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Waypoint.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShipWithWaypoint.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShipWithWaypoint.turn": {
            "name": "turn",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "str",
                    "List",
                    "int",
                    "Instruction"
                ]
            }
        },
        "ShipWithWaypoint.move": {
            "name": "move",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "List[str]",
                    "int",
                    "float",
                    "Dict[str,Any]",
                    "List[int]"
                ]
            }
        },
        "ShipWithWaypoint.apply_instruction": {
            "name": "apply_instruction",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "Union[int,float]",
                    "int",
                    "Optional[int]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day13a.py": {
        "process_data": {
            "name": "process_data",
            "location": 7,
            "return": [
                "Tuple[(int, List[int])]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "Iterable[str]"
                ]
            }
        },
        "find_closest": {
            "name": "find_closest",
            "location": 12,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "timestamp": [
                    "Dict[str, Any]",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, List[str]]"
                ],
                "shuttles": [
                    "int",
                    "Iterable[Any]",
                    "Dict",
                    "Dict[int,Dict[str,Any]]",
                    "List[Optional[float]]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day13b.py": {
        "process_data": {
            "name": "process_data",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict",
                    "List",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "find_earliest": {
            "name": "find_earliest",
            "location": 18,
            "return": [
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "shuttles": [
                    "str",
                    "int",
                    "Set"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day14a.py": {
        "process_data": {
            "name": "process_data",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "bytes",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Mask.set": {
            "name": "set",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "bool",
                    "float"
                ]
            }
        },
        "Mask.apply_to": {
            "name": "apply_to",
            "location": 19,
            "return": [
                "List[int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Sequence[Union[int,str]]",
                    "str",
                    "bytes",
                    "Union[str,int]",
                    "float",
                    "T"
                ]
            }
        },
        "Memory.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Memory.set_mask": {
            "name": "set_mask",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "Dict",
                    "List[int]",
                    "List",
                    "int",
                    "str",
                    "Iterable[cirq.Qid]"
                ]
            }
        },
        "Memory.sum": {
            "name": "sum",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.add": {
            "name": "add",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Dict",
                    "abc.BaseConfig"
                ],
                "value": [
                    "str",
                    "Dict",
                    "abc.BaseConfig"
                ]
            }
        },
        "Command.from_line": {
            "name": "from_line",
            "location": 41,
            "return": [
                "Union[(MaskCommand, MemoryCommand)]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "Command.execute": {
            "name": "execute",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MaskV1.apply_to": {
            "name": "apply_to",
            "location": 55,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "T",
                    "Sequence"
                ]
            }
        },
        "MemoryV1.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryV1.add": {
            "name": "add",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float",
                    "bytes",
                    "str"
                ],
                "value": [
                    "int",
                    "float",
                    "bytes",
                    "str"
                ]
            }
        },
        "MaskCommand.from_line": {
            "name": "from_line",
            "location": 83,
            "return": [
                "MaskCommand"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "MaskCommand.execute": {
            "name": "execute",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "MemoryCommand.from_line": {
            "name": "from_line",
            "location": 97,
            "return": [
                "MemoryCommand"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ]
            }
        },
        "MemoryCommand.execute": {
            "name": "execute",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "Mapping",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,List[Any]]",
                    "Dict[str,list[Any]]"
                ]
            }
        },
        "Program.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Program.execute": {
            "name": "execute",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "str",
                    "Callable[...,None]",
                    "bool"
                ]
            }
        },
        "Program.memory_sum": {
            "name": "memory_sum",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day14b.py": {
        "solve": {
            "name": "solve",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "MaskV2.apply_to": {
            "name": "apply_to",
            "location": 9,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Union[str,int]",
                    "Sequence[Union[int,str]]",
                    "T",
                    "bytes",
                    "float"
                ]
            }
        },
        "MemoryV2.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryV2.add": {
            "name": "add",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Dict[int,Any]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "value": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "MaskV2.apply_to.collect_results": {
            "name": "collect_results",
            "location": 13,
            "return": [
                "None",
                "Optional[bool]",
                "Dict[str,Any]",
                "Set[VT]",
                "str"
            ],
            "arguments": {
                "result": [
                    "Dict[str, Any]",
                    "list",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[int, dict]"
                ],
                "pos": [
                    "int",
                    "Type",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day15a.py": {
        "process_data": {
            "name": "process_data",
            "location": 4,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List[str]",
                    "List",
                    "Dict"
                ]
            }
        },
        "play": {
            "name": "play",
            "location": 8,
            "return": [
                "int",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "starting_nums": [
                    "int"
                ],
                "times": [
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day15b.py": {
        "solve": {
            "name": "solve",
            "location": 6,
            "return": [
                "Dict[str,int]",
                "Pattern",
                "Dict[int,int]",
                "int",
                "Dict[int,dict]",
                "Callable"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/day16a.py": {
        "solve": {
            "name": "solve",
            "location": 107,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Range.from_text": {
            "name": "from_text",
            "location": 14,
            "return": [
                "Range"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Range.__contains__": {
            "name": "__contains__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "float",
                    "int",
                    "dict",
                    "Type[object]",
                    "list"
                ]
            }
        },
        "Rule.from_text": {
            "name": "from_text",
            "location": 29,
            "return": [
                "Rule"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "Rule.__contains__": {
            "name": "__contains__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Iterable[Any]",
                    "dict",
                    "list",
                    "int"
                ]
            }
        },
        "Ticket.from_text": {
            "name": "from_text",
            "location": 43,
            "return": [
                "Ticket"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Ticket.error_rate": {
            "name": "error_rate",
            "location": 46,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "Puzzle.from_text": {
            "name": "from_text",
            "location": 66,
            "return": [
                "Puzzle"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Puzzle.ticket_scanning_error_rate": {
            "name": "ticket_scanning_error_rate",
            "location": 80,
            "return": [
                "str",
                "Iterable",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Puzzle.valid_tickets": {
            "name": "valid_tickets",
            "location": 84,
            "return": [
                "typing.Iterator[Ticket]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Puzzle.get_fields": {
            "name": "get_fields",
            "location": 91,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2020/day16b.py": {
        "solve": {
            "name": "solve",
            "location": 8,
            "return": [
                "int",
                "Optional[dict]",
                "Iterable"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2020/__init__.py": {},
    "advent_of_code-master/src/year2021/day01a.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day01b.py": {
        "solve": {
            "name": "solve",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day02a.py": {
        "solve": {
            "name": "solve",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day02b.py": {
        "solve": {
            "name": "solve",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day03a.py": {
        "count_zeros_and_ones": {
            "name": "count_zeros_and_ones",
            "location": 5,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "bits": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "most_common": {
            "name": "most_common",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "bits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "least_common": {
            "name": "least_common",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "bits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "iterate_bits": {
            "name": "iterate_bits",
            "location": 28,
            "return": [
                "Generator[(Generator[(Any, Any, None)], Any, None)]"
            ],
            "arguments": {
                "nums": [
                    "List",
                    "int",
                    "bytearray",
                    "List[float]",
                    "List[list[int]]",
                    "List[List[int]]"
                ]
            }
        },
        "get_gamma": {
            "name": "get_gamma",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "nums": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_epsilon": {
            "name": "get_epsilon",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "nums": [
                    "str",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day03b.py": {
        "search": {
            "name": "search",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "nums": [
                    "int",
                    "list",
                    "List[List[int]]"
                ],
                "criteria": [
                    "int",
                    "float"
                ]
            }
        },
        "oxygen_criteria": {
            "name": "oxygen_criteria",
            "location": 32,
            "return": [
                "bool",
                "int",
                "List[int]",
                "backend.src.sheets_commands.sheeGrid",
                "str",
                "List[List[int]]",
                "float"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "bit_index": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "nums": [
                    "str",
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "co2_criteria": {
            "name": "co2_criteria",
            "location": 37,
            "return": [
                "bool",
                "int",
                "List[int]",
                "backend.src.sheets_commands.sheeGrid",
                "str",
                "List[List[int]]",
                "float"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "bit_index": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "nums": [
                    "str",
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day04a.py": {
        "solve": {
            "name": "solve",
            "location": 37,
            "return": [
                "int",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List",
                    "Dict",
                    "str",
                    "Set[str]",
                    "Set"
                ]
            }
        },
        "Board.from_text": {
            "name": "from_text",
            "location": 11,
            "return": [
                "Board"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBoard]"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Board.has_marked_rows": {
            "name": "has_marked_rows",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.has_marked_cols": {
            "name": "has_marked_cols",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.won": {
            "name": "won",
            "location": 33,
            "return": [
                "str",
                "bool",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2021/day04b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "int",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day05a.py": {
        "range_between": {
            "name": "range_between",
            "location": 11,
            "return": [
                "range"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 87,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "Floor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Floor.draw": {
            "name": "draw",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "segments": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Floor.num_overlap": {
            "name": "num_overlap",
            "location": 31,
            "return": [
                "int",
                "List",
                "List[str]",
                "List[Dict[str,Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.from_str": {
            "name": "from_str",
            "location": 40,
            "return": [
                "str",
                "bool",
                "List[str]",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[str]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Segment.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "stop": [
                    "int",
                    "str"
                ]
            }
        },
        "Segment.from_line": {
            "name": "from_line",
            "location": 51,
            "return": [
                "Segment"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSegment]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Segment.is_horizontal": {
            "name": "is_horizontal",
            "location": 58,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.is_vertical": {
            "name": "is_vertical",
            "location": 62,
            "return": [
                "bool",
                "Tuple",
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.is_diagonal": {
            "name": "is_diagonal",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.iter_points": {
            "name": "iter_points",
            "location": 69,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2021/day05b.py": {
        "solve": {
            "name": "solve",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day06a.py": {
        "tick": {
            "name": "tick",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "ages": [
                    "int",
                    "List[str]",
                    "list",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day06b.py": {
        "tick": {
            "name": "tick",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "adults": [
                    "Union[str, bool, None]",
                    "Sequence['cirq.Qid']"
                ],
                "children": [
                    "Union[str, bool, None]",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day07a.py": {
        "solve": {
            "name": "solve",
            "location": 4,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "solve.fuel_cost": {
            "name": "fuel_cost",
            "location": 7,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]"
            ],
            "arguments": {
                "align": [
                    "str",
                    "[[]]",
                    "List[str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day07b.py": {
        "fuel": {
            "name": "fuel",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "distance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 8,
            "return": [
                "int",
                "List[tuple[int]]",
                "Callable",
                "List",
                "str",
                "List[float]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day08a.py": {
        "process_data": {
            "name": "process_data",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Union[Contributor,Coverage]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Entry.from_line": {
            "name": "from_line",
            "location": 13,
            "return": [
                "Entry"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEntry]"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day08b.py": {
        "solve": {
            "name": "solve",
            "location": 75,
            "return": [
                "bool",
                "str",
                "int",
                "Union[str,Dict]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "Screen.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "b": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "None"
                ],
                "c": [
                    "float",
                    "List[float]"
                ],
                "d": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "e": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "None"
                ],
                "f": [
                    "int",
                    "float"
                ],
                "g": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Screen.parse_output": {
            "name": "parse_output",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "Set[str]",
                    "bytes"
                ]
            }
        },
        "Screen.from_signal": {
            "name": "from_signal",
            "location": 43,
            "return": [
                "Screen"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScreen]"
                ],
                "nums": [
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day09a.py": {
        "adjacent": {
            "name": "adjacent",
            "location": 21,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "point": [
                    "str",
                    "Dict"
                ],
                "heightmap": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int",
                    "List['cirq.Qid']"
                ]
            }
        },
        "lowest": {
            "name": "lowest",
            "location": 37,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "heightmap": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "risk_level": {
            "name": "risk_level",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "point": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 53,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day09b.py": {
        "basins": {
            "name": "basins",
            "location": 13,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "low_points": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "heightmap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day10a.py": {
        "solve": {
            "name": "solve",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day10b.py": {
        "get_score": {
            "name": "get_score",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "stack": [
                    "str",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day11a.py": {
        "make_step": {
            "name": "make_step",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]",
                    "str",
                    "int",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int",
                    "None",
                    "Set[str]"
                ]
            }
        },
        "Octopus.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Union[Tuple[int,int],int]"
                ],
                "j": [
                    "int",
                    "Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "energy": [
                    "int",
                    "Iterable[list[str]]",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ]
            }
        },
        "Octopus.gain_energy": {
            "name": "gain_energy",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "Data.from_task": {
            "name": "from_task",
            "location": 36,
            "return": [
                "Data"
            ],
            "arguments": {
                "cls": [
                    "Type[_TData]"
                ],
                "task": [
                    "bytes",
                    "Optional[int]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "Data.all_zeros": {
            "name": "all_zeros",
            "location": 45,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.iter_adjacent_to": {
            "name": "iter_adjacent_to",
            "location": 48,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "octopus": [
                    "str"
                ]
            }
        },
        "Data.print": {
            "name": "print",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.__iter__": {
            "name": "__iter__",
            "location": 63,
            "return": [
                "T",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2021/day11b.py": {
        "solve": {
            "name": "solve",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int",
                    "None",
                    "Set[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day12a.py": {
        "parse_task": {
            "name": "parse_task",
            "location": 19,
            "return": [
                "Dict[(Any, Cave)]"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "visit": {
            "name": "visit",
            "location": 37,
            "return": [
                "Dict",
                "int"
            ],
            "arguments": {
                "cave": [],
                "visited": []
            }
        },
        "solve": {
            "name": "solve",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "Cave.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Cave.is_small": {
            "name": "is_small",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cave.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2021/day12b.py": {
        "visit": {
            "name": "visit",
            "location": 6,
            "return": [
                "Dict",
                "int"
            ],
            "arguments": {
                "cave": [
                    "str",
                    "Set"
                ],
                "visited1": [],
                "visited2": [
                    "Optional[List[Type]]",
                    "None",
                    "List[Type]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 33,
            "return": [
                "bool",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day13a.py": {
        "parse_task": {
            "name": "parse_task",
            "location": 103,
            "return": [
                "Tuple[(Paper, list)]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "Point.from_line": {
            "name": "from_line",
            "location": 13,
            "return": [
                "Point",
                "int",
                "List[int]",
                "Tuple"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[str]",
                    "List",
                    "Set[str]",
                    "Iterable[str]",
                    "List[Union[Any,Any]]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paper.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "List[int]",
                    "bytes",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "Paper.from_text": {
            "name": "from_text",
            "location": 31,
            "return": [
                "Paper"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPaper]"
                ],
                "text": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Paper.visible_points": {
            "name": "visible_points",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paper.fold": {
            "name": "fold",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "int"
                ]
            }
        },
        "Paper.fold_up": {
            "name": "fold_up",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "List[float]",
                    "List",
                    "int"
                ]
            }
        },
        "Paper.fold_left": {
            "name": "fold_left",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "Paper.print": {
            "name": "print",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.from_line": {
            "name": "from_line",
            "location": 98,
            "return": [
                "Instruction",
                "int",
                "str",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[str]",
                    "List",
                    "Set[str]",
                    "Iterable[str]",
                    "List[Union[Any,Any]]"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day13b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day14a.py": {
        "parse_task": {
            "name": "parse_task",
            "location": 10,
            "return": [
                "Tuple[(list, Dict[(tuple, Any)])]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "int",
                    "Callable"
                ],
                "insertions": [
                    "bytes",
                    "float",
                    "Sequence[cirq.Qid]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day14b.py": {
        "parse_task": {
            "name": "parse_task",
            "location": 12,
            "return": [
                "Tuple[(collections.defaultdict[(Tuple[(Any, Any)], Any)], Dict[(tuple, Any)], collections.defaultdict)]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 34,
            "return": [
                "collections.defaultdict[(Tuple[(Any, Any)], Any)]"
            ],
            "arguments": {
                "pairs": [
                    "Dict[str,object]",
                    "Dict[str,dict[str,int]]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "Dict[str,Dict[str,int]]",
                    "Optional[Dict[str,Any]]"
                ],
                "insertions": [
                    "BaseException"
                ],
                "counts": [
                    "bytes",
                    "str"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 46,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day15a.py": {
        "walk": {
            "name": "walk",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "target": [
                    "int",
                    "str",
                    "T"
                ],
                "risk_map": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 103,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RiskMap.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "RiskMap.from_task_a": {
            "name": "from_task_a",
            "location": 20,
            "return": [
                "RiskMap"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRiskMap]"
                ],
                "task": [
                    "str",
                    "int"
                ]
            }
        },
        "RiskMap.from_task_b": {
            "name": "from_task_b",
            "location": 25,
            "return": [
                "RiskMap"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRiskMap]"
                ],
                "task": [
                    "str",
                    "Dict",
                    "Mapping[str,Any]"
                ]
            }
        },
        "RiskMap.max_x": {
            "name": "max_x",
            "location": 50,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiskMap.max_y": {
            "name": "max_y",
            "location": 56,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiskMap.__getitem__": {
            "name": "__getitem__",
            "location": 60,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str,Any]",
                    "T"
                ]
            }
        },
        "RiskMap.adjacent": {
            "name": "adjacent",
            "location": 63,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day15b.py": {
        "solve": {
            "name": "solve",
            "location": 7,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "task": [
                    "int",
                    "List[str]",
                    "Dict",
                    "List"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day16a.py": {
        "hex_to_bin": {
            "name": "hex_to_bin",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "hex_num": [
                    "int"
                ]
            }
        },
        "sum_versions": {
            "name": "sum_versions",
            "location": 147,
            "return": [
                "bool",
                "str",
                "annotations.DictStrAny"
            ],
            "arguments": {
                "packet": [
                    "float",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 155,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        },
        "Packet.evaluate": {
            "name": "evaluate",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiteralPacket.evaluate": {
            "name": "evaluate",
            "location": 36,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorPacket.evaluate": {
            "name": "evaluate",
            "location": 44,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bin_data": [
                    "bytes",
                    "Dict",
                    "int",
                    "str"
                ]
            }
        },
        "BITS.from_hex": {
            "name": "from_hex",
            "location": 72,
            "return": [
                "BITS"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBITS]"
                ],
                "hex_line": [
                    "str",
                    "List[str]",
                    "Optional[permissions_doc]"
                ]
            }
        },
        "BITS.read_version": {
            "name": "read_version",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_type_id": {
            "name": "read_type_id",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_value": {
            "name": "read_value",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_value_chunk": {
            "name": "read_value_chunk",
            "location": 93,
            "return": [
                "ValueChunk",
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_length_type_id": {
            "name": "read_length_type_id",
            "location": 98,
            "return": [
                "int",
                "List[int]",
                "List[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_sub_packets_len": {
            "name": "read_sub_packets_len",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_sub_packets_num": {
            "name": "read_sub_packets_num",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_packets_until": {
            "name": "read_packets_until",
            "location": 107,
            "return": [
                "List[Union[(LiteralPacket, OperatorPacket)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_next_n_packets": {
            "name": "read_next_n_packets",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_packet": {
            "name": "read_packet",
            "location": 121,
            "return": [
                "Union[(LiteralPacket, OperatorPacket)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BITS.read_bits": {
            "name": "read_bits",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BITS.read_int": {
            "name": "read_int",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bit_length": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day16b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "Step",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day17a.py": {
        "find_max_y": {
            "name": "find_max_y",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Target.from_line": {
            "name": "from_line",
            "location": 22,
            "return": [
                "Target"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTarget]"
                ],
                "line": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Trajectory.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "velocity": [
                    "int",
                    "float",
                    "bool"
                ],
                "target": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Trajectory.calculate": {
            "name": "calculate",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trajectory.step": {
            "name": "step",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trajectory.check_position": {
            "name": "check_position",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trajectory.inc_dx": {
            "name": "inc_dx",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trajectory.inc_dy": {
            "name": "inc_dy",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trajectory.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2021/day17b.py": {
        "count_hit_trajectories": {
            "name": "count_hit_trajectories",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "target": [
                    "Iterable[Any]",
                    "Iterable[T]",
                    "float",
                    "bytes",
                    "Iterator[Any]",
                    "int",
                    "Tuple[int,int]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day18a.py": {
        "tokenize": {
            "name": "tokenize",
            "location": 10,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "reduce": {
            "name": "reduce",
            "location": 83,
            "return": [
                "str",
                "int",
                "List[int]",
                "Pattern",
                "Dict[str,Pattern]",
                "Optional[str]",
                "bytearray",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        },
        "duplicate": {
            "name": "duplicate",
            "location": 97,
            "return": [
                "Union[(Branch, Leaf)]"
            ],
            "arguments": {
                "node": [
                    "Dict"
                ]
            }
        },
        "explode": {
            "name": "explode",
            "location": 105,
            "return": [
                "Union[(Branch, Leaf)]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "Optional[int]",
                    "List[float]",
                    "float",
                    "None"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 191,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "List[str]",
                    "float",
                    "Tuple",
                    "str",
                    "Union[str,float]",
                    "bool"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 211,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "Node.from_line": {
            "name": "from_line",
            "location": 17,
            "return": [
                "int",
                "Dict[str, Tuple[Any, Any]]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "line": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Node.from_tokens": {
            "name": "from_tokens",
            "location": 21,
            "return": [
                "Union[(Branch, Leaf)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "List"
                ],
                "tokens": [
                    "str"
                ]
            }
        },
        "Node.magnitude": {
            "name": "magnitude",
            "location": 30,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__add__": {
            "name": "__add__",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Leaf.magnitude": {
            "name": "magnitude",
            "location": 45,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__add__": {
            "name": "__add__",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "Leaf.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "float",
                    "bool"
                ],
                "right": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Branch.from_tokens": {
            "name": "from_tokens",
            "location": 61,
            "return": [
                "Branch"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBranch]"
                ],
                "tokens": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,str]",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "Branch.from_int": {
            "name": "from_int",
            "location": 67,
            "return": [
                "Branch"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBranch]"
                ],
                "value": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Mapping",
                    "List",
                    "range",
                    "Union[bytes,str]",
                    "Tuple[str,str]"
                ]
            }
        },
        "Branch.magnitude": {
            "name": "magnitude",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.__add__": {
            "name": "__add__",
            "location": 76,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Branch.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "explode.traverse": {
            "name": "traverse",
            "location": 115,
            "return": [
                "Leaf",
                "Branch"
            ],
            "arguments": {
                "node": [],
                "depth": [],
                "path": []
            }
        },
        "explode.add_exploded_parts": {
            "name": "add_exploded_parts",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "last": [
                    "bool",
                    "str"
                ]
            }
        },
        "explode.add_to_most_right": {
            "name": "add_to_most_right",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "value": [
                    "KT",
                    "Tuple[object]",
                    "Optional[Mapping]",
                    "str",
                    "set",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "explode.add_to_most_left": {
            "name": "add_to_most_left",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "value": [
                    "KT",
                    "Tuple[object]",
                    "Optional[Mapping]",
                    "str",
                    "set",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "split.traverse": {
            "name": "traverse",
            "location": 194,
            "return": [
                "Leaf",
                "int",
                "Branch",
                "str",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day18b.py": {
        "solve": {
            "name": "solve",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "List",
                    "Optional[str]"
                ]
            }
        }
    },
    "advent_of_code-master/src/year2021/day19a.py": {
        "triangulate_rest": {
            "name": "triangulate_rest",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rest": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "unique_beacons": {
            "name": "unique_beacons",
            "location": 63,
            "return": [
                "set"
            ],
            "arguments": {
                "scanners": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "Position.from_line": {
            "name": "from_line",
            "location": 19,
            "return": [
                "Position",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[str]",
                    "List",
                    "Set[str]",
                    "Iterable[str]",
                    "List[Union[Any,Any]]"
                ],
                "line": [
                    "str",
                    "int"
                ]
            }
        },
        "Scanner.from_text": {
            "name": "from_text",
            "location": 31,
            "return": [
                "Scanner"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScanner]"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "Scanner.beacons": {
            "name": "beacons",
            "location": 38,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/src/year2021/__init__.py": {},
    "advent_of_code-master/tests/conftest.py": {
        "mock_get_data": {
            "name": "mock_get_data",
            "location": 6,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/tests/test_main.py": {
        "runner": {
            "name": "runner",
            "location": 11,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Callable",
                    "int",
                    "Iterable[tuple[Union[int,int]]]",
                    "click.testing.CliRunner",
                    "Iterable[Tuple[int,int]]"
                ],
                "mock_get_data": []
            }
        },
        "test_wrong_year": {
            "name": "test_wrong_year",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Callable"
                ]
            }
        },
        "test_wrong_day": {
            "name": "test_wrong_day",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "day": [
                    "str"
                ]
            }
        },
        "test_wrong_part": {
            "name": "test_wrong_part",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Callable"
                ]
            }
        },
        "test_correct_solution_file_names": {
            "name": "test_correct_solution_file_names",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_correct_test_file_names": {
            "name": "test_correct_test_file_names",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/__init__.py": {},
    "advent_of_code-master/tests/src/__init__.py": {},
    "advent_of_code-master/tests/src/year2015/test_day01a.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day01b.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day02a.py": {
        "TestProcessData.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day02b.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day03a.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day03b.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day04a.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day04b.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day05a.py": {
        "TestIsNice.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessData.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day05b.py": {
        "TestIsNice.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day06a.py": {
        "TestProcessData.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateLight.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day06b.py": {
        "TestSolve.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_light_brightness_can_not_be_negative": {
            "name": "test_light_brightness_can_not_be_negative",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateLight.test_returns_correct_result": {
            "name": "test_returns_correct_result",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateLight.test_brightness_can_not_be_negative": {
            "name": "test_brightness_can_not_be_negative",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/test_day07a.py": {
        "TestProcessData.test_return_correct_result": {
            "name": "test_return_correct_result",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2015/__init__.py": {},
    "advent_of_code-master/tests/src/year2016/test_day01a.py": {
        "UpdateDirectionTest.test_turn_right": {
            "name": "test_turn_right",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateDirectionTest.test_turn_left": {
            "name": "test_turn_left",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateDirectionTest.test_turn_right_to_return_to_north": {
            "name": "test_turn_right_to_return_to_north",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateDirectionTest.test_turn_left_to_return_to_north": {
            "name": "test_turn_left_to_return_to_north",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateDirectionTest.test_turn_right_to_south": {
            "name": "test_turn_right_to_south",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateDirectionTest.test_turn_left_to_south": {
            "name": "test_turn_left_to_south",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedDataTest.test_simple_commands": {
            "name": "test_simple_commands",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedDataTest.test_long_distance": {
            "name": "test_long_distance",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_not_standard_coordinates": {
            "name": "test_not_standard_coordinates",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_move_north": {
            "name": "test_move_north",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_move_east": {
            "name": "test_move_east",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_move_south": {
            "name": "test_move_south",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_move_west": {
            "name": "test_move_west",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_long_distance": {
            "name": "test_long_distance",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_distance_from_zero_pos_pos": {
            "name": "test_distance_from_zero_pos_pos",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_distance_from_zero_pos_neg": {
            "name": "test_distance_from_zero_pos_neg",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_distance_from_zero_neg_neg": {
            "name": "test_distance_from_zero_neg_neg",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_distance_from_zero_neg_pos": {
            "name": "test_distance_from_zero_neg_pos",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_distance_from_zero_if_zero": {
            "name": "test_distance_from_zero_if_zero",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_repr_representation": {
            "name": "test_repr_representation",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTest.test_eq": {
            "name": "test_eq",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day01b.py": {
        "InBetweenTest.test_east": {
            "name": "test_east",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InBetweenTest.test_west": {
            "name": "test_west",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InBetweenTest.test_north": {
            "name": "test_north",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InBetweenTest.test_south": {
            "name": "test_south",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InBetweenTest.test_long_run": {
            "name": "test_long_run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InBetweenTest.test_same_points": {
            "name": "test_same_points",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InBetweenTest.test_not_horizontal_or_vertical": {
            "name": "test_not_horizontal_or_vertical",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_sample_path": {
            "name": "test_sample_path",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_no_points_are_visited": {
            "name": "test_no_points_are_visited",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day02a.py": {
        "ProcessedDataTest.test_empty_instructions": {
            "name": "test_empty_instructions",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedDataTest.test_single_line": {
            "name": "test_single_line",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedDataTest.test_multiple_lines": {
            "name": "test_multiple_lines",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedDataTest.test_new_trailing_line": {
            "name": "test_new_trailing_line",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_start_with_5": {
            "name": "test_start_with_5",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_move_up": {
            "name": "test_move_up",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_move_right": {
            "name": "test_move_right",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_move_down": {
            "name": "test_move_down",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_move_left": {
            "name": "test_move_left",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_block_up": {
            "name": "test_block_up",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_block_right": {
            "name": "test_block_right",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_block_down": {
            "name": "test_block_down",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_block_left": {
            "name": "test_block_left",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_can_move_up": {
            "name": "test_can_move_up",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_can_move_right": {
            "name": "test_can_move_right",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_can_move_down": {
            "name": "test_can_move_down",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeypadTest.test_can_move_left": {
            "name": "test_can_move_left",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.setUp": {
            "name": "setUp",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.test_start_with_2": {
            "name": "test_start_with_2",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.test_can_move_up": {
            "name": "test_can_move_up",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.test_can_move_right": {
            "name": "test_can_move_right",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.test_can_move_down": {
            "name": "test_can_move_down",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.test_can_move_left": {
            "name": "test_can_move_left",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotStandardKeypad.test_complete_layout": {
            "name": "test_complete_layout",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day02b.py": {
        "SampleSolve.test_solve": {
            "name": "test_solve",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day03a.py": {
        "ProcessDataTest.test_process_single_line": {
            "name": "test_process_single_line",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessDataTest.test_process_multiple_lines": {
            "name": "test_process_multiple_lines",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsBadTest.test_bad": {
            "name": "test_bad",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsBadTest.test_two_side_equal": {
            "name": "test_two_side_equal",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsBadTest.test_all_sides_equal": {
            "name": "test_all_sides_equal",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsBadTest.test_sum_of_shortest_equal_to_longest": {
            "name": "test_sum_of_shortest_equal_to_longest",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day03b.py": {
        "ProcessDataTest.test_process_data": {
            "name": "test_process_data",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day04a.py": {
        "ProcessDataTest.test_process_data": {
            "name": "test_process_data",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessDataTest.test_process_data_wrong_room_line_format": {
            "name": "test_process_data_wrong_room_line_format",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsRealTest.test_all_sorted": {
            "name": "test_all_sorted",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsRealTest.test_all_once": {
            "name": "test_all_once",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsRealTest.test_real_mix": {
            "name": "test_real_mix",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsRealTest.test_not_real_mix": {
            "name": "test_not_real_mix",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day04b.py": {
        "ShiftTest.test_simple_case": {
            "name": "test_simple_case",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_last_char": {
            "name": "test_last_char",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_long_shift": {
            "name": "test_long_shift",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_one_new_cycle": {
            "name": "test_one_new_cycle",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_full_cycle": {
            "name": "test_full_cycle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_two_full_cycles": {
            "name": "test_two_full_cycles",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_multiple_cycles": {
            "name": "test_multiple_cycles",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftTest.test_space": {
            "name": "test_space",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecipherTest.test_decipher": {
            "name": "test_decipher",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day05a.py": {
        "ComputeHexHash.test_compute_hex_hash": {
            "name": "test_compute_hex_hash",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day05b.py": {
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day06a.py": {
        "ProcessDataTest.test_process_data": {
            "name": "test_process_data",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day06b.py": {
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day07a.py": {
        "ProcessLineTest.test_basic_case": {
            "name": "test_basic_case",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessLineTest.test_long_line": {
            "name": "test_long_line",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessDataTest.test_sample_case": {
            "name": "test_sample_case",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPTest.test_eq_different_type": {
            "name": "test_eq_different_type",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPTest.test_eq_equal": {
            "name": "test_eq_equal",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPTest.test_eq_supernet_part_differs": {
            "name": "test_eq_supernet_part_differs",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPTest.test_eq_hypernet_part_differs": {
            "name": "test_eq_hypernet_part_differs",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportTLSTest.test_simple_ok": {
            "name": "test_simple_ok",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportTLSTest.test_simple_bad": {
            "name": "test_simple_bad",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportTLSTest.test_ABBA_inside_hypernet": {
            "name": "test_ABBA_inside_hypernet",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportTLSTest.test_long_parts_but_ok": {
            "name": "test_long_parts_but_ok",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportTLSTest.test_no_hypernet": {
            "name": "test_no_hypernet",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasABBATest.test_4_length_has": {
            "name": "test_4_length_has",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasABBATest.test_4_length_all_equal": {
            "name": "test_4_length_all_equal",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasABBATest.test_4_length_has_not": {
            "name": "test_4_length_has_not",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasABBATest.test_long_start_has": {
            "name": "test_long_start_has",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasABBATest.test_long_middle_has": {
            "name": "test_long_middle_has",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasABBATest.test_long_has_not": {
            "name": "test_long_has_not",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTest.test_solve": {
            "name": "test_solve",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/test_day07b.py": {
        "AbbasTest.test_no_aba": {
            "name": "test_no_aba",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbbasTest.test_all_char_the_same": {
            "name": "test_all_char_the_same",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbbasTest.test_multiple_abas": {
            "name": "test_multiple_abas",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportSSLTest.test_aba_in_first_supernet": {
            "name": "test_aba_in_first_supernet",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportSSLTest.test_no_bab": {
            "name": "test_no_bab",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportSSLTest.test_aba_in_second_supernet": {
            "name": "test_aba_in_second_supernet",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportSSLTest.test_odd_aba_without_bab": {
            "name": "test_odd_aba_without_bab",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportSSLTest.test_first_aba_has_not_bab": {
            "name": "test_first_aba_has_not_bab",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2016/__init__.py": {},
    "advent_of_code-master/tests/src/year2017/test_day01a.py": {
        "TestSolve.test_two_digits_match": {
            "name": "test_two_digits_match",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_two_different_digits_match": {
            "name": "test_two_different_digits_match",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_all_digits_match": {
            "name": "test_all_digits_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_no_digits_match": {
            "name": "test_no_digits_match",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_only_last_digit_match": {
            "name": "test_only_last_digit_match",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day01b.py": {
        "TestSolve.test_all_match": {
            "name": "test_all_match",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_no_match": {
            "name": "test_no_match",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_one_match": {
            "name": "test_one_match",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_few_match": {
            "name": "test_few_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day02a.py": {
        "fixture_data": {
            "name": "fixture_data",
            "location": 9,
            "return": [
                "Text",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "test_big_example": {
            "name": "test_big_example",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "int",
                    "Mapping",
                    "str"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "bytes",
                    "str",
                    "int",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day02b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestFindDivision.test_small_first": {
            "name": "test_small_first",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindDivision.test_small_last": {
            "name": "test_small_last",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindDivision.test_no_division": {
            "name": "test_no_division",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindDivision.test_multiple_division": {
            "name": "test_multiple_division",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day03a.py": {
        "test_circle_number": {
            "name": "test_circle_number",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_get_deviation": {
            "name": "test_get_deviation",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "List[int]",
                    "str",
                    "int",
                    "Union[str,float]",
                    "float"
                ],
                "circle": [
                    "List[int]",
                    "str",
                    "int",
                    "Union[str,float]",
                    "float"
                ],
                "expected": [
                    "List[int]",
                    "str",
                    "int",
                    "Union[str,float]",
                    "float"
                ]
            }
        },
        "TestSolve.test_start": {
            "name": "test_start",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_not_proper_diagonal": {
            "name": "test_not_proper_diagonal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_vertical": {
            "name": "test_vertical",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSolve.test_big_number": {
            "name": "test_big_number",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day03b.py": {
        "fixture_memory": {
            "name": "fixture_memory",
            "location": 11,
            "return": [
                "Memory",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_side_length": {
            "name": "test_side_length",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "memory": [
                    "int",
                    "str"
                ],
                "circle": [
                    "int",
                    "str",
                    "List[int]",
                    "float",
                    "Union[str,float]",
                    "bool"
                ],
                "expected": [
                    "bool"
                ]
            }
        },
        "test_neighbors": {
            "name": "test_neighbors",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "List[int]",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Tuple",
                    "List[str]"
                ],
                "expected": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ],
                "memory": [
                    "float",
                    "List",
                    "Tuple[int]",
                    "Sequence[cirq.Qid]",
                    "List[tuple[Union[int,int]]]",
                    "Tuple[int,int]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "test_adjust_direction": {
            "name": "test_adjust_direction",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "memory": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "side": [
                    "int",
                    "str",
                    "List[int]",
                    "float",
                    "Union[str,float]",
                    "bool"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[int]",
                    "float",
                    "Union[str,float]",
                    "bool"
                ]
            }
        },
        "test_next_item": {
            "name": "test_next_item",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "memory": [
                    "Dict"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day04a.py": {
        "test_count_valid": {
            "name": "test_count_valid",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_are_duplicates": {
            "name": "test_are_duplicates",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "passphrase": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day04b.py": {
        "test_anagrams": {
            "name": "test_anagrams",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "passphrase": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day05a.py": {
        "test_solve_positive_jump": {
            "name": "test_solve_positive_jump",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve_negative_jump": {
            "name": "test_solve_negative_jump",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day05b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day06a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMemory.test_copy": {
            "name": "test_copy",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemory.test_copy_multiple_digit_numbers": {
            "name": "test_copy_multiple_digit_numbers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemory.test_copy_negative_numbers": {
            "name": "test_copy_negative_numbers",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemory.test_redistribute": {
            "name": "test_redistribute",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day06b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day07a.py": {
        "test_process_line": {
            "name": "test_process_line",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_process_line_wrong_command_format": {
            "name": "test_process_line_wrong_command_format",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_line_wrong_weight_format": {
            "name": "test_process_line_wrong_weight_format",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_root": {
            "name": "test_find_root",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "List"
                ],
                "expected": [
                    "str",
                    "List"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day07b.py": {
        "test_find_unique": {
            "name": "test_find_unique",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "str",
                    "Dict",
                    "Dict[str,Tuple[str,str]]",
                    "bool",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "expected": [
                    "str",
                    "Dict",
                    "Dict[str,Tuple[str,str]]",
                    "bool",
                    "Dict[str,tuple[Union[str,str]]]"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day08a.py": {
        "test_process_line": {
            "name": "test_process_line",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day08b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day09a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "total_score": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day09b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "Dict"
                ],
                "expected": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day10a.py": {
        "fixture_rope": {
            "name": "fixture_rope",
            "location": 9,
            "return": [
                "Rope",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_first_two_multiply": {
            "name": "test_first_two_multiply",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "rope": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_reverse": {
            "name": "test_reverse",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "rope": [
                    "int"
                ]
            }
        },
        "test_move": {
            "name": "test_move",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "rope": [
                    "int",
                    "str"
                ]
            }
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day10b.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split": {
            "name": "test_split",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "chunk": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_compress": {
            "name": "test_compress",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_hex": {
            "name": "test_to_hex",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day11a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "directions": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day11b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day12a.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day12b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2017/test_day13a.py": {},
    "advent_of_code-master/tests/src/year2017/__init__.py": {},
    "advent_of_code-master/tests/src/year2018/test_day01a.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day01b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "changes": [
                    "str",
                    "bool",
                    "Tuple",
                    "Dict[str,list[str]]",
                    "int",
                    "Dict[str,List[str]]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Tuple",
                    "Dict[str,list[str]]",
                    "int",
                    "Dict[str,List[str]]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day02a.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day02b.py": {
        "test_get_similar_id_part": {
            "name": "test_get_similar_id_part",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day03a.py": {
        "test_parse_claim": {
            "name": "test_parse_claim",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_claim": [
                    "str",
                    "Tuple",
                    "Callable"
                ],
                "expected": [
                    "str",
                    "Tuple",
                    "Callable"
                ]
            }
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_claim": {
            "name": "test_apply_claim",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day03b.py": {
        "test_apply_claim": {
            "name": "test_apply_claim",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_claim_multiple_overlaps_on_one_inch": {
            "name": "test_apply_claim_multiple_overlaps_on_one_inch",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day04a.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_parse_all": {
            "name": "test_parse_all",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_total_minutes": {
            "name": "test_total_minutes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day04b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day05a.py": {
        "test_react": {
            "name": "test_react",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "char1": [
                    "str",
                    "int",
                    "bool"
                ],
                "char2": [
                    "str",
                    "int",
                    "bool"
                ],
                "expected": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day05b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day06a.py": {
        "sample_task": {
            "name": "sample_task",
            "location": 13,
            "return": [
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "sample_grid": {
            "name": "sample_grid",
            "location": 27,
            "return": [
                "BaseException",
                "Grid"
            ],
            "arguments": {}
        },
        "test_manhattan": {
            "name": "test_manhattan",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "coordinate1": [
                    "str"
                ],
                "coordinate2": [
                    "str"
                ],
                "distance": [
                    "str"
                ]
            }
        },
        "TestPin.test_from_string": {
            "name": "test_from_string",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "pin": [
                    "str"
                ]
            }
        },
        "TestPin.test_parse_task": {
            "name": "test_parse_task",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_task": []
            }
        },
        "TestGrid.test_parse_task": {
            "name": "test_parse_task",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_task": [],
                "sample_grid": []
            }
        },
        "TestGrid.test_largest_area": {
            "name": "test_largest_area",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_grid": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day06b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day07a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day07b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day08a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day08b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day09a.py": {
        "test_parse_task": {
            "name": "test_parse_task",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]"
                ],
                "expected_score": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestMarble.generate_circle": {
            "name": "generate_circle",
            "location": 16,
            "return": [
                "Tuple[(src.year2018.day09a.Marble, src.year2018.day09a.Marble)]"
            ],
            "arguments": {
                "step": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestMarble.get_circle_values": {
            "name": "get_circle_values",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ]
            }
        },
        "TestMarble.test_get_zero_marble": {
            "name": "test_get_zero_marble",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarble.test_insert_new": {
            "name": "test_insert_new",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "str",
                    "int"
                ],
                "expected_sequence": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestMarble.test_remove_counter_clockwise": {
            "name": "test_remove_counter_clockwise",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day10a.py": {
        "test_iterate_till_min_area": {
            "name": "test_iterate_till_min_area",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPoint.test_from_line": {
            "name": "test_from_line",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ],
                "point": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestPoint.test_parse_task": {
            "name": "test_parse_task",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_move": {
            "name": "test_move",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "expected_x": [
                    "str",
                    "List[str]",
                    "Type",
                    "Type[Dict[str,dict]]",
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "Type[List[Any]]"
                ],
                "expected_y": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day10b.py": {
        "test_iterate_till_min_area": {
            "name": "test_iterate_till_min_area",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day11a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "serial": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day11b.py": {
        "grid": {
            "name": "grid",
            "location": 8,
            "return": [
                "CachedGrid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_get_border_power": {
            "name": "test_get_border_power",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "Tuple",
                    "str"
                ],
                "y": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "Tuple",
                    "str"
                ],
                "size": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "Tuple",
                    "str"
                ],
                "expected_power": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "Tuple",
                    "str"
                ],
                "grid": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "Tuple",
                    "str"
                ]
            }
        },
        "test_square_power": {
            "name": "test_square_power",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[int]",
                    "bytearray"
                ],
                "y": [
                    "int",
                    "List[int]",
                    "bytearray"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "bytearray"
                ],
                "expected_power": [
                    "int",
                    "List[int]",
                    "bytearray"
                ],
                "grid": [
                    "int",
                    "List[int]",
                    "bytearray"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/test_day12a.py": {
        "task": {
            "name": "task",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_pattern": {
            "name": "test_get_pattern",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "task": []
            }
        },
        "test_get_new_generation": {
            "name": "test_get_new_generation",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2018/__init__.py": {},
    "advent_of_code-master/tests/src/year2019/test_day01a.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_count_fuel": {
            "name": "test_count_fuel",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mass": [
                    "str",
                    "float"
                ],
                "fuel": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day01b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict"
                ],
                "total_fuel": [
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day03a.py": {
        "plot": {
            "name": "plot",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "wires": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "grid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "grid": {
            "name": "grid",
            "location": 13,
            "return": [
                "Grid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_grid_setup": {
            "name": "test_grid_setup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "grid": [
                    "List[str]",
                    "Callable",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ]
            }
        },
        "test_basic_example": {
            "name": "test_basic_example",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "grid": []
            }
        },
        "test_bigger_examples": {
            "name": "test_bigger_examples",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "wires": [
                    "str",
                    "float"
                ],
                "distance": [
                    "str",
                    "float"
                ],
                "grid": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day03b.py": {
        "grid": {
            "name": "grid",
            "location": 8,
            "return": [
                "Grid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_real_examples": {
            "name": "test_real_examples",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "wires": [
                    "str",
                    "Mapping[str,Any]"
                ],
                "distance": [
                    "str",
                    "float"
                ],
                "grid": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day04a.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_decrease": {
            "name": "test_not_decrease",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "int",
                    "Sequence[int]"
                ],
                "expected": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_two_next": {
            "name": "test_two_next",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "int",
                    "Sequence[int]"
                ],
                "expected": [
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day04b.py": {
        "test_at_least_one_equal_pair": {
            "name": "test_at_least_one_equal_pair",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day06a.py": {
        "raw_orbit_data": {
            "name": "raw_orbit_data",
            "location": 8,
            "return": [
                "Text",
                "str",
                "int",
                "Tuple[int,str,str,str]"
            ],
            "arguments": {}
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_orbit_data": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_traverse": {
            "name": "test_traverse",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_orbit_data": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day06b.py": {
        "raw_orbit_data": {
            "name": "raw_orbit_data",
            "location": 9,
            "return": [
                "Text",
                "str",
                "int",
                "Tuple[int,str,str,str]"
            ],
            "arguments": {}
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_orbit_data": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_closest_distance": {
            "name": "test_closest_distance",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_orbit_data": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day07a.py": {
        "test_compute_output": {
            "name": "test_compute_output",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "str"
                ],
                "phases": [
                    "str"
                ],
                "output": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day07b.py": {
        "test_compute_output": {
            "name": "test_compute_output",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "str"
                ],
                "phases": [
                    "str"
                ],
                "output": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day08a.py": {
        "test_parse_layers": {
            "name": "test_parse_layers",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day08b.py": {
        "test_decode_image": {
            "name": "test_decode_image",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day10a.py": {
        "simple_task": {
            "name": "simple_task",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "simple_chart": {
            "name": "simple_chart",
            "location": 23,
            "return": [
                "str",
                "dict",
                "Tuple[str, int]"
            ],
            "arguments": {
                "simple_task": [
                    "str"
                ]
            }
        },
        "test_from_string": {
            "name": "test_from_string",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_task": [
                    "str"
                ]
            }
        },
        "test_count_visible_asteroids": {
            "name": "test_count_visible_asteroids",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "y": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "expected": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "simple_chart": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "test_most_observant": {
            "name": "test_most_observant",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_chart": [
                    "str",
                    "float"
                ]
            }
        },
        "test_most_observant_large_examples": {
            "name": "test_most_observant_large_examples",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "Tuple[str,str]",
                    "int",
                    "Tuple[Union[str,str]]",
                    "str"
                ],
                "expected": [
                    "Tuple[str,str]",
                    "int",
                    "Tuple[Union[str,str]]",
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day10b.py": {
        "test_simple_case": {
            "name": "test_simple_case",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_small_example": {
            "name": "test_small_example",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_big_example": {
            "name": "test_big_example",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day11a.py": {
        "test_robot_example_walk_through": {
            "name": "test_robot_example_walk_through",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockComputer.execute": {
            "name": "execute",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day12a.py": {
        "sample_data": {
            "name": "sample_data",
            "location": 11,
            "return": [
                "Optional[int]",
                "Optional[List[int]]",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "test_moon_from_string": {
            "name": "test_moon_from_string",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "expected_moon": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_process_data": {
            "name": "test_process_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "Dict",
                    "Dict[str,List[Any]]",
                    "Dict[str,list[Any]]",
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_apply_moon_velocity": {
            "name": "test_apply_moon_velocity",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_gravity": {
            "name": "test_apply_gravity",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_system_two_steps": {
            "name": "test_system_two_steps",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_moon_energy": {
            "name": "test_moon_energy",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_system_energy": {
            "name": "test_system_energy",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2019/test_day14a.py": {
        "test_read_task_data": {
            "name": "test_read_task_data",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_to_production": {
            "name": "test_add_to_production",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_produce": {
            "name": "test_produce",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Callable[Any,None]",
                    "Dict",
                    "Callable[[Any],None]",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "bytes",
                    "Union[Contributor,Coverage]"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/test_intcode.py": {
        "computer": {
            "name": "computer",
            "location": 23,
            "return": [
                "Computer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_program_from_string": {
            "name": "test_program_from_string",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [],
                "raw_opcodes": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected_opcodes": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_program_next": {
            "name": "test_program_next",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [
                    "str",
                    "float"
                ]
            }
        },
        "test_execute": {
            "name": "test_execute",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [
                    "str",
                    "Optional[Callable]",
                    "Mapping[str, Any]"
                ],
                "raw_opcodes": [
                    "str",
                    "int",
                    "List[src.autoks.core.gp_model.GPModel]"
                ],
                "expected_opcodes": [
                    "str",
                    "bool",
                    "Type[Exception]",
                    "Type",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ]
            }
        },
        "test_set_noun_and_verb": {
            "name": "test_set_noun_and_verb",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "test_multiple_executions": {
            "name": "test_multiple_executions",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_input": {
            "name": "test_input",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [],
                "program": [],
                "user_text": [
                    "str",
                    "bool"
                ],
                "expected_dram": [
                    "int",
                    "Dict[str,Sequence[Any]]"
                ]
            }
        },
        "test_output": {
            "name": "test_output",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [
                    "bool"
                ]
            }
        },
        "test_print_output": {
            "name": "test_print_output",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": []
            }
        },
        "test_next_opcode_with_mode": {
            "name": "test_next_opcode_with_mode",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "opcode": [
                    "str"
                ],
                "computer": [
                    "str"
                ]
            }
        },
        "test_input_compare_print": {
            "name": "test_input_compare_print",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "stdin": [
                    "str",
                    "int"
                ],
                "expect_stdout": [
                    "Dict[str,Sequence[str]]",
                    "str"
                ],
                "command": [
                    "str",
                    "Dict[str,Any]"
                ],
                "computer": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_input_pause": {
            "name": "test_input_pause",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": []
            }
        },
        "test_relative_base": {
            "name": "test_relative_base",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": []
            }
        },
        "test_output_large_number": {
            "name": "test_output_large_number",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": []
            }
        },
        "test_output_16_digit_number": {
            "name": "test_output_16_digit_number",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": []
            }
        },
        "test_produce_copy_of_itself": {
            "name": "test_produce_copy_of_itself",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "computer": [
                    "Set[int]"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2019/__init__.py": {},
    "advent_of_code-master/tests/src/year2020/test_day01a.py": {
        "test_process_data": {
            "name": "test_process_data",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_summands": {
            "name": "test_find_summands",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "numbers": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day01b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day02a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day02b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day03a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day03b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day04a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day04b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day05a.py": {
        "test_binary_search": {
            "name": "test_binary_search",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Union[int,float]",
                    "Optional[float]"
                ],
                "stop": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Union[int,float]",
                    "Optional[float]"
                ],
                "steps": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Union[int,float]",
                    "Optional[float]"
                ],
                "expected": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Union[int,float]",
                    "Optional[float]"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day06a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day06b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day07a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day07b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day08a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day08b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day09a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day09b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day10a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ],
                "answer": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day10b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ],
                "answer": [
                    "str"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day11a.py": {
        "task": {
            "name": "task",
            "location": 13,
            "return": [
                "int",
                "List[int]",
                "float",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "test_steps": {
            "name": "test_steps",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "task": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day11b.py": {
        "task": {
            "name": "task",
            "location": 13,
            "return": [
                "int",
                "List[int]",
                "float",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "test_steps": {
            "name": "test_steps",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "test_solve": {
            "name": "test_solve",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "task": []
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day12a.py": {
        "test_basic_example": {
            "name": "test_basic_example",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day12b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day13a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day13b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ],
                "expected": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day14a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day14b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day15a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Dict",
                    "Mapping"
                ],
                "expected_last": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Dict",
                    "Mapping"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day15b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Dict",
                    "Mapping"
                ],
                "expected_last": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Dict",
                    "Mapping"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day16a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/test_day16b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2020/__init__.py": {},
    "advent_of_code-master/tests/src/year2021/test_day01a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day01b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day02a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day02b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day03a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day03b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day04a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day04b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day05a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day05b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day06a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day06b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day07a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day07b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day08a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day08b.py": {
        "test_screen": {
            "name": "test_screen",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day09a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day09b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day10a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day10b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day11a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day11b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day12a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [],
                "routes": [
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day12b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [],
                "routes": [
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day13a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day14a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day14b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day15a.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [],
                "risk": [
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day15b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day16a.py": {
        "test_literal_packet": {
            "name": "test_literal_packet",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_packet_1": {
            "name": "test_operator_packet_1",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_packet_2": {
            "name": "test_operator_packet_2",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "bool"
                ],
                "version_sum": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day16b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Callable",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "evaluation_result": [
                    "Callable",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day17a.py": {
        "test_target_from_line": {
            "name": "test_target_from_line",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day17b.py": {
        "test_solve": {
            "name": "test_solve",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day18a.py": {
        "test_magnitude": {
            "name": "test_magnitude",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected_magnitude": [
                    "str"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "Union[Dict[str,str],List[Any],str]",
                    "List[Any]",
                    "Union[Dict[str,str],List[str],str]",
                    "List"
                ]
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split": {
            "name": "test_split",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "from_line": [
                    "str",
                    "Iterable[str]",
                    "None",
                    "int",
                    "List[str]",
                    "List",
                    "Optional[str]",
                    "Optional[int]",
                    "List[List[int]]"
                ],
                "to_line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_explode": {
            "name": "test_explode",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "from_line": [
                    "List[str]",
                    "float",
                    "List[int]",
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "to_line": [
                    "str",
                    "Type[Dict[str,Any]]",
                    "Type",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "test_reduce": {
            "name": "test_reduce",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum": {
            "name": "test_sum",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day18b.py": {
        "test_magnitude": {
            "name": "test_magnitude",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solve": {
            "name": "test_solve",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/test_day19a.py": {
        "test_position_from_line": {
            "name": "test_position_from_line",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "test_scanner_from_text": {
            "name": "test_scanner_from_text",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent_of_code-master/tests/src/year2021/__init__.py": {}
}
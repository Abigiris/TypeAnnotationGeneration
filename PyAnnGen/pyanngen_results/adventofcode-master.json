{
    "adventofcode-master/2018/day01.py": {
        "part1": {
            "name": "part1",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 11,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "puzzle": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode-master/2018/day02.py": {
        "part1": {
            "name": "part1",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 20,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode-master/2018/day03.py": {
        "parse": {
            "name": "parse",
            "location": 18,
            "return": [
                "List[Instruction]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 37,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode-master/2018/day04.py": {
        "parse": {
            "name": "parse",
            "location": 25,
            "return": [
                "List[shift]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adventofcode-master/2018/day05.py": {
        "part1": {
            "name": "part1",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 22,
            "return": [
                "List",
                "str",
                "bool",
                "Dict[Tuple[str,str],Tuple[float,float]]",
                "int",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Part1Test.test_examples": {
            "name": "test_examples",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part2Test.test_example": {
            "name": "test_example",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-master/2018/day06.py": {
        "parse": {
            "name": "parse",
            "location": 15,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "manhattan_dist": {
            "name": "manhattan_dist",
            "location": 27,
            "return": [
                "str",
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "iter_border": {
            "name": "iter_border",
            "location": 32,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "upper_left": [
                    "int",
                    "bool"
                ],
                "lower_right": [
                    "int",
                    "dict"
                ]
            }
        },
        "iter_area": {
            "name": "iter_area",
            "location": 45,
            "return": [
                "Generator[(Tuple[(int, int)], Any, None)]"
            ],
            "arguments": {
                "upper_left": [
                    "List[str]",
                    "int",
                    "Dict"
                ],
                "lower_right": [
                    "List[str]",
                    "int",
                    "Dict"
                ]
            }
        },
        "lesser_median": {
            "name": "lesser_median",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "List",
                    "Tuple[frozenset]",
                    "int",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        },
        "find_bound": {
            "name": "find_bound",
            "location": 61,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "produce": [
                    "int",
                    "bool"
                ],
                "in_bounds": [
                    "int",
                    "bool"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 76,
            "return": [
                "List[int]",
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "puzzle": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "dist_limit": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part1.closest": {
            "name": "closest",
            "location": 80,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "start": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Hashable",
                    "Optional[int]"
                ]
            }
        },
        "part2.total_dist": {
            "name": "total_dist",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "p": [
                    "int"
                ]
            }
        },
        "part2.in_bounds": {
            "name": "in_bounds",
            "location": 102,
            "return": [
                "bool",
                "int",
                "Union[str,int,float]",
                "List[int]",
                "str",
                "Tuple[int,int]"
            ],
            "arguments": {
                "p": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Part1Test.test_example": {
            "name": "test_example",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part2Test.test_example": {
            "name": "test_example",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-master/2018/day07.py": {
        "parse": {
            "name": "parse",
            "location": 12,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Union[str,float]"
                ],
                "nworkers": [
                    "int",
                    "Callable[[List],bool]",
                    "float",
                    "List"
                ],
                "base_time": [
                    "int",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part2.step_time": {
            "name": "step_time",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "step": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ExampleTest.test_part1": {
            "name": "test_part1",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_part2": {
            "name": "test_part2",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-master/2018/day08.py": {
        "parse_node": {
            "name": "parse_node",
            "location": 16,
            "return": [
                "Node"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "Any"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 26,
            "return": [
                "Node"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "metadata_sum": {
            "name": "metadata_sum",
            "location": 35,
            "return": [
                "bool",
                "slice",
                "Iterable[Any]"
            ],
            "arguments": {
                "tree": []
            }
        },
        "value": {
            "name": "value",
            "location": 41,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "node": [
                    "Optional[Any]",
                    "int",
                    "Any",
                    "None"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 55,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 61,
            "return": [
                "Match",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ExampleTest.test_part1": {
            "name": "test_part1",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_part2": {
            "name": "test_part2",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-master/2018/day09.py": {
        "part1": {
            "name": "part1",
            "location": 66,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "nplayers": [
                    "int",
                    "Optional[Period]"
                ],
                "highest_marble": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 83,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "nplayers": [
                    "int",
                    "str",
                    "Iterable[list[str]]",
                    "bool",
                    "Iterable[List[str]]"
                ],
                "highest_node": [
                    "int",
                    "str",
                    "Iterable[list[str]]",
                    "bool",
                    "Iterable[List[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,float]",
                    "bool"
                ],
                "next": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,float]",
                    "bool"
                ],
                "value": [
                    "int",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "Node.default": {
            "name": "default",
            "location": 19,
            "return": [
                "Node"
            ],
            "arguments": {}
        },
        "Node.forward": {
            "name": "forward",
            "location": 26,
            "return": [
                "Node",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Node.back": {
            "name": "back",
            "location": 33,
            "return": [
                "Node",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Node.insert": {
            "name": "insert",
            "location": 40,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [
                    "_TNode@@Node@@"
                ],
                "value": [
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Sequence[T]]",
                    "Sequence[T]",
                    "int",
                    "None"
                ]
            }
        },
        "Node.remove": {
            "name": "remove",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.value": {
            "name": "value",
            "location": 53,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.chain_values": {
            "name": "chain_values",
            "location": 57,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_part1": {
            "name": "test_part1",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-master/2018/day10.py": {
        "bounding_circumference": {
            "name": "bounding_circumference",
            "location": 33,
            "return": [
                "float",
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "points": [
                    "str"
                ]
            }
        },
        "run_until_compact": {
            "name": "run_until_compact",
            "location": 43,
            "return": [
                "Tuple[Union[set,int]]",
                "str",
                "int",
                "List[float]",
                "Dict[str,str]"
            ],
            "arguments": {
                "points": [
                    "List",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 59,
            "return": [
                "Set",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 93,
            "return": [
                "bool",
                "List[int]"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Point.step": {
            "name": "step",
            "location": 25,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint@@Point@@"
                ]
            }
        },
        "ExampleTest.test_part1": {
            "name": "test_part1",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_part2": {
            "name": "test_part2",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-master/2018/day11.py": {
        "power": {
            "name": "power",
            "location": 11,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List",
                    "Set[str]"
                ],
                "y": [
                    "int",
                    "AbstractSet",
                    "AbstractSet[int]",
                    "bool"
                ],
                "serial": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "square_power": {
            "name": "square_power",
            "location": 22,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple",
                "List[str]",
                "List[Tuple]",
                "List"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "serial": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 27,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "serial": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "serial": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ExampleTest.test_power_level": {
            "name": "test_power_level",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_sq_pow": {
            "name": "test_sq_pow",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTest.test_part1": {
            "name": "test_part1",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
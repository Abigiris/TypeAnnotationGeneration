{
    "agape-master/setup.py": {},
    "agape-master/agape/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/agape/exceptions.py": {},
    "agape-master/agape/gaf_reader.py": {
        "my_read_gaf": {
            "name": "my_read_gaf",
            "location": 12,
            "return": [
                "int",
                "str",
                "Tuple",
                "List[tuple[Union[str,bool,Any]]]",
                "Iterator",
                "List[Optional[str]]",
                "List"
            ],
            "arguments": {
                "fin_gaf": [
                    "float",
                    "bool",
                    "str"
                ],
                "prt": [
                    "float",
                    "bool",
                    "str"
                ],
                "before_date": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "agape-master/agape/gene_ontology.py": {
        "go_annotations": {
            "name": "go_annotations",
            "location": 19,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "prettify": {
            "name": "prettify",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ontology": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GO.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.set_evidence_codes": {
            "name": "set_evidence_codes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.set_allowed_evidence_codes": {
            "name": "set_allowed_evidence_codes",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_evidence_codes": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "GO.load_go_dag": {
            "name": "load_go_dag",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.set": {
            "name": "set",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GO.get": {
            "name": "get",
            "location": 113,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GO.__iter__": {
            "name": "__iter__",
            "location": 116,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.get_associations": {
            "name": "get_associations",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ontology": [
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "GO.remove_unwanted_genes": {
            "name": "remove_unwanted_genes",
            "location": 186,
            "return": [
                "int",
                "List[int]",
                "str",
                "Callable",
                "List[Union[str,str,str,str,str,str,str,str,str,str]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "wanted_genes": [
                    "List",
                    "str",
                    "List[Union[int,str,str,str,str,str,str,str,str,str]]",
                    "List[int]",
                    "float"
                ],
                "associations": [
                    "List[int]",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "List[Union[str,str,str,str,str,str,str,str,str,str]]"
                ]
            }
        },
        "GO.term2ontology": {
            "name": "term2ontology",
            "location": 204,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.ontology2term": {
            "name": "ontology2term",
            "location": 212,
            "return": [
                "MutableMapping[str,Any]",
                "Dict",
                "Type",
                "List",
                "str",
                "int",
                "Dict[int,Any]",
                "Dict[int,str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/agape/load.py": {
        "Genes.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Genes.viability": {
            "name": "viability",
            "location": 29,
            "return": [
                "str",
                "List",
                "Iterable[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "phenotype": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Biogrid.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Biogrid.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "interaction_type": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "graph": [
                    "str",
                    "bool"
                ]
            }
        },
        "STRING.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "STRING.get": {
            "name": "get",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interaction_type": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "agape-master/agape/mapping.py": {
        "dictify": {
            "name": "dictify",
            "location": 12,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "df": [],
                "key": [],
                "value": []
            }
        },
        "gene2symbol": {
            "name": "gene2symbol",
            "location": 34,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        }
    },
    "agape-master/agape/meta.py": {
        "Meta.__new__": {
            "name": "__new__",
            "location": 8,
            "return": [
                "type",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict"
                ],
                "clsname": [
                    "int",
                    "Dict"
                ],
                "superclasses": [
                    "int",
                    "Dict"
                ],
                "attributedict": [
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "agape-master/agape/plotting.py": {
        "plot_loss": {
            "name": "plot_loss",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "plot_data": [
                    "Dict[str,dict]",
                    "Dict[str,bool]",
                    "Dict[str,str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "filename": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "end_epoch": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[Union[int,str]]"
                ],
                "log_y": [
                    "bool",
                    "List[int]",
                    "List[str]",
                    "Callable",
                    "str"
                ],
                "plot_train": [
                    "bool",
                    "List[int]",
                    "List[str]",
                    "Callable",
                    "str"
                ],
                "colors": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Union[int, str]]"
                ]
            }
        },
        "plot_loss.plotter": {
            "name": "plotter",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "history": [
                    "int",
                    "Union[float, List[float]]",
                    "List[int]"
                ],
                "label": [
                    "int",
                    "Union[float, List[float]]",
                    "str"
                ],
                "c": [
                    "int",
                    "Union[float, List[float]]",
                    "List[int]"
                ],
                "n": [
                    "None",
                    "int",
                    "Union[float,List[float]]",
                    "List[int]"
                ]
            }
        }
    },
    "agape-master/agape/utils.py": {
        "directory_exists": {
            "name": "directory_exists",
            "location": 7,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "p": [
                    "str",
                    "bool",
                    "Union[str,float]",
                    "float"
                ]
            }
        },
        "stdout": {
            "name": "stdout",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]",
                    "Union[Literal,str]"
                ],
                "object": [
                    "int",
                    "None",
                    "List[int]",
                    "bytes",
                    "str",
                    "List",
                    "List[str]"
                ],
                "file": [
                    "str",
                    "None",
                    "bytes",
                    "BinaryIO",
                    "Tuple[int,int]",
                    "List[Tuple[str,int]]",
                    "Tuple[Union[int,int]]",
                    "List[tuple[Union[str,int]]]"
                ]
            }
        }
    },
    "agape-master/agape/__init__.py": {},
    "agape-master/agape/deepNF/autoencoders.py": {
        "AE": {
            "name": "AE",
            "location": 8,
            "return": [
                "Model",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "Callable",
                    "bytes"
                ],
                "encoding_dims": [
                    "list",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Dict[str, str]",
                    "List[int]"
                ]
            }
        },
        "MDA": {
            "name": "MDA",
            "location": 37,
            "return": [
                "Model",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "input_dims": [
                    "list",
                    "List[int]",
                    "int",
                    "List[float]"
                ],
                "encoding_dims": [
                    "List[List[int]]",
                    "str"
                ]
            }
        }
    },
    "agape-master/agape/deepNF/performance.py": {},
    "agape-master/agape/deepNF/utils.py": {
        "mkdir": {
            "name": "mkdir",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_load_ppmi_matrix": {
            "name": "_load_ppmi_matrix",
            "location": 17,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "load_ppmi_matrices": {
            "name": "load_ppmi_matrices",
            "location": 37,
            "return": [
                "Tuple[list]",
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "data_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "gene2index": {
            "name": "gene2index",
            "location": 60,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "mapping_file": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "IO",
                    "Optional[IO[bytes]]",
                    "Optional[Directory]"
                ]
            }
        },
        "load_embeddings": {
            "name": "load_embeddings",
            "location": 85,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "embeddings_file": [
                    "str",
                    "BinaryIO",
                    "TextIO"
                ]
            }
        }
    },
    "agape-master/agape/deepNF/validation.py": {
        "AUPR": {
            "name": "AUPR",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_true": [
                    "list",
                    "List[Tuple[bool, str]]",
                    "List[List[int]]",
                    "Tuple[str]",
                    "\"Scope\""
                ],
                "y_score": [
                    "int",
                    "AsyncIterator[T]",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "M_AUPR": {
            "name": "M_AUPR",
            "location": 28,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_true": [
                    "str"
                ],
                "y_score": [
                    "int",
                    "numpy.ndarray",
                    "callable"
                ]
            }
        },
        "m_AUPR": {
            "name": "m_AUPR",
            "location": 49,
            "return": [
                "int",
                "str",
                "Callable",
                "bool",
                "Dict[str,bool]",
                "List[int]",
                "Dict[int,Union[str,None]]",
                "List[tuple[Union[Any,Any]]]",
                "List"
            ],
            "arguments": {
                "y_true": [
                    "List[tuple[Union[bool,str]]]",
                    "numpy.ndarray",
                    "List[Tuple[bool,str]]"
                ],
                "y_score": [
                    "List[tuple[Union[bool,str]]]",
                    "numpy.ndarray",
                    "List[Tuple[bool,str]]"
                ]
            }
        },
        "cross_validation": {
            "name": "cross_validation",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "n_trials": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "n_jobs": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "n_threads": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "random_state": [
                    "int",
                    "None",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "clf_type": [
                    "Text",
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ],
                "max_depth": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "_Performance.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y_true": [
                    "str",
                    "Dict[str,T]",
                    "Dict[str,_]"
                ],
                "y_score": [
                    "Dict[str,Any]",
                    "str"
                ],
                "y_pred": [
                    "str",
                    "Callable",
                    "bool",
                    "List[Tuple[str,numpy.generic]]",
                    "List[tuple[Union[str,numpy.generic]]]"
                ]
            }
        },
        "cross_validation.calculate_mean_std": {
            "name": "calculate_mean_std",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "metric": [
                    "numpy.ndarray",
                    "Optional[Iterable[T]]"
                ]
            }
        }
    },
    "agape-master/agape/deepNF/__init__.py": {},
    "agape-master/agape/ml/autoencoder.py": {
        "AbstractAutoencoder.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAutoencoder.train": {
            "name": "train",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAutoencoder.summary": {
            "name": "summary",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAutoencoder.predict": {
            "name": "predict",
            "location": 138,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "AbstractAutoencoder.encode": {
            "name": "encode",
            "location": 144,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "AbstractAutoencoder._check_parameters": {
            "name": "_check_parameters",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAutoencoder._compile": {
            "name": "_compile",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAutoencoder._encoder_layer": {
            "name": "_encoder_layer",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "embedding_size": [
                    "int",
                    "List[float]",
                    "float"
                ],
                "previous_layer": [
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        },
        "AbstractAutoencoder._add_noise": {
            "name": "_add_noise",
            "location": 213,
            "return": [
                "List",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "list",
                    "Union[int, str]",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        },
        "Autoencoder.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_train": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float, None]",
                    "Union[Tuple[int, float], None]"
                ],
                "x_val": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float, None]",
                    "Union[Tuple[int, float], None]"
                ],
                "embedding_size": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Union[Tuple[int, int], int]"
                ],
                "sparse": [
                    "None",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "dropout": [
                    "None",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "denoising": [
                    "None",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "epochs": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "activation": [
                    "Text",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "optimizer": [
                    "Text",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "loss": [
                    "Text",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "early_stopping": [
                    "None",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "save_best_model": [
                    "None",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ],
                "verbose": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Union[float,None]",
                    "Union[Tuple[int,float],None]"
                ]
            }
        },
        "Autoencoder._check_parameters": {
            "name": "_check_parameters",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autoencoder._compile": {
            "name": "_compile",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autoencoder.train": {
            "name": "train",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeepAutoencoder.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_train": [
                    "str",
                    "Union[Tuple[int, float], None]",
                    "Union[float, None]",
                    "numpy.ndarray",
                    "Union[str, None]"
                ],
                "x_val": [
                    "str",
                    "Union[Tuple[int, float], None]",
                    "Union[float, None]",
                    "numpy.ndarray",
                    "Union[str, None]"
                ],
                "layers": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "sparse": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "dropout": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "denoising": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "epochs": [
                    "int",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "activation": [
                    "Text",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "optimizer": [
                    "Text",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "loss": [
                    "Text",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "early_stopping": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "save_best_model": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ]
            }
        },
        "DeepAutoencoder._check_parameters": {
            "name": "_check_parameters",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeepAutoencoder._compile": {
            "name": "_compile",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeepAutoencoder.train": {
            "name": "train",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultimodalAutoencoder.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_train": [
                    "str",
                    "Union[Tuple[int, float], None]",
                    "Union[float, None]",
                    "numpy.ndarray",
                    "Union[str, None]"
                ],
                "x_val": [
                    "str",
                    "Union[Tuple[int, float], None]",
                    "Union[float, None]",
                    "numpy.ndarray",
                    "Union[str, None]"
                ],
                "layers": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "sparse": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "dropout": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "denoising": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "epochs": [
                    "int",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "activation": [
                    "Text",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "optimizer": [
                    "Text",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "loss": [
                    "Text",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "early_stopping": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "save_best_model": [
                    "None",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]",
                    "numpy.ndarray",
                    "Union[str,None]"
                ]
            }
        },
        "MultimodalAutoencoder._check_parameters": {
            "name": "_check_parameters",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultimodalAutoencoder._compile": {
            "name": "_compile",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultimodalAutoencoder.train": {
            "name": "train",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAutoencoder._add_noise.jitted_noise": {
            "name": "jitted_noise",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "nf": [
                    "int",
                    "bool"
                ]
            }
        },
        "AbstractAutoencoder._add_noise.f": {
            "name": "f",
            "location": 225,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "nf": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "agape-master/agape/ml/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "int",
                    "List",
                    "Dict",
                    "Dict[str,int]",
                    "Dict[T,int]",
                    "List[Dict[str,float]]",
                    "List[dict[str,float]]"
                ],
                "scale": [
                    "bool"
                ],
                "n_jobs": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "Classifier.__name__": {
            "name": "__name__",
            "location": 35,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.grid_search": {
            "name": "grid_search",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "parameters": [
                    "Dict[str,Union[str,Any]]",
                    "List[str]",
                    "bool",
                    "List"
                ],
                "scoring": [
                    "Dict",
                    "None"
                ],
                "cv": [
                    "Dict",
                    "int"
                ],
                "refit": [
                    "Dict",
                    "bool"
                ],
                "verbose": [
                    "bool",
                    "List[dict]",
                    "Dict",
                    "Tuple[str,int]",
                    "Mapping[str,Any]"
                ]
            }
        },
        "Classifier.fit": {
            "name": "fit",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Classifier.get_clf": {
            "name": "get_clf",
            "location": 87,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.predict": {
            "name": "predict",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "Tuple[Union[float,float,float,Literal]]",
                "str",
                "None",
                "ClassVar"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Classifier.predict_proba": {
            "name": "predict_proba",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "List"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Classifier.decision_function": {
            "name": "decision_function",
            "location": 125,
            "return": [
                "int",
                "bool",
                "float",
                "Iterator",
                "List"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "int",
                    "Any",
                    "Union[base.Criterion,Any]",
                    "Callable",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Classifier.score": {
            "name": "score",
            "location": 143,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Classifier.accuracy": {
            "name": "accuracy",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y_true": [
                    "Iterable[bytes]",
                    "Exception"
                ]
            }
        },
        "SVClassifier.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "int",
                    "None",
                    "Dict[int,int]",
                    "Optional[float]",
                    "float"
                ],
                "n_jobs": [
                    "int",
                    "Optional[float]",
                    "Dict[int,int]"
                ]
            }
        },
        "RFClassifier.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "int",
                    "None",
                    "float",
                    "Union[int,float]",
                    "Optional[float]"
                ],
                "n_jobs": [
                    "int",
                    "Union[int,float]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "LRClassifier.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "int",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "n_jobs": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "XGBClassifier.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "int",
                    "float",
                    "None"
                ],
                "n_threads": [
                    "int",
                    "float"
                ],
                "n_jobs": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "agape-master/agape/ml/ksparse_autoencoder.py": {
        "sparsity_level_per_epoch": {
            "name": "sparsity_level_per_epoch",
            "location": 38,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "n_epochs": [
                    "int",
                    "numpy.ndarray",
                    "Optional[int]"
                ]
            }
        },
        "KSparse.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "float",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "KSparse.call": {
            "name": "call",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ],
                "mask": [
                    "Dict",
                    "None"
                ]
            }
        },
        "KSparse.k_sparsify": {
            "name": "k_sparsify",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "KSparse.k_sparsify_top_k": {
            "name": "k_sparsify_top_k",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "KSparse.get_config": {
            "name": "get_config",
            "location": 29,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[dict]",
                "Dict[int, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KSparse.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 34,
            "return": [
                "int",
                "str",
                "Tuple[int]",
                "Generator",
                "List[bytes]",
                "List[int]",
                "Iterable[float]",
                "None",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "int",
                    "Generator",
                    "List[int]",
                    "bool",
                    "List[str]",
                    "None",
                    "Union[None,bytes]",
                    "bytes"
                ]
            }
        },
        "KSparseAutoencoder.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_train": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Tuple[Union[int,float]]",
                    "Union[Tuple[int,float],None]",
                    "None",
                    "Union[float,None]",
                    "float"
                ],
                "x_val": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Tuple[Union[int,float]]",
                    "Union[Tuple[int,float],None]",
                    "None",
                    "Union[float,None]",
                    "float"
                ],
                "embedding_size": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float",
                    "None",
                    "Tuple[int]"
                ],
                "k": [
                    "int",
                    "None",
                    "Dict[str,object]",
                    "Tuple[int]",
                    "float",
                    "Callable",
                    "Union[int,None]"
                ],
                "denoising": [
                    "str",
                    "None",
                    "int",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Tuple[Union[int,float]]",
                    "Union[float,None]",
                    "float"
                ],
                "epochs": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Union[mxnend.NDArray,numpy.ndarray]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]"
                ],
                "activation": [
                    "Text",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]"
                ],
                "optimizer": [
                    "Text",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]"
                ],
                "loss": [
                    "Text",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]"
                ],
                "early_stopping": [
                    "str",
                    "None",
                    "int",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Tuple[Union[int,float]]",
                    "Union[float,None]",
                    "float"
                ],
                "verbose": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Union[Tuple[int,float],None]",
                    "Union[float,None]"
                ]
            }
        },
        "KSparseAutoencoder._compile": {
            "name": "_compile",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KSparseAutoencoder.train": {
            "name": "train",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/agape/ml/__init__.py": {},
    "agape-master/scripts/ageing_genes/ageing_genes.py": {
        "sparse_colvector": {
            "name": "sparse_colvector",
            "location": 28,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "agape-master/scripts/deepNF/calculate_embeddings.py": {
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agape-master/scripts/deepNF/cv.py": {
        "main": {
            "name": "main",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agape-master/scripts/deepNF/mlp.py": {
        "MLP": {
            "name": "MLP",
            "location": 33,
            "return": [
                "Sequential",
                "numpy.ndarray",
                "str",
                "src.autoks.callbacks.CallbackList",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "y": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Any]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "calculate_mean_std": {
            "name": "calculate_mean_std",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "performance": [
                    "Optional[Tuple[str, ...]]",
                    "dict",
                    "Iterable",
                    "str",
                    "List[float]"
                ],
                "metric": [
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "Dict",
                    "str",
                    "None",
                    "List[float]",
                    "Iterable"
                ]
            }
        }
    },
    "agape-master/scripts/deepNF/train_autoencoder.py": {
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agape-master/scripts/deepNF/train_PCNet_autoencoder.py": {
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agape-master/scripts/deepNF/cerevisiae/cross_validation_annotations.py": {
        "parent_terms": {
            "name": "parent_terms",
            "location": 27,
            "return": [
                "List",
                "bool",
                "Callable[[KT],VT]",
                "Type"
            ],
            "arguments": {
                "go_dag": [
                    "str",
                    "int",
                    "bool"
                ],
                "go_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "propagate_parent_terms": {
            "name": "propagate_parent_terms",
            "location": 35,
            "return": [
                "str",
                "float",
                "sqlalchemy.engine.base.Engine"
            ],
            "arguments": {
                "associations": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "go_dag": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "get_gene_index": {
            "name": "get_gene_index",
            "location": 54,
            "return": [
                "Dict",
                "Dict[int,Dict[int,Any]]",
                "int"
            ],
            "arguments": {}
        },
        "get_go_id_index": {
            "name": "get_go_id_index",
            "location": 67,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Callable",
                    "list",
                    "Callable[[Any], str]"
                ]
            }
        },
        "fill_array_of_associations": {
            "name": "fill_array_of_associations",
            "location": 74,
            "return": [
                "pandas.DataFrame",
                "Sequence",
                "str",
                "sqlalchemy.engine.base.Engine"
            ],
            "arguments": {
                "M": [
                    "str",
                    "int"
                ],
                "associations": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "gene_indexes": [
                    "str",
                    "bool",
                    "List[int]",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "dict",
                    "int",
                    "float"
                ],
                "go_id_indexes": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "get_subarray_by_term_counts": {
            "name": "get_subarray_by_term_counts",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "M": [
                    "int",
                    "str"
                ],
                "vmin": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "vmax": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "filter_similar_terms": {
            "name": "filter_similar_terms",
            "location": 115,
            "return": [
                "float",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "M": [
                    "List[List[float]]",
                    "numpy.ndarray",
                    "List[List[int]]",
                    "pandas.DataFrame"
                ],
                "threshold": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GO.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.set_evidence_codes": {
            "name": "set_evidence_codes",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.set_allowed_evidence_codes": {
            "name": "set_allowed_evidence_codes",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_evidence_codes": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "pandas.DataFrame"
                ]
            }
        },
        "GO.load_go_dag": {
            "name": "load_go_dag",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.set": {
            "name": "set",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GO.get": {
            "name": "get",
            "location": 212,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GO.__iter__": {
            "name": "__iter__",
            "location": 215,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.get_associations": {
            "name": "get_associations",
            "location": 244,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ontology": [
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "GO.remove_unwanted_genes": {
            "name": "remove_unwanted_genes",
            "location": 296,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "wanted_genes": [
                    "list",
                    "List[int]",
                    "str",
                    "float"
                ],
                "associations": [
                    "List[int]",
                    "list",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "GO.term2ontology": {
            "name": "term2ontology",
            "location": 314,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GO.ontology2term": {
            "name": "ontology2term",
            "location": 322,
            "return": [
                "MutableMapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/scripts/deepNF/cerevisiae/preprocessing.py": {
        "_load_network": {
            "name": "_load_network",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "mtrx": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "load_networks": {
            "name": "load_networks",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "List[str]"
                ],
                "mtrx": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_net_normalize": {
            "name": "_net_normalize",
            "location": 82,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray"
                ]
            }
        },
        "net_normalize": {
            "name": "net_normalize",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Net": [
                    "List[int]",
                    "bytearray",
                    "list",
                    "List[float]",
                    "List[Dict]"
                ]
            }
        },
        "_scaleSimMat": {
            "name": "_scaleSimMat",
            "location": 115,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "A": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "RWR": {
            "name": "RWR",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "A": [
                    "float",
                    "T",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "K": [
                    "int",
                    "str"
                ],
                "alpha": [
                    "int",
                    "Optional[str]",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "PPMI_matrix": {
            "name": "PPMI_matrix",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "M": [
                    "List[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "agape-master/scripts/deepNF/cerevisiae/preprocessing_no_RWR_PPMI.py": {
        "_load_network": {
            "name": "_load_network",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "mtrx": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "load_networks": {
            "name": "load_networks",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "List[str]"
                ],
                "mtrx": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_net_normalize": {
            "name": "_net_normalize",
            "location": 82,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray"
                ]
            }
        },
        "net_normalize": {
            "name": "net_normalize",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Net": [
                    "List[int]",
                    "bytearray",
                    "list",
                    "List[float]",
                    "List[Dict]"
                ]
            }
        },
        "_scaleSimMat": {
            "name": "_scaleSimMat",
            "location": 115,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "A": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "RWR": {
            "name": "RWR",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "A": [
                    "float",
                    "T",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "K": [
                    "int",
                    "str"
                ],
                "alpha": [
                    "int",
                    "Optional[str]",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "PPMI_matrix": {
            "name": "PPMI_matrix",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "M": [
                    "List[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "agape-master/scripts/deepNF/cerevisiae/STRING.py": {
        "main": {
            "name": "main",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "STRING.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "STRING.get": {
            "name": "get",
            "location": 53,
            "return": [
                "str",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {
                "self": [],
                "interaction_type": [
                    "str",
                    "None"
                ]
            }
        },
        "STRING.convert_ids_to_numbers": {
            "name": "convert_ids_to_numbers",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "STRING.write": {
            "name": "write",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/scripts/deepNF/preprocessing/biogrid.py": {},
    "agape-master/scripts/deepNF/preprocessing/cross_validation_annotations.py": {
        "parent_terms": {
            "name": "parent_terms",
            "location": 21,
            "return": [
                "List",
                "bool",
                "Callable[[KT],VT]",
                "Type"
            ],
            "arguments": {
                "go_dag": [
                    "str",
                    "int",
                    "bool"
                ],
                "go_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "propagate_parent_terms": {
            "name": "propagate_parent_terms",
            "location": 29,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "associations": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "go_dag": [
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "get_gene_index": {
            "name": "get_gene_index",
            "location": 48,
            "return": [
                "Dict",
                "Dict[int,Dict[int,Any]]",
                "int"
            ],
            "arguments": {}
        },
        "get_go_id_index": {
            "name": "get_go_id_index",
            "location": 58,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "Callable",
                    "List",
                    "Callable[[Any],str]"
                ]
            }
        },
        "fill_array_of_associations": {
            "name": "fill_array_of_associations",
            "location": 65,
            "return": [
                "pandas.DataFrame",
                "Sequence",
                "str"
            ],
            "arguments": {
                "M": [
                    "str",
                    "int"
                ],
                "associations": [
                    "Dict",
                    "Dict[str,float]",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "gene_indexes": [
                    "str",
                    "List[int]",
                    "bool",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "Dict",
                    "int",
                    "float"
                ],
                "go_id_indexes": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "get_subarray_by_term_counts": {
            "name": "get_subarray_by_term_counts",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "M": [
                    "str",
                    "int"
                ],
                "vmin": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int,int]"
                ],
                "vmax": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int,int]"
                ]
            }
        },
        "filter_similar_terms": {
            "name": "filter_similar_terms",
            "location": 106,
            "return": [
                "float",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "M": [
                    "List[list[float]]",
                    "List[List[float]]",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "List[List[int]]",
                    "pandas.DataFrame"
                ],
                "threshold": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agape-master/scripts/deepNF/preprocessing/FYPO.py": {},
    "agape-master/scripts/deepNF/preprocessing/gene_expression_meta-analysis.py": {},
    "agape-master/scripts/deepNF/preprocessing/preprocessing.py": {
        "_load_network": {
            "name": "_load_network",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "mtrx": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "load_networks": {
            "name": "load_networks",
            "location": 78,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "List[str]"
                ],
                "mtrx": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_net_normalize": {
            "name": "_net_normalize",
            "location": 87,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray"
                ]
            }
        },
        "net_normalize": {
            "name": "net_normalize",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Net": [
                    "List[int]",
                    "bytearray",
                    "list",
                    "List[float]",
                    "List[Dict]"
                ]
            }
        },
        "_scaleSimMat": {
            "name": "_scaleSimMat",
            "location": 120,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "A": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "RWR": {
            "name": "RWR",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "A": [
                    "float",
                    "T",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "K": [
                    "int",
                    "str"
                ],
                "alpha": [
                    "int",
                    "Optional[str]",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "PPMI_matrix": {
            "name": "PPMI_matrix",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "M": [
                    "List[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "agape-master/scripts/deepNF/preprocessing/STRING.py": {
        "main": {
            "name": "main",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "STRING_deepNF.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "STRING_deepNF.convert_ids_to_numbers": {
            "name": "convert_ids_to_numbers",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "STRING_deepNF.write": {
            "name": "write",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/scripts/deepNF/recreate_deepNF/cv.py": {
        "main": {
            "name": "main",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agape-master/scripts/deepNF/recreate_deepNF/validation.py": {
        "kernel_func": {
            "name": "kernel_func",
            "location": 10,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[Iterable[Any]]",
                "float",
                "List[str]",
                "Tuple[Union[int,int]]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "numpy.ndarray"
                ],
                "Y": [
                    "numpy.ndarray",
                    "int",
                    "None"
                ],
                "param": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "real_AUPR": {
            "name": "real_AUPR",
            "location": 19,
            "return": [
                "Tuple[float]",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {
                "label": [
                    "List[int]",
                    "int"
                ],
                "score": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ml_split": {
            "name": "ml_split",
            "location": 47,
            "return": [
                "List[tuple]",
                "List[str]",
                "str",
                "Set",
                "float"
            ],
            "arguments": {
                "y": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "evaluate_performance": {
            "name": "evaluate_performance",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_test": [
                    "Callable",
                    "float"
                ],
                "y_score": [
                    "str",
                    "List",
                    "float",
                    "List[int]",
                    "List[list[float]]",
                    "raiden.utils.Any",
                    "Tuple",
                    "List[List[float]]",
                    "Dict"
                ],
                "y_pred": [
                    "int",
                    "Dict[int,dict[int,Any]]",
                    "raiden.utils.SecreRegistryAddress",
                    "Dict[int,Dict[int,Any]]"
                ]
            }
        },
        "cross_validation": {
            "name": "cross_validation",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "Collection[Issue]",
                    "Collection"
                ],
                "n_trials": [
                    "int",
                    "Union[int,float]",
                    "str",
                    "numpy.random.RandomState",
                    "Optional[float]"
                ],
                "ker": [
                    "Text",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        }
    },
    "agape-master/tests/test_gene_ontology.py": {
        "GoObj": {
            "name": "GoObj",
            "location": 27,
            "return": [
                "GO",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestGo_Annotations.setup_method": {
            "name": "setup_method",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGo_Annotations.test_context_manager": {
            "name": "test_context_manager",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGo_Annotations.test_context_manager_raises_FileNotFoundError": {
            "name": "test_context_manager_raises_FileNotFoundError",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGO.setup_method": {
            "name": "setup_method",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGO.test_evidence_codes": {
            "name": "test_evidence_codes",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "TestGO.test_evidence_codes_attrs": {
            "name": "test_evidence_codes_attrs",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestGO.test_set_allowed_evidence_codes": {
            "name": "test_set_allowed_evidence_codes",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "int"
                ]
            }
        },
        "TestGO.test_set_allowed_evidence_codes_raises_GeneOntologyError": {
            "name": "test_set_allowed_evidence_codes_raises_GeneOntologyError",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "int"
                ]
            }
        },
        "TestGO.test_set": {
            "name": "test_set",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": []
            }
        },
        "TestGO.test_get": {
            "name": "test_get",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "Callable",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "TestGO.test_load_go_dag": {
            "name": "test_load_go_dag",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestGO.test_load_go_dag_raises_GeneOntologyError": {
            "name": "test_load_go_dag_raises_GeneOntologyError",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": []
            }
        },
        "TestGO.test_iter": {
            "name": "test_iter",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "Dict",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "TestGO.test_iter_raises_GeneOntologyError": {
            "name": "test_iter_raises_GeneOntologyError",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "str"
                ]
            }
        },
        "TestGO.test_iter_next_no_evidence_codes": {
            "name": "test_iter_next_no_evidence_codes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": []
            }
        },
        "TestGO.test_iter_next_with_evidence_codes": {
            "name": "test_iter_next_with_evidence_codes",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "int"
                ]
            }
        },
        "TestGO.test_remove_unwanted_genes": {
            "name": "test_remove_unwanted_genes",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGO.test_term2ontology": {
            "name": "test_term2ontology",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGO.test_ontology2term": {
            "name": "test_ontology2term",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGO.test_get_associations": {
            "name": "test_get_associations",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": []
            }
        },
        "TestGO.test_get_associations_raises_GeneOntologyError": {
            "name": "test_get_associations_raises_GeneOntologyError",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "str"
                ]
            }
        },
        "TestGO.test_get_associations_ontology_P": {
            "name": "test_get_associations_ontology_P",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": [
                    "bool"
                ]
            }
        },
        "TestGO.test_get_associations_ontology_F": {
            "name": "test_get_associations_ontology_F",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": []
            }
        },
        "TestGO.test_get_associations_ontology_C": {
            "name": "test_get_associations_ontology_C",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GoObj": []
            }
        },
        "TestPrettify.test_prettify": {
            "name": "test_prettify",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettify.test_raises_GeneOntologyError": {
            "name": "test_raises_GeneOntologyError",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/tests/test_load.py": {
        "GenesObj": {
            "name": "GenesObj",
            "location": 7,
            "return": [
                "Genes",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BiogridObj": {
            "name": "BiogridObj",
            "location": 51,
            "return": [
                "Biogrid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "STRINGObj": {
            "name": "STRINGObj",
            "location": 74,
            "return": [
                "STRING",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {}
        },
        "TestGenes.setup_method": {
            "name": "setup_method",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenes.test_has_attrs": {
            "name": "test_has_attrs",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GenesObj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGenes.test_attrs_types": {
            "name": "test_attrs_types",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GenesObj": []
            }
        },
        "TestGenes.test_viability": {
            "name": "test_viability",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GenesObj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGenes.test_viability_viable": {
            "name": "test_viability_viable",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GenesObj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGenes.test_viability_inviable": {
            "name": "test_viability_inviable",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GenesObj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGenes.test_viability_raises_KeyError": {
            "name": "test_viability_raises_KeyError",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "GenesObj": [
                    "str"
                ]
            }
        },
        "TestBiogrid.test_load_biogrid": {
            "name": "test_load_biogrid",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "BiogridObj": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestBiogrid.test_load_biogrid_physical": {
            "name": "test_load_biogrid_physical",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "BiogridObj": [
                    "Dict"
                ]
            }
        },
        "TestBiogrid.test_load_biogrid_genetic": {
            "name": "test_load_biogrid_genetic",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "BiogridObj": [
                    "Dict"
                ]
            }
        },
        "TestBiogrid.test_load_graph": {
            "name": "test_load_graph",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "BiogridObj": [
                    "str"
                ]
            }
        },
        "TestBiogrid.test_raises_KeyError": {
            "name": "test_raises_KeyError",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "BiogridObj": [
                    "str"
                ]
            }
        },
        "TestSTRING.test_string_interaction_types": {
            "name": "test_string_interaction_types",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "STRINGObj": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "TestSTRING.test_string_df": {
            "name": "test_string_df",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "STRINGObj": [
                    "str",
                    "Dict",
                    "Dict[Any,List[str]]",
                    "Dict[Any,list[str]]"
                ]
            }
        },
        "TestSTRING.test_get": {
            "name": "test_get",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "STRINGObj": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestSTRING.test_get_raises_KeyError": {
            "name": "test_get_raises_KeyError",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "STRINGObj": [
                    "str"
                ]
            }
        }
    },
    "agape-master/tests/test_mapping.py": {
        "TestDictify.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictify.test_returns_dict": {
            "name": "test_returns_dict",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictify.test_df_equals_dict": {
            "name": "test_df_equals_dict",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictify.test_raises_keyerror": {
            "name": "test_raises_keyerror",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGene2Symbol.test_returns_dict": {
            "name": "test_returns_dict",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGene2Symbol.test_raises_keyerror": {
            "name": "test_raises_keyerror",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/tests/test_utils.py": {
        "TestDirectoryExists.test_directory_exists": {
            "name": "test_directory_exists",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectoryExists.test_raises_FileNotFoundError": {
            "name": "test_raises_FileNotFoundError",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStdout.setup_method": {
            "name": "setup_method",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStdout.test_string": {
            "name": "test_string",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStdout.test_string_object": {
            "name": "test_string_object",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/tests/deepNF/test_validation.py": {
        "Test_m_AUPR.test_m_AUPR": {
            "name": "test_m_AUPR",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_M_AUPR.test_M_AUPR": {
            "name": "test_M_AUPR",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_M_AUPR.test_raises_ValueError": {
            "name": "test_raises_ValueError",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agape-master/tests/ml/test_classifier.py": {
        "Clf": {
            "name": "Clf",
            "location": 17,
            "return": [
                "Classifier",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ClfGS": {
            "name": "ClfGS",
            "location": 30,
            "return": [
                "Classifier",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "SVClf": {
            "name": "SVClf",
            "location": 81,
            "return": [
                "SVClassifier",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "RFClf": {
            "name": "RFClf",
            "location": 111,
            "return": [
                "RFClassifier",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestClassifier.test_predict": {
            "name": "test_predict",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Clf": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestClassifier.test_predict_proba": {
            "name": "test_predict_proba",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Clf": [
                    "float",
                    "Dict[str,numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "TestClassifier.test_accuracy": {
            "name": "test_accuracy",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Clf": [
                    "List[numpy.ndarray]",
                    "str",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "TestClassifier.test_get_clf_Clf": {
            "name": "test_get_clf_Clf",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Clf": []
            }
        },
        "TestClassifier.test_get_clf_ClfGS": {
            "name": "test_get_clf_ClfGS",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ClfGS": []
            }
        },
        "TestSVClassifier.test_predict": {
            "name": "test_predict",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "SVClf": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestSVClassifier.test_predict_proba": {
            "name": "test_predict_proba",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "SVClf": [
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "TestRFClassifier.test_predict": {
            "name": "test_predict",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "RFClf": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestRFClassifier.test_predict_proba": {
            "name": "test_predict_proba",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "RFClf": [
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        }
    }
}
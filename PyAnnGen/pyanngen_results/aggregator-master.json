{
    "aggregator-master/setup.py": {},
    "aggregator-master/aggregator/run_local.py": {},
    "aggregator-master/aggregator/run_server.py": {},
    "aggregator-master/aggregator/__init__.py": {},
    "aggregator-master/aggregator/aggregator/plugin.py": {
        "Param.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "description": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "default": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Param.validate": {
            "name": "validate",
            "location": 46,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "BoolParam.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "description": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "default": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "BoolParam.validate": {
            "name": "validate",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool,Any]",
                    "Any"
                ]
            }
        },
        "StringParam.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "description": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "default": [
                    "Text",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "bool"
                ]
            }
        },
        "StringParam.validate": {
            "name": "validate",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool,Any]",
                    "Any"
                ]
            }
        },
        "NumberParam.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "description": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "default": [
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "min": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "bool",
                    "Optional[str]"
                ],
                "max": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "bool",
                    "Optional[str]"
                ],
                "step": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "NumberParam.validate": {
            "name": "validate",
            "location": 87,
            "return": [
                "int",
                "float",
                "bool",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "ComplexParam.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "description": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "type": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "None"
                ],
                "default": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "ComplexParam.validate": {
            "name": "validate",
            "location": 102,
            "return": [
                "int",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "List",
                    "Collection[str]",
                    "Collection"
                ]
            }
        },
        "ListParam.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "description": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "type": [
                    "str",
                    "bool",
                    "Type"
                ],
                "default": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "ListParam.validate": {
            "name": "validate",
            "location": 113,
            "return": [
                "List",
                "Set[int]",
                "Dict[str,Tuple[int,int]]",
                "Union[type,Tuple[type,...]]",
                "Dict",
                "List[Mapping[str,str]]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List",
                    "Tuple",
                    "str",
                    "List[float]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Plugin.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "size": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "Callable[,bool]",
                    "List",
                    "Optional[Callable[,bool]]"
                ],
                "params": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]",
                    "Dict[str,List[Any]]",
                    "str",
                    "Optional[Callable[[Dict],bool]]"
                ],
                "user_data": [
                    "Dict",
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "Plugin.get_payload": {
            "name": "get_payload",
            "location": 133,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.get_template": {
            "name": "get_template",
            "location": 136,
            "return": [
                "str",
                "Union[int, str]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Plugin.render": {
            "name": "render",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.render_small": {
            "name": "render_small",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.render_wide": {
            "name": "render_wide",
            "location": 158,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.render_tall": {
            "name": "render_tall",
            "location": 162,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.render_big": {
            "name": "render_big",
            "location": 166,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin.render_full": {
            "name": "render_full",
            "location": 170,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aggregator-master/aggregator/aggregator/register.py": {},
    "aggregator-master/aggregator/aggregator/__init__.py": {},
    "aggregator-master/aggregator/server/server.py": {},
    "aggregator-master/aggregator/server/__init__.py": {},
    "aggregator-master/aggregator/server/multi/server.py": {},
    "aggregator-master/aggregator/server/multi/__init__.py": {},
    "aggregator-master/aggregator/server/single/admin.py": {
        "admin": {
            "name": "admin",
            "location": 9,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "aggregator-master/aggregator/server/single/database.py": {},
    "aggregator-master/aggregator/server/single/server.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "add_plugin": {
            "name": "add_plugin",
            "location": 30,
            "return": [
                "Tuple[Union[Text,int]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "plugin": [
                    "int"
                ]
            }
        },
        "remove_plugin": {
            "name": "remove_plugin",
            "location": 41,
            "return": [
                "Tuple[Union[Text,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "save_param": {
            "name": "save_param",
            "location": 50,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Dict[str,str]",
                "bool",
                "int"
            ],
            "arguments": {
                "plugin_id": [
                    "str"
                ],
                "param_name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "save_size": {
            "name": "save_size",
            "location": 68,
            "return": [
                "Tuple[Union[Text,int]]",
                "bool",
                "float"
            ],
            "arguments": {
                "plugin_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Callable[[str],int]",
                    "Callable[str,int]"
                ],
                "size": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "aggregator-master/aggregator/server/single/_postgres.py": {},
    "aggregator-master/aggregator/server/single/_sqlite.py": {
        "connect": {
            "name": "connect",
            "location": 7,
            "return": [
                "SqliteExtDatabase",
                "Callable",
                "bool",
                "Callable[[str],None]"
            ],
            "arguments": {}
        }
    },
    "aggregator-master/aggregator/server/single/__init__.py": {},
    "aggregator-master/aggregator/utils/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "locked": [
                    "bool",
                    "int",
                    "str",
                    "Sequence",
                    "Optional[str]"
                ],
                "static": [
                    "bool",
                    "int",
                    "str",
                    "Sequence",
                    "Optional[str]"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "bool",
                "Iterable[int]",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "KT"
                ]
            }
        },
        "Config.__setitem__": {
            "name": "__setitem__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "VT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Config.register": {
            "name": "register",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "Config.lock": {
            "name": "lock",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.unlock": {
            "name": "unlock",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.merge": {
            "name": "merge",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "bool"
                ],
                "replace": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "Config.from_dict": {
            "name": "from_dict",
            "location": 59,
            "return": [
                "Dict[str,Any]",
                "Dict[str,Union[str,None]]",
                "Dict",
                "Dict[str,int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "Optional[dict]"
                ],
                "locked": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Dict[str,Any]"
                ],
                "static": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Config.to_dict": {
            "name": "to_dict",
            "location": 71,
            "return": [
                "Dict",
                "Dict[str,bool]",
                "int",
                "Exception",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Mapping",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Config.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigItem.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "value": [
                    "str",
                    "None"
                ],
                "locked": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "static": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ConfigItem.set": {
            "name": "set",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "ConfigItem.get": {
            "name": "get",
            "location": 114,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigItem.lock": {
            "name": "lock",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigItem.unlock": {
            "name": "unlock",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigItem.__eq__": {
            "name": "__eq__",
            "location": 123,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "List",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConfigItem.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "Text",
                "str",
                "int",
                "bool",
                "Tuple[Tuple[int,...]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigItem.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aggregator-master/aggregator/utils/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 10,
            "return": [
                "logging.Logger",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "aggregator-master/aggregator/utils/__init__.py": {},
    "aggregator-master/ext/dummy/plugin.py": {},
    "aggregator-master/ext/frame/plugin.py": {
        "FramePlugin.get_payload": {
            "name": "get_payload",
            "location": 17,
            "return": [
                "Dict[Text,Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aggregator-master/tests/utils/test_config.py": {
        "test_write_read_non_locked_item": {
            "name": "test_write_read_non_locked_item",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lock_unlock_item": {
            "name": "test_lock_unlock_item",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_static_item": {
            "name": "test_static_item",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_register": {
            "name": "test_config_register",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_inexistent": {
            "name": "test_config_inexistent",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_mutate": {
            "name": "test_config_mutate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_locked": {
            "name": "test_config_locked",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_static": {
            "name": "test_config_static",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_to_dict": {
            "name": "test_config_to_dict",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_from_dict": {
            "name": "test_config_from_dict",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
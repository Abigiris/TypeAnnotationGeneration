{
    "agogosml-master/agogosml/setup.py": {},
    "agogosml-master/agogosml/agogosml/__init__.py": {},
    "agogosml-master/agogosml/agogosml/common/abstract_streaming_client.py": {
        "find_streaming_clients": {
            "name": "find_streaming_clients",
            "location": 42,
            "return": [
                "dict[, ]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "create_streaming_client_from_config": {
            "name": "create_streaming_client_from_config",
            "location": 56,
            "return": [
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AbstractStreamingClient.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AbstractStreamingClient.send": {
            "name": "send",
            "location": 23,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractStreamingClient.stop": {
            "name": "stop",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractStreamingClient.start_receiving": {
            "name": "start_receiving",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received_callback": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "typing.Optional[]",
                    "Optional"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/broadcast_streaming_client.py": {
        "BroadcastStreamingClient.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "str",
                    "dict"
                ]
            }
        },
        "BroadcastStreamingClient.start_receiving": {
            "name": "start_receiving",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received_callback": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "typing.Optional[]",
                    "Optional"
                ]
            }
        },
        "BroadcastStreamingClient.send": {
            "name": "send",
            "location": 30,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "BroadcastStreamingClient.stop": {
            "name": "stop",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/eventhub_streaming_client.py": {
        "EventProcessor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EventHubStreamingClient.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[type]"
                ]
            }
        },
        "EventHubStreamingClient.start_receiving": {
            "name": "start_receiving",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received_callback": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "EventHubStreamingClient.exit_gracefully": {
            "name": "exit_gracefully",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EventHubStreamingClient.send": {
            "name": "send",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EventHubStreamingClient.stop": {
            "name": "stop",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/flask_http_listener_client.py": {
        "FlaskHttpListenerClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "FlaskHttpListenerClient.run_flask_server": {
            "name": "run_flask_server",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskHttpListenerClient.start": {
            "name": "start",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "FlaskHttpListenerClient.stop": {
            "name": "stop",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskHttpListenerClient.run_flask_server.on_input": {
            "name": "on_input",
            "location": 36,
            "return": [
                "str",
                "typing.Text",
                "bool",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "agogosml-master/agogosml/agogosml/common/http_message_sender.py": {
        "HttpMessageSender.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HttpMessageSender.send": {
            "name": "send",
            "location": 46,
            "return": [
                "bool",
                "float",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/kafka_streaming_client.py": {
        "KafkaStreamingClient.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "Callable"
                ]
            }
        },
        "KafkaStreamingClient.create_kafka_config": {
            "name": "create_kafka_config",
            "location": 61,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text,dict[typing.Text, typing.Text]]]",
                "dict[dict[typing.Text, typing.Union[bool,typing.Text,dict[typing.Text, typing.Text]]], dict[typing.Text, typing.Text]]",
                "Optional[dict]",
                "dict",
                "str",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Sequence"
            ],
            "arguments": {
                "user_config": [
                    "dict",
                    "core.common.Config"
                ]
            }
        },
        "KafkaStreamingClient.delivery_report": {
            "name": "delivery_report",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "Optional[device.utilities.logger.Logger]",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "KafkaStreamingClient.send": {
            "name": "send",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "KafkaStreamingClient.stop": {
            "name": "stop",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaStreamingClient.check_timeout": {
            "name": "check_timeout",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "datetime.datetime",
                    "None",
                    "datetime.timedelta",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "KafkaStreamingClient.handle_kafka_error": {
            "name": "handle_kafka_error",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "dict",
                    "BaseException"
                ]
            }
        },
        "KafkaStreamingClient.start_receiving": {
            "name": "start_receiving",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received_callback": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "KafkaStreamingClient.exit_gracefully": {
            "name": "exit_gracefully",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "KafkaStreamingClient.subscribe_to_topic": {
            "name": "subscribe_to_topic",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaStreamingClient.read_single_message": {
            "name": "read_single_message",
            "location": 173,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/listener_client.py": {
        "ListenerClient.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ListenerClient.start": {
            "name": "start",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "typing.Optional[]",
                    "Optional"
                ]
            }
        },
        "ListenerClient.stop": {
            "name": "stop",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/message_sender.py": {
        "MessageSender.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MessageSender.send": {
            "name": "send",
            "location": 16,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/redis_streaming_client.py": {
        "RedisStreamingClient.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "RedisStreamingClient.start_receiving": {
            "name": "start_receiving",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received_callback": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "typing.Optional[]",
                    "Optional"
                ]
            }
        },
        "RedisStreamingClient.send": {
            "name": "send",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RedisStreamingClient.stop": {
            "name": "stop",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisStreamingClient.start_receiving.on_redis_message": {
            "name": "on_redis_message",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "redis_envelope": [
                    "str"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/storage_streaming_client.py": {
        "StorageStreamingClient.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "utils.config_generator.Configurations",
                    "Dict[str, str]"
                ]
            }
        },
        "StorageStreamingClient.start_receiving": {
            "name": "start_receiving",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received_callback": [
                    "int",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[S]",
                    "List[types.ServiceT]",
                    "bool",
                    "typing.Optional[]",
                    "Optional"
                ]
            }
        },
        "StorageStreamingClient.send": {
            "name": "send",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "io.StringIO",
                    "io.TextIOWrapper"
                ]
            }
        },
        "StorageStreamingClient.stop": {
            "name": "stop",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml/agogosml/common/__init__.py": {},
    "agogosml-master/agogosml/agogosml/reader/input_reader.py": {
        "InputReader.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "streaming_client": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "message_sender": [
                    "float",
                    "bool",
                    "utils.clienClient"
                ]
            }
        },
        "InputReader.start_receiving_messages": {
            "name": "start_receiving_messages",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputReader.stop_incoming_messages": {
            "name": "stop_incoming_messages",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputReader.on_message_received": {
            "name": "on_message_received",
            "location": 27,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Dict[str, Dict]",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "InputReader.handle_send_failure": {
            "name": "handle_send_failure",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "logging.Logger"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/reader/input_reader_factory.py": {
        "InputReaderFactory.create": {
            "name": "create",
            "location": 14,
            "return": [
                "InputReader",
                "Callable",
                "Callable[[str], None]",
                "dict"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "streaming_client": [
                    "dict",
                    "None",
                    "str",
                    "dict[, ]",
                    "Optional[str]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/reader/__init__.py": {},
    "agogosml-master/agogosml/agogosml/tools/receiver.py": {
        "receive": {
            "name": "receive",
            "location": 11,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "outfile": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "receiver_class": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "config": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "receive.on_message": {
            "name": "on_message",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "bool"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/tools/sender.py": {
        "send": {
            "name": "send",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "messages": [
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "sender_class": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "config": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "agogosml-master/agogosml/agogosml/tools/__init__.py": {},
    "agogosml-master/agogosml/agogosml/utils/cli.py": {
        "json_arg": {
            "name": "json_arg",
            "location": 6,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/utils/config.py": {
        "to_python": {
            "name": "to_python",
            "location": 27,
            "return": [
                "str",
                "float",
                "bytes",
                "bool",
                "bytearray",
                "typing.Iterable[str]",
                "int",
                "list",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[bytes, bytearray, str]",
                    "bytes",
                    "Iterable[str]",
                    "bytearray",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Config.get": {
            "name": "get",
            "location": 19,
            "return": [
                "str",
                "None",
                "Union[int, float]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int"
                ],
                "default": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/utils/http_request.py": {
        "post_with_retries": {
            "name": "post_with_retries",
            "location": 8,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "url": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "type",
                    "Sequence",
                    "typing.Type",
                    "dict",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "data": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "type",
                    "Sequence",
                    "typing.Type",
                    "dict",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "retries": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "backoff": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/utils/imports.py": {
        "get_base_module": {
            "name": "get_base_module",
            "location": 15,
            "return": [
                "tuple[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "interface": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "import_subpackages": {
            "name": "import_subpackages",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module_prefix": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "module_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "find_implementations": {
            "name": "find_implementations",
            "location": 29,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "interface": [
                    "Optional[int]",
                    "type",
                    "Optional[dict]",
                    "str",
                    "dict",
                    "Iterable[T]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/utils/logger.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "path": [
                    "typing.Text",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "env_key": [
                    "typing.Text",
                    "int",
                    "bool",
                    "dict",
                    "List[str]",
                    "Union[List[str], List[int]]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "level": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Logger._logger": {
            "name": "_logger",
            "location": 38,
            "return": [
                "logging.Logger",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger._telemetry": {
            "name": "_telemetry",
            "location": 55,
            "return": [
                "TelemetryClient",
                "Optional[int]",
                "applicationinsights.TelemetryClient",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "Tuple[Tuple[str, ...]]",
                    "logging.Logger",
                    "pathlib.Path"
                ]
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Logger.event": {
            "name": "event",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.IO",
                    "Optional[IO[str]]",
                    "T"
                ],
                "props": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[int, str]",
                    "int",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "Logger._log": {
            "name": "_log",
            "location": 86,
            "return": [
                "None",
                "Generator[Tuple[int, Any], None, None]",
                "Iterator[Dict[str, Any]]",
                "Generator",
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "logging.Logger",
                    "int",
                    "float"
                ],
                "message": [
                    "int",
                    "str",
                    "logging.Logger"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/utils/__init__.py": {},
    "agogosml-master/agogosml/agogosml/writer/output_writer.py": {
        "OutputWriter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "streaming_client": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "listener": [
                    "float",
                    "bool",
                    "utils.clienClient"
                ]
            }
        },
        "OutputWriter.on_message_received": {
            "name": "on_message_received",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "typing.IO",
                    "bool",
                    "IO",
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "dict",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "OutputWriter.start_incoming_messages": {
            "name": "start_incoming_messages",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "OutputWriter.stop_incoming_messages": {
            "name": "stop_incoming_messages",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml/agogosml/writer/output_writer_factory.py": {
        "OutputWriterFactory.create": {
            "name": "create",
            "location": 15,
            "return": [
                "OutputWriter",
                "Dict[str, Any]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "dict",
                    "str"
                ],
                "streaming_client": [
                    "dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict[, ]"
                ],
                "listener_client": [
                    "dict",
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/agogosml/writer/__init__.py": {},
    "agogosml-master/agogosml/docs/conf.py": {},
    "agogosml-master/agogosml/tests/client_mocks.py": {
        "StreamingClientMock.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "StreamingClientMock.send": {
            "name": "send",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "StreamingClientMock.stop": {
            "name": "stop",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingClientMock.start_receiving": {
            "name": "start_receiving",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "StreamingClientMock.get_sent": {
            "name": "get_sent",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingClientMock.get_last_msg": {
            "name": "get_last_msg",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingClientMock.get_receiving": {
            "name": "get_receiving",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamingClientMock.fake_incoming_message_from_streaming": {
            "name": "fake_incoming_message_from_streaming",
            "location": 44,
            "return": [
                "int",
                "Sequence[float]",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "Set[str]",
                    "set[str]",
                    "Tuple[str]",
                    "tuple[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "StreamingClientMock.set_fail_send": {
            "name": "set_fail_send",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "should_fail": [
                    "bool",
                    "float"
                ]
            }
        },
        "HttpClientMock.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "HttpClientMock.start": {
            "name": "start",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message_received": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "HttpClientMock.stop": {
            "name": "stop",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpClientMock.mock_new_incoming_message": {
            "name": "mock_new_incoming_message",
            "location": 69,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpClientMock.get_started": {
            "name": "get_started",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpClientMock.get_stopped": {
            "name": "get_stopped",
            "location": 75,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSenderMock.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "MessageSenderMock.send": {
            "name": "send",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "MessageSenderMock.get_last_msg": {
            "name": "get_last_msg",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSenderMock.set_fail_send": {
            "name": "set_fail_send",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "should_fail": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "agogosml-master/agogosml/tests/test_input_reader.py": {
        "mock_streaming_client": {
            "name": "mock_streaming_client",
            "location": 14,
            "return": [
                "StreamingClientMock"
            ],
            "arguments": {}
        },
        "mock_message_sender": {
            "name": "mock_message_sender",
            "location": 19,
            "return": [
                "MessageSenderMock",
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "test_when_instance_created": {
            "name": "test_when_instance_created",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_message_sender": []
            }
        },
        "test_when_start_receiving_then_messaging_client_starts": {
            "name": "test_when_start_receiving_then_messaging_client_starts",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_message_sender": []
            }
        },
        "test_when_msg_received_callback_called": {
            "name": "test_when_msg_received_callback_called",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_message_sender": []
            }
        },
        "test_when_failed_to_deliver_then_failure_callback": {
            "name": "test_when_failed_to_deliver_then_failure_callback",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_message_sender": []
            }
        },
        "test_eventhub_created_from_factory": {
            "name": "test_eventhub_created_from_factory",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_kafka_created_from_factory": {
            "name": "test_kafka_created_from_factory",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "agogosml-master/agogosml/tests/test_output_writer.py": {
        "mock_streaming_client": {
            "name": "mock_streaming_client",
            "location": 16,
            "return": [
                "StreamingClientMock"
            ],
            "arguments": {}
        },
        "mock_listener_client": {
            "name": "mock_listener_client",
            "location": 21,
            "return": [
                "HttpClientMock"
            ],
            "arguments": {}
        },
        "test_when_ctor_instance_created": {
            "name": "test_when_ctor_instance_created",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_listener_client": []
            }
        },
        "test_on_message_received_sent_called": {
            "name": "test_on_message_received_sent_called",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_listener_client": []
            }
        },
        "test_broadcast_success": {
            "name": "test_broadcast_success",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_broadcast_failure": {
            "name": "test_broadcast_failure",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_broadcast_create_from_config": {
            "name": "test_broadcast_create_from_config",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_on_listener_event_sent_called": {
            "name": "test_on_listener_event_sent_called",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_listener_client": []
            }
        },
        "test_when_failed_to_send_then_report_error": {
            "name": "test_when_failed_to_send_then_report_error",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_listener_client": []
            }
        },
        "test_on_stop_event_stop_called": {
            "name": "test_on_stop_event_stop_called",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_streaming_client": [],
                "mock_listener_client": []
            }
        },
        "test_when_unknown_client_throw": {
            "name": "test_when_unknown_client_throw",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_output_writer_factory_event_hub": {
            "name": "test_output_writer_factory_event_hub",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_output_writer_factory_kafka": {
            "name": "test_output_writer_factory_kafka",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_output_writer_flask": {
            "name": "test_output_writer_flask",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_output_writer_flask.receive_callback": {
            "name": "receive_callback",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/tests/__init__.py": {},
    "agogosml-master/agogosml/tests/integration_tests/test_app.py": {
        "TestApp.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app_port": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "app_host": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "output_port": [
                    "int",
                    "str",
                    "bool"
                ],
                "output_host": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestApp.start": {
            "name": "start",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.on_message_received": {
            "name": "on_message_received",
            "location": 17,
            "return": [
                "List[int]",
                "dict[, ]",
                "Dict[str, int]",
                "List[dict]",
                "dict[str, typing.Union[float,str]]",
                "dict[str, bool]",
                "list[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "int",
                    "Union[BinaryIO, str]",
                    "typing.BinaryIO",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "agogosml-master/agogosml/tests/integration_tests/test_integration_input_app_output.py": {
        "mock_streaming_client": {
            "name": "mock_streaming_client",
            "location": 19,
            "return": [
                "StreamingClientMock"
            ],
            "arguments": {}
        },
        "mock_listener_client": {
            "name": "mock_listener_client",
            "location": 24,
            "return": [
                "HttpClientMock"
            ],
            "arguments": {}
        },
        "test_when_messages_received_in_input_then_all_messages_are_sent_via_output": {
            "name": "test_when_messages_received_in_input_then_all_messages_are_sent_via_output",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_when_error_in_output_then_pipeline_fails": {
            "name": "test_when_error_in_output_then_pipeline_fails",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_when_messages_sent_to_kafka_then_all_messages_are_sent_via_output": {
            "name": "test_when_messages_sent_to_kafka_then_all_messages_are_sent_via_output",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "send_message_to_kafka": {
            "name": "send_message_to_kafka",
            "location": 212,
            "return": [
                "float",
                "typing.Type",
                "int",
                "str",
                "Union[bool, None]",
                "dict[str, typing.Any]",
                "simulation.core.common.Resources",
                "dict[str, typing.Type]"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "read_message_from_kafka": {
            "name": "read_message_from_kafka",
            "location": 224,
            "return": [
                "None",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {}
        },
        "on_msg": {
            "name": "on_msg",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "int"
                ]
            }
        }
    },
    "agogosml-master/agogosml/tests/integration_tests/__init__.py": {},
    "agogosml-master/agogosml_cli/setup.py": {},
    "agogosml-master/agogosml_cli/cli/cli.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "agogosml-master/agogosml_cli/cli/generate.py": {
        "generate": {
            "name": "generate",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "force": [
                    "str"
                ],
                "config": [
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "dict"
                ],
                "app_base": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ],
                "folder": [
                    "str",
                    "dict[, ]",
                    "pathlib.Path",
                    "typing.Callable[, ]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "extract_template_vars_from_manifest": {
            "name": "extract_template_vars_from_manifest",
            "location": 85,
            "return": [
                "dict[typing.Union[dict[typing.Text, ],typing.Text], ]",
                "str",
                "Dict[str, Any]",
                "Dict[str, Optional[str]]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "manifest": [
                    "Callable"
                ]
            }
        },
        "extract_azure_template_vars": {
            "name": "extract_azure_template_vars",
            "location": 108,
            "return": [
                "str",
                "dict[, ]",
                "Optional[str]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "manifest": [
                    "str",
                    "dict",
                    "pathlib.Path"
                ]
            }
        },
        "add_agogosml_template_vars": {
            "name": "add_agogosml_template_vars",
            "location": 136,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Iterable[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "write_cookiecutter": {
            "name": "write_cookiecutter",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "target_path": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "template_vars": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "overwrite": [
                    "bool",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "safe_filename": {
            "name": "safe_filename",
            "location": 149,
            "return": [
                "str",
                "dict",
                "list",
                "Iterable",
                "List[str]",
                "Union[int, None]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/cli/init.py": {
        "init": {
            "name": "init",
            "location": 19,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "force": [
                    "bool",
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "raiden.utils.Address"
                ],
                "project_name": [
                    "str",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "cloud_vendor": [
                    "str",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "folder": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "build_manifest": {
            "name": "build_manifest",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "project_name": [
                    "str"
                ],
                "cloud_vendor": [
                    "str"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/cli/update.py": {},
    "agogosml-master/agogosml_cli/cli/utils.py": {
        "get_template_full_filepath": {
            "name": "get_template_full_filepath",
            "location": 14,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "file": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "typing.Sequence[str]",
                    "typing.Iterable[str]",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "validate_manifest": {
            "name": "validate_manifest",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manifest_json": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/cli/__init__.py": {},
    "agogosml-master/agogosml_cli/cli/templates/apps/mleap/{{cookiecutter.PROJECT_NAME_SLUG}}/mleap_model/databricks/notebooks/01_mount_blobstorage.py": {},
    "agogosml-master/agogosml_cli/cli/templates/apps/simple/{{cookiecutter.PROJECT_NAME_SLUG}}/datahelper.py": {
        "validate_schema": {
            "name": "validate_schema",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "schema_filepath": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/cli/templates/apps/simple/{{cookiecutter.PROJECT_NAME_SLUG}}/main.py": {
        "output_message": {
            "name": "output_message",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "apistar.http.RequestData",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "server_class": [
                    "Optional[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "handler_class": [
                    "Socket",
                    "Optional[int]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Socket._set_headers": {
            "name": "_set_headers",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Socket.do_POST": {
            "name": "do_POST",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "agogosml-master/agogosml_cli/cli/templates/apps/simple/{{cookiecutter.PROJECT_NAME_SLUG}}/testapp.py": {
        "test_validation": {
            "name": "test_validation",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Mapping",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_transform": {
            "name": "test_transform",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/cli/templates/{{cookiecutter.PROJECT_NAME_SLUG}}/e2e/__init__.py": {},
    "agogosml-master/agogosml_cli/cli/templates/{{cookiecutter.PROJECT_NAME_SLUG}}/e2e/testgen/main.py": {
        "put_messages_on_input_queue": {
            "name": "put_messages_on_input_queue",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg_type": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "receive_messages_on_queue": {
            "name": "receive_messages_on_queue",
            "location": 58,
            "return": [
                "str",
                "tests.common.MockConfigEntry"
            ],
            "arguments": {
                "kafka_topic": [
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "msg_type": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "agogosml-master/agogosml_cli/cli/templates/{{cookiecutter.PROJECT_NAME_SLUG}}/e2e/testgen/__init__.py": {},
    "agogosml-master/agogosml_cli/cli/templates/{{cookiecutter.PROJECT_NAME_SLUG}}/input_reader/main.py": {},
    "agogosml-master/agogosml_cli/cli/templates/{{cookiecutter.PROJECT_NAME_SLUG}}/output_writer/main.py": {},
    "agogosml-master/agogosml_cli/docs/conf.py": {},
    "agogosml-master/agogosml_cli/tests/test_agogosml_cli.py": {
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "agogosml-master/agogosml_cli/tests/test_cli_generate.py": {
        "test_generate": {
            "name": "test_generate",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_generate_folder": {
            "name": "test_generate_folder",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_generate_invalid_schema": {
            "name": "test_generate_invalid_schema",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_assert_template_files_exist": {
            "name": "_assert_template_files_exist",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "_create_test_manifest_azure": {
            "name": "_create_test_manifest_azure",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "bool"
                ]
            }
        },
        "_create_invalid_manifest_azure": {
            "name": "_create_invalid_manifest_azure",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path",
                    "bool",
                    "str",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "_create_dummy_template_files": {
            "name": "_create_dummy_template_files",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "List[Callable]",
                    "IO[Any]",
                    "IO[str]",
                    "bool"
                ],
                "folder": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "_get_md5_template_files": {
            "name": "_get_md5_template_files",
            "location": 266,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "files": [
                    "IO[Any]",
                    "IO[str]",
                    "Iterable[pathlib.Path]",
                    "List[str]",
                    "Sequence[str]",
                    "List[Callable]"
                ],
                "folder": [
                    "str",
                    "pathlib.Path",
                    "Tuple[str]",
                    "bool"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/tests/test_cli_init.py": {
        "test_init_generate_valid_json": {
            "name": "test_init_generate_valid_json",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_folder": {
            "name": "test_init_folder",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_test_manifest": {
            "name": "_create_test_manifest",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/tests/test_utils.py": {
        "md5": {
            "name": "md5",
            "location": 9,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        }
    },
    "agogosml-master/agogosml_cli/tests/__init__.py": {}
}
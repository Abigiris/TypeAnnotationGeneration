{
    "aioapp_http-master/setup.py": {},
    "aioapp_http-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "tuple[typing.Union[typing.Any,typing.Any,None]]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "typing.Iterator",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "aioapp_http-master/aioapp_http/__init__.py": {
        "Handler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Server"
                ]
            }
        },
        "Handler.app": {
            "name": "app",
            "location": 37,
            "return": [
                "aiohttp.web.Application",
                "routemaster.app.App",
                "app.GrpyApp"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpClientTracerConfig.on_request_start": {
            "name": "on_request_start",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "aiohttp.ClientSession",
                    "Span",
                    "bool"
                ],
                "session": [
                    "aiohttp.ClientSession",
                    "Span",
                    "bool"
                ]
            }
        },
        "HttpClientTracerConfig.on_request_end": {
            "name": "on_request_end",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span",
                    "Optional[str]",
                    "str",
                    "Optional[bytes]",
                    "aiohttp.ClientSession",
                    "bool"
                ],
                "err": [
                    "Optional[Exception]"
                ],
                "result": [
                    "Optional[aiohttp.ClientResponse]",
                    "str",
                    "Dict[str, Any]",
                    "aiohttp.ClientSession",
                    "Callable"
                ],
                "response_body": [
                    "Optional[bytes]"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "handler": [
                    "Type[Handler]"
                ],
                "ssl_context": [
                    "bool",
                    "None"
                ],
                "backlog": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "access_log_class": [
                    "bool",
                    "float",
                    "Optional[Callable[[], Any]]"
                ],
                "access_log_format": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]",
                    "list",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "access_log": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "reuse_address": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "reuse_port": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "shutdown_timeout": [
                    "float",
                    "bool",
                    "Callable"
                ],
                "middlewares": [
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Server.add_route": {
            "name": "add_route",
            "location": 164,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Optional[Dict[str, Any]]",
                    "eth.abc.DatabaseAPI"
                ],
                "uri": [
                    "Optional[Dict[str, Any]]",
                    "eth.abc.DatabaseAPI"
                ],
                "handler": [
                    "Optional[Dict[str, Any]]",
                    "eth.abc.DatabaseAPI"
                ]
            }
        },
        "Server.set_error_handler": {
            "name": "set_error_handler",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "str",
                    "asyncio.streams.StreamWriter",
                    "asyncio.streams.StreamReader",
                    "bool",
                    "BaseException"
                ]
            }
        }
    },
    "aioapp_http-master/examples/http.py": {},
    "aioapp_http-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 9,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 18,
            "return": [
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "protocol": [
                    "typing.Text",
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "aioapp_http-master/tests/test_http.py": {
        "_create_span": {
            "name": "_create_span",
            "location": 10,
            "return": [
                "bool",
                "Callable[[List, bool], None]",
                "Optional[str]",
                "aioapp.tracer.Span"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "abilian.app.Application"
                ]
            }
        },
        "test_server_fail_create": {
            "name": "test_server_fail_create",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_tcp_port": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "test_server.TestHandler.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": []
            }
        },
        "test_server_error_handler.TestHandler.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": []
            }
        },
        "test_server_error_handler_fail.TestHandler.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aioapp_http-master/tests/__init__.py": {}
}
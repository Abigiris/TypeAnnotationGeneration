{
    "aiofunctools-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "aiofunctools-master/aiofunctools/__init__.py": {
        "_iscoroutinefunction_or_partial": {
            "name": "_iscoroutinefunction_or_partial",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "object": [
                    "str",
                    "set"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 20,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "compose._func": {
            "name": "_func",
            "location": 37,
            "return": [
                "list",
                "Callable"
            ],
            "arguments": {}
        },
        "bind.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "bind._get_check_error": {
            "name": "_get_check_error",
            "location": 49,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "_list": [
                    "Callable",
                    "dict",
                    "Type",
                    "bool"
                ]
            }
        },
        "bind._async_error": {
            "name": "_async_error",
            "location": 55,
            "return": [
                "Coroutine[(Any, Any, _T0)]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "_T0"
                ]
            }
        },
        "bind._get_error": {
            "name": "_get_error",
            "location": 60,
            "return": [
                "Union[(coroutine, _T0)]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "_T0"
                ]
            }
        }
    },
    "aiofunctools-master/docs/conf.py": {},
    "aiofunctools-master/test/test_all.py": {
        "_sum": {
            "name": "_sum",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_iscoroutinefunction_or_partial": {
            "name": "test_iscoroutinefunction_or_partial",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iscoroutinefunction_or_partial_or_bind": {
            "name": "test_iscoroutinefunction_or_partial_or_bind",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iscoroutinefunction_or_partial_false": {
            "name": "test_iscoroutinefunction_or_partial_false",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose": {
            "name": "test_compose",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind": {
            "name": "test_bind",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_curry": {
            "name": "test_bind_curry",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iscoroutinefunction_or_partial_false.foo": {
            "name": "foo",
            "location": 31,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boo": [
                    "int",
                    "Callable",
                    "str"
                ],
                "woo": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_compose.x2": {
            "name": "x2",
            "location": 38,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_compose.plus5": {
            "name": "plus5",
            "location": 41,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_compose_async_first.plus5": {
            "name": "plus5",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_bind.x5": {
            "name": "x5",
            "location": 70,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "bool",
                    "SupportsFloat"
                ]
            }
        }
    },
    "aiofunctools-master/test/__init__.py": {}
}
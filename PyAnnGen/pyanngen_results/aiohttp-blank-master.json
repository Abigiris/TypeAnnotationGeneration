{
    "aiohttp-blank-master/conftest.py": {
        "faker": {
            "name": "faker",
            "location": 20,
            "return": [
                "int",
                "Iterable[int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/apps/__init__.py": {},
    "aiohttp-blank-master/apps/authenticate/apis.py": {},
    "aiohttp-blank-master/apps/authenticate/exceptions.py": {},
    "aiohttp-blank-master/apps/authenticate/routes.py": {
        "init_routes": {
            "name": "init_routes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "app_authenticate": [
                    "aiohttp.web.Application",
                    "str"
                ]
            }
        }
    },
    "aiohttp-blank-master/apps/authenticate/services.py": {},
    "aiohttp-blank-master/apps/authenticate/tables.py": {
        "to_user_data_token": {
            "name": "to_user_data_token",
            "location": 35,
            "return": [
                "UserDataToken",
                "str",
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Optional[dict]",
                    "Optional[str]",
                    "Optional[Dict[str,str]]"
                ]
            }
        }
    },
    "aiohttp-blank-master/apps/authenticate/utils.py": {
        "generate_password_hash": {
            "name": "generate_password_hash",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "validate_password": {
            "name": "validate_password",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "encode_token": {
            "name": "encode_token",
            "location": 36,
            "return": [
                "dict",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/apps/authenticate/__init__.py": {
        "init_app_authenticate": {
            "name": "init_app_authenticate",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/apps/authenticate/tests/fixtures.py": {
        "key_path": {
            "name": "key_path",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "key_name": [
                    "str"
                ]
            }
        },
        "private_key": {
            "name": "private_key",
            "location": 19,
            "return": [
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "public_key": {
            "name": "public_key",
            "location": 29,
            "return": [
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "get_user_data": {
            "name": "get_user_data",
            "location": 38,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "faker": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Mapping",
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "get_user_data.func": {
            "name": "func",
            "location": 39,
            "return": [
                "Dict[Text,]",
                "Type",
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/apps/authenticate/tests/test_apis.py": {},
    "aiohttp-blank-master/apps/authenticate/tests/test_services.py": {},
    "aiohttp-blank-master/apps/authenticate/tests/test_utils.py": {
        "test_generate_password_hash": {
            "name": "test_generate_password_hash",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "dict"
                ]
            }
        },
        "test_validate_password_error_password": {
            "name": "test_validate_password_error_password",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_validate_password_error_password_hash": {
            "name": "test_validate_password_error_password_hash",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": []
            }
        },
        "test_validate_password_valid_password": {
            "name": "test_validate_password_valid_password",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "int",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_encode_token": {
            "name": "test_encode_token",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "int"
                ],
                "public_key": [
                    "str",
                    "bytes"
                ],
                "faker": [
                    "str",
                    "bool",
                    "List[bool]",
                    "bytes",
                    "dict",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "aiohttp-blank-master/apps/authenticate/tests/__init__.py": {},
    "aiohttp-blank-master/server/main.py": {},
    "aiohttp-blank-master/server/sub_apps.py": {},
    "aiohttp-blank-master/server/__init__.py": {},
    "aiohttp-blank-master/settings/version.py": {
        "_parse_version": {
            "name": "_parse_version",
            "location": 21,
            "return": [
                "VersionInfo"
            ],
            "arguments": {
                "ver": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "aiohttp-blank-master/settings/__init__.py": {},
    "aiohttp-blank-master/settings/logging/common.py": {},
    "aiohttp-blank-master/settings/logging/files.py": {},
    "aiohttp-blank-master/settings/logging/logstash.py": {},
    "aiohttp-blank-master/settings/logging/__init__.py": {},
    "aiohttp-blank-master/utils/app.py": {},
    "aiohttp-blank-master/utils/config.py": {
        "get_config_path": {
            "name": "get_config_path",
            "location": 16,
            "return": [
                "str",
                "pathlib.Path",
                "List[pathlib.Path]"
            ],
            "arguments": {
                "base_path": [
                    "pathlib.PurePath",
                    "pathlib.Path",
                    "str",
                    "List[int]",
                    "List[pathlib.Path]"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "set",
                "dict",
                "int"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "Tuple[str]",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ],
                "trafaret_config": [
                    "Dict",
                    "bool",
                    "Callable",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/db.py": {
        "get_dsn_database": {
            "name": "get_dsn_database",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_where_clause": {
            "name": "create_where_clause",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "table": [
                    "Dict",
                    "str",
                    "Dict[str,str]"
                ],
                "kwargs": []
            }
        },
        "create_contains_clause": {
            "name": "create_contains_clause",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "table": [
                    "Dict",
                    "str",
                    "Dict[str,A]",
                    "Dict[str,raiden.utils.Any]",
                    "tests.utils.Strategy[paradigm.hints.Domain]"
                ],
                "kwargs": []
            }
        }
    },
    "aiohttp-blank-master/utils/exceptions.py": {
        "ExceptionEx.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detail": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "ExceptionEx.reason": {
            "name": "reason",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionEx.detail": {
            "name": "detail",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp-blank-master/utils/helpers.py": {
        "import_from_string": {
            "name": "import_from_string",
            "location": 12,
            "return": [
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "val": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/logger.py": {
        "TimedRotatingFileHandlerEx.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        }
    },
    "aiohttp-blank-master/utils/middlewares.py": {
        "_error_http_response": {
            "name": "_error_http_response",
            "location": 20,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "status": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "reason": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[AnyStr]",
                    "AnyStr"
                ],
                "errors": [
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "Dict[str,tuple]",
                    "Dict[str,Callable]",
                    "str",
                    "VersionedAnalyzer"
                ]
            }
        },
        "_make_error_reason_string": {
            "name": "_make_error_reason_string",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "error_text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/mixins.py": {},
    "aiohttp-blank-master/utils/paginator.py": {
        "Paginator.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator._convert_query": {
            "name": "_convert_query",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "table": [
                    "int",
                    "str",
                    "List",
                    "Iterable[str]"
                ],
                "raw_query": [
                    "str",
                    "Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "Paginator._get_filters": {
            "name": "_get_filters",
            "location": 134,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator._validate_page_number": {
            "name": "_validate_page_number",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.records_count": {
            "name": "records_count",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.pages_count": {
            "name": "pages_count",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.to_dict": {
            "name": "to_dict",
            "location": 268,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.paginator": {
            "name": "paginator",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.page": {
            "name": "page",
            "location": 290,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.records": {
            "name": "records",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.__len__": {
            "name": "__len__",
            "location": 297,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.__getitem__": {
            "name": "__getitem__",
            "location": 300,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "Page.has_next": {
            "name": "has_next",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.get_next_page": {
            "name": "get_next_page",
            "location": 306,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.has_prev": {
            "name": "has_prev",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.get_prev_page": {
            "name": "get_prev_page",
            "location": 312,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator._convert_query.get_field_schema": {
            "name": "get_field_schema",
            "location": 80,
            "return": [
                "List[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "str"
            ],
            "arguments": {
                "_field": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/timestamp.py": {
        "get_current_timestamp": {
            "name": "get_current_timestamp",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/utils/validate.py": {
        "validate_schema": {
            "name": "validate_schema",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate": {
            "name": "validate",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "validate_schema.set_nested_item": {
            "name": "set_nested_item",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dict": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "type"
                ],
                "path": [
                    "bool",
                    "List[Union[str, int]]",
                    "list"
                ],
                "key": [
                    "dict",
                    "str",
                    "Dict[str, Union[str, bool]]",
                    "Union[Dict, List]",
                    "List[List[str]]"
                ],
                "val": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/__init__.py": {},
    "aiohttp-blank-master/utils/tests/test_config.py": {
        "test_get_config_path": {
            "name": "test_get_config_path",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_config_success": {
            "name": "test_load_config_success",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/utils/tests/test_db.py": {},
    "aiohttp-blank-master/utils/tests/test_mixins.py": {},
    "aiohttp-blank-master/utils/tests/test_paginator.py": {
        "test__convert_query_fail_not_allowed_fields": {
            "name": "test__convert_query_fail_not_allowed_fields",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "faker": []
            }
        },
        "test__convert_query_fail_wrong_sort_by": {
            "name": "test__convert_query_fail_wrong_sort_by",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "faker": []
            }
        },
        "test__convert_query_fail_wrong_order_by": {
            "name": "test__convert_query_fail_wrong_order_by",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "faker": []
            }
        },
        "test__convert_query_success_default": {
            "name": "test__convert_query_success_default",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "faker": [
                    "int",
                    "str"
                ]
            }
        },
        "test__convert_query_success": {
            "name": "test__convert_query_success",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "faker": []
            }
        },
        "test__convert_query_success_another_one": {
            "name": "test__convert_query_success_another_one",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "faker": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/tests/test_tampstamp.py": {
        "test_get_current_timestamp": {
            "name": "test_get_current_timestamp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp-blank-master/utils/tests/test_validate.py": {
        "test_validate_success": {
            "name": "test_validate_success",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": []
            }
        },
        "test_validate_fail": {
            "name": "test_validate_fail",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "str",
                    "float"
                ]
            }
        },
        "test_validate_schema_success": {
            "name": "test_validate_schema_success",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": []
            }
        },
        "test_validate_schema_fail": {
            "name": "test_validate_schema_fail",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_validate_schema_nested_errors": {
            "name": "test_validate_schema_nested_errors",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "Type"
                ]
            }
        }
    },
    "aiohttp-blank-master/utils/tests/__init__.py": {}
}
{
    "aioprometheus-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 23,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "aioprometheus-master/docs/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "aioprometheus-master/examples/metrics-fetcher.py": {
        "fetch_task": {
            "name": "fetch_task",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "int",
                    "asyncio.base_events.BaseEventLoop"
                ],
                "fmt": [
                    "str",
                    "float",
                    "int",
                    "asyncio.base_events.BaseEventLoop"
                ],
                "interval": [
                    "str",
                    "float",
                    "int",
                    "asyncio.base_events.BaseEventLoop"
                ]
            }
        }
    },
    "aioprometheus-master/examples/decorators/decorator_count_exceptions.py": {},
    "aioprometheus-master/examples/decorators/decorator_inprogress.py": {},
    "aioprometheus-master/examples/decorators/decorator_timer.py": {},
    "aioprometheus-master/examples/frameworks/aiohttp-example.py": {},
    "aioprometheus-master/examples/frameworks/fastapi-example.py": {},
    "aioprometheus-master/examples/frameworks/fastapi-middleware.py": {},
    "aioprometheus-master/examples/frameworks/quart-example.py": {},
    "aioprometheus-master/examples/frameworks/quart-middleware.py": {},
    "aioprometheus-master/examples/service/app-service-example.py": {
        "ExampleApp.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_host": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ],
                "metrics_port": [
                    "int"
                ]
            }
        },
        "ExampleApp.on_timer_expiry": {
            "name": "on_timer_expiry",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/examples/service/simple-service-example.py": {},
    "aioprometheus-master/src/aioprometheus/collectors.py": {
        "get_registry": {
            "name": "get_registry",
            "location": 541,
            "return": [
                "Registry"
            ],
            "arguments": {}
        },
        "Collector.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "doc": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ],
                "registry": [
                    "Registry"
                ]
            }
        },
        "Collector.set_value": {
            "name": "set_value",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "str",
                    "Union[str, dict]"
                ]
            }
        },
        "Collector.get_value": {
            "name": "get_value",
            "location": 122,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Collector.get": {
            "name": "get",
            "location": 129,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Collector._check_labels": {
            "name": "_check_labels",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Collector.get_all": {
            "name": "get_all",
            "location": 158,
            "return": [
                "List[Tuple[(Dict[(str, str)], Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collector.__eq__": {
            "name": "__eq__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Counter.get": {
            "name": "get",
            "location": 197,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Counter.set": {
            "name": "set",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "LabelsType",
                    "Optional[str]",
                    "Union[int, float]",
                    "T"
                ]
            }
        },
        "Counter.inc": {
            "name": "inc",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Counter.add": {
            "name": "add",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Gauge.set": {
            "name": "set",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "LabelsType",
                    "Optional[str]",
                    "Union[int, float]",
                    "T"
                ]
            }
        },
        "Gauge.get": {
            "name": "get",
            "location": 254,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Gauge.inc": {
            "name": "inc",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Gauge.dec": {
            "name": "dec",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Gauge.add": {
            "name": "add",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Gauge.sub": {
            "name": "sub",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "Sequence"
                ]
            }
        },
        "Summary.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "doc": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ],
                "registry": [
                    "Registry"
                ],
                "invariants": [
                    "Sequence[Tuple[(float, float)]]"
                ]
            }
        },
        "Summary.add": {
            "name": "add",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "Optional[str]",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "Summary.get": {
            "name": "get",
            "location": 348,
            "return": [
                "Dict[(Union[(float, str)], Any)]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Histogram.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "doc": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ],
                "registry": [
                    "Registry"
                ],
                "buckets": [
                    "Sequence[float]"
                ]
            }
        },
        "Histogram.add": {
            "name": "add",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "Optional[Sequence[T]]",
                    "float"
                ]
            }
        },
        "Histogram.get": {
            "name": "get",
            "location": 445,
            "return": [
                "Dict[(Union[(float, str)], Any)]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "Collector"
                ]
            }
        },
        "Registry.deregister": {
            "name": "deregister",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.get": {
            "name": "get",
            "location": 515,
            "return": [
                "Collector"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.get_all": {
            "name": "get_all",
            "location": 524,
            "return": [
                "List[Collector]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.clear": {
            "name": "clear",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/decorators.py": {
        "timer": {
            "name": "timer",
            "location": 13,
            "return": [
                "Callable"
            ],
            "arguments": {
                "metric": [
                    "aioprometheus.collectors.Summary"
                ],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "inprogress": {
            "name": "inprogress",
            "location": 65,
            "return": [
                "Callable"
            ],
            "arguments": {
                "metric": [
                    "aioprometheus.collectors.Gauge"
                ],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "count_exceptions": {
            "name": "count_exceptions",
            "location": 119,
            "return": [
                "Callable"
            ],
            "arguments": {
                "metric": [
                    "aioprometheus.collectors.Counter"
                ],
                "labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "timer.measure": {
            "name": "measure",
            "location": 29,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "inprogress.track": {
            "name": "track",
            "location": 82,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "count_exceptions.track": {
            "name": "track",
            "location": 139,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "timer.measure.func_wrapper": {
            "name": "func_wrapper",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "inprogress.track.func_wrapper": {
            "name": "func_wrapper",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "count_exceptions.track.func_wrapper": {
            "name": "func_wrapper",
            "location": 160,
            "return": [
                "Tuple[str, int]",
                "Optional[str]",
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        }
    },
    "aioprometheus-master/src/aioprometheus/histogram.py": {
        "linearBuckets": {
            "name": "linearBuckets",
            "location": 11,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "start": [
                    "float"
                ],
                "width": [
                    "float"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "exponentialBuckets": {
            "name": "exponentialBuckets",
            "location": 27,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "start": [
                    "float"
                ],
                "factor": [
                    "float"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Histogram.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Histogram.observe": {
            "name": "observe",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/metricdict.py": {
        "MetricDict.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDict.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "MetricDict.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "MetricDict.__delitem__": {
            "name": "__delitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "MetricDict.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDict.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDict.__keytransform__": {
            "name": "__keytransform__",
            "location": 39,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "bool",
                "str",
                "Callable",
                "Tuple[Dict, int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/mypy_types.py": {},
    "aioprometheus-master/src/aioprometheus/negotiator.py": {
        "negotiate": {
            "name": "negotiate",
            "location": 12,
            "return": [
                "Type[formats.base.IFormatter]"
            ],
            "arguments": {
                "accepts_headers": [
                    "Sequence[str]"
                ]
            }
        },
        "parse_accepts": {
            "name": "parse_accepts",
            "location": 36,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "accept_headers": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/pusher.py": {
        "_escape_grouping_key": {
            "name": "_escape_grouping_key",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "k": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "v": [
                    "Iterable[Hashable]",
                    "T",
                    "dict"
                ]
            }
        },
        "Pusher.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str"
                ],
                "addr": [
                    "str"
                ],
                "grouping_key": [
                    "dict"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/renderer.py": {
        "render": {
            "name": "render",
            "location": 9,
            "return": [
                "Tuple[(bytes, dict)]"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "registry.Registry",
                    "list[str]",
                    "List[str]"
                ],
                "accepts_headers": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/service.py": {
        "Service.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "bool",
                    "int"
                ]
            }
        },
        "Service.base_url": {
            "name": "base_url",
            "location": 58,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.root_url": {
            "name": "root_url",
            "location": 84,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.metrics_url": {
            "name": "metrics_url",
            "location": 94,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/__init__.py": {},
    "aioprometheus-master/src/aioprometheus/asgi/middleware.py": {
        "MetricsMiddleware.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Callable[([Dict[(str, Any)], Callable[([], Awaitable[Dict[(str, Any)]])], Callable[([Dict[(str, Any)]], Awaitable[None])]], Awaitable[None])]"
                ],
                "registry": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Set[str]]"
                ],
                "exclude_paths": [
                    "Sequence[str]"
                ],
                "use_template_urls": [
                    "bool"
                ],
                "group_status_codes": [
                    "bool"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "MetricsMiddleware.create_metrics": {
            "name": "create_metrics",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsMiddleware.get_full_or_template_path": {
            "name": "get_full_or_template_path",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "dict[str, str]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "MetricsMiddleware.__call__.wrapped_send": {
            "name": "wrapped_send",
            "location": 148,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "response": [
                    "str"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/asgi/quart.py": {},
    "aioprometheus-master/src/aioprometheus/asgi/starlette.py": {},
    "aioprometheus-master/src/aioprometheus/asgi/__init__.py": {},
    "aioprometheus-master/src/aioprometheus/formats/base.py": {
        "IFormatter.get_headers": {
            "name": "get_headers",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFormatter._format_counter": {
            "name": "_format_counter",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "counter": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "const_labels": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "IFormatter._format_gauge": {
            "name": "_format_gauge",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "gauge": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "const_labels": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "IFormatter._format_summary": {
            "name": "_format_summary",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "const_labels": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "IFormatter._format_histogram": {
            "name": "_format_histogram",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "histogram": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "const_labels": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "list[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "IFormatter.marshall": {
            "name": "marshall",
            "location": 66,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IFormatter._unify_labels": {
            "name": "_unify_labels",
            "location": 73,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ],
                "ordered": [
                    "bool"
                ]
            }
        },
        "IFormatter._get_timestamp": {
            "name": "_get_timestamp",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/formats/binary.py": {
        "BinaryFormatter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bool"
                ]
            }
        },
        "BinaryFormatter.get_headers": {
            "name": "get_headers",
            "location": 50,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFormatter._format_counter": {
            "name": "_format_counter",
            "location": 54,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "counter": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "BinaryFormatter._format_gauge": {
            "name": "_format_gauge",
            "location": 76,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "gauge": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "BinaryFormatter._format_summary": {
            "name": "_format_summary",
            "location": 98,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "BinaryFormatter._format_histogram": {
            "name": "_format_histogram",
            "location": 127,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "histogram": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "BinaryFormatter.marshall_collector": {
            "name": "marshall_collector",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "aioprometheus.collectors.Collector"
                ]
            }
        },
        "BinaryFormatter.marshall": {
            "name": "marshall",
            "location": 189,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "aioprometheus.collectors.Registry"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/formats/text.py": {
        "TextFormatter.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bool"
                ]
            }
        },
        "TextFormatter.get_headers": {
            "name": "get_headers",
            "location": 70,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextFormatter._format_line": {
            "name": "_format_line",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TextFormatter._format_counter": {
            "name": "_format_counter",
            "location": 98,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "counter": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TextFormatter._format_gauge": {
            "name": "_format_gauge",
            "location": 112,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "gauge": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TextFormatter._format_summary": {
            "name": "_format_summary",
            "location": 126,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TextFormatter._format_histogram": {
            "name": "_format_histogram",
            "location": 158,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "histogram": [
                    "Tuple[(Dict[(str, str)], Any)]"
                ],
                "name": [
                    "str"
                ],
                "const_labels": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TextFormatter.marshall_lines": {
            "name": "marshall_lines",
            "location": 201,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "aioprometheus.collectors.Collector"
                ]
            }
        },
        "TextFormatter.marshall_collector": {
            "name": "marshall_collector",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "aioprometheus.collectors.Collector"
                ]
            }
        },
        "TextFormatter.marshall": {
            "name": "marshall",
            "location": 240,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "aioprometheus.collectors.Registry"
                ]
            }
        }
    },
    "aioprometheus-master/src/aioprometheus/formats/__init__.py": {},
    "aioprometheus-master/tests/test_aiohttp.py": {
        "TestAiohttpRender.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_decorators.py": {
        "TestDecorators.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_timer.regular_f": {
            "name": "regular_f",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "should_raise": []
            }
        },
        "TestDecorators.test_inprogress.regular_f": {
            "name": "regular_f",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "should_raise": []
            }
        },
        "TestDecorators.test_count_exceptions.regular_f": {
            "name": "regular_f",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "should_raise": [
                    "bool",
                    "int",
                    "List[int]",
                    "Optional[dict]"
                ]
            }
        }
    },
    "aioprometheus-master/tests/test_export.py": {
        "TestTextExporter.test_fetch_url_before_starting_server": {
            "name": "test_fetch_url_before_starting_server",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_fastapi.py": {
        "TestFastAPIUsage.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_render_text": {
            "name": "test_render_text",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_render_binary": {
            "name": "test_render_binary",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_asgi_middleware": {
            "name": "test_asgi_middleware",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_asgi_middleware_template_path_disabled": {
            "name": "test_asgi_middleware_template_path_disabled",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_asgi_middleware_group_status_codes_enabled": {
            "name": "test_asgi_middleware_group_status_codes_enabled",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_asgi_middleware_default_exclude_paths": {
            "name": "test_asgi_middleware_default_exclude_paths",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFastAPIUsage.test_asgi_middleware_disable_exclude_paths": {
            "name": "test_asgi_middleware_disable_exclude_paths",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_formats_binary.py": {
        "TestProtobufFormat.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.tearDown": {
            "name": "tearDown",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_headers_binary": {
            "name": "test_headers_binary",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_no_metric_instances_present_binary": {
            "name": "test_no_metric_instances_present_binary",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_counter_format_binary": {
            "name": "test_counter_format_binary",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_gauge_format_binary": {
            "name": "test_gauge_format_binary",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_summary_format_binary": {
            "name": "test_summary_format_binary",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_histogram_format_binary": {
            "name": "test_histogram_format_binary",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_registry_marshall_counter": {
            "name": "test_registry_marshall_counter",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_registry_marshall_gauge": {
            "name": "test_registry_marshall_gauge",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_registry_marshall_summary": {
            "name": "test_registry_marshall_summary",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProtobufFormat.test_registry_marshall_histogram": {
            "name": "test_registry_marshall_histogram",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_formats_text.py": {
        "TestTextFormat.tearDown": {
            "name": "tearDown",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_headers": {
            "name": "test_headers",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_wrong_format": {
            "name": "test_wrong_format",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_counter_format": {
            "name": "test_counter_format",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_counter_format_with_const_labels": {
            "name": "test_counter_format_with_const_labels",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_counter_format_text": {
            "name": "test_counter_format_text",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_counter_format_with_timestamp": {
            "name": "test_counter_format_with_timestamp",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_single_counter_format_text": {
            "name": "test_single_counter_format_text",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_gauge_format": {
            "name": "test_gauge_format",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_gauge_format_with_const_labels": {
            "name": "test_gauge_format_with_const_labels",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_gauge_format_text": {
            "name": "test_gauge_format_text",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_gauge_format_with_timestamp": {
            "name": "test_gauge_format_with_timestamp",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_single_gauge_format_text": {
            "name": "test_single_gauge_format_text",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_one_summary_format": {
            "name": "test_one_summary_format",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_summary_format_text": {
            "name": "test_summary_format_text",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_multiple_summary_format": {
            "name": "test_multiple_summary_format",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_single_summary_format": {
            "name": "test_single_summary_format",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_summary_format_timestamp": {
            "name": "test_summary_format_timestamp",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextFormat.test_registry_marshall": {
            "name": "test_registry_marshall",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_histogram.py": {
        "TestHistogram.test_histogram": {
            "name": "test_histogram",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogram.test_linear_bucket_helper_functions": {
            "name": "test_linear_bucket_helper_functions",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogram.test_exponential_bucket_helper_functions": {
            "name": "test_exponential_bucket_helper_functions",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_metricdict.py": {
        "TestMetricDict.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_bad_keys": {
            "name": "test_bad_keys",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_set": {
            "name": "test_set",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_get": {
            "name": "test_get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_override": {
            "name": "test_override",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_similar": {
            "name": "test_similar",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_access_by_str": {
            "name": "test_access_by_str",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_empty_key": {
            "name": "test_empty_key",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_delete": {
            "name": "test_delete",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricDict.test_all": {
            "name": "test_all",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_metrics.py": {
        "TestCollectorBase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_initialization": {
            "name": "test_initialization",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_set_value": {
            "name": "test_set_value",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_same_value": {
            "name": "test_same_value",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_get_value": {
            "name": "test_get_value",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_not_const_labels": {
            "name": "test_not_const_labels",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_not_name": {
            "name": "test_not_name",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_not_help_text": {
            "name": "test_not_help_text",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_without_labels": {
            "name": "test_without_labels",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_wrong_labels": {
            "name": "test_wrong_labels",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_get_all": {
            "name": "test_get_all",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.setUp": {
            "name": "setUp",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.tearDown": {
            "name": "tearDown",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_initialization": {
            "name": "test_initialization",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_set": {
            "name": "test_set",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_get": {
            "name": "test_get",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_set_get_without_labels": {
            "name": "test_set_get_without_labels",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_inc": {
            "name": "test_inc",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_add": {
            "name": "test_add",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCounterMetric.test_negative_add": {
            "name": "test_negative_add",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.setUp": {
            "name": "setUp",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.tearDown": {
            "name": "tearDown",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_initialization": {
            "name": "test_initialization",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_set": {
            "name": "test_set",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_get": {
            "name": "test_get",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_set_get_without_labels": {
            "name": "test_set_get_without_labels",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_inc": {
            "name": "test_inc",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_dec": {
            "name": "test_dec",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_add": {
            "name": "test_add",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_add_negative": {
            "name": "test_add_negative",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_sub": {
            "name": "test_sub",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGaugeMetric.test_sub_positive": {
            "name": "test_sub_positive",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.setUp": {
            "name": "setUp",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.tearDown": {
            "name": "tearDown",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.test_initialization": {
            "name": "test_initialization",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.test_add": {
            "name": "test_add",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.test_get": {
            "name": "test_get",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.test_add_get_without_labels": {
            "name": "test_add_get_without_labels",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummaryMetric.test_add_wrong_types": {
            "name": "test_add_wrong_types",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.setUp": {
            "name": "setUp",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.tearDown": {
            "name": "tearDown",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_initialization": {
            "name": "test_initialization",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_wrong_labels": {
            "name": "test_wrong_labels",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_insufficient_buckets": {
            "name": "test_insufficient_buckets",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_unsorted_buckets": {
            "name": "test_unsorted_buckets",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_expected_values": {
            "name": "test_expected_values",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_get": {
            "name": "test_get",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistogramMetric.test_add_get_without_labels": {
            "name": "test_add_get_without_labels",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectorBase.test_get_all.country_fetcher": {
            "name": "country_fetcher",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "aioprometheus-master/tests/test_negotiate.py": {
        "TestNegotiate.test_text_default": {
            "name": "test_text_default",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNegotiate.test_default": {
            "name": "test_default",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNegotiate.test_text_004": {
            "name": "test_text_004",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNegotiate.test_no_accept_header": {
            "name": "test_no_accept_header",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNegotiate.test_protobuffer": {
            "name": "test_protobuffer",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_pusher.py": {
        "TestPusherServer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_quart.py": {
        "TestQuartRender.tearDown": {
            "name": "tearDown",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_registry.py": {
        "TestRegistry.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.test_register_same_names": {
            "name": "test_register_same_names",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.test_register_wrong_type": {
            "name": "test_register_wrong_type",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.test_deregister": {
            "name": "test_deregister",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.test_get": {
            "name": "test_get",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.test_get_all": {
            "name": "test_get_all",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioprometheus-master/tests/test_renderer.py": {}
}
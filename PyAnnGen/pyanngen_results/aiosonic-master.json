{
    "aiosonic-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "requirements": {
            "name": "requirements",
            "location": 14,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_marks": {
            "name": "add_marks",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "dependencies": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "marks": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "add_marks._map_func": {
            "name": "_map_func",
            "location": 41,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "dependency": [
                    "float",
                    "Callable[[T], bool]"
                ]
            }
        }
    },
    "aiosonic-master/travis_tests.py": {},
    "aiosonic-master/aiosonic/connection.py": {
        "_get_http2_ssl_context": {
            "name": "_get_http2_ssl_context",
            "location": 175,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {}
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Connection.keep_alive": {
            "name": "keep_alive",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.block_until_read_chunks": {
            "name": "block_until_read_chunks",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__del__": {
            "name": "__del__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_closing": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Connection._connect.is_closing": {
            "name": "is_closing",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/aiosonic/connectors.py": {
        "TCPConnector.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_size": [
                    "int",
                    "bool",
                    "float",
                    "Callable"
                ],
                "timeouts": [
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "int"
                ],
                "connection_cls": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "pool_cls": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "resolver": [
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "int"
                ],
                "ttl_dns_cache": [
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "int"
                ],
                "use_dns_cache": [
                    "bool"
                ]
            }
        }
    },
    "aiosonic-master/aiosonic/exceptions.py": {},
    "aiosonic-master/aiosonic/http2.py": {
        "Http2Handler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Iterable[T]",
                    "Dict[str,Callable]"
                ]
            }
        },
        "Http2Handler.writer": {
            "name": "writer",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Http2Handler.reader": {
            "name": "reader",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Http2Handler.h2conn": {
            "name": "h2conn",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Http2Handler.cleanup": {
            "name": "cleanup",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Http2Handler.send_body.chunks": {
            "name": "chunks",
            "location": 157,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "Sequence",
                    "List[T]",
                    "list",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "Sequence",
                    "List[T]",
                    "list",
                    "List[str]"
                ]
            }
        }
    },
    "aiosonic-master/aiosonic/http_parser.py": {
        "get_url_parsed": {
            "name": "get_url_parsed",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "headers_iterator": {
            "name": "headers_iterator",
            "location": 35,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "headers": []
            }
        },
        "add_header": {
            "name": "add_header",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "dict"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "dict",
                    "Callable[[str], str]",
                    "list",
                    "tuple",
                    "Set[str]",
                    "int"
                ],
                "replace": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "types.TaskID",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_headers": {
            "name": "add_headers",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Union[str, Any]]",
                    "str"
                ],
                "headers_to_add": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "setup_body_request": {
            "name": "setup_body_request",
            "location": 60,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "starfish.core.types.SpotFindingResults"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "headers": [
                    "dict"
                ]
            }
        }
    },
    "aiosonic-master/aiosonic/pools.py": {
        "CyclicQueuePool.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "bool",
                    "str",
                    "List",
                    "None",
                    "List[str]",
                    "asyncio.AbstractEventLoop",
                    "int",
                    "Optional[int]"
                ],
                "pool_size": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "connection_cls": [
                    "bool",
                    "str",
                    "List",
                    "None",
                    "List[str]",
                    "asyncio.AbstractEventLoop",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "CyclicQueuePool.is_all_free": {
            "name": "is_all_free",
            "location": 25,
            "return": [
                "bool",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicQueuePool.free_conns": {
            "name": "free_conns",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartPool.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "bool",
                    "List[str]",
                    "List",
                    "int",
                    "Iterable[str]",
                    "asyncio.futures.Future[bool]"
                ],
                "pool_size": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "connection_cls": [
                    "bool",
                    "List[str]",
                    "List",
                    "int",
                    "Iterable[str]",
                    "asyncio.futures.Future[bool]"
                ]
            }
        },
        "SmartPool.release": {
            "name": "release",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "SmartPool.free_conns": {
            "name": "free_conns",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartPool.is_all_free": {
            "name": "is_all_free",
            "location": 69,
            "return": [
                "bool",
                "int",
                "Dict[Tuple[str,str],Tuple[float,float]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiosonic-master/aiosonic/proxy.py": {
        "Proxy.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "bool",
                    "Callable",
                    "int"
                ],
                "auth": [
                    "str",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Dict",
                    "Optional[Iterable[str]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "aiosonic-master/aiosonic/resolver.py": {
        "get_loop": {
            "name": "get_loop",
            "location": 20,
            "return": [
                "asyncio.events.AbstractEventLoop"
            ],
            "arguments": {}
        },
        "ThreadedResolver.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedResolver.loop": {
            "name": "loop",
            "location": 47,
            "return": [
                "int",
                "str",
                "Callable",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncResolver.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiosonic-master/aiosonic/tcp_helpers.py": {
        "tcp_nodelay": {
            "name": "tcp_nodelay",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "sock": [
                    "Union[bytes,str]",
                    "bool",
                    "bytes",
                    "str"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "tcp_keepalive": {
            "name": "tcp_keepalive",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "sock": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "keepalive_flags": {
            "name": "keepalive_flags",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/aiosonic/timeout.py": {
        "Timeouts.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock_connect": [
                    "int",
                    "bool",
                    "float"
                ],
                "sock_read": [
                    "int",
                    "float",
                    "Type",
                    "bool"
                ],
                "pool_acquire": [
                    "bool",
                    "float",
                    "None"
                ],
                "request_timeout": [
                    "int",
                    "bool",
                    "Optional[Union[int,float]]",
                    "float",
                    "Tuple[int]"
                ]
            }
        }
    },
    "aiosonic-master/aiosonic/types.py": {},
    "aiosonic-master/aiosonic/utils.py": {
        "get_debug_logger": {
            "name": "get_debug_logger",
            "location": 8,
            "return": [
                "str",
                "list",
                "List[List[int]]",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/aiosonic/version.py": {},
    "aiosonic-master/aiosonic/__init__.py": {
        "_get_hostname": {
            "name": "_get_hostname",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "hostname_arg": [],
                "port": []
            }
        },
        "_get_path": {
            "name": "_get_path",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "proxy": []
            }
        },
        "_prepare_request_headers": {
            "name": "_prepare_request_headers",
            "location": 249,
            "return": [
                "Union[(bytes, List[nothing])]"
            ],
            "arguments": {
                "url": [],
                "connection": [],
                "method": [],
                "headers": [],
                "params": [],
                "multipart": [],
                "boundary": [],
                "proxy": []
            }
        },
        "_handle_chunk": {
            "name": "_handle_chunk",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": [],
                "connection": []
            }
        },
        "HttpHeaders._clear_line": {
            "name": "_clear_line",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "line": []
            }
        },
        "HttpResponse.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse._set_response_initial": {
            "name": "_set_response_initial",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HttpResponse._set_header": {
            "name": "_set_header",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "HttpResponse._update_cookies": {
            "name": "_update_cookies",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_tuple": []
            }
        },
        "HttpResponse._set_connection": {
            "name": "_set_connection",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "HttpResponse.status_code": {
            "name": "status_code",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse._set_body": {
            "name": "_set_body",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HttpResponse._get_encoding": {
            "name": "_get_encoding",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse.__del__": {
            "name": "__del__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponse._set_request_meta": {
            "name": "_set_request_meta",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "urlparsed": []
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [],
                "handle_cookies": [],
                "verify_ssl": [],
                "proxy": []
            }
        },
        "HTTPClient._add_cookies_to_request": {
            "name": "_add_cookies_to_request",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "headers": []
            }
        },
        "HTTPClient._save_new_cookies": {
            "name": "_save_new_cookies",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "response": []
            }
        },
        "HttpResponse._set_response_headers.logparse": {
            "name": "logparse",
            "location": 128,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "aiosonic-master/aiosonic_utils/structures.py": {
        "CaseInsensitiveDict.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T",
                    "str",
                    "tuple",
                    "Iterator[str]"
                ]
            }
        },
        "CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T",
                    "str",
                    "tuple",
                    "Iterator[str]"
                ]
            }
        },
        "CaseInsensitiveDict.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__len__": {
            "name": "__len__",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.lower_items": {
            "name": "lower_items",
            "location": 52,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CaseInsensitiveDict.copy": {
            "name": "copy",
            "location": 65,
            "return": [
                "CaseInsensitiveDict"
            ],
            "arguments": {
                "self": [
                    "_TCaseInsensitiveDict@@CaseInsensitiveDict@@"
                ]
            }
        },
        "CaseInsensitiveDict.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiosonic-master/aiosonic_utils/__init__.py": {},
    "aiosonic-master/djangotestproj/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/djangotestproj/djangotestproj/settings.py": {},
    "aiosonic-master/djangotestproj/djangotestproj/urls.py": {},
    "aiosonic-master/djangotestproj/djangotestproj/views.py": {
        "upload_file": {
            "name": "upload_file",
            "location": 15,
            "return": [
                "HttpResponse",
                "str",
                "Dict"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "aiosonic-master/djangotestproj/djangotestproj/wsgi.py": {},
    "aiosonic-master/djangotestproj/djangotestproj/__init__.py": {},
    "aiosonic-master/sourcedocs/conf.py": {},
    "aiosonic-master/tests/conftest.py": {
        "get_app": {
            "name": "get_app",
            "location": 127,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ssl_context": {
            "name": "ssl_context",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "http2_serv": {
            "name": "http2_serv",
            "location": 164,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "http_serv": {
            "name": "http_serv",
            "location": 177,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "proxy_serv": {
            "name": "proxy_serv",
            "location": 190,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {}
        },
        "__is_port_in_use": {
            "name": "__is_port_in_use",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "port": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "__get_sample_port": {
            "name": "__get_sample_port",
            "location": 216,
            "return": [
                "int"
            ],
            "arguments": {
                "_from": [
                    "List[int]",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[int]",
                    "Any",
                    "Optional[Union[Any,Any]]",
                    "Optional[List[Any]]"
                ],
                "to": [
                    "List[int]",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[int]",
                    "Any",
                    "Optional[Union[Any,Any]]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "check_port": {
            "name": "check_port",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "int",
                    "Dict",
                    "Optional[int]",
                    "None",
                    "Union[str,int]",
                    "str"
                ],
                "hostname": [
                    "Text",
                    "int",
                    "float",
                    "str",
                    "List"
                ],
                "timeout_seconds": [
                    "int",
                    "float",
                    "Optional[int]",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "aiosonic-master/tests/performance.py": {
        "is_tool": {
            "name": "is_tool",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str,Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "timeit_requests": {
            "name": "timeit_requests",
            "location": 99,
            "return": [
                "float"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "concurrency": [
                    "str",
                    "int",
                    "Dict"
                ],
                "repeat": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "do_tests": {
            "name": "do_tests",
            "location": 117,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/tests/test_aiosonic.py": {
        "MyConnection.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyConnection.keep_alive": {
            "name": "keep_alive",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_sending_chunks_with_error.chunks_data": {
            "name": "chunks_data",
            "location": 671,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_post_chunked.data": {
            "name": "data",
            "location": 577,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/tests/test_common.py": {
        "test_headers_retrival": {
            "name": "test_headers_retrival",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_retrival_common": {
            "name": "test_headers_retrival_common",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_parsing": {
            "name": "test_headers_parsing",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_header": {
            "name": "test_add_header",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_header_list": {
            "name": "test_add_header_list",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_header_list_replace": {
            "name": "test_add_header_list_replace",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_header_replace": {
            "name": "test_add_header_replace",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encoding_from_header": {
            "name": "test_encoding_from_header",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_response_line": {
            "name": "test_parse_response_line",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_response_line_with_empty_reason": {
            "name": "test_parse_response_line_with_empty_reason",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_bad_chunk": {
            "name": "test_handle_bad_chunk",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_hostname_parse": {
            "name": "test_hostname_parse",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/tests/test_import.py": {
        "test_cchardet_import_error": {
            "name": "test_cchardet_import_error",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str,Sequence[str]]"
                ]
            }
        },
        "test_cchardet_import_error.import_mock": {
            "name": "import_mock",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "aiosonic-master/tests/test_proxy.py": {},
    "aiosonic-master/tests/test_sample.py": {
        "test_the_truth": {
            "name": "test_the_truth",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiosonic-master/tests/__init__.py": {}
}
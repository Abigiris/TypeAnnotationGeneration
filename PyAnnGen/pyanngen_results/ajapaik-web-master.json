{
    "ajapaik-web-master/manage.py": {},
    "ajapaik-web-master/wsgi.py": {},
    "ajapaik-web-master/ajapaik/hosts.py": {},
    "ajapaik-web-master/ajapaik/utils.py": {
        "get_etag": {
            "name": "get_etag",
            "location": 9,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "_request": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "django.http.HttpRequest",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "image": [
                    "str",
                    "Optional[str]"
                ],
                "_content": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "django.http.HttpRequest",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "last_modified": {
            "name": "last_modified",
            "location": 19,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "_request": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "Optional[datetime.datetime]"
                ],
                "image": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "_content": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "calculate_thumbnail_size": {
            "name": "calculate_thumbnail_size",
            "location": 28,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "p_width": [
                    "float",
                    "int"
                ],
                "p_height": [
                    "float",
                    "int"
                ],
                "desired_longest_side": [
                    "int",
                    "float",
                    "Union[float, List[float]]",
                    "list[float]"
                ]
            }
        },
        "calculate_thumbnail_size_max_height": {
            "name": "calculate_thumbnail_size_max_height",
            "location": 47,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "p_width": [
                    "int",
                    "bytes",
                    "float",
                    "datetime.date.time"
                ],
                "p_height": [
                    "int",
                    "bytes",
                    "float",
                    "datetime.date.time"
                ],
                "desired_height": [
                    "int",
                    "float"
                ]
            }
        },
        "convert_to_degrees": {
            "name": "convert_to_degrees",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "value": [
                    "int",
                    "T",
                    "bool",
                    "Sequence",
                    "datetime.timedelta"
                ]
            }
        },
        "angle_diff": {
            "name": "angle_diff",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "angle1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "angle2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "average_angle": {
            "name": "average_angle",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "angles": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "distance_in_meters": {
            "name": "distance_in_meters",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "lon1": [
                    "float",
                    "int",
                    "Iterator",
                    "str"
                ],
                "lat1": [
                    "float",
                    "int",
                    "Iterator",
                    "str"
                ],
                "lon2": [
                    "float",
                    "int",
                    "Iterator",
                    "str"
                ],
                "lat2": [
                    "float",
                    "int",
                    "Iterator",
                    "str"
                ]
            }
        },
        "most_frequent": {
            "name": "most_frequent",
            "location": 95,
            "return": [
                "int",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "List": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Tuple[List[int], List[int]]",
                    "tuple[typing.Union[list[int],list[int]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "least_frequent": {
            "name": "least_frequent",
            "location": 108,
            "return": [
                "int",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "List": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Tuple[List[int], List[int]]",
                    "tuple[typing.Union[list[int],list[int]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "can_action_be_done": {
            "name": "can_action_be_done",
            "location": 122,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "model": [
                    "datetime.date",
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "photo": [
                    "datetime.date",
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "profile": [
                    "datetime.date",
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "key": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Dict[Any, list]",
                    "dict[typing.Any, list[]]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "new_value": [
                    "bool",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "Optional[Union[int, str]]",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "suggest_photo_edit": {
            "name": "suggest_photo_edit",
            "location": 149,
            "return": [
                "Tuple[(Any, _T0, bool, Union[(int, _T4)])]"
            ],
            "arguments": {
                "photo_suggestions": [
                    "_T0"
                ],
                "key": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Iterable[Tuple[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "new_value": [
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "None",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "Union[str, dict]",
                    "typing.Callable[..., typing.Any]",
                    "Optional[Callable[..., Any]]"
                ],
                "Points": [
                    "str"
                ],
                "score": [
                    "_T4"
                ],
                "action_type": [
                    "str"
                ],
                "model": [
                    "str",
                    "django.db.models.QuerySet",
                    "None",
                    "Optional[str]",
                    "django.contrib.auth.models.User"
                ],
                "photo": [
                    "django.db.models.QuerySet",
                    "Optional[str]",
                    "django.contrib.auth.models.User"
                ],
                "profile": [
                    "str",
                    "django.db.models.QuerySet",
                    "None",
                    "Optional[str]",
                    "django.contrib.auth.models.User"
                ],
                "response": [
                    "str",
                    "datetime.date",
                    "dict[, ]",
                    "dict"
                ],
                "function_name": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/account_adapter.py": {
        "safeUrlAdapter.is_safe_url": {
            "name": "is_safe_url",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/admin.py": {
        "AlbumPhotoInline.formfield_for_dbfield": {
            "name": "formfield_for_dbfield",
            "location": 24,
            "return": [
                "int",
                "float",
                "str",
                "dict[str, typing.Any]",
                "typing.Type",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": [],
                "db_field": []
            }
        },
        "PhotoAdmin._distance_between_two_points_on_sphere": {
            "name": "_distance_between_two_points_on_sphere",
            "location": 39,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "lon_1": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "lat_1": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "lon_2": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "lat_2": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "PhotoAdmin.save_model": {
            "name": "save_model",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "dict[, ]",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ],
                "obj": [
                    "megatron.models.PlatformUser",
                    "float",
                    "bool",
                    "rotkehlchen.db.utils.BlockchainAccounts",
                    "List[Dict[str, Any]]"
                ],
                "form": [
                    "bool",
                    "dict[, ]",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ],
                "change": [
                    "bool",
                    "dict[, ]",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        },
        "PhotoAdmin._invertcolors": {
            "name": "_invertcolors",
            "location": 70,
            "return": [
                "HttpResponse",
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Dict[str, dict]",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "PhotoAdmin.change_view": {
            "name": "change_view",
            "location": 92,
            "return": [
                "str",
                "trezor.utils.Writer",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "object_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "form_url": [
                    "typing.Text",
                    "zerver.models.UserProfile",
                    "str",
                    "int"
                ],
                "extra_context": [
                    "dict[, ]",
                    "zerver.models.UserProfile",
                    "raiden.utils.TokenNetworkID",
                    "int"
                ]
            }
        },
        "PhotoAdmin.get_urls": {
            "name": "get_urls",
            "location": 96,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/api.py": {
        "custom_exception_handler": {
            "name": "custom_exception_handler",
            "location": 102,
            "return": [
                "None",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "exc": [
                    "Exception",
                    "asyncworker.http.wrapper.RequestWrapper",
                    "dict[, ]",
                    "dict"
                ],
                "context": [
                    "Exception",
                    "asyncworker.http.wrapper.RequestWrapper",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "api_album_thumb": {
            "name": "api_album_thumb",
            "location": 397,
            "return": [
                "HttpResponse",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "album_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "thumb_size": [
                    "int",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "_crop_image": {
            "name": "_crop_image",
            "location": 833,
            "return": [
                "_types.Image",
                "int",
                "str"
            ],
            "arguments": {
                "img": [
                    "str",
                    "Mapping[starfish.core.types.Axes, int]",
                    "Iterable[Any]",
                    "Set[Optional[str]]"
                ],
                "scale_factor": [
                    "typing.Mapping",
                    "Mapping[starfish.core.types.Axes, int]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "str",
                    "List[Point]",
                    "None",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "_fill_missing_pixels": {
            "name": "_fill_missing_pixels",
            "location": 844,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "img": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "bool"
                ],
                "scale_factor": [
                    "str",
                    "Mapping[starfish.core.types.Axes, int]",
                    "typing.Mapping",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "CsrfExemptSessionAuthentication.enforce_csrf": {
            "name": "enforce_csrf",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "Login._authenticate_by_email": {
            "name": "_authenticate_by_email",
            "location": 124,
            "return": [
                "None",
                "bool",
                "str",
                "dict[str, str]",
                "dict",
                "int",
                "zam_repondeur.models.Lecture",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bool",
                    "django.http.HttpRequest"
                ],
                "email": [
                    "str",
                    "bool",
                    "django.http.HttpRequest"
                ],
                "password": [
                    "str",
                    "bool",
                    "django.http.HttpRequest"
                ]
            }
        },
        "Login._authenticate_with_google": {
            "name": "_authenticate_with_google",
            "location": 135,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "token": [
                    "dict[, ]",
                    "None",
                    "django.http.HttpRequest",
                    "jumeaux.models.Request",
                    "django.http.HttpResponse",
                    "Optional[dict]",
                    "purplship.core.utils.xml.Element",
                    "libkol.Session",
                    "Optional[django.http.HttpRequest]"
                ]
            }
        },
        "Login._authenticate_with_oauth2_access_token": {
            "name": "_authenticate_with_oauth2_access_token",
            "location": 169,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "adapter": [
                    "str",
                    "apistar.http.RequestData",
                    "bool",
                    "Mapping[str, str]"
                ],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "access_token": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Login._authenticate_with_google2": {
            "name": "_authenticate_with_google2",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "access_token": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "Login._authenticate_with_facebook": {
            "name": "_authenticate_with_facebook",
            "location": 197,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "access_token": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "Login._authenticate_with_wikimedia_commons": {
            "name": "_authenticate_with_wikimedia_commons",
            "location": 204,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "access_token": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "Login.post": {
            "name": "post",
            "location": 211,
            "return": [
                "Response",
                "Exception",
                "tartare.core.models.Job",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "starlette.requests.Request",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Register.post": {
            "name": "post",
            "location": 285,
            "return": [
                "Response",
                "str",
                "zerver.models.Realm",
                "Exception",
                "tartare.core.models.Job",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "rest_framework.requesRequest",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "AjapaikAPIView._fix_latin1_query_param": {
            "name": "_fix_latin1_query_param",
            "location": 345,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "dict[str, str]",
                "bool",
                "List[Dict[str, Any]]",
                "core.models.Ingredient",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "starlette.requests.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest"
                ],
                "body": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AjapaikAPIView._handle_request": {
            "name": "_handle_request",
            "location": 363,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "List[Callable]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AjapaikAPIView._reset_session_cookie": {
            "name": "_reset_session_cookie",
            "location": 369,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_T0"
                ]
            }
        },
        "AjapaikAPIView.post": {
            "name": "post",
            "location": 377,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "rest_framework.requesRequest",
                    "typing.Callable[, ]",
                    "str",
                    "django.http.HttpRequest",
                    "None",
                    "django.http.requesHttpRequest",
                    "Callable",
                    "Optional[str]"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "AjapaikAPIView.get": {
            "name": "get",
            "location": 383,
            "return": [
                "django.http.HttpResponse",
                "str",
                "\"User\"",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "None",
                    "zerver.models.UserProfile",
                    "dict",
                    "Optional[str]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "api_logout._handle_request": {
            "name": "_handle_request",
            "location": 389,
            "return": [
                "Response",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AlbumList._handle_request": {
            "name": "_handle_request",
            "location": 423,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[Callable]",
                    "typing.Iterable[typing.Callable[, ]]"
                ],
                "user": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "request": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[Callable]",
                    "typing.Iterable[typing.Callable[, ]]"
                ]
            }
        },
        "FinnaNearestPhotos._get_signe_results": {
            "name": "_get_signe_results",
            "location": 457,
            "return": [
                "Response",
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "float",
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Callable[[int], bool]",
                    "typing.Callable[int, bool]"
                ],
                "lon": [
                    "float",
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Callable[[int], bool]",
                    "typing.Callable[int, bool]"
                ],
                "search_phrase": [
                    "str",
                    "dict[, ]",
                    "models.User",
                    "dict[str, str]",
                    "int",
                    "None",
                    "dict",
                    "Dict[str, str]",
                    "utils.types.JSON",
                    "Optional[str]"
                ],
                "user": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "bool",
                    "list[str]",
                    "List[str]"
                ],
                "request": [
                    "str",
                    "int",
                    "list[int]",
                    "zerver.models.UserProfile",
                    "transfer.models.ArticleID",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "FinnaNearestPhotos._get_finna_results": {
            "name": "_get_finna_results",
            "location": 510,
            "return": [
                "list[]",
                "str",
                "bool",
                "Optional[str]",
                "int",
                "datetime.datetime",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "str"
                ],
                "lon": [
                    "str"
                ],
                "query": [
                    "typing.Sequence[]",
                    "Sequence",
                    "str",
                    "core.types.FBUserID",
                    "None",
                    "typing.Callable[, ]",
                    "apistar.http.Header",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Callable",
                    "apistar.http.QueryParam",
                    "Dict[str, Any]"
                ],
                "album": [
                    "str",
                    "bool"
                ],
                "distance": [
                    "str"
                ]
            }
        },
        "FinnaNearestPhotos._handle_request": {
            "name": "_handle_request",
            "location": 547,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "faustypes.web.Response",
                    "list[int]",
                    "List[int]"
                ],
                "user": [
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "list",
                    "None",
                    "Dict[str, Any]",
                    "list[]",
                    "Callable[[], bool]",
                    "dict[str, typing.Any]",
                    "Dict[str, int]",
                    "typing.Callable[[], bool]",
                    "dict",
                    "dict[str, int]"
                ],
                "request": [
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "list",
                    "None",
                    "Dict[str, Any]",
                    "list[]",
                    "Callable[[], bool]",
                    "dict[str, typing.Any]",
                    "Dict[str, int]",
                    "typing.Callable[[], bool]",
                    "dict",
                    "dict[str, int]"
                ]
            }
        },
        "AlbumNearestPhotos._handle_request": {
            "name": "_handle_request",
            "location": 647,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "user": [
                    "bool",
                    "str",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "request": [
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[fausweb.Response]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[Any, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AlbumInformation.get": {
            "name": "get",
            "location": 714,
            "return": [
                "JsonResponse",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "bool"
                ],
                "album_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "AlbumPhotoInformation.get": {
            "name": "get",
            "location": 732,
            "return": [
                "JsonResponse",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "album_id": [
                    "int",
                    "str",
                    "transfer.models.ListID"
                ],
                "photo_id": [
                    "int",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "transfer.models.ListID"
                ]
            }
        },
        "AlbumPhotos._handle_request": {
            "name": "_handle_request",
            "location": 757,
            "return": [
                "Response",
                "django.http.HttpResponse",
                "app.models.dto.LoginResponse",
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "django.http.HttpResponse",
                    "dict"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "dict[str, typing.Any]",
                    "libkol.Session",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "SourceDetails._handle_request": {
            "name": "_handle_request",
            "location": 802,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "requests.Response",
                    "purplship.core.utils.Element",
                    "purplship.core.utils.serializable.Deserializable[str]",
                    "django.http.HttpResponse",
                    "purplship.providers.usps.Settings",
                    "purplship.providers.dhl.utils.Settings",
                    "flask.Response"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RephotoUpload.post": {
            "name": "post",
            "location": 861,
            "return": [
                "Response",
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "Exception",
                "tartare.core.models.Job",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes",
                    "django.http.HttpRequest",
                    "mitmproxy.http.HTTPFlow",
                    "users.models.JustfixUser"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "RephotoUploadSettings.post": {
            "name": "post",
            "location": 1031,
            "return": [
                "JsonResponse",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "dict[, ]",
                    "str",
                    "dict",
                    "None",
                    "rest_framework.requesRequest",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "arxiv.users.domain.Session"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "api_user_me._handle_request": {
            "name": "_handle_request",
            "location": 1042,
            "return": [
                "Response",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PhotoDetails._handle_request": {
            "name": "_handle_request",
            "location": 1062,
            "return": [
                "Response",
                "django.http.HttpResponse",
                "app.models.dto.LoginResponse",
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "django.http.HttpResponse",
                    "dict"
                ],
                "user": [
                    "bool",
                    "str",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "request": [
                    "bool",
                    "libkol.Session",
                    "dict[str, typing.Any]",
                    "str",
                    "django.http.HttpResponse",
                    "Dict[str, Any]"
                ]
            }
        },
        "FetchFinnaPhoto._handle_request": {
            "name": "_handle_request",
            "location": 1093,
            "return": [
                "Response",
                "dict",
                "requests.Session",
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[list[int]]",
                    "raiden.utils.List[raiden.utils.Tuple[str, int]]",
                    "dict[str, str]",
                    "List[List[int]]",
                    "list[dict[, ]]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "List[dict]",
                    "dict"
                ],
                "user": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ToggleUserFavoritePhoto._handle_request": {
            "name": "_handle_request",
            "location": 1121,
            "return": [
                "Response",
                "dict",
                "requests.Session",
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "faustypes.web.Response",
                    "list[int]",
                    "List[int]"
                ],
                "user": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "UserFavoritePhotoList._handle_request": {
            "name": "_handle_request",
            "location": 1180,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "story.models.Story"
                ],
                "user": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "request": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[Callable]",
                    "typing.Iterable[typing.Callable[, ]]"
                ]
            }
        },
        "PhotosSearch._handle_request": {
            "name": "_handle_request",
            "location": 1218,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "dict[, ]",
                    "django.http.HttpResponse",
                    "flask.Response",
                    "Optional[fausweb.Response]",
                    "story.models.Choice",
                    "dict"
                ],
                "user": [
                    "str",
                    "salon.models.Stylist"
                ],
                "request": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PhotosInAlbumSearch._handle_request": {
            "name": "_handle_request",
            "location": 1267,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "dict[, ]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "django.http.HttpResponse",
                    "Optional[fausweb.Response]",
                    "flask.Response",
                    "dict"
                ],
                "user": [
                    "str",
                    "salon.models.Stylist"
                ],
                "request": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "UserRephotosSearch._handle_request": {
            "name": "_handle_request",
            "location": 1321,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "None",
                    "dict",
                    "story.models.Story",
                    "django.http.HttpResponse",
                    "Optional[fausweb.Response]",
                    "flask.Response"
                ],
                "user": [
                    "dict[str, typing.Any]",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "dict[str, int]",
                    "Dict[str, Any]",
                    "list[]",
                    "Dict[str, int]",
                    "list"
                ],
                "request": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AlbumsSearch._handle_request": {
            "name": "_handle_request",
            "location": 1372,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "None",
                    "django.http.HttpResponse",
                    "story.models.Choice",
                    "dict",
                    "flask.Response",
                    "Optional[fausweb.Response]"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[Callable]",
                    "typing.Iterable[typing.Callable[, ]]"
                ]
            }
        },
        "AlbumsSearch.post": {
            "name": "post",
            "location": 1397,
            "return": [
                "dict",
                "Dict[str, Any]",
                "asgard.models.job.ScheduledJob"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "None",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "AlbumsSearch.get": {
            "name": "get",
            "location": 1404,
            "return": [
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "List[Dict[str, Any]]",
                "server.models.User",
                "cdp.io.StreamHandle",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "float",
                    "django.http.HttpRequest",
                    "requests.Session"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "WikidocsAlbumsSearch._handle_request": {
            "name": "_handle_request",
            "location": 1417,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence",
                    "typing.Sequence[]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "dict[, ]",
                    "dict",
                    "None",
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Optional[fausweb.Response]",
                    "scrapy.http.TextResponse",
                    "Callable[..., Awaitable[dict]]",
                    "requests.Response"
                ]
            }
        },
        "WikidocsAlbumSearch._handle_request": {
            "name": "_handle_request",
            "location": 1474,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence",
                    "typing.Sequence[]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "dict[, ]",
                    "dict",
                    "None",
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Optional[fausweb.Response]",
                    "scrapy.http.TextResponse",
                    "Callable[..., Awaitable[dict]]",
                    "requests.Response"
                ]
            }
        },
        "PhotosWithUserRephotos._handle_request": {
            "name": "_handle_request",
            "location": 1538,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "int",
                    "utils.projector.ProjectorAllDataProvider",
                    "dict[, ]",
                    "django.http.HttpResponse",
                    "Dict[str, Any]",
                    "dict",
                    "story.models.Story",
                    "flask.Response",
                    "story.models.Choice"
                ],
                "user": [
                    "grpy.core.models.Grouping",
                    "zerver.models.UserProfile",
                    "kerckhoff.users.models.User",
                    "correios.models.user.Service"
                ],
                "request": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "SubmitSimilarPhotos.post": {
            "name": "post",
            "location": 1589,
            "return": [
                "JsonResponse",
                "Dict[int, dict]",
                "List[Dict[str, Any]]",
                "trezor.utils.Writer",
                "bool",
                "Optional[Dict]",
                "dict",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Transcriptions.get": {
            "name": "get",
            "location": 1625,
            "return": [
                "JsonResponse",
                "str",
                "bool",
                "Dict[str, Dict[str, str]]",
                "authorityspoke.io.schemas.RawFactor",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "photo_id": [
                    "str",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "format": [
                    "None",
                    "str",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "Transcriptions.post": {
            "name": "post",
            "location": 1643,
            "return": [
                "JsonResponse",
                "List[str]",
                "dict",
                "int",
                "cmk.utils.type_defs.HostName",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "arxiv.users.domain.Session",
                    "recidiviz.persistence.database.session.Session",
                    "models.File",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.session.Session.Transaction",
                    "sqlalchemy.orm.Session"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "SubmitTranscriptionFeedback.post": {
            "name": "post",
            "location": 1696,
            "return": [
                "JsonResponse",
                "List[str]",
                "dict",
                "int",
                "cmk.utils.type_defs.HostName",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "float",
                    "sqlalchemy.orm.Session",
                    "rest_framework.requesRequest"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "UserSettings.post": {
            "name": "post",
            "location": 1716,
            "return": [
                "JsonResponse",
                "Dict[str, Any]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "zerver.models.UserProfile",
                    "dict[, ]",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "Callable",
                    "dict"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ChangeProfileDisplayName.post": {
            "name": "post",
            "location": 1732,
            "return": [
                "JsonResponse",
                "List[Dict[str, Any]]",
                "int",
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "MergeProfiles.post": {
            "name": "post",
            "location": 1750,
            "return": [
                "JsonResponse",
                "tildes.models.topic.Topic",
                "Dict[str, str]",
                "list",
                "deeplearning.ml4pl.models.log_database.Database.SessionType",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]",
                    "int",
                    "django.http.requesHttpRequest",
                    "Callable",
                    "rest_framework.requesRequest"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "PhotoSuggestion.get": {
            "name": "get",
            "location": 1786,
            "return": [
                "JsonResponse",
                "str",
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "int",
                "socialhome.users.models.Profile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "zerver.models.UserProfile",
                    "dict[, ]",
                    "Optional[bool]",
                    "models.Submission",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "dict"
                ],
                "photo_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.session.Session"
                ],
                "format": [
                    "None",
                    "str",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "PhotoSuggestion.post": {
            "name": "post",
            "location": 1833,
            "return": [
                "JsonResponse",
                "bool",
                "str",
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "MuisCollectionOperations.post": {
            "name": "post",
            "location": 1892,
            "return": [
                "JsonResponse",
                "Dict[str, Any]",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "collection_id": [
                    "bytes",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "MuisCollectionOperations.delete": {
            "name": "delete",
            "location": 1896,
            "return": [
                "JsonResponse",
                "bool",
                "int",
                "zerver.models.UserProfile",
                "str",
                "Optional[Dict[str, bytes]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "collection_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "PhotoAppliedOperations.get": {
            "name": "get",
            "location": 1908,
            "return": [
                "JsonResponse",
                "str",
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "int",
                "socialhome.users.models.Profile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list[dict[str, typing.Any]]",
                    "zerver.models.UserProfile",
                    "bool",
                    "List[Dict[str, Any]]",
                    "None",
                    "Optional[bool]",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "photo_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.session.Session"
                ],
                "format": [
                    "None",
                    "str",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "PhotoAppliedOperations.post": {
            "name": "post",
            "location": 1953,
            "return": [
                "JsonResponse",
                "bool",
                "str",
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Transcriptions.get.feedback_count": {
            "name": "feedback_count",
            "location": 1637,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "elem": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/autocomplete.py": {
        "autocomplete_form_factory": {
            "name": "autocomplete_form_factory",
            "location": 12,
            "return": [
                "type"
            ],
            "arguments": {
                "ac_model": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "models.Payment",
                    "None"
                ],
                "custom_url": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/autocomplete_views.py": {
        "AlbumAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 18,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumPhotoAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 34,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AreaAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 47,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatingAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 60,
            "return": [
                "int",
                "Optional[str]",
                "float",
                "str",
                "zerver.models.UserProfile",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatingConfirmationAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 73,
            "return": [
                "int",
                "Optional[str]",
                "typing.Type",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 86,
            "return": [
                "typing.Match",
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangleAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 99,
            "return": [
                "str",
                "cmk.utils.type_defs.Ruleset",
                "bool",
                "Optional[int]",
                "opentrons.types.Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangleFeedbackAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 112,
            "return": [
                "list[]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionUserSuggestionAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 125,
            "return": [
                "int",
                "Optional[str]",
                "bool",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangleSubjectDataSuggestionAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 138,
            "return": [
                "str",
                "bool",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoTagAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 151,
            "return": [
                "float",
                "str",
                "int",
                "List[Union[int, Any]]",
                "bytes",
                "List[Union[int, str]]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleMapsReverseGeocodeAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 164,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageSimilarityAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 175,
            "return": [
                "tuple",
                "dict",
                "int",
                "dict[str, typing.Union[dict[, ],typing.Any]]",
                "float",
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageSimilaritySuggestionAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 188,
            "return": [
                "int",
                "str",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenceAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 201,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 214,
            "return": [
                "bool",
                "str",
                "Optional[List[int]]",
                "tracim.models.auth.User",
                "app.db_models.User",
                "List[zerver.models.UserProfile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDetectionAnnotationAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 227,
            "return": [
                "str",
                "cmk.utils.type_defs.Ruleset",
                "bool",
                "Optional[int]",
                "opentrons.types.Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectAnnotationClassAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 240,
            "return": [
                "int",
                "str",
                "bool",
                "BaseException",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectAnnotationFeedbackAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 253,
            "return": [
                "str",
                "cmk.utils.type_defs.Ruleset",
                "bool",
                "Optional[int]",
                "opentrons.types.Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 266,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointsAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 279,
            "return": [
                "typing.Match",
                "str",
                "None",
                "Optional[int]",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "bool",
                "list[dict[str, typing.Any]]",
                "Optional[str]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 292,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenAlbumAutocomplete.get": {
            "name": "get",
            "location": 309,
            "return": [
                "HttpResponse",
                "str",
                "Optional[str]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "models.WalletRequest",
                    "dict"
                ]
            }
        },
        "ParentAlbumAutocomplete.get": {
            "name": "get",
            "location": 335,
            "return": [
                "HttpResponse",
                "str",
                "Optional[str]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "models.WalletRequest"
                ]
            }
        },
        "SkipAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 365,
            "return": [
                "typing.Match",
                "str",
                "None",
                "Optional[int]",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "bool",
                "list[dict[str, typing.Any]]",
                "Optional[str]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 378,
            "return": [
                "tuple[typing.Union[typing.Type,typing.Type]]",
                "str",
                "list[]",
                "Optional[str]",
                "db.models.Taxon"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubjectAlbumAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 391,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranscriptionAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 412,
            "return": [
                "typing.Match",
                "str",
                "None",
                "Optional[int]",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "bool",
                "list[dict[str, typing.Any]]",
                "Optional[str]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 425,
            "return": [
                "typing.Match",
                "Optional[str]",
                "None",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 438,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/bbox_api.py": {
        "BboxResponseSerializer.get_ajapaik_url": {
            "name": "get_ajapaik_url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "IO[str]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "PhotosView.get_queryset": {
            "name": "get_queryset",
            "location": 36,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/context_processors.py": {
        "google_maps_api_key": {
            "name": "google_maps_api_key",
            "location": 4,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "_": [
                    "str",
                    "List[Tuple]",
                    "int",
                    "list[tuple[]]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "is_user_upload": {
            "name": "is_user_upload",
            "location": 10,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/delfi.py": {
        "photos_bbox": {
            "name": "photos_bbox",
            "location": 48,
            "return": [
                "Response",
                "Dict[str, Any]",
                "models.Base",
                "bool",
                "int",
                "flask.Response",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "photo_info": {
            "name": "photo_info",
            "location": 77,
            "return": [
                "Response",
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "request": [
                    "tuple[int]",
                    "django.http.HttpRequest",
                    "Tuple[int]",
                    "viewer.models.Archive",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DelfiBboxRequestForm.clean": {
            "name": "clean",
            "location": 16,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/forms.py": {
        "SignupForm.signup": {
            "name": "signup",
            "location": 32,
            "return": [
                "_T1"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "user": [
                    "_T1"
                ]
            }
        },
        "GalleryFilteringForm.clean_page": {
            "name": "clean_page",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GalleryFilteringForm.clean_order1": {
            "name": "clean_order1",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GalleryFilteringForm.clean_order2": {
            "name": "clean_order2",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GalleryFilteringForm.clean_order3": {
            "name": "clean_order3",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuratorAlbumSelectionForm.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatingSubmitForm.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPhotoUploadForm.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPhotoUploadForm.clean": {
            "name": "clean",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPhotoUploadAddAlbumForm.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSettingsForm.clean": {
            "name": "clean",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RephotoUploadSettingsForm.clean": {
            "name": "clean",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeDisplayNameForm.clean": {
            "name": "clean",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuratorWholeSetAlbumsSelectionForm.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentForm.__init__": {
            "name": "__init__",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditCommentForm.clean_comment_id": {
            "name": "clean_comment_id",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditCommentForm.clean": {
            "name": "clean",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/iiif.py": {
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 7,
            "return": [
                "str",
                "dict",
                "type"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "photo_info": {
            "name": "photo_info",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "photo_id": [
                    "str",
                    "None",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "pseudo_slug": [
                    "None",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "bytes",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "photo_manifest_v2": {
            "name": "photo_manifest_v2",
            "location": 20,
            "return": [
                "bytes",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "int"
                ],
                "photo_id": [
                    "None",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "pseudo_slug": [
                    "None",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "bytes",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "_get_v2_canvas": {
            "name": "_get_v2_canvas",
            "location": 197,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "tracim.models.data.Content",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "zerver.models.Client"
                ],
                "photo_id": [
                    "int",
                    "str",
                    "zerver.models.Realm"
                ],
                "label": [
                    "int",
                    "str"
                ],
                "lang_code": [
                    "int",
                    "str"
                ],
                "iiif_image_url": [
                    "int",
                    "str"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "height": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "canvas_name": [
                    "int",
                    "str",
                    "None",
                    "tracim.models.data.Content",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "zerver.models.Client"
                ],
                "source_text": [
                    "str",
                    "int"
                ],
                "licence_url": [
                    "bytes",
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "thumbnail": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "metadata": [
                    "bytes",
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_render_licence_text": {
            "name": "_render_licence_text",
            "location": 252,
            "return": [
                "typing.Text",
                "str",
                "Callable[..., T]",
                "list"
            ],
            "arguments": {
                "licence": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "zerver.models.DefaultStreamGroup"
                ]
            }
        },
        "_render_rights_url": {
            "name": "_render_rights_url",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "licence": [
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "typing.Mapping",
                    "Tuple[bytes, bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes,bytes]]"
                ]
            }
        },
        "_render_source_text": {
            "name": "_render_source_text",
            "location": 274,
            "return": [
                "str",
                "typing.Text",
                "list[]"
            ],
            "arguments": {
                "source": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "T",
                    "None",
                    "type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ],
                "source_url": [
                    "list[]",
                    "list",
                    "T"
                ],
                "identifier": [
                    "list[]",
                    "list",
                    "T"
                ]
            }
        },
        "_render_attribution": {
            "name": "_render_attribution",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "list",
                    "int",
                    "list[]",
                    "str",
                    "Container[str]",
                    "typing.Container",
                    "Union[str, None]",
                    "None",
                    "Tuple[str, str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "author": [
                    "list",
                    "int",
                    "list[]",
                    "str",
                    "Container[str]",
                    "typing.Container",
                    "Union[str, None]",
                    "None",
                    "Tuple[str, str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "date": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "str",
                    "bool",
                    "typing.Any",
                    "Optional[Any]",
                    "None",
                    "list",
                    "list[]"
                ],
                "licence": [
                    "list",
                    "int",
                    "list[]",
                    "str",
                    "Container[str]",
                    "typing.Container",
                    "Union[str, None]",
                    "None",
                    "Tuple[str, str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "multilang_string_v2": {
            "name": "multilang_string_v2",
            "location": 308,
            "return": [
                "Dict[(str, Union[(_T0, _T1)])]"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ],
                "language": [
                    "_T1"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/juks.py": {
        "empty_json": {
            "name": "empty_json",
            "location": 10,
            "return": [
                "HttpResponse",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "layers": {
            "name": "layers",
            "location": 21,
            "return": [
                "HttpResponse",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/middleware.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/models.py": {
        "_calc_trustworthiness": {
            "name": "_calc_trustworthiness",
            "location": 139,
            "return": [
                "float"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "None",
                    "transfer.models.ListID",
                    "Optional[str]"
                ]
            }
        },
        "_make_fullscreen": {
            "name": "_make_fullscreen",
            "location": 154,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "photo": [
                    "Optional[int]",
                    "int",
                    "numpy.random.RandomState"
                ]
            }
        },
        "_get_pseudo_slug_for_photo": {
            "name": "_get_pseudo_slug_for_photo",
            "location": 161,
            "return": [
                "str",
                "Mapping[str, Any]",
                "List[Dict]",
                "Dict[str, Any]",
                "bool",
                "Tuple[int, int, int]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "description": [
                    "str",
                    "Optional[str]",
                    "Union[None, float, str]",
                    "None",
                    "float",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "source_key": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Union[bytes, str, None]",
                    "None"
                ],
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "_user_post_save": {
            "name": "_user_post_save",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "instance": [
                    "dict[, ]",
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "EstimatedCountQuerySet.cached_count": {
            "name": "cached_count",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EstimatedCountQuerySet.estimated_count": {
            "name": "estimated_count",
            "location": 75,
            "return": [
                "int",
                "bool",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "EstimatedCountManager.get_queryset": {
            "name": "get_queryset",
            "location": 100,
            "return": [
                "EstimatedCountQuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanValue.as_sql": {
            "name": "as_sql",
            "location": 115,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "connection": [
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]",
                    "Lookup"
                ]
            }
        },
        "NotEqual.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "apps.common.coininfo.CoinInfo",
                    "Union[str, dict]"
                ],
                "rhs": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "apps.common.coininfo.CoinInfo",
                    "Union[str, dict]"
                ]
            }
        },
        "NotEqual.as_sql": {
            "name": "as_sql",
            "location": 129,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "qn": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "annofabapi.models.Inspection"
                ],
                "connection": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "annofabapi.models.Inspection"
                ]
            }
        },
        "Area.__str__": {
            "name": "__str__",
            "location": 194,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumPhoto.__str__": {
            "name": "__str__",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumPhoto.delete": {
            "name": "delete",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.__str__": {
            "name": "__str__",
            "location": 296,
            "return": [
                "typing.Text",
                "str",
                "MutableSequence[utils.CWLObjectType]",
                "tuple",
                "cmk.utils.type_defs.HostName",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.save": {
            "name": "save",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_historic_photos_queryset_with_subalbums_old": {
            "name": "get_historic_photos_queryset_with_subalbums_old",
            "location": 335,
            "return": [
                "int",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_historic_photos_queryset_with_subalbums": {
            "name": "get_historic_photos_queryset_with_subalbums",
            "location": 341,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_geotagged_historic_photo_queryset_with_subalbums_old": {
            "name": "get_geotagged_historic_photo_queryset_with_subalbums_old",
            "location": 348,
            "return": [
                "int",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_geotagged_historic_photo_queryset_with_subalbums": {
            "name": "get_geotagged_historic_photo_queryset_with_subalbums",
            "location": 354,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_rephotos_queryset_with_subalbums_old": {
            "name": "get_rephotos_queryset_with_subalbums_old",
            "location": 358,
            "return": [
                "str",
                "Callable",
                "List[str]",
                "salon.models.Stylist",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_rephotos_queryset_with_subalbums": {
            "name": "get_rephotos_queryset_with_subalbums",
            "location": 362,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_all_photos_queryset_with_subalbums_old": {
            "name": "get_all_photos_queryset_with_subalbums_old",
            "location": 367,
            "return": [
                "str",
                "bool",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_all_photos_queryset_with_subalbums": {
            "name": "get_all_photos_queryset_with_subalbums",
            "location": 377,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_comment_count_with_subalbums_old": {
            "name": "get_comment_count_with_subalbums_old",
            "location": 388,
            "return": [
                "int",
                "str",
                "Callable",
                "List[str]",
                "salon.models.Stylist",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_comment_count_with_subalbums": {
            "name": "get_comment_count_with_subalbums",
            "location": 396,
            "return": [
                "str",
                "bool",
                "int",
                "dict[, ]",
                "set[]",
                "list[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_confirmed_similar_photo_count_with_subalbums_old": {
            "name": "get_confirmed_similar_photo_count_with_subalbums_old",
            "location": 414,
            "return": [
                "str",
                "list",
                "list[]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_confirmed_similar_photo_count_with_subalbums": {
            "name": "get_confirmed_similar_photo_count_with_subalbums",
            "location": 421,
            "return": [
                "str",
                "bool",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_similar_photo_count_with_subalbums_old": {
            "name": "get_similar_photo_count_with_subalbums_old",
            "location": 428,
            "return": [
                "str",
                "Callable",
                "int",
                "list",
                "dict[int, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_similar_photo_count_with_subalbums": {
            "name": "get_similar_photo_count_with_subalbums",
            "location": 434,
            "return": [
                "str",
                "bool",
                "int",
                "dict[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.set_calculated_fields_old": {
            "name": "set_calculated_fields_old",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.set_calculated_fields_new": {
            "name": "set_calculated_fields_new",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.set_calculated_fields": {
            "name": "set_calculated_fields",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.light_save": {
            "name": "light_save",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.fill_untranslated_fields": {
            "name": "fill_untranslated_fields",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Album.get_album_type": {
            "name": "get_album_type",
            "location": 520,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_display_text": {
            "name": "get_display_text",
            "location": 669,
            "return": [
                "None",
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.people": {
            "name": "people",
            "location": 684,
            "return": [
                "set[]",
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_game_json_format_photo": {
            "name": "get_game_json_format_photo",
            "location": 698,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "photo": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "datetime.datetime"
                ]
            }
        },
        "Photo.get_next_photo_to_geotag": {
            "name": "get_next_photo_to_geotag",
            "location": 734,
            "return": [
                "List[Union[(bool, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "qs": [
                    "str",
                    "bool",
                    "aw_core.models.Event",
                    "pandas.DataFrame"
                ],
                "request": [
                    "dict[str, typing.Any]",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "starlette.requests.Request"
                ]
            }
        },
        "Photo.__str__": {
            "name": "__str__",
            "location": 807,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.__init__": {
            "name": "__init__",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_detail_url": {
            "name": "get_detail_url",
            "location": 819,
            "return": [
                "zerver.models.Realm",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.do_flip": {
            "name": "do_flip",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.do_invert": {
            "name": "do_invert",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.do_rotate": {
            "name": "do_rotate",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degrees": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "str",
                    "django.template.Context"
                ]
            }
        },
        "Photo.set_aspect_ratio": {
            "name": "set_aspect_ratio",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.calculate_phash": {
            "name": "calculate_phash",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.find_similar": {
            "name": "find_similar",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.find_similar_for_existing_photo": {
            "name": "find_similar_for_existing_photo",
            "location": 1011,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.watermark": {
            "name": "watermark",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 1058,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[Dict[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_pseudo_slug": {
            "name": "get_pseudo_slug",
            "location": 1061,
            "return": [
                "str",
                "bool",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_heatmap_points": {
            "name": "get_heatmap_points",
            "location": 1071,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.reverse_geocode_location": {
            "name": "reverse_geocode_location",
            "location": 1082,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.set_backside": {
            "name": "set_backside",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opposite": [
                    "bool",
                    "float"
                ]
            }
        },
        "Photo.save": {
            "name": "save",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.add_to_source_album": {
            "name": "add_to_source_album",
            "location": 1150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.light_save": {
            "name": "light_save",
            "location": 1171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.get_centroid": {
            "name": "get_centroid",
            "location": 1175,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "points": [
                    "str",
                    "bool"
                ]
            }
        },
        "Photo.get_nearest_point": {
            "name": "get_nearest_point",
            "location": 1184,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "set_of_points": [
                    "set[str]",
                    "bool",
                    "Sequence[int]",
                    "Set[str]",
                    "int"
                ],
                "point_of_reference": [
                    "bool",
                    "Sequence[str]",
                    "float",
                    "typing.Sequence[str]",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "None"
                ]
            }
        },
        "Photo.fill_untranslated_fields": {
            "name": "fill_untranslated_fields",
            "location": 1196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.set_calculated_fields": {
            "name": "set_calculated_fields",
            "location": 1221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageSimilarity.__add__": {
            "name": "__add__",
            "location": 1327,
            "return": [
                "Tuple[(int, Optional[ImageSimilaritySuggestion])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageSimilarity.__update__": {
            "name": "__update__",
            "location": 1337,
            "return": [
                "Tuple[(int, ImageSimilaritySuggestion)]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "bytes",
                    "models.User",
                    "medtagger.database.models.Slice",
                    "str",
                    "List[app.models.Question]"
                ]
            }
        },
        "ImageSimilarity.__add_or_update__": {
            "name": "__add_or_update__",
            "location": 1376,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageSimilarity.add_or_update": {
            "name": "add_or_update",
            "location": 1394,
            "return": [
                "bool",
                "set[N]",
                "str"
            ],
            "arguments": {
                "photo_obj": [
                    "dict[int, dict[, ]]",
                    "int",
                    "Dict[int, dict]",
                    "None",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "photo_obj2": [
                    "dict[int, dict[, ]]",
                    "int",
                    "Dict[int, dict]",
                    "None",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "confirmed": [
                    "bool",
                    "Dict[int, dict]",
                    "int",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "similarity_type": [
                    "None",
                    "int",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "profile": [
                    "None",
                    "int",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "Optional[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "PhotoComment.__str__": {
            "name": "__str__",
            "location": 1443,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Points.__str__": {
            "name": "__str__",
            "location": 1521,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoTag.save": {
            "name": "save",
            "location": 1594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoTag.__str__": {
            "name": "__str__",
            "location": 1599,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacebookManager.url_read": {
            "name": "url_read",
            "location": 1628,
            "return": [
                "float",
                "Optional[int]",
                "Series",
                "int",
                "bool"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "Callable[[str], bool]",
                    "typing.Callable[str, bool]",
                    "List[object]",
                    "list[object]",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "FacebookManager.get_user": {
            "name": "get_user",
            "location": 1632,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Profile.id": {
            "name": "id",
            "location": 1685,
            "return": [
                "str",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_legit": {
            "name": "is_legit",
            "location": 1688,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_display_name": {
            "name": "get_display_name",
            "location": 1695,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_profile_url": {
            "name": "get_profile_url",
            "location": 1713,
            "return": [
                "esm.models.last_operation.LastOperation",
                "int",
                "core.types.UserRole",
                "datetime.timedelta",
                "Optional[List[str]]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__str__": {
            "name": "__str__",
            "location": 1716,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.merge_from_other": {
            "name": "merge_from_other",
            "location": 1719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]",
                    "Mapping",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]",
                    "ValuesView",
                    "typing.ValuesView"
                ]
            }
        },
        "Profile.update_rephoto_score": {
            "name": "update_rephoto_score",
            "location": 1728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.set_calculated_fields": {
            "name": "set_calculated_fields",
            "location": 1786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_preferred_language": {
            "name": "get_preferred_language",
            "location": 1792,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.__str__": {
            "name": "__str__",
            "location": 1805,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.__str__": {
            "name": "__str__",
            "location": 1831,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Skip.__str__": {
            "name": "__str__",
            "location": 1843,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.log": {
            "name": "log",
            "location": 1856,
            "return": [
                "Action"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TAction]"
                ],
                "my_type": [
                    "str",
                    "Type[ajapaik.ajapaik.forms.AddAlbumForm]",
                    "typing.Type"
                ],
                "params": [
                    "str",
                    "None",
                    "Type[ajapaik.ajapaik.forms.AddAlbumForm]",
                    "typing.Type"
                ],
                "related_object": [
                    "List[int]",
                    "None",
                    "Dict[int, int]",
                    "list[int]",
                    "list",
                    "dict[int, int]",
                    "numpy.ndarray",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "request": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "Licence.__str__": {
            "name": "__str__",
            "location": 1877,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleMapsReverseGeocode.__str__": {
            "name": "__str__",
            "location": 1889,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dating.__str__": {
            "name": "__str__",
            "location": 1921,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatingConfirmation.__str__": {
            "name": "__str__",
            "location": 1934,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.save": {
            "name": "save",
            "location": 1959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.__str__": {
            "name": "__str__",
            "location": 1965,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 1968,
            "return": [
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyXtdComment.save": {
            "name": "save",
            "location": 1981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyXtdComment.delete": {
            "name": "delete",
            "location": 1994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyXtdComment.like_count": {
            "name": "like_count",
            "location": 2016,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "Mapping",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyXtdComment.dislike_count": {
            "name": "dislike_count",
            "location": 2019,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "Mapping",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/muis_utils.py": {
        "unstructured_date_to_structured_date": {
            "name": "unstructured_date_to_structured_date",
            "location": 36,
            "return": [],
            "arguments": {
                "date": [],
                "all_date_prefixes": [],
                "is_later_date": []
            }
        },
        "set_text_fields_from_muis": {
            "name": "set_text_fields_from_muis",
            "location": 215,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "photo": [],
                "dating": [],
                "rec": [],
                "object_description_wraps": [],
                "ns": []
            }
        },
        "reset_modeltranslated_field": {
            "name": "reset_modeltranslated_field",
            "location": 253,
            "return": [],
            "arguments": {
                "photo": [],
                "attribute_name": [],
                "attribute_value": []
            }
        },
        "extract_dating_from_event": {
            "name": "extract_dating_from_event",
            "location": 267,
            "return": [
                "Tuple[(_T1, Any, Any, Any, Any, bool, bool)]"
            ],
            "arguments": {
                "events": [],
                "location": [
                    "_T1"
                ],
                "creation_date_earliest": [],
                "creation_date_latest": [],
                "skip_dating": [],
                "ns": []
            }
        },
        "add_person_albums": {
            "name": "add_person_albums",
            "location": 333,
            "return": [
                "Tuple[(_T1, Any)]"
            ],
            "arguments": {
                "actors": [],
                "person_album_ids": [
                    "_T1"
                ],
                "ns": []
            }
        },
        "get_muis_date_and_prefix": {
            "name": "get_muis_date_and_prefix",
            "location": 378,
            "return": [
                "Tuple[(Any, Any, bool)]"
            ],
            "arguments": {
                "date": [],
                "is_later_date": []
            }
        },
        "add_geotag_from_address_to_photo": {
            "name": "add_geotag_from_address_to_photo",
            "location": 420,
            "return": [
                "_T0"
            ],
            "arguments": {
                "photo": [
                    "_T0"
                ],
                "locations": []
            }
        },
        "raw_date_to_date": {
            "name": "raw_date_to_date",
            "location": 505,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "raw_date": []
            }
        },
        "add_dating_to_photo": {
            "name": "add_dating_to_photo",
            "location": 521,
            "return": [
                "_T0"
            ],
            "arguments": {
                "photo": [
                    "_T0"
                ],
                "earliest_date": [],
                "latest_date": [],
                "date_prefix_earliest": [],
                "date_prefix_latest": [],
                "Dating": [],
                "date_earliest_has_suffix": [],
                "date_latest_has_suffix": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/opendata.py": {
        "PhotoSerializer.get_geotags": {
            "name": "get_geotags",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "core.models.Grouping",
                    "core.models.Registration",
                    "int"
                ]
            }
        },
        "PhotoGeoTagViewSet.retrieve": {
            "name": "retrieve",
            "location": 60,
            "return": [
                "Response",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "django.db.models.QuerySet",
                    "deeplearning.ml4pl.models.log_database.Database"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/phash.py": {
        "binaryhash_to_signed_integer": {
            "name": "binaryhash_to_signed_integer",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "hash": [
                    "List[bool]"
                ]
            }
        },
        "phash": {
            "name": "phash",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "image": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "hash_size": [
                    "int"
                ],
                "highfreq_factor": [
                    "int"
                ]
            }
        },
        "ImageHash.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binary_array": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/search_indexes.py": {
        "PhotoIndex.get_model": {
            "name": "get_model",
            "location": 38,
            "return": [
                "Type[ajapaik.ajapaik.models.Photo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoIndex.index_queryset": {
            "name": "index_queryset",
            "location": 41,
            "return": [
                "str",
                "BaseException",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "AlbumIndex.get_model": {
            "name": "get_model",
            "location": 57,
            "return": [
                "Type[ajapaik.ajapaik.models.Album]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumIndex.index_queryset": {
            "name": "index_queryset",
            "location": 60,
            "return": [
                "bool",
                "str",
                "Tuple[float, float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/serializers.py": {
        "AlbumDetailsSerializer.get_image": {
            "name": "get_image",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type",
                    "typing.Type",
                    "int",
                    "Optional[BaseException]",
                    "BaseException",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AlbumDetailsSerializer.get_stats": {
            "name": "get_stats",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "AlbumDetailsSerializer.annotate_albums": {
            "name": "annotate_albums",
            "location": 34,
            "return": [
                "int",
                "models.Question",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "albums_queryset": [
                    "int"
                ]
            }
        },
        "AlbumSerializer.get_photos": {
            "name": "get_photos",
            "location": 48,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "CuratorAlbumInfoSerializer.get_parent_album_id": {
            "name": "get_parent_album_id",
            "location": 73,
            "return": [
                "None",
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CuratorAlbumInfoSerializer.get_parent_album_name": {
            "name": "get_parent_album_name",
            "location": 76,
            "return": [
                "None",
                "Optional[Any]",
                "Dict[str, str]",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "DateTimeTzAwareField.to_representation": {
            "name": "to_representation",
            "location": 110,
            "return": [
                "int",
                "str",
                "Union[str, int]",
                "employees.models.Report",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "FrontpageAlbumSerializer.get_album_type": {
            "name": "get_album_type",
            "location": 128,
            "return": [
                "Optional[str]",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "django.contrib.sites.models.Site",
                    "typing.Type",
                    "Type"
                ]
            }
        },
        "PhotoMapMarkerSerializer.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoMapMarkerSerializer.get_url": {
            "name": "get_url",
            "location": 149,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PhotoMapMarkerSerializer.get_permalink": {
            "name": "get_permalink",
            "location": 155,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "PhotoMapMarkerSerializer.get_width": {
            "name": "get_width",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "list[list[str]]",
                    "List[List[str]]",
                    "raiden.utils.Address"
                ]
            }
        },
        "PhotoMapMarkerSerializer.get_height": {
            "name": "get_height",
            "location": 164,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "PhotoMapMarkerSerializer.get_is_selected": {
            "name": "get_is_selected",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "int",
                    "logging.LogRecord",
                    "None"
                ]
            }
        },
        "PhotoSerializer.annotate_photos": {
            "name": "annotate_photos",
            "location": 191,
            "return": [
                "django.db.models.Model",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "list[str]",
                    "List[str]",
                    "typing.Callable[[], None]",
                    "Optional[Callable[[], None]]",
                    "None"
                ],
                "photos_queryset": [
                    "int",
                    "str",
                    "bool",
                    "typing.Collection",
                    "Collection[int]"
                ],
                "user_profile": [
                    "int",
                    "str",
                    "bool",
                    "typing.Collection",
                    "Collection[int]"
                ]
            }
        },
        "PhotoSerializer.get_display_text": {
            "name": "get_display_text",
            "location": 212,
            "return": [
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "float",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
                ]
            }
        },
        "PhotoSerializer.get_image": {
            "name": "get_image",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int"
                ]
            }
        },
        "PhotoSerializer.get_date": {
            "name": "get_date",
            "location": 221,
            "return": [
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "dict[, ]",
                    "dict",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PhotoSerializer.get_source": {
            "name": "get_source",
            "location": 227,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "Iterable[bytes]",
                    "None"
                ]
            }
        },
        "PhotoSerializer.get_rephotos": {
            "name": "get_rephotos",
            "location": 239,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "salon.models.Stylist",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "RephotoSerializer.get_image": {
            "name": "get_image",
            "location": 284,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int"
                ]
            }
        },
        "RephotoSerializer.get_date": {
            "name": "get_date",
            "location": 289,
            "return": [
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "dict[, ]",
                    "dict",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RephotoSerializer.get_source": {
            "name": "get_source",
            "location": 295,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "Iterable[bytes]",
                    "None"
                ]
            }
        },
        "RephotoSerializer.get_is_uploaded_by_current_user": {
            "name": "get_is_uploaded_by_current_user",
            "location": 307,
            "return": [
                "bool",
                "Sequence[str]",
                "int",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "bytes",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/sitemaps.py": {
        "PhotoSitemap.items": {
            "name": "items",
            "location": 9,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoSitemap.lastmod": {
            "name": "lastmod",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "VideoSitemap.items": {
            "name": "items",
            "location": 19,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoSitemap.lastmod": {
            "name": "lastmod",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "StaticViewSitemap.items": {
            "name": "items",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticViewSitemap.location": {
            "name": "location",
            "location": 32,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/social_account_adapter.py": {
        "MySocialAccountAdapter.get_connect_redirect_url": {
            "name": "get_connect_redirect_url",
            "location": 7,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.Realm",
                "Dict[str, Dict[str, Any]]",
                "daylighdb.models.Profile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "int",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "socialaccount": [
                    "dict[, ]",
                    "int",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "MySocialAccountAdapter.save_user": {
            "name": "save_user",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "dict",
                    "django.contrib.auth.models.User"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ],
                "form": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "dict",
                    "django.contrib.auth.models.User"
                ],
                "commit": [
                    "bool",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/sorl_overrides.py": {
        "SEOThumbnailBackend._get_thumbnail_filename": {
            "name": "_get_thumbnail_filename",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ],
                "geometry_string": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "typing.Callable[dict[, ], typing.Hashable]",
                    "dict",
                    "dict[, ]"
                ],
                "options": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Sequence[str]",
                    "Dict[str, Union[str, int, bool]]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/translation.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/urls.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/urls_opendata.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/user_middleware.py": {
        "get_user": {
            "name": "get_user",
            "location": 14,
            "return": [
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "set_user": {
            "name": "set_user",
            "location": 29,
            "return": [
                "_T1"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "_T1"
                ]
            }
        },
        "UserMiddleware.process_request": {
            "name": "process_request",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "AuthBackend.authenticate": {
            "name": "authenticate",
            "location": 48,
            "return": [
                "Optional[str]",
                "str",
                "dict[int, str]",
                "dict[str, str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "bool",
                    "django.http.requesHttpRequest",
                    "Optional[django.http.HttpRequest]"
                ],
                "username": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "user": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "list[str]",
                    "django.http.HttpRequest",
                    "models.Tag",
                    "List[str]"
                ]
            }
        },
        "AuthBackend.get_user": {
            "name": "get_user",
            "location": 86,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[bool]",
                "bool",
                "List[str]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/utils.py": {
        "get_comment_replies": {
            "name": "get_comment_replies",
            "location": 9,
            "return": [
                "str",
                "bool",
                "AsyncGenerator",
                "int"
            ],
            "arguments": {
                "comment": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "merge_profiles": {
            "name": "merge_profiles",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "target_profile": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[Container[str]]",
                    "IO",
                    "float",
                    "Mapping",
                    "salon.models.ServiceTemplateSet",
                    "List[str]"
                ],
                "source_profile": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "get_pagination_parameters": {
            "name": "get_pagination_parameters",
            "location": 114,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "page": [
                    "int",
                    "List[str]",
                    "Tuple[int, int]",
                    "str"
                ],
                "page_size": [
                    "int",
                    "Tuple[int, int]"
                ],
                "photo_count": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/views.py": {
        "image_thumb": {
            "name": "image_thumb",
            "location": 103,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "thumb_size": [],
                "pseudo_slug": [
                    "None"
                ]
            }
        },
        "get_image_thumb": {
            "name": "get_image_thumb",
            "location": 130,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "image": [],
                "content": []
            }
        },
        "image_full": {
            "name": "image_full",
            "location": 135,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "pseudo_slug": [
                    "None"
                ]
            }
        },
        "get_general_info_modal_content": {
            "name": "get_general_info_modal_content",
            "location": 142,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_album_info_modal_content": {
            "name": "get_album_info_modal_content",
            "location": 181,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "_get_exif_data": {
            "name": "_get_exif_data",
            "location": 253,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "img": []
            }
        },
        "_extract_and_save_data_from_exif": {
            "name": "_extract_and_save_data_from_exif",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "photo_with_exif": []
            }
        },
        "_get_album_choices": {
            "name": "_get_album_choices",
            "location": 339,
            "return": [],
            "arguments": {
                "qs": [],
                "start": [
                    "None"
                ],
                "end": [
                    "None"
                ]
            }
        },
        "_calculate_recent_activity_scores": {
            "name": "_calculate_recent_activity_scores",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_leaderboard": {
            "name": "_get_leaderboard",
            "location": 375,
            "return": [],
            "arguments": {
                "profile": []
            }
        },
        "_get_album_leaderboard50": {
            "name": "_get_album_leaderboard50",
            "location": 398,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "profile_id": [],
                "album_id": [
                    "None"
                ]
            }
        },
        "_get_all_time_leaderboard50": {
            "name": "_get_all_time_leaderboard50",
            "location": 445,
            "return": [],
            "arguments": {
                "profile_id": []
            }
        },
        "rephoto_upload": {
            "name": "rephoto_upload",
            "location": 460,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "photo_id": []
            }
        },
        "logout": {
            "name": "logout",
            "location": 539,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "game": {
            "name": "game",
            "location": 551,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "fetch_stream": {
            "name": "fetch_stream",
            "location": 618,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "frontpage": {
            "name": "frontpage",
            "location": 665,
            "return": [],
            "arguments": {
                "request": [],
                "album_id": [
                    "None"
                ],
                "page": [
                    "None"
                ]
            }
        },
        "frontpage_async_data": {
            "name": "frontpage_async_data",
            "location": 717,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "frontpage_async_albums": {
            "name": "frontpage_async_albums",
            "location": 724,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_get_filtered_data_for_frontpage": {
            "name": "_get_filtered_data_for_frontpage",
            "location": 772,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [],
                "album_id": [
                    "None"
                ],
                "page_override": [
                    "None"
                ]
            }
        },
        "photo_selection": {
            "name": "photo_selection",
            "location": 1179,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "list_photo_selection": {
            "name": "list_photo_selection",
            "location": 1198,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "upload_photo_selection": {
            "name": "upload_photo_selection",
            "location": 1224,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "_make_fullscreen": {
            "name": "_make_fullscreen",
            "location": 1278,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "p": []
            }
        },
        "videoslug": {
            "name": "videoslug",
            "location": 1283,
            "return": [],
            "arguments": {
                "request": [],
                "video_id": [],
                "pseudo_slug": [
                    "None"
                ]
            }
        },
        "photoslug": {
            "name": "photoslug",
            "location": 1294,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "pseudo_slug": [
                    "None"
                ]
            }
        },
        "photo_upload_modal": {
            "name": "photo_upload_modal",
            "location": 1534,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": []
            }
        },
        "login_modal": {
            "name": "login_modal",
            "location": 1545,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "mapview": {
            "name": "mapview",
            "location": 1554,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "rephoto_id": [
                    "None"
                ]
            }
        },
        "map_objects_by_bounding_box": {
            "name": "map_objects_by_bounding_box",
            "location": 1644,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "geotag_add": {
            "name": "geotag_add",
            "location": 1699,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "geotag_confirm": {
            "name": "geotag_confirm",
            "location": 1805,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "leaderboard": {
            "name": "leaderboard",
            "location": 1849,
            "return": [],
            "arguments": {
                "request": [],
                "album_id": [
                    "None"
                ]
            }
        },
        "all_time_leaderboard": {
            "name": "all_time_leaderboard",
            "location": 1934,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "top50": {
            "name": "top50",
            "location": 1947,
            "return": [],
            "arguments": {
                "request": [],
                "album_id": [
                    "None"
                ]
            }
        },
        "difficulty_feedback": {
            "name": "difficulty_feedback",
            "location": 1983,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "public_add_album": {
            "name": "public_add_album",
            "location": 2009,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "public_add_area": {
            "name": "public_add_area",
            "location": 2026,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "curator": {
            "name": "curator",
            "location": 2047,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "extract_values_from_dictionary_to_result": {
            "name": "extract_values_from_dictionary_to_result",
            "location": 2072,
            "return": [
                "dict"
            ],
            "arguments": {
                "dictionary": [
                    "dict"
                ],
                "result": [
                    "dict"
                ]
            }
        },
        "_join_2_json_objects": {
            "name": "_join_2_json_objects",
            "location": 2089,
            "return": [
                "str"
            ],
            "arguments": {
                "obj1": [],
                "obj2": []
            }
        },
        "curator_search": {
            "name": "curator_search",
            "location": 2101,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "curator_my_album_list": {
            "name": "curator_my_album_list",
            "location": 2153,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "curator_selectable_albums": {
            "name": "curator_selectable_albums",
            "location": 2163,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "curator_get_album_info": {
            "name": "curator_get_album_info",
            "location": 2174,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "curator_update_my_album": {
            "name": "curator_update_my_album",
            "location": 2187,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "_get_licence_name_by_url": {
            "name": "_get_licence_name_by_url",
            "location": 2225,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "url": [
                    "_T0"
                ]
            }
        },
        "curator_photo_upload_handler": {
            "name": "curator_photo_upload_handler",
            "location": 2239,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "update_like_state": {
            "name": "update_like_state",
            "location": 2524,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "muis_import": {
            "name": "muis_import",
            "location": 2570,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "csv_import": {
            "name": "csv_import",
            "location": 2598,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "submit_dating": {
            "name": "submit_dating",
            "location": 2860,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_datings": {
            "name": "get_datings",
            "location": 2925,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "photo_id": []
            }
        },
        "generate_still_from_video": {
            "name": "generate_still_from_video",
            "location": 2939,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "donate": {
            "name": "donate",
            "location": 2994,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "photo_upload_choice": {
            "name": "photo_upload_choice",
            "location": 3017,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "upload_photo_to_wikimedia_commons": {
            "name": "upload_photo_to_wikimedia_commons",
            "location": 3029,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "path": []
            }
        },
        "rephoto_upload_settings_modal": {
            "name": "rephoto_upload_settings_modal",
            "location": 3100,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "compare_all_photos": {
            "name": "compare_all_photos",
            "location": 3115,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "photo_id_2": [
                    "None"
                ]
            }
        },
        "compare_photos": {
            "name": "compare_photos",
            "location": 3119,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "photo_id_2": [
                    "None"
                ]
            }
        },
        "compare_photos_generic": {
            "name": "compare_photos_generic",
            "location": 3123,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "None"
                ],
                "photo_id_2": [
                    "None"
                ],
                "view": [
                    "typing.Text"
                ],
                "compare_all": [
                    "bool"
                ]
            }
        },
        "user_upload": {
            "name": "user_upload",
            "location": 3176,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "user_upload_add_album": {
            "name": "user_upload_add_album",
            "location": 3224,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_comment_like_count": {
            "name": "get_comment_like_count",
            "location": 3242,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [],
                "comment_id": []
            }
        },
        "privacy": {
            "name": "privacy",
            "location": 3357,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "terms": {
            "name": "terms",
            "location": 3361,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "me": {
            "name": "me",
            "location": 3365,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "oauthdone": {
            "name": "oauthdone",
            "location": 3368,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "user": {
            "name": "user",
            "location": 3399,
            "return": [],
            "arguments": {
                "request": [],
                "user_id": []
            }
        },
        "user_settings_modal": {
            "name": "user_settings_modal",
            "location": 3470,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "user_settings": {
            "name": "user_settings",
            "location": 3485,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "profile_change_display_name": {
            "name": "profile_change_display_name",
            "location": 3560,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "merge_accounts": {
            "name": "merge_accounts",
            "location": 3573,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "geotaggers_modal": {
            "name": "geotaggers_modal",
            "location": 3606,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "photo_id": []
            }
        },
        "supporters": {
            "name": "supporters",
            "location": 3633,
            "return": [],
            "arguments": {
                "request": [],
                "year": [
                    "None"
                ]
            }
        },
        "redirect_view": {
            "name": "redirect_view",
            "location": 3710,
            "return": [],
            "arguments": {
                "request": [],
                "photo_id": [
                    "int"
                ],
                "thumb_size": [
                    "int"
                ],
                "pseudo_slug": [
                    "typing.Text"
                ]
            }
        },
        "CommentList._aggregate_comment_and_replies": {
            "name": "_aggregate_comment_and_replies",
            "location": 3259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comments": [],
                "flat_comment_list": []
            }
        },
        "CommentList.get": {
            "name": "get",
            "location": 3270,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "photo_id": []
            }
        },
        "PostComment.post": {
            "name": "post",
            "location": 3299,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "photo_id": []
            }
        },
        "EditComment.post": {
            "name": "post",
            "location": 3316,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DeleteComment._perform_delete": {
            "name": "_perform_delete",
            "location": 3327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "comment": []
            }
        },
        "DeleteComment.post": {
            "name": "post",
            "location": 3343,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "csv_import.del_evenReadonly": {
            "name": "del_evenReadonly",
            "location": 2641,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [],
                "name": [],
                "exc": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/common.py": {
        "NotValidatedMultipleChoiceField.to_python": {
            "name": "to_python",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "bytes",
                    "Union[int, float]"
                ]
            }
        },
        "NotValidatedMultipleChoiceField.validate": {
            "name": "validate",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/europeana.py": {
        "_filter_out_url": {
            "name": "_filter_out_url",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "str": [
                    "str",
                    "bool"
                ]
            }
        },
        "EuropeanaDriver.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EuropeanaDriver.urlToResponseTitles": {
            "name": "urlToResponseTitles",
            "location": 22,
            "return": [
                "Dict[(str, Union[(int, List[Dict[(str, Any)]])])]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EuropeanaDriver.search": {
            "name": "search",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "EuropeanaDriver.transform_response": {
            "name": "transform_response",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "response": [
                    "bytes",
                    "dict",
                    "Optional[int]",
                    "django.db.models.QuerySet",
                    "Dict[str, Any]"
                ],
                "remove_existing": [
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "current_page": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[int]",
                    "django.db.models.QuerySet",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/finna.py": {
        "finna_cut_title": {
            "name": "finna_cut_title",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [],
                "shortTitle": []
            }
        },
        "finna_add_to_album": {
            "name": "finna_add_to_album",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "photo": [],
                "target_album": []
            }
        },
        "get_img_url": {
            "name": "get_img_url",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [],
                "size": [
                    "typing.Text"
                ]
            }
        },
        "finna_find_photo_by_url": {
            "name": "finna_find_photo_by_url",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "record_url": [],
                "profile": []
            }
        },
        "finna_import_photo": {
            "name": "finna_import_photo",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [],
                "profile": []
            }
        },
        "safe_list_get": {
            "name": "safe_list_get",
            "location": 236,
            "return": [],
            "arguments": {
                "my_list": [],
                "idx": [],
                "default": []
            }
        },
        "FinnaDriver.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinnaDriver.search": {
            "name": "search",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "cleaned_data": []
            }
        },
        "FinnaDriver.transform_response": {
            "name": "transform_response",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "remove_existing": [
                    "bool"
                ],
                "finna_page": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/flickr_commons.py": {
        "FlickrCommonsDriver.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlickrCommonsDriver.search": {
            "name": "search",
            "location": 14,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "int",
                "salon.models.Stylist",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "FlickrCommonsDriver.transform_response": {
            "name": "transform_response",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "remove_existing": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "tracim.models.data.Content",
                    "dict"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/fotis.py": {
        "safe_list_get": {
            "name": "safe_list_get",
            "location": 8,
            "return": [
                "bytes",
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]",
                "None"
            ],
            "arguments": {
                "my_list": [
                    "tuple[int]",
                    "str",
                    "Tuple[int]",
                    "int",
                    "bool"
                ],
                "idx": [
                    "int",
                    "Tuple[int]",
                    "str",
                    "bool"
                ],
                "default": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FotisDriver.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FotisDriver.search": {
            "name": "search",
            "location": 24,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "str",
                    "dict",
                    "saucerbogroupme.models.Bot",
                    "Mapping",
                    "Type['Declared']",
                    "Dict[str, Any]"
                ]
            }
        },
        "FotisDriver.transform_response": {
            "name": "transform_response",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict"
                ],
                "remove_existing": [
                    "bool",
                    "requests.Response",
                    "List[Dict[str, Any]]",
                    "tracim.models.data.Content",
                    "dict"
                ],
                "fotis_page": [
                    "int",
                    "requests.Response",
                    "List[Dict[str, Any]]",
                    "tracim.models.data.Content",
                    "dict"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/valimimoodul.py": {
        "ValimimoodulDriver.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValimimoodulDriver.search": {
            "name": "search",
            "location": 15,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ValimimoodulDriver.get_by_ids": {
            "name": "get_by_ids",
            "location": 46,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str"
                ]
            }
        },
        "ValimimoodulDriver.transform_response": {
            "name": "transform_response",
            "location": 55,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "response": [
                    "_T0"
                ],
                "remove_existing": [
                    "list",
                    "bool"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/wikidata.py": {
        "get_label_translation": {
            "name": "get_label_translation",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "label_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_label_translation.get_translation": {
            "name": "get_translation",
            "location": 30,
            "return": [
                "int",
                "bool",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Union[int, Tuple[int, ...]]",
                "float",
                "str"
            ],
            "arguments": {
                "language": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/wikimediacommons.py": {
        "wikimediacommons_find_photo_by_url": {
            "name": "wikimediacommons_find_photo_by_url",
            "location": 13,
            "return": [
                "str",
                "int",
                "None",
                "bool",
                "list[str]",
                "dict[int, str]",
                "typing.Pattern",
                "typing.Match"
            ],
            "arguments": {
                "record_url": [
                    "str"
                ],
                "profile": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CommonsDriver.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonsDriver.search": {
            "name": "search",
            "location": 29,
            "return": [
                "Dict[(str, Union[(int, list)])]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "str",
                    "bytearray",
                    "AnyStr"
                ]
            }
        },
        "CommonsDriver.transform_response": {
            "name": "transform_response",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "response": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "remove_existing": [
                    "bool",
                    "requests.Response",
                    "List[Dict[str, Any]]",
                    "tracim.models.data.Content",
                    "dict"
                ],
                "current_page": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[int]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "django.db.models.QuerySet",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/curator_drivers/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/management/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/add_albums_photos_to_source_album.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/calculate_annotation_count_and_add_dates.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/calculate_aspect_ratio_for_all.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/calculate_geotag_location.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/calculate_phash_for_all.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/calculate_transcription_count_and_add_dates.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/clone_rephotos.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/create_xtd_comments_from_fb_comments.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/delete_album_and_photos_within.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/delete_zero_data_users.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/fb_rescrape.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/find_similar_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/find_similar_photos_from_all.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/flag_similar_for_all_images.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/flip_flipped_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/get_fb_comments.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/get_stats.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/get_stats_more.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/import_photos_from_muis.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/invert_photo.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/refresh.py": {
        "Command.handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/refresh_albums.py": {
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/refresh_albums_new.py": {
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle.get_historical_photo_qs": {
            "name": "get_historical_photo_qs",
            "location": 20,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "album": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/remove_duplicate_albums.py": {
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/restore_photo_metadata_from_history.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/reverse_geocode_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/rotate_photo.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/send_user_summary.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_calculated_fields_for_albums.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_calculated_fields_for_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_calculated_fields_for_users.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_display_name_for_all_users.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_first_and_last_name_for_profile.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_latest_and_earliest_comment_and_comment_count_for_all_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_latest_and_earliest_geotag_and_geotag_count_for_all_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_latest_and_earliest_rephoto_for_all_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_spatial_data_for_albums.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_spatial_data_for_geotags.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_spatial_data_for_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/set_user_rephoto_scores.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/tartunlp_on_all_albums.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/tartunlp_on_all_photos.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/test_android_api.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.test_request": {
            "name": "test_request",
            "location": 126,
            "return": [
                "Union[(requests.sessions.Session, _T4)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "method": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "expected_result": [
                    "str"
                ],
                "session": [
                    "_T4"
                ]
            }
        },
        "Command.randomString": {
            "name": "randomString",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stringLength": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Command.test_register": {
            "name": "test_register",
            "location": 157,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "password": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "firstname": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "lastname": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "expected_result": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "dict",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "Command.test_login": {
            "name": "test_login",
            "location": 170,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Tuple[str, str]",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "List[str]",
                    "list[str]"
                ],
                "password": [
                    "Tuple[str, str]",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "List[str]",
                    "list[str]"
                ],
                "expected_result": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Command.test_logout": {
            "name": "test_logout",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_result": [
                    "str",
                    "bool"
                ],
                "session": [
                    "bool",
                    "str"
                ]
            }
        },
        "Command.run_tests": {
            "name": "run_tests",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[Union[str, int]]"
                ],
                "password": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/update_comment_count_for_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/update_muis_photos.py": {
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/update_photo_directory.py": {
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/update_points_objects_for_geotags_and_dating_confirmations.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/management/commands/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/mediawiki/mediawiki.py": {
        "get_mediawiki_url": {
            "name": "get_mediawiki_url",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "betacommons": [
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "transfer.models.Party"
                ]
            }
        },
        "download_tmp_file": {
            "name": "download_tmp_file",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "remove_tmp_file": {
            "name": "remove_tmp_file",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Union[Literal, str]"
                ]
            }
        },
        "get_random_commons_image": {
            "name": "get_random_commons_image",
            "location": 36,
            "return": [
                "dict[, ]",
                "List[str]",
                "str",
                "dict[typing.Text, ]",
                "Dict[str, List[str]]",
                "users.models.CustomUser",
                "bool",
                "core.models.Grouping"
            ],
            "arguments": {
                "level": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_wikimedia_api_client": {
            "name": "get_wikimedia_api_client",
            "location": 59,
            "return": [
                "bool",
                "OAuth2Session"
            ],
            "arguments": {
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "list[zerver.models.UserProfile]",
                    "None",
                    "django.contrib.auth.models.User",
                    "List[zerver.models.UserProfile]",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "get_csrf_token": {
            "name": "get_csrf_token",
            "location": 100,
            "return": [
                "int",
                "limbic.emotion.models.LexiconLimbicModel",
                "zerver.models.Recipient",
                "str",
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "upload_file_to_commons": {
            "name": "upload_file_to_commons",
            "location": 108,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "List[str]",
                "list",
                "Tuple[str]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict"
                ],
                "source_filename": [
                    "str"
                ],
                "target_filename": [
                    "str"
                ],
                "wikitext": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ],
                "comment": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/mediawiki/wikitext.py": {
        "replace_or_die": {
            "name": "replace_or_die",
            "location": 4,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "old": [
                    "str"
                ],
                "new": [
                    "str"
                ],
                "text": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "get_licence_template": {
            "name": "get_licence_template",
            "location": 12,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "str": [
                    "str",
                    "Union[str, None]",
                    "None"
                ]
            }
        },
        "get_institution_template": {
            "name": "get_institution_template",
            "location": 21,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "str": [
                    "str",
                    "Union[str, None]",
                    "None"
                ]
            }
        },
        "get_institution_category": {
            "name": "get_institution_category",
            "location": 30,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "str": [
                    "str",
                    "bool"
                ]
            }
        },
        "upload_own_photo_wikitext": {
            "name": "upload_own_photo_wikitext",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "out": [
                    "str",
                    "bool",
                    "int",
                    "Dict[int, object]",
                    "dict",
                    "Sequence[float]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0001_initial.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0002_auto_20201211_1421.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0003_auto_20201213_1907.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0004_auto_20201213_2022.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0005_auto_20201217_1358.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0006_album_muis_person_ids.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0007_auto_20201230_0204.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0008_auto_20201230_0221.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0009_supporter.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0010_muiscollection.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0011_auto_20210121_2053.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0012_auto_20210203_0022.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0013_auto_20210207_1907.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0014_photo_muis_update_time.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0015_auto_20210212_0239.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0016_applicationexception.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0017_auto_20210720_0330.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0018_location_google_reverse_geocode.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0019_alter_albumphoto_photo.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0020_photo_rephoto_count.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0021_auto_20220526_2153.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0022_auto_20220526_2202.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/0023_alter_album_created.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/migrations/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/socialaccount/providers/wikimedia_commons/client.py": {
        "WikimediaCommonsOAuth2Client.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "authorization_url": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "extra_params": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "defaultdict"
                ]
            }
        },
        "WikimediaCommonsOAuth2Client.get_access_token": {
            "name": "get_access_token",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bytes",
                    "apistar.http.Body"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/socialaccount/providers/wikimedia_commons/provider.py": {
        "WikimediaCommonsAccount.to_str": {
            "name": "to_str",
            "location": 13,
            "return": [
                "Optional[str]",
                "int",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikimediaCommonsProvider.get_default_scope": {
            "name": "get_default_scope",
            "location": 23,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikimediaCommonsProvider.get_auth_params": {
            "name": "get_auth_params",
            "location": 27,
            "return": [
                "str",
                "list[list[int]]",
                "base.ConfigOptions",
                "Iterable[Tuple[str, str]]",
                "list[str]",
                "bytes",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "action": []
            }
        },
        "WikimediaCommonsProvider.extract_uid": {
            "name": "extract_uid",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "WikimediaCommonsProvider.extract_common_fields": {
            "name": "extract_common_fields",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/socialaccount/providers/wikimedia_commons/urls.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/socialaccount/providers/wikimedia_commons/views.py": {
        "WikimediaCommonsOAuth2Adapter.complete_login": {
            "name": "complete_login",
            "location": 23,
            "return": [
                "str",
                "int",
                "Callable",
                "dict[str, typing.Union[typing.Any,int,str]]",
                "dict[str, dict[str, typing.Any]]",
                "list[tuple[typing.Union[str,typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "starlette.requests.Request"
                ],
                "app": [
                    "str"
                ],
                "token": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "WikimediaCommonsOAuth2CallbackView.get_client": {
            "name": "get_client",
            "location": 37,
            "return": [
                "str",
                "WikimediaCommonsOAuth2Client"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "app": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/socialaccount/providers/wikimedia_commons/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/templatetags/ajapaik_templatetags.py": {
        "add_get": {
            "name": "add_get",
            "location": 25,
            "return": [
                "AddGetParameter",
                "app.models.models.User",
                "django.contrib.auth.models.AbstractBaseUser",
                "str",
                "Optional[services.user.transfer.models.User]",
                "Type[models.User]",
                "users.models.JustfixUser"
            ],
            "arguments": {
                "parser": [
                    "models.Dominion",
                    "docker.models.containers.Container"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "settings_value": {
            "name": "settings_value",
            "location": 35,
            "return": [
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "Mapping",
                    "typing.Mapping",
                    "Union[str, List[str]]",
                    "list[str]"
                ]
            }
        },
        "div": {
            "name": "div",
            "location": 40,
            "return": [
                "float",
                "str",
                "typing.Text",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bool",
                    "int"
                ],
                "arg": [
                    "str",
                    "Callable[[None], bool]",
                    "Tuple[str, str, str]",
                    "bool",
                    "List[bytes]",
                    "int"
                ]
            }
        },
        "user_is_connected_to_wiki_account": {
            "name": "user_is_connected_to_wiki_account",
            "location": 53,
            "return": [],
            "arguments": {
                "user": [
                    "asgard.models.user.User",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.accounAccount",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "remove_newlines": {
            "name": "remove_newlines",
            "location": 59,
            "return": [
                "List[int]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AddGetParameter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "AddGetParameter.render": {
            "name": "render",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/templatetags/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik/tests/test_context_processor.py": {
        "test_google_maps_api_key": {
            "name": "test_google_maps_api_key",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_user_upload_false": {
            "name": "test_is_user_upload_false",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_user_upload_true": {
            "name": "test_is_user_upload_true",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/tests/test_phash.py": {
        "test_binaryhash_to_signed_integer": {
            "name": "test_binaryhash_to_signed_integer",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phash": {
            "name": "test_phash",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/tests/test_tartunlp.py": {
        "test_photos_tartunlp_translation": {
            "name": "test_photos_tartunlp_translation",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_albums_tartunlp_translation": {
            "name": "test_albums_tartunlp_translation",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik/tests/test_utils.py": {
        "test_least_frequent": {
            "name": "test_least_frequent",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/admin.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/api.py": {
        "AddSubjectData.post": {
            "name": "post",
            "location": 17,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "format": [
                    "None",
                    "int",
                    "django.http.HttpRequest",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "AddSubjectData.get_profile": {
            "name": "get_profile",
            "location": 39,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "AddSubjectData.add_subject_data": {
            "name": "add_subject_data",
            "location": 47,
            "return": [
                "JsonResponse",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "apistar.http.RequestData",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "additional_subject_data": [
                    "ajapaik.ajapaik_face_recognition.domain.add_additional_subject_data.AddAdditionalSubjectData"
                ],
                "request": [
                    "int",
                    "str",
                    "bool",
                    "\"Client\""
                ]
            }
        },
        "AlbumData.get": {
            "name": "get",
            "location": 73,
            "return": [
                "JsonResponse",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "album_id": [
                    "str"
                ]
            }
        },
        "Annotation.get": {
            "name": "get",
            "location": 87,
            "return": [
                "JsonResponse",
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "annotation_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/forms.py": {
        "FaceRecognitionAddPersonForm.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/models.py": {
        "FaceRecognitionRectangle.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangle.decode_coordinates": {
            "name": "decode_coordinates",
            "location": 60,
            "return": [
                "bytes",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangle.get_subject_name": {
            "name": "get_subject_name",
            "location": 63,
            "return": [
                "None",
                "str",
                "Dict[str, Type]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangle.get_subject": {
            "name": "get_subject",
            "location": 68,
            "return": [
                "Optional[ajapaik.ajapaik.models.Album]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionRectangle.add_subject_data": {
            "name": "add_subject_data",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "age": [
                    "core.models.DepositClaim",
                    "List[str]",
                    "raiden.utils.Any"
                ],
                "gender": [
                    "Dict[str, Any]",
                    "str",
                    "raiden.utils.Any"
                ]
            }
        },
        "FaceRecognitionRectangleFeedback.__str__": {
            "name": "__str__",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceRecognitionUserSuggestion.__str__": {
            "name": "__str__",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/serializers.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/urls.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/views.py": {
        "add_subject": {
            "name": "add_subject",
            "location": 30,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "Exception",
                "tartare.core.models.Job",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "_get_consensus_subject": {
            "name": "_get_consensus_subject",
            "location": 53,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "rectangle": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "save_subject_object": {
            "name": "save_subject_object",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "subject_album": [
                    "str",
                    "bool",
                    "Iterable[Pattern]",
                    "raiden.utils.Address",
                    "int",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ],
                "rectangle": [
                    "str",
                    "bool",
                    "Iterable[Pattern]",
                    "raiden.utils.Address",
                    "int",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ],
                "user_id": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Pattern]",
                    "Iterable[Pattern]",
                    "raiden.utils.Address",
                    "int",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ],
                "user_profile": [
                    "str",
                    "Exception"
                ]
            }
        },
        "save_subject": {
            "name": "save_subject",
            "location": 113,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "form": [
                    "ajapaik.ajapaik_face_recognition.forms.FaceRecognitionSuggestionForm"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "user_profile": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "add_person_rectangle": {
            "name": "add_person_rectangle",
            "location": 120,
            "return": [
                "str",
                "List[str]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Optional[utils.CWLObjectType]",
                    "Iterator[int]",
                    "int",
                    "float"
                ],
                "photo": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "add_rectangle_feedback": {
            "name": "add_rectangle_feedback",
            "location": 150,
            "return": [
                "HttpResponse",
                "Optional[str]",
                "List[str]",
                "bytes",
                "raiden.utils.ABI",
                "Dict[str, str]",
                "tuple"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "annotation_id": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "update_annotation": {
            "name": "update_annotation",
            "location": 161,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "bool",
                "asgard.models.job.ScheduledJob"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "annotation_id": [
                    "int"
                ]
            }
        },
        "remove_annotation": {
            "name": "remove_annotation",
            "location": 179,
            "return": [
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "annotation_id": [
                    "int"
                ]
            }
        },
        "get_subject_data_empty": {
            "name": "get_subject_data_empty",
            "location": 192,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "set[str]",
                    "str",
                    "django.http.HttpRequest",
                    "Set[str]"
                ]
            }
        },
        "get_subject_data": {
            "name": "get_subject_data",
            "location": 196,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "rectangle_id": [
                    "int",
                    "None",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/domain/add_additional_subject_data.py": {
        "AddAdditionalSubjectData.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_rectangle_id": [
                    "int"
                ],
                "age": [
                    "int"
                ],
                "gender": [
                    "int"
                ],
                "newSubjectId": [
                    "Optional[int]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/domain/face_annotation_feedback_request.py": {
        "FaceAnnotationFeedbackRequest.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ],
                "annotation_id": [
                    "int"
                ],
                "parameters": [
                    "str"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/domain/face_annotation_remove_request.py": {
        "FaceAnnotationRemoveRequest.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation_id": [
                    "int"
                ],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/domain/face_annotation_update_request.py": {
        "FaceAnnotationUpdateRequest.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "annotation_id": [
                    "int"
                ],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/domain/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/add_recognized_photos_to_corresponding_albums.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/map_encodings_to_known_people.py": {
        "map_single_person": {
            "name": "map_single_person",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "person_album": [
                    "ajapaik.ajapaik.models.Album"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/reset_genders.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/run_face_detection.py": {
        "analyse_single_photo": {
            "name": "analyse_single_photo",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "photo": [
                    "ajapaik.ajapaik.models.Photo"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/run_face_encoding_on_unencoded_rectangles.py": {
        "encode_single_rectangle": {
            "name": "encode_single_rectangle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "rectangle": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/run_face_recognition.py": {
        "recognize_single_rectangle": {
            "name": "recognize_single_rectangle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "unrecognized_rectangle": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/update_existing_person_albums_with_qid.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/management/commands/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/migrations/0001_initial.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/migrations/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/service/face_annotation_delete_service.py": {
        "remove_annotation": {
            "name": "remove_annotation",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation_remove_request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_remove_request.FaceAnnotationRemoveRequest"
                ]
            }
        },
        "get_annotation_subject_data_suggestions": {
            "name": "get_annotation_subject_data_suggestions",
            "location": 38,
            "return": [
                "Callable",
                "int",
                "Optional[Exception]",
                "str",
                "tuple"
            ],
            "arguments": {
                "face_recognition_rectangle_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "excars.models.locations.Location"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/service/face_annotation_edit_service.py": {
        "update_face_annotation": {
            "name": "update_face_annotation",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_update_request.FaceAnnotationUpdateRequest"
                ],
                "http_request": [
                    "Optional[django.http.HttpRequest]",
                    "None",
                    "str",
                    "FrozenSet[bytes]",
                    "frozenset",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_existing_user_suggestion": {
            "name": "get_existing_user_suggestion",
            "location": 47,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ],
                "request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_update_request.FaceAnnotationUpdateRequest"
                ]
            }
        },
        "update_user_suggestions": {
            "name": "update_user_suggestions",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "http_request": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "apistar.http.RequestData",
                    "zerver.models.UserProfile"
                ],
                "annotation_id": [
                    "int"
                ],
                "update_request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_update_request.FaceAnnotationUpdateRequest"
                ]
            }
        },
        "create_user_feeback": {
            "name": "create_user_feeback",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ],
                "update_request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_update_request.FaceAnnotationUpdateRequest"
                ]
            }
        },
        "get_existing_user_additional_data_suggestion": {
            "name": "get_existing_user_additional_data_suggestion",
            "location": 91,
            "return": [
                "None",
                "Callable",
                "str",
                "IO[bytes]",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "proposer": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ],
                "annotation_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "get_existing_data_suggestion": {
            "name": "get_existing_data_suggestion",
            "location": 101,
            "return": [
                "None",
                "Callable",
                "int"
            ],
            "arguments": {
                "annotation_id": [
                    "int",
                    "str",
                    "models.Slice"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/service/face_annotation_feedback_service.py": {
        "add_feedback": {
            "name": "add_feedback",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_feedback_request.FaceAnnotationFeedbackRequest"
                ],
                "http_request": [
                    "str",
                    "bytes",
                    "django.http.HttpRequest",
                    "users.models.JustfixUser",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_existing_feedback": {
            "name": "get_existing_feedback",
            "location": 39,
            "return": [
                "None",
                "Optional[bool]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ],
                "user": [
                    "ajapaik.ajapaik.models.Profile"
                ]
            }
        },
        "set_feedback": {
            "name": "set_feedback",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "feedback": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangleFeedback"
                ],
                "request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_feedback_request.FaceAnnotationFeedbackRequest"
                ],
                "user": [
                    "ajapaik.ajapaik.models.Profile"
                ],
                "annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "add_gender_and_age_feedback": {
            "name": "add_gender_and_age_feedback",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "ajapaik.ajapaik.models.Profile"
                ],
                "face_annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ],
                "request": [
                    "ajapaik.ajapaik_face_recognition.domain.face_annotation_feedback_request.FaceAnnotationFeedbackRequest"
                ],
                "http_request": [
                    "int",
                    "set[]",
                    "django.http.HttpRequest",
                    "asgard.models.accounAccount",
                    "set",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_face_recognition/service/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/admin.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/api.py": {
        "Annotation.get": {
            "name": "get",
            "location": 16,
            "return": [
                "JsonResponse",
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "annotation_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/apps.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/models.py": {
        "ObjectDetectionModel.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectAnnotationClass.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDetectionAnnotation.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectAnnotationFeedback.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/object_annotation_utils.py": {
        "is_value_present": {
            "name": "is_value_present",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "Optional[float]",
                    "Set[str]",
                    "faustypes.models.ModelT"
                ]
            }
        },
        "parse_parameter": {
            "name": "parse_parameter",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "parameter": [
                    "Callable",
                    "bool",
                    "Match"
                ]
            }
        },
        "convert_to_query_dictionary": {
            "name": "convert_to_query_dictionary",
            "location": 41,
            "return": [
                "dict[str, typing.Union[int,str,dict[str, str]]]",
                "bool",
                "str",
                "List['PydanticModelField']",
                "Dict[str, str]",
                "models.Match"
            ],
            "arguments": {
                "dictionary": [
                    "dict[str, typing.Union[int,str]]",
                    "Dict[str, Union[int, str]]",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "dict[, ]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "transform_annotation_queryset": {
            "name": "transform_annotation_queryset",
            "location": 47,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "query_set": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "transform_function": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "photo_id": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "is_object_annotation_editable": {
            "name": "is_object_annotation_editable",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "object_annotation": [
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "is_face_annotation_editable": {
            "name": "is_face_annotation_editable",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "is_annotation_editable_for_user": {
            "name": "is_annotation_editable_for_user",
            "location": 73,
            "return": [
                "bool",
                "Set[str]",
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "created_on": [
                    "int"
                ],
                "created_by_id": [
                    "int"
                ]
            }
        },
        "is_annotation_editable_time_wise": {
            "name": "is_annotation_editable_time_wise",
            "location": 77,
            "return": [
                "bool",
                "float",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "created_on": [
                    "str",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "magic.models.Deck"
                ]
            }
        },
        "parse_boolean": {
            "name": "parse_boolean",
            "location": 87,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "parse_gender_parameter": {
            "name": "parse_gender_parameter",
            "location": 94,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "gender": [
                    "_T0"
                ]
            }
        },
        "parse_age_parameter": {
            "name": "parse_age_parameter",
            "location": 114,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "age": [
                    "_T0"
                ]
            }
        },
        "parse_age_to_constant": {
            "name": "parse_age_to_constant",
            "location": 139,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "age": [
                    "_T0"
                ]
            }
        },
        "parse_gender_to_constant": {
            "name": "parse_gender_to_constant",
            "location": 165,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "gender": [
                    "_T0"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/response.py": {
        "success": {
            "name": "success",
            "location": 5,
            "return": [
                "dict",
                "int",
                "Dict[str, str]",
                "bytes",
                "Dict[str, Type[Any]]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "None",
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "django.contrib.gis.geos.Point",
                    "typing.Any",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "not_supported": {
            "name": "not_supported",
            "location": 9,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, str]",
                "List[int]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "action_failed": {
            "name": "action_failed",
            "location": 13,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, str]",
                "List[int]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "get_json_response_object": {
            "name": "get_json_response_object",
            "location": 17,
            "return": [
                "HttpResponse",
                "str",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "is_ok": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "status": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_response_object": {
            "name": "get_response_object",
            "location": 21,
            "return": [
                "bool",
                "dict",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "is_ok": [
                    "str",
                    "Optional[str]",
                    "FrozenSet[bytes]",
                    "None",
                    "frozenset"
                ],
                "data": [
                    "Optional[str]",
                    "None",
                    "str",
                    "FrozenSet[bytes]",
                    "frozenset"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/urls.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/views.py": {
        "add_annotation": {
            "name": "add_annotation",
            "location": 18,
            "return": [
                "List[str]",
                "str",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "update_annotation": {
            "name": "update_annotation",
            "location": 29,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "remove_annotation": {
            "name": "remove_annotation",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "annotation_id": [
                    "int"
                ]
            }
        },
        "get_all_annotations": {
            "name": "get_all_annotations",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "int"
                ],
                "photo_id": [
                    "int",
                    "None"
                ]
            }
        },
        "get_object_annotation_classes": {
            "name": "get_object_annotation_classes",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Iterable[int]",
                    "django.http.HttpRequest",
                    "Iterable[int]"
                ]
            }
        },
        "add_feedback": {
            "name": "add_feedback",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "apistar.http.Header",
                "dict"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.requesHttpRequest"
                ],
                "annotation_id": [
                    "django.http.HttpRequest",
                    "apistar.http.RequestData"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/add_detection_annotation.py": {
        "AddDetectionAnnotation.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/add_object_detection_feedback.py": {
        "AddObjectDetectionFeedback.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "str",
                    "int",
                    "bool"
                ],
                "user_id": [
                    "int"
                ],
                "annotation_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/annotation_remove_request.py": {
        "AnnotationRemove.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation_id": [
                    "int"
                ],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/detection_rectangle.py": {
        "get_if_key_present": {
            "name": "get_if_key_present",
            "location": 4,
            "return": [
                "str",
                "bytes",
                "Dict[str, str]",
                "None",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "list[str]",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "key": [
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "DetectionRectangle.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "dict"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/object_annotation_update_request.py": {
        "ObjectAnnotationUpdateRequest.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "django.http.QueryDict",
                    "Dict[str, float]",
                    "Iterable[int]"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/remove_object_annotation_feedback.py": {
        "RemoveObjectAnnotationFeedback.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation_id": [
                    "int"
                ],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/domain/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/migrations/0001_initial.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/migrations/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/detection_models.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/object_annotation_add_service.py": {
        "add_annotation": {
            "name": "add_annotation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "add_detection_annotation": [
                    "ajapaik.ajapaik_object_recognition.domain.add_detection_annotation.AddDetectionAnnotation"
                ],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "list[domain.models.User]",
                    "List[domain.models.User]"
                ]
            }
        },
        "save_detected_face": {
            "name": "save_detected_face",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "new_rectangle_id": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "stiff.models.Tagging",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "person_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "user_profile": [
                    "str",
                    "bool",
                    "Union[int, List[int]]",
                    "list[int]"
                ]
            }
        },
        "add_subject_data": {
            "name": "add_subject_data",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "new_face_annotation_id": [
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "typing.Sequence[int]",
                    "dict",
                    "application.domain.repositories.SlotRepository",
                    "django.http.HttpRequest",
                    "Sequence[int]"
                ],
                "add_detection_annotation": [
                    "ajapaik.ajapaik_object_recognition.domain.add_detection_annotation.AddDetectionAnnotation"
                ],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "save_new_object_annotation": {
            "name": "save_new_object_annotation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "add_detection_annotation": [
                    "ajapaik.ajapaik_object_recognition.domain.add_detection_annotation.AddDetectionAnnotation"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/object_annotation_common_service.py": {
        "get_saved_label": {
            "name": "get_saved_label",
            "location": 6,
            "return": [
                "str",
                "ObjectAnnotationClass",
                "list[]",
                "typing.OrderedDict",
                "dict[str, dict[str, str]]",
                "dict[str, str]",
                "list[typing.Optional[str]]",
                "None"
            ],
            "arguments": {
                "label_wiki_data_id": [
                    "str",
                    "int",
                    "clients.models.Client"
                ]
            }
        },
        "__get_saved_label": {
            "name": "__get_saved_label",
            "location": 24,
            "return": [
                "None",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "label_wiki_data_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/object_annotation_delete_service.py": {
        "remove_annotation": {
            "name": "remove_annotation",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation_remove_request": [
                    "ajapaik.ajapaik_object_recognition.domain.annotation_remove_request.AnnotationRemove"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/object_annotation_get_service.py": {
        "get_object_annotation_classes": {
            "name": "get_object_annotation_classes",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_all_annotations": {
            "name": "get_all_annotations",
            "location": 14,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ],
                "photo_id": [
                    "str"
                ]
            }
        },
        "map_object_rectangle_to_rectangle": {
            "name": "map_object_rectangle_to_rectangle",
            "location": 53,
            "return": [
                "ajapaik.ajapaik_object_recognition.domain.detection_rectangle.DetectionRectangle"
            ],
            "arguments": {
                "object_annotation": [
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "map_face_rectangle_to_rectangle": {
            "name": "map_face_rectangle_to_rectangle",
            "location": 89,
            "return": [
                "ajapaik.ajapaik_object_recognition.domain.detection_rectangle.DetectionRectangle"
            ],
            "arguments": {
                "face_annotation": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "map_person_album_to_rectangle": {
            "name": "map_person_album_to_rectangle",
            "location": 145,
            "return": [
                "ajapaik.ajapaik_object_recognition.domain.detection_rectangle.DetectionRectangle"
            ],
            "arguments": {
                "albumphoto": [
                    "ajapaik.ajapaik.models.AlbumPhoto"
                ],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/object_annotation_modify_service.py": {
        "update_object_annotation": {
            "name": "update_object_annotation",
            "location": 7,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "request": [
                    "ajapaik.ajapaik_object_recognition.domain.object_annotation_update_request.ObjectAnnotationUpdateRequest"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_annotation/__init__.py": {},
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_feedback/object_annotation_feedback_service.py": {
        "set_feedback": {
            "name": "set_feedback",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "feedback": [
                    "ajapaik.ajapaik_object_recognition.models.ObjectAnnotationFeedback"
                ],
                "request": [
                    "ajapaik.ajapaik_object_recognition.domain.add_object_detection_feedback.AddObjectDetectionFeedback"
                ],
                "user": [
                    "ajapaik.ajapaik.models.Profile"
                ],
                "annotation": [
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "add_feedback": {
            "name": "add_feedback",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "ajapaik.ajapaik_object_recognition.domain.add_object_detection_feedback.AddObjectDetectionFeedback"
                ]
            }
        },
        "get_existing_feedback": {
            "name": "get_existing_feedback",
            "location": 43,
            "return": [
                "None",
                "zerver.models.Realm",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "annotation": [
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "user": [
                    "ajapaik.ajapaik.models.Profile"
                ]
            }
        },
        "remove_feedback": {
            "name": "remove_feedback",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "remove_object_annotation_feedback": [
                    "ajapaik.ajapaik_object_recognition.domain.remove_object_annotation_feedback.RemoveObjectAnnotationFeedback"
                ]
            }
        }
    },
    "ajapaik-web-master/ajapaik/ajapaik_object_recognition/service/object_feedback/__init__.py": {},
    "ajapaik-web-master/ajapaik/settings/default.py": {},
    "ajapaik-web-master/ajapaik/settings/test.py": {},
    "ajapaik-web-master/ajapaik/settings/__init__.py": {},
    "ajapaik-web-master/ajapaik/tests/test_utils.py": {
        "test_get_etag": {
            "name": "test_get_etag",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_modified": {
            "name": "test_last_modified",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_least_frequent": {
            "name": "test_least_frequent",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_most_frequent": {
            "name": "test_most_frequent",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_thumbnail_size": {
            "name": "test_calculate_thumbnail_size",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_thumbnail_size_max_height": {
            "name": "test_calculate_thumbnail_size_max_height",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_to_degrees": {
            "name": "test_convert_to_degrees",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_angle_diff": {
            "name": "test_angle_diff",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_average_angle": {
            "name": "test_average_angle",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distance_in_meters": {
            "name": "test_distance_in_meters",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_action_be_done": {
            "name": "test_can_action_be_done",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "ajapaik-web-master/ajapaik/tests/__init__.py": {}
}
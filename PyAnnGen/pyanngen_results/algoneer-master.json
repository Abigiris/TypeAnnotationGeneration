{
    "algoneer-master/req.py": {},
    "algoneer-master/setup.py": {},
    "algoneer-master/algoneer/algorithm_test.py": {},
    "algoneer-master/algoneer/dataset_model_test.py": {
        "DatasetModelTest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelTest.run": {
            "name": "run",
            "location": 16,
            "return": [
                "algoneer.result.DatasetModelResult",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "bool",
                    "Exception",
                    "str",
                    "int",
                    "List",
                    "None",
                    "Optional[int]"
                ],
                "model": [
                    "bool",
                    "Exception",
                    "str",
                    "int",
                    "List",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "DatasetModelTest.log": {
            "name": "log",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str",
                    "Callable[int,int]",
                    "List[str]",
                    "Callable[[int],int]",
                    "bool"
                ],
                "message": [
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataset_test.py": {},
    "algoneer-master/algoneer/object.py": {
        "Object.dump": {
            "name": "dump",
            "location": 7,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.load": {
            "name": "load",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/project.py": {
        "Project.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Project.path": {
            "name": "path",
            "location": 12,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.load": {
            "name": "load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/__init__.py": {},
    "algoneer-master/algoneer/algorithm/algorithm.py": {
        "Algorithm.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "bool",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "config.Project"
                ],
                "schema": [
                    "bool",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "config.Project"
                ]
            }
        },
        "Algorithm.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Dict",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "Algorithm.load": {
            "name": "load",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Algorithm.dump": {
            "name": "dump",
            "location": 30,
            "return": [
                "Dict[Text,]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.project": {
            "name": "project",
            "location": 34,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.name": {
            "name": "name",
            "location": 38,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.data": {
            "name": "data",
            "location": 43,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.schema": {
            "name": "schema",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Algorithm.algorithm_schema": {
            "name": "algorithm_schema",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.fit": {
            "name": "fit",
            "location": 59,
            "return": [
                "algoneer.model.Model",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AlgorithmAlgorithmSchema.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "float",
                    "bool"
                ],
                "schema": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AlgorithmAlgorithmSchema.dump": {
            "name": "dump",
            "location": 68,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmAlgorithmSchema.load": {
            "name": "load",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/algorithm/sklearn.py": {
        "SklearnAlgorithm.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "Dict",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "estimator_class": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "SklearnAlgorithm.name": {
            "name": "name",
            "location": 44,
            "return": [
                "rflx.model.Message",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SklearnAlgorithm.data": {
            "name": "data",
            "location": 48,
            "return": [
                "Dict[Text,dict[Text,]]",
                "str",
                "Union[AbstractSetIntStr,MappingIntStrAny]",
                "bool",
                "Parameters"
            ],
            "arguments": {
                "self": []
            }
        },
        "SklearnAlgorithm.fit": {
            "name": "fit",
            "location": 58,
            "return": [
                "SklearnModel",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/algorithm/__init__.py": {},
    "algoneer-master/algoneer/algorithmschema/algorithmschema.py": {
        "AlgorithmSchema.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int",
                    "MutableMapping",
                    "MutableMapping[str,str]",
                    "str",
                    "List[dict]",
                    "Callable",
                    "List[Dict]",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]"
                ],
                "config": [
                    "Optional[str]",
                    "None",
                    "Dict",
                    "Callable",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Type[Exception]]",
                    "Type",
                    "Union[str,None]"
                ]
            }
        },
        "AlgorithmSchema.config": {
            "name": "config",
            "location": 28,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.type": {
            "name": "type",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.dump": {
            "name": "dump",
            "location": 35,
            "return": [
                "Dict[Text,dict[Text,]]",
                "Callable[[Mapping],Awaitable]",
                "Callable[,Awaitable[Mapping]]",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.load": {
            "name": "load",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/algorithmschema/__init__.py": {},
    "algoneer-master/algoneer/api/algorithm.py": {
        "Algorithm.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.dependants": {
            "name": "dependants",
            "location": 16,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithms.url": {
            "name": "url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "List",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/algorithmschema.py": {
        "AlgorithmSchema.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.data": {
            "name": "data",
            "location": 16,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchemas.url": {
            "name": "url",
            "location": 23,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "bool",
                    "Type[T]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/algorithm_result.py": {
        "AlgorithmResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmResults.url": {
            "name": "url",
            "location": 19,
            "return": [
                "Text",
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/base_client.py": {
        "BaseClient.get": {
            "name": "get",
            "location": 8,
            "return": [
                "response.Response",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Mapping[str,str]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "BaseClient.post": {
            "name": "post",
            "location": 12,
            "return": [
                "response.Response",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "BaseClient.patch": {
            "name": "patch",
            "location": 16,
            "return": [
                "response.Response",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Union[str,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BaseClient.delete": {
            "name": "delete",
            "location": 20,
            "return": [
                "response.Response",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "bool",
                    "int"
                ],
                "base_url": [
                    "str",
                    "Text"
                ],
                "version": [
                    "Text",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Client._parse_response": {
            "name": "_parse_response",
            "location": 19,
            "return": [
                "Response",
                "bool",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "flask.Response",
                    "requests.Response",
                    "Dict[str, Any]"
                ]
            }
        },
        "Client._request": {
            "name": "_request",
            "location": 28,
            "return": [
                "Response",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[Any,str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "url": [
                    "str",
                    "Dict[Any,str]"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 36,
            "return": [
                "str",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Union[str,int]]"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 39,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Client.patch": {
            "name": "patch",
            "location": 42,
            "return": [
                "Optional[bool]",
                "List[dict]",
                "Dict[str, object]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "bool",
                "dict",
                "Optional[int]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/datapoint.py": {
        "Datapoint.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoints.url": {
            "name": "url",
            "location": 19,
            "return": [
                "Text",
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/datapoint_model_result.py": {
        "DatapointModelResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "float",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatapointModelResults.url": {
            "name": "url",
            "location": 19,
            "return": [
                "Text",
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/dataschema.py": {
        "DataSchema.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.data": {
            "name": "data",
            "location": 16,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchemas.url": {
            "name": "url",
            "location": 23,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "bool",
                    "Type[T]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/dataset.py": {
        "Dataset.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.dependants": {
            "name": "dependants",
            "location": 16,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasets.url": {
            "name": "url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "List",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/dataset_model_result.py": {
        "DatasetModelResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "float",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.data": {
            "name": "data",
            "location": 16,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResults.url": {
            "name": "url",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/dataset_result.py": {
        "DatasetResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetResults.url": {
            "name": "url",
            "location": 19,
            "return": [
                "Text",
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/manager.py": {
        "get_manager_for": {
            "name": "get_manager_for",
            "location": 89,
            "return": [
                "None",
                "Sequence",
                "Type",
                "Mapping",
                "Optional[Callable[[dict],None]]",
                "bool",
                "Callable[[KT],VT]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Dict",
                    "T"
                ]
            }
        },
        "Encoder.default": {
            "name": "default",
            "location": 16,
            "return": [
                "int",
                "List[int]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "float",
                    "None",
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "ManagerMeta.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[TypeResourceIdentifier]",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ],
                "bases": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ],
                "namespace": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ]
            }
        },
        "Manager.url": {
            "name": "url",
            "location": 42,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "magic.abc.CardDescription",
                    "Dict"
                ]
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "Manager.save": {
            "name": "save",
            "location": 51,
            "return": [
                "Union[Dict, List]",
                "List[dict]",
                "List[List[int]]",
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "Manager._create": {
            "name": "_create",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "Manager._update": {
            "name": "_update",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "Dict",
                    "str",
                    "None"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/model.py": {
        "Model.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Models.url": {
            "name": "url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "T"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/model_result.py": {
        "ModelResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [
                "List",
                "str",
                "float",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelResults.url": {
            "name": "url",
            "location": 19,
            "return": [
                "Text",
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/object.py": {
        "get_class_for": {
            "name": "get_class_for",
            "location": 78,
            "return": [
                "None",
                "str",
                "Iterable[str]",
                "Optional[Iterable]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Callable[[T],Optional[T]]",
                    "Type",
                    "Callable[T,Union[T,None]]",
                    "Union[str,Pattern[str]]",
                    "str",
                    "Pattern"
                ]
            }
        },
        "ObjectMeta.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[TypeResourceIdentifier]",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ],
                "bases": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ],
                "namespace": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ]
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapped_obj": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ],
                "session": [
                    "int",
                    "str",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "Object.mapped_obj": {
            "name": "mapped_obj",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.session": {
            "name": "session",
            "location": 39,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.dependencies": {
            "name": "dependencies",
            "location": 43,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.dependants": {
            "name": "dependants",
            "location": 47,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.data": {
            "name": "data",
            "location": 51,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.api_data": {
            "name": "api_data",
            "location": 59,
            "return": [
                "None",
                "Dict",
                "Dict[str,Union[int,str]]",
                "Dict[str,str]",
                "Dict[int,list[str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "api_data": [
                    "bytes",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "Object.id": {
            "name": "id",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/project.py": {
        "Projects.url": {
            "name": "url",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "data": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "error": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/session.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "bool"
                ],
                "exclude_classes": [
                    "List[Text]",
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Session.client": {
            "name": "client",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.get_saved": {
            "name": "get_saved",
            "location": 21,
            "return": [
                "float",
                "Dict",
                "bool",
                "Dict[str,int]",
                "str",
                "Literal",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "Session.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "check_saved": [
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[[Dict],bool]]",
                    "Dict",
                    "str"
                ]
            }
        },
        "Session.add": {
            "name": "add",
            "location": 32,
            "return": [
                "bytes",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "Session.__getitem__": {
            "name": "__getitem__",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "int",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "Session.sync": {
            "name": "sync",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__contains__": {
            "name": "__contains__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Session.sync.add_obj": {
            "name": "add_obj",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "List[Mapping[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/__init__.py": {},
    "algoneer-master/algoneer/cli/main.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algoneer-master/algoneer/cli/__init__.py": {},
    "algoneer-master/algoneer/dataschema/attributeschema.py": {
        "AttributeSchema.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "roles": [
                    "int",
                    "str",
                    "bool"
                ],
                "type": [
                    "int",
                    "str",
                    "bool"
                ],
                "ds": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "str"
                ],
                "column": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "config": [
                    "Optional[str]",
                    "None",
                    "Dict",
                    "Union[str,None]",
                    "bool",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]",
                    "Optional[Type[Exception]]",
                    "Type"
                ]
            }
        },
        "AttributeSchema.dataschema": {
            "name": "dataschema",
            "location": 42,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "AttributeSchema.config": {
            "name": "config",
            "location": 46,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.type": {
            "name": "type",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.roles": {
            "name": "roles",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.column": {
            "name": "column",
            "location": 58,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.copy": {
            "name": "copy",
            "location": 61,
            "return": [
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.dump": {
            "name": "dump",
            "location": 70,
            "return": [
                "Dict[Text,]",
                "Type",
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.load": {
            "name": "load",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "AttributeSchema.enforce": {
            "name": "enforce",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "List[str]",
                    "Callable",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataschema/dataschema.py": {
        "parse_attributes": {
            "name": "parse_attributes",
            "location": 67,
            "return": [
                "OrderedDict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ds": [
                    "str",
                    "Dict",
                    "Union[None,str]",
                    "None"
                ],
                "schema": [
                    "Dict",
                    "Callable[,None]",
                    "Dict[str,Any]",
                    "Type",
                    "str"
                ]
            }
        },
        "DataSchemaMeta.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ],
                "bases": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[InstrumentBase]",
                    "None"
                ],
                "namespace": [
                    "Dict[str,Any]",
                    "Dict[Hashable,Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DataSchema.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "attributes": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "DataSchema.enforce": {
            "name": "enforce",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "DataSchema.attributes": {
            "name": "attributes",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "DataSchema.copy": {
            "name": "copy",
            "location": 49,
            "return": [
                "Type[Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "Callable[...,None]",
                    "str",
                    "None"
                ]
            }
        },
        "DataSchema.dump": {
            "name": "dump",
            "location": 57,
            "return": [
                "Dict[Text,dict[Text,list]]",
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.load": {
            "name": "load",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataschema/__init__.py": {},
    "algoneer-master/algoneer/dataset/attribute.py": {
        "Attribute.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "Tuple",
                    "Union[str,float]",
                    "str"
                ],
                "column": [
                    "int",
                    "float",
                    "Tuple",
                    "Union[str,float]",
                    "str"
                ],
                "schema": [
                    "int",
                    "float",
                    "Tuple",
                    "Union[str,float]",
                    "str"
                ]
            }
        },
        "Attribute.__getattr__": {
            "name": "__getattr__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Callable",
                    "Callable[...,Awaitable[None]]",
                    "int",
                    "Type"
                ]
            }
        },
        "Attribute.column": {
            "name": "column",
            "location": 31,
            "return": [
                "None",
                "List[str]",
                "int",
                "List[None]",
                "List"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Attribute.roles": {
            "name": "roles",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.schema": {
            "name": "schema",
            "location": 43,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Attribute.dataset": {
            "name": "dataset",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.sum": {
            "name": "sum",
            "location": 55,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.mean": {
            "name": "mean",
            "location": 59,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.min": {
            "name": "min",
            "location": 63,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.max": {
            "name": "max",
            "location": 67,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataset/datapoint.py": {
        "Datapoint.dump": {
            "name": "dump",
            "location": 13,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.load": {
            "name": "load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Datapoint.dataset": {
            "name": "dataset",
            "location": 21,
            "return": [
                "algoneer.Dataset",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.copy": {
            "name": "copy",
            "location": 25,
            "return": [
                "Datapoint",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.hash": {
            "name": "hash",
            "location": 29,
            "return": [
                "Optional[bytes]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.index": {
            "name": "index",
            "location": 34,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.data": {
            "name": "data",
            "location": 39,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer/dataset/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "float",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Dict",
                    "int",
                    "bool",
                    "None"
                ],
                "schema": [
                    "str",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "name": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Dataset.dump": {
            "name": "dump",
            "location": 26,
            "return": [
                "Dict[Text,int]",
                "Iterable[str]",
                "Dict",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.load": {
            "name": "load",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Dataset.project": {
            "name": "project",
            "location": 33,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.roles": {
            "name": "roles",
            "location": 37,
            "return": [
                "Roles",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.name": {
            "name": "name",
            "location": 41,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.hash": {
            "name": "hash",
            "location": 45,
            "return": [
                "Optional[bytes]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.datapoint": {
            "name": "datapoint",
            "location": 49,
            "return": [
                "datapoint.Datapoint",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Dataset.columns": {
            "name": "columns",
            "location": 53,
            "return": [
                "Iterable[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.attributes": {
            "name": "attributes",
            "location": 57,
            "return": [
                "Mapping[str,attribute.Attribute]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.dataschema": {
            "name": "dataschema",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.schema": {
            "name": "schema",
            "location": 69,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Dataset.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [
                "Union[Dataset,attribute.Attribute]",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Set[Object]",
                    "int",
                    "List[str]",
                    "T",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "Dataset.__setitem__": {
            "name": "__setitem__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List",
                    "List[list]",
                    "bool",
                    "int"
                ],
                "value": [
                    "str",
                    "List",
                    "List[list]",
                    "bool",
                    "int"
                ]
            }
        },
        "Dataset.__delitem__": {
            "name": "__delitem__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Set[Object]",
                    "int",
                    "List[str]",
                    "T",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "Dataset.__iter__": {
            "name": "__iter__",
            "location": 85,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 89,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__sub__": {
            "name": "__sub__",
            "location": 93,
            "return": [
                "Dataset",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Dataset.__add__": {
            "name": "__add__",
            "location": 97,
            "return": [
                "Dataset",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "Dataset.copy": {
            "name": "copy",
            "location": 101,
            "return": [
                "Dataset",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.shape": {
            "name": "shape",
            "location": 105,
            "return": [
                "Tuple",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.select": {
            "name": "select",
            "location": 109,
            "return": [
                "Dataset",
                "None"
            ],
            "arguments": {
                "self": [],
                "indexes": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Dataset.sum": {
            "name": "sum",
            "location": 113,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.mean": {
            "name": "mean",
            "location": 117,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.order_by": {
            "name": "order_by",
            "location": 121,
            "return": [
                "Dataset",
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "DatasetDataSchema.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "bool"
                ],
                "schema": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DatasetDataSchema.dump": {
            "name": "dump",
            "location": 130,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDataSchema.load": {
            "name": "load",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataset/pandas.py": {
        "proxy": {
            "name": "proxy",
            "location": 29,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Optional[List[Any]]",
                    "List[Any]",
                    "bool",
                    "List[List[str]]",
                    "None",
                    "List[list[str]]"
                ],
                "bound": [
                    "bool",
                    "Optional[List[Any]]",
                    "List[List[str]]"
                ],
                "ds": [
                    "Optional[List[Any]]",
                    "None",
                    "bool",
                    "List[List[str]]",
                    "List[Any]",
                    "List[list[str]]"
                ]
            }
        },
        "proxy.convert": {
            "name": "convert",
            "location": 33,
            "return": [
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "PandasDatapoint.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "bool"
                ],
                "index": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PandasDatapoint.dataset": {
            "name": "dataset",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.index": {
            "name": "index",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.data": {
            "name": "data",
            "location": 99,
            "return": [
                "dict",
                "str",
                "pandas._ArrayLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.hash": {
            "name": "hash",
            "location": 105,
            "return": [
                "bytes",
                "dict",
                "int",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.copy": {
            "name": "copy",
            "location": 108,
            "return": [
                "PandasDatapoint",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "raiden.utils.ChannelID",
                    "str",
                    "Dict[int,dict]",
                    "None",
                    "Optional[int]"
                ],
                "column": [
                    "int",
                    "raiden.utils.ChannelID",
                    "str",
                    "Dict[int,dict]",
                    "None",
                    "Optional[int]"
                ],
                "schema": [
                    "int",
                    "raiden.utils.ChannelID",
                    "str",
                    "Dict[int,dict]",
                    "None",
                    "Optional[int]"
                ],
                "series": [
                    "float",
                    "int"
                ]
            }
        },
        "PandasAttribute.series": {
            "name": "series",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.sum": {
            "name": "sum",
            "location": 130,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.mean": {
            "name": "mean",
            "location": 133,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.min": {
            "name": "min",
            "location": 136,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.max": {
            "name": "max",
            "location": 139,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.__getitem__": {
            "name": "__getitem__",
            "location": 143,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "raiden.utils.Dict",
                    "List[str]"
                ]
            }
        },
        "PandasAttribute.__setitem__": {
            "name": "__setitem__",
            "location": 147,
            "return": [
                "List[List[str]]",
                "int",
                "pandas.DataFrame",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List",
                    "Dict[str,Any]",
                    "None",
                    "Iterable",
                    "Optional[Iterable]",
                    "T"
                ],
                "value": [
                    "List",
                    "Dict[str,Any]",
                    "None",
                    "Iterable",
                    "Optional[Iterable]",
                    "T"
                ]
            }
        },
        "PandasAttribute.__delitem__": {
            "name": "__delitem__",
            "location": 151,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "raiden.utils.Dict",
                    "List[str]"
                ]
            }
        },
        "PandasAttribute.__len__": {
            "name": "__len__",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.__getattr__": {
            "name": "__getattr__",
            "location": 157,
            "return": [
                "int",
                "float",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PandasAttribute.astype": {
            "name": "astype",
            "location": 170,
            "return": [
                "PandasAttribute",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "None"
                ],
                "config": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "None"
                ]
            }
        },
        "PandasDataset.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "List[Project]",
                    "dbconfig.Project",
                    "Project",
                    "projects.project_models.Project"
                ],
                "schema": [
                    "config.Project",
                    "Project"
                ],
                "df": []
            }
        },
        "PandasDataset._generate_attributes": {
            "name": "_generate_attributes",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.datapoint": {
            "name": "datapoint",
            "location": 200,
            "return": [
                "PandasDatapoint",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PandasDataset.hash": {
            "name": "hash",
            "location": 204,
            "return": [
                "Dict[str, Any]",
                "str",
                "pandas.DataFrame",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.df": {
            "name": "df",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.__getitem__": {
            "name": "__getitem__",
            "location": 216,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Iterable[str]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "PandasDataset.__setitem__": {
            "name": "__setitem__",
            "location": 221,
            "return": [
                "List[List[str]]",
                "int",
                "pandas.DataFrame",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List",
                    "Dict[str,Any]",
                    "None",
                    "Iterable",
                    "Optional[Iterable]",
                    "T"
                ],
                "value": [
                    "List",
                    "Dict[str,Any]",
                    "None",
                    "Iterable",
                    "Optional[Iterable]",
                    "T"
                ]
            }
        },
        "PandasDataset.__delitem__": {
            "name": "__delitem__",
            "location": 225,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "raiden.utils.Dict",
                    "List[str]"
                ]
            }
        },
        "PandasDataset.__iter__": {
            "name": "__iter__",
            "location": 228,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.__len__": {
            "name": "__len__",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.__getattr__": {
            "name": "__getattr__",
            "location": 234,
            "return": [
                "int",
                "float",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PandasDataset.columns": {
            "name": "columns",
            "location": 248,
            "return": [
                "int",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.attributes": {
            "name": "attributes",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.shape": {
            "name": "shape",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.sum": {
            "name": "sum",
            "location": 259,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.mean": {
            "name": "mean",
            "location": 262,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.select": {
            "name": "select",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "indexes": [
                    "int",
                    "Callable",
                    "str"
                ],
                "copy": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PandasDataset.copy": {
            "name": "copy",
            "location": 274,
            "return": [
                "PandasDataset",
                "Dict",
                "Dict[str,bool]",
                "Union[Dict,str]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.astype": {
            "name": "astype",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Iterable[Type]",
                    "Sequence[str]",
                    "Type",
                    "str"
                ]
            }
        },
        "PandasDataset.from_dataset": {
            "name": "from_dataset",
            "location": 290,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "PandasDataset.from_path": {
            "name": "from_path",
            "location": 297,
            "return": [
                "PandasDataset",
                "str",
                "Dict"
            ],
            "arguments": {
                "project": [
                    "str",
                    "int"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "PandasDataset.__sub__": {
            "name": "__sub__",
            "location": 322,
            "return": [
                "PandasDataset",
                "Dict",
                "Dict[str,bool]",
                "Union[Dict,str]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "PandasDataset.__add__": {
            "name": "__add__",
            "location": 327,
            "return": [
                "PandasDataset",
                "Exception",
                "Dict",
                "str",
                "Union[Dict,str]",
                "int",
                "Dict[str,bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str,Date]"
                ]
            }
        },
        "PandasDataset.order_by": {
            "name": "order_by",
            "location": 333,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "proxy.convert.wrap": {
            "name": "wrap",
            "location": 47,
            "return": [
                "PandasDataset",
                "str",
                "Type",
                "PandasAttribute",
                "pd_@_Series",
                "Dict",
                "pd_@_DataFrame",
                "List[Callable]"
            ],
            "arguments": {
                "v": [
                    "List[int]",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "str",
                    "T",
                    "int",
                    "Dict[str, Any]"
                ],
                "ds": [
                    "Optional",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "proxy.convert.conv": {
            "name": "conv",
            "location": 59,
            "return": [
                "PandasDataset",
                "int",
                "PandasAttribute",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataset/roles.py": {
        "Roles.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "bool"
                ]
            }
        },
        "Roles.__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [
                "List[int]",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/dataset/__init__.py": {},
    "algoneer-master/algoneer/methods/__init__.py": {},
    "algoneer-master/algoneer/methods/blackbox/adversarial.py": {},
    "algoneer-master/algoneer/methods/blackbox/ale.py": {
        "ALEResult.name": {
            "name": "name",
            "location": 20,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALEResult.version": {
            "name": "version",
            "location": 24,
            "return": [
                "Text",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALE.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALE.run": {
            "name": "run",
            "location": 37,
            "return": [
                "DatasetModelResult",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "logging.LogRecord",
                    "bool"
                ],
                "model": [
                    "Dict[str,Any]",
                    "int",
                    "Dict",
                    "SmartContractModel"
                ]
            }
        },
        "ALE.run.ALE": {
            "name": "ALE",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ds": [
                    "bool",
                    "Union[int, float]",
                    "Optional[str]",
                    "Mapping[str, float]"
                ],
                "model": [
                    "pystork.model.Model",
                    "bool",
                    "models.Model"
                ],
                "column": [
                    "int",
                    "List[Optional['Cell']]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/counterfactual.py": {},
    "algoneer-master/algoneer/methods/blackbox/pdp.py": {
        "PDPResult.name": {
            "name": "name",
            "location": 20,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDPResult.version": {
            "name": "version",
            "location": 24,
            "return": [
                "Text",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDP.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDP.run": {
            "name": "run",
            "location": 37,
            "return": [
                "bool",
                "Callable[[], str]",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "Type[BaseException]"
                ],
                "model": [
                    "int",
                    "str",
                    "allennlp.models.model.Model"
                ]
            }
        },
        "PDP.run.pdp": {
            "name": "pdp",
            "location": 81,
            "return": [
                "List[tuple[float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ds": [
                    "bool",
                    "Union[int, float]",
                    "Optional[str]",
                    "Mapping[str, float]"
                ],
                "model": [
                    "str",
                    "int"
                ],
                "column": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "PDP.run.pdp_correlated": {
            "name": "pdp_correlated",
            "location": 106,
            "return": [
                "List[tuple[float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ds": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "model": [
                    "pystork.model.Model",
                    "int",
                    "Optional[Union[bool, int]]"
                ],
                "column_a": [
                    "int",
                    "str",
                    "Iterable[Any]",
                    "list"
                ],
                "column_b": [
                    "List[int]",
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/predictions.py": {
        "PredictionsDatapointResult.name": {
            "name": "name",
            "location": 16,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionsDatapointResult.version": {
            "name": "version",
            "location": 20,
            "return": [
                "Text",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionsResult.name": {
            "name": "name",
            "location": 26,
            "return": [
                "Optional[str]",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionsResult.version": {
            "name": "version",
            "location": 30,
            "return": [
                "Text",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Predictions.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Predictions.run": {
            "name": "run",
            "location": 43,
            "return": [
                "DatasetModelResult",
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "models.Model",
                    "xarray.Dataset"
                ],
                "model": [
                    "int",
                    "Callable[[str], str]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/__init__.py": {},
    "algoneer-master/algoneer/methods/blackbox/shap/force.py": {
        "force_plot": {
            "name": "force_plot",
            "location": 39,
            "return": [
                "Optional[int]",
                "int",
                "Dict[str, int]",
                "str",
                "float",
                "Generator"
            ],
            "arguments": {
                "base_value": [
                    "bool",
                    "int",
                    "list",
                    "List[str]",
                    "dict"
                ],
                "shap_values": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "List[List[Any]]",
                    "List[dict]"
                ],
                "features": [
                    "None",
                    "bool",
                    "List[int]",
                    "int"
                ],
                "feature_names": [
                    "None",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict",
                    "Optional[Any]",
                    "Optional[List[Any]]",
                    "Optional[Union[float,str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "out_names": [
                    "None",
                    "Optional[str]",
                    "Union[str,bool,None]",
                    "str",
                    "Optional[List[str]]"
                ],
                "link": [
                    "Text",
                    "Collection[int]",
                    "Union[float,int]",
                    "Union[str,bool]",
                    "Tuple[int,int]"
                ],
                "plot_cmap": [
                    "Text",
                    "str",
                    "Callable[...,T]",
                    "List[float]",
                    "Exception"
                ],
                "show": [
                    "bool",
                    "str",
                    "List[float]",
                    "List[str]",
                    "List",
                    "TextIO"
                ],
                "figsize": [
                    "Tuple[int]",
                    "str",
                    "List[float]",
                    "List[str]",
                    "List",
                    "TextIO"
                ],
                "ordering_keys": [
                    "None",
                    "str",
                    "bytes",
                    "Set",
                    "bool",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "ordering_keys_time_format": [
                    "None",
                    "str",
                    "bytes",
                    "Set",
                    "bool",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "text_rotation": [
                    "int",
                    "str",
                    "Callable[...,T]",
                    "List[float]",
                    "Exception"
                ]
            }
        },
        "ensure_not_numpy": {
            "name": "ensure_not_numpy",
            "location": 222,
            "return": [
                "str",
                "float",
                "Iterable[numpy.dtype]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "verify_valid_cmap": {
            "name": "verify_valid_cmap",
            "location": 233,
            "return": [
                "List",
                "int",
                "str",
                "Dict[str,str]",
                "bytes",
                "Sequence[Tuple[float,float]]"
            ],
            "arguments": {
                "cmap": [
                    "str"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 248,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "e": [
                    "gluonts.model.common.Tensor",
                    "str"
                ],
                "plot_cmap": [
                    "Text",
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "figsize": [
                    "Tuple[int]",
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "Dict",
                    "Callable"
                ],
                "show": [
                    "bool",
                    "str",
                    "numpy.ndarray",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "Dict",
                    "Callable"
                ],
                "ordering_keys": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "List"
                ],
                "ordering_keys_time_format": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "List"
                ],
                "text_rotation": [
                    "int",
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "Union[str,bytes]",
                    "Optional[str]",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "Explanation.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdditiveExplanation.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_value": [
                    "bytes",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "TextIO",
                    "Callable"
                ],
                "out_value": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "effects": [
                    "Callable",
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "Optional[str]"
                ],
                "effects_var": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "instance": [
                    "Callable",
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "Optional[str]"
                ],
                "link": [
                    "Callable",
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "Optional[str]"
                ],
                "model": [
                    "Optional[float]",
                    "bool",
                    "int"
                ],
                "data": [
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "Any",
                    "Optional[Dict]"
                ]
            }
        },
        "try_list_display": {
            "name": "try_list_display",
            "location": 284,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "e": [
                    "Optional[List[str]]",
                    "callable"
                ]
            }
        },
        "SimpleListVisualizer.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int",
                    "text_recognizer.models.base.Model",
                    "List[int]",
                    "tensorflow.python.keras.models.Model",
                    "str",
                    "numpy.array",
                    "Optional[int]"
                ]
            }
        },
        "AdditiveForceVisualizer.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable",
                    "int",
                    "List[str]",
                    "bool",
                    "Tuple[int]",
                    "List[float]"
                ],
                "plot_cmap": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "Optional[bool]"
                ]
            }
        },
        "AdditiveForceArrayVisualizer.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "str",
                    "Callable",
                    "list",
                    "bool"
                ],
                "plot_cmap": [
                    "str",
                    "Text"
                ],
                "ordering_keys": [
                    "str"
                ],
                "ordering_keys_time_format": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/shap/labels.py": {},
    "algoneer-master/algoneer/methods/blackbox/shap/shap.py": {
        "SHAPDatapointResult.name": {
            "name": "name",
            "location": 12,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHAPDatapointResult.version": {
            "name": "version",
            "location": 16,
            "return": [
                "Text",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHAPModelResult.name": {
            "name": "name",
            "location": 22,
            "return": [
                "Text",
                "numpy.ndarray",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHAPModelResult.version": {
            "name": "version",
            "location": 26,
            "return": [
                "Text",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHAP.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHAP.run": {
            "name": "run",
            "location": 39,
            "return": [
                "DatasetModelResult",
                "bool",
                "Optional[Dict[str,Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "Tuple[cirq.Qid]"
                ],
                "model": [
                    "Dict"
                ]
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/shap/__init__.py": {},
    "algoneer-master/algoneer/methods/dataset/anomalies.py": {},
    "algoneer-master/algoneer/methods/dataset/correlations.py": {},
    "algoneer-master/algoneer/methods/dataset/coverage.py": {},
    "algoneer-master/algoneer/methods/dataset/distribution.py": {},
    "algoneer-master/algoneer/methods/dataset/survey.py": {},
    "algoneer-master/algoneer/methods/dataset/__init__.py": {},
    "algoneer-master/algoneer/model/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "float",
                    "bool"
                ],
                "dataset": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Model.dump": {
            "name": "dump",
            "location": 17,
            "return": [
                "Dict[Text,]",
                "raiden.utils.signer.Signer",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.load": {
            "name": "load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Model.data": {
            "name": "data",
            "location": 24,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.hash": {
            "name": "hash",
            "location": 28,
            "return": [
                "bytes",
                "dict",
                "int",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 32,
            "return": [
                "algoneer.dataset.Dataset",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Model.dataset": {
            "name": "dataset",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.algorithm": {
            "name": "algorithm",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer/model/sklearn.py": {
        "SklearnModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "dataset": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "estimator": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SklearnModel._predict_raw": {
            "name": "_predict_raw",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SklearnModel.data": {
            "name": "data",
            "location": 34,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "bytes",
                "pandas.DataFrame",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "SklearnModel.predict": {
            "name": "predict",
            "location": 37,
            "return": [
                "PandasDataset",
                "List[int]",
                "Iterable[T]",
                "sklearn.base.BaseEstimator",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "float"
                ]
            }
        }
    },
    "algoneer-master/algoneer/model/__init__.py": {},
    "algoneer-master/algoneer/result/algorithm_result.py": {
        "AlgorithmResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "float",
                    "Callable",
                    "Union[str,float]",
                    "str"
                ],
                "result": [
                    "str",
                    "Callable[...,collections.abc.Awaitable]",
                    "bool",
                    "Callable[...,Awaitable]",
                    "Sequence[str]",
                    "Dict",
                    "Union[str,dict]",
                    "int"
                ]
            }
        },
        "AlgorithmResult.dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmResult.load": {
            "name": "load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/datapoint_model_result.py": {
        "DatapointModelResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datapoint": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "model": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "result": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DatapointModelResult.dump": {
            "name": "dump",
            "location": 16,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatapointModelResult.load": {
            "name": "load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/dataset_model_result.py": {
        "DatasetModelResult.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "bool",
                    "List[cirq.Circuit]",
                    "Dict",
                    "int",
                    "None",
                    "Optional[dict]",
                    "Optional[GraphLogger]"
                ],
                "model": [
                    "bool",
                    "List[cirq.Circuit]",
                    "Dict",
                    "int",
                    "None",
                    "Optional[dict]",
                    "Optional[GraphLogger]"
                ],
                "result": [
                    "str",
                    "bool"
                ],
                "datapoint_results": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Callable",
                    "Tuple",
                    "Exception"
                ]
            }
        },
        "DatasetModelResult.dataset": {
            "name": "dataset",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.model": {
            "name": "model",
            "location": 35,
            "return": [
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.dump": {
            "name": "dump",
            "location": 38,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.load": {
            "name": "load",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/dataset_result.py": {
        "DatasetResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "Callable",
                    "Union[str,float]",
                    "str"
                ],
                "result": [
                    "str",
                    "Callable[...,collections.abc.Awaitable]",
                    "bool",
                    "Callable[...,Awaitable]",
                    "Sequence[str]",
                    "Dict",
                    "Union[str,dict]",
                    "int"
                ]
            }
        },
        "DatasetResult.dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetResult.load": {
            "name": "load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/model_result.py": {
        "ModelResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "Dict"
                ],
                "result": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Callable[[Dict],bool]]",
                    "Callable[dict,bool]"
                ]
            }
        },
        "ModelResult.dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelResult.load": {
            "name": "load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/result.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "Result.dump": {
            "name": "dump",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.load": {
            "name": "load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Result.name": {
            "name": "name",
            "location": 20,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.version": {
            "name": "version",
            "location": 24,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.data": {
            "name": "data",
            "location": 28,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.format": {
            "name": "format",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List",
                    "None"
                ]
            }
        },
        "ResultProxy.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Counter",
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "ResultProxy.result": {
            "name": "result",
            "location": 40,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.name": {
            "name": "name",
            "location": 44,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.version": {
            "name": "version",
            "location": 48,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.data": {
            "name": "data",
            "location": 52,
            "return": [
                "float",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.format": {
            "name": "format",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/result_collection.py": {
        "ResultCollection.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResultCollection.collection": {
            "name": "collection",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultCollection.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "ResultCollection.__setitem__": {
            "name": "__setitem__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/__init__.py": {},
    "algoneer-master/algoneer/utils/conditional_import.py": {
        "CI.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "CI.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CI.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "algoneer-master/algoneer/utils/hashing.py": {
        "get_hash": {
            "name": "get_hash",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Callable",
                    "Type",
                    "Sequence"
                ],
                "fields": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Type",
                    "Callable"
                ],
                "exclude": [
                    "List",
                    "Optional[str]",
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "Hasher.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hasher.add": {
            "name": "add",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Hasher.digest": {
            "name": "digest",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_hash.add_to_hash": {
            "name": "add_to_hash",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/utils/__init__.py": {},
    "algoneer-master/algoneer_tests/__init__.py": {},
    "algoneer-master/algoneer_tests/api/test_api.py": {
        "TestClient.get": {
            "name": "get",
            "location": 21,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Mapping[str,str]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "TestClient.post": {
            "name": "post",
            "location": 24,
            "return": [
                "Response",
                "Dict",
                "int",
                "List[str]",
                "Optional[Dict[str,Any]]",
                "Dict[str,str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "TestClient.patch": {
            "name": "patch",
            "location": 29,
            "return": [
                "Response",
                "bytes",
                "Dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Union[str,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestClient.delete": {
            "name": "delete",
            "location": 32,
            "return": [
                "Response",
                "str",
                "int",
                "Dict[str,str]",
                "Exception",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "ApiTest.test_objects": {
            "name": "test_objects",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/api/__init__.py": {},
    "algoneer-master/algoneer_tests/dataschema/test_dataschema.py": {
        "test_dataschema": {
            "name": "test_dataschema",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algoneer-master/algoneer_tests/dataschema/__init__.py": {},
    "algoneer-master/algoneer_tests/datasets/test_pandas_datasets.py": {
        "PandasDatasetTest.test_sklean": {
            "name": "test_sklean",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/__init__.py": {},
    "algoneer-master/algoneer_tests/methods/blackbox/test_ale.py": {
        "TestALE.test_ale": {
            "name": "test_ale",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/test_pdp.py": {
        "TestPDP.test_pdp": {
            "name": "test_pdp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/test_predictions.py": {
        "TestPredictions.test_predictions": {
            "name": "test_predictions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/test_shap.py": {
        "SHAPTest.test_shap": {
            "name": "test_shap",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/__init__.py": {},
    "algoneer-master/algoneer_tests/models/test_sklearn_models.py": {
        "SklearnModelTest.test_sklean": {
            "name": "test_sklean",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/models/__init__.py": {},
    "algoneer-master/docs/source/conf.py": {}
}
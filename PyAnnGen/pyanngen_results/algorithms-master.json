{
    "algorithms-master/python/runtests.py": {},
    "algorithms-master/python/visualizer.py": {
        "parse_options": {
            "name": "parse_options",
            "location": 28,
            "return": [
                "Tuple[(optparse.Values, list)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-master/python/algo/expression_evaluation/dijkstra_two_stack.py": {
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "list[typing.Deque]",
                    "T",
                    "List[deque]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DijkstraTwoStackEvaluator._eval_parenthesis": {
            "name": "_eval_parenthesis",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DijkstraTwoStackEvaluator.eval": {
            "name": "eval",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        }
    },
    "algorithms-master/python/algo/misc/hanoi.py": {
        "solve_hanoi": {
            "name": "solve_hanoi",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tower.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tower.push": {
            "name": "push",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Tower.pop": {
            "name": "pop",
            "location": 18,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tower.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tower.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__getitem__": {
            "name": "__getitem__",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "State.print": {
            "name": "print",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "solve_hanoi.move_tower": {
            "name": "move_tower",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "disk": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "source": [
                    "List[dict]"
                ],
                "dest": [
                    "List[dict]"
                ],
                "spare": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "algorithms-master/python/algo/shuffling/fisher_yates.py": {
        "shuffle": {
            "name": "shuffle",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-master/python/algo/sorting/bubble_sort.py": {
        "bubble_sort": {
            "name": "bubble_sort",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-master/python/algo/sorting/insertion_sort.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-master/python/algo/sorting/merge_sort.py": {
        "_merge": {
            "name": "_merge",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [
                    "list"
                ],
                "lo": [
                    "int"
                ],
                "mid": [
                    "int"
                ],
                "hi": [
                    "int"
                ]
            }
        },
        "_sort": {
            "name": "_sort",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [
                    "list"
                ],
                "lo": [
                    "int"
                ],
                "hi": [
                    "int"
                ]
            }
        },
        "merge_sort": {
            "name": "merge_sort",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-master/python/algo/sorting/selection_sort.py": {
        "selection_sort": {
            "name": "selection_sort",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-master/python/datastruct/heap.py": {
        "BinaryHeap.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comparator": [
                    "Callable"
                ]
            }
        },
        "BinaryHeap.push": {
            "name": "push",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "list[typing.Deque]",
                    "T",
                    "List[deque]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "BinaryHeap.pop": {
            "name": "pop",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeap.peek": {
            "name": "peek",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeap._swim": {
            "name": "_swim",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeap._sink": {
            "name": "_sink",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "BinaryHeap._parent_index": {
            "name": "_parent_index",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "BinaryHeap._child_index": {
            "name": "_child_index",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "BinaryHeap.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/datastruct/linkedlist.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "nxt": [
                    "Node"
                ]
            }
        },
        "Node.value": {
            "name": "value",
            "location": 13,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.next": {
            "name": "next",
            "location": 21,
            "return": [
                "None",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "next_node": [
                    "dict"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "list"
                ]
            }
        },
        "LinkedList.is_empty": {
            "name": "is_empty",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.append": {
            "name": "append",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "list[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool, Any]",
                    "typing.Any"
                ]
            }
        },
        "LinkedList.prepend": {
            "name": "prepend",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "LinkedList._append": {
            "name": "_append",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Union[bytes, str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 69,
            "return": [
                "LinkedList"
            ],
            "arguments": {
                "self": [
                    "_TLinkedList"
                ]
            }
        },
        "LinkedList.__next__": {
            "name": "__next__",
            "location": 73,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/datastruct/trie.py": {
        "TrieNode.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ],
                "is_word": [
                    "bool"
                ]
            }
        },
        "TrieNode.child": {
            "name": "child",
            "location": 11,
            "return": [
                "rieNode"
            ],
            "arguments": {
                "self": [
                    "_TTrieNode"
                ],
                "char": [
                    "str"
                ]
            }
        },
        "TrieNode.add_child": {
            "name": "add_child",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "TrieNode.is_word": {
            "name": "is_word",
            "location": 24,
            "return": [
                "None",
                "bool",
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "truth": [
                    "str",
                    "int"
                ]
            }
        },
        "Trie.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trie.contains": {
            "name": "contains",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Trie.add": {
            "name": "add",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        }
    },
    "algorithms-master/python/datastruct/__init__.py": {},
    "algorithms-master/python/test/__init__.py": {},
    "algorithms-master/python/test/algo/abc_sort.py": {
        "BaseSortTest._sort": {
            "name": "_sort",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "list"
                ]
            }
        },
        "BaseSortTest.test_correctness_against_python_impl": {
            "name": "test_correctness_against_python_impl",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BaseSortTest.test_correctness_against_python_impl_large_list": {
            "name": "test_correctness_against_python_impl_large_list",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/test/algo/__init__.py": {},
    "algorithms-master/python/test/algo/expression_evaluation/test_dijkstra_two_stack.py": {
        "DijkstraTwoStackTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DijkstraTwoStackTest.test_expr_1": {
            "name": "test_expr_1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DijkstraTwoStackTest.test_expr_2": {
            "name": "test_expr_2",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/test/algo/expression_evaluation/__init__.py": {},
    "algorithms-master/python/test/algo/shuffling/test_fisher_yates.py": {
        "FisherYatesTest.test_shuffle_not_equals_before": {
            "name": "test_shuffle_not_equals_before",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FisherYatesTest.test_probability_distribution": {
            "name": "test_probability_distribution",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/test/algo/shuffling/__init__.py": {},
    "algorithms-master/python/test/algo/sorting/test_bubble_sort.py": {
        "BubbleSortTest._sort": {
            "name": "_sort",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "algorithms-master/python/test/algo/sorting/test_insertion_sort.py": {
        "InsertionSortTest._sort": {
            "name": "_sort",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "algorithms-master/python/test/algo/sorting/test_merge_sort.py": {
        "MergeSortTest._sort": {
            "name": "_sort",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "algorithms-master/python/test/algo/sorting/test_selection_sort.py": {
        "SelectionSortTest._sort": {
            "name": "_sort",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "algorithms-master/python/test/algo/sorting/__init__.py": {},
    "algorithms-master/python/test/datastruct/test_binary_heap.py": {
        "BinaryHeapTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapTest.test_correctness_peek_from_empty": {
            "name": "test_correctness_peek_from_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapTest.test_correctness_pop_from_empty": {
            "name": "test_correctness_pop_from_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapTest.test_correctness_simple_case_1": {
            "name": "test_correctness_simple_case_1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapTest.test_correctness_simple_case_2": {
            "name": "test_correctness_simple_case_2",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryHeapTest.test_correctness_heapq_comparison": {
            "name": "test_correctness_heapq_comparison",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/test/datastruct/test_linkedlist.py": {
        "LinkedListTest.test_init_empty": {
            "name": "test_init_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_init_from_array": {
            "name": "test_init_from_array",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_append": {
            "name": "test_append",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_prepend": {
            "name": "test_prepend",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTest.test_str": {
            "name": "test_str",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/test/datastruct/__init__.py": {},
    "algorithms-master/python/visualize/Board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "interval": [
                    "int"
                ]
            }
        },
        "Board.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.add_recording": {
            "name": "add_recording",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recorder": [
                    "visualize.observable.recorder.Recorder"
                ]
            }
        },
        "Board._draw_initial": {
            "name": "_draw_initial",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board._draw_content": {
            "name": "_draw_content",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "array": [
                    "list"
                ],
                "event_type": [
                    "int",
                    "str",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "m": [
                    "int",
                    "str",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "n": [
                    "int",
                    "str",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Board._draw_state": {
            "name": "_draw_state",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "dict",
                    "List[int]"
                ],
                "offset": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "bool"
                ],
                "event_type": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "m": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "n": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Board._update": {
            "name": "_update",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/visualize/__init__.py": {},
    "algorithms-master/python/visualize/observable/list.py": {
        "ObservableList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableList.copy": {
            "name": "copy",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableList.__setitem__": {
            "name": "__setitem__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None",
                    "Callable[[None], Any]",
                    "typing.Callable[None, typing.Any]"
                ]
            }
        },
        "ObservableList.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableList.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "ObservableList.__iter__": {
            "name": "__iter__",
            "location": 28,
            "return": [
                "ObservableList"
            ],
            "arguments": {
                "self": [
                    "_TObservableList"
                ]
            }
        },
        "ObservableList.__next__": {
            "name": "__next__",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableList.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/visualize/observable/observable.py": {
        "Observable.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observable.register": {
            "name": "register",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "visualize.observable.observer.Observer"
                ]
            }
        },
        "Observable.update": {
            "name": "update",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/visualize/observable/observer.py": {
        "Observer.update": {
            "name": "update",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/visualize/observable/recorder.py": {
        "Recorder.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.update": {
            "name": "update",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.empty": {
            "name": "empty",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.get": {
            "name": "get",
            "location": 33,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [
                "Recorder"
            ],
            "arguments": {
                "self": [
                    "_TRecorder"
                ]
            }
        },
        "Recorder.__next__": {
            "name": "__next__",
            "location": 39,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms-master/python/visualize/observable/__init__.py": {}
}
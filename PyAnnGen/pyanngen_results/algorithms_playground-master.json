{
    "algorithms_playground-master/conftest.py": {
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "items": [
                    "list",
                    "list[]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        }
    },
    "algorithms_playground-master/algo/binomial_heap.py": {
        "BinomialHeap.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeap._get_min_tree": {
            "name": "_get_min_tree",
            "location": 27,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeap._update_min_tree_node": {
            "name": "_update_min_tree_node",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeap.find_min": {
            "name": "find_min",
            "location": 46,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeap.insert": {
            "name": "insert",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "str",
                    "dict",
                    "Optional[\"PNSqlCursor\"]"
                ]
            }
        },
        "BinomialHeap.delete_min": {
            "name": "delete_min",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeap.meld": {
            "name": "meld",
            "location": 86,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "_BinTree.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "bool"
                ]
            }
        },
        "_BinTree.rank": {
            "name": "rank",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinTree.pop_children": {
            "name": "pop_children",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinTree.link": {
            "name": "link",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Iterable[int]]",
                    "None"
                ]
            }
        },
        "_BinTree.value": {
            "name": "value",
            "location": 264,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BinTree.__str__": {
            "name": "__str__",
            "location": 269,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeap._update_min_tree_node.min_node": {
            "name": "min_node",
            "location": 35,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "min_node": [
                    "Node",
                    "bytes",
                    "list"
                ],
                "curr_node": [
                    "Node",
                    "bytes",
                    "list"
                ]
            }
        },
        "BinomialHeap.meld.merge_or_append": {
            "name": "merge_or_append",
            "location": 133,
            "return": [
                "Node",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "merged_tail": [
                    "bool",
                    "str"
                ],
                "tree": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "algorithms_playground-master/algo/dijkstra_slow.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adj_list": [
                    "List[str]",
                    "None",
                    "List[Dict[Any, str]]",
                    "list[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[typing.Any, str]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Graph.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "v2": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "w": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Graph.has_edge": {
            "name": "has_edge",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "v2": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Graph.shortest_paths": {
            "name": "shortest_paths",
            "location": 34,
            "return": [
                "Dict[(Union[(_T0, _T1, _T2, _T3, _T4)], List[Tuple[(_T0, Union[(_T0, _T1, _T2, _T3, _T4)], Any)]])]"
            ],
            "arguments": {
                "self": [],
                "start_vertex": [
                    "_T0"
                ]
            }
        }
    },
    "algorithms_playground-master/algo/linked_list.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "E"
                ],
                "next": [
                    "Optional[Node]"
                ]
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.head": {
            "name": "head",
            "location": 27,
            "return": [
                "Optional[Node[E]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.empty": {
            "name": "empty",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.append": {
            "name": "append",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "E"
                ]
            }
        },
        "LinkedList.prepend": {
            "name": "prepend",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "E"
                ]
            }
        },
        "LinkedList.pop": {
            "name": "pop",
            "location": 65,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.popleft": {
            "name": "popleft",
            "location": 96,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.remove_node": {
            "name": "remove_node",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node[E]"
                ]
            }
        },
        "LinkedList.traverse": {
            "name": "traverse",
            "location": 140,
            "return": [
                "Ctx"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Ctx, E], Ctx)]"
                ],
                "initial_context": [
                    "Ctx"
                ]
            }
        },
        "LinkedList.traverse_nodes": {
            "name": "traverse_nodes",
            "location": 178,
            "return": [
                "Ctx"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Ctx, Node[E]], Ctx)]"
                ],
                "initial_context": [
                    "Ctx"
                ]
            }
        },
        "LinkedList.count": {
            "name": "count",
            "location": 215,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.pprint": {
            "name": "pprint",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "TextIO",
                    "None",
                    "Union[str, List[str]]",
                    "typing.TextIO",
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 235,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__bool__": {
            "name": "__bool__",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.pop.second_to_last": {
            "name": "second_to_last",
            "location": 79,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_n": [
                    "bool",
                    "int"
                ],
                "curr": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "LinkedList.pprint.print_node": {
            "name": "print_node",
            "location": 227,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "buf": [
                    "List[str]",
                    "str",
                    "list",
                    "dict"
                ],
                "curr": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "algorithms_playground-master/algo/mergesort.py": {
        "mergesort": {
            "name": "mergesort",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "v": [
                    "int",
                    "Optional[List[str]]",
                    "list"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "l": [
                    "float",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "str"
                ],
                "r": [
                    "int",
                    "Collection[int]",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "algorithms_playground-master/algo/mst_slow.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adj_list": [
                    "List[str]",
                    "None",
                    "List[Dict[Any, str]]",
                    "list[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[typing.Any, str]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Graph.__getitem__": {
            "name": "__getitem__",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "v2": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "w": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Graph.has_edge": {
            "name": "has_edge",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "v2": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Graph.edges": {
            "name": "edges",
            "location": 29,
            "return": [
                "Set[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.is_connected": {
            "name": "is_connected",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.mst_slow": {
            "name": "mst_slow",
            "location": 53,
            "return": [
                "Graph"
            ],
            "arguments": {
                "self": [
                    "_TGraph"
                ]
            }
        }
    },
    "algorithms_playground-master/algo/strassen.py": {
        "get_blocks": {
            "name": "get_blocks",
            "location": 10,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "m": [
                    "np.ndarray"
                ]
            }
        },
        "strassen": {
            "name": "strassen",
            "location": 24,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "m1": [
                    "np.ndarray"
                ],
                "m2": [
                    "np.ndarray"
                ]
            }
        }
    },
    "algorithms_playground-master/algo/topo_sort.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edges": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "int",
                    "typing.Callable[, ]",
                    "T",
                    "Callable"
                ],
                "v2": [
                    "int",
                    "typing.Callable[, ]",
                    "T",
                    "Callable"
                ]
            }
        },
        "Graph.out": {
            "name": "out",
            "location": 35,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "Union[List[str], str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[str]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Graph.inc": {
            "name": "inc",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "Graph.topo_sort": {
            "name": "topo_sort",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms_playground-master/algo/__init__.py": {},
    "algorithms_playground-master/algo/hashmaps/__init__.py": {},
    "algorithms_playground-master/bench/mergesort.py": {
        "run_merge_benches_reversed": {
            "name": "run_merge_benches_reversed",
            "location": 10,
            "return": [
                "List[Tuple[(int, float)]]"
            ],
            "arguments": {
                "start_size": [
                    "int"
                ],
                "end_size": [
                    "int"
                ],
                "step_size": [
                    "int"
                ],
                "trials_per_array": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[Tuple[int, int]]",
                    "None",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "test_bench_mergesort": {
            "name": "test_bench_mergesort",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_mergesort_reversed_graph": {
            "name": "show_mergesort_reversed_graph",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms_playground-master/bench/models.py": {
        "test_model_nlogn": {
            "name": "test_model_nlogn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_nsquared": {
            "name": "test_model_nsquared",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_incorrect_nsquared": {
            "name": "test_model_incorrect_nsquared",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_incorrect_nlogn": {
            "name": "test_model_incorrect_nlogn",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BigOModel.fit": {
            "name": "fit",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bytes",
                    "numpy.ndarray",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "nevergrad.common.Callable[[numpy.ndarray], numpy.ndarray]"
                ]
            }
        },
        "BigOModel.predict": {
            "name": "predict",
            "location": 23,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "BigOModel.assert_good_params": {
            "name": "assert_good_params",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigOModel.assert_bad_params": {
            "name": "assert_bad_params",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Onlogn.transform": {
            "name": "transform",
            "location": 42,
            "return": [
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Iterable[typing.Any]",
                    "numpy.ndarray",
                    "Iterable[Any]"
                ]
            }
        },
        "Onlogn.func": {
            "name": "func",
            "location": 45,
            "return": [
                "type",
                "str",
                "List[dict]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "a": [
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "b": [
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        },
        "Onsquared.transform": {
            "name": "transform",
            "location": 50,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "Onsquared.func": {
            "name": "func",
            "location": 53,
            "return": [
                "float",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Iterable[float]",
                    "numpy.ndarray"
                ],
                "a": [
                    "float",
                    "Iterable[float]",
                    "numpy.ndarray"
                ],
                "b": [
                    "float",
                    "Iterable[float]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "algorithms_playground-master/bench/__init__.py": {},
    "algorithms_playground-master/tests/binomial_heap.py": {
        "test_binheap_create_1": {
            "name": "test_binheap_create_1",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_find_min_2": {
            "name": "test_binheap_find_min_2",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_find_min_3": {
            "name": "test_binheap_find_min_3",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_find_min_4": {
            "name": "test_binheap_find_min_4",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_find_min_large_random": {
            "name": "test_binheap_find_min_large_random",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_find_min_arb": {
            "name": "test_binheap_find_min_arb",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_binheap_meld_1": {
            "name": "test_binheap_meld_1",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_meld_2": {
            "name": "test_binheap_meld_2",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_meld_3": {
            "name": "test_binheap_meld_3",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_meld_4": {
            "name": "test_binheap_meld_4",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_meld_one_empty_arb": {
            "name": "test_binheap_meld_one_empty_arb",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "float",
                    "str"
                ]
            }
        },
        "test_binheap_meld_arb": {
            "name": "test_binheap_meld_arb",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v1": [
                    "Callable",
                    "str",
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]"
                ],
                "v2": [
                    "Callable",
                    "str",
                    "Callable[[T, T], T]",
                    "T",
                    "Optional[Dict]"
                ]
            }
        },
        "test_binheap_delete_min_1": {
            "name": "test_binheap_delete_min_1",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_delete_min_long_fail": {
            "name": "test_binheap_delete_min_long_fail",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_delete_min_long_fail_2": {
            "name": "test_binheap_delete_min_long_fail_2",
            "location": 240,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_delete_min_very_long": {
            "name": "test_binheap_delete_min_very_long",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_delete_min_empty_err": {
            "name": "test_binheap_delete_min_empty_err",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_binheap_delete_min_arb": {
            "name": "test_binheap_delete_min_arb",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "Sequence[Any]",
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "list"
                ]
            }
        },
        "test_bintree_1": {
            "name": "test_bintree_1",
            "location": 311,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bintree_val_arb": {
            "name": "test_bintree_val_arb",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "IO[bytes]",
                    "bool",
                    "Callable[[], str]",
                    "str"
                ]
            }
        },
        "test_bintree_link_2": {
            "name": "test_bintree_link_2",
            "location": 327,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bintree_link_3": {
            "name": "test_bintree_link_3",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bintree_link_arb_4": {
            "name": "test_bintree_link_arb_4",
            "location": 380,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "tuple"
                ]
            }
        },
        "test_bintree_link_diff_rank": {
            "name": "test_bintree_link_diff_rank",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bintree_children_1": {
            "name": "test_bintree_children_1",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bintree_children_2": {
            "name": "test_bintree_children_2",
            "location": 437,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bintree_children_arb_4": {
            "name": "test_bintree_children_arb_4",
            "location": 461,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Tuple[str]",
                    "List[Dict]",
                    "list"
                ]
            }
        },
        "BinomialHeapMachine.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeapMachine.insert": {
            "name": "insert",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list"
                ]
            }
        },
        "BinomialHeapMachine.delete_min": {
            "name": "delete_min",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeapMachine.min_is_correct": {
            "name": "min_is_correct",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialHeapMachine.trees_in_order": {
            "name": "trees_in_order",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algorithms_playground-master/tests/dijkstra_slow.py": {
        "gen_weighted_connected_graph": {
            "name": "gen_weighted_connected_graph",
            "location": 16,
            "return": [
                "Graph",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num_vertices": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "num_edges": [
                    "int"
                ],
                "max_weight": [
                    "int",
                    "str"
                ]
            }
        },
        "test_one_edge": {
            "name": "test_one_edge",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_two_edges_line": {
            "name": "test_two_edges_line",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_two_edges_spoke": {
            "name": "test_two_edges_spoke",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_diamond_equal_weights": {
            "name": "test_diamond_equal_weights",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_diamond_unique_weights": {
            "name": "test_diamond_unique_weights",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_triangle_shorter_total": {
            "name": "test_triangle_shorter_total",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms_playground-master/tests/linked_list.py": {
        "empty": {
            "name": "empty",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "list"
                ],
                "x": [
                    "bool",
                    "list"
                ]
            }
        },
        "assert_on_call": {
            "name": "assert_on_call",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [],
                "x": []
            }
        },
        "count_items": {
            "name": "count_items",
            "location": 64,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "list"
                ],
                "x": [
                    "bool",
                    "list"
                ]
            }
        },
        "end_at_item": {
            "name": "end_at_item",
            "location": 74,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "ctx": [],
                "x": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_ll_traverse_empty": {
            "name": "test_ll_traverse_empty",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_traverse_hits_every_element": {
            "name": "test_ll_traverse_hits_every_element",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_traverse_stop_iteration": {
            "name": "test_ll_traverse_stop_iteration",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_traverse_hits_every_element_arb": {
            "name": "test_ll_traverse_hits_every_element_arb",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "Optional[str]",
                    "int",
                    "list",
                    "List[int]"
                ]
            }
        },
        "test_ll_traverse_stop_iteration_arb": {
            "name": "test_ll_traverse_stop_iteration_arb",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v1": [
                    "Sequence[T]",
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "int",
                    "List[int]",
                    "str"
                ],
                "v2": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_ll_remove_empty": {
            "name": "test_ll_remove_empty",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_remove_not_found_arb": {
            "name": "test_ll_remove_not_found_arb",
            "location": 207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "List[bool]",
                    "bool",
                    "List[List[Any]]"
                ]
            }
        },
        "test_ll_remove_head_only": {
            "name": "test_ll_remove_head_only",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_remove_head_1": {
            "name": "test_ll_remove_head_1",
            "location": 235,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_remove_tail_1": {
            "name": "test_ll_remove_tail_1",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_remove_middle": {
            "name": "test_ll_remove_middle",
            "location": 257,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_remove_in_order_arb": {
            "name": "test_ll_remove_in_order_arb",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "test_ll_remove_random_order_arb": {
            "name": "test_ll_remove_random_order_arb",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool",
                    "List[List[Any]]"
                ]
            }
        },
        "test_ll_bool_empty": {
            "name": "test_ll_bool_empty",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_bool_nonempty": {
            "name": "test_ll_bool_nonempty",
            "location": 317,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_count_empty": {
            "name": "test_ll_count_empty",
            "location": 336,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_count_1": {
            "name": "test_ll_count_1",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_count_2": {
            "name": "test_ll_count_2",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_count_arb": {
            "name": "test_ll_count_arb",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "list",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_ll_pprint_empty": {
            "name": "test_ll_pprint_empty",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_pprint_single_value": {
            "name": "test_ll_pprint_single_value",
            "location": 376,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_pprint_3": {
            "name": "test_ll_pprint_3",
            "location": 385,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_pprint_arb": {
            "name": "test_ll_pprint_arb",
            "location": 398,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "test_ll_iterator_empty": {
            "name": "test_ll_iterator_empty",
            "location": 413,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_iterator_single": {
            "name": "test_ll_iterator_single",
            "location": 419,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_iterator_2": {
            "name": "test_ll_iterator_2",
            "location": 436,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_iterator_arb": {
            "name": "test_ll_iterator_arb",
            "location": 455,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_ll_pop_empty": {
            "name": "test_ll_pop_empty",
            "location": 466,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_pop_1": {
            "name": "test_ll_pop_1",
            "location": 479,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_pop_2": {
            "name": "test_ll_pop_2",
            "location": 485,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_pop_in_order_arb": {
            "name": "test_ll_pop_in_order_arb",
            "location": 495,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "test_ll_pop_interspersed_arb": {
            "name": "test_ll_pop_interspersed_arb",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v1": [
                    "int"
                ],
                "v2": [
                    "Sequence[Hashable]",
                    "list"
                ]
            }
        },
        "test_ll_popleft_empty": {
            "name": "test_ll_popleft_empty",
            "location": 544,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_popleft_1": {
            "name": "test_ll_popleft_1",
            "location": 557,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_popleft_2": {
            "name": "test_ll_popleft_2",
            "location": 563,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_popleft_in_order_arb": {
            "name": "test_ll_popleft_in_order_arb",
            "location": 573,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "str",
                    "bool",
                    "List[bool]"
                ]
            }
        },
        "test_ll_popleft_interspersed_arb": {
            "name": "test_ll_popleft_interspersed_arb",
            "location": 594,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v1": [
                    "bool",
                    "str"
                ],
                "v2": [
                    "Sequence[Hashable]",
                    "list"
                ]
            }
        },
        "test_ll_prepend_1": {
            "name": "test_ll_prepend_1",
            "location": 623,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_prepend_2": {
            "name": "test_ll_prepend_2",
            "location": 631,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_prepend_arb": {
            "name": "test_ll_prepend_arb",
            "location": 646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "list",
                    "int"
                ]
            }
        },
        "test_ll_append_1": {
            "name": "test_ll_append_1",
            "location": 662,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_append_2": {
            "name": "test_ll_append_2",
            "location": 670,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ll_append_arb": {
            "name": "test_ll_append_arb",
            "location": 685,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "Callable",
                    "List[int]",
                    "List[str]",
                    "Mapping[str, Sequence[str]]",
                    "bool"
                ]
            }
        },
        "test_ll_head_empty": {
            "name": "test_ll_head_empty",
            "location": 701,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_node_1": {
            "name": "test_node_1",
            "location": 707,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_node_2": {
            "name": "test_node_2",
            "location": 713,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "LinkedListModel.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListModel.same_items_in_same_order": {
            "name": "same_items_in_same_order",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListModel.prepend": {
            "name": "prepend",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "LinkedListModel.append": {
            "name": "append",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list"
                ]
            }
        },
        "LinkedListModel.popleft": {
            "name": "popleft",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListModel.pop": {
            "name": "pop",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CounterStop.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_at": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_ll_remove_random_order_arb.collect_nodes": {
            "name": "collect_nodes",
            "location": 294,
            "return": [
                "str",
                "Callable[[str], T]",
                "int"
            ],
            "arguments": {
                "nodes_set": [
                    "str",
                    "Set[Node]",
                    "int",
                    "list"
                ],
                "curr": [
                    "str",
                    "Set[Node]",
                    "int",
                    "list"
                ]
            }
        }
    },
    "algorithms_playground-master/tests/mergesort.py": {
        "test_msort_empty": {
            "name": "test_msort_empty",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_msort_one": {
            "name": "test_msort_one",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_msort_simple": {
            "name": "test_msort_simple",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_msort_long": {
            "name": "test_msort_long",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_msort_small_cases": {
            "name": "test_msort_small_cases",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_msort_arb": {
            "name": "test_msort_arb",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "dict",
                    "dict[, ]",
                    "tuple",
                    "tuple[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_merge_empty": {
            "name": "test_merge_empty",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_single_empty": {
            "name": "test_merge_single_empty",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_singles": {
            "name": "test_merge_singles",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_pairs": {
            "name": "test_merge_pairs",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_list_arb": {
            "name": "test_merge_list_arb",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "a": [
                    "list",
                    "list[]"
                ],
                "b": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "algorithms_playground-master/tests/mst_slow.py": {
        "gen_weighted_connected_graph": {
            "name": "gen_weighted_connected_graph",
            "location": 8,
            "return": [
                "Graph",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num_vertices": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "num_edges": [
                    "int"
                ],
                "max_weight": [
                    "int",
                    "str"
                ]
            }
        },
        "test_two_vertices": {
            "name": "test_two_vertices",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_triangle": {
            "name": "test_triangle",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_random_graphs_mst_slow": {
            "name": "test_random_graphs_mst_slow",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "assert_is_tree": {
            "name": "assert_is_tree",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[int]",
                    "float",
                    "typing.Sequence[int]",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "List[List[Any]]",
                    "Dict[str, int]"
                ]
            }
        },
        "assert_is_connected": {
            "name": "assert_is_connected",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str"
                ]
            }
        },
        "test_is_connected": {
            "name": "test_is_connected",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_random_graphs_edges": {
            "name": "test_random_graphs_edges",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_random_graphs_edges_small": {
            "name": "test_random_graphs_edges_small",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms_playground-master/tests/strassen.py": {
        "test_2x2_zero": {
            "name": "test_2x2_zero",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_2x2_rand": {
            "name": "test_2x2_rand",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_4x4_ones": {
            "name": "test_4x4_ones",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_4x4_increasing_blocks": {
            "name": "test_4x4_increasing_blocks",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_4x4_range": {
            "name": "test_4x4_range",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_4x4_rand": {
            "name": "test_4x4_rand",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_blocks_4x4_1": {
            "name": "test_blocks_4x4_1",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_blocks_4x4_2": {
            "name": "test_blocks_4x4_2",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_blocks_4x4_rand": {
            "name": "test_blocks_4x4_rand",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms_playground-master/tests/topo_sort.py": {
        "assert_topo_sort": {
            "name": "assert_topo_sort",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ],
                "order": [
                    "list[float]",
                    "List[float]",
                    "list[int]",
                    "List[int]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "test_assert_topo_sort": {
            "name": "test_assert_topo_sort",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "gen_ditree": {
            "name": "gen_ditree",
            "location": 40,
            "return": [
                "Graph",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_gen_ditree": {
            "name": "test_gen_ditree",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_edge_1": {
            "name": "test_add_edge_1",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_edges_2": {
            "name": "test_add_edges_2",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_one_edge": {
            "name": "test_one_edge",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_two_edges": {
            "name": "test_two_edges",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dag_1": {
            "name": "test_dag_1",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_random_50": {
            "name": "test_random_50",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms_playground-master/tests/hashmaps/utils.py": {
        "check_maps_equal": {
            "name": "check_maps_equal",
            "location": 7,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "items": [
                    "Iterable[Tuple[(Hashable, Any)]]"
                ],
                "test_map": [
                    "MutableMapping"
                ]
            }
        },
        "assert_maps_equal": {
            "name": "assert_maps_equal",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "Iterable[Tuple[(Hashable, Any)]]"
                ],
                "test_map": [
                    "MutableMapping"
                ]
            }
        },
        "test_maps_equal": {
            "name": "test_maps_equal",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[str, typing.Any]",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_maps_not_equal": {
            "name": "test_maps_not_equal",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[int, str]",
                    "Dict[int, str]",
                    "bool",
                    "str"
                ]
            }
        },
        "BadDict.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "None",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "BadDict.__delitem__": {
            "name": "__delitem__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadDict.__getitem__": {
            "name": "__getitem__",
            "location": 50,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BadDict.__iter__": {
            "name": "__iter__",
            "location": 53,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadDict.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadDict.__setitem__": {
            "name": "__setitem__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "v": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        }
    }
}
{
    "allennlp-as-a-library-example-master/my_library/__init__.py": {},
    "allennlp-as-a-library-example-master/my_library/dataset_readers/semantic_scholar_papers.py": {
        "SemanticScholarDatasetReader.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool",
                    "int"
                ],
                "tokenizer": [
                    "List[Tuple[int, int]]",
                    "None",
                    "Tuple[int, int]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[int]",
                    "tuple[typing.Union[int,int]]",
                    "list[int]",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "token_indexers": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "SemanticScholarDatasetReader._read": {
            "name": "_read",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "SemanticScholarDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 70,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "float",
                    "Type[Dict[str, dict]]",
                    "typing.Type"
                ],
                "abstract": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "float",
                    "Type[Dict[str, dict]]",
                    "typing.Type"
                ],
                "venue": [
                    "Optional[Type[Any]]",
                    "None",
                    "Union[None, int, str]",
                    "Union[None, float, str]",
                    "typing.Type",
                    "Optional[Callable[Any, Any]]",
                    "int",
                    "str",
                    "float",
                    "typing.Callable[typing.Any, typing.Any]"
                ]
            }
        }
    },
    "allennlp-as-a-library-example-master/my_library/dataset_readers/__init__.py": {},
    "allennlp-as-a-library-example-master/my_library/models/academic_paper_classifier.py": {
        "AcademicPaperClassifier.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "text_field_embedder": [
                    "int",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "title_encoder": [
                    "int",
                    "allennlp.modules.FeedForward",
                    "Optional[int]",
                    "allennlp.modules.Seq2SeqEncoder"
                ],
                "abstract_encoder": [
                    "int",
                    "allennlp.modules.FeedForward",
                    "Optional[int]",
                    "allennlp.modules.Seq2SeqEncoder"
                ],
                "classifier_feedforward": [
                    "bool",
                    "int",
                    "tuple[]",
                    "tuple",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "bool",
                    "int",
                    "tuple",
                    "Optional[float]"
                ],
                "regularizer": [
                    "bool",
                    "None",
                    "int",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "AcademicPaperClassifier.forward": {
            "name": "forward",
            "location": 78,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "dict[, ]",
                    "dict",
                    "dict[str, torch.Tensor]",
                    "int",
                    "Dict[str, torch.Tensor]",
                    "None",
                    "allennlp.data.vocabulary.Vocabulary",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "abstract": [
                    "dict[, ]",
                    "dict",
                    "dict[str, torch.Tensor]",
                    "int",
                    "Dict[str, torch.Tensor]",
                    "None",
                    "allennlp.data.vocabulary.Vocabulary",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "label": [
                    "None",
                    "torch.IntTensor",
                    "typing.Any",
                    "tuple[typing.Union[torch.Tensor,torch.Tensor]]",
                    "Optional[Any]",
                    "Optional[\"Outcome\"]",
                    "torch.Tensor",
                    "Optional[Tuple[torch.Tensor, torch.Tensor]]"
                ]
            }
        },
        "AcademicPaperClassifier.decode": {
            "name": "decode",
            "location": 121,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "str",
                    "Dict[str, torch.Tensor]",
                    "dict"
                ]
            }
        },
        "AcademicPaperClassifier.get_metrics": {
            "name": "get_metrics",
            "location": 137,
            "return": [
                "dict[, ]",
                "bool",
                "dict",
                "Dict[str, Any]",
                "int",
                "multinedb.models.workspace.Workspace"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "allennlp-as-a-library-example-master/my_library/models/__init__.py": {},
    "allennlp-as-a-library-example-master/my_library/predictors/paper_classifier_predictor.py": {
        "PaperClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list[str]",
                    "thonny.common.CommandToBackend",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PaperClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 21,
            "return": [
                "Iterable[int]",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "allennlp.common.util.JsonDict",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "allennlp-as-a-library-example-master/my_library/predictors/__init__.py": {},
    "allennlp-as-a-library-example-master/tests/dataset_readers/semantic_scholar_dataset_reader_test.py": {
        "TestSemanticScholarDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-as-a-library-example-master/tests/dataset_readers/__init__.py": {},
    "allennlp-as-a-library-example-master/tests/models/academic_paper_classifier_test.py": {
        "AcademicPaperClassifierTest.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcademicPaperClassifierTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-as-a-library-example-master/tests/models/__init__.py": {},
    "allennlp-as-a-library-example-master/tests/predictors/predictor_test.py": {
        "TestPaperClassifierPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
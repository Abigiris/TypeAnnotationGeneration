{
    "allennlp-speech-master/main.py": {},
    "allennlp-speech-master/setup.py": {},
    "allennlp-speech-master/external/model.py": {
        "pad_layer": {
            "name": "pad_layer",
            "location": 8,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "inp": [
                    "float",
                    "int",
                    "Callable[str,float]",
                    "Callable[[str],float]",
                    "numpy.ndarray"
                ],
                "layer": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ],
                "is_2d": [
                    "bool",
                    "str",
                    "int",
                    "Mapping[str,Any]",
                    "Callable"
                ]
            }
        },
        "pixel_shuffle_1d": {
            "name": "pixel_shuffle_1d",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "inp": [
                    "torch.Tensor"
                ],
                "upscale_factor": [
                    "int",
                    "Dict[str,int]",
                    "torch.Tensor",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "upsample": {
            "name": "upsample",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "torch.Tensor",
                    "numpy.ndarray",
                    "torch.FloatTensor",
                    "numpy.array"
                ],
                "scale_factor": [
                    "int",
                    "torch.Tensor",
                    "numpy.ndarray",
                    "torch.FloatTensor",
                    "numpy.array"
                ]
            }
        },
        "GLU": {
            "name": "GLU",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "torch.Tensor"
                ],
                "layer": [
                    "List",
                    "int",
                    "float",
                    "str"
                ],
                "res": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "highway": {
            "name": "highway",
            "location": 60,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "inp": [
                    "torch.Tensor",
                    "List[deque]",
                    "dict",
                    "float",
                    "bytearray",
                    "numpy.ndarray"
                ],
                "layers": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gates": [
                    "int",
                    "Callable",
                    "str"
                ],
                "act": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RNN": {
            "name": "RNN",
            "location": 77,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "inp": [
                    "int"
                ],
                "layer": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "linear": {
            "name": "linear",
            "location": 86,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "inp": [
                    "torch.Tensor",
                    "List[deque]",
                    "float",
                    "bytearray",
                    "dict"
                ],
                "layer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "append_emb": {
            "name": "append_emb",
            "location": 97,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "emb": [
                    "Union[int, float]",
                    "torch.Tensor",
                    "float",
                    "numpy.ndarray",
                    "List['cirq.Qid']"
                ],
                "expand_size": [
                    "float",
                    "torch.Tensor",
                    "numpy.ndarray"
                ],
                "output": [
                    "int",
                    "str",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]"
                ]
            }
        },
        "PatchDiscriminator.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_class": [
                    "int",
                    "Sequence[Any]",
                    "List[int]"
                ],
                "ns": [
                    "float",
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "dp": [
                    "float",
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "PatchDiscriminator.conv_block": {
            "name": "conv_block",
            "location": 126,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "conv_layer": [
                    "int"
                ],
                "after_layers": [
                    "float",
                    "T",
                    "Exception",
                    "torch.Tensor",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "PatchDiscriminator.forward": {
            "name": "forward",
            "location": 133,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "torch.Tensor",
                    "Variable"
                ],
                "classify": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "List",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "SpeakerClassifier.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c_in": [
                    "int",
                    "bool",
                    "str"
                ],
                "c_h": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray"
                ],
                "n_class": [
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "List[str]"
                ],
                "dp": [
                    "float",
                    "int",
                    "Sequence[str]"
                ],
                "ns": [
                    "float",
                    "int"
                ]
            }
        },
        "SpeakerClassifier.conv_block": {
            "name": "conv_block",
            "location": 176,
            "return": [
                "str",
                "List",
                "Optional[Union[str,Any]]",
                "List[list[str]]",
                "Set[str]",
                "Dict",
                "int",
                "Dict[str,Any]",
                "float",
                "List[float]",
                "Tuple[Union[float,float,float,float]]",
                "List[Union[list[str],float]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "List[float]",
                    "int",
                    "Tuple[Union[float,float,float,float]]",
                    "Tuple[float,float,float,float]",
                    "numpy.ndarray"
                ],
                "conv_layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "after_layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "res": [
                    "bool",
                    "int",
                    "Iterable[Any]",
                    "torch.Tensor"
                ]
            }
        },
        "SpeakerClassifier.forward": {
            "name": "forward",
            "location": 187,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "T",
                    "numpy.ndarray"
                ]
            }
        },
        "LatentDiscriminator.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c_in": [
                    "int",
                    "bytes",
                    "str"
                ],
                "c_h": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "float"
                ],
                "ns": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "dp": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "LatentDiscriminator.conv_block": {
            "name": "conv_block",
            "location": 219,
            "return": [
                "str",
                "List",
                "Optional[Union[str,Any]]",
                "List[list[str]]",
                "Set[str]",
                "Dict",
                "int",
                "Dict[str,Any]",
                "float",
                "List[float]",
                "Tuple[Union[float,float,float,float]]",
                "List[Union[list[str],float]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "List[float]",
                    "int",
                    "Tuple[Union[float,float,float,float]]",
                    "Tuple[float,float,float,float]",
                    "numpy.ndarray"
                ],
                "conv_layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "after_layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "res": [
                    "bool",
                    "int",
                    "Iterable[Any]",
                    "torch.Tensor"
                ]
            }
        },
        "LatentDiscriminator.forward": {
            "name": "forward",
            "location": 230,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "T",
                    "numpy.ndarray"
                ]
            }
        },
        "CBHG.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c_in": [
                    "int",
                    "List",
                    "bool",
                    "Optional[int]"
                ],
                "c_out": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "CBHG.forward": {
            "name": "forward",
            "location": 259,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c_in": [
                    "int"
                ],
                "c_out": [
                    "int",
                    "bool",
                    "str"
                ],
                "c_h": [
                    "int",
                    "bool"
                ],
                "c_a": [
                    "int",
                    "str",
                    "Optional[Dict[str,float]]",
                    "Tuple[int,int]",
                    "Dict"
                ],
                "emb_size": [
                    "int",
                    "bool"
                ],
                "ns": [
                    "float",
                    "List",
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Decoder.conv_block": {
            "name": "conv_block",
            "location": 310,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "conv_layers": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "float",
                    "type",
                    "Optional[Mapping]"
                ],
                "norm_layer": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[int,float]"
                ],
                "emb": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "torch.Tensor"
                ],
                "res": [
                    "bool",
                    "int",
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "Decoder.dense_block": {
            "name": "dense_block",
            "location": 326,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "List[float]",
                    "Tuple[float, float, float, float]",
                    "int",
                    "numpy.ndarray"
                ],
                "emb": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "bool"
                ],
                "layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "norm_layer": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]",
                    "bool"
                ],
                "res": [
                    "bool",
                    "int",
                    "Iterable[Any]",
                    "torch.Tensor"
                ]
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 337,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "T"
                ],
                "c": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c_in": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "c_h1": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "c_h2": [
                    "int",
                    "Tuple[int,int]"
                ],
                "c_h3": [
                    "int",
                    "slice",
                    "Optional[int]"
                ],
                "ns": [
                    "float",
                    "bool",
                    "int",
                    "str",
                    "Hashable"
                ],
                "dp": [
                    "float",
                    "bool",
                    "int",
                    "str",
                    "Hashable"
                ]
            }
        },
        "Encoder.conv_block": {
            "name": "conv_block",
            "location": 390,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Mapping[str, float]",
                    "str",
                    "int",
                    "dict",
                    "float",
                    "numpy.ndarray"
                ],
                "conv_layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "norm_layers": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "torch.Tensor"
                ],
                "res": [
                    "bool",
                    "int",
                    "Iterable[Any]",
                    "torch.Tensor"
                ]
            }
        },
        "Encoder.dense_block": {
            "name": "dense_block",
            "location": 403,
            "return": [
                "int",
                "str",
                "List",
                "Optional[Union[str,Any]]",
                "float",
                "Set[str]",
                "List[float]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "List[float]",
                    "Dict[int,Tuple[int,int]]",
                    "bool"
                ],
                "layers": [
                    "str",
                    "int",
                    "bool",
                    "torch.Tensor"
                ],
                "norm_layers": [
                    "str",
                    "int",
                    "bool",
                    "torch.Tensor"
                ],
                "res": [
                    "bool",
                    "int",
                    "torch.Tensor",
                    "str"
                ]
            }
        },
        "Encoder.forward": {
            "name": "forward",
            "location": 414,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "torch.Tensor"
                ]
            }
        }
    },
    "allennlp-speech-master/external/model_speech.py": {
        "SequenceWise.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "SequenceWise.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "SequenceWise.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaskConv.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_module": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MaskConv.forward": {
            "name": "forward",
            "location": 54,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ],
                "lengths": [
                    "bool",
                    "int"
                ]
            }
        },
        "InferenceBatchSoftmax.forward": {
            "name": "forward",
            "location": 74,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_": [
                    "str",
                    "Tuple[str, str]",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "BatchRNN.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "float",
                    "int",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "torch.FloatTensor",
                    "Union[Tuple[int, int], int]",
                    "Dict[str, torch.LongTensor]"
                ],
                "rnn_type": [
                    "int"
                ],
                "bidirectional": [
                    "int",
                    "str"
                ],
                "batch_norm": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "BatchRNN.flatten_parameters": {
            "name": "flatten_parameters",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchRNN.forward": {
            "name": "forward",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Dict[Tuple[int, int], int]",
                    "str",
                    "List[Tuple[torch.Tensor, torch.Tensor]]"
                ],
                "output_lengths": [
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "DeepSpeech.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_type": [
                    "int",
                    "Union[float, int]"
                ],
                "num_classes": [
                    "float",
                    "Optional[int]",
                    "str",
                    "int",
                    "bool"
                ],
                "feature_size": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "rnn_hidden_size": [
                    "int",
                    "torch.FloatTensor",
                    "float",
                    "str"
                ],
                "nb_layers": [
                    "Optional[int]",
                    "Optional[float]",
                    "float",
                    "str"
                ],
                "bidirectional": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "DeepSpeech.forward": {
            "name": "forward",
            "location": 150,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "int"
                ],
                "lengths": [
                    "bool",
                    "List[str]",
                    "int",
                    "float",
                    "Collection[T]"
                ]
            }
        },
        "DeepSpeech.get_seq_lens": {
            "name": "get_seq_lens",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_length": [
                    "str",
                    "bool"
                ]
            }
        },
        "DeepSpeech.get_param_size": {
            "name": "get_param_size",
            "location": 182,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "model": [
                    "dict",
                    "str",
                    "Type"
                ]
            }
        }
    },
    "allennlp-speech-master/external/__init__.py": {},
    "allennlp-speech-master/src/__init__.py": {},
    "allennlp-speech-master/src/common/speech_test_case.py": {
        "SpeechTestCase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechTestCase.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-speech-master/src/common/__init__.py": {},
    "allennlp-speech-master/src/data/audio_transformer.py": {
        "AudioTransformer.transform": {
            "name": "transform",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "allennlp-speech-master/src/data/mel_spectrogram.py": {
        "MelSpectrogram.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sr": [
                    "int",
                    "float",
                    "bool"
                ],
                "frame_shift": [
                    "float",
                    "int",
                    "bool"
                ],
                "frame_length": [
                    "float",
                    "int",
                    "bool"
                ],
                "preemphasis": [
                    "float",
                    "int",
                    "bool"
                ],
                "n_fft": [
                    "int",
                    "float",
                    "bool"
                ],
                "trim": [
                    "bool",
                    "int",
                    "float"
                ],
                "ref_db": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_db": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MelSpectrogram.transform": {
            "name": "transform",
            "location": 29,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "bytes",
                    "Dict[str,str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "allennlp-speech-master/src/data/util.py": {
        "to_hdf5_path": {
            "name": "to_hdf5_path",
            "location": 2,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "allennlp-speech-master/src/data/__init__.py": {},
    "allennlp-speech-master/src/dataset_readers/speech_commands_v1.py": {
        "SpeechCommandsV1.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str",
                    "bool",
                    "bytes",
                    "pathlib.Path"
                ],
                "transformer": [
                    "Sequence[str]",
                    "int",
                    "str",
                    "Type",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "lazy": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[bytes]",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "SpeechCommandsV1._read": {
            "name": "_read",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "SpeechCommandsV1.text_to_instance": {
            "name": "text_to_instance",
            "location": 47,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "allennlp-speech-master/src/dataset_readers/speech_dataset_reader.py": {
        "SpeechDatasetReader.audio_to_instance": {
            "name": "audio_to_instance",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 14,
            "return": [
                "str",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-speech-master/src/dataset_readers/VCTK.py": {
        "VCTK.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_path": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[str]"
                ],
                "audio_transformer": [
                    "str",
                    "None",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "List[Any]"
                ],
                "feature_name": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "str"
                ],
                "lazy": [
                    "bool",
                    "str"
                ]
            }
        },
        "VCTK.audio_to_instance": {
            "name": "audio_to_instance",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCTK._read": {
            "name": "_read",
            "location": 42,
            "return": [
                "Iterable[allennlp.data.Instance]",
                "Generator[Instance]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "VCTK.generate_dataset": {
            "name": "generate_dataset",
            "location": 79,
            "return": [
                "Tuple",
                "Tuple[Any,Any,Any]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "dataset_root": [
                    "str",
                    "bool",
                    "Dict[str,bool]",
                    "Tuple",
                    "Union[str,pathlib.Path]"
                ],
                "force": [
                    "bool",
                    "str",
                    "Union[str,pathlib.Path]",
                    "Dict[str,bool]",
                    "Tuple"
                ]
            }
        },
        "VCTK.generate_dataset.reform": {
            "name": "reform",
            "location": 110,
            "return": [
                "Dict[Text,int]",
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "VCTK.generate_dataset.split_data": {
            "name": "split_data",
            "location": 125,
            "return": [
                "Tuple",
                "str",
                "bool",
                "Dict",
                "List[str]",
                "Dict[str,Set[str]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "data.SensorData",
                    "list"
                ]
            }
        },
        "VCTK.generate_dataset.add_example": {
            "name": "add_example",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "examples": [
                    "float",
                    "mypy.types.Instance",
                    "int"
                ],
                "speakers": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "VCTK.generate_dataset.dump_to_file": {
            "name": "dump_to_file",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, numpy.ndarray]",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "allennlp-speech-master/src/dataset_readers/__init__.py": {},
    "allennlp-speech-master/src/models/asr_baseline.py": {
        "AsrBaseline.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "Optional[float]",
                    "Optional[List[int]]",
                    "Optional[int]"
                ],
                "rnn_type": [
                    "Optional[int]",
                    "int",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "feature_size": [
                    "Optional[int]",
                    "int",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "rnn_hidden_size": [
                    "Optional[int]",
                    "int",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "nb_layers": [
                    "Optional[int]",
                    "int",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "bidirectional": [
                    "Optional[int]",
                    "int",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "initializer": [
                    "bool",
                    "float",
                    "Hashable",
                    "str",
                    "int"
                ],
                "regularizer": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AsrBaseline.forward": {
            "name": "forward",
            "location": 37,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "torch.Tensor",
                    "int",
                    "float",
                    "List[int]"
                ],
                "feature_length": [
                    "torch.Tensor",
                    "int",
                    "float",
                    "List[int]"
                ],
                "txt_label": [
                    "Dict[str, torch.Tensor]",
                    "bool",
                    "Set[int]"
                ],
                "txt_length": [
                    "bool",
                    "Optional[Dict]",
                    "int",
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]"
                ],
                "meta_data": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "AsrBaseline.get_metrics": {
            "name": "get_metrics",
            "location": 74,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "str",
                    "models.Telegram_Chat",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "allennlp-speech-master/src/models/__init__.py": {},
    "allennlp-speech-master/src/modules/__init__.py": {},
    "allennlp-speech-master/tests/common/speech_test_case_test.py": {
        "TestSpeechTestCase.test_path": {
            "name": "test_path",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-speech-master/tests/dataset_readers/vctk_test.py": {
        "TestVCTK.get_instance": {
            "name": "get_instance",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVCTK.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVCTK.test_generate_dataset": {
            "name": "test_generate_dataset",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVCTK.test_generate_dataset.check_num": {
            "name": "check_num",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "int",
                    "Union[pathlib.Path, str]"
                ],
                "num": [
                    "int",
                    "Iterator[int]",
                    "Tuple[int]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    }
}
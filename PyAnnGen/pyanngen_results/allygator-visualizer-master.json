{
    "allygator-visualizer-master/visualizer/manage.py": {},
    "allygator-visualizer-master/visualizer/vehicles/admin.py": {},
    "allygator-visualizer-master/visualizer/vehicles/api.py": {
        "register_vehicle": {
            "name": "register_vehicle",
            "location": 26,
            "return": [
                "int",
                "float",
                "str",
                "Callable",
                "models.Question",
                "dict[str, str]"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "int",
                    "uuid.UUID",
                    "bytes",
                    "list[str]",
                    "tuple[typing.Union[str,str]]",
                    "List[str]",
                    "bool",
                    "Tuple[str, str]"
                ]
            }
        },
        "deregister_vehicle": {
            "name": "deregister_vehicle",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "vehicle": [
                    "vehicles.models.Vehicle",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "update_location": {
            "name": "update_location",
            "location": 53,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "vehicle": [
                    "vehicles.models.Vehicle",
                    "str",
                    "datetime.datetime",
                    "bool"
                ],
                "location": [
                    "str",
                    "django.contrib.gis.geos.Point",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "at": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "vehicles.models.Vehicle",
                    "Union[str, int]",
                    "slice"
                ]
            }
        },
        "location_is_valid": {
            "name": "location_is_valid",
            "location": 84,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "location": [
                    "str",
                    "django.contrib.gis.geos.Point",
                    "None",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "allennlp.models.Model",
                    "models.KippoProject",
                    "Dict[str, Any]"
                ]
            }
        },
        "validate_location": {
            "name": "validate_location",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "location": [
                    "bool",
                    "django.contrib.gis.geos.Point",
                    "dict[str, typing.Any]",
                    "typing.Sequence[str]",
                    "Dict[str, Any]",
                    "zerver.models.Realm",
                    "Sequence[str]"
                ]
            }
        },
        "get_bearing_degrees": {
            "name": "get_bearing_degrees",
            "location": 99,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "from_location": [
                    "bool",
                    "django.contrib.gis.geos.Point",
                    "str",
                    "None",
                    "dict[str, str]",
                    "Optional[str]",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ],
                "to_location": [
                    "bool",
                    "django.contrib.gis.geos.Point",
                    "str",
                    "None",
                    "dict[str, str]",
                    "Optional[str]",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "point_from_lat_lng": {
            "name": "point_from_lat_lng",
            "location": 120,
            "return": [
                "Point",
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "lat": [
                    "float",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "tuple",
                    "tuple[]"
                ],
                "lng": [
                    "float",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "InvalidLocation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/apps.py": {},
    "allygator-visualizer-master/visualizer/vehicles/conf.py": {
        "get_city_polygon": {
            "name": "get_city_polygon",
            "location": 26,
            "return": [
                "str",
                "Dict[str, int]",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/models.py": {},
    "allygator-visualizer-master/visualizer/vehicles/serializers.py": {
        "VehicleSerializer.create": {
            "name": "create",
            "location": 25,
            "return": [
                "vehicles_models.Vehicle"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "VehicleLocationSerializer.validate": {
            "name": "validate",
            "location": 43,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "_T0"
                ]
            }
        },
        "VehicleLocationSerializer.create": {
            "name": "create",
            "location": 59,
            "return": [
                "vehicles_models.VehicleLocation"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/migrations/0001_initial.py": {},
    "allygator-visualizer-master/visualizer/vehicles/migrations/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_deregister_vehicle.py": {
        "DeregisterVehicleTests.test_removes_active_flag": {
            "name": "test_removes_active_flag",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeregisterVehicleTests.test_unsets_current_location_and_bearing": {
            "name": "test_unsets_current_location_and_bearing",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeregisterVehicleTests.test_raises_exception_when_already_inactive": {
            "name": "test_raises_exception_when_already_inactive",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_location_is_valid.py": {
        "LocationIsValidTests.test_city_center_valid": {
            "name": "test_city_center_valid",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_huge_distance_away_invalid": {
            "name": "test_huge_distance_away_invalid",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_3km_away_valid": {
            "name": "test_3km_away_valid",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_west_invalid": {
            "name": "test_over_3km_away_west_invalid",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_east_invalid": {
            "name": "test_over_3km_away_east_invalid",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_north_invalid": {
            "name": "test_over_3km_away_north_invalid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_south_invalid": {
            "name": "test_over_3km_away_south_invalid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_register_vehicle.py": {
        "RegisterVehicleTests.test_creates_and_returns_active_vehicle": {
            "name": "test_creates_and_returns_active_vehicle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterVehicleTests.test_creates_multiple_vehicles": {
            "name": "test_creates_multiple_vehicles",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterVehicleTests.test_reactivates_existing_inactive_vehicle": {
            "name": "test_reactivates_existing_inactive_vehicle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterVehicleTests.test_raises_exception_when_already_active": {
            "name": "test_raises_exception_when_already_active",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_update_location.py": {
        "UpdateLocationTests.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_raises_exception_given_invalid_location": {
            "name": "test_raises_exception_given_invalid_location",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_sets_current_location_on_vehicle": {
            "name": "test_sets_current_location_on_vehicle",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_updates_current_location_on_vehicle": {
            "name": "test_updates_current_location_on_vehicle",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_adds_vehicle_location_entry": {
            "name": "test_adds_vehicle_location_entry",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_sets_bearing_when_previous_location": {
            "name": "test_sets_bearing_when_previous_location",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_does_not_set_bearing_when_previous_update_after_new": {
            "name": "test_does_not_set_bearing_when_previous_update_after_new",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/views/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/test_deregister_vehicle.py": {
        "DeregisterVehicleTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeregisterVehicleTests.test_post_deregisters_vehicle_with_given_uuid": {
            "name": "test_post_deregisters_vehicle_with_given_uuid",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/test_list_register_vehicle.py": {
        "ListRegisterVehicleTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListRegisterVehicleTests.test_post_creates_vehicle_with_given_uuid": {
            "name": "test_post_creates_vehicle_with_given_uuid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListRegisterVehicleTests.test_post_reactivates_existing_vehicle_with_given_uuid": {
            "name": "test_post_reactivates_existing_vehicle_with_given_uuid",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListRegisterVehicleTests.test_get_lists_existing_vehicles": {
            "name": "test_get_lists_existing_vehicles",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/test_location_update.py": {
        "LocationUpdateTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationUpdateTests.test_post_sets_current_location_and_archives_record": {
            "name": "test_post_sets_current_location_and_archives_record",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationUpdateTests.test_rejects_updates_out_of_city_boundary": {
            "name": "test_rejects_updates_out_of_city_boundary",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/urls/api.py": {},
    "allygator-visualizer-master/visualizer/vehicles/urls/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/views/api.py": {
        "VehicleAPIMixin.get_queryset": {
            "name": "get_queryset",
            "location": 19,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleAPIMixin.create": {
            "name": "create",
            "location": 27,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "str",
                "bool",
                "models.Dashboard",
                "contests.models.User",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "dict",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "VehicleAPIMixin.destroy": {
            "name": "destroy",
            "location": 31,
            "return": [
                "Response",
                "str",
                "int",
                "Food.models.Product"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "DeregisterVehicle.perform_destroy": {
            "name": "perform_destroy",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "LocationUpdate.get_serializer_context": {
            "name": "get_serializer_context",
            "location": 59,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/views/__init__.py": {},
    "allygator-visualizer-master/visualizer/visualizer/urls.py": {},
    "allygator-visualizer-master/visualizer/visualizer/wsgi.py": {},
    "allygator-visualizer-master/visualizer/visualizer/__init__.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/base.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/dev.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/prod.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/__init__.py": {}
}
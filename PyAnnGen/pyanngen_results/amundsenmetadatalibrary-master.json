{
    "amundsenmetadatalibrary-master/setup.py": {},
    "amundsenmetadatalibrary-master/metadata_service/config.py": {},
    "amundsenmetadatalibrary-master/metadata_service/exception.py": {
        "NotFoundException.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/metadata_wsgi.py": {},
    "amundsenmetadatalibrary-master/metadata_service/util.py": {},
    "amundsenmetadatalibrary-master/metadata_service/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 46,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/badge.py": {
        "BadgeAPI.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadgeAPI.get": {
            "name": "get",
            "location": 33,
            "return": [
                "tuple[]",
                "str",
                "int",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadgeCommon.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "metadata_service.proxy.base_proxy.BaseProxy"
                ]
            }
        },
        "BadgeCommon.put": {
            "name": "put",
            "location": 45,
            "return": [
                "Tuple[(Any, http.HTTPStatus)]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "resource_type": [
                    "metadata_service.entity.resource_type.ResourceType"
                ],
                "badge_name": [
                    "str"
                ],
                "category": [
                    "str"
                ]
            }
        },
        "BadgeCommon.delete": {
            "name": "delete",
            "location": 87,
            "return": [
                "Tuple[(Any, http.HTTPStatus)]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "badge_name": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "resource_type": [
                    "metadata_service.entity.resource_type.ResourceType"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/column.py": {
        "ColumnLineageAPI.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnLineageAPI.get": {
            "name": "get",
            "location": 31,
            "return": [
                "tuple[]",
                "tuple[dict[typing.Text, typing.Text]]",
                "dict",
                "Optional[str]",
                "str",
                "salon.models.Stylist",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "column_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ColumnDescriptionAPI.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnDescriptionAPI.put": {
            "name": "put",
            "location": 57,
            "return": [
                "Optional[str]",
                "tuple[None]",
                "tuple[dict[typing.Text, str]]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "column_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ColumnDescriptionAPI.get": {
            "name": "get",
            "location": 78,
            "return": [
                "tuple[dict[typing.Text, typing.Union[str,None]]]",
                "tuple[dict[typing.Text, str]]",
                "Optional[str]",
                "tuple[dict[typing.Text, typing.Text]]",
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "server.models.User",
                "int",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "str",
                    "tracim.models.data.Workspace",
                    "int"
                ],
                "column_name": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "str",
                    "tracim.models.data.Workspace",
                    "int"
                ]
            }
        },
        "ColumnBadgeAPI.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnBadgeAPI.put": {
            "name": "put",
            "location": 106,
            "return": [
                "Optional[str]",
                "Callable[..., None]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Callable",
                    "int",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ],
                "badge": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Callable",
                    "int",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ],
                "column_name": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Callable",
                    "int",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ColumnBadgeAPI.delete": {
            "name": "delete",
            "location": 116,
            "return": [
                "Optional[str]",
                "bool",
                "List[str]",
                "deeplearning.ml4pl.models.logger.Logger"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "recidiviz.persistence.entity.base_entity.Entity",
                    "recidiviz.persistence.entity.core_entity.CoreEntity"
                ],
                "badge": [
                    "str",
                    "recidiviz.persistence.entity.base_entity.Entity",
                    "recidiviz.persistence.entity.core_entity.CoreEntity"
                ],
                "column_name": [
                    "str",
                    "recidiviz.persistence.entity.base_entity.Entity",
                    "recidiviz.persistence.entity.core_entity.CoreEntity"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/dashboard.py": {
        "DashboardDetailAPI.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardDetailAPI.get": {
            "name": "get",
            "location": 32,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "str",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardDescriptionAPI.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardDescriptionAPI.get": {
            "name": "get",
            "location": 49,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "str",
                "tuple[dict[typing.Text, typing.Text]]",
                "int",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardDescriptionAPI.put": {
            "name": "put",
            "location": 63,
            "return": [
                "tuple[None]",
                "tuple[dict[typing.Text, str]]",
                "bool",
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "DashboardBadgeAPI.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardBadgeAPI.put": {
            "name": "put",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "badge": [
                    "str",
                    "int"
                ]
            }
        },
        "DashboardBadgeAPI.delete": {
            "name": "delete",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "badge": [
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "DashboardTagAPI.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTagAPI.put": {
            "name": "put",
            "location": 128,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "DashboardTagAPI.delete": {
            "name": "delete",
            "location": 145,
            "return": [
                "Dict[str, Any]",
                "Iterable[str]",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/healthcheck.py": {
        "healthcheck": {
            "name": "healthcheck",
            "location": 10,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/popular_tables.py": {
        "PopularTablesAPI.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopularTablesAPI.get": {
            "name": "get",
            "location": 25,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/system.py": {
        "Neo4jDetailAPI.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jDetailAPI.get": {
            "name": "get",
            "location": 22,
            "return": [
                "tuple[dict[typing.Text, int]]",
                "tuple[dict[typing.Text, typing.Text]]",
                "bool",
                "str",
                "Sequence[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatisticsMetricsAPI.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatisticsMetricsAPI.get": {
            "name": "get",
            "location": 39,
            "return": [
                "tuple[dict[typing.Text, typing.Union[int,dict[str, str],list[]]]]",
                "str",
                "tuple[dict[typing.Text, typing.Text]]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/table.py": {
        "TableDetailAPI.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableDetailAPI.get": {
            "name": "get",
            "location": 32,
            "return": [
                "tuple[]",
                "tuple[dict[typing.Text, str]]",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "float",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TableLineageAPI.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableLineageAPI.get": {
            "name": "get",
            "location": 51,
            "return": [
                "tuple[]",
                "tuple[dict[typing.Text, typing.Text]]",
                "dict",
                "Optional[str]",
                "str",
                "salon.models.Stylist",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool"
                ]
            }
        },
        "TableOwnerAPI.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableOwnerAPI.put": {
            "name": "put",
            "location": 75,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "accounts.models.Account"
                ],
                "owner": [
                    "str",
                    "accounts.models.Account"
                ]
            }
        },
        "TableOwnerAPI.delete": {
            "name": "delete",
            "location": 87,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "TableDescriptionAPI.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableDescriptionAPI.get": {
            "name": "get",
            "location": 109,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "tuple[dict[typing.Text, typing.Text]]",
                "bool",
                "List[dict]",
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "TableDescriptionAPI.put": {
            "name": "put",
            "location": 124,
            "return": [
                "tuple[None]",
                "Optional[str]",
                "tuple[dict[typing.Text, str]]",
                "Optional[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "transfer.models.Scope"
                ]
            }
        },
        "TableTagAPI.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTagAPI.put": {
            "name": "put",
            "location": 154,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "TableTagAPI.delete": {
            "name": "delete",
            "location": 172,
            "return": [
                "Dict[str, Any]",
                "Iterable[str]",
                "Iterable[Any]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "TableBadgeAPI.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableBadgeAPI.put": {
            "name": "put",
            "location": 199,
            "return": [
                "str",
                "transfer.models.Scope",
                "zerver.models.Realm",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "badge": [
                    "str",
                    "int"
                ]
            }
        },
        "TableBadgeAPI.delete": {
            "name": "delete",
            "location": 209,
            "return": [
                "str",
                "zerver.models.Realm",
                "models.Telegram_Chat"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "badge": [
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "TableDashboardAPI.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableDashboardAPI.get": {
            "name": "get",
            "location": 229,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "int",
                "bool",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/tag.py": {
        "TagAPI.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagAPI.get": {
            "name": "get",
            "location": 35,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagCommon.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "metadata_service.proxy.base_proxy.BaseProxy"
                ]
            }
        },
        "TagCommon.put": {
            "name": "put",
            "location": 47,
            "return": [
                "Tuple[(Any, http.HTTPStatus)]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "resource_type": [
                    "metadata_service.entity.resource_type.ResourceType"
                ],
                "tag": [
                    "str"
                ],
                "tag_type": [
                    "str"
                ]
            }
        },
        "TagCommon.delete": {
            "name": "delete",
            "location": 96,
            "return": [
                "Tuple[(Any, http.HTTPStatus)]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "tag": [
                    "str"
                ],
                "resource_type": [
                    "metadata_service.entity.resource_type.ResourceType"
                ],
                "tag_type": [
                    "str"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/user.py": {
        "UserDetailAPI.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailAPI.get": {
            "name": "get",
            "location": 39,
            "return": [
                "tuple[]",
                "zerver.models.Realm",
                "tuple[dict[typing.Text, str]]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailAPI.put": {
            "name": "put",
            "location": 51,
            "return": [
                "bool",
                "tuple[dict[typing.Text, typing.Text]]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowsAPI.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowsAPI.get": {
            "name": "get",
            "location": 88,
            "return": [
                "tuple[dict[, list[]]]",
                "str",
                "tuple[dict[typing.Text, str]]",
                "tuple[dict[typing.Text, typing.Text]]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "app.models.Tweet",
                "app.models.Position",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "jgikbase.idmapping.core.user.User"
                ]
            }
        },
        "UserFollowAPI.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowAPI.put": {
            "name": "put",
            "location": 135,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "str",
                "models.Credentials",
                "x509_pki.models.Certificate"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Union['KspNativeControl', int]",
                    "dict[, ]",
                    "dict",
                    "Optional[int]"
                ],
                "resource_type": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Union['KspNativeControl', int]",
                    "dict[, ]",
                    "dict",
                    "Optional[int]"
                ],
                "resource_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Union['KspNativeControl', int]",
                    "dict[, ]",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "UserFollowAPI.delete": {
            "name": "delete",
            "location": 161,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "viewer.models.Archive",
                "bool",
                "list",
                "daylighdb.models.Photo"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "Union['KspNativeControl', int]",
                    "str",
                    "int"
                ],
                "resource_type": [
                    "Union['KspNativeControl', int]",
                    "str",
                    "int"
                ],
                "resource_id": [
                    "Union['KspNativeControl', int]",
                    "str",
                    "int"
                ]
            }
        },
        "UserOwnsAPI.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOwnsAPI.get": {
            "name": "get",
            "location": 195,
            "return": [
                "tuple[dict[, list[]]]",
                "str",
                "tuple[dict[typing.Text, str]]",
                "tuple[dict[typing.Text, typing.Text]]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "app.models.Tweet",
                "app.models.Position",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "jgikbase.idmapping.core.user.User"
                ]
            }
        },
        "UserOwnAPI.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOwnAPI.put": {
            "name": "put",
            "location": 242,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[\"LocalizedString\"]",
                    "None"
                ],
                "resource_type": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "table_uri": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[\"LocalizedString\"]",
                    "None"
                ]
            }
        },
        "UserOwnAPI.delete": {
            "name": "delete",
            "location": 263,
            "return": [
                "tuple[dict[typing.Text, str]]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "resource_type": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "table_uri": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "UserReadsAPI.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserReadsAPI.get": {
            "name": "get",
            "location": 285,
            "return": [
                "Optional[str]",
                "tuple[dict[typing.Text, ]]",
                "bool",
                "tuple[dict[typing.Text, list[]]]",
                "Callable[[], None]",
                "tuple[dict[typing.Text, str]]",
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "transfer.models.OrderID",
                    "Optional[str]"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/api/__init__.py": {
        "BaseAPI.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "bool",
                    "int"
                ],
                "str_type": [
                    "str"
                ],
                "client": [
                    "metadata_service.proxy.base_proxy.BaseProxy"
                ]
            }
        },
        "BaseAPI.get": {
            "name": "get",
            "location": 22,
            "return": [
                "Iterable[Optional[Union[(int, Mapping)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAPI.get_with_kwargs": {
            "name": "get_with_kwargs",
            "location": 28,
            "return": [
                "Iterable[Optional[Union[(int, Mapping)]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/entity/badge.py": {},
    "amundsenmetadatalibrary-master/metadata_service/entity/dashboard_detail.py": {},
    "amundsenmetadatalibrary-master/metadata_service/entity/dashboard_query.py": {},
    "amundsenmetadatalibrary-master/metadata_service/entity/dashboard_summary.py": {},
    "amundsenmetadatalibrary-master/metadata_service/entity/description.py": {},
    "amundsenmetadatalibrary-master/metadata_service/entity/resource_type.py": {
        "to_resource_type": {
            "name": "to_resource_type",
            "location": 14,
            "return": [
                "ResourceType"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/entity/tag_detail.py": {},
    "amundsenmetadatalibrary-master/metadata_service/entity/__init__.py": {},
    "amundsenmetadatalibrary-master/metadata_service/proxy/atlas_proxy.py": {
        "parse_table_qualified_name": {
            "name": "parse_table_qualified_name",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "qualified_name": [
                    "str"
                ],
                "qn_regex": [
                    "Pattern"
                ]
            }
        },
        "make_table_qualified_name": {
            "name": "make_table_qualified_name",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "None",
                    "bool",
                    "cmk.utils.type_defs.SectionName"
                ],
                "db": [
                    "str",
                    "None"
                ]
            }
        },
        "parse_table_qualified_name.apply_qn_regex": {
            "name": "apply_qn_regex",
            "location": 73,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ],
                "table_qn_regex": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "AtlasProxy.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._extract_info_from_uri": {
            "name": "_extract_info_from_uri",
            "location": 168,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._parse_bookmark_qn": {
            "name": "_parse_bookmark_qn",
            "location": 191,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "bookmark_qn": [
                    "str"
                ]
            }
        },
        "AtlasProxy._get_user_details": {
            "name": "_get_user_details",
            "location": 215,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "AtlasProxy._get_table_entity": {
            "name": "_get_table_entity",
            "location": 229,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "zerver.models.UserProfile",
                "src.domain.entity.user.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._get_user_entity": {
            "name": "_get_user_entity",
            "location": 249,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "models.UserAuth",
                "str",
                "django.contrib.auth.models.User"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "AtlasProxy._create_bookmark": {
            "name": "_create_bookmark",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "None",
                    "Optional[datetime.timedelta]",
                    "django.contrib.contenttypes.models.ContentType"
                ],
                "user_guid": [
                    "str"
                ],
                "bookmark_qn": [
                    "str"
                ],
                "table_uri": [
                    "str"
                ]
            }
        },
        "AtlasProxy._get_bookmark_entity": {
            "name": "_get_bookmark_entity",
            "location": 285,
            "return": [
                "str",
                "float",
                "bool",
                "int",
                "typing.Callable[, ]",
                "bytes",
                "dict[str, typing.Union[str,int,bool]]"
            ],
            "arguments": {
                "self": [],
                "entity_uri": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "AtlasProxy._get_column": {
            "name": "_get_column",
            "location": 318,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._serialize_columns": {
            "name": "_serialize_columns",
            "location": 339,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._get_reports": {
            "name": "_get_reports",
            "location": 410,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "guids": [
                    "List[str]"
                ]
            }
        },
        "AtlasProxy._get_owners": {
            "name": "_get_owners",
            "location": 433,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data_owners": [
                    "list"
                ],
                "fallback_owner": [
                    "str"
                ]
            }
        },
        "AtlasProxy.get_user": {
            "name": "get_user",
            "location": 454,
            "return": [
                "typing.Union[amundsen_common.models.user.User, None]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.create_update_user": {
            "name": "create_update_user",
            "location": 457,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_users": {
            "name": "get_users",
            "location": 460,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_table": {
            "name": "get_table",
            "location": 463,
            "return": [
                "Table",
                "Optional[str]",
                "zilencer.models.RemoteZulipServer",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._validate_date": {
            "name": "_validate_date",
            "location": 539,
            "return": [
                "Tuple[(Optional[datetime.datetime], Optional[str])]"
            ],
            "arguments": {
                "text_date": [
                    "str"
                ],
                "date_format": [
                    "str"
                ]
            }
        },
        "AtlasProxy._select_watermark_format": {
            "name": "_select_watermark_format",
            "location": 546,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "partition_names": [
                    "List[str]"
                ]
            }
        },
        "AtlasProxy._render_partition_key_name": {
            "name": "_render_partition_key_name",
            "location": 563,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Dict[str, 'LabwareDefinition']",
                    "dict[str, D]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AtlasProxy._get_table_watermarks": {
            "name": "_get_table_watermarks",
            "location": 576,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "User",
                    "Dict[str, Any]",
                    "users.models.User"
                ]
            }
        },
        "AtlasProxy.delete_owner": {
            "name": "delete_owner",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.add_owner": {
            "name": "add_owner",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_table_description": {
            "name": "get_table_description",
            "location": 688,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.put_table_description": {
            "name": "put_table_description",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._get_user_defined_glossary_guid": {
            "name": "_get_user_defined_glossary_guid",
            "location": 713,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._get_create_glossary_term": {
            "name": "_get_create_glossary_term",
            "location": 734,
            "return": [
                "str",
                "bytes",
                "float",
                "tuple[typing.Union[int,int]]",
                "db.models.Article",
                "bool",
                "List[db.models.Name]",
                "List[recidiviz.persistence.entity.state.entities.SentenceType]"
            ],
            "arguments": {
                "self": [],
                "term_name": [
                    "str",
                    "int",
                    "topicdb.core.models.language.Language"
                ]
            }
        },
        "AtlasProxy.add_tag": {
            "name": "add_tag",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.add_badge": {
            "name": "add_badge",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.delete_tag": {
            "name": "delete_tag",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.delete_badge": {
            "name": "delete_badge",
            "location": 805,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.put_column_description": {
            "name": "put_column_description",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_column_description": {
            "name": "get_column_description",
            "location": 829,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._serialize_popular_tables": {
            "name": "_serialize_popular_tables",
            "location": 843,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "entities": [
                    "list"
                ]
            }
        },
        "AtlasProxy.get_popular_tables": {
            "name": "get_popular_tables",
            "location": 871,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_latest_updated_ts": {
            "name": "get_latest_updated_ts",
            "location": 887,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_statistics": {
            "name": "get_statistics",
            "location": 898,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_tags": {
            "name": "get_tags",
            "location": 902,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_badges": {
            "name": "get_badges",
            "location": 927,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._get_resources_followed_by_user": {
            "name": "_get_resources_followed_by_user",
            "location": 943,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ],
                "resource_type": [
                    "str"
                ]
            }
        },
        "AtlasProxy._get_resources_owned_by_user": {
            "name": "_get_resources_owned_by_user",
            "location": 988,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ],
                "resource_type": [
                    "str"
                ]
            }
        },
        "AtlasProxy.split_list_to_chunks": {
            "name": "split_list_to_chunks",
            "location": 1042,
            "return": [
                "generator"
            ],
            "arguments": {
                "input_list": [
                    "list"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "AtlasProxy.get_dashboard_by_user_relation": {
            "name": "get_dashboard_by_user_relation",
            "location": 1047,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_table_by_user_relation": {
            "name": "get_table_by_user_relation",
            "location": 1051,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_frequently_used_tables": {
            "name": "get_frequently_used_tables",
            "location": 1062,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.add_resource_relation_by_user": {
            "name": "add_resource_relation_by_user",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.delete_resource_relation_by_user": {
            "name": "delete_resource_relation_by_user",
            "location": 1113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._parse_date": {
            "name": "_parse_date",
            "location": 1125,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "int"
                ]
            }
        },
        "AtlasProxy._get_readers": {
            "name": "_get_readers",
            "location": 1136,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "top": [
                    "Optional[int]"
                ]
            }
        },
        "AtlasProxy._get_programmatic_descriptions": {
            "name": "_get_programmatic_descriptions",
            "location": 1164,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "dict"
                ]
            }
        },
        "AtlasProxy.get_dashboard": {
            "name": "get_dashboard",
            "location": 1185,
            "return": [
                "metadata_service.entity.dashboard_detail.DashboardDetail"
            ],
            "arguments": {
                "self": [],
                "dashboard_uri": [
                    "str"
                ]
            }
        },
        "AtlasProxy.get_dashboard_description": {
            "name": "get_dashboard_description",
            "location": 1190,
            "return": [
                "metadata_service.entity.description.Description"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.put_dashboard_description": {
            "name": "put_dashboard_description",
            "location": 1194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_resources_using_table": {
            "name": "get_resources_using_table",
            "location": 1199,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.get_lineage": {
            "name": "get_lineage",
            "location": 1204,
            "return": [
                "amundsen_common.models.lineage.Lineage",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/base_proxy.py": {
        "BaseProxy.get_user": {
            "name": "get_user",
            "location": 27,
            "return": [
                "typing.Union[amundsen_common.models.user.User, None]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.create_update_user": {
            "name": "create_update_user",
            "location": 31,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_users": {
            "name": "get_users",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_table": {
            "name": "get_table",
            "location": 47,
            "return": [
                "amundsen_common.models.table.Table",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.delete_owner": {
            "name": "delete_owner",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.add_owner": {
            "name": "add_owner",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_table_description": {
            "name": "get_table_description",
            "location": 59,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.put_table_description": {
            "name": "put_table_description",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.add_tag": {
            "name": "add_tag",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.add_badge": {
            "name": "add_badge",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.delete_tag": {
            "name": "delete_tag",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.delete_badge": {
            "name": "delete_badge",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.put_column_description": {
            "name": "put_column_description",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_column_description": {
            "name": "get_column_description",
            "location": 95,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_popular_tables": {
            "name": "get_popular_tables",
            "location": 101,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_latest_updated_ts": {
            "name": "get_latest_updated_ts",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_statistics": {
            "name": "get_statistics",
            "location": 111,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_tags": {
            "name": "get_tags",
            "location": 115,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_badges": {
            "name": "get_badges",
            "location": 119,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_dashboard_by_user_relation": {
            "name": "get_dashboard_by_user_relation",
            "location": 123,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_table_by_user_relation": {
            "name": "get_table_by_user_relation",
            "location": 128,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_frequently_used_tables": {
            "name": "get_frequently_used_tables",
            "location": 133,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.add_resource_relation_by_user": {
            "name": "add_resource_relation_by_user",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.delete_resource_relation_by_user": {
            "name": "delete_resource_relation_by_user",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_dashboard": {
            "name": "get_dashboard",
            "location": 153,
            "return": [
                "metadata_service.entity.dashboard_detail.DashboardDetail"
            ],
            "arguments": {
                "self": [],
                "dashboard_uri": [
                    "str"
                ]
            }
        },
        "BaseProxy.get_dashboard_description": {
            "name": "get_dashboard_description",
            "location": 159,
            "return": [
                "metadata_service.entity.description.Description"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.put_dashboard_description": {
            "name": "put_dashboard_description",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_resources_using_table": {
            "name": "get_resources_using_table",
            "location": 170,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.get_lineage": {
            "name": "get_lineage",
            "location": 176,
            "return": [
                "amundsen_common.models.lineage.Lineage",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/gremlin_proxy.py": {
        "timestamp": {
            "name": "timestamp",
            "location": 76,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "is_reasonable_vertex_label": {
            "name": "is_reasonable_vertex_label",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "get_label_from": {
            "name": "get_label_from",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "_entity_type_or_enum_or_str": [
                    "str",
                    "Optional[datetime.datetime]",
                    "Optional[str]"
                ]
            }
        },
        "get_cardinality_for": {
            "name": "get_cardinality_for",
            "location": 101,
            "return": [
                "Dict[str, int]",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "_entity_type_or_enum": [
                    "type",
                    "Type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_safe_get_any": {
            "name": "_safe_get_any",
            "location": 234,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "dict",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "_safe_get_list": {
            "name": "_safe_get_list",
            "location": 264,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "root": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "denite.util.UserContext",
                    "Iterable",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_safe_get": {
            "name": "_safe_get",
            "location": 284,
            "return": [
                "int",
                "str",
                "list",
                "float",
                "Optional[Dict]",
                "Optional[List[str]]",
                "Optional[AbstractSet]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "int",
                    "Iterable",
                    "static_frame.core.util.GetItemKeyType"
                ]
            }
        },
        "_properties_or_drop_if_changed_except": {
            "name": "_properties_or_drop_if_changed_except",
            "location": 297,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {}
        },
        "_property_unchanged": {
            "name": "_property_unchanged",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_property_or_drop_if_changed": {
            "name": "_property_or_drop_if_changed",
            "location": 335,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Callable[[None], bool]]"
            ],
            "arguments": {}
        },
        "_properties_or_drop_except": {
            "name": "_properties_or_drop_except",
            "location": 352,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "label": [
                    "Callable[..., None]",
                    "float",
                    "bool",
                    "Callable",
                    "str",
                    "dict",
                    "Tuple[int, int]"
                ],
                "thing": [
                    "Union[(object, Dict[(str, Any)])]"
                ]
            }
        },
        "_properties_or_drop_of": {
            "name": "_properties_or_drop_of",
            "location": 366,
            "return": [
                "bool",
                "Type[T]",
                "Sequence[int]",
                "Callable[..., T]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Callable[..., T]",
                    "dep_check.models.Rules",
                    "Type['nanaimo.fixtures.Fixture']",
                    "Dict[str, Any]",
                    "List[str]",
                    "Tuple[()]"
                ],
                "thing": [
                    "Union[(object, Dict[(str, Any)])]"
                ]
            }
        },
        "_properties_except": {
            "name": "_properties_except",
            "location": 380,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "thing": [
                    "Union[(object, Dict[(str, Any)])]"
                ]
            }
        },
        "_properties_of": {
            "name": "_properties_of",
            "location": 391,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "thing": [
                    "Union[(object, Dict[(str, Any)])]"
                ]
            }
        },
        "_is_select_traversal": {
            "name": "_is_select_traversal",
            "location": 401,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Sequence[T]",
                    "list"
                ]
            }
        },
        "_vertex_property": {
            "name": "_vertex_property",
            "location": 409,
            "return": [
                "str",
                "List[str]",
                "models.Name"
            ],
            "arguments": {}
        },
        "_edge_property": {
            "name": "_edge_property",
            "location": 424,
            "return": [
                "str",
                "List[str]",
                "models.Name"
            ],
            "arguments": {}
        },
        "_property_or_drop": {
            "name": "_property_or_drop",
            "location": 428,
            "return": [
                "str",
                "Dict[str, Any]",
                "models.Name",
                "x509_pki.models.Certificate",
                "int"
            ],
            "arguments": {}
        },
        "_V": {
            "name": "_V",
            "location": 441,
            "return": [
                "T",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Hashable",
                    "Optional[Sequence[Any]]"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[bool]"
                ],
                "key_property_name": [
                    "Optional[str]"
                ],
                "g": [
                    "Optional[str]",
                    "Optional[datetime.datetime]",
                    "int",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "_has": {
            "name": "_has",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "_upsert": {
            "name": "_upsert",
            "location": 517,
            "return": [
                "TYPE"
            ],
            "arguments": {}
        },
        "_link": {
            "name": "_link",
            "location": 551,
            "return": [
                "Optional[TYPE]"
            ],
            "arguments": {}
        },
        "_expire_other_links": {
            "name": "_expire_other_links",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_expire_link": {
            "name": "_expire_link",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_edges_between": {
            "name": "_edges_between",
            "location": 727,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "_edges_from": {
            "name": "_edges_from",
            "location": 757,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {}
        },
        "_edges_to": {
            "name": "_edges_to",
            "location": 791,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "_parse_gremlin_server_error": {
            "name": "_parse_gremlin_server_error",
            "location": 823,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "exception": [
                    "Exception"
                ]
            }
        },
        "FromResultSet.generator": {
            "name": "generator",
            "location": 127,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "cls": [
                    "List[Tuple[str]]",
                    "List[Dict[str, Any]]",
                    "list"
                ],
                "result_set": [
                    "List[Tuple[str]]",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "FromResultSet.iterate": {
            "name": "iterate",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "OrderedDict",
                    "str"
                ],
                "result_set": [
                    "OrderedDict",
                    "str"
                ]
            }
        },
        "FromResultSet.next": {
            "name": "next",
            "location": 138,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ],
                "result_set": [
                    "dict",
                    "int"
                ]
            }
        },
        "FromResultSet.toList": {
            "name": "toList",
            "location": 145,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type"
                ],
                "result_set": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "FromResultSet.toSet": {
            "name": "toSet",
            "location": 149,
            "return": [
                "set"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Mapping[str, T]"
                ],
                "result_set": [
                    "str",
                    "bool",
                    "Mapping[str, T]"
                ]
            }
        },
        "FromResultSet.getOptional": {
            "name": "getOptional",
            "location": 153,
            "return": [
                "List[dict]",
                "int",
                "str",
                "Optional[Dict]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "transfer.models.PaymentMethod"
                ],
                "result_set": [
                    "str",
                    "Dict[str, str]",
                    "transfer.models.PaymentMethod"
                ]
            }
        },
        "FromResultSet.getOnly": {
            "name": "getOnly",
            "location": 160,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.sql.schema.Table",
                    "bytes",
                    "dict",
                    "Type[T]",
                    "tracim.models.data.Content",
                    "List[manager.models.language.Language]"
                ],
                "result_set": [
                    "str",
                    "sqlalchemy.sql.schema.Table",
                    "bytes",
                    "dict",
                    "Type[T]",
                    "tracim.models.data.Content",
                    "List[manager.models.language.Language]"
                ]
            }
        },
        "ExecuteQuery.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [
                "gremlin_python.process.graph_traversal.V"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "get": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "ClientQueryExecutor.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientQueryExecutor.__call__": {
            "name": "__call__",
            "location": 193,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Optional[str]"
                ],
                "get": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "RetryingClientQueryExecutor.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ],
                "traversal_translator": [
                    "Callable[([Any], str)]"
                ],
                "is_retryable": [
                    "Callable[([Exception], bool)]"
                ]
            }
        },
        "RetryingClientQueryExecutor.__enter__": {
            "name": "__enter__",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryingClientQueryExecutor.__exit__": {
            "name": "__exit__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryingClientQueryExecutor.__call__": {
            "name": "__call__",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Type",
                    "bool",
                    "str",
                    "Optional[int]",
                    "complex"
                ],
                "get": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "_properties_or_drop_if_changed_except.p": {
            "name": "p",
            "location": 314,
            "return": [
                "str",
                "Union[str, int]",
                "x509_pki.models.Certificate",
                "Optional[int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[IO[bytes]]",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbstractGremlinProxy.__init__": {
            "name": "__init__",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.drop": {
            "name": "drop",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.g": {
            "name": "g",
            "location": 881,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_is_retryable": {
            "name": "get_is_retryable",
            "location": 889,
            "return": [
                "Callable[([Exception], bool)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "Type"
                ],
                "method_name": [
                    "str"
                ]
            }
        },
        "AbstractGremlinProxy.script_translator": {
            "name": "script_translator",
            "location": 897,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "AbstractGremlinProxy.possibly_signed_ws_client_request_or_url": {
            "name": "possibly_signed_ws_client_request_or_url",
            "location": 901,
            "return": [
                "typing.Union[tornado.httpclient.HTTPRequest, builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.client": {
            "name": "client",
            "location": 904,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.query_executor": {
            "name": "query_executor",
            "location": 910,
            "return": [
                "RetryingClientQueryExecutor"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._is_retryable_exception": {
            "name": "_is_retryable_exception",
            "location": 917,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "Set[str]"
                ]
            }
        },
        "AbstractGremlinProxy._submit": {
            "name": "_submit",
            "location": 923,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.is_healthy": {
            "name": "is_healthy",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_relationship": {
            "name": "get_relationship",
            "location": 962,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_user": {
            "name": "get_user",
            "location": 981,
            "return": [
                "Dict[str, str]",
                "amundsen_application.models.user.User",
                "Type[db.models.BaseModel]",
                "str",
                "zerver.models.UserProfile",
                "arxiv.users.domain.User",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_user": {
            "name": "_get_user",
            "location": 997,
            "return": [
                "Dict[str, str]",
                "amundsen_application.models.user.User",
                "Type[db.models.BaseModel]",
                "str",
                "zerver.models.UserProfile",
                "arxiv.users.domain.User",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.create_update_user": {
            "name": "create_update_user",
            "location": 1013,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_users": {
            "name": "get_users",
            "location": 1018,
            "return": [
                "zam_repondeur.models.Lecture",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "bob_emploi.frontend.api.user_pb2.User",
                "Dict[str, Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]",
                "contests.models.User",
                "domain.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_table": {
            "name": "get_table",
            "location": 1035,
            "return": [
                "Optional[str]",
                "zilencer.models.RemoteZulipServer",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_table_itself": {
            "name": "_get_table_itself",
            "location": 1080,
            "return": [
                "Mapping[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_table_columns": {
            "name": "_get_table_columns",
            "location": 1139,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_table_readers": {
            "name": "_get_table_readers",
            "location": 1166,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.delete_owner": {
            "name": "delete_owner",
            "location": 1188,
            "return": [
                "models.User",
                "bool",
                "projecmodels.User",
                "Optional[app.models.User]",
                "Optional['User']",
                "core_lib.core.models.Event"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._delete_owner": {
            "name": "_delete_owner",
            "location": 1192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.add_owner": {
            "name": "add_owner",
            "location": 1206,
            "return": [
                "datetime.datetime",
                "django.contrib.auth.models.AbstractBaseUser",
                "app.models.models.User",
                "Type[models.User]",
                "app.models.User",
                "Optional[services.user.transfer.models.User]",
                "str",
                "Optional[zerver.models.UserProfile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._add_owner": {
            "name": "_add_owner",
            "location": 1219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_table_description": {
            "name": "get_table_description",
            "location": 1226,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.put_table_description": {
            "name": "put_table_description",
            "location": 1243,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[Iterable[int]]",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._put_table_description": {
            "name": "_put_table_description",
            "location": 1252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.add_tag": {
            "name": "add_tag",
            "location": 1266,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, object]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._add_tag": {
            "name": "_add_tag",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.add_badge": {
            "name": "add_badge",
            "location": 1298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.delete_badge": {
            "name": "delete_badge",
            "location": 1302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.delete_tag": {
            "name": "delete_tag",
            "location": 1308,
            "return": [
                "str",
                "sqlalchemy.Column",
                "List[str]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._delete_tag": {
            "name": "_delete_tag",
            "location": 1327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.put_column_description": {
            "name": "put_column_description",
            "location": 1341,
            "return": [
                "models.User",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._put_column_description": {
            "name": "_put_column_description",
            "location": 1353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_column_description": {
            "name": "get_column_description",
            "location": 1370,
            "return": [
                "Dict[str, Any]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, models.DeviceRow]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_popular_tables": {
            "name": "get_popular_tables",
            "location": 1386,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_popular_tables_uris": {
            "name": "_get_popular_tables_uris",
            "location": 1427,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "num_entries": [
                    "int"
                ]
            }
        },
        "AbstractGremlinProxy.get_latest_updated_ts": {
            "name": "get_latest_updated_ts",
            "location": 1454,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_statistics": {
            "name": "get_statistics",
            "location": 1465,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_tags": {
            "name": "get_tags",
            "location": 1471,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_badges": {
            "name": "get_badges",
            "location": 1484,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_table_by_user_relation": {
            "name": "get_table_by_user_relation",
            "location": 1490,
            "return": [
                "Type",
                "str",
                "Optional[Dict]",
                "Hashable",
                "bool",
                "static_frame.core.util.DtypesSpecifier",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_dashboard_by_user_relation": {
            "name": "get_dashboard_by_user_relation",
            "location": 1549,
            "return": [
                "typing.Dict[builtins.str, typing.List[amundsen_common.models.dashboard.DashboardSummary]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_frequently_used_tables": {
            "name": "get_frequently_used_tables",
            "location": 1556,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.add_resource_relation_by_user": {
            "name": "add_resource_relation_by_user",
            "location": 1561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.delete_resource_relation_by_user": {
            "name": "delete_resource_relation_by_user",
            "location": 1577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_dashboard": {
            "name": "get_dashboard",
            "location": 1593,
            "return": [
                "metadata_service.entity.dashboard_detail.DashboardDetail"
            ],
            "arguments": {
                "self": [],
                "dashboard_uri": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AbstractGremlinProxy.get_dashboard_description": {
            "name": "get_dashboard_description",
            "location": 1600,
            "return": [
                "metadata_service.entity.description.Description"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.put_dashboard_description": {
            "name": "put_dashboard_description",
            "location": 1606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy.get_resources_using_table": {
            "name": "get_resources_using_table",
            "location": 1613,
            "return": [
                "typing.Dict[builtins.str, typing.List[amundsen_common.models.dashboard.DashboardSummary]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_user_table_relationship_clause": {
            "name": "_get_user_table_relationship_clause",
            "location": 1618,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "list",
                "Type[db.models.BaseModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_user_table_relationship_clause_matcher": {
            "name": "_get_user_table_relationship_clause_matcher",
            "location": 1641,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._get_parent_table_from_column": {
            "name": "_get_parent_table_from_column",
            "location": 1658,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxy._convert_to_application": {
            "name": "_convert_to_application",
            "location": 1674,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "jumeaux.models.Res2ResAddOnPayload",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._convert_to_description": {
            "name": "_convert_to_description",
            "location": 1682,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._convert_to_user": {
            "name": "_convert_to_user",
            "location": 1686,
            "return": [
                "dict",
                "amundsen_application.models.user.User"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._convert_to_source": {
            "name": "_convert_to_source",
            "location": 1702,
            "return": [
                "Dict[str, Any]",
                "Optional[IO[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._convert_to_statistics": {
            "name": "_convert_to_statistics",
            "location": 1705,
            "return": [
                "Type",
                "str",
                "Mapping[str, Any]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._convert_to_tag": {
            "name": "_convert_to_tag",
            "location": 1712,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._convert_to_watermark": {
            "name": "_convert_to_watermark",
            "location": 1715,
            "return": [
                "db.models.Name"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "AbstractGremlinProxy._get_vertex_type_from_resource_type": {
            "name": "_get_vertex_type_from_resource_type",
            "location": 1722,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "metadata_service.entity.resource_type.ResourceType"
                ]
            }
        },
        "AbstractGremlinProxy._get_edge_type_from_user_resource_rel_type": {
            "name": "_get_edge_type_from_user_resource_rel_type",
            "location": 1730,
            "return": [
                "str",
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "Optional[List[\"custom_index\"]]"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "metadata_service.util.UserResourceRel"
                ]
            }
        },
        "AbstractGremlinProxy.get_lineage": {
            "name": "get_lineage",
            "location": 1740,
            "return": [
                "amundsen_common.models.lineage.Lineage"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericGremlinProxy.__init__": {
            "name": "__init__",
            "location": 1755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericGremlinProxy.script_translator": {
            "name": "script_translator",
            "location": 1782,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "GenericGremlinProxy.possibly_signed_ws_client_request_or_url": {
            "name": "possibly_signed_ws_client_request_or_url",
            "location": 1787,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryingClientQueryExecutor.__call__.callable": {
            "name": "callable",
            "location": 224,
            "return": [
                "bool",
                "str",
                "lunch_buddies.models.polls.Poll"
            ],
            "arguments": {}
        },
        "AbstractGremlinProxy.get_is_retryable.is_retryable": {
            "name": "is_retryable",
            "location": 890,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Iterable[Any]]",
                "Mapping[str, Any]",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "dict"
            ],
            "arguments": {
                "exception": [
                    "Optional[str]",
                    "Optional[zerver.models.Stream]",
                    "str"
                ]
            }
        },
        "AbstractGremlinProxy.get_table.transform": {
            "name": "transform",
            "location": 1054,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List[magic.models.Deck]",
                    "Dict[str, int]",
                    "Match",
                    "Optional[datetime.timedelta]"
                ]
            }
        },
        "AbstractGremlinProxy._get_user_table_relationship_clause.relation_matcher": {
            "name": "relation_matcher",
            "location": 1632,
            "return": [
                "Mapping[str, Any]",
                "List[zerver.models.DefaultStreamGroup]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "g": [
                    "denite.util.UserContext",
                    "logging.LogRecord",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "AbstractGremlinProxy._get_user_table_relationship_clause_matcher.matcher": {
            "name": "matcher",
            "location": 1654,
            "return": [],
            "arguments": {
                "_g": [
                    "str",
                    "Optional[str]",
                    "int",
                    "BaseException",
                    "bytes"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/janus_graph_proxy.py": {
        "JanusGraphGremlinProxy.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JanusGraphGremlinProxy.script_translator": {
            "name": "script_translator",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "JanusGraphGremlinProxy.possibly_signed_ws_client_request_or_url": {
            "name": "possibly_signed_ws_client_request_or_url",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/neo4j_proxy.py": {
        "Neo4jProxy.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.is_healthy": {
            "name": "is_healthy",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_table": {
            "name": "get_table",
            "location": 97,
            "return": [
                "Table",
                "Optional[str]",
                "zilencer.models.RemoteZulipServer",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy._exec_col_query": {
            "name": "_exec_col_query",
            "location": 131,
            "return": [
                "tuple[typing.Optional[list[Column]]]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Neo4jProxy._exec_usage_query": {
            "name": "_exec_usage_query",
            "location": 179,
            "return": [
                "list[Reader]",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "int",
                    "table.Table"
                ]
            }
        },
        "Neo4jProxy._exec_table_query": {
            "name": "_exec_table_query",
            "location": 199,
            "return": [
                "Optional[str]",
                "dict",
                "int",
                "str",
                "Union[server.models.Bike, int]"
            ],
            "arguments": {
                "self": [],
                "table_uri": [
                    "str",
                    "Exception",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Neo4jProxy._extract_programmatic_descriptions_from_query": {
            "name": "_extract_programmatic_descriptions_from_query",
            "location": 286,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "raw_prog_descriptions": [
                    "dict"
                ]
            }
        },
        "Neo4jProxy._safe_get": {
            "name": "_safe_get",
            "location": 298,
            "return": [
                "None",
                "Optional[int]",
                "dict[str, str]",
                "bool",
                "dict[, ]",
                "str",
                "dict[str, int]",
                "dict",
                "dict[str, list[str]]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Tuple[str]"
                ]
            }
        },
        "Neo4jProxy._execute_cypher_query": {
            "name": "_execute_cypher_query",
            "location": 312,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy._make_badges": {
            "name": "_make_badges",
            "location": 329,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "badges": [
                    "Iterable"
                ]
            }
        },
        "Neo4jProxy._get_resource_description": {
            "name": "_get_resource_description",
            "location": 342,
            "return": [
                "Description",
                "str",
                "list",
                "Optional[Dict[str, Any]]",
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_table_description": {
            "name": "get_table_description",
            "location": 365,
            "return": [
                "str",
                "Union[type, Tuple[type, ...]]",
                "Type[db.models.BaseModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy._put_resource_description": {
            "name": "_put_resource_description",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.put_table_description": {
            "name": "put_table_description",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_column_description": {
            "name": "get_column_description",
            "location": 445,
            "return": [
                "None",
                "zerver.models.UserProfile",
                "arxiv.users.domain.User",
                "zerver.models.Realm",
                "bool",
                "recidiviz.persistence.entity.base_entity.Entity",
                "server.models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.put_column_description": {
            "name": "put_column_description",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.add_owner": {
            "name": "add_owner",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.delete_owner": {
            "name": "delete_owner",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.add_badge": {
            "name": "add_badge",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.delete_badge": {
            "name": "delete_badge",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "badge_name": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "resource_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Neo4jProxy.get_badges": {
            "name": "get_badges",
            "location": 681,
            "return": [
                "list[Badge]",
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.add_tag": {
            "name": "add_tag",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.delete_tag": {
            "name": "delete_tag",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_tags": {
            "name": "get_tags",
            "location": 793,
            "return": [
                "list[TagDetail]",
                "str",
                "set",
                "dict",
                "models.Match",
                "List[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_latest_updated_ts": {
            "name": "get_latest_updated_ts",
            "location": 818,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_statistics": {
            "name": "get_statistics",
            "location": 837,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "dict[, ]",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy._get_global_popular_tables_uris": {
            "name": "_get_global_popular_tables_uris",
            "location": 877,
            "return": [
                "list[]",
                "bool",
                "str",
                "List[aw_core.models.Event]",
                "list"
            ],
            "arguments": {
                "self": [],
                "num_entries": [
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "list[B]",
                    "List['Block']",
                    "int"
                ]
            }
        },
        "Neo4jProxy._get_personal_popular_tables_uris": {
            "name": "_get_personal_popular_tables_uris",
            "location": 905,
            "return": [
                "list[]",
                "bool",
                "str",
                "List[aw_core.models.Event]",
                "list"
            ],
            "arguments": {
                "self": [],
                "num_entries": [
                    "str",
                    "fal.models.Season"
                ],
                "user_id": [
                    "str",
                    "fal.models.Season"
                ]
            }
        },
        "Neo4jProxy.get_popular_tables": {
            "name": "get_popular_tables",
            "location": 936,
            "return": [
                "list[]",
                "str",
                "list[PopularTable]",
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_user": {
            "name": "get_user",
            "location": 979,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.create_update_user": {
            "name": "create_update_user",
            "location": 1010,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy._create_props_body": {
            "name": "_create_props_body",
            "location": 1049,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record_dict": [
                    "dict"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "Neo4jProxy.get_users": {
            "name": "get_users",
            "location": 1065,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy._build_user_from_record": {
            "name": "_build_user_from_record",
            "location": 1076,
            "return": [
                "Dict[str, str]",
                "abilian.core.models.subjects.User",
                "type",
                "zerver.models.UserProfile",
                "Dict[str, Any]"
            ],
            "arguments": {
                "record": [
                    "dict"
                ],
                "manager_name": [
                    "str"
                ]
            }
        },
        "Neo4jProxy._get_user_resource_relationship_clause": {
            "name": "_get_user_resource_relationship_clause",
            "location": 1104,
            "return": [
                "str"
            ],
            "arguments": {
                "relation_type": [
                    "metadata_service.util.UserResourceRel"
                ],
                "id": [
                    "str"
                ],
                "user_key": [
                    "str"
                ],
                "resource_type": [
                    "metadata_service.entity.resource_type.ResourceType"
                ]
            }
        },
        "Neo4jProxy.get_dashboard_by_user_relation": {
            "name": "get_dashboard_by_user_relation",
            "location": 1139,
            "return": [
                "dict[, list[DashboardSummary]]",
                "Type",
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_table_by_user_relation": {
            "name": "get_table_by_user_relation",
            "location": 1193,
            "return": [
                "dict[, list[PopularTable]]",
                "List[str]",
                "type",
                "dict",
                "List[agate.Table]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_frequently_used_tables": {
            "name": "get_frequently_used_tables",
            "location": 1229,
            "return": [
                "dict[typing.Text, list[PopularTable]]",
                "str",
                "list",
                "Dict[str, Any]",
                "List[Dict]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.add_resource_relation_by_user": {
            "name": "add_resource_relation_by_user",
            "location": 1262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.delete_resource_relation_by_user": {
            "name": "delete_resource_relation_by_user",
            "location": 1311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_dashboard": {
            "name": "get_dashboard",
            "location": 1346,
            "return": [
                "str",
                "Callable",
                "dict",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Neo4jProxy.get_dashboard_description": {
            "name": "get_dashboard_description",
            "location": 1446,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.put_dashboard_description": {
            "name": "put_dashboard_description",
            "location": 1458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_resources_using_table": {
            "name": "get_resources_using_table",
            "location": 1472,
            "return": [
                "dict[typing.Text, list[DashboardSummary]]",
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neo4jProxy.get_lineage": {
            "name": "get_lineage",
            "location": 1515,
            "return": [
                "Lineage",
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/neptune_proxy.py": {
        "_is_neptune_retryable_exception": {
            "name": "_is_neptune_retryable_exception",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "exception": [
                    "Exception"
                ]
            }
        },
        "NeptuneGremlinProxy.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxy.script_translator": {
            "name": "script_translator",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "NeptuneGremlinProxy.override_prepared_request_parameters": {
            "name": "override_prepared_request_parameters",
            "location": 124,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request_parameters": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "NeptuneGremlinProxy.possibly_signed_ws_client_request_or_url": {
            "name": "possibly_signed_ws_client_request_or_url",
            "location": 143,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxy._is_retryable_exception": {
            "name": "_is_retryable_exception",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "Set[str]"
                ]
            }
        },
        "NeptuneGremlinProxy.is_healthy": {
            "name": "is_healthy",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxy._non_standard_endpoint": {
            "name": "_non_standard_endpoint",
            "location": 166,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "NeptuneGremlinProxy._gremlin_status": {
            "name": "_gremlin_status",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query_id": [
                    "Optional[str]"
                ],
                "include_waiting": [
                    "bool"
                ]
            }
        },
        "NeptuneGremlinProxy._sparql_status": {
            "name": "_sparql_status",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query_id": [
                    "Optional[str]"
                ]
            }
        },
        "NeptuneGremlinProxy._explain": {
            "name": "_explain",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gremlin_query": [
                    "str"
                ]
            }
        },
        "NeptuneGremlinProxy._profile": {
            "name": "_profile",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gremlin_query": [
                    "str"
                ]
            }
        },
        "NeptuneGremlinProxy.drop": {
            "name": "drop",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/shared.py": {
        "checkNotNone": {
            "name": "checkNotNone",
            "location": 14,
            "return": [
                "X"
            ],
            "arguments": {
                "x": [
                    "Optional[X]"
                ]
            }
        },
        "make_wait_exponential_with_jitter": {
            "name": "make_wait_exponential_with_jitter",
            "location": 40,
            "return": [
                "Callable[([int], int)]"
            ],
            "arguments": {
                "base": [
                    "int"
                ],
                "jitter": [
                    "int"
                ]
            }
        },
        "retrying": {
            "name": "retrying",
            "location": 50,
            "return": [
                "CallableV"
            ],
            "arguments": {
                "callable": [
                    "Callable[([], CallableV)]"
                ]
            }
        },
        "make_wait_exponential_with_jitter.wait": {
            "name": "wait",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "retry": [
                    "int",
                    "numpy.random.RandomState",
                    "random.Random",
                    "Sequence[int]",
                    "bool"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/statsd_utilities.py": {
        "timer_with_counter": {
            "name": "timer_with_counter",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ]
            }
        },
        "_get_statsd_client": {
            "name": "_get_statsd_client",
            "location": 54,
            "return": [
                "None",
                "StatsClient",
                "Optional[List[str]]",
                "Optional[str]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "timer_with_counter.wrapper": {
            "name": "wrapper",
            "location": 35,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/metadata_service/proxy/__init__.py": {
        "get_proxy_client": {
            "name": "get_proxy_client",
            "location": 16,
            "return": [
                "metadata_service.proxy.base_proxy.BaseProxy"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "_pytesconfig.argparsing.Parser"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "model.Config",
                    "virgene.config.Config",
                    "sphinx.config.Config",
                    "_pytesconfig.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[bool]",
                    "bool",
                    "List[dict]",
                    "config.ConfigFile",
                    "isorsettings.Config",
                    "Type['BaseConfig']"
                ],
                "items": [
                    "list"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/test_basics.py": {
        "BasicTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTestCase.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTestCase.test_app_exists": {
            "name": "test_app_exists",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/test_swagger.py": {
        "TestSwagger.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_get_swagger_docs": {
            "name": "test_should_get_swagger_docs",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_get_swagger_json": {
            "name": "test_should_get_swagger_json",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_have_a_component_from_each_reference": {
            "name": "test_should_have_a_component_from_each_reference",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_have_type_for_each_query_parameter": {
            "name": "test_should_have_type_for_each_query_parameter",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_have_all_endpoints_in_swagger": {
            "name": "test_should_have_all_endpoints_in_swagger",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.find": {
            "name": "find",
            "location": 65,
            "return": [
                "typing.Any",
                "typing.Generator[tuple[typing.Union[str,typing.Any]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "json_response": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/api/test_column_description_api.py": {
        "TestColumnDescriptionAPI.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDescriptionAPI.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDescriptionAPI.test_should_update_column_description": {
            "name": "test_should_update_column_description",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDescriptionAPI.test_should_fail_to_update_column_description_when_table_does_not_exist": {
            "name": "test_should_fail_to_update_column_description_when_table_does_not_exist",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDescriptionAPI.test_should_get_column_description": {
            "name": "test_should_get_column_description",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDescriptionAPI.test_should_fail_to_get_column_description_when_table_is_not_found": {
            "name": "test_should_fail_to_get_column_description_when_table_is_not_found",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDescriptionAPI.test_should_fail_to_get_column_description": {
            "name": "test_should_fail_to_get_column_description",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/test_popular_tables_api.py": {
        "TestPopularTablesAPI.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPopularTablesAPI.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPopularTablesAPI.test_should_get_popular_tables_with_default_limits": {
            "name": "test_should_get_popular_tables_with_default_limits",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPopularTablesAPI.test_should_get_popular_tables_with_requested_limits": {
            "name": "test_should_get_popular_tables_with_requested_limits",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/test_redshit_disable_comment_edit.py": {
        "RedshiftCommentEditDisableTest.test_table_comment_edit": {
            "name": "test_table_comment_edit",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedshiftCommentEditDisableTest.test_column_comment_edit": {
            "name": "test_column_comment_edit",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/test_user.py": {
        "UserDetailAPITest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proxy_client": [
                    "dict[str, str]",
                    "unittesmock.MagicMock",
                    "Dict[str, str]"
                ]
            }
        },
        "UserDetailAPITest.test_get": {
            "name": "test_get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailAPITest.test_gets": {
            "name": "test_gets",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailAPITest.test_put": {
            "name": "test_put",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailAPITest.test_put_no_inputs": {
            "name": "test_put_no_inputs",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowsAPITest.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proxy_client": [
                    "dict[str, str]",
                    "unittesmock.MagicMock",
                    "Dict[str, str]"
                ]
            }
        },
        "UserFollowsAPITest.test_get": {
            "name": "test_get",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowAPITest.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proxy_client": [
                    "dict[str, str]",
                    "unittesmock.MagicMock",
                    "Dict[str, str]"
                ]
            }
        },
        "UserFollowAPITest.test_table_put": {
            "name": "test_table_put",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowAPITest.test_dashboard_put": {
            "name": "test_dashboard_put",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowAPITest.test_table_delete": {
            "name": "test_table_delete",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFollowAPITest.test_dashboard_delete": {
            "name": "test_dashboard_delete",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOwnsAPITest.setUp": {
            "name": "setUp",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proxy_client": [
                    "dict[str, str]",
                    "unittesmock.MagicMock",
                    "Dict[str, str]"
                ]
            }
        },
        "UserOwnsAPITest.test_get": {
            "name": "test_get",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOwnAPITest.setUp": {
            "name": "setUp",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proxy_client": [
                    "dict[str, str]",
                    "unittesmock.MagicMock",
                    "Dict[str, str]"
                ]
            }
        },
        "UserOwnAPITest.test_put": {
            "name": "test_put",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOwnAPITest.test_delete": {
            "name": "test_delete",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserReadsAPITest.test_get": {
            "name": "test_get",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proxy_client": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/api/badge/test_badge_common.py": {
        "TestBadgeCommon.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadgeCommon.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadgeCommon.test_app_exists": {
            "name": "test_app_exists",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadgeCommon.test_badge_on_reserved_badge_name": {
            "name": "test_badge_on_reserved_badge_name",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadgeCommon.test_badge_on_not_reserved_badge_name": {
            "name": "test_badge_on_not_reserved_badge_name",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/column/test_column_badge_api.py": {
        "TestColumnBadgeAPI.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnBadgeAPI.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnBadgeAPI.test_block_bad_badge_name": {
            "name": "test_block_bad_badge_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnBadgeAPI.test_block_badge_missing_category": {
            "name": "test_block_badge_missing_category",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnBadgeAPI.test_badge_with_category": {
            "name": "test_badge_with_category",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/dashboard/dashboard_test_case.py": {
        "DashboardTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTestCase.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/dashboard/test_dashboard_badge_api.py": {
        "TestDashboardBadgeAPI.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardBadgeAPI.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardBadgeAPI.test_block_bad_badge_name": {
            "name": "test_block_bad_badge_name",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardBadgeAPI.test_block_badge_missing_category": {
            "name": "test_block_badge_missing_category",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardBadgeAPI.test_badge_with_category": {
            "name": "test_badge_with_category",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/dashboard/test_dashboard_tag_api.py": {
        "TestDashboardTagAPI.test_should_update_tag": {
            "name": "test_should_update_tag",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_should_fail_to_update_tag_when_table_not_found": {
            "name": "test_should_fail_to_update_tag_when_table_not_found",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_should_delete_tag": {
            "name": "test_should_delete_tag",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_should_fail_to_delete_tag_when_table_not_found": {
            "name": "test_should_fail_to_delete_tag_when_table_not_found",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/dashboard/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/api/table/table_test_case.py": {
        "TableTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTestCase.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_dashboards_using_table_api.py": {
        "TestTableDashboardAPI.test_get_dashboards_using_table": {
            "name": "test_get_dashboards_using_table",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_table_badge_api.py": {
        "TestTableBadgeAPI.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableBadgeAPI.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableBadgeAPI.test_block_bad_badge_name": {
            "name": "test_block_bad_badge_name",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableBadgeAPI.test_block_badge_missing_category": {
            "name": "test_block_badge_missing_category",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableBadgeAPI.test_badge_with_category": {
            "name": "test_badge_with_category",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_table_description_api.py": {
        "TestTableDescriptionAPI.test_should_get_table_description": {
            "name": "test_should_get_table_description",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableDescriptionAPI.test_should_fail_when_cannot_get_description": {
            "name": "test_should_fail_when_cannot_get_description",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableDescriptionAPI.test_should_fail_when_cannot_find_table": {
            "name": "test_should_fail_when_cannot_find_table",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableDescriptionAPI.test_should_update_table_description": {
            "name": "test_should_update_table_description",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableDescriptionAPI.test_should_fail_to_update_description_when_table_not_found": {
            "name": "test_should_fail_to_update_description_when_table_not_found",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_table_detail_api.py": {
        "TestTableDetailAPI.test_should_get_column_details": {
            "name": "test_should_get_column_details",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableDetailAPI.test_should_fail_to_get_column_details_when_table_not_foubd": {
            "name": "test_should_fail_to_get_column_details_when_table_not_foubd",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_table_lineage_api.py": {
        "TestTableLineageAPI.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableLineageAPI.tearDown": {
            "name": "tearDown",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableLineageAPI.test_should_return_response": {
            "name": "test_should_return_response",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableLineageAPI.test_should_fail_when_table_doesnt_exist": {
            "name": "test_should_fail_when_table_doesnt_exist",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_table_owner_api.py": {
        "TestTableOwnerAPI.test_should_update_table_owner": {
            "name": "test_should_update_table_owner",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableOwnerAPI.test_should_fail_when_owner_update_fails": {
            "name": "test_should_fail_when_owner_update_fails",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableOwnerAPI.test_should_delete_table_owner": {
            "name": "test_should_delete_table_owner",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableOwnerAPI.test_should_fail_when_delete_owner_fails": {
            "name": "test_should_fail_when_delete_owner_fails",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/test_table_tag_api.py": {
        "TestTableTagAPI.test_should_update_tag": {
            "name": "test_should_update_tag",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableTagAPI.test_should_fail_to_update_tag_when_table_not_found": {
            "name": "test_should_fail_to_update_tag_when_table_not_found",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableTagAPI.test_should_delete_tag": {
            "name": "test_should_delete_tag",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableTagAPI.test_should_fail_to_delete_tag_when_table_not_found": {
            "name": "test_should_fail_to_delete_tag_when_table_not_found",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/table/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/api/tag/test_tag_common.py": {
        "TestDashboardTagAPI.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.tearDown": {
            "name": "tearDown",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_app_exists": {
            "name": "test_app_exists",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_block_tag_on_reserved_badge_value": {
            "name": "test_block_tag_on_reserved_badge_value",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_tag_on_unreserved_badge_value": {
            "name": "test_tag_on_unreserved_badge_value",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboardTagAPI.test_badge_on_reserved_badge_value": {
            "name": "test_badge_on_reserved_badge_value",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/api/tag/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/proxy/test_atlas_proxy.py": {
        "TestAtlasProxy.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.to_class": {
            "name": "to_class",
            "location": 42,
            "return": [
                "ObjectView",
                "str",
                "Optional[str]",
                "List[str]",
                "Iterable[str]",
                "type",
                "sqlalchemy.Column"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "dict"
                ]
            }
        },
        "TestAtlasProxy._mock_get_table_entity": {
            "name": "_mock_get_table_entity",
            "location": 49,
            "return": [
                "MagicMock",
                "str",
                "List[cmk.utils.type_defs.HostName]",
                "Mapping[str, Any]",
                "bool",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "None",
                    "Optional[users.models.User]",
                    "typing.Any",
                    "cleancoderscom.entities.entity.Entity",
                    "typing.Mapping",
                    "str",
                    "Optional[Any]",
                    "Mapping",
                    "Optional[Union[Any, str]]",
                    "src.domain.entity.user.User"
                ]
            }
        },
        "TestAtlasProxy._mock_get_create_glossary_term": {
            "name": "_mock_get_create_glossary_term",
            "location": 62,
            "return": [
                "MagicMock",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ],
                "assigned_ent": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "List[int]",
                    "list[str]",
                    "list[int]"
                ],
                "guid": [
                    "str"
                ]
            }
        },
        "TestAtlasProxy._mock_get_bookmark_entity": {
            "name": "_mock_get_bookmark_entity",
            "location": 70,
            "return": [
                "MagicMock",
                "str",
                "Mapping[str, Any]",
                "List[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "None",
                    "cleancoderscom.entities.entity.Entity",
                    "dict[, ]",
                    "str",
                    "recidiviz.persistence.entity.base_entity.Entity",
                    "dict",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "users.models.JustfixUser"
                ]
            }
        },
        "TestAtlasProxy.test_extract_table_uri_info": {
            "name": "test_extract_table_uri_info",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_entity": {
            "name": "test_get_table_entity",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy._create_mocked_report_entities_collection": {
            "name": "_create_mocked_report_entities_collection",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_sorted_reports": {
            "name": "test_get_sorted_reports",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy._get_table": {
            "name": "_get_table",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "custom_stats_format": [
                    "bool"
                ]
            }
        },
        "TestAtlasProxy.test_get_table_without_custom_stats_format": {
            "name": "test_get_table_without_custom_stats_format",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_with_custom_stats_format": {
            "name": "test_get_table_with_custom_stats_format",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_not_found": {
            "name": "test_get_table_not_found",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_missing_info": {
            "name": "test_get_table_missing_info",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_popular_tables": {
            "name": "test_get_popular_tables",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_description": {
            "name": "test_get_table_description",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_put_table_description": {
            "name": "test_put_table_description",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_tags": {
            "name": "test_get_tags",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_add_tag": {
            "name": "test_add_tag",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_delete_tag": {
            "name": "test_delete_tag",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_add_owner": {
            "name": "test_add_owner",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_column": {
            "name": "test_get_column",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_column_wrong_name": {
            "name": "test_get_column_wrong_name",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_column_no_referred_entities": {
            "name": "test_get_column_no_referred_entities",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_column_description": {
            "name": "test_get_column_description",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_put_column_description": {
            "name": "test_put_column_description",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_by_user_relation_follow": {
            "name": "test_get_table_by_user_relation_follow",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_by_user_relation_own": {
            "name": "test_get_table_by_user_relation_own",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_resources_owned_by_user_success": {
            "name": "test_get_resources_owned_by_user_success",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_resources_owned_by_user_no_user": {
            "name": "test_get_resources_owned_by_user_no_user",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_resources_owned_by_user_default_owner": {
            "name": "test_get_resources_owned_by_user_default_owner",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_add_resource_relation_by_user": {
            "name": "test_add_resource_relation_by_user",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_delete_resource_relation_by_user": {
            "name": "test_delete_resource_relation_by_user",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_readers": {
            "name": "test_get_readers",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_frequently_used_tables": {
            "name": "test_get_frequently_used_tables",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_latest_updated_ts_when_exists": {
            "name": "test_get_latest_updated_ts_when_exists",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_latest_updated_ts_when_not_exists": {
            "name": "test_get_latest_updated_ts_when_not_exists",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_user_detail_default": {
            "name": "test_get_user_detail_default",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_user_detail_config_method": {
            "name": "test_get_user_detail_config_method",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_owners_details_no_owner_no_fallback": {
            "name": "test_get_owners_details_no_owner_no_fallback",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_owners_details_only_fallback": {
            "name": "test_get_owners_details_only_fallback",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_owners_details_only_active": {
            "name": "test_get_owners_details_only_active",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_owners_details_owner_and_fallback": {
            "name": "test_get_owners_details_owner_and_fallback",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_owners_details_owner_and_fallback_duplicates": {
            "name": "test_get_owners_details_owner_and_fallback_duplicates",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_table_watermarks": {
            "name": "test_get_table_watermarks",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_get_user_detail_config_method.custom_function": {
            "name": "custom_function",
            "location": 480,
            "return": [
                "Callable[[], None]",
                "Dict[str, Any]",
                "dict",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "utils.types.Id",
                    "bool"
                ]
            }
        },
        "TestAtlasProxy.to_class.ObjectView.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/test_create_proxy.py": {
        "TestCreateProxy.test_proxy_client_creation": {
            "name": "test_proxy_client_creation",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/test_neo4j_proxy.py": {
        "TestNeo4jProxy.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.tearDown": {
            "name": "tearDown",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_table": {
            "name": "test_get_table",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_table_view_only": {
            "name": "test_get_table_view_only",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_table_with_valid_description": {
            "name": "test_get_table_with_valid_description",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_table_with_no_description": {
            "name": "test_get_table_with_no_description",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_put_table_description": {
            "name": "test_put_table_description",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_column_with_valid_description": {
            "name": "test_get_column_with_valid_description",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_column_with_no_description": {
            "name": "test_get_column_with_no_description",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_put_column_description": {
            "name": "test_put_column_description",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_add_owner": {
            "name": "test_add_owner",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_delete_owner": {
            "name": "test_delete_owner",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_add_table_badge": {
            "name": "test_add_table_badge",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_add_column_badge": {
            "name": "test_add_column_badge",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_add_tag": {
            "name": "test_add_tag",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_delete_tag": {
            "name": "test_delete_tag",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_tags": {
            "name": "test_get_tags",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_neo4j_latest_updated_ts": {
            "name": "test_get_neo4j_latest_updated_ts",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_statistics": {
            "name": "test_get_statistics",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_popular_tables": {
            "name": "test_get_popular_tables",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_user": {
            "name": "test_get_user",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_user_other_key_values": {
            "name": "test_get_user_other_key_values",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_put_user_new_user": {
            "name": "test_put_user_new_user",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_users": {
            "name": "test_get_users",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_table_by_user_relation": {
            "name": "test_get_table_by_user_relation",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_dashboard_by_user_relation": {
            "name": "test_get_dashboard_by_user_relation",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_add_resource_relation_by_user": {
            "name": "test_add_resource_relation_by_user",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_delete_resource_relation_by_user": {
            "name": "test_delete_resource_relation_by_user",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_invalid_user": {
            "name": "test_get_invalid_user",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_dashboard": {
            "name": "test_get_dashboard",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_dashboard_with_valid_description": {
            "name": "test_get_dashboard_with_valid_description",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_dashboard_with_no_description": {
            "name": "test_get_dashboard_with_no_description",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_put_dashboard_description": {
            "name": "test_put_dashboard_description",
            "location": 1008,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_user_resource_relation_clause": {
            "name": "test_user_resource_relation_clause",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_lineage_no_lineage_information": {
            "name": "test_get_lineage_no_lineage_information",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeo4jProxy.test_get_lineage_success": {
            "name": "test_get_lineage_success",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/test_statsd_utilities.py": {
        "TestStatsdUtilities.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_no_statsd_client": {
            "name": "test_no_statsd_client",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_get_statsd_client": {
            "name": "test_get_statsd_client",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_with_neo4j_proxy": {
            "name": "test_with_neo4j_proxy",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/proxy/fixtures/atlas_test_data.py": {},
    "amundsenmetadatalibrary-master/tests/unit/proxy/fixtures/__init__.py": {},
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/abstract_gremlin_proxy_tests.py": {
        "class_getter_closure": {
            "name": "class_getter_closure",
            "location": 380,
            "return": [
                "Dict[str, str]",
                "Union[str, List[str]]",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {}
        },
        "AbstractGremlinProxyTest._create_gremlin_proxy": {
            "name": "_create_gremlin_proxy",
            "location": 41,
            "return": [
                "metadata_service.proxy.gremlin_proxy.AbstractGremlinProxy",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AbstractGremlinProxyTest.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.get_proxy": {
            "name": "get_proxy",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.get_relationship": {
            "name": "get_relationship",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest._upsert": {
            "name": "_upsert",
            "location": 66,
            "return": [
                "TYPE"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest._link": {
            "name": "_link",
            "location": 71,
            "return": [
                "Optional[TYPE]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest._get": {
            "name": "_get",
            "location": 84,
            "return": [
                "None",
                "bool",
                "bytes",
                "Dict[str, Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "extra_traversal": [
                    "str",
                    "Pattern[str]",
                    "typing.Pattern"
                ],
                "get": [
                    "AbstractSet[str]",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractGremlinProxyTest.test_safe_get": {
            "name": "test_safe_get",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_safe_get_with_objects": {
            "name": "test_safe_get_with_objects",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_upsert_rt": {
            "name": "test_upsert_rt",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_upsert_thrice": {
            "name": "test_upsert_thrice",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_link_rt": {
            "name": "test_link_rt",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_link_dangling_from_rt": {
            "name": "test_link_dangling_from_rt",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_link_dangling_to_rt": {
            "name": "test_link_dangling_to_rt",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_edges": {
            "name": "test_edges",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGremlinProxyTest.test_expire_link": {
            "name": "test_expire_link",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "class_getter_closure.abstract_gremlin_proxy_test_class": {
            "name": "abstract_gremlin_proxy_test_class",
            "location": 383,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/abstract_proxy_tests.py": {
        "class_getter_closure": {
            "name": "class_getter_closure",
            "location": 237,
            "return": [
                "bool",
                "str",
                "Type",
                "BaseException"
            ],
            "arguments": {}
        },
        "AbstractProxyTest.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.get_proxy": {
            "name": "get_proxy",
            "location": 56,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.get_relationship": {
            "name": "get_relationship",
            "location": 60,
            "return": [
                "typing.List[typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_rt_table": {
            "name": "test_rt_table",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_rt_table_with_owner": {
            "name": "test_rt_table_with_owner",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_rt_table_with_non_existent_app": {
            "name": "test_rt_table_with_non_existent_app",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_get_popular_tables": {
            "name": "test_get_popular_tables",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_put_programmatic_table_description": {
            "name": "test_put_programmatic_table_description",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_add_delete_user_relation": {
            "name": "test_add_delete_user_relation",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_owner_rt": {
            "name": "test_owner_rt",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_tag_rt": {
            "name": "test_tag_rt",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProxyTest.test_get_latest_updated_ts": {
            "name": "test_get_latest_updated_ts",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "class_getter_closure.abstract_proxy_test_class": {
            "name": "abstract_proxy_test_class",
            "location": 240,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/roundtrip_base_proxy.py": {
        "RoundtripBaseProxy.put_user": {
            "name": "put_user",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.post_users": {
            "name": "post_users",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.put_app": {
            "name": "put_app",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.post_apps": {
            "name": "post_apps",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.put_table": {
            "name": "put_table",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.post_tables": {
            "name": "post_tables",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.put_column": {
            "name": "put_column",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.put_programmatic_table_description": {
            "name": "put_programmatic_table_description",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripBaseProxy.add_read_count": {
            "name": "add_read_count",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/roundtrip_gremlin_proxy.py": {
        "RoundtripGremlinProxy.put_user": {
            "name": "put_user",
            "location": 36,
            "return": [
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_user": {
            "name": "_put_user",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.post_users": {
            "name": "post_users",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.put_app": {
            "name": "put_app",
            "location": 55,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_app": {
            "name": "_put_app",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.post_apps": {
            "name": "post_apps",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_database": {
            "name": "_put_database",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_cluster": {
            "name": "_put_cluster",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_schema": {
            "name": "_put_schema",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.put_table": {
            "name": "put_table",
            "location": 94,
            "return": [
                "Optional[str]",
                "T",
                "Optional[BaseException]",
                "Optional[Iterable[Any]]",
                "Callable",
                "str",
                "List[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_table": {
            "name": "_put_table",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_app_table_relation": {
            "name": "_put_app_table_relation",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_updated_timestamp": {
            "name": "_put_updated_timestamp",
            "location": 162,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "metadata_service.proxy.gremlin_proxy.ExecuteQuery"
                ]
            }
        },
        "RoundtripGremlinProxy.post_tables": {
            "name": "post_tables",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.put_column": {
            "name": "put_column",
            "location": 183,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_column": {
            "name": "_put_column",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.put_programmatic_table_description": {
            "name": "put_programmatic_table_description",
            "location": 216,
            "return": [
                "Callable[[list], None]",
                "Callable",
                "models.User",
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy._put_programmatic_table_description": {
            "name": "_put_programmatic_table_description",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripGremlinProxy.add_read_count": {
            "name": "add_read_count",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/roundtrip_janusgraph_proxy.py": {},
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/roundtrip_neptune_proxy.py": {
        "RoundtripNeptuneGremlinProxy.post_users": {
            "name": "post_users",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripNeptuneGremlinProxy.put_user": {
            "name": "put_user",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripNeptuneGremlinProxy.put_app": {
            "name": "put_app",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripNeptuneGremlinProxy.post_apps": {
            "name": "post_apps",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripNeptuneGremlinProxy.put_table": {
            "name": "put_table",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundtripNeptuneGremlinProxy.post_tables": {
            "name": "post_tables",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/test_janus_graph_proxy.py": {
        "JanusGraphGremlinProxyTest._create_gremlin_proxy": {
            "name": "_create_gremlin_proxy",
            "location": 13,
            "return": [
                "tests.unit.proxy.roundtrip.roundtrip_janusgraph_proxy.RoundtripJanusGraphProxy"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Mapping[(str, Any)]"
                ]
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/test_neptune_proxy.py": {
        "NeptuneGremlinProxyTest._create_gremlin_proxy": {
            "name": "_create_gremlin_proxy",
            "location": 22,
            "return": [
                "tests.unit.proxy.roundtrip.roundtrip_neptune_proxy.RoundtripNeptuneGremlinProxy"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "NeptuneGremlinProxyTest.test_is_retryable": {
            "name": "test_is_retryable",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxyTest.test_gremlin_status": {
            "name": "test_gremlin_status",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxyTest.test_sparql_status": {
            "name": "test_sparql_status",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxyTest.test_explain": {
            "name": "test_explain",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneGremlinProxyTest.test_profile": {
            "name": "test_profile",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsenmetadatalibrary-master/tests/unit/proxy/roundtrip/__init__.py": {}
}
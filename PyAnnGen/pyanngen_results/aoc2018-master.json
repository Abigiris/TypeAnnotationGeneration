{
    "aoc2018-master/aoc2018/device.py": {
        "Device.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "navlicense": [
                    "List",
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Device.process_changes": {
            "name": "process_changes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "int",
                    "bool"
                ]
            }
        },
        "Device.calibrate": {
            "name": "calibrate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Device.warehouse_checksum": {
            "name": "warehouse_checksum",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "box_ids": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "int",
                    "Optional[float]",
                    "List"
                ]
            }
        },
        "Device.matching_letters": {
            "name": "matching_letters",
            "location": 33,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "box_ids": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "Device.license_number": {
            "name": "license_number",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.license_value": {
            "name": "license_value",
            "location": 64,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNode.children_complete": {
            "name": "children_complete",
            "location": 104,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNode.metadata_complete": {
            "name": "metadata_complete",
            "location": 108,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNode.complete": {
            "name": "complete",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNode.value": {
            "name": "value",
            "location": 116,
            "return": [
                "bool",
                "int",
                "str",
                "Union[str,int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNode.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.matching_letters.matchables": {
            "name": "matchables",
            "location": 34,
            "return": [
                "Iterable[str]",
                "Generator"
            ],
            "arguments": {
                "idstr": [
                    "str"
                ]
            }
        }
    },
    "aoc2018-master/aoc2018/fabric.py": {
        "Claim.from_str": {
            "name": "from_str",
            "location": 13,
            "return": [
                "Claim"
            ],
            "arguments": {
                "cls": [
                    "Type[_TClaim]"
                ],
                "desc": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Claim.squares": {
            "name": "squares",
            "location": 22,
            "return": [
                "Iterable[Tuple[int,int]]",
                "Generator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimChecker.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "claims": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "ClaimChecker.claimed_by_multiple": {
            "name": "claimed_by_multiple",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimChecker.nonoverlapping": {
            "name": "nonoverlapping",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/aoc2018/grid.py": {
        "points": {
            "name": "points",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "Tuple[Any]",
                    "List[int]",
                    "Optional[Any]",
                    "Union[str,Tuple[Any]]",
                    "int",
                    "Union[int,List[int]]"
                ]
            }
        },
        "md": {
            "name": "md",
            "location": 38,
            "return": [
                "Callable",
                "str",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "a": [
                    "bytes"
                ],
                "b": [
                    "bytes"
                ]
            }
        },
        "cross": {
            "name": "cross",
            "location": 42,
            "return": [
                "List[int]",
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "o": [
                    "int",
                    "List[int]"
                ],
                "a": [
                    "int",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "hull_points": {
            "name": "hull_points",
            "location": 46,
            "return": [
                "list"
            ],
            "arguments": {
                "points": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "box": {
            "name": "box",
            "location": 65,
            "return": [
                "Rect"
            ],
            "arguments": {
                "hull": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "max_area": {
            "name": "max_area",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "points": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Point2D.from_str": {
            "name": "from_str",
            "location": 11,
            "return": [
                "Point2D"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPoint2D]"
                ],
                "desc": [
                    "str",
                    "int"
                ]
            }
        },
        "Point2D.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.points": {
            "name": "points",
            "location": 24,
            "return": [
                "Generator[(Point2D, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/aoc2018/guards.py": {
        "LogProcessor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LogProcessor.process_entries": {
            "name": "process_entries",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "LogProcessor.handle_shift_start": {
            "name": "handle_shift_start",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minute": [
                    "int",
                    "List[Tuple[str,Callable]]",
                    "List[tuple[Union[str,Callable]]]"
                ],
                "event": [
                    "str",
                    "List",
                    "Dict[str,str]",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Dict[str,Any]"
                ]
            }
        },
        "LogProcessor.handle_doze": {
            "name": "handle_doze",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minute": [
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "int",
                    "logging.Logger"
                ],
                "event": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "LogProcessor.handle_wake": {
            "name": "handle_wake",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minute": [
                    "str",
                    "Dict[str,Any]"
                ],
                "event": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "LogProcessor.log_incident": {
            "name": "log_incident",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "awake_at": [
                    "int",
                    "float",
                    "str",
                    "Sequence[float]",
                    "Dict[str,object]",
                    "Union[str,int]"
                ]
            }
        },
        "DutyLog.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "List[dict]",
                    "int",
                    "str",
                    "Dict[str,int]",
                    "List[Dict]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DutyLog.sleepiest_guard": {
            "name": "sleepiest_guard",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DutyLog.sleepiest_minute": {
            "name": "sleepiest_minute",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "guard": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DutyLog.sleepiest_guard_minute": {
            "name": "sleepiest_guard_minute",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/aoc2018/inputs.py": {
        "input_path": {
            "name": "input_path",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "read_lines": {
            "name": "read_lines",
            "location": 9,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "read_ints": {
            "name": "read_ints",
            "location": 15,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "aoc2018-master/aoc2018/marbles.py": {
        "MarbleGame.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "float",
                    "bool"
                ],
                "hi": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MarbleGame.play_turn": {
            "name": "play_turn",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarbleGame.play_normal": {
            "name": "play_normal",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarbleGame.play_23": {
            "name": "play_23",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarbleGame.play": {
            "name": "play",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarbleGame.winner": {
            "name": "winner",
            "location": 39,
            "return": [
                "str",
                "int",
                "Callable",
                "Tuple[int]",
                "List",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/aoc2018/polymer.py": {
        "reacts": {
            "name": "reacts",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "u1": [
                    "str",
                    "int",
                    "Callable"
                ],
                "u2": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 8,
            "return": [
                "Tuple[(list, int)]"
            ],
            "arguments": {
                "polymer": [
                    "Tuple[Union[str,str]]",
                    "int",
                    "str",
                    "List",
                    "Tuple[str,str]"
                ],
                "exclude": [
                    "int",
                    "str",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "List[str]",
                    "List",
                    "Dict"
                ],
                "unit": [
                    "str",
                    "Generator",
                    "Optional[Outcome]",
                    "None"
                ],
                "exclude": [
                    "Tuple[Union[str,str]]",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Tuple[str,str]",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "float"
                ]
            }
        },
        "react": {
            "name": "react",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "without": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "aoc2018-master/aoc2018/sleigh.py": {
        "read_steps": {
            "name": "read_steps",
            "location": 9,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_next": {
            "name": "get_next",
            "location": 22,
            "return": [
                "None",
                "str",
                "Tuple[Union[str,Any]]",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "steps": [
                    "Dict[str,Any]",
                    "Dict",
                    "Type"
                ]
            }
        },
        "on_finish": {
            "name": "on_finish",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "step": [
                    "int",
                    "Callable",
                    "str"
                ],
                "steps": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "workers": [
                    "int",
                    "Iterable[str]"
                ],
                "inp": [
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "tick": {
            "name": "tick",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "duration": {
            "name": "duration",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "step": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "done": {
            "name": "done",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "step": [
                    "int",
                    "str",
                    "List[int]",
                    "Optional[Callable]",
                    "Callable",
                    "None",
                    "bool"
                ],
                "start": [
                    "int",
                    "str",
                    "Optional[Callable]",
                    "List[int]",
                    "bool"
                ],
                "now": [
                    "int",
                    "str",
                    "Optional[Callable]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "all_done": {
            "name": "all_done",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": []
            }
        },
        "show": {
            "name": "show",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "T",
                    "dict"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "workers": [
                    "Dict[str,str]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "inp": [
                    "Dict[str,str]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "aoc2018-master/aoc2018/__init__.py": {},
    "aoc2018-master/aoc2018/exercises/ex1.py": {
        "part1": {
            "name": "part1",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "aoc2018-master/aoc2018/exercises/ex2.py": {
        "part1": {
            "name": "part1",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 10,
            "return": [
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "aoc2018-master/aoc2018/exercises/ex3.py": {},
    "aoc2018-master/aoc2018/exercises/ex4.py": {},
    "aoc2018-master/aoc2018/exercises/ex5.py": {
        "polymer_len": {
            "name": "polymer_len",
            "location": 14,
            "return": [
                "Tuple[(_T0, int)]"
            ],
            "arguments": {
                "without": [
                    "Sequence[T]",
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[int]",
                    "List"
                ]
            }
        }
    },
    "aoc2018-master/aoc2018/exercises/ex6.py": {},
    "aoc2018-master/aoc2018/exercises/ex7.py": {},
    "aoc2018-master/aoc2018/exercises/ex8.py": {},
    "aoc2018-master/aoc2018/exercises/ex9.py": {},
    "aoc2018-master/aoc2018/exercises/__init__.py": {},
    "aoc2018-master/tests/test_device.py": {
        "DeviceTests.test_starts_with_frequency_0": {
            "name": "test_starts_with_frequency_0",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceTests.test_processes_changes_to_frequency": {
            "name": "test_processes_changes_to_frequency",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceTests.test_calibrate_finds_first_repeated_frequency": {
            "name": "test_calibrate_finds_first_repeated_frequency",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceTests.test_warehouse_checksum": {
            "name": "test_warehouse_checksum",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceTests.test_similar_boxes": {
            "name": "test_similar_boxes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseTests.test_no_children": {
            "name": "test_no_children",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseTests.test_with_children": {
            "name": "test_with_children",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseTests.test_example_number": {
            "name": "test_example_number",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseTests.test_value_no_children": {
            "name": "test_value_no_children",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseTests.test_example_value": {
            "name": "test_example_value",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNodeTests.test_no_children": {
            "name": "test_no_children",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNodeTests.test_no_nothing": {
            "name": "test_no_nothing",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNodeTests.test_example": {
            "name": "test_example",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LicenseNodeTests.test_complete": {
            "name": "test_complete",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/test_fabric.py": {
        "TestClaim.test_create_claim_from_str": {
            "name": "test_create_claim_from_str",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaim.test_squares": {
            "name": "test_squares",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimChecker.test_counts_multiply_claimed_squares": {
            "name": "test_counts_multiply_claimed_squares",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClaimChecker.test_finds_non_overlapping_claims": {
            "name": "test_finds_non_overlapping_claims",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/test_grid.py": {
        "TestGrid.setUpClass": {
            "name": "setUpClass",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestGrid.test_points": {
            "name": "test_points",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_hull_points": {
            "name": "test_hull_points",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_md": {
            "name": "test_md",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/test_guards.py": {
        "TestGuards.test_sorts_entries": {
            "name": "test_sorts_entries",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGuards.test_tallies_sleep_incidents": {
            "name": "test_tallies_sleep_incidents",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/test_marbles.py": {
        "TestMarbles.test_examples": {
            "name": "test_examples",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/test_polymer.py": {
        "TestPolymer.test_reacts": {
            "name": "test_reacts",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolymer.test_react": {
            "name": "test_react",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/test_sleigh.py": {
        "TestDuration.test_duration_for_step": {
            "name": "test_duration_for_step",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDone.test_done": {
            "name": "test_done",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllDone.test_all_done_when_no_steps_left_and_no_workers_busy": {
            "name": "test_all_done_when_no_steps_left_and_no_workers_busy",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllDone.test_not_all_done_when_steps_left": {
            "name": "test_not_all_done_when_steps_left",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllDone.test_not_all_done_when_workers_busy": {
            "name": "test_not_all_done_when_workers_busy",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_initializes_state": {
            "name": "test_initializes_state",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aoc2018-master/tests/__init__.py": {}
}
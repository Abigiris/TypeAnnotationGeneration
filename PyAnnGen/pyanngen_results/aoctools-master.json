{
    "aoctools-master/graph.py": {
        "taxidistance": {
            "name": "taxidistance",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "target": [],
                "neighbour": []
            }
        },
        "nocost": {
            "name": "nocost",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "_target": [],
                "_neighbour": []
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.empty": {
            "name": "empty",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.put": {
            "name": "put",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "priority": []
            }
        },
        "PriorityQueue.get": {
            "name": "get",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.contains": {
            "name": "contains",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.edge": {
            "name": "edge",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "cost": [
                    "int"
                ]
            }
        },
        "Graph.unwind_path": {
            "name": "unwind_path",
            "location": 66,
            "return": [
                "List[Union[(_T1, _T2)]]"
            ],
            "arguments": {
                "self": [],
                "came_from": [],
                "start": [
                    "_T1@@"
                ],
                "end": [
                    "_T2@@"
                ]
            }
        },
        "Graph.breadth_first_search": {
            "name": "breadth_first_search",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "Graph.dijkstra": {
            "name": "dijkstra",
            "location": 115,
            "return": [
                "Tuple[(dict, Dict[(Any, None)])]"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": [
                    "None"
                ]
            }
        },
        "Graph.uniform_cost_search": {
            "name": "uniform_cost_search",
            "location": 142,
            "return": [
                "Optional[CostedPath[nothing]]"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "Graph.a_star_search": {
            "name": "a_star_search",
            "location": 155,
            "return": [
                "CostedPath[nothing]"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "heuristic": []
            }
        },
        "Graph.k_shortest_paths": {
            "name": "k_shortest_paths",
            "location": 198,
            "return": [
                "List[CostedPath[nothing]]"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "sink": [],
                "K": [
                    "int"
                ]
            }
        }
    },
    "aoctools-master/setup.py": {},
    "aoctools-master/__init__.py": {},
    "aoctools-master/tests/test_graph.py": {
        "from_rows": {
            "name": "from_rows",
            "location": 24,
            "return": [
                "Tuple[(Tuple[(int, int)], Tuple[(int, int)])]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "data": [
                    "List[list[str]]",
                    "List[List[str]]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]",
                    "Callable[[Any],None]",
                    "str"
                ]
            }
        },
        "render_path": {
            "name": "render_path",
            "location": 51,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "List[str]"
                ],
                "xsize": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "ysize": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "test_sample_data": {
            "name": "test_sample_data",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uniform_cost_search": {
            "name": "test_uniform_cost_search",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_yen": {
            "name": "test_yen",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
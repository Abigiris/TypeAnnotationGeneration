{
    "apache-release-verification-master/src/apache_2_license.py": {},
    "apache-release-verification-master/src/checks.py": {
        "check": {
            "name": "check",
            "location": 160,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "None",
                    "bool"
                ],
                "hide_if_passing": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "run_checks": {
            "name": "run_checks",
            "location": 171,
            "return": [
                "List[Dict]",
                "Report"
            ],
            "arguments": {
                "state": [
                    "List",
                    "bytes"
                ],
                "checks": [
                    "str"
                ]
            }
        },
        "_check_sh": {
            "name": "_check_sh",
            "location": 195,
            "return": [
                "Optional[Tuple[(str, _T2)]]"
            ],
            "arguments": {
                "cmds": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "List[int]",
                    "int",
                    "Union[str,Tuple[Any]]",
                    "None",
                    "Tuple[Any]",
                    "Union[int,List[int]]"
                ],
                "workdir": [
                    "str",
                    "None",
                    "float",
                    "Exception",
                    "int"
                ],
                "failure_level": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "check_zip_file_exists": {
            "name": "check_zip_file_exists",
            "location": 216,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "check_sha512_file_exists": {
            "name": "check_sha512_file_exists",
            "location": 221,
            "return": [
                "str",
                "bool",
                "Callable",
                "dict",
                "int"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "bool",
                    "Sequence[str]",
                    "IO"
                ]
            }
        },
        "check_asc_file_exists": {
            "name": "check_asc_file_exists",
            "location": 226,
            "return": [
                "str",
                "bool",
                "Callable",
                "dict",
                "int"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "bool",
                    "Sequence[str]",
                    "IO"
                ]
            }
        },
        "check_keys_file_exists": {
            "name": "check_keys_file_exists",
            "location": 231,
            "return": [
                "Dict[str, str]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "check_sha512": {
            "name": "check_sha512",
            "location": 236,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "state": []
            }
        },
        "check_gpg_key_in_keys_file": {
            "name": "check_gpg_key_in_keys_file",
            "location": 241,
            "return": [
                "str",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "T"
                ]
            }
        },
        "check_gpg_signature": {
            "name": "check_gpg_signature",
            "location": 251,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "check_unzip": {
            "name": "check_unzip",
            "location": 283,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Dict[str,int]",
                    "List[str]"
                ]
            }
        },
        "check_source_dir_in_zip": {
            "name": "check_source_dir_in_zip",
            "location": 288,
            "return": [
                "List[bytes]",
                "dict",
                "\"model.InterchainModel\"",
                "List['Activity']",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "state": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "_check_dircmp_only_either_allowed": {
            "name": "_check_dircmp_only_either_allowed",
            "location": 292,
            "return": [
                "list"
            ],
            "arguments": {
                "diff": [
                    "str",
                    "filecmp.dircmp",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_check_dircmp_no_diff_files": {
            "name": "_check_dircmp_no_diff_files",
            "location": 326,
            "return": [
                "list"
            ],
            "arguments": {
                "diff": [
                    "filecmp.dircmp",
                    "str",
                    "int",
                    "Union[str,List]",
                    "List[dict]",
                    "List"
                ]
            }
        },
        "_check_dircmp_no_funny_files": {
            "name": "_check_dircmp_no_funny_files",
            "location": 337,
            "return": [
                "list"
            ],
            "arguments": {
                "diff": [
                    "filecmp.dircmp",
                    "str",
                    "int",
                    "Union[str,List]",
                    "List[dict]",
                    "List"
                ]
            }
        },
        "check_git_revision": {
            "name": "check_git_revision",
            "location": 349,
            "return": [
                "bool",
                "MutableMapping[str,Any]",
                "str",
                "List[str]",
                "Tuple[type]",
                "Set[str]",
                "Dict",
                "int",
                "List",
                "Tuple[Union[Literal,Literal]]",
                "Tuple[str]",
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "check_blacklisted_files": {
            "name": "check_blacklisted_files",
            "location": 388,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Dict",
                    "List[Dict]",
                    "Dict[str,str]",
                    "List[dict]",
                    "Set[str]"
                ]
            }
        },
        "check_gitignore_in_repo": {
            "name": "check_gitignore_in_repo",
            "location": 398,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "state": [
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "check_gitignore_in_release": {
            "name": "check_gitignore_in_release",
            "location": 403,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "state": [
                    "Mapping",
                    "MutableMapping",
                    "Mapping[str,Any]",
                    "T"
                ]
            }
        },
        "_check_file_looks_good": {
            "name": "_check_file_looks_good",
            "location": 421,
            "return": [
                "Optional[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "check_disclaimer_and_notice_look_good": {
            "name": "check_disclaimer_and_notice_look_good",
            "location": 429,
            "return": [
                "Tuple[str]",
                "str",
                "None",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "check_license_is_apache_2": {
            "name": "check_license_is_apache_2",
            "location": 441,
            "return": [
                "Tuple[Text]",
                "List[List[str]]",
                "None",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "check_license_looks_good": {
            "name": "check_license_looks_good",
            "location": 452,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "check_no_binary_files": {
            "name": "check_no_binary_files",
            "location": 457,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "check_build_and_test": {
            "name": "check_build_and_test",
            "location": 511,
            "return": [
                "Dict",
                "Tuple[Text]",
                "List[str]",
                "Tuple[str]",
                "bool",
                "None"
            ],
            "arguments": {
                "state": [
                    "Optional[Node]",
                    "Dict",
                    "None",
                    "str"
                ]
            }
        },
        "State._generate_optional_placeholders": {
            "name": "_generate_optional_placeholders",
            "location": 29,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any,str]]",
                    "Any"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any,str]]",
                    "Any"
                ],
                "condition": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any,str]]",
                    "Any"
                ]
            }
        },
        "State._pattern_placeholders": {
            "name": "_pattern_placeholders",
            "location": 56,
            "return": [
                "str",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.list_placeholder_keys": {
            "name": "list_placeholder_keys",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable[T,bool]",
                    "List",
                    "List[str]",
                    "Callable[[T],bool]",
                    "Callable"
                ]
            }
        },
        "State._format_template": {
            "name": "_format_template",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "State.release_dir": {
            "name": "release_dir",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.base_path": {
            "name": "base_path",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.zip_path": {
            "name": "zip_path",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.sha512_path": {
            "name": "sha512_path",
            "location": 102,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.keys_path": {
            "name": "keys_path",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.asc_path": {
            "name": "asc_path",
            "location": 110,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.unzipped_dir": {
            "name": "unzipped_dir",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.source_dir": {
            "name": "source_dir",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.git_repo_name": {
            "name": "git_repo_name",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.git_dir": {
            "name": "git_dir",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "Set[str]",
                    "Optional[str]",
                    "Dict"
                ],
                "hide_if_passing": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Check._generate_nice_name": {
            "name": "_generate_nice_name",
            "location": 143,
            "return": [
                "str",
                "List[str]",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Check.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [
                "str",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "int"
                ]
            }
        },
        "check.make_check": {
            "name": "make_check",
            "location": 163,
            "return": [
                "Check",
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "str",
                "Optional[int]",
                "Set"
            ],
            "arguments": {
                "fun": [
                    "Union[Callable, None]",
                    "abc.Sequence"
                ]
            }
        },
        "BuildAndTest.name": {
            "name": "name",
            "location": 470,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildAndTest.should_run": {
            "name": "should_run",
            "location": 474,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "BuildAndTest.run": {
            "name": "run",
            "location": 478,
            "return": [
                "R",
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "BuildAndTestMaven.name": {
            "name": "name",
            "location": 483,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildAndTestMaven.should_run": {
            "name": "should_run",
            "location": 486,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BuildAndTestMaven.run": {
            "name": "run",
            "location": 489,
            "return": [
                "Optional[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "BuildAndTestNpm.name": {
            "name": "name",
            "location": 500,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildAndTestNpm.should_run": {
            "name": "should_run",
            "location": 503,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BuildAndTestNpm.run": {
            "name": "run",
            "location": 506,
            "return": [
                "Optional[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "apache-release-verification-master/src/helpers.py": {
        "header": {
            "name": "header",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "float",
                    "Exception"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "substep": {
            "name": "substep",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "sh": {
            "name": "sh",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ],
                "workdir": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "apache-release-verification-master/src/main.py": {
        "main": {
            "name": "main",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "module": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "version": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "git_hash": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "gpg_key": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "repo": [
                    "Dict",
                    "bytes",
                    "Optional[Any]",
                    "Any",
                    "bool",
                    "None",
                    "Dict[str,List[Any]]",
                    "int",
                    "Dict[str,list[Any]]"
                ],
                "incubating": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "zipname_template": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "sourcedir_template": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "github_reponame_template": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "build_and_test_command": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "logging.Logger"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "IO",
                    "Callable",
                    "logging.Logger",
                    "None",
                    "Optional[Callable]",
                    "Optional[str]"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "List[dict]",
                    "Match",
                    "List[str]",
                    "bool",
                    "str",
                    "Match[Any]"
                ]
            }
        },
        "make_and_enter_workdir": {
            "name": "make_and_enter_workdir",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "generate_base_url": {
            "name": "generate_base_url",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Dict",
                    "int",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "project": [
                    "str",
                    "Dict",
                    "int",
                    "Tuple[str,str]"
                ],
                "incubating": [
                    "str",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "tests.basilisp.helpers.CompileFn",
                    "None"
                ]
            }
        },
        "fetch_project": {
            "name": "fetch_project",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "module": [
                    "str",
                    "Dict"
                ],
                "version": [
                    "str",
                    "Dict"
                ],
                "incubating": [
                    "str",
                    "int"
                ]
            }
        },
        "fetch_keys": {
            "name": "fetch_keys",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "apache-release-verification-master/src/report.py": {
        "color_result": {
            "name": "color_result",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "kind": [
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "print_report": {
            "name": "print_report",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "report": [
                    "Optional[Union[str,Any,Any,Any]]",
                    "str",
                    "int",
                    "Dict[str,Set[str]]",
                    "Any",
                    "Mapping",
                    "List[str]",
                    "None",
                    "Dict",
                    "Dict[str,set[str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Result.passed": {
            "name": "passed",
            "location": 35,
            "return": [
                "Result",
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "hide_if_passing": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Result.failed": {
            "name": "failed",
            "location": 39,
            "return": [
                "Result",
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str,None]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "hide_if_passing": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "kind": [
                    "str",
                    "bool"
                ]
            }
        },
        "Result.is_passed": {
            "name": "is_passed",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.problem_count": {
            "name": "problem_count",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
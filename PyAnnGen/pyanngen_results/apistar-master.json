{
    "apistar-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "get_packages": {
            "name": "get_packages",
            "location": 19,
            "return": [
                "list"
            ],
            "arguments": {
                "package": [
                    "str",
                    "int"
                ]
            }
        },
        "get_package_data": {
            "name": "get_package_data",
            "location": 30,
            "return": [
                "Dict[(_T0, list)]"
            ],
            "arguments": {
                "package": [
                    "_T0"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "long_description_file": [
                    "str"
                ]
            }
        }
    },
    "apistar-master/apistar/cli.py": {
        "_encoding_from_filename": {
            "name": "_encoding_from_filename",
            "location": 18,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "_echo_error": {
            "name": "_echo_error",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": [],
                "content": [],
                "summary": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "_copy_tree": {
            "name": "_copy_tree",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dst": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "_load_config": {
            "name": "_load_config",
            "location": 72,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "options": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate": {
            "name": "validate",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "format": [],
                "encoding": [],
                "verbose": []
            }
        },
        "docs": {
            "name": "docs",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "format": [],
                "encoding": [],
                "output_dir": [],
                "theme": [],
                "serve": [],
                "verbose": []
            }
        },
        "request": {
            "name": "request",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "operation": [],
                "params": [],
                "path": [],
                "format": [],
                "encoding": [],
                "verbose": []
            }
        }
    },
    "apistar-master/apistar/compat.py": {
        "pygments_highlight": {
            "name": "pygments_highlight",
            "location": 29,
            "return": [
                "_T0"
            ],
            "arguments": {
                "text": [
                    "_T0"
                ],
                "lang": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "List[str]",
                    "list[str]"
                ],
                "style": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "pygments_css": {
            "name": "pygments_css",
            "location": 32,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "style": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DownloadedFile.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "typing.Text",
                "Optional[str]",
                "Tuple[str, str]",
                "Union[dict, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadedFile.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "apistar-master/apistar/core.py": {
        "validate": {
            "name": "validate",
            "location": 27,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "Generator",
                "bool",
                "float"
            ],
            "arguments": {
                "schema": [
                    "Union[(bytes, dict, str)]"
                ],
                "format": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "docs": {
            "name": "docs",
            "location": 89,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float",
                    "bool",
                    "Optional[bytes]",
                    "bytes",
                    "int",
                    "None"
                ],
                "format": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bytes]",
                    "int",
                    "bytes"
                ],
                "encoding": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bytes]",
                    "int",
                    "bytes"
                ],
                "theme": [
                    "typing.Text",
                    "int",
                    "float"
                ],
                "schema_url": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "bytes",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "static_url": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "docs.static_url_func": {
            "name": "static_url_func",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "apistar-master/apistar/document.py": {
        "Document.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Sequence[Union[(Link, Section)]]"
                ],
                "url": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "Document.get_links": {
            "name": "get_links",
            "location": 38,
            "return": [
                "List[Link]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.get_sections": {
            "name": "get_sections",
            "location": 41,
            "return": [
                "List[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.walk_links": {
            "name": "walk_links",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "content": [
                    "Sequence[Union[(Link, Section)]]"
                ],
                "title": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "Section.get_links": {
            "name": "get_links",
            "location": 83,
            "return": [
                "List[Link]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.get_sections": {
            "name": "get_sections",
            "location": 86,
            "return": [
                "List[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.walk_links": {
            "name": "walk_links",
            "location": 89,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "previous_sections": [
                    "tuple[]",
                    "List[dict]",
                    "tuple",
                    "str"
                ]
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "handler": [
                    "Callable"
                ],
                "name": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "response": [
                    "Response"
                ],
                "title": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "fields": [
                    "Sequence[Field]"
                ]
            }
        },
        "Link.get_path_fields": {
            "name": "get_path_fields",
            "location": 160,
            "return": [
                "List[Field]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.get_query_fields": {
            "name": "get_query_fields",
            "location": 163,
            "return": [
                "List[Field]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.get_body_field": {
            "name": "get_body_field",
            "location": 166,
            "return": [
                "Optional[Field]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.get_expanded_body": {
            "name": "get_expanded_body",
            "location": 172,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "location": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "required": [
                    "bool"
                ],
                "schema": [
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "example": [
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ],
                "status_code": [
                    "int"
                ],
                "schema": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "apistar-master/apistar/exceptions.py": {
        "ErrorMessage.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[dict[str, str]]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[Tuple[str, str], int]",
                    "dict[tuple[typing.Union[str,str]], int]"
                ],
                "code": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[dict[str, str]]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[Tuple[str, str], int]",
                    "dict[tuple[typing.Union[str,str]], int]"
                ],
                "index": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Sequence[Dict[str, str]]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[dict[str, str]]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[Tuple[str, str], int]",
                    "dict[tuple[typing.Union[str,str]], int]"
                ],
                "position": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Sequence[Dict[str, str]]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[dict[str, str]]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[Tuple[str, str], int]",
                    "dict[tuple[typing.Union[str,str]], int]"
                ]
            }
        },
        "ErrorMessage.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[float]",
                    "float",
                    "dict",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[, ]",
                    "AbstractSet",
                    "dict[str, str]",
                    "Optional[Exception]",
                    "typing.AbstractSet",
                    "Exception"
                ]
            }
        },
        "ErrorMessage.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeError.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "int",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ],
                "summary": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ValidationError.as_dict": {
            "name": "as_dict",
            "location": 43,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorResponse.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "status_code": [
                    "int",
                    "str"
                ],
                "content": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Callable]",
                    "dict[str, typing.Callable[, ]]"
                ]
            }
        },
        "ClientError.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "int",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        }
    },
    "apistar-master/apistar/__init__.py": {},
    "apistar-master/apistar/client/auth.py": {
        "TokenAuthentication.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "scheme": [
                    "typing.Text",
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        },
        "TokenAuthentication.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_T0"
                ]
            }
        },
        "SessionAuthentication.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csrf_cookie_name": [
                    "str",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "csrf_header_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "SessionAuthentication.store_csrf_token": {
            "name": "store_csrf_token",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "SessionAuthentication.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_T0"
                ]
            }
        }
    },
    "apistar-master/apistar/client/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "format": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "encoding": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "auth": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "bytes",
                    "typing.Mapping"
                ],
                "decoders": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "bytes",
                    "typing.Mapping"
                ],
                "encoders": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "bytes",
                    "typing.Mapping"
                ],
                "headers": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "bytes",
                    "typing.Mapping"
                ],
                "session": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "bytes",
                    "typing.Mapping"
                ],
                "allow_cookies": [
                    "bool",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "bytes"
                ]
            }
        },
        "Client.init_transport": {
            "name": "init_transport",
            "location": 27,
            "return": [
                "HTTPTransport",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "int",
                    "None"
                ],
                "decoders": [
                    "str",
                    "int",
                    "None"
                ],
                "encoders": [
                    "str",
                    "int",
                    "None"
                ],
                "headers": [
                    "str",
                    "int",
                    "None"
                ],
                "session": [
                    "str",
                    "int",
                    "None"
                ],
                "allow_cookies": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Client.lookup_operation": {
            "name": "lookup_operation",
            "location": 45,
            "return": [
                "str",
                "Union[str, Dict]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "operation_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Client.get_url": {
            "name": "get_url",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "Union[str, bytes]"
                ],
                "params": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.get_query_params": {
            "name": "get_query_params",
            "location": 77,
            "return": [
                "dict[, str]",
                "str",
                "bool",
                "Optional[Sequence[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "Optional[str]"
                ],
                "params": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Client.get_content_and_encoding": {
            "name": "get_content_and_encoding",
            "location": 84,
            "return": [
                "tuple[str]",
                "str",
                "tuple[None]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Client.request": {
            "name": "request",
            "location": 90,
            "return": [
                "int",
                "List[str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "operation_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "apistar-master/apistar/client/debug.py": {
        "expand_args": {
            "name": "expand_args",
            "location": 14,
            "return": [
                "bool",
                "int",
                "typing.Text",
                "list[]",
                "list[str]",
                "dict[, ]",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "fmt": [
                    "list[]",
                    "list",
                    "list[str]",
                    "List[str]",
                    "str",
                    "dict[, ]",
                    "dict",
                    "typing.Callable[, ]",
                    "callable",
                    "Callable"
                ],
                "args": []
            }
        },
        "debug_request": {
            "name": "debug_request",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "debug_response": {
            "name": "debug_response",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "requests.Response",
                    "dict"
                ]
            }
        },
        "DebugSession": {
            "name": "DebugSession",
            "location": 89,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "wrapped_session": [
                    "sqlalchemy.orm.Session",
                    "None"
                ]
            }
        },
        "debug_request.request_echo": {
            "name": "request_echo",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "debug_response.success_echo": {
            "name": "success_echo",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "debug_response.failure_echo": {
            "name": "failure_echo",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "debug_response.info_echo": {
            "name": "info_echo",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "DebugAdapter.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped_session": [
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Optional[int]",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "DebugAdapter.send": {
            "name": "send",
            "location": 82,
            "return": [
                "bytes",
                "str",
                "dict",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "starlette.requests.Request"
                ]
            }
        }
    },
    "apistar-master/apistar/client/decoders.py": {
        "_guess_extension": {
            "name": "_guess_extension",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "content_type": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_unique_output_path": {
            "name": "_unique_output_path",
            "location": 178,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "_T0"
                ]
            }
        },
        "_safe_filename": {
            "name": "_safe_filename",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_get_filename_from_content_disposition": {
            "name": "_get_filename_from_content_disposition",
            "location": 211,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "content_disposition": [
                    "str"
                ]
            }
        },
        "_get_filename_from_url": {
            "name": "_get_filename_from_url",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "content_type": [
                    "str",
                    "None",
                    "Type[Any]",
                    "Union[str, bytes]",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "_get_filename": {
            "name": "_get_filename",
            "location": 241,
            "return": [
                "str",
                "set[str]",
                "bool",
                "Optional[str]",
                "None",
                "list[str]"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "content_type": [
                    "str",
                    "None"
                ],
                "content_disposition": [
                    "str",
                    "None",
                    "BinaryIO",
                    "bool",
                    "dict",
                    "typing.BinaryIO",
                    "dict[, ]"
                ]
            }
        },
        "BaseDecoder.decode": {
            "name": "decode",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "bytestring": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "JSONDecoder.decode": {
            "name": "decode",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Mapping[str, object]",
                    "typing.Mapping"
                ]
            }
        },
        "TextDecoder.decode": {
            "name": "decode",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "list[dict[, ]]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DownloadDecoder.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "download_dir": [
                    "Optional[str]",
                    "None",
                    "str",
                    "int",
                    "Optional[TextIO]",
                    "typing.TextIO"
                ]
            }
        },
        "DownloadDecoder.decode": {
            "name": "decode",
            "location": 53,
            "return": [
                "DownloadedFile",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "apistar-master/apistar/client/encoders.py": {
        "_ForceMultiPartDict.__bool__": {
            "name": "__bool__",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ForceMultiPartDict.__nonzero__": {
            "name": "__nonzero__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEncoder.encode": {
            "name": "encode",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]",
                    "Dict[str, Union[str, int]]"
                ],
                "content": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "JSONEncoder.encode": {
            "name": "encode",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict[str, Any]",
                    "str",
                    "Union[str, None]",
                    "dict",
                    "bool"
                ],
                "content": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "Union[str, None]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "URLEncodedEncoder.encode": {
            "name": "encode",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict[str, Any]",
                    "str",
                    "Union[str, None]",
                    "dict",
                    "bool"
                ],
                "content": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "Union[str, None]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MultiPartEncoder.encode": {
            "name": "encode",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "bool"
                ],
                "content": [
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MultiPartEncoder.is_file": {
            "name": "is_file",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list",
                    "list[]",
                    "int",
                    "List[Tuple[str, str, bool]]",
                    "list[tuple[typing.Union[str,str,bool]]]",
                    "Optional[str]",
                    "str",
                    "List[\"SqlFile\"]",
                    "None",
                    "dict",
                    "list[\"SqlFile\"]",
                    "dict[, ]"
                ]
            }
        }
    },
    "apistar-master/apistar/client/transports.py": {
        "BaseTransport.send": {
            "name": "send",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "list",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "url": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "list",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "query_params": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "list",
                    "Callable",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "content": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "list",
                    "Callable",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "encoding": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "list",
                    "Callable",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HTTPTransport.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "decoders": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "type"
                ],
                "encoders": [
                    "dict[, ]",
                    "dict",
                    "dict[int, dict[str, typing.Any]]",
                    "Mapping[str, str]",
                    "list[int]",
                    "str",
                    "list[typing.Union[dict[, ],str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "Dict[int, Dict[str, Any]]",
                    "List[int]",
                    "List[Dict]",
                    "Iterable[str]"
                ],
                "headers": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "session": [
                    "str",
                    "None"
                ],
                "allow_cookies": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "HTTPTransport.send": {
            "name": "send",
            "location": 70,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "dict[str, str]",
                "dict[, ]",
                "dict[int, typing.Type]",
                "dict[str, dict[str, typing.Any]]",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "Optional[dict]",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "None"
                ],
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "Optional[dict]",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "None"
                ],
                "query_params": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "content": [
                    "None"
                ],
                "encoding": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HTTPTransport.get_encoder": {
            "name": "get_encoder",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ]
            }
        },
        "HTTPTransport.get_decoder": {
            "name": "get_decoder",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "HTTPTransport.get_request_options": {
            "name": "get_request_options",
            "location": 122,
            "return": [
                "dict[typing.Text, typing.Union[None,int,dict[, ],str,typing.Optional[],dict[str, _]]]",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query_params": [
                    "int",
                    "None",
                    "Optional[Dict]",
                    "str",
                    "Optional[str]",
                    "dict[, ]",
                    "Optional",
                    "typing.Optional[]",
                    "Dict[str, object]",
                    "dict[str, _]"
                ],
                "content": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "encoding": [
                    "str",
                    "bool",
                    "None",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "HTTPTransport.decode_response_content": {
            "name": "decode_response_content",
            "location": 135,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "requests.Response",
                    "dict"
                ]
            }
        }
    },
    "apistar-master/apistar/client/__init__.py": {},
    "apistar-master/apistar/schemas/autodetermine.py": {
        "AutoDetermine.validate": {
            "name": "validate",
            "location": 10,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T",
                    "Optional[Sequence[T]]",
                    "int"
                ],
                "strict": [
                    "bool"
                ]
            }
        }
    },
    "apistar-master/apistar/schemas/config.py": {},
    "apistar-master/apistar/schemas/jsonschema.py": {},
    "apistar-master/apistar/schemas/openapi.py": {
        "lookup": {
            "name": "lookup",
            "location": 334,
            "return": [
                "str",
                "None",
                "bool",
                "Optional[bool]",
                "dict[, ]",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "keys": [
                    "Optional[Any]",
                    "typing.Any",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "default": [
                    "Optional[Any]",
                    "None",
                    "str",
                    "bool",
                    "typing.Any",
                    "Optional[str]"
                ]
            }
        },
        "_simple_slugify": {
            "name": "_simple_slugify",
            "location": 343,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OpenAPI.load": {
            "name": "load",
            "location": 353,
            "return": [
                "apistar.document.Document"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "OpenAPI.get_schema_definitions": {
            "name": "get_schema_definitions",
            "location": 369,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "OpenAPI.get_content": {
            "name": "get_content",
            "location": 379,
            "return": [
                "List[Union[(apistar.document.Link, apistar.document.Section)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "base_url": [
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "schema_definitions": [
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "OpenAPI.get_link": {
            "name": "get_link",
            "location": 414,
            "return": [
                "Optional[apistar.document.Link]"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "path_info": [
                    "dict[, ]",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "int"
                ],
                "operation": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "operation_info": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "dict[, ]",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Optional[dict]",
                    "Dict[str, str]"
                ],
                "schema_definitions": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "OpenAPI.get_field": {
            "name": "get_field",
            "location": 473,
            "return": [
                "apistar.document.Field"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, object]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "OrderedDict"
                ],
                "schema_definitions": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "apistar-master/apistar/schemas/swagger.py": {
        "lookup": {
            "name": "lookup",
            "location": 320,
            "return": [
                "str",
                "None",
                "bool",
                "Optional[bool]",
                "dict[, ]",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "keys": [
                    "Optional[Any]",
                    "typing.Any",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "default": [
                    "Optional[Any]",
                    "None",
                    "str",
                    "bool",
                    "typing.Any",
                    "Optional[str]"
                ]
            }
        },
        "_simple_slugify": {
            "name": "_simple_slugify",
            "location": 329,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Swagger.load": {
            "name": "load",
            "location": 339,
            "return": [
                "apistar.document.Document"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Swagger.get_schema_definitions": {
            "name": "get_schema_definitions",
            "location": 359,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Swagger.get_content": {
            "name": "get_content",
            "location": 369,
            "return": [
                "List[Union[(apistar.document.Link, apistar.document.Section)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "base_url": [
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "schema_definitions": [
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Swagger.get_link": {
            "name": "get_link",
            "location": 404,
            "return": [
                "Optional[apistar.document.Link]"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "path_info": [
                    "dict[str, str]",
                    "dict[, ]",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict]",
                    "bool",
                    "List[str]"
                ],
                "operation": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "operation_info": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "bool",
                    "Optional[Dict]",
                    "Optional[dict]"
                ],
                "schema_definitions": [
                    "str",
                    "Exception",
                    "type",
                    "bytes",
                    "typing.Type"
                ]
            }
        },
        "Swagger.get_field": {
            "name": "get_field",
            "location": 461,
            "return": [
                "apistar.document.Field"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, object]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "OrderedDict"
                ],
                "schema_definitions": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "apistar-master/apistar/schemas/__init__.py": {},
    "apistar-master/docs-theme/__init__.py": {},
    "apistar-master/tests/test_cli.py": {
        "test_valid_document": {
            "name": "test_valid_document",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_invalid_document": {
            "name": "test_invalid_document",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_invalid_document_verbose": {
            "name": "test_invalid_document_verbose",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_docs": {
            "name": "test_docs",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "homepage": {
            "name": "homepage",
            "location": 86,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "error": {
            "name": "error",
            "location": 91,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_request": {
            "name": "test_request",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_request_verbose": {
            "name": "test_request_verbose",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_request_error": {
            "name": "test_request_error",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "apistar-master/tests/client/test_auth.py": {
        "token_auth": {
            "name": "token_auth",
            "location": 12,
            "return": [
                "JSONResponse",
                "Dict[str, Any]",
                "int",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_token_auth": {
            "name": "test_token_auth",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "apistar-master/tests/client/test_client.py": {
        "path_param": {
            "name": "path_param",
            "location": 13,
            "return": [
                "JSONResponse",
                "bool",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "query_params": {
            "name": "query_params",
            "location": 18,
            "return": [
                "JSONResponse",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Union[dict, list]",
                    "dict[, ]",
                    "starlette.requests.Request",
                    "list[]"
                ]
            }
        },
        "test_path_param": {
            "name": "test_path_param",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_query_params": {
            "name": "test_query_params",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_body_param": {
            "name": "test_body_param",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_param": {
            "name": "test_missing_param",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_extra_param": {
            "name": "test_extra_param",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "apistar-master/tests/client/test_decoders.py": {
        "text_response": {
            "name": "text_response",
            "location": 13,
            "return": [
                "PlainTextResponse",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "dict[, ]",
                    "starlette.requests.Request",
                    "dict"
                ]
            }
        },
        "file_response": {
            "name": "file_response",
            "location": 18,
            "return": [
                "Response",
                "str",
                "Optional[Dict[str, bytes]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "file_response_url_filename": {
            "name": "file_response_url_filename",
            "location": 27,
            "return": [
                "Response",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "file_response_no_extension": {
            "name": "file_response_no_extension",
            "location": 33,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "requests.Response"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "file_response_no_name": {
            "name": "file_response_no_name",
            "location": 39,
            "return": [
                "Response",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_text_response": {
            "name": "test_text_response",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_file_response": {
            "name": "test_file_response",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_file_response_url_filename": {
            "name": "test_file_response_url_filename",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_file_response_no_extension": {
            "name": "test_file_response_no_extension",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_file_response_no_name": {
            "name": "test_file_response_no_name",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unique_filename": {
            "name": "test_unique_filename",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "apistar-master/tests/core/test_docs.py": {
        "test_docs": {
            "name": "test_docs",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_docs_with_static_url_func": {
            "name": "test_docs_with_static_url_func",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "apistar-master/tests/core/test_parse.py": {},
    "apistar-master/tests/core/test_validate.py": {
        "test_validate_openapi": {
            "name": "test_validate_openapi",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_openapi_datastructure": {
            "name": "test_validate_openapi_datastructure",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_autodetermine_openapi": {
            "name": "test_validate_autodetermine_openapi",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_autodetermine_swagger": {
            "name": "test_validate_autodetermine_swagger",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_autodetermine_failed": {
            "name": "test_validate_autodetermine_failed",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_with_bad_format": {
            "name": "test_validate_with_bad_format",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_with_bad_encoding": {
            "name": "test_validate_with_bad_encoding",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer_json": {
            "name": "test_infer_json",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer_yaml": {
            "name": "test_infer_yaml",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "apistar-master/tests/schemas/test_openapi.py": {
        "test_openapi": {
            "name": "test_openapi",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "apistar-master/tests/schemas/test_swagger.py": {
        "test_openapi": {
            "name": "test_openapi",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "apistar-master/tests/schemas/__init__.py": {}
}
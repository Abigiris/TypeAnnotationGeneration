{
    "aql-main/aql/column.py": {
        "Index.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T_co]",
                    "AbstractSet[T]",
                    "AbstractSet[Any]",
                    "Union[int, float]",
                    "dict"
                ]
            }
        },
        "ColumnType.parse": {
            "name": "parse",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t": [
                    "Type",
                    "starlette.types.Scope"
                ]
            }
        },
        "Column.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "types.ModuleType"
                ],
                "ctype": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Sequence",
                    "Optional[int]"
                ],
                "default": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Sequence",
                    "Optional[int]"
                ],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Column.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__hash__": {
            "name": "__hash__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.full_name": {
            "name": "full_name",
            "location": 103,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.in_": {
            "name": "in_",
            "location": 106,
            "return": [
                "bool",
                "Union[bool, Iterable[str]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bool",
                    "Sequence[Any]",
                    "Dict[str, Any]",
                    "Iterable",
                    "str"
                ]
            }
        },
        "Column.like": {
            "name": "like",
            "location": 109,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.ilike": {
            "name": "ilike",
            "location": 112,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.__ne__": {
            "name": "__ne__",
            "location": 118,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.__gt__": {
            "name": "__gt__",
            "location": 121,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.__ge__": {
            "name": "__ge__",
            "location": 124,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.__lt__": {
            "name": "__lt__",
            "location": 127,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Column.__le__": {
            "name": "__le__",
            "location": 130,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "aql-main/aql/connector.py": {
        "connect": {
            "name": "connect",
            "location": 14,
            "return": [
                "aql.engines.base.Connection"
            ],
            "arguments": {
                "location": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "typing.Callable[, ]",
                    "Iterable[str]",
                    "typing.Type",
                    "Callable",
                    "typing.Mapping",
                    "type",
                    "dict[str, list[str]]",
                    "Mapping[starfish.types.Coordinates, Tuple[starfish.types.Number, starfish.types.Number]]",
                    "Dict[str, List[str]]"
                ]
            }
        }
    },
    "aql-main/aql/errors.py": {},
    "aql-main/aql/query.py": {
        "start": {
            "name": "start",
            "location": 43,
            "return": [
                "Callable"
            ],
            "arguments": {
                "action": [
                    "int",
                    "Dict[str, str]",
                    "Callable",
                    "List[types.ServiceT]",
                    "bool",
                    "str",
                    "Optional"
                ]
            }
        },
        "only": {
            "name": "only",
            "location": 58,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "start.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "only.wrapper": {
            "name": "wrapper",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Query.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Query.create": {
            "name": "create",
            "location": 95,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "if_not_exists": [
                    "bool",
                    "float"
                ]
            }
        },
        "Query.insert": {
            "name": "insert",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.select": {
            "name": "select",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.update": {
            "name": "update",
            "location": 110,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.delete": {
            "name": "delete",
            "location": 123,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.distinct": {
            "name": "distinct",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.values": {
            "name": "values",
            "location": 132,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.join": {
            "name": "join",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "list",
                    "float",
                    "type",
                    "str",
                    "Callable"
                ],
                "style": [
                    "list",
                    "float",
                    "type",
                    "str",
                    "Callable"
                ]
            }
        },
        "Query.on": {
            "name": "on",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.using": {
            "name": "using",
            "location": 150,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.groupby": {
            "name": "groupby",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.having": {
            "name": "having",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.where": {
            "name": "where",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.orderby": {
            "name": "orderby",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "Iterator[str]",
                    "Pattern",
                    "bool",
                    "list"
                ]
            }
        },
        "Query.limit": {
            "name": "limit",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Query.offset": {
            "name": "offset",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Query.everything": {
            "name": "everything",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.factory": {
            "name": "factory",
            "location": 220,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedQuery.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "bool",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "Optional[Mapping]",
                    "sqlalchemy.Table"
                ],
                "sql": [
                    "str"
                ],
                "parameters": [
                    "Sequence"
                ]
            }
        },
        "PreparedQuery.__iter__": {
            "name": "__iter__",
            "location": 234,
            "return": [
                "tupleiterator[Sequence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "start.wrapper.wrapped": {
            "name": "wrapped",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "only.wrapper.wrapped": {
            "name": "wrapped",
            "location": 64,
            "return": [
                "types.Resolver",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/table.py": {
        "table": {
            "name": "table",
            "location": 123,
            "return": [
                "Callable[([Type[T]], Table[T])]"
            ],
            "arguments": {
                "cls_or_name": [
                    "str"
                ]
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "cons": [
                    "Iterable"
                ],
                "source": [
                    "Type[T]"
                ]
            }
        },
        "Table.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__contains__": {
            "name": "__contains__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Table.__getitem__": {
            "name": "__getitem__",
            "location": 80,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Table.create": {
            "name": "create",
            "location": 87,
            "return": [
                "aql.query.Query"
            ],
            "arguments": {
                "self": [],
                "if_not_exists": [
                    "bool"
                ]
            }
        },
        "Table.insert": {
            "name": "insert",
            "location": 91,
            "return": [
                "aql.query.Query"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.select": {
            "name": "select",
            "location": 95,
            "return": [
                "aql.query.Query"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.update": {
            "name": "update",
            "location": 99,
            "return": [
                "aql.query.Query"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.delete": {
            "name": "delete",
            "location": 103,
            "return": [
                "aql.query.Query"
            ],
            "arguments": {
                "self": []
            }
        },
        "table.wrapper": {
            "name": "wrapper",
            "location": 134,
            "return": [
                "str",
                "Callable",
                "Tuple[float]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "aql-main/aql/types.py": {
        "And.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimaryKey.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "enum.Enum",
                    "int",
                    "T"
                ]
            }
        },
        "Unique.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "enum.Enum",
                    "int",
                    "T"
                ]
            }
        }
    },
    "aql-main/aql/__init__.py": {},
    "aql-main/aql/__version__.py": {},
    "aql-main/aql/engines/base.py": {
        "q": {
            "name": "q",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "typing.Type",
                    "Type",
                    "str",
                    "BaseException",
                    "mypy.types.CallableType"
                ]
            }
        },
        "MissingConnector.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ]
            }
        },
        "MissingConnector.__getattr__": {
            "name": "__getattr__",
            "location": 45,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Engine.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Engine.prepare": {
            "name": "prepare",
            "location": 63,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Engine"
                ],
                "location": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "logging.Logger"
                ]
            }
        },
        "Connection.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "engine": [
                    "Type[Engine]"
                ]
            }
        },
        "Connection.get_connector": {
            "name": "get_connector",
            "location": 99,
            "return": [
                "Tuple[(Type[Connection], Type[Engine])]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Connection.autocommit": {
            "name": "autocommit",
            "location": 131,
            "return": [
                "None",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Connection.execute": {
            "name": "execute",
            "location": 151,
            "return": [
                "Result[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        },
        "Cursor.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Connection"
                ],
                "cursor": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Cursor.__aiter__": {
            "name": "__aiter__",
            "location": 166,
            "return": [
                "AsyncIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.__await__": {
            "name": "__await__",
            "location": 177,
            "return": [
                "Generator[(Any, None, Sequence[T])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.connection": {
            "name": "connection",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.row_count": {
            "name": "row_count",
            "location": 194,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.last_id": {
            "name": "last_id",
            "location": 199,
            "return": [
                "typing.Optional[builtins.int]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.convert": {
            "name": "convert",
            "location": 203,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "str",
                    "typing.Sequence[typing.MutableSet]",
                    "float",
                    "bool",
                    "Sequence[MutableSet[int]]"
                ]
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ],
                "connection": [
                    "Connection"
                ]
            }
        },
        "Result.__await__": {
            "name": "__await__",
            "location": 259,
            "return": [
                "Generator[(Any, None, Sequence[T])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.__aiter__": {
            "name": "__aiter__",
            "location": 262,
            "return": [
                "AsyncIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.row_count": {
            "name": "row_count",
            "location": 272,
            "return": [
                "int",
                "float",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.last_id": {
            "name": "last_id",
            "location": 279,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/engines/mysql.py": {
        "MysqlEngine.create": {
            "name": "create",
            "location": 22,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        }
    },
    "aql-main/aql/engines/sql.py": {
        "SqlEngine.insert": {
            "name": "insert",
            "location": 58,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        },
        "SqlEngine.render_comparison": {
            "name": "render_comparison",
            "location": 69,
            "return": [
                "tuple[typing.Union[typing.Text,list[]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "comp": [
                    "str"
                ]
            }
        },
        "SqlEngine.render_clause": {
            "name": "render_clause",
            "location": 83,
            "return": [
                "tuple[typing.Union[typing.Text,list[]]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "clause": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SqlEngine.render_join": {
            "name": "render_join",
            "location": 94,
            "return": [
                "tuple[typing.Union[typing.Text,list[]]]",
                "Dict[str, Any]",
                "base.ConfigOptions"
            ],
            "arguments": {
                "self": [],
                "join": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SqlEngine.select": {
            "name": "select",
            "location": 116,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        },
        "SqlEngine.update": {
            "name": "update",
            "location": 157,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        },
        "SqlEngine.delete": {
            "name": "delete",
            "location": 174,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        }
    },
    "aql-main/aql/engines/sqlite.py": {
        "SqliteEngine.create": {
            "name": "create",
            "location": 23,
            "return": [
                "aql.query.PreparedQuery[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "aql.query.Query[T]"
                ]
            }
        },
        "SqliteConnection.autocommit": {
            "name": "autocommit",
            "location": 80,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[float]",
                    "Optional[bool]",
                    "bool",
                    "Hashable",
                    "dict",
                    "Optional[str]",
                    "Optional[Iterable['cirq.Qid']]",
                    "Union[int, None]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        }
    },
    "aql-main/aql/engines/__init__.py": {},
    "aql-main/aql/tests/column.py": {
        "ColumnTest.test_constraints": {
            "name": "test_constraints",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnTest.test_index_equality": {
            "name": "test_index_equality",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnTest.test_column_type": {
            "name": "test_column_type",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnTest.test_column_comparisons": {
            "name": "test_column_comparisons",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/connector.py": {
        "ConnectorTest.test_connect_unknown": {
            "name": "test_connect_unknown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectorTest.test_connect_bad_uri": {
            "name": "test_connect_bad_uri",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectorTest.test_connect_sqlite": {
            "name": "test_connect_sqlite",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/query.py": {
        "QueryTest.test_create": {
            "name": "test_create",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_insert": {
            "name": "test_insert",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_select": {
            "name": "test_select",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_select_joins": {
            "name": "test_select_joins",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_select_group_by": {
            "name": "test_select_group_by",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_update": {
            "name": "test_update",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_delete": {
            "name": "test_delete",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_delete_everything": {
            "name": "test_delete_everything",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_decorator_start": {
            "name": "test_decorator_start",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_decorator_only": {
            "name": "test_decorator_only",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_factory": {
            "name": "test_factory",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.test_prepared_query_iter": {
            "name": "test_prepared_query_iter",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/table.py": {
        "TableTest.test_table_init": {
            "name": "test_table_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_table_call": {
            "name": "test_table_call",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_table_decorator_basic": {
            "name": "test_table_decorator_basic",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_table_decorator_indexes": {
            "name": "test_table_decorator_indexes",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_table_decorator_namedtuple": {
            "name": "test_table_decorator_namedtuple",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_table_helpers": {
            "name": "test_table_helpers",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/types.py": {
        "TypesTest.test_primary_key": {
            "name": "test_primary_key",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypesTest.test_unique": {
            "name": "test_unique",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/__init__.py": {},
    "aql-main/aql/tests/__main__.py": {},
    "aql-main/aql/tests/engines/base.py": {
        "MockEngine.select": {
            "name": "select",
            "location": 16,
            "return": [
                "aql.query.PreparedQuery[nothing]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "alerta.database.base.Query",
                    "int",
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, str]",
                    "supersemodels.sql_lab.Query"
                ]
            }
        },
        "EngineTest.test_prepare": {
            "name": "test_prepare",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineTest.test_register_duplicate": {
            "name": "test_register_duplicate",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "log_mock": [
                    "mock.Mock"
                ]
            }
        }
    },
    "aql-main/aql/tests/engines/integration.py": {},
    "aql-main/aql/tests/engines/mysql.py": {
        "MysqlEngineTest.test_create": {
            "name": "test_create",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlEngineTest.test_create_manual": {
            "name": "test_create_manual",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlEngineTest.test_create_no_type": {
            "name": "test_create_no_type",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlEngineTest.test_create_bad_type": {
            "name": "test_create_bad_type",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/engines/sql.py": {
        "SqlEngineTest.test_insert": {
            "name": "test_insert",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_render_comparison": {
            "name": "test_render_comparison",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_render_clause": {
            "name": "test_render_clause",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_render_join": {
            "name": "test_render_join",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_simple": {
            "name": "test_select_simple",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_order": {
            "name": "test_select_order",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_where": {
            "name": "test_select_where",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_join_using": {
            "name": "test_select_join_using",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_join_on": {
            "name": "test_select_join_on",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_join_compound": {
            "name": "test_select_join_compound",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_groupby": {
            "name": "test_select_groupby",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_select_groupby_having": {
            "name": "test_select_groupby_having",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_update": {
            "name": "test_update",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_update_limit": {
            "name": "test_update_limit",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_update_where": {
            "name": "test_update_where",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_delete_limit": {
            "name": "test_delete_limit",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_delete_where": {
            "name": "test_delete_where",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlEngineTest.test_delete_unsafe": {
            "name": "test_delete_unsafe",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/engines/sqlite.py": {
        "SqliteEngineTest.test_create": {
            "name": "test_create",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteEngineTest.test_create_manual": {
            "name": "test_create_manual",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteEngineTest.test_create_no_type": {
            "name": "test_create_no_type",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteEngineTest.test_create_bad_type": {
            "name": "test_create_bad_type",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aql-main/aql/tests/engines/__init__.py": {},
    "aql-main/docs/conf.py": {}
}
{
    "armpy-master/apriori.py": {
        "contains_all_subsets": {
            "name": "contains_all_subsets",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "candidate": [
                    "Union[Dict, List]",
                    "int",
                    "dict",
                    "Tuple[str, list]",
                    "Dict[int, Set[int]]",
                    "type",
                    "Mapping[Any, Any]"
                ],
                "candidates": [
                    "dict[, ]",
                    "Union[Dict, List]",
                    "list[]",
                    "tuple[typing.Union[str,list[]]]",
                    "int",
                    "dict[int, set[int]]",
                    "dict",
                    "Tuple[str, list]",
                    "Dict[int, Set[int]]",
                    "type",
                    "Mapping[Any, Any]"
                ]
            }
        },
        "apriori": {
            "name": "apriori",
            "location": 16,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "index": [
                    "list",
                    "bool",
                    "int",
                    "str"
                ],
                "minsup": [
                    "list",
                    "int",
                    "list[]",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "armpy-master/armpy.py": {
        "set_to_string": {
            "name": "set_to_string",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "float_between_0_and_1": {
            "name": "float_between_0_and_1",
            "location": 21,
            "return": [
                "float"
            ],
            "arguments": {
                "string": []
            }
        },
        "float_gteq_1": {
            "name": "float_gteq_1",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "string": []
            }
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "armpy-master/datasetreader.py": {
        "DatasetReader.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_file_path": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DatasetReader.__iter__": {
            "name": "__iter__",
            "location": 7,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetReader.__iter__.tokenize": {
            "name": "tokenize",
            "location": 9,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "float"
                ]
            }
        },
        "DatasetReader.__iter__.itemize": {
            "name": "itemize",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tokens": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "armpy-master/fptree.py": {
        "path_to_root": {
            "name": "path_to_root",
            "location": 76,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "node": [
                    "FPNode"
                ]
            }
        },
        "construct_conditional_tree": {
            "name": "construct_conditional_tree",
            "location": 84,
            "return": [
                "FPTree"
            ],
            "arguments": {
                "tree": [
                    "FPTree"
                ],
                "item": [
                    "int"
                ]
            }
        },
        "fp_growth": {
            "name": "fp_growth",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "FPTree"
                ],
                "min_count": [
                    "int"
                ],
                "path": [
                    "List[int]"
                ],
                "path_count": [
                    "int"
                ],
                "itemsets": [
                    "List[List[int]]"
                ],
                "itemset_counts": [
                    "Dict[(Tuple[(int, ...)], int)]"
                ]
            }
        },
        "mine_fp_tree": {
            "name": "mine_fp_tree",
            "location": 130,
            "return": [
                "Tuple[(List[nothing], Dict[(nothing, nothing)], Any)]"
            ],
            "arguments": {
                "transactions": [
                    "str",
                    "list[list[int]]",
                    "List[List[int]]",
                    "list[int]",
                    "List[int]",
                    "T"
                ],
                "min_support": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "sort_transaction": {
            "name": "sort_transaction",
            "location": 148,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "transaction": [
                    "_T0"
                ],
                "frequency": [
                    "bytes",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "count_item_frequency_in": {
            "name": "count_item_frequency_in",
            "location": 163,
            "return": [
                "Tuple[(typing.Counter, int)]"
            ],
            "arguments": {
                "transactions": [
                    "Iterable[int]",
                    "List[List[str]]",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "construct_initial_tree": {
            "name": "construct_initial_tree",
            "location": 173,
            "return": [
                "Tuple[(FPTree, int)]"
            ],
            "arguments": {
                "transactions": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "min_support": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "FPNode.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Optional[Dict[str, Any]]",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "count": [
                    "int",
                    "str",
                    "Set[str]"
                ],
                "parent": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "FPNode.is_root": {
            "name": "is_root",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPNode.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "Optional[Union[float, str]]",
                    "bool",
                    "str"
                ]
            }
        },
        "FPNode.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPTree.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPTree.insert": {
            "name": "insert",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "Iterator[int]"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "FPTree.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "armpy-master/generaterules.py": {
        "split_out": {
            "name": "split_out",
            "location": 12,
            "return": [
                "Tuple[(List[int], List[int])]"
            ],
            "arguments": {
                "item": [
                    "int"
                ],
                "itemset": [
                    "List[int]"
                ]
            }
        },
        "calc_stats": {
            "name": "calc_stats",
            "location": 16,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "support": [
                    "float"
                ],
                "antecedent": [
                    "List[int]"
                ],
                "consequent": [
                    "List[int]"
                ],
                "calculate_support": [
                    "Callable[([List[int]], float)]"
                ]
            }
        },
        "is_sorted": {
            "name": "is_sorted",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "candidates": [
                    "str",
                    "bytes"
                ]
            }
        },
        "prefix_match_len": {
            "name": "prefix_match_len",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "List[int]"
                ],
                "b": [
                    "List[int]"
                ]
            }
        },
        "generate_rules_for_itemset": {
            "name": "generate_rules_for_itemset",
            "location": 44,
            "return": [
                "List[Tuple[(List[int], List[int], float, float, float)]]"
            ],
            "arguments": {
                "itemset": [
                    "List[int]"
                ],
                "calculate_support": [
                    "Callable[([List[int]], float)]"
                ],
                "min_confidence": [
                    "float"
                ],
                "min_lift": [
                    "float"
                ]
            }
        },
        "generate_rules": {
            "name": "generate_rules",
            "location": 105,
            "return": [
                "List[Tuple[(List[int], List[int], float, float, float)]]"
            ],
            "arguments": {
                "itemsets": [
                    "List[List[int]]"
                ],
                "itemset_counts": [
                    "Dict[(Tuple[(int, ...)], int)]"
                ],
                "num_transactions": [
                    "int"
                ],
                "min_confidence": [
                    "float"
                ],
                "min_lift": [
                    "float"
                ]
            }
        },
        "generate_rules.calculate_support": {
            "name": "calculate_support",
            "location": 113,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool",
                    "List[Union[int, float]]",
                    "list"
                ]
            }
        }
    },
    "armpy-master/index.py": {
        "InvertedIndex.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvertedIndex.add": {
            "name": "add",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "Iterator[int]",
                    "Iterable[int]"
                ]
            }
        },
        "InvertedIndex.load": {
            "name": "load",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[None, int, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "InvertedIndex.load_csv": {
            "name": "load_csv",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csvFilePath": [
                    "str"
                ]
            }
        },
        "InvertedIndex.items": {
            "name": "items",
            "location": 39,
            "return": [
                "dict_keys"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvertedIndex.count": {
            "name": "count",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "itemset": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "Union[tuple, list]",
                    "tuple[]",
                    "list",
                    "list[]"
                ]
            }
        },
        "InvertedIndex.support": {
            "name": "support",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "itemset": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "armpy-master/item.py": {
        "item_id": {
            "name": "item_id",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "item_str": {
            "name": "item_str",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ItemSet": {
            "name": "ItemSet",
            "location": 25,
            "return": [
                "FrozenSet[int]"
            ],
            "arguments": {
                "lst": [
                    "List[str]"
                ]
            }
        }
    },
    "armpy-master/test_apriori.py": {
        "test_apriori": {
            "name": "test_apriori",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apriori.itemize": {
            "name": "itemize",
            "location": 39,
            "return": [
                "list[]",
                "bool",
                "float",
                "Optional[int]",
                "str",
                "Union[int, slice]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bytes",
                    "Callable[[T], T]",
                    "Iterable[T]"
                ]
            }
        },
        "test_apriori.deitemize": {
            "name": "deitemize",
            "location": 68,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "a": [
                    "T",
                    "dict"
                ]
            }
        }
    },
    "armpy-master/test_fptree.py": {
        "test_basic_sanity": {
            "name": "test_basic_sanity",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stress": {
            "name": "test_stress",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "armpy-master/test_index.py": {
        "test_InvertedIndex": {
            "name": "test_InvertedIndex",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "armpy-master/test_types.py": {
        "test_types": {
            "name": "test_types",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
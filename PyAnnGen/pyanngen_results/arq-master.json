{
    "arq-master/setup.py": {},
    "arq-master/arq/cli.py": {
        "cli": {
            "name": "cli",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "watch_reload.worker_on_stop": {
            "name": "worker_on_stop",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "arq-master/arq/connections.py": {
        "SSLContext.__get_validators__": {
            "name": "__get_validators__",
            "location": 30,
            "return": [
                "Generator[(Callable, None, None)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "RedisSettings.from_dsn": {
            "name": "from_dsn",
            "location": 56,
            "return": [
                "RedisSettings"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRedisSettings]"
                ],
                "dsn": [
                    "str"
                ]
            }
        },
        "RedisSettings.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArqRedis.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_or_conn": [
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "job_serializer": [
                    "Optional[Callable[([Dict[(str, Any)]], bytes)]]"
                ],
                "job_deserializer": [
                    "Optional[Callable[([bytes], Dict[(str, Any)])]]"
                ],
                "default_queue_name": [
                    "str"
                ]
            }
        },
        "create_pool.pool_factory": {
            "name": "pool_factory",
            "location": 216,
            "return": [
                "asyncio.Lock",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {}
        }
    },
    "arq-master/arq/constants.py": {},
    "arq-master/arq/cron.py": {
        "next_cron": {
            "name": "next_cron",
            "location": 24,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "previous_dt": [
                    "_datetime.datetime"
                ]
            }
        },
        "_get_next_dt": {
            "name": "_get_next_dt",
            "location": 53,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "dt_": [
                    "_datetime.datetime"
                ],
                "options": [
                    "Options"
                ]
            }
        },
        "cron": {
            "name": "cron",
            "location": 128,
            "return": [
                "CronJob"
            ],
            "arguments": {
                "coroutine": [
                    "Union[(arq.typing.WorkerCoroutine, str)]"
                ]
            }
        },
        "CronJob.calculate_next": {
            "name": "calculate_next",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev_run": [
                    "_datetime.datetime"
                ]
            }
        },
        "CronJob.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arq-master/arq/jobs.py": {
        "serialize_job": {
            "name": "serialize_job",
            "location": 178,
            "return": [
                "bytes"
            ],
            "arguments": {
                "function_name": [
                    "str"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ],
                "job_try": [
                    "Optional[int]"
                ],
                "enqueue_time_ms": [
                    "int"
                ]
            }
        },
        "serialize_result": {
            "name": "serialize_result",
            "location": 196,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "function": [
                    "str"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ],
                "job_try": [
                    "int"
                ],
                "enqueue_time_ms": [
                    "int"
                ],
                "success": [
                    "bool"
                ],
                "result": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "start_ms": [
                    "int"
                ],
                "finished_ms": [
                    "int"
                ],
                "ref": [
                    "str"
                ],
                "queue_name": [
                    "str"
                ]
            }
        },
        "deserialize_job": {
            "name": "deserialize_job",
            "location": 239,
            "return": [
                "JobDef"
            ],
            "arguments": {
                "r": [
                    "bytes"
                ]
            }
        },
        "deserialize_job_raw": {
            "name": "deserialize_job_raw",
            "location": 256,
            "return": [
                "Tuple[(str, tuple, Dict[(str, Any)], int, int)]"
            ],
            "arguments": {
                "r": [
                    "bytes"
                ]
            }
        },
        "deserialize_result": {
            "name": "deserialize_result",
            "location": 268,
            "return": [
                "JobResult"
            ],
            "arguments": {
                "r": [
                    "bytes"
                ]
            }
        },
        "JobDef.__post_init__": {
            "name": "__post_init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "redis": [
                    "str",
                    "int",
                    "None",
                    "list[int]",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[int]"
                ],
                "_queue_name": [
                    "str"
                ],
                "_deserializer": [
                    "Optional[Callable[([bytes], Dict[(str, Any)])]]"
                ]
            }
        },
        "Job.__repr__": {
            "name": "__repr__",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arq-master/arq/logs.py": {
        "default_log_config": {
            "name": "default_log_config",
            "location": 4,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "arq-master/arq/typing.py": {},
    "arq-master/arq/utils.py": {
        "as_int": {
            "name": "as_int",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "f": [
                    "float"
                ]
            }
        },
        "timestamp_ms": {
            "name": "timestamp_ms",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "to_unix_ms": {
            "name": "to_unix_ms",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "dt": [
                    "_datetime.datetime"
                ]
            }
        },
        "get_tz": {
            "name": "get_tz",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ms_to_datetime": {
            "name": "ms_to_datetime",
            "location": 51,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "unix_ms": [
                    "int"
                ]
            }
        },
        "to_ms": {
            "name": "to_ms",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "td": [
                    "Union[(float, _datetime.timedelta)]"
                ]
            }
        },
        "to_seconds": {
            "name": "to_seconds",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "td": [
                    "Union[(float, _datetime.timedelta)]"
                ]
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "args_to_string": {
            "name": "args_to_string",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "Sequence"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "arq-master/arq/version.py": {},
    "arq-master/arq/worker.py": {
        "func": {
            "name": "func",
            "location": 49,
            "return": [
                "Function"
            ],
            "arguments": {
                "coroutine": []
            }
        },
        "get_kwargs": {
            "name": "get_kwargs",
            "location": 758,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "settings_cls": []
            }
        },
        "create_worker": {
            "name": "create_worker",
            "location": 764,
            "return": [
                "Worker"
            ],
            "arguments": {
                "settings_cls": []
            }
        },
        "run_worker": {
            "name": "run_worker",
            "location": 768,
            "return": [],
            "arguments": {
                "settings_cls": []
            }
        },
        "check_health": {
            "name": "check_health",
            "location": 793,
            "return": [],
            "arguments": {
                "settings_cls": []
            }
        },
        "Retry.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defer": [
                    "None"
                ]
            }
        },
        "Retry.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobExecutionFailed.__eq__": {
            "name": "__eq__",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FailedJobs.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [],
                "job_results": []
            }
        },
        "FailedJobs.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedJobs.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "functions": [
                    "tuple[]"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.pool": {
            "name": "pool",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker._add_signal_handler": {
            "name": "_add_signal_handler",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [],
                "handler": []
            }
        },
        "Worker._jobs_started": {
            "name": "_jobs_started",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.handle_sig": {
            "name": "handle_sig",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": []
            }
        },
        "Worker.__repr__": {
            "name": "__repr__",
            "location": 751,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arq-master/arq/__init__.py": {},
    "arq-master/docs/conf.py": {},
    "arq-master/docs/examples/cron.py": {},
    "arq-master/docs/examples/custom_serialization_msgpack.py": {},
    "arq-master/docs/examples/deferred.py": {},
    "arq-master/docs/examples/job_abort.py": {},
    "arq-master/docs/examples/job_ids.py": {},
    "arq-master/docs/examples/job_results.py": {},
    "arq-master/docs/examples/main_demo.py": {},
    "arq-master/docs/examples/retry.py": {},
    "arq-master/docs/examples/slow_job.py": {},
    "arq-master/docs/examples/sync_job.py": {
        "sync_task": {
            "name": "sync_task",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "list[]",
                    "list",
                    "typing.Collection",
                    "Collection",
                    "Collection[int]"
                ]
            }
        }
    },
    "arq-master/tests/check_tag.py": {},
    "arq-master/tests/conftest.py": {
        "_fix_loop": {
            "name": "_fix_loop",
            "location": 14,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "fix_cancel_remaining_task": {
            "name": "fix_cancel_remaining_task",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "loop": [
                    "str"
                ]
            }
        },
        "env": {
            "name": "env",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "worker.create": {
            "name": "create",
            "location": 51,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "functions": [],
                "burst": [],
                "poll_delay": [],
                "max_jobs": [],
                "arq_redis": []
            }
        },
        "SetEnv.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SetEnv.set": {
            "name": "set",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SetEnv.clear": {
            "name": "clear",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arq-master/tests/test_cli.py": {
        "test_help": {
            "name": "test_help",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cancel_remaining_task": [
                    "bool"
                ],
                "mocker": [],
                "loop": []
            }
        },
        "test_check": {
            "name": "test_check",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_run_watch": {
            "name": "test_run_watch",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "cancel_remaining_task": [
                    "bool"
                ]
            }
        }
    },
    "arq-master/tests/test_cron.py": {
        "test_next_cron": {
            "name": "test_next_cron",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "previous": [],
                "expected": [],
                "kwargs": []
            }
        },
        "test_next_cron_invalid": {
            "name": "test_next_cron_invalid",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_cron_random": {
            "name": "test_next_cron_random",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "max_previous": [],
                "kwargs": [],
                "expected": []
            }
        }
    },
    "arq-master/tests/test_jobs.py": {
        "test_custom_serializer.custom_serializer": {
            "name": "custom_serializer",
            "location": 109,
            "return": [
                "bytes",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "set",
                    "Callable",
                    "Type[Any]",
                    "Type[T]"
                ]
            }
        },
        "test_cant_unpickle_at_all.Foobar.__getstate__": {
            "name": "__getstate__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_custom_serializer.Foobar.__getstate__": {
            "name": "__getstate__",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arq-master/tests/test_main.py": {
        "test_cant_pickle_arg.Foobar.__getstate__": {
            "name": "__getstate__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cant_pickle_result.Foobar.__getstate__": {
            "name": "__getstate__",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arq-master/tests/test_utils.py": {
        "test_settings_changed": {
            "name": "test_settings_changed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_truncate": {
            "name": "test_truncate",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args_to_string": {
            "name": "test_args_to_string",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_ms": {
            "name": "test_to_ms",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "test_to_seconds": {
            "name": "test_to_seconds",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "test_typing": {
            "name": "test_typing",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redis_settings_validation": {
            "name": "test_redis_settings_validation",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ms_to_datetime_tz": {
            "name": "test_ms_to_datetime_tz",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        },
        "test_ms_to_datetime_no_tz": {
            "name": "test_ms_to_datetime_no_tz",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        },
        "test_ms_to_datetime_tz_invalid": {
            "name": "test_ms_to_datetime_tz_invalid",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [],
                "caplog": []
            }
        },
        "test_redis_log._log": {
            "name": "_log",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "test_redis_settings_validation.Settings.parse_redis_settings": {
            "name": "parse_redis_settings",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "arq-master/tests/test_worker.py": {
        "test_no_jobs": {
            "name": "test_no_jobs",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "arq_redis": [],
                "loop": [],
                "mocker": []
            }
        },
        "test_health_check_direct": {
            "name": "test_health_check_direct",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "CustomError.extra": {
            "name": "extra",
            "location": 365,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnpickleFails.__init__": {
            "name": "__init__",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "UnpickleFails.__setstate__": {
            "name": "__setstate__",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "arq-master/tests/__init__.py": {}
}
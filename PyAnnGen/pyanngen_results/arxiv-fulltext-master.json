{
    "arxiv-fulltext-master/app.py": {},
    "arxiv-fulltext-master/mock_arxiv.py": {
        "get_a_pdf": {
            "name": "get_a_pdf",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "arxiv_id": [
                    "bool",
                    "Optional[List[str]]",
                    "List",
                    "List[str]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "get_a_submission_pdf": {
            "name": "get_a_submission_pdf",
            "location": 15,
            "return": [
                "Tuple[Union[str,list[str],Type,int,dict[Text,Text]]]",
                "int",
                "bool"
            ],
            "arguments": {
                "src_id": [
                    "str",
                    "bool"
                ],
                "checksum": [
                    "str",
                    "bool"
                ]
            }
        },
        "ruok": {
            "name": "ruok",
            "location": 23,
            "return": [
                "Tuple[Union[Text,int,dict]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "arxiv-fulltext-master/mock_vault.py": {
        "log_in": {
            "name": "log_in",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_kv_secret": {
            "name": "get_kv_secret",
            "location": 24,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_aws_secret": {
            "name": "get_aws_secret",
            "location": 50,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "role": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "look_up_a_token": {
            "name": "look_up_a_token",
            "location": 71,
            "return": [
                "str",
                "int",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 9,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "environ": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Callable",
                    "bytes"
                ],
                "start_response": [
                    "Callable",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-fulltext-master/docs/source/conf.py": {},
    "arxiv-fulltext-master/extractor/fulltext/fixunicode.py": {
        "fix_unicode": {
            "name": "fix_unicode",
            "location": 92,
            "return": [],
            "arguments": {
                "txt": []
            }
        }
    },
    "arxiv-fulltext-master/extractor/fulltext/fulltext.py": {
        "reextension": {
            "name": "reextension",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "extension": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "average_word_length": {
            "name": "average_word_length",
            "location": 27,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "run_pdf2txt": {
            "name": "run_pdf2txt",
            "location": 50,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "pdffile": [
                    "str",
                    "int"
                ],
                "timelimit": [
                    "int",
                    "str",
                    "Dict"
                ],
                "options": [
                    "Text",
                    "str",
                    "int",
                    "Optional[Dict]",
                    "List[str]"
                ]
            }
        },
        "run_pdftotext": {
            "name": "run_pdftotext",
            "location": 81,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "pdffile": [
                    "str",
                    "List[str]",
                    "Dict",
                    "logging.Logger",
                    "logging.LogRecord"
                ],
                "timelimit": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "run_pdf2txt_A": {
            "name": "run_pdf2txt_A",
            "location": 112,
            "return": [
                "bool",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "pdffile": [
                    "str",
                    "int",
                    "Dict[str,float]"
                ]
            }
        },
        "fulltext": {
            "name": "fulltext",
            "location": 136,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "pdffile": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "timelimit": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "sorted_files": {
            "name": "sorted_files",
            "location": 181,
            "return": [
                "List[int]",
                "List[str]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "globber": [
                    "str",
                    "bool"
                ]
            }
        },
        "convert_directory": {
            "name": "convert_directory",
            "location": 214,
            "return": [
                "List[Text]",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 259,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "arxiv-fulltext-master/extractor/fulltext/launch.py": {},
    "arxiv-fulltext-master/extractor/fulltext/launch_single.py": {},
    "arxiv-fulltext-master/extractor/fulltext/__init__.py": {},
    "arxiv-fulltext-master/extractor/tests/test_extractor.py": {
        "TestExtractorE2E.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestExtractorE2E.do_test_extract": {
            "name": "do_test_extract",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pdf_filename": [
                    "str"
                ]
            }
        },
        "TestExtractorE2E.test_extract_1702_07336": {
            "name": "test_extract_1702_07336",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_9912018": {
            "name": "test_extract_9912018",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_1905_02187": {
            "name": "test_extract_1905_02187",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_9108004": {
            "name": "test_extract_9108004",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_9109009": {
            "name": "test_extract_9109009",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_1905_00506": {
            "name": "test_extract_1905_00506",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_1804_08269": {
            "name": "test_extract_1804_08269",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractorE2E.test_extract_1512_03905": {
            "name": "test_extract_1512_03905",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/extractor/tests/__init__.py": {},
    "arxiv-fulltext-master/fulltext/config.py": {},
    "arxiv-fulltext-master/fulltext/controllers.py": {
        "service_status": {
            "name": "service_status",
            "location": 29,
            "return": [
                "Tuple[dict[Text,]]",
                "int",
                "List[Dict[str,Any]]",
                "str"
            ],
            "arguments": {}
        },
        "retrieve": {
            "name": "retrieve",
            "location": 41,
            "return": [
                "Tuple[dict[Text,]]",
                "app.domain.common.TimeWindow",
                "Tuple[dict]",
                "arxiv.users.domain.User",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "id_type": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[Collection[str]]",
                    "int",
                    "Collection"
                ],
                "content_fmt": [
                    "str",
                    "Dict[str, Any]"
                ],
                "authorizer": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Dict[str,int]"
                ]
            }
        },
        "start_extraction": {
            "name": "start_extraction",
            "location": 94,
            "return": [
                "apistar.http.QueryParam",
                "Tuple[Union[dict[Text,Text],dict[Text,Union[int,dict[int,str],Final]]]]"
            ],
            "arguments": {
                "id_type": [
                    "str"
                ],
                "identifier": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "token": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "force": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "List[Dict[str,Any]]",
                    "List"
                ],
                "authorizer": [
                    "bytes",
                    "None",
                    "bool",
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "get_task_status": {
            "name": "get_task_status",
            "location": 173,
            "return": [
                "Tuple[dict[Text,]]",
                "int",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int"
                ],
                "id_type": [
                    "str"
                ],
                "version": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int"
                ],
                "authorizer": [
                    "str",
                    "None"
                ]
            }
        },
        "_redirect": {
            "name": "_redirect",
            "location": 221,
            "return": [
                "Tuple[dict[Text,Text]]",
                "int",
                "Dict[str,str]",
                "Exception",
                "str"
            ],
            "arguments": {
                "extraction": [
                    "bool",
                    "domain.Extraction"
                ],
                "authorizer": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_task_redirect": {
            "name": "_task_redirect",
            "location": 244,
            "return": [
                "Tuple[dict[Text,str]]",
                "Dict[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]",
                    "Dict",
                    "domain.Extraction",
                    "scrapy.http.Response"
                ],
                "product": [
                    "domain.Extraction",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "flask.Response"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/domain.py": {
        "Extraction.to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "Dict[Text,None]",
                "str",
                "Dict[str,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extraction.copy": {
            "name": "copy",
            "location": 58,
            "return": [
                "Extraction",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extraction.completed": {
            "name": "completed",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SupportedFormats.__contains__": {
            "name": "__contains__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "datetime.timedelta",
                    "T"
                ]
            }
        },
        "_SupportedBuckets.__contains__": {
            "name": "__contains__",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "datetime.timedelta",
                    "T"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/extract.py": {
        "get_version": {
            "name": "get_version",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "Union[str,Tuple[str,str]]"
            ],
            "arguments": {}
        },
        "is_available": {
            "name": "is_available",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "await_result": [
                    "bool",
                    "float",
                    "Exception",
                    "Callable[...,bool]"
                ]
            }
        },
        "task_id": {
            "name": "task_id",
            "location": 60,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ],
                "id_type": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 65,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "qutebrowser.api.apitypes.Tab"
                ],
                "id_type": [
                    "str",
                    "int",
                    "qutebrowser.api.apitypes.Tab"
                ],
                "owner": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "token": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Callable[str,int]",
                    "datetime.datetime",
                    "Callable[[str],int]"
                ]
            }
        },
        "get_task": {
            "name": "get_task",
            "location": 115,
            "return": [
                "str",
                "Extraction"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "id_type": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "version": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "_retrieve_pdf": {
            "name": "_retrieve_pdf",
            "location": 160,
            "return": [
                "bytes",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "id_type": [
                    "str"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "_store_pdf_in_workdir": {
            "name": "_store_pdf_in_workdir",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "id_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "content": [
                    "IO[bytes]",
                    "bytes",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 194,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "id_type": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "float",
                    "bool"
                ],
                "owner": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "token": [
                    "str",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "update_sent_state": {
            "name": "update_sent_state",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "None",
                    "int",
                    "Optional[Callable]",
                    "Dict",
                    "Callable",
                    "duniterpy.api.clienClient"
                ],
                "headers": [
                    "None",
                    "Optional[Dict[str,str]]",
                    "str",
                    "Optional[dict]",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "body": [
                    "bool",
                    "None",
                    "List[dict]",
                    "AbstractSet[int]",
                    "List[str]",
                    "AbstractSet",
                    "Dict[str,Iterable[Any]]",
                    "AbstractSet[str]",
                    "int"
                ]
            }
        },
        "do_nothing": {
            "name": "do_nothing",
            "location": 245,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "List[int]",
                "Union[int,slice]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "create_worker_app": {
            "name": "create_worker_app",
            "location": 250,
            "return": [
                "Celery",
                "flask.Flask",
                "celery.Celery"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "get_or_create_worker_app": {
            "name": "get_or_create_worker_app",
            "location": 279,
            "return": [
                "str",
                "List[str]",
                "lightbus.transports.base.RpcMessage"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/factory.py": {
        "create_web_app": {
            "name": "create_web_app",
            "location": 36,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "for_worker": [
                    "bool",
                    "str"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "bool",
                    "dict",
                    "str"
                ],
                "delay": [
                    "int",
                    "float"
                ]
            }
        },
        "register_error_handlers": {
            "name": "register_error_handlers",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 113,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "bytes",
                    "werkzeug.Request",
                    "dict"
                ]
            }
        },
        "IAwaitable.is_available": {
            "name": "is_available",
            "location": 82,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/routes.py": {
        "make_authorizer": {
            "name": "make_authorizer",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scope": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "resource_id": {
            "name": "resource_id",
            "location": 42,
            "return": [
                "str",
                "List[int]",
                "int",
                "List[dict]",
                "bool",
                "float"
            ],
            "arguments": {
                "id_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 49,
            "return": [
                "int",
                "str",
                "bool",
                "List",
                "Optional",
                "Dict[str,Any]"
            ],
            "arguments": {
                "available": [
                    "List[str]",
                    "str",
                    "int",
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "bool",
                    "Dict[str,Any]"
                ],
                "default": [
                    "str",
                    "bool",
                    "Optional",
                    "List",
                    "int"
                ]
            }
        },
        "ok": {
            "name": "ok",
            "location": 58,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "start_extraction": {
            "name": "start_extraction",
            "location": 69,
            "return": [
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "id_type": [
                    "str"
                ],
                "identifier": [
                    "str",
                    "int"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 96,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "id_type": [
                    "str",
                    "Dict[str,Any]"
                ],
                "identifier": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "content_fmt": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "task_status": {
            "name": "task_status",
            "location": 129,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "id_type": [
                    "str"
                ],
                "identifier": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "make_authorizer.inner": {
            "name": "inner",
            "location": 27,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "owner_id": [
                    "Optional[str]",
                    "int",
                    "Sequence[int]",
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/worker.py": {
        "get_secrets": {
            "name": "get_secrets",
            "location": 27,
            "return": [
                "None",
                "str",
                "List[str]",
                "Set",
                "Tuple[int,str]",
                "bool"
            ],
            "arguments": {}
        },
        "pull_image": {
            "name": "pull_image",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verify_secrets_up_to_date": {
            "name": "verify_secrets_up_to_date",
            "location": 51,
            "return": [
                "None",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {}
        }
    },
    "arxiv-fulltext-master/fulltext/__init__.py": {},
    "arxiv-fulltext-master/fulltext/agent/consumer.py": {
        "FulltextRecordProcessor.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FulltextRecordProcessor.wait_for_stream": {
            "name": "wait_for_stream",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tries": [
                    "int",
                    "Tuple[str]",
                    "Dict",
                    "str",
                    "Union[Dict,str]"
                ],
                "delay": [
                    "int",
                    "Tuple[str]",
                    "Dict",
                    "str",
                    "Union[Dict,str]"
                ],
                "max_delay": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Union[int,Tuple[int,int]]",
                    "Optional[int]"
                ],
                "backoff": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "Union[int,Tuple[int,int]]",
                    "Optional[int]"
                ],
                "jitter": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "Union[int,Tuple[int,int]]",
                    "Optional[int]"
                ]
            }
        },
        "FulltextRecordProcessor.update_secrets": {
            "name": "update_secrets",
            "location": 84,
            "return": [
                "bool",
                "List",
                "str",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FulltextRecordProcessor.process_records": {
            "name": "process_records",
            "location": 98,
            "return": [
                "Tuple[Union[str,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]",
                    "Union[Tuple[int,int],int]",
                    "Tuple[int]",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "FulltextRecordProcessor.process_record": {
            "name": "process_record",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/agent/__init__.py": {},
    "arxiv-fulltext-master/fulltext/agent/__main__.py": {
        "start_agent": {
            "name": "start_agent",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-fulltext-master/fulltext/agent/tests/test_record_processor.py": {
        "TestIndexPaper.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexPaper.test_notify": {
            "name": "test_notify",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_task": [],
                "mock_url_for": [
                    "mock.MagicMock"
                ],
                "mock_client_factory": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/agent/tests/__init__.py": {},
    "arxiv-fulltext-master/fulltext/process/psv.py": {
        "normalize_text_psv": {
            "name": "normalize_text_psv",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Dict",
                    "Pattern[str]",
                    "Pattern"
                ]
            }
        },
        "process_text": {
            "name": "process_text",
            "location": 36,
            "return": [
                "Tuple[str]",
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "txt": [
                    "str"
                ]
            }
        },
        "tidy_txt_from_pdf": {
            "name": "tidy_txt_from_pdf",
            "location": 64,
            "return": [
                "List[str]",
                "Sequence[str]",
                "str",
                "int",
                "Iterable[str]",
                "list",
                "Set[str]"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "str",
                    "TextIO"
                ]
            }
        },
        "_remove_WhiteSpace": {
            "name": "_remove_WhiteSpace",
            "location": 103,
            "return": [
                "List",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "_remove_BadEOL": {
            "name": "_remove_BadEOL",
            "location": 111,
            "return": [
                "List[Text]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "_remove_Keyword": {
            "name": "_remove_Keyword",
            "location": 127,
            "return": [
                "List[Union[AnyStr,Text]]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "expandWords": {
            "name": "expandWords",
            "location": 151,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[bytes,str]",
                    "bytes"
                ]
            }
        },
        "_remove_Symbols": {
            "name": "_remove_Symbols",
            "location": 170,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_remove_Numbers": {
            "name": "_remove_Numbers",
            "location": 177,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "_remove_Abbrev": {
            "name": "_remove_Abbrev",
            "location": 184,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_remove_SingleAlphabet": {
            "name": "_remove_SingleAlphabet",
            "location": 196,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_remove_ExtraSpaces": {
            "name": "_remove_ExtraSpaces",
            "location": 204,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "_split_sentence": {
            "name": "_split_sentence",
            "location": 211,
            "return": [
                "List",
                "str",
                "OrderedDict",
                "Dict[str,Any]",
                "Optional[str]",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "List[AnyStr]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_clean_sentence": {
            "name": "_clean_sentence",
            "location": 219,
            "return": [
                "List",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "split_on_references": {
            "name": "split_on_references",
            "location": 243,
            "return": [
                "Tuple[list]",
                "str",
                "bool"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "str",
                    "List[Optional[str]]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "max_refs_fraction": [
                    "float",
                    "int",
                    "Dict",
                    "str",
                    "List"
                ]
            }
        },
        "_recover_accents": {
            "name": "_recover_accents",
            "location": 285,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txt": [
                    "str"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/process/__init__.py": {},
    "arxiv-fulltext-master/fulltext/process/tests/test_process_psv.py": {
        "TestConvertToPSV.test_tidy_text": {
            "name": "test_tidy_text",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSV.test_to_psv": {
            "name": "test_to_psv",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_expand_words": {
            "name": "test_expand_words",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_text_has_symbols": {
            "name": "test_text_has_symbols",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_text_has_numbers": {
            "name": "test_text_has_numbers",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_text_has_unwanted_keywords": {
            "name": "test_text_has_unwanted_keywords",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_text_has_continuations": {
            "name": "test_text_has_continuations",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_whitespace_all_over_the_place": {
            "name": "test_whitespace_all_over_the_place",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToPSVUnits.test_remove_whitespace_is_idempotent": {
            "name": "test_remove_whitespace_is_idempotent",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/process/tests/__init__.py": {},
    "arxiv-fulltext-master/fulltext/services/util.py": {
        "ReadWrapper.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter_content": [
                    "Dict[str,Any]",
                    "List[str]",
                    "List",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "size": [
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "List",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "ReadWrapper.seekable": {
            "name": "seekable",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadWrapper.readable": {
            "name": "readable",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadWrapper.read": {
            "name": "read",
            "location": 24,
            "return": [
                "List[T]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/__init__.py": {},
    "arxiv-fulltext-master/fulltext/services/extractor/extractor.py": {
        "Extractor.is_available": {
            "name": "is_available",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor._new_client": {
            "name": "_new_client",
            "location": 42,
            "return": [
                "DockerClient",
                "flask.Flask",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.image": {
            "name": "image",
            "location": 47,
            "return": [
                "Tuple[Text]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor._pull_image": {
            "name": "_pull_image",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "None"
                ]
            }
        },
        "Extractor._cleanup": {
            "name": "_cleanup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outpath": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "Extractor.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "str",
                "List[str]",
                "Optional[int]",
                "Dict",
                "bool",
                "Optional[str]",
                "List[dict]",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "KeysView",
                "List[int]",
                "List",
                "Dict[str,None]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "TextIO",
                    "None",
                    "logging.Logger",
                    "Optional[str]"
                ],
                "cleanup": [
                    "bool",
                    "str"
                ],
                "image": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/extractor/tests.py": {
        "TestExtract.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtract.test_extract_successfully": {
            "name": "test_extract_successfully",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_DockerClient": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExtract.test_container_error": {
            "name": "test_container_error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_DockerClient": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExtract.test_api_error": {
            "name": "test_api_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_DockerClient": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExtract.test_no_output_file": {
            "name": "test_no_output_file",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_DockerClient": []
            }
        },
        "TestExtract.test_output_file_is_empty": {
            "name": "test_output_file_is_empty",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_DockerClient": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExtract.test_container_error.raise_containererror": {
            "name": "raise_containererror",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExtract.test_api_error.raise_apiererror": {
            "name": "raise_apiererror",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-fulltext-master/fulltext/services/extractor/__init__.py": {},
    "arxiv-fulltext-master/fulltext/services/legacy/legacy.py": {
        "CanonicalPDF.is_available": {
            "name": "is_available",
            "location": 35,
            "return": [
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalPDF.exists": {
            "name": "exists",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "str"
                ]
            }
        },
        "CanonicalPDF.retrieve": {
            "name": "retrieve",
            "location": 64,
            "return": [
                "ReadWrapper",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "IO",
                    "denite.util.UserContext"
                ],
                "sleep": [
                    "int",
                    "str",
                    "deque",
                    "List"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/legacy/tests.py": {
        "TestExists.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExists.test_pdf_exists": {
            "name": "test_pdf_exists",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExists.test_pdf_does_not_exist": {
            "name": "test_pdf_does_not_exist",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool"
                ]
            }
        },
        "TestExists.test_pdf_returns_error": {
            "name": "test_pdf_returns_error",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestRetrieve.setUp": {
            "name": "setUp",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieve.test_pdf_exists": {
            "name": "test_pdf_exists",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool"
                ]
            }
        },
        "TestRetrieve.test_pdf_not_ready": {
            "name": "test_pdf_not_ready",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool"
                ]
            }
        },
        "TestRetrieve.test_pdf_never_ready": {
            "name": "test_pdf_never_ready",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool"
                ]
            }
        },
        "TestRetrieve.test_pdf_does_not_exist": {
            "name": "test_pdf_does_not_exist",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool"
                ]
            }
        },
        "TestRetrieve.test_pdf_returns_error": {
            "name": "test_pdf_returns_error",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/legacy/__init__.py": {},
    "arxiv-fulltext-master/fulltext/services/preview/preview.py": {
        "PreviewService.is_available": {
            "name": "is_available",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreviewService.get_owner": {
            "name": "get_owner",
            "location": 55,
            "return": [
                "str",
                "bytes",
                "None",
                "Dict[str,Any]",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "PreviewService.get": {
            "name": "get",
            "location": 61,
            "return": [
                "Tuple[Union[ReadWrapper,str]]",
                "str",
                "Optional[str]",
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "bool"
                ],
                "token": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "PreviewService.does_exist": {
            "name": "does_exist",
            "location": 88,
            "return": [
                "bool",
                "Tuple[Union[bool,str]]",
                "Tuple[Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bytes",
                    "int",
                    "aiocometd.transports.base.Headers"
                ],
                "token": [
                    "bytes",
                    "int",
                    "aiocometd.transports.base.Headers"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/preview/tests.py": {
        "TestPreviewIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "str",
                    "bytes",
                    "memoryview",
                    "Union[object,type]",
                    "Type"
                ]
            }
        },
        "TestPreviewIntegration.tearDownClass": {
            "name": "tearDownClass",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "str",
                    "Type"
                ]
            }
        },
        "TestPreviewIntegration.test_get_status": {
            "name": "test_get_status",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreviewIntegration.test_is_available": {
            "name": "test_is_available",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreviewIntegration.test_retrieve": {
            "name": "test_retrieve",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreviewIntegration.test_does_exist": {
            "name": "test_does_exist",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreviewIntegration.test_get_nonexistant_preview": {
            "name": "test_get_nonexistant_preview",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreviewIntegration.test_has_nonexistant_preview": {
            "name": "test_has_nonexistant_preview",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/preview/__init__.py": {},
    "arxiv-fulltext-master/fulltext/services/store/store.py": {
        "Storage.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Storage.is_available": {
            "name": "is_available",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage._paper_path": {
            "name": "_paper_path",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int"
                ],
                "bucket": [
                    "str"
                ]
            }
        },
        "Storage._path": {
            "name": "_path",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "content_fmt": [
                    "str"
                ],
                "bucket": [
                    "str"
                ]
            }
        },
        "Storage._meta_path": {
            "name": "_meta_path",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int"
                ],
                "version": [
                    "str",
                    "int"
                ],
                "bucket": [
                    "str",
                    "int"
                ]
            }
        },
        "Storage._creation_time": {
            "name": "_creation_time",
            "location": 139,
            "return": [
                "Optional[bool]",
                "bool",
                "float",
                "Callable",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Storage._latest_version": {
            "name": "_latest_version",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Any]",
                    "None"
                ],
                "bucket": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "Storage.make_paths": {
            "name": "make_paths",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Storage.store": {
            "name": "store",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extraction": [
                    "Optional[str]",
                    "domain.Extraction",
                    "IO[bytes]",
                    "str",
                    "Optional[Sequence[str]]",
                    "IO[Any]"
                ],
                "content_fmt": [
                    "None",
                    "Optional[str]",
                    "str",
                    "domain.Extraction",
                    "Sequence[str]",
                    "Optional[Sequence[str]]",
                    "IO",
                    "IO[bytes]"
                ]
            }
        },
        "Storage._store": {
            "name": "_store",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ],
                "content": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "Storage.retrieve": {
            "name": "retrieve",
            "location": 206,
            "return": [
                "Extraction",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bytes",
                    "Dict[str,int]",
                    "logging.Logger"
                ],
                "version": [
                    "str",
                    "Tuple",
                    "None",
                    "Dict[str,Any]"
                ],
                "content_fmt": [
                    "str"
                ],
                "bucket": [
                    "str",
                    "logging.Logger",
                    "bytes",
                    "Dict[str, int]"
                ],
                "meta_only": [
                    "bool",
                    "str"
                ]
            }
        },
        "Storage.init_app": {
            "name": "init_app",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "flask.Flask"
                ],
                "app": [
                    "str",
                    "flask.Flask",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Storage.create_session": {
            "name": "create_session",
            "location": 259,
            "return": [
                "str",
                "base.ConfigOptions",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float",
                    "Dict[str,str]"
                ]
            }
        },
        "Storage.current_session": {
            "name": "current_session",
            "location": 266,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "Storage._latest_version._try_float": {
            "name": "_try_float",
            "location": 147,
            "return": [
                "float",
                "str",
                "int",
                "Callable[[Mapping],T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/store/tests.py": {
        "TestInitialize.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitialize.test_init": {
            "name": "test_init",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitialize.test_init_with_subvolume": {
            "name": "test_init_with_subvolume",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitialize.test_init_with_no_write_access_to_create_paths": {
            "name": "test_init_with_no_write_access_to_create_paths",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitialize.tearDown": {
            "name": "tearDown",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveNonexistantExtraction.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveNonexistantExtraction.test_retrieve_newstyle": {
            "name": "test_retrieve_newstyle",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveNonexistantExtraction.test_retrieve_legacy": {
            "name": "test_retrieve_legacy",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveNonexistantExtraction.test_retrieve_submission": {
            "name": "test_retrieve_submission",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveNonexistantExtraction.tearDown": {
            "name": "tearDown",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtractionInProgress.setUp": {
            "name": "setUp",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtractionInProgress.tearDown": {
            "name": "tearDown",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtractionInProgress.create_meta": {
            "name": "create_meta",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "version": [],
                "bucket": []
            }
        },
        "TestRetrieveExtractionInProgress.test_retrieve_legacy": {
            "name": "test_retrieve_legacy",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtractionInProgress.test_retrieve_newstyle": {
            "name": "test_retrieve_newstyle",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtractionInProgress.test_retrieve_submission": {
            "name": "test_retrieve_submission",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtraction.setUp": {
            "name": "setUp",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtraction.tearDown": {
            "name": "tearDown",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtraction.create_meta": {
            "name": "create_meta",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "version": [],
                "bucket": []
            }
        },
        "TestRetrieveExtraction.create_content": {
            "name": "create_content",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "version": [],
                "format": [],
                "bucket": [],
                "content": []
            }
        },
        "TestRetrieveExtraction.test_retrieve_legacy": {
            "name": "test_retrieve_legacy",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtraction.test_retrieve_newstyle": {
            "name": "test_retrieve_newstyle",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveExtraction.test_retrieve_submission": {
            "name": "test_retrieve_submission",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreExtraction.setUp": {
            "name": "setUp",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreExtraction.tearDown": {
            "name": "tearDown",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreExtraction.test_store_meta_only": {
            "name": "test_store_meta_only",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoreExtraction.test_store": {
            "name": "test_store",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/services/store/__init__.py": {},
    "arxiv-fulltext-master/fulltext/tests/test_controllers.py": {
        "TestStatusEndpoint.test_all_available": {
            "name": "test_all_available",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Storage": [
                    "mock.MagicMock"
                ],
                "mock_extract": []
            }
        },
        "TestStatusEndpoint.test_storage_unavailable": {
            "name": "test_storage_unavailable",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Storage": [
                    "mock.MagicMock"
                ],
                "mock_extract": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestStatusEndpoint.test_extractor_unavailable": {
            "name": "test_extractor_unavailable",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Storage": [
                    "mock.MagicMock"
                ],
                "mock_extract": []
            }
        }
    },
    "arxiv-fulltext-master/fulltext/tests/test_extract.py": {
        "TestExtract.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtract.test_extract_no_canonical_pdf": {
            "name": "test_extract_no_canonical_pdf",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_CanonicalPDF": [
                    "mock.MagicMock"
                ],
                "mock_Storage": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExtract.test_extract_failed": {
            "name": "test_extract_failed",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_CanonicalPDF": [],
                "mock_Storage": [
                    "mock.MagicMock"
                ],
                "mock_extractor": []
            }
        },
        "TestExtract.test_extract_succeeds": {
            "name": "test_extract_succeeds",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_CanonicalPDF": [],
                "mock_Storage": [
                    "mock.MagicMock"
                ],
                "mock_extractor": [
                    "mock.Mock"
                ]
            }
        },
        "TestExtract.test_extract_no_canonical_pdf.raise_not_found": {
            "name": "raise_not_found",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-fulltext-master/fulltext/tests/__init__.py": {},
    "arxiv-fulltext-master/tests/test_api.py": {
        "TestApplication.setUpClass": {
            "name": "setUpClass",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestApplication.tearDownClass": {
            "name": "tearDownClass",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "TestApplication.setUp": {
            "name": "setUp",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.tearDown": {
            "name": "tearDown",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.test_get_nonexistant_extraction": {
            "name": "test_get_nonexistant_extraction",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.test_extraction_fails": {
            "name": "test_extraction_fails",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.test_request_extraction": {
            "name": "test_request_extraction",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.test_request_extraction_of_submission": {
            "name": "test_request_extraction_of_submission",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.setUpClass.start_worker": {
            "name": "start_worker",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestApplication.setUpClass.start_worker.head": {
            "name": "head",
            "location": 80,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "TestApplication.setUpClass.start_worker.get": {
            "name": "get",
            "location": 92,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "type"
                ]
            }
        }
    },
    "arxiv-fulltext-master/tests/__init__.py": {}
}
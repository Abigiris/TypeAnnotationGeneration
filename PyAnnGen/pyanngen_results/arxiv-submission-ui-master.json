{
    "arxiv-submission-ui-master/app.py": {},
    "arxiv-submission-ui-master/bootstrap.py": {},
    "arxiv-submission-ui-master/mock_classifier.py": {
        "classify": {
            "name": "classify",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/mock_vault.py": {
        "log_in": {
            "name": "log_in",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_kv_secret": {
            "name": "get_kv_secret",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_aws_secret": {
            "name": "get_aws_secret",
            "location": 54,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "role": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_database_creds": {
            "name": "get_database_creds",
            "location": 76,
            "return": [
                "bool",
                "bytes",
                "tuple",
                "str"
            ],
            "arguments": {
                "role": [
                    "Optional[int]",
                    "Optional[str]",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "look_up_a_token": {
            "name": "look_up_a_token",
            "location": 96,
            "return": [
                "str",
                "int",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/test_ui_with_data.py": {
        "run_test": {
            "name": "run_test",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "List",
                    "Mapping",
                    "bool",
                    "Dict"
                ],
                "out": [
                    "bytes",
                    "List",
                    "Mapping",
                    "bool",
                    "Dict"
                ],
                "endpoint": [
                    "bytes",
                    "List",
                    "Mapping",
                    "bool",
                    "Dict"
                ]
            }
        },
        "run_test_case": {
            "name": "run_test_case",
            "location": 78,
            "return": [
                "Optional[Tuple[(Any, collections.OrderedDict[(Any, int)])]]"
            ],
            "arguments": {
                "endpoint": [
                    "Dict",
                    "bytes"
                ],
                "datum": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[Mapping[str,Any]]"
                ],
                "headers": [
                    "Dict",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "create_submission": {
            "name": "create_submission",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "requests.models.Response",
                    "requests.PreparedRequest",
                    "Optional[dict]",
                    "requests.models.PreparedRequest"
                ],
                "headers": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "None",
                    "requests.models.Response",
                    "requests.PreparedRequest",
                    "Optional[dict]",
                    "requests.models.PreparedRequest"
                ]
            }
        },
        "test_stage": {
            "name": "test_stage",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "int",
                    "Dict"
                ],
                "stage": [
                    "str",
                    "int",
                    "None",
                    "Optional[requests.Response]",
                    "Optional[str]",
                    "bool"
                ],
                "datum": [
                    "str",
                    "Dict",
                    "int"
                ],
                "submission_id": [
                    "str",
                    "int",
                    "Dict"
                ],
                "headers": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "parse_errors": {
            "name": "parse_errors",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "content": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_form": {
            "name": "get_form",
            "location": 149,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "int",
                    "Iterable[int]",
                    "Dict"
                ],
                "stage": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "Dict"
                ],
                "headers": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "django.http.HttpRequest"
                ],
                "submission_id": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "Dict"
                ]
            }
        },
        "post_form": {
            "name": "post_form",
            "location": 154,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "stage": [
                    "str",
                    "Set[int]",
                    "Dict[str,str]",
                    "Optional[float]",
                    "float",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ],
                "datum": [
                    "str",
                    "Set[int]"
                ],
                "csrf_token": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "headers": [
                    "Dict",
                    "str",
                    "Optional[int]",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "submission_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "test_upload": {
            "name": "test_upload",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "List[Dict[str,Any]]",
                    "Tuple[int,int]",
                    "Optional[str]"
                ],
                "stage": [
                    "Dict[str,str]",
                    "Dict",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "services.shop.order.models.order_evenOrderEvent"
                ],
                "datum": [
                    "str",
                    "Dict",
                    "Union[str,TextIO]"
                ],
                "submission_id": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "None"
                ],
                "headers": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_compile": {
            "name": "test_compile",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "stage": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "datum": [
                    "bytes",
                    "str",
                    "services.shop.order.transfer.models.Order.ID",
                    "Dict",
                    "Dict[str,Dict[Any,int]]"
                ],
                "submission_id": [
                    "str"
                ],
                "headers": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 245,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "Dict[str,Any]",
                    "Iterable[bytes]"
                ]
            }
        },
        "replace_null_values": {
            "name": "replace_null_values",
            "location": 276,
            "return": [
                "dict"
            ],
            "arguments": {
                "datum": [
                    "Optional[str]",
                    "type",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "coerce_to_int": {
            "name": "coerce_to_int",
            "location": 280,
            "return": [
                "dict"
            ],
            "arguments": {
                "datum": [
                    "list",
                    "Pattern",
                    "int"
                ]
            }
        },
        "combine_rows": {
            "name": "combine_rows",
            "location": 289,
            "return": [
                "[[]]",
                "int",
                "float",
                "List[int]",
                "Union[bool, None]"
            ],
            "arguments": {
                "datum_group": [
                    "List[int]",
                    "[]",
                    "int",
                    "float",
                    "Union[bool,None]"
                ]
            }
        },
        "_parse_csrf_token": {
            "name": "_parse_csrf_token",
            "location": 304,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable[[], str]"
                ]
            }
        },
        "_new_auth_token": {
            "name": "_new_auth_token",
            "location": 313,
            "return": [
                "str",
                "bytes",
                "arxiv.users.domain.User",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_verify_user_data": {
            "name": "get_verify_user_data",
            "location": 330,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "Optional[Iterable[int]]",
                    "Optional[Sequence[Any]]",
                    "int",
                    "Sequence[str]",
                    "Optional[Exception]"
                ]
            }
        },
        "get_authorship_data": {
            "name": "get_authorship_data",
            "location": 334,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "get_license_data": {
            "name": "get_license_data",
            "location": 338,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "get_policy_data": {
            "name": "get_policy_data",
            "location": 342,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "get_primary_classification_data": {
            "name": "get_primary_classification_data",
            "location": 346,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "get_metadata_data": {
            "name": "get_metadata_data",
            "location": 350,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_optional_metadata_data": {
            "name": "get_optional_metadata_data",
            "location": 359,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "Optional[bool]"
                ]
            }
        },
        "get_final_preview_data": {
            "name": "get_final_preview_data",
            "location": 369,
            "return": [
                "Tuple[(Dict[(str, Any)], None)]"
            ],
            "arguments": {
                "datum": [
                    "List",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "get_file_upload_data": {
            "name": "get_file_upload_data",
            "location": 373,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, BinaryIO)])]"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "List[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "get_process_data": {
            "name": "get_process_data",
            "location": 379,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "datum": [
                    "Mapping",
                    "str",
                    "Mapping[str,Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "load_data._source_path": {
            "name": "_source_path",
            "location": 246,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "load_data.rewrite_source_path": {
            "name": "rewrite_source_path",
            "location": 250,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "datum": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "deque[str]"
                ]
            }
        },
        "load_data.handle_fields": {
            "name": "handle_fields",
            "location": 261,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "datum": [
                    "type",
                    "asyncworker.http.wrapper.RequestWrapper",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "float"
                ]
            }
        },
        "coerce_to_int._try_int": {
            "name": "_try_int",
            "location": 281,
            "return": [
                "int",
                "str",
                "float",
                "ebl.fragmentarium.domain.record.RecordEntry"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "run_test.done": {
            "name": "done",
            "location": 70,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "List[int]",
                "Union[int,slice]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "bytes",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 15,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "environ": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Callable"
                ],
                "start_response": [
                    "Callable",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/docs/conf.py": {},
    "arxiv-submission-ui-master/docs/patched_sphinx_autodoc_typehints.py": {
        "format_annotation": {
            "name": "format_annotation",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "annotation": [
                    "Iterable[Any]",
                    "Mapping[str, Any]",
                    "List[util.Block]",
                    "util.XYZ"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 120,
            "return": [
                "dict"
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/config.py": {},
    "arxiv-submission-ui-master/submit/factory.py": {
        "create_ui_web_app": {
            "name": "create_ui_web_app",
            "location": 27,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        },
        "wait_for": {
            "name": "wait_for",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "bool",
                    "dict",
                    "str"
                ],
                "delay": [
                    "int",
                    "float"
                ]
            }
        },
        "IAwaitable.is_available": {
            "name": "is_available",
            "location": 73,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-submission-ui-master/submit/flow_control.py": {
        "get_workflow": {
            "name": "get_workflow",
            "location": 22,
            "return": [
                "Union[(submit.domain.workflow.ReplacementWorkflow, submit.domain.workflow.SubmissionWorkflow)]"
            ],
            "arguments": {
                "submission": [
                    "int",
                    "Optional[int]",
                    "Iterable[T]",
                    "None",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "to_stage": {
            "name": "to_stage",
            "location": 28,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "workflow": [
                    "Dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str,str]]",
                    "Iterator"
                ],
                "stage": [
                    "bool",
                    "Type",
                    "str",
                    "Type[Frame]",
                    "None",
                    "Optional[int]",
                    "browse.domain.identifier.Identifier"
                ],
                "ident": [
                    "int"
                ]
            }
        },
        "to_previous": {
            "name": "to_previous",
            "location": 35,
            "return": [
                "str",
                "float",
                "int",
                "dict",
                "Optional[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "workflow": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ],
                "stage": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ],
                "ident": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "to_next": {
            "name": "to_next",
            "location": 39,
            "return": [
                "str",
                "float",
                "int",
                "dict",
                "Optional[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "workflow": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ],
                "stage": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ],
                "ident": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "to_current": {
            "name": "to_current",
            "location": 43,
            "return": [
                "str",
                "float",
                "int",
                "dict",
                "Optional[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "workflow": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "stage": [
                    "Dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str,str]]",
                    "Iterator"
                ],
                "ident": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ],
                "flash": [
                    "bool",
                    "Dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str,str]]"
                ]
            }
        },
        "flow_control": {
            "name": "flow_control",
            "location": 51,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "this_stage": [
                    "str",
                    "Dict[str,int]",
                    "Optional[submiworkflow.stages.Stage]",
                    "bool",
                    "None"
                ],
                "exit": [
                    "Text",
                    "str",
                    "Optional[submiworkflow.stages.Stage]",
                    "Dict[str,int]",
                    "bool"
                ]
            }
        },
        "flow_control.deco": {
            "name": "deco",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "flow_control.deco.wrapper": {
            "name": "wrapper",
            "location": 60,
            "return": [
                "List[str]",
                "allennlp.common.util.JsonDict",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/util.py": {
        "load_submission": {
            "name": "load_submission",
            "location": 17,
            "return": [
                "Tuple",
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "Optional[int]",
                    "List[Optional[int]]",
                    "Set[int]",
                    "None"
                ]
            }
        },
        "tidy_filesize": {
            "name": "tidy_filesize",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Union[int,Sequence[int]]"
                ]
            }
        },
        "announce_submission": {
            "name": "announce_submission",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "place_on_hold": {
            "name": "place_on_hold",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "apply_cross": {
            "name": "apply_cross",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "reject_cross": {
            "name": "reject_cross",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "apply_withdrawal": {
            "name": "apply_withdrawal",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "reject_withdrawal": {
            "name": "reject_withdrawal",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/__init__.py": {},
    "arxiv-submission-ui-master/submit/controllers/authorship.py": {
        "authorship": {
            "name": "authorship",
            "location": 34,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[int]",
                    "None"
                ],
                "params": [
                    "Dict[str,str]",
                    "str",
                    "Optional[str]",
                    "werkzeug.datastructures.MultiDict"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int"
                ]
            }
        },
        "AuthorshipForm.validate_authorship": {
            "name": "validate_authorship",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Type"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/classification.py": {
        "classification": {
            "name": "classification",
            "location": 99,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[int]",
                    "None"
                ],
                "params": [
                    "str",
                    "bool",
                    "werkzeug.datastructures.MultiDict"
                ],
                "session": [
                    "Dict",
                    "str",
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int"
                ]
            }
        },
        "cross_list": {
            "name": "cross_list",
            "location": 148,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bool",
                    "werkzeug.datastructures.MultiDict"
                ],
                "params": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bytes"
                ],
                "session": [
                    "int",
                    "Dict",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "submission_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ClassificationForm.filter_choices": {
            "name": "filter_choices",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission": [],
                "session": [
                    "int",
                    "bool"
                ]
            }
        },
        "ClassificationForm.formset": {
            "name": "formset",
            "location": 76,
            "return": [
                "Dict[(Any, ClassificationForm)]"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "submission": [
                    "Type",
                    "float"
                ]
            }
        },
        "PrimaryClassificationForm.validate_operation": {
            "name": "validate_operation",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Callable",
                    "bytes",
                    "Mapping",
                    "Mapping[str,Dict[str,Any]]",
                    "picorss.src.domain.entities.RssPage"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/create.py": {
        "create": {
            "name": "create",
            "location": 29,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "bool",
                    "sqlalchemy.orm.session.Session"
                ],
                "params": [
                    "Dict",
                    "Dict[str,str]",
                    "Optional[str]",
                    "str",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "session": [
                    "str",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 62,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[int]",
                    "None"
                ],
                "params": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "session": [
                    "str",
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "bool"
                ]
            }
        },
        "_load_submissions_for_user": {
            "name": "_load_submissions_for_user",
            "location": 102,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[type]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/cross.py": {
        "request_cross": {
            "name": "request_cross",
            "location": 123,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "Dict[str,Any]",
                    "str",
                    "int"
                ],
                "session": [
                    "str",
                    "int",
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict"
                ]
            }
        },
        "HiddenListField.process_formdata": {
            "name": "process_formdata",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valuelist": [
                    "List",
                    "str",
                    "List[str]",
                    "Optional[Union[str,Any]]",
                    "Optional[Union[str,Any,Any,Any]]",
                    "denite.util.UserContext"
                ]
            }
        },
        "HiddenListField.process_data": {
            "name": "process_data",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "HiddenListField._value": {
            "name": "_value",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossListForm.validate_selected": {
            "name": "validate_selected",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "CrossListForm"
                ],
                "field": [
                    "str",
                    "int",
                    "django.db.models.fields.Field",
                    "dataclasses.Field",
                    "typesystem.fields.Field"
                ]
            }
        },
        "CrossListForm.validate_category": {
            "name": "validate_category",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "CrossListForm"
                ],
                "field": [
                    "Type",
                    "Dict",
                    "django.db.models.fields.Field",
                    "Type[DataclassT]",
                    "fields.ModelField",
                    "dataclasses.Field"
                ]
            }
        },
        "CrossListForm.filter_choices": {
            "name": "filter_choices",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission": [
                    "str",
                    "List[Callable]"
                ],
                "session": [
                    "bool",
                    "sqlalchemy.orm.Session",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "Optional[SparkSession]"
                ],
                "exclude": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "CrossListForm.formset": {
            "name": "formset",
            "location": 111,
            "return": [
                "Dict[(Any, CrossListForm)]"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "selected": [
                    "str",
                    "memoryview",
                    "bool"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/delete.py": {
        "delete": {
            "name": "delete",
            "location": 35,
            "return": [
                "Optional[Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict"
                ],
                "params": [
                    "int",
                    "str",
                    "Dict[str,list[Any]]",
                    "List[float]",
                    "Dict[str,List[Any]]",
                    "werkzeug.datastructures.MultiDict"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "bytes",
                    "http.HTTPStatus",
                    "frozenset",
                    "frozenset[int]"
                ]
            }
        },
        "cancel_request": {
            "name": "cancel_request",
            "location": 77,
            "return": [
                "Optional[Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict",
                    "Dict[int,Dict[str,float]]",
                    "Dict[int,dict[str,float]]"
                ],
                "params": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "str"
                ],
                "request_id": [
                    "int",
                    "str",
                    "Dict",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/final.py": {
        "finalize": {
            "name": "finalize",
            "location": 27,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "params": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ]
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 82,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[int]",
                    "None"
                ],
                "params": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[int]",
                    "None"
                ],
                "session": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[int]",
                    "None"
                ],
                "submission_id": [
                    "int"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/jref.py": {
        "jref": {
            "name": "jref",
            "location": 55,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "params": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ]
            }
        },
        "_generate_commands": {
            "name": "_generate_commands",
            "location": 127,
            "return": [
                "Tuple[(list, List[bool])]"
            ],
            "arguments": {
                "form": [
                    "str"
                ],
                "submission": [
                    "str",
                    "Dict[str,Any]",
                    "arxiv.submission.Submission"
                ],
                "creator": [
                    "arxiv.submission.User",
                    "arxiv.submission.Client"
                ],
                "client": [
                    "arxiv.submission.User",
                    "arxiv.submission.Client"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/license.py": {
        "license": {
            "name": "license",
            "location": 30,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "params": [
                    "Dict[str,Any]",
                    "str",
                    "bytes",
                    "int"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/metadata.py": {
        "_data_from_submission": {
            "name": "_data_from_submission",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "str",
                    "werkzeug.datastructures.MultiDict",
                    "Pipeline"
                ],
                "submission": [
                    "str",
                    "arxiv.submission.Submission",
                    "None",
                    "Optional[str]"
                ],
                "form_class": [
                    "type",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "metadata": {
            "name": "metadata",
            "location": 88,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "params": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ]
            }
        },
        "optional": {
            "name": "optional",
            "location": 135,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "params": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ]
            }
        },
        "_commands": {
            "name": "_commands",
            "location": 180,
            "return": [
                "Tuple[(list, List[bool])]"
            ],
            "arguments": {
                "form": [],
                "submission": [
                    "str",
                    "arxiv.submission.Submission",
                    "None",
                    "Optional[str]"
                ],
                "creator": [
                    "arxiv.submission.Client",
                    "arxiv.submission.User"
                ],
                "client": [
                    "arxiv.submission.Client",
                    "arxiv.submission.User"
                ]
            }
        },
        "_opt_commands": {
            "name": "_opt_commands",
            "location": 217,
            "return": [
                "Tuple[(list, List[bool])]"
            ],
            "arguments": {
                "form": [
                    "arxiv.submission.Client",
                    "arxiv.submission.User",
                    "logging.LogRecord"
                ],
                "submission": [
                    "str",
                    "arxiv.submission.Submission",
                    "Dict[str,Any]",
                    "Type",
                    "Type[Tuple[int,int]]"
                ],
                "creator": [
                    "arxiv.submission.Client",
                    "arxiv.submission.User"
                ],
                "client": [
                    "arxiv.submission.Client",
                    "arxiv.submission.User"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/policy.py": {
        "policy": {
            "name": "policy",
            "location": 29,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "params": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "bool"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/process.py": {
        "file_process": {
            "name": "file_process",
            "location": 79,
            "return": [
                "Tuple[(dict, Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int"
                ],
                "params": [
                    "Dict[str,str]",
                    "bool",
                    "str",
                    "int"
                ],
                "session": [
                    "int",
                    "str"
                ],
                "submission_id": [
                    "int",
                    "str"
                ],
                "token": [
                    "int",
                    "str"
                ]
            }
        },
        "_check_status": {
            "name": "_check_status",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[int]",
                    "bool"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "token": [
                    "bool",
                    "str",
                    "List[int]",
                    "Dict",
                    "werkzeug.datastructures.MultiDict",
                    "arxiv.users.domain.Session"
                ]
            }
        },
        "compile_status": {
            "name": "compile_status",
            "location": 154,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "werkzeug.datastructures.MultiDict",
                    "django.http.HttpRequest",
                    "arxiv.users.domain.Session"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "List[int]",
                    "sqlalchemy.orm.Session",
                    "bool"
                ],
                "token": [
                    "str",
                    "Dict",
                    "bytes",
                    "django.http.HttpRequest",
                    "werkzeug.datastructures.MultiDict"
                ]
            }
        },
        "start_compilation": {
            "name": "start_compilation",
            "location": 231,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[float]",
                    "List[int]",
                    "bool"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "None"
                ]
            }
        },
        "_get_log": {
            "name": "_get_log",
            "location": 293,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "checksum": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "file_preview": {
            "name": "file_preview",
            "location": 303,
            "return": [
                "Tuple[(Any, Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "werkzeug.datastructures.MultiDict",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "str",
                    "api.models.PlatformPost"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "compilation_log": {
            "name": "compilation_log",
            "location": 313,
            "return": [
                "Tuple[(Any, Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "List[str]",
                    "str",
                    "api.models.PlatformPost"
                ],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "compile": {
            "name": "compile",
            "location": 327,
            "return": [
                "Tuple[(Dict[(nothing, nothing)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "werkzeug.datastructures.MultiDict",
                    "arxiv.users.domain.Session"
                ],
                "session": [
                    "str",
                    "bool",
                    "werkzeug.datastructures.MultiDict",
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "str",
                    "Dict[str,services.user.transfer.models.User]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Dict[D,services.user.transfer.models.User]",
                    "Dict[UserID,services.user.transfer.models.User]",
                    "sqlalchemy.orm.session.Session"
                ],
                "token": [
                    "str",
                    "bool",
                    "werkzeug.datastructures.MultiDict",
                    "arxiv.users.domain.Session"
                ]
            }
        },
        "_must_process": {
            "name": "_must_process",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "str"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/upload.py": {
        "upload_files": {
            "name": "upload_files",
            "location": 49,
            "return": [
                "Callable",
                "str",
                "Dict[str, str]",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "params": [
                    "str",
                    "User",
                    "Set[I]",
                    "Optional[Set[domain.Identifier]]",
                    "None"
                ],
                "session": [
                    "str",
                    "User",
                    "Set[I]",
                    "Optional[Set[domain.Identifier]]",
                    "None"
                ],
                "submission_id": [
                    "str",
                    "int",
                    "List[int]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Any",
                    "Optional[Union[str,Any]]"
                ],
                "files": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "token": [
                    "None",
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "Client"
                ]
            }
        },
        "delete_all": {
            "name": "delete_all",
            "location": 116,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "List[str]",
                    "List[loading.domain.AccountId]",
                    "List[A]"
                ],
                "params": [
                    "str",
                    "List[Union[Any,Any]]"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "List[dict]",
                    "List[dict[str,Any]]",
                    "Dict",
                    "models.User",
                    "List[Dict[str,Any]]"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 216,
            "return": [
                "Tuple[(Dict[(str, DeleteFileForm)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "werkzeug.datastructures.MultiDict",
                    "int",
                    "List[str]",
                    "List[loading.domain.AccountId]",
                    "django.http.HttpRequest"
                ],
                "params": [
                    "str",
                    "Dict",
                    "Union[None,Dict]",
                    "int"
                ],
                "session": [
                    "arxiv.users.domain.Session"
                ],
                "submission_id": [
                    "int",
                    "List[dict]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "models.User"
                ],
                "token": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_update": {
            "name": "_update",
            "location": 351,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "form": [
                    "str",
                    "TextIO",
                    "Dict[str,Any]",
                    "http_quesuser.model.User"
                ],
                "submission": [
                    "str",
                    "bool",
                    "arxiv.submission.Submission",
                    "Iterable[str]",
                    "Optional[Iterable[str]]",
                    "None"
                ],
                "stat": [
                    "Dict",
                    "str",
                    "Callable",
                    "bool",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "submitter": [
                    "None",
                    "Callable",
                    "arxiv.submission.User",
                    "str",
                    "Optional[arxiv.submission.Client]",
                    "Client"
                ],
                "client": [
                    "None",
                    "Callable",
                    "arxiv.submission.User",
                    "str",
                    "Optional[arxiv.submission.Client]",
                    "Client"
                ],
                "rdata": [
                    "Dict",
                    "bool",
                    "str",
                    "sqlalchemy.orm.Session",
                    "int"
                ]
            }
        },
        "_get_upload": {
            "name": "_get_upload",
            "location": 407,
            "return": [
                "Tuple[(_T3, Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "List[str]",
                    "arxiv.users.domain.Session",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "grouper.models.base.session.Session",
                    "Optional[int]"
                ],
                "session": [
                    "bool",
                    "List[str]",
                    "arxiv.users.domain.Session",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "grouper.models.base.session.Session",
                    "Optional[int]"
                ],
                "submission": [
                    "bool",
                    "None",
                    "arxiv.submission.Submission",
                    "requests.Session",
                    "Union[HTMLSession,AsyncHTMLSession]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "rdata": [
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "List[int]"
                ],
                "token": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "_new_upload": {
            "name": "_new_upload",
            "location": 456,
            "return": [
                "Tuple[(Dict[(nothing, nothing)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "List[List[Any]]",
                    "Optional[str]",
                    "bytes",
                    "float"
                ],
                "pointer": [
                    "str",
                    "Dict",
                    "Dict[str,int]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "session": [
                    "arxiv.users.domain.Session",
                    "asgard.models.user.User"
                ],
                "submission": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "rdata": [
                    "Dict[str,Any]",
                    "Dict",
                    "apistar.http.RequestData",
                    "int",
                    "str"
                ],
                "token": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "_new_file": {
            "name": "_new_file",
            "location": 538,
            "return": [
                "Tuple[(Dict[(nothing, nothing)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "pointer": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "None"
                ],
                "session": [
                    "arxiv.users.domain.Session",
                    "asgard.models.user.User"
                ],
                "submission": [
                    "str",
                    "arxiv.submission.Submission",
                    "Dict[str,str]",
                    "Dict",
                    "Exception",
                    "None",
                    "Optional[Exception]",
                    "Optional[str]"
                ],
                "rdata": [
                    "str",
                    "Callable"
                ],
                "token": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "_post_upload": {
            "name": "_post_upload",
            "location": 639,
            "return": [
                "Tuple[(Dict[(nothing, nothing)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "params": [
                    "Dict[str,Any]",
                    "str",
                    "List[str]",
                    "Union[str,int]"
                ],
                "files": [
                    "str",
                    "Tuple[int]",
                    "List[F]",
                    "Tuple[int,int]",
                    "Optional[str]",
                    "List[domain.models.hotel.field.HotelField]",
                    "bool",
                    "Callable[[str],bool]"
                ],
                "session": [
                    "str",
                    "int"
                ],
                "submission": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ],
                "rdata": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_notifications": {
            "name": "_get_notifications",
            "location": 691,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "stat": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/util.py": {
        "validate_command": {
            "name": "validate_command",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "form": [
                    "str",
                    "Dict",
                    "wtforms.Form"
                ],
                "event": [
                    "str"
                ],
                "submission": [
                    "str",
                    "None"
                ],
                "field": [
                    "Text",
                    "str",
                    "django.http.HttpResponse",
                    "Dict[str,str]",
                    "wtforms.Form"
                ],
                "message": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "apps.core.task.coretaskstate.TaskDefinition",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "user_and_client_from_session": {
            "name": "user_and_client_from_session",
            "location": 139,
            "return": [
                "Tuple[(Any, None)]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "grouper.models.user.User",
                    "nox.sessions.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "OptGroupSelectWidget.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "HTMLString",
                "str",
                "ebl.transliteration.domain.sign.Sign",
                "float"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "dataclasses.Field"
                ]
            }
        },
        "OptGroupSelectField.pre_validate": {
            "name": "pre_validate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "OptGroupSelectField._value": {
            "name": "_value",
            "location": 58,
            "return": [
                "str",
                "Dict[str,List[int]]",
                "Dict[str,str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptGroupSelectMultipleField._value": {
            "name": "_value",
            "location": 76,
            "return": [
                "List[str]",
                "Dict[str,List[int]]",
                "Dict[str,str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMixin.fields": {
            "name": "fields",
            "location": 131,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict",
                    "pydantic.fields.ModelField",
                    "dataclasses.Field"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/verify_user.py": {
        "verify": {
            "name": "verify",
            "location": 30,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "params": [
                    "str",
                    "int"
                ],
                "session": [
                    "str",
                    "int",
                    "arxiv.users.domain.Session",
                    "http.HTTPStatus",
                    "domain.submission.Submission",
                    "sqlalchemy.orm.Session"
                ],
                "submission_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/withdraw.py": {
        "request_withdrawal": {
            "name": "request_withdrawal",
            "location": 39,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "str",
                    "int"
                ],
                "session": [
                    "str",
                    "arxiv.users.domain.Session",
                    "Mapping",
                    "Mapping[str,Any]"
                ],
                "submission_id": [
                    "str",
                    "int",
                    "float",
                    "Dict[str,Any]",
                    "Union[str,int]"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/__init__.py": {
        "submission_status": {
            "name": "submission_status",
            "location": 25,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "List[int]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "str",
                    "List[int]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "session": [
                    "apistar.http.RequestData",
                    "apistar.backends.django_orm.Session",
                    "ebl.users.domain.user.User"
                ],
                "submission_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_authorship.py": {
        "TestVerifyAuthorship.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyAuthorship.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyAuthorship.test_get_request_with_nonexistant_submission": {
            "name": "test_get_request_with_nonexistant_submission",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestVerifyAuthorship.test_post_request": {
            "name": "test_post_request",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyAuthorship.test_not_author_no_proxy": {
            "name": "test_not_author_no_proxy",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyAuthorship.test_post_request_with_data": {
            "name": "test_post_request_with_data",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_url_for": [
                    "bool",
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyAuthorship.test_save_fails": {
            "name": "test_save_fails",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "TestVerifyAuthorship.test_get_request_with_nonexistant_submission.raise_no_such_submission": {
            "name": "raise_no_such_submission",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestVerifyAuthorship.test_save_fails.raise_on_verify": {
            "name": "raise_on_verify",
            "location": 134,
            "return": [
                "Tuple[list]",
                "Dict[str,Any]",
                "str",
                "apistar.http.QueryParam",
                "bool"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_classification.py": {
        "TestClassification.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassification.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestClassification.test_get_request_with_nonexistant_submission": {
            "name": "test_get_request_with_nonexistant_submission",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestClassification.test_post_request": {
            "name": "test_post_request",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestClassification.test_post_with_invalid_category": {
            "name": "test_post_with_invalid_category",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestClassification.test_post_with_category": {
            "name": "test_post_with_category",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestCrossList.setUp": {
            "name": "setUp",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrossList.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestCrossList.test_get_request_with_nonexistant_submission": {
            "name": "test_get_request_with_nonexistant_submission",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestCrossList.test_post_request": {
            "name": "test_post_request",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestCrossList.test_post_with_invalid_category": {
            "name": "test_post_with_invalid_category",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestCrossList.test_post_with_category": {
            "name": "test_post_with_category",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestClassification.test_get_request_with_nonexistant_submission.raise_no_such_submission": {
            "name": "raise_no_such_submission",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCrossList.test_get_request_with_nonexistant_submission.raise_no_such_submission": {
            "name": "raise_no_such_submission",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_jref.py": {
        "mock_save": {
            "name": "mock_save",
            "location": 16,
            "return": [
                "Tuple[(mock.MagicMock, tuple)]"
            ],
            "arguments": {}
        },
        "TestJREFSubmission.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJREFSubmission.test_GET_with_unannounced": {
            "name": "test_GET_with_unannounced",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_url_for": [],
                "mock_alerts": []
            }
        },
        "TestJREFSubmission.test_POST_with_unannounced": {
            "name": "test_POST_with_unannounced",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_url_for": [],
                "mock_alerts": []
            }
        },
        "TestJREFSubmission.test_GET_with_announced": {
            "name": "test_GET_with_announced",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestJREFSubmission.test_POST_with_announced": {
            "name": "test_POST_with_announced",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_url_for": [],
                "mock_alerts": []
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_license.py": {
        "TestSetLicense.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetLicense.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestSetLicense.test_get_request_with_nonexistant_submission": {
            "name": "test_get_request_with_nonexistant_submission",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestSetLicense.test_post_request": {
            "name": "test_post_request",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestSetLicense.test_post_request_with_data": {
            "name": "test_post_request_with_data",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_url_for": []
            }
        },
        "TestSetLicense.test_save_fails": {
            "name": "test_save_fails",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "TestSetLicense.test_get_request_with_nonexistant_submission.raise_no_such_submission": {
            "name": "raise_no_such_submission",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSetLicense.test_save_fails.raise_on_verify": {
            "name": "raise_on_verify",
            "location": 125,
            "return": [
                "Tuple[list]",
                "str",
                "bytes",
                "int",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_metadata.py": {
        "TestOptional.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptional.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestOptional.test_post_request_with_no_data": {
            "name": "test_post_request_with_no_data",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestOptional.test_save_error_is_raised": {
            "name": "test_save_error_is_raised",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestOptional.test_post_request_with_required_data": {
            "name": "test_post_request_with_required_data",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [
                    "mock.Mock"
                ]
            }
        },
        "TestOptional.test_post_request_with_unchanged_data": {
            "name": "test_post_request_with_unchanged_data",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestOptional.test_post_request_with_some_changes": {
            "name": "test_post_request_with_some_changes",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestMetadata.setUp": {
            "name": "setUp",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetadata.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestMetadata.test_post_request_with_no_data": {
            "name": "test_post_request_with_no_data",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestMetadata.test_post_request_with_required_data": {
            "name": "test_post_request_with_required_data",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [
                    "mock.Mock"
                ]
            }
        },
        "TestMetadata.test_post_request_with_unchanged_data": {
            "name": "test_post_request_with_unchanged_data",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestMetadata.test_post_request_some_changed_data": {
            "name": "test_post_request_some_changed_data",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestMetadata.test_post_request_invalid_data": {
            "name": "test_post_request_invalid_data",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": []
            }
        },
        "TestMetadata.test_save_error_is_raised": {
            "name": "test_save_error_is_raised",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestOptional.test_save_error_is_raised.raise_save_error": {
            "name": "raise_save_error",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMetadata.test_save_error_is_raised.raise_save_error": {
            "name": "raise_save_error",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_policy.py": {
        "TestConfirmPolicy.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfirmPolicy.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestConfirmPolicy.test_get_request_with_nonexistant_submission": {
            "name": "test_get_request_with_nonexistant_submission",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestConfirmPolicy.test_post_request": {
            "name": "test_post_request",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestConfirmPolicy.test_not_author_no_proxy": {
            "name": "test_not_author_no_proxy",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestConfirmPolicy.test_post_request_with_data": {
            "name": "test_post_request_with_data",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_url_for": [
                    "bool",
                    "mock.MagicMock"
                ]
            }
        },
        "TestConfirmPolicy.test_save_fails": {
            "name": "test_save_fails",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "TestConfirmPolicy.test_get_request_with_nonexistant_submission.raise_no_such_submission": {
            "name": "raise_no_such_submission",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestConfirmPolicy.test_save_fails.raise_on_policy": {
            "name": "raise_on_policy",
            "location": 145,
            "return": [
                "Tuple[list]",
                "str",
                "bytes",
                "int",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_primary.py": {
        "TestSetPrimaryClassification.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetPrimaryClassification.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestSetPrimaryClassification.test_get_request_with_nonexistant_submission": {
            "name": "test_get_request_with_nonexistant_submission",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestSetPrimaryClassification.test_post_request": {
            "name": "test_post_request",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestSetPrimaryClassification.test_post_request_with_data": {
            "name": "test_post_request_with_data",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_url_for": [
                    "bool",
                    "mock.MagicMock"
                ]
            }
        },
        "TestSetPrimaryClassification.test_save_error": {
            "name": "test_save_error",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "TestSetPrimaryClassification.test_get_request_with_nonexistant_submission.raise_no_such_submission": {
            "name": "raise_no_such_submission",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSetPrimaryClassification.test_save_error.raise_on_set": {
            "name": "raise_on_set",
            "location": 143,
            "return": [
                "Tuple[list]",
                "str",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_upload.py": {
        "TestUpload.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_get_no_upload": {
            "name": "test_get_no_upload",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": []
            }
        },
        "TestUpload.test_get_upload": {
            "name": "test_get_upload",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "Dict[str,Any]"
                ],
                "mock_filemanager": []
            }
        },
        "TestUpload.test_post_upload": {
            "name": "test_post_upload",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_filemanager": []
            }
        },
        "TestDelete.setUp": {
            "name": "setUp",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_get_delete": {
            "name": "test_get_delete",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "Dict[str,Any]"
                ],
                "mock_filemanager": [
                    "mock.Mock"
                ]
            }
        },
        "TestDelete.test_post_delete": {
            "name": "test_post_delete",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "Dict[str,Any]"
                ],
                "mock_filemanager": [
                    "mock.Mock"
                ]
            }
        },
        "TestDelete.test_post_delete_confirmed": {
            "name": "test_post_delete_confirmed",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_filemanager": [
                    "str"
                ],
                "mock_url_for": []
            }
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/test_verify_user.py": {
        "TestVerifyUser.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyUser.test_get_request_with_submission": {
            "name": "test_get_request_with_submission",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyUser.test_post_request": {
            "name": "test_post_request",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyUser.test_post_request_with_data": {
            "name": "test_post_request_with_data",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [],
                "mock_save": [],
                "mock_url_for": [
                    "bool",
                    "mock.MagicMock"
                ]
            }
        },
        "TestVerifyUser.test_save_fails": {
            "name": "test_save_fails",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "mock_save": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "TestVerifyUser.test_save_fails.raise_on_verify": {
            "name": "raise_on_verify",
            "location": 115,
            "return": [
                "Tuple[list]",
                "str",
                "bytes",
                "int",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/controllers/tests/__init__.py": {},
    "arxiv-submission-ui-master/submit/domain/workflow.py": {
        "stage_from_endpoint": {
            "name": "stage_from_endpoint",
            "location": 49,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "float",
                    "Tuple[str,float]",
                    "Tuple[Union[str,float]]"
                ]
            }
        },
        "get_instance": {
            "name": "get_instance",
            "location": 234,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BaseStage.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool",
                    "int",
                    "float"
                ],
                "must_see": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "BaseStage.is_optional": {
            "name": "is_optional",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStage.type": {
            "name": "type",
            "location": 44,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyUser.is_complete": {
            "name": "is_complete",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "Authorship.is_complete": {
            "name": "is_complete",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "int"
                ]
            }
        },
        "License.is_complete": {
            "name": "is_complete",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "Iterable[Any]",
                    "Optional[Iterable[Any]]",
                    "str",
                    "bool",
                    "None",
                    "List",
                    "Optional[List[str]]"
                ]
            }
        },
        "Policy.is_complete": {
            "name": "is_complete",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "Classification.is_complete": {
            "name": "is_complete",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "int"
                ]
            }
        },
        "CrossList.is_complete": {
            "name": "is_complete",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "str",
                    "int"
                ]
            }
        },
        "FileUpload.is_complete": {
            "name": "is_complete",
            "location": 150,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "submission": [
                    "str"
                ]
            }
        },
        "Process.is_complete": {
            "name": "is_complete",
            "location": 167,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "submission": [
                    "str",
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "Metadata.is_complete": {
            "name": "is_complete",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "Optional[int]",
                    "int",
                    "Type",
                    "Match[str]",
                    "None",
                    "Match",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "OptionalMetadata.is_complete": {
            "name": "is_complete",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "int",
                    "submission.Submission",
                    "str",
                    "None",
                    "Optional[int]",
                    "domain.Trigger"
                ]
            }
        },
        "FinalPreview.is_complete": {
            "name": "is_complete",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "str",
                    "int"
                ]
            }
        },
        "Confirm.is_complete": {
            "name": "is_complete",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "submission": [
                    "str",
                    "int"
                ]
            }
        },
        "get_instance.inner": {
            "name": "inner",
            "location": 237,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "workflow": [
                    "str",
                    "bool",
                    "float"
                ],
                "stage": [
                    "str"
                ]
            }
        },
        "Workflow.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission": [
                    "bool",
                    "Dict",
                    "str",
                    "Optional[float]",
                    "float",
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ],
                "seen": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Workflow.__iter__": {
            "name": "__iter__",
            "location": 270,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.iter_prior": {
            "name": "iter_prior",
            "location": 275,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "Workflow.complete": {
            "name": "complete",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.current_stage": {
            "name": "current_stage",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.confirmation": {
            "name": "confirmation",
            "location": 295,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.next_stage": {
            "name": "next_stage",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Workflow.previous_stage": {
            "name": "previous_stage",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Workflow.can_proceed_to": {
            "name": "can_proceed_to",
            "location": 320,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "int"
                ]
            }
        },
        "Workflow.is_required": {
            "name": "is_required",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "Optional[int]",
                    "Type",
                    "int",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Workflow.is_complete": {
            "name": "is_complete",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "bool",
                    "Type",
                    "str",
                    "Type[Frame]",
                    "int"
                ]
            }
        },
        "Workflow.mark_seen": {
            "name": "mark_seen",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "List[int]",
                    "bytes",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "submission.Submission",
                    "None"
                ]
            }
        },
        "Workflow.is_seen": {
            "name": "is_seen",
            "location": 349,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "Workflow.is_done": {
            "name": "is_done",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "float",
                    "Optional[float]",
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/domain/__init__.py": {
        "FileError.to_dict": {
            "name": "to_dict",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileError.from_dict": {
            "name": "from_dict",
            "location": 36,
            "return": [
                "FileError"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFileError]"
                ],
                "data": [
                    "Type",
                    "Dict",
                    "str",
                    "bytes",
                    "List[str]",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "FileStatus.to_dict": {
            "name": "to_dict",
            "location": 53,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStatus.from_dict": {
            "name": "from_dict",
            "location": 71,
            "return": [
                "FileStatus"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFileStatus]"
                ],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "Upload.file_count": {
            "name": "file_count",
            "location": 116,
            "return": [
                "int",
                "str",
                "List[str]",
                "io.StringIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.to_dict": {
            "name": "to_dict",
            "location": 120,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.from_dict": {
            "name": "from_dict",
            "location": 139,
            "return": [
                "Upload"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUpload]"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/filters/tex_filters.py": {
        "compilation_log_display": {
            "name": "compilation_log_display",
            "location": 20,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "autotex_log": [
                    "str",
                    "List[str]"
                ],
                "submission_id": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ],
                "compilation_status": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/filters/__init__.py": {
        "group_files": {
            "name": "group_files",
            "location": 25,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "IO[str]",
                    "IO[Any]",
                    "Sequence[str]"
                ]
            }
        },
        "timesince": {
            "name": "timesince",
            "location": 68,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime",
                    "int"
                ],
                "default": [
                    "Text",
                    "bool",
                    "str",
                    "int",
                    "Optional[T]",
                    "float",
                    "T",
                    "Callable[,T]",
                    "Optional"
                ]
            }
        },
        "duration": {
            "name": "duration",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "delta": [
                    "str",
                    "int"
                ]
            }
        },
        "just_updated": {
            "name": "just_updated",
            "location": 97,
            "return": [
                "bool",
                "str",
                "List[Dict[str,Any]]",
                "Optional[str]",
                "domain.Submission"
            ],
            "arguments": {
                "status": [
                    "int",
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "Iterable[S]"
                ],
                "seconds": [
                    "int",
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]"
                ]
            }
        },
        "get_category_name": {
            "name": "get_category_name",
            "location": 131,
            "return": [
                "str",
                "Dict[str, Type]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "category": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "process_status_display": {
            "name": "process_status_display",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "status": [
                    "Optional[Any]",
                    "Any",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "compilation_status_display": {
            "name": "compilation_status_display",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "get_filters": {
            "name": "get_filters",
            "location": 174,
            "return": [
                "List[Tuple[(str, Callable)]]"
            ],
            "arguments": {}
        },
        "group_files._order": {
            "name": "_order",
            "location": 57,
            "return": [
                "OrderedDict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "subtree": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/routes/auth.py": {
        "is_owner": {
            "name": "is_owner",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "submission_id": [
                    "str"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/routes/ui.py": {
        "path": {
            "name": "path",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "None",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "workflow_route": {
            "name": "workflow_route",
            "location": 41,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "stage": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "methods": [
                    "List[Text]",
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "redirect_to_login": {
            "name": "redirect_to_login",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int",
                "django.http.HttpResponse",
                "str"
            ],
            "arguments": {}
        },
        "load_submission": {
            "name": "load_submission",
            "location": 55,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "inject_stage": {
            "name": "inject_stage",
            "location": 68,
            "return": [
                "Dict[Text,None]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "inject_workflow": {
            "name": "inject_workflow",
            "location": 89,
            "return": [
                "Dict[Text,]",
                "Dict[Text,None]",
                "bool",
                "str",
                "Optional[Dict[str,Any]]",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "add_immediate_alert": {
            "name": "add_immediate_alert",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "str",
                    "Iterable",
                    "list"
                ],
                "severity": [
                    "Dict",
                    "str",
                    "List",
                    "Iterable"
                ],
                "message": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "title": [
                    "str",
                    "Dict",
                    "None"
                ],
                "dismissable": [
                    "bool",
                    "str",
                    "Dict"
                ],
                "safe": [
                    "bool",
                    "Optional[ShippingInfo]",
                    "int",
                    "Dict",
                    "float"
                ]
            }
        },
        "handle": {
            "name": "handle",
            "location": 109,
            "return": [
                "Response",
                "Optional[str]",
                "List[str]",
                "Dict[str,str]",
                "Tuple[arxiv.submission.Event]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "controller": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "None",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ],
                "template": [
                    "str",
                    "int"
                ],
                "title": [
                    "str",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "submission_id": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[int]"
                ],
                "get_params": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "service_status": {
            "name": "service_status",
            "location": 168,
            "return": [
                "Text",
                "Optional[str]",
                "int",
                "bytearray"
            ],
            "arguments": {}
        },
        "manage_submissions": {
            "name": "manage_submissions",
            "location": 176,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "List[Dict[str, Any]]",
                "logging.LogRecord"
            ],
            "arguments": {}
        },
        "create_submission": {
            "name": "create_submission",
            "location": 185,
            "return": [
                "int",
                "Union[int, float, complex]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "delete_submission": {
            "name": "delete_submission",
            "location": 194,
            "return": [
                "List[Callable]",
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "services.board.transfer.models.TopicID",
                    "Union[int,str]",
                    "Tuple[Optional[str],str]"
                ]
            }
        },
        "cancel_request": {
            "name": "cancel_request",
            "location": 204,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "request_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "create_replacement": {
            "name": "create_replacement",
            "location": 214,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "submission_id": [
                    "str"
                ]
            }
        },
        "submission_status": {
            "name": "submission_status",
            "location": 223,
            "return": [
                "bool",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "submission_id": [
                    "str"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 299,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "None",
                    "List[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "authorship": {
            "name": "authorship",
            "location": 309,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "license": {
            "name": "license",
            "location": 319,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "policy": {
            "name": "policy",
            "location": 329,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "classification": {
            "name": "classification",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "cross_list": {
            "name": "cross_list",
            "location": 350,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int"
                ]
            }
        },
        "file_upload": {
            "name": "file_upload",
            "location": 361,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "file_delete": {
            "name": "file_delete",
            "location": 372,
            "return": [
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "file_delete_all": {
            "name": "file_delete_all",
            "location": 383,
            "return": [
                "str",
                "search.domain.DocMeta",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "file_process": {
            "name": "file_process",
            "location": 395,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "Set[int]"
                ]
            }
        },
        "file_preview": {
            "name": "file_preview",
            "location": 405,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "Union[int,str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "compilation_log": {
            "name": "compilation_log",
            "location": 418,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "dict",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "add_metadata": {
            "name": "add_metadata",
            "location": 432,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "dict"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "add_optional_metadata": {
            "name": "add_optional_metadata",
            "location": 442,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "dict"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "List[loading.domain.AccountId]",
                    "List[A]"
                ]
            }
        },
        "final_preview": {
            "name": "final_preview",
            "location": 453,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "confirmation": {
            "name": "confirmation",
            "location": 463,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "jref": {
            "name": "jref",
            "location": 473,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "None",
                    "str",
                    "Tuple[Optional[str],str]",
                    "Tuple[Union[str,None,str]]",
                    "Union[int,str]",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "withdraw": {
            "name": "withdraw",
            "location": 482,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "request_cross": {
            "name": "request_cross",
            "location": 491,
            "return": [
                "Dict[str, str]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "endorsetype": {
            "name": "endorsetype",
            "location": 499,
            "return": [
                "Text",
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "endorsements": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "workflow_route.deco": {
            "name": "deco",
            "location": 43,
            "return": [
                "str",
                "Iterable[str]",
                "list",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str"
                ]
            }
        },
        "inject_stage.get_current_stage_for_submission": {
            "name": "get_current_stage_for_submission",
            "location": 78,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "submission": []
            }
        }
    },
    "arxiv-submission-ui-master/submit/routes/__init__.py": {},
    "arxiv-submission-ui-master/submit/services/filemanager.py": {
        "Download.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str,Any]",
                    "Tuple[allennlp.data.Instance,allennlp.common.util.JsonDict]",
                    "Tuple[Union[allennlp.data.Instance,D]]"
                ]
            }
        },
        "Download.read": {
            "name": "read",
            "location": 40,
            "return": [
                "bytes",
                "Union[str, List[str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager.is_available": {
            "name": "is_available",
            "location": 56,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[...,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager._parse_upload_status": {
            "name": "_parse_upload_status",
            "location": 69,
            "return": [
                "Upload",
                "str",
                "int",
                "Callable[[KT],VT]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "FileManager.request_file": {
            "name": "request_file",
            "location": 104,
            "return": [
                "Tuple[Download]",
                "Dict",
                "base.JSONDict",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "FileManager.upload_package": {
            "name": "upload_package",
            "location": 109,
            "return": [
                "str",
                "bytes",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pointer": [
                    "str",
                    "int",
                    "None",
                    "werkzeug.datastructures.FileStorage",
                    "List[tuple[Union[str,int]]]",
                    "Optional[Address]",
                    "List[Tuple[str,int]]"
                ],
                "token": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FileManager.get_upload_status": {
            "name": "get_upload_status",
            "location": 140,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "token": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "FileManager.add_file": {
            "name": "add_file",
            "location": 162,
            "return": [
                "str",
                "bytes",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str",
                    "bool",
                    "Dict[int,str]"
                ],
                "pointer": [
                    "int",
                    "werkzeug.datastructures.FileStorage",
                    "str",
                    "List[str]"
                ],
                "token": [
                    "str",
                    "bool",
                    "Dict[int,str]"
                ],
                "ancillary": [
                    "bool",
                    "str",
                    "Dict[int,str]"
                ]
            }
        },
        "FileManager.delete_all": {
            "name": "delete_all",
            "location": 200,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "FileManager.get_file_content": {
            "name": "get_file_content",
            "location": 217,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str",
                    "bool"
                ],
                "file_path": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileManager.delete_file": {
            "name": "delete_file",
            "location": 242,
            "return": [
                "Union[str, IO]",
                "dict",
                "werkzeug.datastructures.FileStorage",
                "bytes",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "FileManager.get_upload_content": {
            "name": "get_upload_content",
            "location": 268,
            "return": [
                "str",
                "int",
                "Callable",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "FileManager.get_logs": {
            "name": "get_logs",
            "location": 290,
            "return": [
                "Tuple[Union[str,dict[int,Any],list[dict[str,Any]],set[str],dict,dict[str,str]]]",
                "str",
                "int",
                "List[Dict[str,str]]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str",
                    "Dict"
                ],
                "token": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "arxiv-submission-ui-master/submit/services/__init__.py": {},
    "arxiv-submission-ui-master/submit/services/tests/test_filemanager_integration.py": {
        "TestFileManagerIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict"
                ]
            }
        },
        "TestFileManagerIntegration.tearDownClass": {
            "name": "tearDownClass",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Type]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestFileManagerIntegration.test_upload_package": {
            "name": "test_upload_package",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileManagerIntegration.test_upload_package_without_authorization": {
            "name": "test_upload_package_without_authorization",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileManagerIntegration.test_upload_package_without_authentication_token": {
            "name": "test_upload_package_without_authentication_token",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileManagerIntegration.test_get_upload_status": {
            "name": "test_get_upload_status",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileManagerIntegration.test_get_upload_status_without_authorization": {
            "name": "test_get_upload_status_without_authorization",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileManagerIntegration.test_get_upload_status_nacho_upload": {
            "name": "test_get_upload_status_nacho_upload",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileManagerIntegration.test_add_file_to_upload": {
            "name": "test_add_file_to_upload",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-submission-ui-master/submit/services/tests/__init__.py": {},
    "arxiv-submission-ui-master/submit/tests/mock_filemanager.py": {
        "_set_upload": {
            "name": "_set_upload",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "payload": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "_get_upload": {
            "name": "_get_upload",
            "location": 43,
            "return": [
                "dict"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "_add_file": {
            "name": "_add_file",
            "location": 54,
            "return": [
                "dict"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "file_data": [
                    "str",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "service_status": {
            "name": "service_status",
            "location": 60,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "upload_package": {
            "name": "upload_package",
            "location": 66,
            "return": [
                "Tuple",
                "str",
                "Optional[int]",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "add_file": {
            "name": "add_file",
            "location": 86,
            "return": [
                "Tuple",
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_fm_app": {
            "name": "create_fm_app",
            "location": 105,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-ui-master/submit/tests/test_domain.py": {},
    "arxiv-submission-ui-master/submit/tests/test_workflow.py": {
        "TestSubmissionWorkflow.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionWorkflow.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionWorkflow._parse_csrf_token": {
            "name": "_parse_csrf_token",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestSubmissionWorkflow.test_create_submission": {
            "name": "test_create_submission",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsementMessaging.setUp": {
            "name": "setUp",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsementMessaging.tearDown": {
            "name": "tearDown",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsementMessaging._parse_csrf_token": {
            "name": "_parse_csrf_token",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestEndorsementMessaging.test_no_endorsements": {
            "name": "test_no_endorsements",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsementMessaging.test_some_categories": {
            "name": "test_some_categories",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsementMessaging.test_some_archives": {
            "name": "test_some_archives",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndorsementMessaging.test_all_endorsements": {
            "name": "test_all_endorsements",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJREFWorkflow.setUp": {
            "name": "setUp",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJREFWorkflow.tearDown": {
            "name": "tearDown",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJREFWorkflow._parse_csrf_token": {
            "name": "_parse_csrf_token",
            "location": 457,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestJREFWorkflow.test_create_submission": {
            "name": "test_create_submission",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithdrawalWorkflow.setUp": {
            "name": "setUp",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithdrawalWorkflow.tearDown": {
            "name": "tearDown",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithdrawalWorkflow._parse_csrf_token": {
            "name": "_parse_csrf_token",
            "location": 589,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestWithdrawalWorkflow.test_request_withdrawal": {
            "name": "test_request_withdrawal",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-submission-ui-master/submit/tests/__init__.py": {}
}
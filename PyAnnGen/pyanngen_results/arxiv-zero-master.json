{
    "arxiv-zero-master/app.py": {},
    "arxiv-zero-master/populate_test_database.py": {
        "populate_database": {
            "name": "populate_database",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-zero-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "environ": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "start_response": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "arxiv-zero-master/docs/source/conf.py": {},
    "arxiv-zero-master/tests/run_app_tests.py": {},
    "arxiv-zero-master/tests/__init__.py": {},
    "arxiv-zero-master/tests/e2e/test_e2e_thing_mutation.py": {
        "TestCreateAndMutate.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateAndMutate.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateAndMutate.test_create_a_thing_and_mutate_it": {
            "name": "test_create_a_thing_and_mutate_it",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateAndMutate.setUp.run_worker": {
            "name": "run_worker",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-zero-master/tests/e2e/__init__.py": {},
    "arxiv-zero-master/zero/celery.py": {},
    "arxiv-zero-master/zero/celeryconfig.py": {},
    "arxiv-zero-master/zero/config.py": {},
    "arxiv-zero-master/zero/factory.py": {
        "_configure_celery_app": {
            "name": "_configure_celery_app",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_create_base_app": {
            "name": "_create_base_app",
            "location": 23,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        },
        "create_web_app": {
            "name": "create_web_app",
            "location": 37,
            "return": [
                "flask.Flask",
                "typing.Literal"
            ],
            "arguments": {}
        },
        "create_api_app": {
            "name": "create_api_app",
            "location": 44,
            "return": [
                "flask.Flask",
                "typing.Literal"
            ],
            "arguments": {}
        },
        "create_worker_app": {
            "name": "create_worker_app",
            "location": 50,
            "return": [
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "arxiv-zero-master/zero/tasks.py": {
        "mutate_a_thing": {
            "name": "mutate_a_thing",
            "location": 29,
            "return": [
                "dict[typing.Text, typing.Union[int,str,None]]",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "thing_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "with_sleep": [
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "check_mutation_status": {
            "name": "check_mutation_status",
            "location": 51,
            "return": [
                "zero.domain.task.Task"
            ],
            "arguments": {
                "task_id": [
                    "str"
                ]
            }
        },
        "update_sent_state": {
            "name": "update_sent_state",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "Optional[Callable]",
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "headers": [
                    "None",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[dict]",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "body": [
                    "bool",
                    "None",
                    "AbstractSet[int]",
                    "typing.AbstractSet",
                    "List[dict]",
                    "list[dict[, ]]",
                    "AbstractSet[str]",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "int",
                    "Dict[str, Iterable[Any]]"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/worker.py": {},
    "arxiv-zero-master/zero/__init__.py": {},
    "arxiv-zero-master/zero/controllers/baz.py": {
        "get_baz": {
            "name": "get_baz",
            "location": 20,
            "return": [
                "Tuple[(Union[(IO, Dict[(str, Any)])], http.HTTPStatus, Dict[(str, str)])]"
            ],
            "arguments": {
                "baz_id": [
                    "int"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/controllers/things.py": {
        "get_thing": {
            "name": "get_thing",
            "location": 35,
            "return": [
                "Tuple[(Union[(IO, Dict[(str, Any)])], http.HTTPStatus, Dict[(str, str)])]"
            ],
            "arguments": {
                "thing_id": [
                    "int"
                ]
            }
        },
        "get_thing_description": {
            "name": "get_thing_description",
            "location": 66,
            "return": [
                "Tuple[(Union[(IO, Dict[(str, Any)])], http.HTTPStatus, Dict[(str, str)])]"
            ],
            "arguments": {
                "thing_id": [
                    "int"
                ]
            }
        },
        "create_a_thing": {
            "name": "create_a_thing",
            "location": 104,
            "return": [
                "Tuple[(Union[(IO, Dict[(str, Any)])], http.HTTPStatus, Dict[(str, str)])]"
            ],
            "arguments": {
                "thing_data": [
                    "dict"
                ]
            }
        },
        "start_mutating_a_thing": {
            "name": "start_mutating_a_thing",
            "location": 146,
            "return": [
                "Tuple[(Union[(IO, Dict[(str, Any)])], http.HTTPStatus, Dict[(str, str)])]"
            ],
            "arguments": {
                "thing_id": [
                    "int"
                ]
            }
        },
        "mutation_status": {
            "name": "mutation_status",
            "location": 169,
            "return": [
                "Tuple[(Union[(IO, Dict[(str, Any)])], http.HTTPStatus, Dict[(str, str)])]"
            ],
            "arguments": {
                "task_id": [
                    "str"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/controllers/__init__.py": {},
    "arxiv-zero-master/zero/domain/baz.py": {
        "Baz.is_indeed": {
            "name": "is_indeed",
            "location": 17,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-zero-master/zero/domain/task.py": {
        "Task.is_in_progress": {
            "name": "is_in_progress",
            "location": 26,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_failed": {
            "name": "is_failed",
            "location": 30,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_complete": {
            "name": "is_complete",
            "location": 34,
            "return": [
                "bool",
                "Union[List[str], List[Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-zero-master/zero/domain/things.py": {
        "_now": {
            "name": "_now",
            "location": 10,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "Thing.is_persisted": {
            "name": "is_persisted",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-zero-master/zero/domain/__init__.py": {},
    "arxiv-zero-master/zero/process/mutate.py": {
        "add_some_one_to_the_thing": {
            "name": "add_some_one_to_the_thing",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "the_thing": [
                    "zero.domain.things.Thing"
                ]
            }
        },
        "increment_mukluk": {
            "name": "increment_mukluk",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "a_thing": [
                    "zero.domain.things.Thing"
                ],
                "a_baz": [
                    "zero.domain.baz.Baz"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/process/__init__.py": {},
    "arxiv-zero-master/zero/process/tests/test_mutate.py": {
        "TestMutateThing.test_add_some_one": {
            "name": "test_add_some_one",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-zero-master/zero/process/tests/__init__.py": {},
    "arxiv-zero-master/zero/routes/external_api.py": {
        "ok": {
            "name": "ok",
            "location": 32,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "read_baz": {
            "name": "read_baz",
            "location": 39,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "baz_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "read_thing": {
            "name": "read_thing",
            "location": 50,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "thing_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "create_thing": {
            "name": "create_thing",
            "location": 65,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {}
        },
        "mutate_thing": {
            "name": "mutate_thing",
            "location": 77,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "thing_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "mutation_status": {
            "name": "mutation_status",
            "location": 88,
            "return": [
                "dict",
                "List[str]",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 104,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "werkzeug.exceptions.HTTPException",
                    "None",
                    "Optional[\"Response\"]"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/routes/ui.py": {
        "read_baz": {
            "name": "read_baz",
            "location": 47,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "baz_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "read_thing": {
            "name": "read_thing",
            "location": 60,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "thing_id": [
                    "int"
                ]
            }
        },
        "handle_bad_request": {
            "name": "handle_bad_request",
            "location": 77,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "werkzeug.exceptions.Unauthorized",
                    "ebl.fragmentarium.domain.fragmenFragment"
                ]
            }
        },
        "handle_unauthorized": {
            "name": "handle_unauthorized",
            "location": 93,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "werkzeug.exceptions.Unauthorized",
                    "ebl.fragmentarium.domain.fragmenFragment"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/routes/__init__.py": {},
    "arxiv-zero-master/zero/routes/tests/test_external_api.py": {
        "TestExternalAPIRoutes.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalAPIRoutes.test_get_baz": {
            "name": "test_get_baz",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_baz": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExternalAPIRoutes.test_get_thing": {
            "name": "test_get_thing",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_thing": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestExternalAPIRoutes.test_create_thing": {
            "name": "test_create_thing",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_create_a_thing": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/routes/tests/test_ui.py": {
        "TestUIRoutes.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUIRoutes.test_get_baz": {
            "name": "test_get_baz",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_baz": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestUIRoutes.test_get_thing": {
            "name": "test_get_thing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_thing": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/routes/tests/__init__.py": {},
    "arxiv-zero-master/zero/services/baz.py": {
        "BazService.status": {
            "name": "status",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BazService.retrieve_baz": {
            "name": "retrieve_baz",
            "location": 54,
            "return": [
                "Baz",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "baz_id": [
                    "int"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/services/__init__.py": {},
    "arxiv-zero-master/zero/services/tests/test_foo.py": {
        "TestBazServiceStatus.test_status_true_when_remote_is_ok": {
            "name": "test_status_true_when_remote_is_ok",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestBazServiceStatus.test_status_false_when_remote_not_ok": {
            "name": "test_status_false_when_remote_not_ok",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestBazServiceStatus.test_status_false_when_error_occurs": {
            "name": "test_status_false_when_error_occurs",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestBazServiceRetrieve.test_raises_nobaz_when_not_found": {
            "name": "test_raises_nobaz_when_not_found",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestBazServiceRetrieve.test_returns_baz_when_valid_json": {
            "name": "test_returns_baz_when_valid_json",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestBazServiceRetrieve.test_raise_ioerror_when_status_not_ok": {
            "name": "test_raise_ioerror_when_status_not_ok",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestBazServiceRetrieve.test_raises_ioerror_when_data_is_bad": {
            "name": "test_raises_ioerror_when_data_is_bad",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestBazServiceRetrieve.test_raises_ioerror_when_data_is_bad.raise_decoderror": {
            "name": "raise_decoderror",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-zero-master/zero/services/tests/__init__.py": {},
    "arxiv-zero-master/zero/services/things/models.py": {},
    "arxiv-zero-master/zero/services/things/tests.py": {
        "TestThingGetter.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingGetter.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingGetter.test_get_a_thing_that_exists": {
            "name": "test_get_a_thing_that_exists",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingGetter.test_get_a_thing_that_doesnt_exist": {
            "name": "test_get_a_thing_that_doesnt_exist",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingGetter.test_get_thing_when_db_is_unavailable": {
            "name": "test_get_thing_when_db_is_unavailable",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "mock.Mock"
                ]
            }
        },
        "TestThingCreator.setUp": {
            "name": "setUp",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingCreator.tearDown": {
            "name": "tearDown",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingCreator.test_store_a_thing": {
            "name": "test_store_a_thing",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingUpdater.setUp": {
            "name": "setUp",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingUpdater.tearDown": {
            "name": "tearDown",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingUpdater.test_update_a_thing": {
            "name": "test_update_a_thing",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingUpdater.test_operationalerror_is_handled": {
            "name": "test_operationalerror_is_handled",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestThingUpdater.test_thing_really_does_not_exist": {
            "name": "test_thing_really_does_not_exist",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThingUpdater.test_thing_does_not_exist": {
            "name": "test_thing_does_not_exist",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestThingGetter.test_get_thing_when_db_is_unavailable.raise_op_error": {
            "name": "raise_op_error",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestThingUpdater.test_operationalerror_is_handled.raise_op_error": {
            "name": "raise_op_error",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-zero-master/zero/services/things/__init__.py": {
        "transaction": {
            "name": "transaction",
            "location": 21,
            "return": [
                "typing.Generator",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "init_app": {
            "name": "init_app",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "create_all": {
            "name": "create_all",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_a_thing": {
            "name": "get_a_thing",
            "location": 61,
            "return": [
                "zero.domain.things.Thing"
            ],
            "arguments": {
                "thing_id": [
                    "int"
                ]
            }
        },
        "store_a_thing": {
            "name": "store_a_thing",
            "location": 96,
            "return": [
                "zero.domain.things.Thing"
            ],
            "arguments": {
                "the_thing": [
                    "zero.domain.things.Thing"
                ]
            }
        },
        "update_a_thing": {
            "name": "update_a_thing",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "the_thing": [
                    "zero.domain.things.Thing"
                ]
            }
        }
    },
    "arxiv-zero-master/zero/tests/test_tasks.py": {
        "TestMutateAThing.test_mutate": {
            "name": "test_mutate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_things": [],
                "mock_mutate": []
            }
        },
        "TestMutateAThing.test_raises_ioerror": {
            "name": "test_raises_ioerror",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_things": [
                    "mock.MagicMock"
                ],
                "mock_mutate": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestCheckTaskStatus.test_task_id_is_not_a_string": {
            "name": "test_task_id_is_not_a_string",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckTaskStatus.test_result_returned_on_success": {
            "name": "test_result_returned_on_success",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_AsyncResult": [
                    "mock.Mock"
                ]
            }
        },
        "TestCheckTaskStatus.test_result_returned_on_fail": {
            "name": "test_result_returned_on_fail",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_AsyncResult": [
                    "mock.Mock"
                ]
            }
        },
        "TestCheckTaskStatus.test_result_none_when_pending": {
            "name": "test_result_none_when_pending",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_AsyncResult": []
            }
        }
    },
    "arxiv-zero-master/zero/tests/__init__.py": {}
}
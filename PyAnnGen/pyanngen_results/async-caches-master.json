{
    "async-caches-master/setup.py": {},
    "async-caches-master/caches/core.py": {
        "Cache.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Union[Mapping[str,Any],str]",
                    "Mapping",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "Cache.make_key": {
            "name": "make_key",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[str,dict]",
                    "Dict"
                ],
                "version": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str,dict]",
                    "Dict"
                ]
            }
        },
        "Cache.make_ttl": {
            "name": "make_ttl",
            "location": 106,
            "return": [
                "Tuple[Union[int,int]]",
                "str",
                "float",
                "Optional[str]",
                "int",
                "Optional[List[Any]]",
                "None",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "ttl": [
                    "Optional[Tuple[int,int]]",
                    "None",
                    "float",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Optional[int]"
                ]
            }
        },
        "CacheURL.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "CacheURL.components": {
            "name": "components",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.backend": {
            "name": "backend",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.hostname": {
            "name": "hostname",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.port": {
            "name": "port",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.netloc": {
            "name": "netloc",
            "location": 270,
            "return": [
                "None",
                "str",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.database": {
            "name": "database",
            "location": 274,
            "return": [
                "None",
                "str",
                "litprog.parse.MarkdownFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.options": {
            "name": "options",
            "location": 281,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]",
                "Set[starfish.core.types.Axes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.__str__": {
            "name": "__str__",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheURL.__eq__": {
            "name": "__eq__",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Tuple[Union[float,float,float]]",
                    "Tuple[float,float,float]",
                    "T"
                ]
            }
        }
    },
    "async-caches-master/caches/importer.py": {
        "import_from_string": {
            "name": "import_from_string",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "import_str": [
                    "str"
                ]
            }
        }
    },
    "async-caches-master/caches/types.py": {},
    "async-caches-master/caches/__init__.py": {},
    "async-caches-master/caches/backends/base.py": {
        "BaseBackend.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_url": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "BaseBackend._serialize": {
            "name": "_serialize",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List",
                    "Dict"
                ]
            }
        },
        "BaseBackend._deserialize": {
            "name": "_deserialize",
            "location": 87,
            "return": [
                "int",
                "List[int]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "async-caches-master/caches/backends/dummy.py": {},
    "async-caches-master/caches/backends/locmem.py": {},
    "async-caches-master/caches/backends/redis.py": {
        "RedisBackend.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_url": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "RedisBackend._get_connection_kwargs": {
            "name": "_get_connection_kwargs",
            "location": 20,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "async-caches-master/caches/backends/__init__.py": {},
    "async-caches-master/tests/modulewithexception.py": {},
    "async-caches-master/tests/test_cache.py": {
        "cache": {
            "name": "cache",
            "location": 7,
            "return": [
                "Cache",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_cache_created_key_includes_app_key": {
            "name": "test_cache_created_key_includes_app_key",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "str"
                ]
            }
        },
        "test_cache_created_key_includes_prefix": {
            "name": "test_cache_created_key_includes_prefix",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_created_key_includes_default_version": {
            "name": "test_cache_created_key_includes_default_version",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_key_default_version_can_be_overridded": {
            "name": "test_cache_key_default_version_can_be_overridded",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_created_key_includes_prefix_and_version": {
            "name": "test_cache_created_key_includes_prefix_and_version",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_key_prefix_can_be_set_in_url": {
            "name": "test_cache_key_prefix_can_be_set_in_url",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_key_prefix_kwarg_overrides_key_prefix_be_set_in_url": {
            "name": "test_cache_key_prefix_kwarg_overrides_key_prefix_be_set_in_url",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_version_can_be_set_in_url": {
            "name": "test_cache_version_can_be_set_in_url",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_version_kwarg_overrides_version_set_in_url": {
            "name": "test_cache_version_kwarg_overrides_version_set_in_url",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_ttl_defaults_to_none": {
            "name": "test_cache_ttl_defaults_to_none",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_ttl_can_be_set_per_key": {
            "name": "test_cache_ttl_can_be_set_per_key",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "bool"
                ]
            }
        },
        "test_cache_can_be_set_default_ttl": {
            "name": "test_cache_can_be_set_default_ttl",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_can_be_set_default_ttl_in_url": {
            "name": "test_cache_can_be_set_default_ttl_in_url",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_default_ttl_can_be_overrided_per_key": {
            "name": "test_cache_default_ttl_can_be_overrided_per_key",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_errors_if_ttl_option_is_set_to_0": {
            "name": "test_cache_errors_if_ttl_option_is_set_to_0",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_errors_if_ttl_option_in_url_is_set_to_0": {
            "name": "test_cache_errors_if_ttl_option_in_url_is_set_to_0",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_errors_if_key_ttl_is_set_to_0": {
            "name": "test_cache_errors_if_key_ttl_is_set_to_0",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/test_cache_url.py": {
        "test_backend_is_taken_from_url_protocol": {
            "name": "test_backend_is_taken_from_url_protocol",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hostname_is_taken_from_url": {
            "name": "test_hostname_is_taken_from_url",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_none_is_returned_for_hostname_if_its_not_set": {
            "name": "test_none_is_returned_for_hostname_if_its_not_set",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_port_is_taken_from_url": {
            "name": "test_port_is_taken_from_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_none_is_returned_for_port_if_its_not_set": {
            "name": "test_none_is_returned_for_port_if_its_not_set",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_netloc_is_taken_from_url": {
            "name": "test_netloc_is_taken_from_url",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_none_is_returned_for_netloc_if_its_not_set": {
            "name": "test_none_is_returned_for_netloc_if_its_not_set",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_database_is_taken_from_url": {
            "name": "test_database_is_taken_from_url",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_none_is_returned_for_database_if_its_not_set": {
            "name": "test_none_is_returned_for_database_if_its_not_set",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_options_are_taken_from_url_querystring": {
            "name": "test_options_are_taken_from_url_querystring",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_options_are_empty_dict_if_url_has_no_querystring": {
            "name": "test_options_are_empty_dict_if_url_has_no_querystring",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_obj_can_be_converted_back_to_str": {
            "name": "test_url_obj_can_be_converted_back_to_str",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_obj_has_repr": {
            "name": "test_url_obj_has_repr",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_obj_can_be_compared_to_str": {
            "name": "test_url_obj_can_be_compared_to_str",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_obj_can_be_compared_to_other_url_obj": {
            "name": "test_url_obj_can_be_compared_to_other_url_obj",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/test_importer.py": {
        "test_importer_imports_specified_class": {
            "name": "test_importer_imports_specified_class",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_importer_raises_error_is_module_path_is_missing": {
            "name": "test_importer_raises_error_is_module_path_is_missing",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_importer_raises_error_is_attribute_is_missing": {
            "name": "test_importer_raises_error_is_attribute_is_missing",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_importer_raises_error_is_module_cant_be_imported": {
            "name": "test_importer_raises_error_is_module_cant_be_imported",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_importer_raises_error_is_attribute_cant_be_imported": {
            "name": "test_importer_raises_error_is_attribute_cant_be_imported",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_importer_reraises_child_modules_import_errors": {
            "name": "test_importer_reraises_child_modules_import_errors",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/__init__.py": {},
    "async-caches-master/tests/dummy/conftest.py": {},
    "async-caches-master/tests/dummy/test_impl.py": {
        "test_key_get_or_set_callable_default_is_called.default": {
            "name": "default",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/dummy/test_initialization.py": {
        "test_dummy_cache_can_be_initialized_without_net_loc": {
            "name": "test_dummy_cache_can_be_initialized_without_net_loc",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dummy_cache_can_be_initialized_with_net_loc": {
            "name": "test_dummy_cache_can_be_initialized_with_net_loc",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dummy_cache_can_be_initialized_with_key_prefix": {
            "name": "test_dummy_cache_can_be_initialized_with_key_prefix",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dummy_cache_can_be_initialized_with_ttl": {
            "name": "test_dummy_cache_can_be_initialized_with_ttl",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dummy_cache_can_be_initialized_with_version": {
            "name": "test_dummy_cache_can_be_initialized_with_version",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/dummy/__init__.py": {},
    "async-caches-master/tests/locmem/conftest.py": {},
    "async-caches-master/tests/locmem/test_impl.py": {
        "test_key_get_or_set_callable_default_is_called.default": {
            "name": "default",
            "location": 135,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/locmem/test_initialization.py": {
        "test_locmem_cache_can_be_initialized_without_net_loc": {
            "name": "test_locmem_cache_can_be_initialized_without_net_loc",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_locmem_cache_can_be_initialized_with_net_loc": {
            "name": "test_locmem_cache_can_be_initialized_with_net_loc",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_locmem_cache_can_be_initialized_with_key_prefix": {
            "name": "test_locmem_cache_can_be_initialized_with_key_prefix",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_locmem_cache_can_be_initialized_with_ttl": {
            "name": "test_locmem_cache_can_be_initialized_with_ttl",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_locmem_cache_can_be_initialized_with_version": {
            "name": "test_locmem_cache_can_be_initialized_with_version",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/locmem/__init__.py": {},
    "async-caches-master/tests/redis/conftest.py": {},
    "async-caches-master/tests/redis/test_impl.py": {
        "test_key_get_or_set_callable_default_is_called.default": {
            "name": "default",
            "location": 135,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "async-caches-master/tests/redis/test_initialization.py": {},
    "async-caches-master/tests/redis/__init__.py": {}
}
{
    "async-python-schema-registry-client-master/setup.py": {},
    "async-python-schema-registry-client-master/schema_registry/__init__.py": {},
    "async-python-schema-registry-client-master/schema_registry/client/client.py": {
        "SchemaRegistryClient.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(dict, str)]"
                ],
                "ca_location": [
                    "str"
                ],
                "cert_location": [
                    "str"
                ],
                "key_location": [
                    "str"
                ],
                "key_password": [
                    "str"
                ],
                "extra_headers": [
                    "dict"
                ]
            }
        },
        "SchemaRegistryClient._create_session": {
            "name": "_create_session",
            "location": 67,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaRegistryClient._configure_basic_auth": {
            "name": "_configure_basic_auth",
            "location": 81,
            "return": [
                "Optional[Union[(str, Tuple[(str, str)])]]"
            ],
            "arguments": {
                "conf": [
                    "dict"
                ]
            }
        },
        "SchemaRegistryClient._configure_client_tls": {
            "name": "_configure_client_tls",
            "location": 103,
            "return": [
                "Optional[Union[(str, Tuple[(str, ...)])]]"
            ],
            "arguments": {
                "conf": [
                    "dict"
                ]
            }
        },
        "SchemaRegistryClient.prepare_headers": {
            "name": "prepare_headers",
            "location": 120,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ]
            }
        },
        "SchemaRegistryClient._add_to_cache": {
            "name": "_add_to_cache",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": [
                    "dict"
                ],
                "subject": [
                    "str"
                ],
                "schema": [
                    "schema_registry.client.schema.AvroSchema"
                ],
                "value": [
                    "Union[(int, str)]"
                ]
            }
        },
        "SchemaRegistryClient._cache_schema": {
            "name": "_cache_schema",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "schema_registry.client.schema.AvroSchema"
                ],
                "schema_id": [
                    "int"
                ],
                "subject": [
                    "str"
                ],
                "version": [
                    "Union[(int, str)]"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/client/errors.py": {
        "ClientError.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "http_code": [
                    "int"
                ],
                "server_traceback": [
                    "str"
                ]
            }
        },
        "ClientError.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientError.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/client/paths.py": {},
    "async-python-schema-registry-client-master/schema_registry/client/schema.py": {
        "AvroSchema.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ]
            }
        },
        "AvroSchema.generate_hash": {
            "name": "generate_hash",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.name": {
            "name": "name",
            "location": 19,
            "return": [
                "Optional[BaseException]",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.__hash__": {
            "name": "__hash__",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchema.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int, int]",
                    "Any"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/client/status.py": {
        "is_informational": {
            "name": "is_informational",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_success": {
            "name": "is_success",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_redirect": {
            "name": "is_redirect",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_client_error": {
            "name": "is_client_error",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "is_server_error": {
            "name": "is_server_error",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/client/urls.py": {
        "UrlManager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "paths": [
                    "list"
                ]
            }
        },
        "UrlManager.url": {
            "name": "url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlManager.url_for": {
            "name": "url_for",
            "location": 25,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "dict"
                ]
            }
        },
        "Path.name": {
            "name": "name",
            "location": 42,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.generate_url": {
            "name": "generate_url",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/client/utils.py": {},
    "async-python-schema-registry-client-master/schema_registry/client/__init__.py": {},
    "async-python-schema-registry-client-master/schema_registry/serializers/errors.py": {
        "SerializerError.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "SerializerError.__init__.__repr__": {
            "name": "__repr__",
            "location": 7,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializerError.__init__.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/serializers/message_serializer.py": {
        "ContextStringIO.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "ContextStringIO"
            ],
            "arguments": {
                "self": [
                    "_TContextStringIO"
                ]
            }
        },
        "ContextStringIO.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSerializer.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schemaregistry_client": [
                    "schema_registry.client.client.SchemaRegistryClient"
                ],
                "reader_key_schema": [
                    "Optional[schema.AvroSchema]"
                ],
                "reader_value_schema": [
                    "Optional[schema.AvroSchema]"
                ]
            }
        },
        "MessageSerializer._get_encoder_func": {
            "name": "_get_encoder_func",
            "location": 53,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "avro_schema": [
                    "schema.AvroSchema"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/schema_registry/serializers/__init__.py": {},
    "async-python-schema-registry-client-master/tests/conftest.py": {
        "async_mock": {
            "name": "async_mock",
            "location": 84,
            "return": [
                "Dict[str, Sequence[str]]",
                "AsyncMock"
            ],
            "arguments": {}
        },
        "response_klass": {
            "name": "response_klass",
            "location": 89,
            "return": [
                "Response",
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {}
        },
        "certificates": {
            "name": "certificates",
            "location": 94,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "TextIO",
                "BinaryIO",
                "List[int]"
            ],
            "arguments": {}
        },
        "schemas": {
            "name": "schemas",
            "location": 129,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,list[typing.Text],list[typing.Union[dict[typing.Text, typing.Union[typing.Text,list[typing.Text],int]],dict[typing.Text, typing.Union[typing.Text,list[typing.Text],None]]]]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "deployment_schema": {
            "name": "deployment_schema",
            "location": 134,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "Callable",
                "dict"
            ],
            "arguments": {}
        },
        "country_schema": {
            "name": "country_schema",
            "location": 139,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "Callable",
                "dict"
            ],
            "arguments": {}
        },
        "user_schema_v3": {
            "name": "user_schema_v3",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "message_serializer": {
            "name": "message_serializer",
            "location": 162,
            "return": [
                "MessageSerializer",
                "int",
                "List[str]",
                "str",
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "content": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Response.json": {
            "name": "json",
            "location": 53,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMock.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "func": [
                    "bool",
                    "Mapping",
                    "typing.Mapping"
                ],
                "returned_value": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AsyncMock.__enter__": {
            "name": "__enter__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMock.__exit__": {
            "name": "__exit__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exception_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[BaseException]",
                    "None",
                    "Optional[Type[BaseException]]",
                    "BaseException",
                    "Optional[Exception]",
                    "typing.Type",
                    "Exception"
                ]
            }
        },
        "AsyncMock.assert_called_with": {
            "name": "assert_called_with",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "async-python-schema-registry-client-master/tests/data_gen.py": {
        "get_schema_path": {
            "name": "get_schema_path",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "load_schema_file": {
            "name": "load_schema_file",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "create_basic_item": {
            "name": "create_basic_item",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "None",
                    "slice",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "create_adv_item": {
            "name": "create_adv_item",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Optional[BaseException]",
                    "BaseException",
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "create_logical_item": {
            "name": "create_logical_item",
            "location": 37,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "str",
                    "list[str]",
                    "list[]",
                    "IO[str]",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/tests/__init__.py": {},
    "async-python-schema-registry-client-master/tests/client/test_http_client.py": {
        "test_invalid_cert": {
            "name": "test_invalid_cert",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cert_with_key": {
            "name": "test_cert_with_key",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "certificates": []
            }
        },
        "test_custom_headers": {
            "name": "test_custom_headers",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cert_path": {
            "name": "test_cert_path",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_with_dict": {
            "name": "test_init_with_dict",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "certificates": []
            }
        },
        "test_empty_url": {
            "name": "test_empty_url",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_type_url": {
            "name": "test_invalid_type_url",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_type_url_dict": {
            "name": "test_invalid_type_url_dict",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_url": {
            "name": "test_basic_auth_url",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_userinfo": {
            "name": "test_basic_auth_userinfo",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_sasl_inherit": {
            "name": "test_basic_auth_sasl_inherit",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_auth_invalid": {
            "name": "test_basic_auth_invalid",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-python-schema-registry-client-master/tests/client/test_schema.py": {
        "test_schema_from_string": {
            "name": "test_schema_from_string",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "async-python-schema-registry-client-master/tests/client/test_schema_compatibility.py": {},
    "async-python-schema-registry-client-master/tests/client/test_schema_delete.py": {},
    "async-python-schema-registry-client-master/tests/client/test_schema_getters.py": {},
    "async-python-schema-registry-client-master/tests/client/test_schema_registration.py": {
        "assertLatest": {
            "name": "assertLatest",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_tuple": [
                    "List[List[int]]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "list",
                    "int",
                    "Dict[str, List[Any]]"
                ],
                "sid": [
                    "int",
                    "list"
                ],
                "schema": [
                    "Union[str, bool, None]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[Tuple[Any, Any]]",
                    "List[int]",
                    "List[List[int]]"
                ],
                "version": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/tests/client/test_schema_version.py": {},
    "async-python-schema-registry-client-master/tests/client/test_urls.py": {
        "test_fail_url_manager_creation": {
            "name": "test_fail_url_manager_creation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_with_path": {
            "name": "test_url_with_path",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ]
            }
        },
        "test_urls_generation": {
            "name": "test_urls_generation",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_paths": {
            "name": "test_client_paths",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ]
            }
        }
    },
    "async-python-schema-registry-client-master/tests/client/__init__.py": {},
    "async-python-schema-registry-client-master/tests/serializer/test_message_serializer.py": {},
    "async-python-schema-registry-client-master/tests/serializer/__init__.py": {}
}
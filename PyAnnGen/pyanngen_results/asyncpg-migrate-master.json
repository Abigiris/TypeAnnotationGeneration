{
    "asyncpg-migrate-master/setup.py": {},
    "asyncpg-migrate-master/asyncpg_migrate/constants.py": {},
    "asyncpg-migrate-master/asyncpg_migrate/exceptions.py": {},
    "asyncpg-migrate-master/asyncpg_migrate/loader.py": {
        "load_configuration": {
            "name": "load_configuration",
            "location": 15,
            "return": [
                "model.Config"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ]
            }
        },
        "load_migrations": {
            "name": "load_migrations",
            "location": 46,
            "return": [
                "model.Migrations"
            ],
            "arguments": {
                "config": [
                    "model.Config"
                ]
            }
        },
        "load_python_module": {
            "name": "load_python_module",
            "location": 101,
            "return": [
                "module"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "asyncpg-migrate-master/asyncpg_migrate/main.py": {
        "db": {
            "name": "db",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "str"
                ],
                "config": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "None",
                    "Optional[int]",
                    "click.Context"
                ],
                "verbose": [
                    "int",
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[int]",
                    "click.Context"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade_cmd": {
            "name": "upgrade_cmd",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context"
                ],
                "revision": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "downgrade_cmd": {
            "name": "downgrade_cmd",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context"
                ],
                "revision": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "revision_cmd": {
            "name": "revision_cmd",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "history": {
            "name": "history",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "async_run": {
            "name": "async_run",
            "location": 26,
            "return": [
                "_T"
            ],
            "arguments": {
                "coro": [
                    "Awaitable[_T]"
                ]
            }
        }
    },
    "asyncpg-migrate-master/asyncpg_migrate/model.py": {
        "Revision.decode": {
            "name": "decode",
            "location": 23,
            "return": [
                "Revision"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRevision]"
                ],
                "rev": [
                    "Union[(int, str, _TRevision)]"
                ],
                "all_revisions": [
                    "Sequence[_TRevision]"
                ]
            }
        },
        "Migrations.slice": {
            "name": "slice",
            "location": 60,
            "return": [
                "Migrations"
            ],
            "arguments": {
                "self": [
                    "_TMigrations"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "Optional[int]"
                ]
            }
        },
        "Migrations.upgrade_iterator": {
            "name": "upgrade_iterator",
            "location": 78,
            "return": [
                "Iterator[Migration]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migrations.downgrade_iterator": {
            "name": "downgrade_iterator",
            "location": 81,
            "return": [
                "Iterator[Migration]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migrations.revisions": {
            "name": "revisions",
            "location": 84,
            "return": [
                "Sequence[Revision]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "asyncpg-migrate-master/asyncpg_migrate/__init__.py": {},
    "asyncpg-migrate-master/asyncpg_migrate/engine/downgrade.py": {},
    "asyncpg-migrate-master/asyncpg_migrate/engine/migration.py": {
        "error_trap": {
            "name": "error_trap",
            "location": 25,
            "return": [
                "Callable[(..., Coroutine[(Any, Any, MT)])]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., Coroutine[(Any, Any, MT)])]"
                ]
            }
        }
    },
    "asyncpg-migrate-master/asyncpg_migrate/engine/upgrade.py": {},
    "asyncpg-migrate-master/asyncpg_migrate/engine/__init__.py": {},
    "asyncpg-migrate-master/tests/__init__.py": {},
    "asyncpg-migrate-master/tests/integration/conftest.py": {
        "db_name": {
            "name": "db_name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "db_dsn": {
            "name": "db_dsn",
            "location": 17,
            "return": [
                "typing.Text",
                "str",
                "Union[int, str]"
            ],
            "arguments": {
                "db_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "migration_config": {
            "name": "migration_config",
            "location": 53,
            "return": [
                "tuple[]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "db_name": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]",
                    "int"
                ],
                "db_dsn": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]",
                    "int"
                ],
                "tmp_path_factory": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "int"
                ],
                "request": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        }
    },
    "asyncpg-migrate-master/tests/integration/test_dummy.py": {
        "test_dummy": {
            "name": "test_dummy",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "asyncpg-migrate-master/tests/integration/test_engine_downgrade.py": {},
    "asyncpg-migrate-master/tests/integration/test_engine_migrations.py": {},
    "asyncpg-migrate-master/tests/integration/test_engine_upgrade.py": {},
    "asyncpg-migrate-master/tests/integration/__init__.py": {},
    "asyncpg-migrate-master/tests/unit/conftest.py": {
        "config_env": {
            "name": "config_env",
            "location": 17,
            "return": [
                "tuple[typing.Union[Path,asyncpg_migrate.model.Config,int,list[int],dict[typing.Text, typing.Text]]]",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "str",
                    "MutableMapping[domain.Identifier, datetime.date]",
                    "Mapping",
                    "Optional[int]"
                ],
                "request": [
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "pathlib.Path"
                ],
                "config_with_migrations": [
                    "tuple[typing.Union[pathlib.Path,asyncpg_migrate.model.Config,int]]",
                    "bytes",
                    "Tuple[pathlib.Path, asyncpg_migrate.model.Config, int]",
                    "int",
                    "str",
                    "list[list[int]]",
                    "List[List[int]]",
                    "bool"
                ]
            }
        },
        "config_with_migrations": {
            "name": "config_with_migrations",
            "location": 60,
            "return": [
                "bool",
                "tuple[typing.Union[Path,int]]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ],
                "mocker": [
                    "pytest_mock.MockFixture",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "request": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping"
                ]
            }
        }
    },
    "asyncpg-migrate-master/tests/unit/test_cli.py": {
        "test_version": {
            "name": "test_version",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "list[str]",
                    "str",
                    "click.testing.CliRunner",
                    "List[str]"
                ]
            }
        },
        "test_db_help": {
            "name": "test_db_help",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_db_verbosity": {
            "name": "test_db_verbosity",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "list[str]",
                    "str",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "mocker": [
                    "pytest_mock.MockFixture",
                    "str",
                    "bool"
                ],
                "invoke_arg": [
                    "list[str]",
                    "str",
                    "click.testing.CliRunner",
                    "List[str]"
                ]
            }
        },
        "test_db_upgrade": {
            "name": "test_db_upgrade",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "list[str]",
                    "str",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "mocker": [
                    "flask.testing.FlaskClient"
                ],
                "revision": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_db_downgrade": {
            "name": "test_db_downgrade",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "list[str]",
                    "str",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "mocker": [
                    "flask.testing.FlaskClient"
                ],
                "revision": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_db_revision": {
            "name": "test_db_revision",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner",
                    "list[str]",
                    "List[str]"
                ],
                "mocker": [
                    "pytest_mock.MockFixture"
                ],
                "return_revision": [
                    "Optional[int]",
                    "int",
                    "Optional[\"Game\"]",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ]
            }
        },
        "test_db_history": {
            "name": "test_db_history",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_runner": [
                    "list[str]",
                    "str",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "mocker": [
                    "pytest_mock.MockFixture",
                    "int"
                ],
                "entries_count": [
                    "int",
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "test_db_verbosity.test": {
            "name": "test",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "asyncpg-migrate-master/tests/unit/test_configuration.py": {
        "test_load_configuration_env": {
            "name": "test_load_configuration_env",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "config_env": [
                    "Tuple[(pathlib.Path, pathlib.Path, Dict[(str, str)])]"
                ],
                "mocker": [
                    "str",
                    "pytest_mock.MockFixture",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_load_migrations": {
            "name": "test_load_migrations",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "config_with_migrations": [
                    "Tuple[(pathlib.Path, model.Config, int)]"
                ]
            }
        }
    },
    "asyncpg-migrate-master/tests/unit/test_constant.py": {
        "test_migration_table_location": {
            "name": "test_migration_table_location",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "asyncpg-migrate-master/tests/unit/test_dummy.py": {
        "test_dummy": {
            "name": "test_dummy",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "asyncpg-migrate-master/tests/unit/test_revision.py": {
        "test_revision_decoding": {
            "name": "test_revision_decoding",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "test_revision": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "asyncpg_migrate.model.Migration"
                ],
                "expected_revision": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "all_revisions": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "asyncpg_migrate.model.Migration"
                ]
            }
        }
    },
    "asyncpg-migrate-master/tests/unit/__init__.py": {}
}
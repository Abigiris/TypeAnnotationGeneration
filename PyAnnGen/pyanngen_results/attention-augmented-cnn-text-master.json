{
    "attention-augmented-cnn-text-master/my_library/__init__.py": {},
    "attention-augmented-cnn-text-master/my_library/dataset_readers/review_dataset_readers.py": {
        "ReviewDatasetReader.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "None",
                    "List[List[int]]",
                    "List[float]",
                    "list[list[int]]",
                    "list[float]"
                ],
                "token_indexers": [
                    "int",
                    "None",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "List[str]",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "bool",
                    "list[str]",
                    "List[Exception]",
                    "list[Exception]"
                ],
                "padding_length": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "Dict[str, int]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "dict[str, int]",
                    "List[List[Any]]",
                    "list[str]",
                    "list[list[typing.Any]]"
                ],
                "char_level": [
                    "bool",
                    "int",
                    "List[List[int]]",
                    "List[float]"
                ]
            }
        },
        "ReviewDatasetReader._read": {
            "name": "_read",
            "location": 63,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "ReviewDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 81,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "target": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.Type",
                    "Union[str, None]",
                    "type"
                ]
            }
        }
    },
    "attention-augmented-cnn-text-master/my_library/dataset_readers/__init__.py": {},
    "attention-augmented-cnn-text-master/my_library/encoders/attention_cnn.py": {
        "AttnCnnEncoder.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_dim": [],
                "num_filters": [],
                "ngram_filter_sizes": [],
                "conv_layer_activation": [
                    "None"
                ],
                "output_dim": [
                    "None"
                ],
                "use_self_attention": [
                    "bool"
                ],
                "n_attention_heads": [
                    "int"
                ],
                "sequence_length": [
                    "int"
                ]
            }
        },
        "AttnCnnEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttnCnnEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttnCnnEncoder.forward": {
            "name": "forward",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "mask": []
            }
        }
    },
    "attention-augmented-cnn-text-master/my_library/encoders/__init__.py": {},
    "attention-augmented-cnn-text-master/my_library/models/sentence_classifier.py": {
        "SentenceClassifier.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "allennlp.data.Vocabulary",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str",
                    "Callable[..., Awaitable]",
                    "float",
                    "Optional[float]",
                    "None",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ],
                "text_field_embedder": [
                    "int",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "sentence_encoder": [
                    "int",
                    "allennlp.modules.FeedForward",
                    "Optional[int]",
                    "allennlp.modules.Seq2SeqEncoder"
                ],
                "classifier_feedforward": [
                    "bool",
                    "int",
                    "tuple[]",
                    "tuple",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "bool",
                    "int",
                    "tuple",
                    "Optional[float]"
                ],
                "regularizer": [
                    "str",
                    "None",
                    "bool",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Sequence[str]",
                    "Type[Any]",
                    "typing.Sequence[str]",
                    "Optional[Type[Any]]",
                    "typing.Type"
                ],
                "pretrained_archive": [
                    "bool",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "SentenceClassifier._initialize_weights_from_archive": {
            "name": "_initialize_weights_from_archive",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "archive": [
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "lingAny_api.models.word.Word"
                ]
            }
        },
        "SentenceClassifier._get_vocab_index_mapping": {
            "name": "_get_vocab_index_mapping",
            "location": 98,
            "return": [
                "list[tuple[]]",
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "Dict[str, numpy.ndarray]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "archived_vocab": [
                    "bool",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ]
            }
        },
        "SentenceClassifier.forward": {
            "name": "forward",
            "location": 112,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None",
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]"
                ],
                "label": [
                    "None",
                    "str",
                    "Union[str, int]",
                    "Optional[List[\"Address\"]]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "SentenceClassifier.decode": {
            "name": "decode",
            "location": 152,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "str",
                    "Dict[str, torch.Tensor]",
                    "dict"
                ]
            }
        },
        "SentenceClassifier.get_metrics": {
            "name": "get_metrics",
            "location": 168,
            "return": [
                "dict[, ]",
                "bool",
                "dict",
                "Dict[str, Any]",
                "int",
                "multinedb.models.workspace.Workspace"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "attention-augmented-cnn-text-master/my_library/models/__init__.py": {},
    "attention-augmented-cnn-text-master/my_library/predictors/paper_classifier_predictor.py": {
        "PaperClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list[str]",
                    "thonny.common.CommandToBackend",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PaperClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 21,
            "return": [
                "Iterable[int]",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "allennlp.common.util.JsonDict",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "attention-augmented-cnn-text-master/my_library/predictors/__init__.py": {},
    "attention-augmented-cnn-text-master/my_library/utils/self_attn_utils.py": {
        "clones": {
            "name": "clones",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "Sized",
                    "typing.Sized"
                ],
                "N": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "Sized",
                    "typing.Sized"
                ]
            }
        },
        "attention": {
            "name": "attention",
            "location": 13,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "query": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "Union[Dict, None]"
                ],
                "key": [
                    "dict",
                    "str",
                    "int",
                    "Type['Declared']"
                ],
                "value": [
                    "bool",
                    "None",
                    "int",
                    "Optional[numpy.ndarray]"
                ],
                "mask": [
                    "Optional['Archive']",
                    "bytes",
                    "None"
                ],
                "dropout": [
                    "Union[str, dict]",
                    "None",
                    "int",
                    "torch.LongTensor",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "MultiHeadedAttention.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "int",
                    "Type[T]",
                    "torch.nn.Module",
                    "str"
                ],
                "d_model": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, str]",
                    "str",
                    "bool",
                    "torch.nn.Module"
                ],
                "dropout": [
                    "float",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "MultiHeadedAttention.forward": {
            "name": "forward",
            "location": 37,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict[str, Any]",
                    "str"
                ],
                "key": [
                    "str",
                    "\"PMap[Tk, Tv]\"",
                    "list[]",
                    "list"
                ],
                "value": [
                    "str",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "T"
                ],
                "mask": [
                    "None",
                    "Optional[str]",
                    "Optional[object]",
                    "Union[None, str]"
                ]
            }
        },
        "PositionalEncoding.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "dropout": [
                    "float",
                    "int"
                ],
                "max_len": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PositionalEncoding.forward": {
            "name": "forward",
            "location": 75,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "Tuple[int]",
                    "Union[int, float]"
                ]
            }
        }
    },
    "attention-augmented-cnn-text-master/my_library/utils/__init__.py": {},
    "attention-augmented-cnn-text-master/tests/test.py": {}
}
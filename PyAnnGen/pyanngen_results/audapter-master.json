{
    "audapter-master/setup.py": {},
    "audapter-master/audapter/__init__.py": {},
    "audapter-master/audapter/__main__.py": {},
    "audapter-master/audapter/command/config.py": {
        "config": {
            "name": "config",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "restore": [
                    "bool"
                ]
            }
        }
    },
    "audapter-master/audapter/command/info.py": {
        "info": {
            "name": "info",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "audapter-master/audapter/command/run.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run.callback_with_applying": {
            "name": "callback_with_applying",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "indata": [
                    "str",
                    "Dict[str, Any]"
                ],
                "outdata": [
                    "str",
                    "Dict[str, Any]"
                ],
                "frames": [
                    "Type['Signature']",
                    "bool",
                    "FrozenSet[int]",
                    "List[str]",
                    "float"
                ],
                "time": [
                    "Type['Signature']",
                    "bool",
                    "FrozenSet[int]",
                    "List[str]",
                    "float"
                ],
                "status": [
                    "Type['Signature']",
                    "bool",
                    "FrozenSet[int]",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "audapter-master/audapter/command/__init__.py": {},
    "audapter-master/audapter/domain/freq.py": {
        "get_filter": {
            "name": "get_filter",
            "location": 61,
            "return": [
                "Type[FilterModel]"
            ],
            "arguments": {}
        },
        "FilterModel.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "float"
                ],
                "blocksize": [
                    "\"ComplexNumber\"",
                    "Optional[Union[Any, Any]]",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "mu": [
                    "int",
                    "bool",
                    "List[str]",
                    "Union[int, Tuple[int, int]]"
                ],
                "w_init": [
                    "typing.Text",
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ],
                "domain": [
                    "typing.Text",
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ],
                "w_len": [
                    "int",
                    "bool",
                    "List[str]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "FilterModel.adopt": {
            "name": "adopt",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int",
                    "float"
                ],
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "float",
                    "Awaitable[T]",
                    "str",
                    "collections.abc.Awaitable[T]",
                    "int"
                ]
            }
        },
        "FilterModel.update": {
            "name": "update",
            "location": 56,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "List[int]",
                    "int",
                    "list[int]"
                ],
                "x": [
                    "List[int]",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "audapter-master/audapter/domain/model.py": {},
    "audapter-master/audapter/domain/time.py": {
        "get_filter": {
            "name": "get_filter",
            "location": 4,
            "return": [
                "str",
                "List[List[int]]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "audapter-master/audapter/domain/__init__.py": {},
    "audapter-master/audapter/driver/filter.py": {
        "apply_filter": {
            "name": "apply_filter",
            "location": 32,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "w": [
                    "float"
                ],
                "x": [
                    "float"
                ],
                "domain": [
                    "str"
                ],
                "stftobj": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "FilterDriver.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FilterDriver.run": {
            "name": "run",
            "location": 25,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "desired": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "data_in": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "FilterDriver.get_filter_weights": {
            "name": "get_filter_weights",
            "location": 28,
            "return": [
                "str",
                "bool",
                "model.Integration",
                "Callable[..., None]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audapter-master/audapter/driver/sound.py": {
        "setup_sounddevice": {
            "name": "setup_sounddevice",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "callback_for_test": {
            "name": "callback_for_test",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "indata": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "outdata": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "frames": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[]",
                    "set[str]",
                    "list",
                    "Set[str]"
                ],
                "time": [
                    "int",
                    "str",
                    "bytes",
                    "lib.model.contenContentID"
                ],
                "status": [
                    "int",
                    "str",
                    "bytes",
                    "lib.model.contenContentID"
                ]
            }
        },
        "pass_thru": {
            "name": "pass_thru",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "repeat": [
                    "int",
                    "str"
                ],
                "duration": [
                    "int",
                    "str"
                ],
                "system": [
                    "str",
                    "BinaryIO",
                    "int"
                ],
                "target": [
                    "str",
                    "BinaryIO",
                    "int"
                ]
            }
        }
    },
    "audapter-master/audapter/driver/__init__.py": {},
    "audapter-master/audapter/helper/cli.py": {},
    "audapter-master/audapter/helper/config.py": {
        "load_settings": {
            "name": "load_settings",
            "location": 10,
            "return": [
                "LazySettings",
                "str",
                "bool"
            ],
            "arguments": {
                "confpath": [
                    "str"
                ]
            }
        }
    },
    "audapter-master/audapter/helper/logger.py": {},
    "audapter-master/audapter/helper/types.py": {},
    "audapter-master/audapter/helper/__init__.py": {},
    "audapter-master/audapter/interface/__init__.py": {},
    "audapter-master/audapter/interface/driver/filter_driver.py": {
        "FilterDriverABC.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "Union[(int, Tuple[int])]"
                ]
            }
        },
        "FilterDriverABC.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "desired": [],
                "data_in": []
            }
        },
        "FilterDriverABC.get_filter_weights": {
            "name": "get_filter_weights",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audapter-master/docs/conf.py": {},
    "audapter-master/tests/test_std.py": {},
    "audapter-master/tests/__init__.py": {}
}
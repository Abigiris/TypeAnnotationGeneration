{
    "audiopyle-master/backend/setup.py": {},
    "audiopyle-master/backend/audiopyle/api_main.py": {
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "start_app": {
            "name": "start_app",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "logger": [
                    "dict",
                    "List[Dict]",
                    "bool"
                ],
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "_initialize_db_repositories": {
            "name": "_initialize_db_repositories",
            "location": 144,
            "return": [
                "Tuple[(audiopyle.lib.repository.feature_data.FeatureDataRepository, audiopyle.lib.repository.feature_meta.FeatureMetaRepository, audiopyle.lib.repository.request.RequestRepository, audiopyle.lib.repository.stats.ResultStatsRepository, audiopyle.lib.repository.metric.MetricDefinitionRepository, audiopyle.lib.repository.metric.MetricValueRepository)]"
            ],
            "arguments": {}
        },
        "_initialize_plugin_provider": {
            "name": "_initialize_plugin_provider",
            "location": 160,
            "return": [
                "audiopyle.lib.services.plugin_providing.VampyPluginProvider"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "Union[int, float]",
                    "list",
                    "int"
                ],
                "config_store": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/pytest_main.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "audiopyle-master/backend/audiopyle/worker_main.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "audiopyle-master/backend/audiopyle/__init__.py": {},
    "audiopyle-master/backend/audiopyle/api/audio_file.py": {
        "AudioFileListApi.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_store": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AudioFileListApi.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileDetailApi.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_store": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AudioFileDetailApi.get": {
            "name": "get",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/audio_tag.py": {
        "AudioTagApi.get": {
            "name": "get",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/automation.py": {
        "AutomationApi.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_provider": [
                    "str",
                    "List[Dict]",
                    "List[dict]",
                    "docker.models.containers.Container",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "plugin_config_provider": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "metric_config_provider": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "audio_file_store": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "result_repo": [
                    "str",
                    "List[Dict]",
                    "List[dict]",
                    "docker.models.containers.Container",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "AutomationApi.post": {
            "name": "post",
            "location": 29,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomationApi._generate_extraction_requests": {
            "name": "_generate_extraction_requests",
            "location": 47,
            "return": [
                "List[audiopyle.lib.models.extraction_request.ExtractionRequest]"
            ],
            "arguments": {
                "self": [],
                "audio_file_names": [
                    "List[str]",
                    "str",
                    "bool",
                    "Iterable[List[Any]]"
                ],
                "plugins": [
                    "List[str]",
                    "str",
                    "bool",
                    "Iterable[List[Any]]"
                ],
                "plugin_configs": [
                    "Dict[str,Dict[str,Any]]",
                    "str",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/config.py": {
        "PluginConfigListApi.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_config_provider": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "PluginConfigListApi.get": {
            "name": "get",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginConfigApi.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_config_provider": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "PluginConfigApi.get": {
            "name": "get",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricConfigListApi.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_config_provider": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "MetricConfigListApi.get": {
            "name": "get",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricByNameApi.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_config_provider": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "MetricByNameApi.get": {
            "name": "get",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsByPluginApi.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_config_provider": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "MetricsByPluginApi.get": {
            "name": "get",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/metric.py": {
        "MetricDefinitionListApi.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_repo": [
                    "str",
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "MetricDefinitionListApi.get": {
            "name": "get",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionDetailsApi.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_repo": [
                    "str",
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "MetricDefinitionDetailsApi.get": {
            "name": "get",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueListApi.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_repo": [
                    "str",
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "MetricValueListApi.get": {
            "name": "get",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueDetailsApi.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_repo": [
                    "str",
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "MetricValueDetailsApi.get": {
            "name": "get",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/plugin.py": {
        "PluginListApi.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_provider": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PluginListApi.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginDetailApi.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_provider": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PluginDetailApi.get": {
            "name": "get",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/request.py": {
        "RequestListApi.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_repo": [
                    "int"
                ],
                "plugin_config_provider": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping"
                ],
                "metric_config_provider": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping"
                ]
            }
        },
        "RequestListApi.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestListApi.post": {
            "name": "post",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestListApi._parse_request": {
            "name": "_parse_request",
            "location": 48,
            "return": [
                "Optional[audiopyle.lib.abstractions.model.Model]"
            ],
            "arguments": {
                "self": [],
                "the_request": [
                    "audiopyle.lib.abstractions.api_model.ApiRequest",
                    "Dict",
                    "int",
                    "Union[dict,list]",
                    "List",
                    "Callable[...,Coroutine]",
                    "Callable[...,collections.abc.Coroutine]"
                ]
            }
        },
        "RequestDetailsApi.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_repo": [
                    "Dict[str,str]",
                    "List[src.main.core.models.window.Window]"
                ]
            }
        },
        "RequestDetailsApi.get": {
            "name": "get",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestDetailsApi.delete": {
            "name": "delete",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStatusApi.get": {
            "name": "get",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/result.py": {
        "ResultDataApi.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_data_repo": [
                    "Dict",
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "ResultDataApi.get": {
            "name": "get",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultDataApi.delete": {
            "name": "delete",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultMetaApi.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_meta_repo": [
                    "bool",
                    "int",
                    "MutableMapping",
                    "MutableMapping[str,str]",
                    "List[dict]",
                    "List[Dict]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ResultMetaApi.get": {
            "name": "get",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultMetaApi.delete": {
            "name": "delete",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultStatsApi.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_repo": [
                    "str",
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "ResultStatsApi.get": {
            "name": "get",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultStatsApi.delete": {
            "name": "delete",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/root.py": {
        "CoordinatorApi.get": {
            "name": "get",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/utils.py": {
        "build_response": {
            "name": "build_response",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "str",
                "tests.mock_vws.utils.Endpoint",
                "Optional[str]"
            ],
            "arguments": {
                "the_response": [
                    "str"
                ]
            }
        },
        "build_request": {
            "name": "build_request",
            "location": 17,
            "return": [
                "audiopyle.lib.abstractions.api_model.ApiRequest"
            ],
            "arguments": {
                "flask_request": [
                    "Dict",
                    "str",
                    "flask.Request",
                    "flask.Response"
                ]
            }
        },
        "log_api_call": {
            "name": "log_api_call",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "api_request": [
                    "audiopyle.lib.abstractions.api_model.ApiRequest",
                    "Dict[str, Any]",
                    "str",
                    "scrapy.http.Request"
                ],
                "api_response": [
                    "Dict[str, Any]",
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/api/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/abstractions/api.py": {
        "prepare_method_not_supported_response": {
            "name": "prepare_method_not_supported_response",
            "location": 8,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "method": [
                    "str"
                ]
            }
        },
        "AbstractRestApi.get": {
            "name": "get",
            "location": 14,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRestApi.post": {
            "name": "post",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Type",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRestApi.put": {
            "name": "put",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRestApi.delete": {
            "name": "delete",
            "location": 23,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/abstractions/api_model.py": {
        "_ApiError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes"
                ],
                "status_code": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ClientError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "bool"
                ],
                "status_code": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ApiRequest.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "Dict[str,str]"
                ],
                "method": [
                    "bool",
                    "Dict[str,str]"
                ],
                "query_params": [
                    "bool",
                    "Dict[str,str]"
                ],
                "headers": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "payload": [
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "ApiResponse.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "payload": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "headers": [
                    "str",
                    "None",
                    "Optional[Callable]",
                    "Dict",
                    "Tuple[int,int]",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[Union[str,str]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/abstractions/model.py": {
        "Model.from_serializable": {
            "name": "from_serializable",
            "location": 9,
            "return": [
                "Optional[Model]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]",
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "serialized": [
                    "Dict[str,Any]",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "Model.to_serializable": {
            "name": "to_serializable",
            "location": 12,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Model.__hash__": {
            "name": "__hash__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.size_bytes": {
            "name": "size_bytes",
            "location": 27,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.size_humanized": {
            "name": "size_humanized",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/abstractions/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/db/engine.py": {
        "get_db_engine": {
            "name": "get_db_engine",
            "location": 19,
            "return": [
                "Callable",
                "str",
                "bool",
                "sqlalchemy.orm.Session",
                "bytes",
                "Tuple[int,int,int]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_test_db_engine": {
            "name": "get_test_db_engine",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "Dict[str,Any]",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
            ],
            "arguments": {
                "debug": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_db_session_maker": {
            "name": "get_db_session_maker",
            "location": 39,
            "return": [
                "str",
                "Dict[str,str]",
                "None",
                "Dict",
                "Dict[str,int]",
                "Type"
            ],
            "arguments": {
                "db_engine": [
                    "None",
                    "str",
                    "Optional[sqlalchemy.engine.Engine]",
                    "sqlalchemy.orm.Session",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "create_db_tables": {
            "name": "create_db_tables",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "None",
                    "bool",
                    "Optional[sqlalchemy.engine.Engine]",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "rotkehlchen.db.settings.ModifiableDBSettings"
                ],
                "only_if_absent": [
                    "bool",
                    "Optional[sqlalchemy.engine.Engine]",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "rotkehlchen.db.settings.ModifiableDBSettings"
                ]
            }
        },
        "drop_db_tables": {
            "name": "drop_db_tables",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "None",
                    "Optional[sqlalchemy.engine.Engine]",
                    "bool",
                    "Callable[List,bool,None]",
                    "Callable[[List,bool],None]",
                    "raiden.utils.Address"
                ]
            }
        },
        "_build_mysql_conn_string": {
            "name": "_build_mysql_conn_string",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "None"
                ],
                "port": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/db/entity.py": {},
    "audiopyle-master/backend/audiopyle/lib/db/exception.py": {},
    "audiopyle-master/backend/audiopyle/lib/db/session.py": {
        "SessionProvider.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_engine": [
                    "None",
                    "str",
                    "Optional[sqlalchemy.engine.Engine]",
                    "Optional[str]",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.session.Session.Transaction",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SessionProvider.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "commit_on_exit": [
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/db/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/models/audio_tag.py": {
        "Id3Tag.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "artist": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "title": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "album": [
                    "str",
                    "float",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "date": [
                    "int",
                    "None",
                    "str",
                    "List[int]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "track": [
                    "str",
                    "float",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "genre": [
                    "str",
                    "float",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/compressed_feature.py": {
        "CompressedFeatureDTO.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "Mapping"
                ],
                "compression": [
                    "int",
                    "str",
                    "List",
                    "List[str]",
                    "bool"
                ],
                "data": [
                    "Dict[str,str]",
                    "str",
                    "Dict[str,List[Any]]",
                    "Dict",
                    "Dict[str,list[Any]]",
                    "int",
                    "Tuple[Dict[str,Any],Dict[str,Any]]",
                    "Tuple[Union[dict[str,Any],dict[str,Any]]]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "CompressedFeatureDTO.from_serializable": {
            "name": "from_serializable",
            "location": 22,
            "return": [
                "CompressedFeatureDTO"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCompressedFeatureDTO]"
                ],
                "serialized": [
                    "dict",
                    "bytes",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CompressedFeatureDTO.to_serializable": {
            "name": "to_serializable",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedFeatureDTO.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedFeatureDTO.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedFeatureDTO.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [
                "bool",
                "Dict",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "audiopyle.lib.models.resulAnalysisRequest",
                    "purplship.core.utils.Element",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "CompressedFeatureDTO.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/extraction_request.py": {
        "ExtractionRequest.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_file_name": [
                    "str",
                    "Callable",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "plugin_full_key": [
                    "str",
                    "bool"
                ],
                "plugin_config": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Exception",
                    "Optional[str]"
                ],
                "metric_config": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Exception",
                    "Optional[str]"
                ],
                "task_id": [
                    "str",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/feature.py": {
        "VampyFeatureAbstraction.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "None"
                ]
            }
        },
        "VampyFeatureAbstraction.frames": {
            "name": "frames",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "VampyFeatureAbstraction.timestamps": {
            "name": "timestamps",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyFeatureAbstraction.values": {
            "name": "values",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyFeatureAbstraction.value_shape": {
            "name": "value_shape",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyConstantStepFeature.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "time_step": [
                    "str",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "int"
                ],
                "matrix": [
                    "str",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "int"
                ]
            }
        },
        "VampyConstantStepFeature.frames": {
            "name": "frames",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "str",
                    "List[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "VampyConstantStepFeature.timestamps": {
            "name": "timestamps",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyConstantStepFeature.values": {
            "name": "values",
            "location": 39,
            "return": [
                "numpy.ndarray",
                "Union[str, int, float]",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyConstantStepFeature.value_shape": {
            "name": "value_shape",
            "location": 42,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyConstantStepFeature._step_as_frames": {
            "name": "_step_as_frames",
            "location": 55,
            "return": [
                "Callable",
                "List[str]",
                "numpy.ndarray",
                "Optional[bool]",
                "Optional[int]",
                "salon.models.ServiceCategory"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "Tuple",
                    "float",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]"
                ]
            }
        },
        "VampyConstantStepFeature.to_serializable": {
            "name": "to_serializable",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyConstantStepFeature.from_serializable": {
            "name": "from_serializable",
            "location": 62,
            "return": [
                "VampyConstantStepFeature"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVampyConstantStepFeature]"
                ],
                "serialized": [
                    "purplship.core.models.RateRequest",
                    "django.db.models.Model",
                    "Optional[str]"
                ]
            }
        },
        "StepFeature.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "Tuple[str,Optional[int]]",
                    "Tuple[Union[str,int,None]]",
                    "bytes",
                    "List[alerta.models.enums.Scope]",
                    "List[S]"
                ],
                "values": [
                    "str",
                    "int",
                    "float",
                    "Optional[tildes.lib.datetime.SimpleHoursPeriod]",
                    "None"
                ],
                "label": [
                    "Tuple[str,Optional[int]]",
                    "None",
                    "bytes",
                    "List[alerta.models.enums.Scope]",
                    "Tuple[Union[str,int,None]]",
                    "List[S]"
                ]
            }
        },
        "StepFeature.to_serializable": {
            "name": "to_serializable",
            "location": 76,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepFeature.from_serializable": {
            "name": "from_serializable",
            "location": 85,
            "return": [
                "StepFeature"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStepFeature]"
                ],
                "serialized": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[models.LTI1p3Provider]"
                ]
            }
        },
        "VampyVariableStepFeature.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "step_features": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "VampyVariableStepFeature.frames": {
            "name": "frames",
            "location": 99,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "VampyVariableStepFeature.timestamps": {
            "name": "timestamps",
            "location": 103,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyVariableStepFeature.values": {
            "name": "values",
            "location": 106,
            "return": [
                "str",
                "Optional[int]",
                "numpy.ndarray",
                "float",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyVariableStepFeature.labels": {
            "name": "labels",
            "location": 109,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyVariableStepFeature.value_shape": {
            "name": "value_shape",
            "location": 112,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyVariableStepFeature.to_serializable": {
            "name": "to_serializable",
            "location": 126,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyVariableStepFeature.from_serializable": {
            "name": "from_serializable",
            "location": 130,
            "return": [
                "VampyVariableStepFeature"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVampyVariableStepFeature]"
                ],
                "serialized": [
                    "Dict",
                    "lunch_buddies.lib.service_contexServiceContext",
                    "List[lunch_buddies.models.polls.Poll]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/file_meta.py": {
        "FileMeta.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "size": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ],
                "last_access": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ],
                "last_modification": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ],
                "created_on": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "FileMeta.size_kB": {
            "name": "size_kB",
            "location": 19,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMeta.size_mB": {
            "name": "size_mB",
            "location": 23,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMeta.extension": {
            "name": "extension",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMeta.to_serializable": {
            "name": "to_serializable",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMeta.from_serializable": {
            "name": "from_serializable",
            "location": 38,
            "return": [
                "FileMeta"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFileMeta]"
                ],
                "serialized": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "AudioFileMeta.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "file_size_bytes": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "channels_count": [
                    "int"
                ],
                "sample_rate": [
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AudioFileMeta.length_sec": {
            "name": "length_sec",
            "location": 56,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileMeta.bit_rate_kbps": {
            "name": "bit_rate_kbps",
            "location": 60,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedAudioFileMeta.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "int",
                    "str"
                ],
                "file_size_bytes": [
                    "int",
                    "str"
                ],
                "channels_count": [
                    "int",
                    "str"
                ],
                "sample_rate": [
                    "int",
                    "str"
                ],
                "length_sec": [
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bit_rate_kbps": [
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CompressedAudioFileMeta.bit_rate_kbps": {
            "name": "bit_rate_kbps",
            "location": 72,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedAudioFileMeta.length_sec": {
            "name": "length_sec",
            "location": 76,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedAudioFileMeta.to_serializable": {
            "name": "to_serializable",
            "location": 79,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/metric.py": {
        "MetricDefinition.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ],
                "plugin_key": [
                    "bool",
                    "Dict[Hashable,Any]",
                    "None",
                    "Optional[src.dbp.models.LocationTuple]",
                    "int"
                ],
                "function": [
                    "int",
                    "Set[str]",
                    "models.FileOwner",
                    "str",
                    "Sequence",
                    "Mapping",
                    "keras.Model",
                    "Mapping[str,Any]",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "MetricValue.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "None"
                ],
                "definition": [
                    "str",
                    "int",
                    "bool"
                ],
                "stats": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MetricValue.to_serializable": {
            "name": "to_serializable",
            "location": 21,
            "return": [
                "Dict[Text,]",
                "str",
                "List[int]",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValue.from_serializable": {
            "name": "from_serializable",
            "location": 28,
            "return": [
                "MetricValue",
                "int",
                "str",
                "Dict[Tuple[str,str],Tuple[float,float]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "serialized": [
                    "dict",
                    "purplship.core.models.RateRequest",
                    "str"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/metric_transform.py": {
        "MetricTransformation.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "audio_meta": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "MetricTransformation.call": {
            "name": "call",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "vampy_feature": [
                    "int",
                    "salon.models.Stylist",
                    "bankroll.model.Instrument"
                ]
            }
        },
        "MetricTransformation._call_on_constant_step": {
            "name": "_call_on_constant_step",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "Dict"
                ]
            }
        },
        "MetricTransformation._call_on_variable_step": {
            "name": "_call_on_variable_step",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "Callable[,None]",
                    "numpy.array",
                    "bool"
                ]
            }
        },
        "NoneTransformation.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "NoneTransformation._call_on_constant_step": {
            "name": "_call_on_constant_step",
            "location": 32,
            "return": [
                "str",
                "int",
                "Union[List[str], List[Any]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "str"
                ]
            }
        },
        "NoneTransformation._call_on_variable_step": {
            "name": "_call_on_variable_step",
            "location": 35,
            "return": [
                "T",
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "T"
                ]
            }
        },
        "SelectRowTransformation.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "SelectRowTransformation._call_on_constant_step": {
            "name": "_call_on_constant_step",
            "location": 43,
            "return": [
                "bool",
                "int",
                "tuple",
                "Optional[Iterable[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "SelectRowTransformation._call_on_variable_step": {
            "name": "_call_on_variable_step",
            "location": 47,
            "return": [
                "List[int]",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "SingleValueTransformation.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "SingleValueTransformation._call_on_constant_step": {
            "name": "_call_on_constant_step",
            "location": 56,
            "return": [
                "float",
                "zerver.models.Realm",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "Dict",
                    "bool",
                    "Callable[[KT,VT],bool]",
                    "str"
                ]
            }
        },
        "SingleValueTransformation._call_on_variable_step": {
            "name": "_call_on_variable_step",
            "location": 60,
            "return": [
                "mtg_ssm.scryfall.models.ScryObject"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "Dict",
                    "List[cirq.Qid]",
                    "Dict[str,Any]",
                    "Match",
                    "Type"
                ]
            }
        },
        "SegmentLabelShareRatioTransformation.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_meta": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "SegmentLabelShareRatioTransformation._call_on_constant_step": {
            "name": "_call_on_constant_step",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "Dict"
                ]
            }
        },
        "SegmentLabelShareRatioTransformation._call_on_variable_step": {
            "name": "_call_on_variable_step",
            "location": 72,
            "return": [
                "numpy.array",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "str",
                    "Dict[str,Any]",
                    "numpy.array"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/plugin.py": {
        "full_key_to_params": {
            "name": "full_key_to_params",
            "location": 6,
            "return": [
                "Tuple",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "vampy_full_key": [
                    "str",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "params_to_full_key": {
            "name": "params_to_full_key",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "vendor": [
                    "str",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "Set[str]"
                ],
                "output": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "VampyPlugin.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vendor": [
                    "str",
                    "bool",
                    "List",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "output": [
                    "str",
                    "bool",
                    "List",
                    "int"
                ],
                "library_file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VampyPlugin.vampy_key": {
            "name": "vampy_key",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPlugin.full_key": {
            "name": "full_key",
            "location": 30,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginParams.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_size": [
                    "int",
                    "float",
                    "str",
                    "List[float]",
                    "Union[int,float]",
                    "List[str]",
                    "bool"
                ],
                "step_size": [
                    "int",
                    "float",
                    "str",
                    "List[float]",
                    "Union[int,float]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "VampyPluginParams.from_serializable": {
            "name": "from_serializable",
            "location": 41,
            "return": [
                "VampyPluginParams",
                "str",
                "int",
                "Dict[str,object]",
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "serialized": [
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "keras.Model"
                ]
            }
        },
        "VampyPluginParams.extraction_params": {
            "name": "extraction_params",
            "location": 47,
            "return": [
                "Dict[Text,]",
                "int",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/result.py": {
        "DataStats.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int",
                    "float",
                    "bool"
                ],
                "maximum": [
                    "int",
                    "float",
                    "bool"
                ],
                "median": [
                    "int",
                    "float",
                    "bool"
                ],
                "mean": [
                    "int",
                    "float",
                    "bool"
                ],
                "standard_deviation": [
                    "int",
                    "float",
                    "bool"
                ],
                "variance": [
                    "int",
                    "float",
                    "bool"
                ],
                "sum": [
                    "int",
                    "float",
                    "bool"
                ],
                "count": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AnalysisStats.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "int",
                    "str",
                    "MutableMapping",
                    "Optional[str]",
                    "None"
                ],
                "total_time": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "extraction_time": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "compression_time": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "data_stats_build_time": [
                    "str",
                    "bool",
                    "None",
                    "Optional[Address]",
                    "int"
                ],
                "encode_audio_time": [
                    "str",
                    "Optional[Address]",
                    "None"
                ],
                "result_store_time": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[LastModifiedBy]",
                    "Optional[CreatedBy]"
                ],
                "metrics_extraction_time": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "FeatureMeta.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "feature_type": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,str]",
                    "None",
                    "bytes"
                ],
                "feature_size": [
                    "int",
                    "str",
                    "Tuple[Union[str,str]]",
                    "bool",
                    "Tuple[str,str]"
                ],
                "data_shape": [
                    "str",
                    "Optional[str]",
                    "List",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "FeatureMeta.to_serializable": {
            "name": "to_serializable",
            "location": 52,
            "return": [
                "Dict[Union[str,Text],str]",
                "str",
                "List[int]",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMeta.from_serializable": {
            "name": "from_serializable",
            "location": 58,
            "return": [
                "FeatureMeta",
                "str",
                "Callable",
                "Callable[[None,None],bool]",
                "busboy.model.Passage"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "serialized": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "Type[T]"
                ]
            }
        },
        "AnalysisRequest.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "IO[bytes]",
                    "IO"
                ],
                "audio_meta": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "contests.models.User",
                    "Callable[,bool]",
                    "Optional[Callable[,bool]]",
                    "int"
                ],
                "id3_tag": [
                    "Iterable[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "None"
                ],
                "plugin": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "contests.models.User",
                    "Callable[,bool]",
                    "Optional[Callable[,bool]]",
                    "int"
                ],
                "plugin_config": [
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float",
                    "Tuple",
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Mapping",
                    "Optional[bool]"
                ]
            }
        },
        "AnalysisRequest.to_serializable": {
            "name": "to_serializable",
            "location": 73,
            "return": [
                "Dict[Text,None]",
                "str",
                "List[int]",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisRequest.from_serializable": {
            "name": "from_serializable",
            "location": 82,
            "return": [
                "AnalysisRequest",
                "int",
                "List[str]",
                "Dict",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "serialized": [
                    "dict"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/models/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/repository/abstract.py": {
        "DbRepository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "None",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "int",
                    "Optional[int]",
                    "Type",
                    "Callable[S,bool]",
                    "Type[T]",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "Callable[[recidiviz.persistence.database.session.Session],bool]"
                ],
                "entity_class": [
                    "bool",
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "None",
                    "Union[int,float]",
                    "bool",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "DbRepository.get_all": {
            "name": "get_all",
            "location": 20,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository.get_all_keys": {
            "name": "get_all_keys",
            "location": 23,
            "return": [
                "dict",
                "str",
                "defaultdict",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository.get_by_id": {
            "name": "get_by_id",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[float]",
                    "str",
                    "float",
                    "bool",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "DbRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "IO",
                    "Type",
                    "bytes",
                    "Type[T]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        },
        "DbRepository.get_or_create": {
            "name": "get_or_create",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "str"
                ]
            }
        },
        "DbRepository.exists_by_model": {
            "name": "exists_by_model",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "DbRepository.exists_by_id": {
            "name": "exists_by_id",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "DbRepository.delete_by_id": {
            "name": "delete_by_id",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "str",
                    "django.db.models.query.QuerySet",
                    "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]"
                ]
            }
        },
        "DbRepository.delete_all": {
            "name": "delete_all",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository.insert": {
            "name": "insert",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "DbRepository._get_id": {
            "name": "_get_id",
            "location": 67,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository._query_single": {
            "name": "_query_single",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository._query_multiple": {
            "name": "_query_multiple",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository._query_multiple_keys": {
            "name": "_query_multiple_keys",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 94,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "int",
                    "str",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "DbRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/audio_file.py": {
        "AudioFileRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ]
            }
        },
        "AudioFileRepository.get_id_by_file_name": {
            "name": "get_id_by_file_name",
            "location": 14,
            "return": [
                "Optional[str]",
                "Optional[Callable]",
                "Optional[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "int"
                ]
            }
        },
        "AudioFileRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 17,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "socialhome.users.models.Profile"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "zerver.models.Realm",
                    "None"
                ]
            }
        },
        "AudioFileRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 20,
            "return": [
                "CompressedAudioFileMeta",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "bool"
                ]
            }
        },
        "AudioFileRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 24,
            "return": [
                "AudioFile",
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                    "Dict[str,Any]",
                    "List[int]",
                    "float",
                    "purplship.core.models.PickupRequest",
                    "int"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/audio_tag.py": {
        "AudioTagRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "Dict",
                    "Callable[...,collections.abc.Awaitable[dict]]",
                    "str",
                    "raiden.utils.Address",
                    "tildes.models.commenComment",
                    "Callable[...,Awaitable[dict]]"
                ]
            }
        },
        "AudioTagRepository.get_id_by_name": {
            "name": "get_id_by_name",
            "location": 14,
            "return": [
                "Optional[str]",
                "Iterable[T]",
                "Optional[Sequence[Any]]",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "artist_name": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ],
                "album_name": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ],
                "title_name": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ]
            }
        },
        "AudioTagRepository.filter_by_artist": {
            "name": "filter_by_artist",
            "location": 17,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "artist_name": [
                    "str"
                ]
            }
        },
        "AudioTagRepository.filter_by_album": {
            "name": "filter_by_album",
            "location": 20,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "album_name": [
                    "str"
                ]
            }
        },
        "AudioTagRepository.filter_by_title": {
            "name": "filter_by_title",
            "location": 23,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "title_name": [
                    "str"
                ]
            }
        },
        "AudioTagRepository.filter_by_genre": {
            "name": "filter_by_genre",
            "location": 26,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "genre_name": [
                    "str"
                ]
            }
        },
        "AudioTagRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 29,
            "return": [
                "Optional[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "users.models.User"
                ]
            }
        },
        "AudioTagRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 32,
            "return": [
                "Id3Tag",
                "bool",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "audio_tag": [
                    "str",
                    "List[str]",
                    "stiff.models.Tagging"
                ]
            }
        },
        "AudioTagRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 36,
            "return": [
                "AudioTag",
                "Mapping[str,Any]",
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "MutableMapping[str,int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type",
                    "Type[T]",
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/feature_data.py": {
        "FeatureDataRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "str",
                    "Mapping",
                    "audiopyle.lib.db.session.SessionProvider"
                ]
            }
        },
        "FeatureDataRepository.filter_by_compression": {
            "name": "filter_by_compression",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "compression_type": [
                    "str",
                    "BaseException",
                    "Exception",
                    "Type",
                    "Type[BaseException]"
                ]
            }
        },
        "FeatureDataRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 17,
            "return": [
                "Optional[bool]",
                "dict",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "audiopyle.lib.models.resulAnalysisStats"
                ]
            }
        },
        "FeatureDataRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 20,
            "return": [
                "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Dict",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "esm.models.service_instance.ServiceInstance"
                ]
            }
        },
        "FeatureDataRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 24,
            "return": [
                "audiopyle.lib.db.entity.FeatureData"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/feature_meta.py": {
        "FeatureMetaRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ]
            }
        },
        "FeatureMetaRepository.filter_by_type": {
            "name": "filter_by_type",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "feature_type": [
                    "Type",
                    "BaseException",
                    "Type[Any]",
                    "Exception",
                    "List[S]",
                    "Type[BaseException]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation]"
                ]
            }
        },
        "FeatureMetaRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 17,
            "return": [
                "Optional[bool]",
                "dict",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "audiopyle.lib.models.resulAnalysisStats"
                ]
            }
        },
        "FeatureMetaRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 20,
            "return": [
                "audiopyle.lib.models.result.FeatureMeta"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Callable",
                    "esm.models.service_instance.ServiceInstance"
                ]
            }
        },
        "FeatureMetaRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 25,
            "return": [
                "audiopyle.lib.db.entity.FeatureMeta"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "esm.models.ServiceInstance"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/metric.py": {
        "MetricDefinitionRepository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ],
                "plugin_repository": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "MetricDefinitionRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List",
                    "bool",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier,raiden.utils.List[raiden.messages.abstracMessage]]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MetricDefinitionRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Optional[dict]",
                    "bool",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "MetricDefinitionRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 35,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "str",
                    "audiopyle.lib.models.metric.MetricDefinition",
                    "tracim.models.data.Workspace",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "MetricDefinitionRepository.get_metric_by_name": {
            "name": "get_metric_by_name",
            "location": 38,
            "return": [
                "bool",
                "Union[django.db.models.fields.Field, django.db.models.fields.reverse_related.ForeignObjectRel]",
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "db.models.Name"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ]
            }
        },
        "MetricDefinitionRepository.get_key_by_metric_name": {
            "name": "get_key_by_metric_name",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "MetricValueRepository.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ],
                "definition_repository": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "MetricValueRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 50,
            "return": [
                "Metric",
                "int",
                "str",
                "bool",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str,collections.abc.AsyncGenerator]",
                    "List[deeplearning.ml4pl.models.log_database.Batch]",
                    "Dict[str,AsyncGenerator]",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "pywirelessmbus.utils.IMSTMessage",
                    "core_lib.core.models.Venue",
                    "app.models.compAny.CompAny"
                ]
            }
        },
        "MetricValueRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 58,
            "return": [
                "MetricValue",
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "bool",
                    "lib.AbstractType"
                ]
            }
        },
        "MetricValueRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 69,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[str]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "bool",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "MetricValueRepository.get_values_by_name": {
            "name": "get_values_by_name",
            "location": 73,
            "return": [
                "None",
                "Optional[str]",
                "server.models.User",
                "Optional[List[str]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ]
            }
        },
        "MetricValueRepository.get_by_task_id": {
            "name": "get_by_task_id",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MetricValueRepository.get_by_name_and_task_id": {
            "name": "get_by_name_and_task_id",
            "location": 83,
            "return": [
                "None",
                "Optional[str]",
                "List[InlineContent]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "int"
                ],
                "task_id": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/request.py": {
        "RequestRepository.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "bool",
                    "audiopyle.lib.db.session.SessionProvider"
                ],
                "audio_file_repository": [
                    "IO",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "audio_tag_repository": [
                    "bool",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "plugin_repository": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None"
                ],
                "plugin_config_repo": [
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Collection[str]",
                    "str",
                    "Collection"
                ]
            }
        },
        "RequestRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 23,
            "return": [
                "str",
                "Callable[[KT], VT]",
                "Callable",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "Dict[str,Any]",
                    "audiopyle.lib.models.resulAnalysisRequest",
                    "int",
                    "bytes"
                ]
            }
        },
        "RequestRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 26,
            "return": [
                "Request",
                "str",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "cmk.utils.type_defs.UserId",
                "bool",
                "List[Dict[str,Any]]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "MutableMapping",
                    "int",
                    "app.models.compAny.CompAny",
                    "MutableMapping[str,Any]",
                    "core_lib.core.models.Venue",
                    "pywirelessmbus.utils.IMSTMessage",
                    "zerver.models.Message"
                ]
            }
        },
        "RequestRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 34,
            "return": [
                "AnalysisRequest",
                "str",
                "bool",
                "audiopyle.lib.models.plugin.VampyPlugin"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "Union[str,type]",
                    "Type",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/stats.py": {
        "ResultStatsRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ]
            }
        },
        "ResultStatsRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 14,
            "return": [
                "Optional[bool]",
                "dict",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "audiopyle.lib.models.resulAnalysisStats"
                ]
            }
        },
        "ResultStatsRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 17,
            "return": [
                "audiopyle.lib.db.entity.ResultStats"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "audiopyle.lib.models.resulAnalysisStats",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        },
        "ResultStatsRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 23,
            "return": [
                "audiopyle.lib.models.result.AnalysisStats"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Dict",
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "None",
                    "models.User",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "Optional[dict]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/vampy_plugin.py": {
        "VampyPluginRepository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ]
            }
        },
        "VampyPluginRepository.get_id_by_params": {
            "name": "get_id_by_params",
            "location": 18,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "vendor": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "output": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VampyPluginRepository.filter_by_vendor": {
            "name": "filter_by_vendor",
            "location": 21,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "vendor": [
                    "float",
                    "List[str]",
                    "Callable[[None],bool]",
                    "int",
                    "Callable[None,bool]"
                ]
            }
        },
        "VampyPluginRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 24,
            "return": [
                "Optional[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "VampyPluginRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 29,
            "return": [
                "audiopyle.lib.models.plugin.VampyPlugin"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Dict"
                ]
            }
        },
        "VampyPluginRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 33,
            "return": [
                "audiopyle.lib.db.entity.VampyPlugin"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "audiopyle.lib.models.plugin.VampyPlugin",
                    "Mapping",
                    "Mapping[str,Any]"
                ]
            }
        },
        "PluginConfigRepository.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_provider": [
                    "audiopyle.lib.db.session.SessionProvider"
                ]
            }
        },
        "PluginConfigRepository._map_to_entity": {
            "name": "_map_to_entity",
            "location": 42,
            "return": [
                "audiopyle.lib.db.entity.PluginConfig"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "bytes",
                    "Dict",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "PluginConfigRepository._map_to_object": {
            "name": "_map_to_object",
            "location": 48,
            "return": [
                "audiopyle.lib.models.plugin.VampyPluginParams"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Dict[str,Any]"
                ]
            }
        },
        "PluginConfigRepository.get_id_by_model": {
            "name": "get_id_by_model",
            "location": 54,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[str]]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "float",
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "bytes",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/repository/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/services/audio_providing.py": {
        "read_raw_audio_from_file": {
            "name": "read_raw_audio_from_file",
            "location": 10,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "input_audio_file_path": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "_match_target_loudness": {
            "name": "_match_target_loudness",
            "location": 17,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "sound": [
                    "int"
                ],
                "target_dBFS": [
                    "str",
                    "int",
                    "None",
                    "List",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "List[int]",
                    "bool",
                    "Union[str,int]"
                ]
            }
        },
        "_normalize_to_maximum_dBFS": {
            "name": "_normalize_to_maximum_dBFS",
            "location": 23,
            "return": [
                "numpy.ndarray",
                "str",
                "trezor.utils.Writer",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "sound": [
                    "str",
                    "pydub.AudioSegment",
                    "int",
                    "float",
                    "Tuple[str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/audio_tag_providing.py": {
        "read_audio_tag": {
            "name": "read_audio_tag",
            "location": 24,
            "return": [
                "None",
                "str",
                "Mapping[str,Any]",
                "django.db.models.Model",
                "Mapping[str,bool]",
                "Mapping[str,str]",
                "List[str]"
            ],
            "arguments": {
                "input_audio_file_absolute_path": [
                    "str",
                    "Type",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "read_audio_tag_using": {
            "name": "read_audio_tag_using",
            "location": 38,
            "return": [
                "Optional[audiopyle.lib.models.audio_tag.Id3Tag]"
            ],
            "arguments": {
                "input_audio_file_absolute_path": [
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "method_extracting_tag": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_mutagen_tag_to_internal": {
            "name": "_mutagen_tag_to_internal",
            "location": 56,
            "return": [
                "audiopyle.lib.models.audio_tag.Id3Tag"
            ],
            "arguments": {
                "mutagen_tag": [
                    "str",
                    "Tuple[bool, str]",
                    "List[str]",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/compression.py": {
        "to_compressed_feature": {
            "name": "to_compressed_feature",
            "location": 23,
            "return": [
                "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "Any"
                ],
                "feature_model": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "list"
                ],
                "compression_type": [
                    "str",
                    "float",
                    "bool",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "from_compressed_feature": {
            "name": "from_compressed_feature",
            "location": 29,
            "return": [
                "Union[(audiopyle.lib.models.feature.VampyConstantStepFeature, audiopyle.lib.models.feature.VampyVariableStepFeature)]"
            ],
            "arguments": {
                "comp_feat": [
                    "Dict",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "trezor.utils.Writer",
                    "Optional[Iterable[T]]"
                ]
            }
        },
        "compress_model": {
            "name": "compress_model",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "compression_type": [
                    "str",
                    "audiopyle.lib.models.compressed_feature.CompressionType",
                    "Dict",
                    "bytes",
                    "None",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "decompress_model": {
            "name": "decompress_model",
            "location": 42,
            "return": [
                "Callable[[Any], bool]",
                "str"
            ],
            "arguments": {
                "compression_type": [
                    "bytes",
                    "str",
                    "Tuple",
                    "bool",
                    "audiopyle.lib.models.compressed_feature.CompressionType"
                ],
                "data": [
                    "bytes",
                    "str",
                    "Tuple",
                    "bool",
                    "audiopyle.lib.models.compressed_feature.CompressionType"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/feature_extraction.py": {
        "extract_raw_feature": {
            "name": "extract_raw_feature",
            "location": 14,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "wav_data": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "zerver.models.Stream",
                    "raiden.utils.TokenAmount"
                ],
                "sample_rate": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "zerver.models.Stream",
                    "raiden.utils.TokenAmount"
                ],
                "vampy_plugin_key": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "zerver.models.Stream",
                    "raiden.utils.TokenAmount"
                ],
                "output_name": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "zerver.models.Stream",
                    "raiden.utils.TokenAmount"
                ],
                "plugin_config": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "zerver.models.Stream",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "build_feature_object": {
            "name": "build_feature_object",
            "location": 21,
            "return": [
                "Union[(audiopyle.lib.models.feature.VampyConstantStepFeature, audiopyle.lib.models.feature.VampyVariableStepFeature)]"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[Union[list[str],list[str]]]",
                    "Tuple[List[str],List[str]]",
                    "Task"
                ],
                "extracted_data": [
                    "str",
                    "dict",
                    "bytes",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/feature_meta_extraction.py": {
        "build_feature_meta": {
            "name": "build_feature_meta",
            "location": 5,
            "return": [
                "audiopyle.lib.models.result.FeatureMeta"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "vampy_feature": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/file_meta_providing.py": {
        "read_file_meta": {
            "name": "read_file_meta",
            "location": 16,
            "return": [
                "Optional[audiopyle.lib.models.file_meta.FileMeta]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "read_audio_file_meta": {
            "name": "read_audio_file_meta",
            "location": 29,
            "return": [
                "Optional[audiopyle.lib.models.file_meta.CompressedAudioFileMeta]"
            ],
            "arguments": {
                "absolute_path": [
                    "int",
                    "bytes",
                    "TextIO",
                    "IO",
                    "IO[str]",
                    "os.stat_result"
                ]
            }
        },
        "_read_mp3_file_meta": {
            "name": "_read_mp3_file_meta",
            "location": 45,
            "return": [
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta"
            ],
            "arguments": {
                "absolute_path": [
                    "str",
                    "IO[str]",
                    "IO",
                    "List[str]",
                    "Optional[IO[str]]",
                    "int",
                    "None",
                    "List[cutepaste.files.models.File]",
                    "List[F]",
                    "Dict[int,Set[str]]",
                    "Dict[int,set[str]]"
                ],
                "audio_file_size": [
                    "int",
                    "Dict[str,int]",
                    "List[str]"
                ]
            }
        },
        "_read_flac_file_meta": {
            "name": "_read_flac_file_meta",
            "location": 52,
            "return": [
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta"
            ],
            "arguments": {
                "absolute_path": [
                    "str",
                    "IO[str]",
                    "IO",
                    "List[str]",
                    "Optional[IO[str]]",
                    "int",
                    "None",
                    "List[cutepaste.files.models.File]",
                    "List[F]",
                    "Dict[int,Set[str]]",
                    "Dict[int,set[str]]"
                ],
                "audio_file_size": [
                    "int",
                    "Dict[str,int]",
                    "List[str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/metric_config_provider.py": {
        "MetricConfigProvider.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_store": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "int",
                    "logging.Logger",
                    "Logger"
                ]
            }
        },
        "MetricConfigProvider.get_all": {
            "name": "get_all",
            "location": 14,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str,Any]",
                "Set[str]",
                "None",
                "float",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricConfigProvider.get_for_plugin": {
            "name": "get_for_plugin",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "plugin_full_key": [
                    "str",
                    "bytes",
                    "raiden.utils.PrivateKey"
                ]
            }
        },
        "MetricConfigProvider.get_by_name": {
            "name": "get_by_name",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str"
                ]
            }
        },
        "MetricConfigProvider.get_metric_names": {
            "name": "get_metric_names",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricConfigProvider.get_metric_names_for_plugin": {
            "name": "get_metric_names_for_plugin",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "plugin_full_key": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/metric_provider.py": {
        "get_transformation": {
            "name": "get_transformation",
            "location": 23,
            "return": [
                "Union[(audiopyle.lib.models.metric_transform.NoneTransformation, audiopyle.lib.models.metric_transform.SegmentLabelShareRatioTransformation, audiopyle.lib.models.metric_transform.SelectRowTransformation, audiopyle.lib.models.metric_transform.SingleValueTransformation)]"
            ],
            "arguments": {
                "function_name": [
                    "str",
                    "Dict[str,Any]",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                    "Any",
                    "None",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "audio_meta": [
                    "str",
                    "Dict[str,Any]",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                    "Any",
                    "None",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "function_kwargs": [
                    "str",
                    "Dict[str,Any]",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                    "Any",
                    "None",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "extract_metric_value": {
            "name": "extract_metric_value",
            "location": 27,
            "return": [
                "audiopyle.lib.models.metric.MetricValue"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "Dict",
                    "audiopyle.lib.models.metric.MetricDefinition"
                ],
                "definition": [
                    "str",
                    "int",
                    "Dict",
                    "audiopyle.lib.models.metric.MetricDefinition"
                ],
                "transformation": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "feature": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_extract_data_stats": {
            "name": "_extract_data_stats",
            "location": 34,
            "return": [
                "audiopyle.lib.models.result.DataStats"
            ],
            "arguments": {
                "numpy_array": [
                    "numpy.ndarray",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "_try_calculate_data_stat": {
            "name": "_try_calculate_data_stat",
            "location": 45,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "calc_callable": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "bool"
                ],
                "calc_input": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "bool"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/plugin_config_provider.py": {
        "PluginConfigProvider.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_store": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "int",
                    "logging.Logger",
                    "Logger"
                ]
            }
        },
        "PluginConfigProvider.get_all": {
            "name": "get_all",
            "location": 14,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str,Any]",
                "Set[str]",
                "None",
                "float",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginConfigProvider.get_for_plugin": {
            "name": "get_for_plugin",
            "location": 23,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "plugin_full_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PluginConfigProvider.get_plugin_names": {
            "name": "get_plugin_names",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/plugin_providing.py": {
        "VampyPluginProvider.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vamp_interface": [
                    "bool"
                ],
                "vamp_host_interface": [
                    "bool"
                ],
                "plugin_black_list": [
                    "bool",
                    "None",
                    "Tuple[str]",
                    "int",
                    "List[annofabapi.models.Inspection]",
                    "Callable",
                    "str"
                ],
                "logger": [
                    "str",
                    "None",
                    "Optional[float]",
                    "logging.Logger",
                    "float"
                ]
            }
        },
        "VampyPluginProvider.build_plugins_from_key": {
            "name": "build_plugins_from_key",
            "location": 20,
            "return": [
                "List[audiopyle.lib.models.plugin.VampyPlugin]"
            ],
            "arguments": {
                "self": [],
                "vampy_key": [
                    "str",
                    "Dict[str,str]",
                    "tracim.models.data.Content"
                ]
            }
        },
        "VampyPluginProvider.build_plugin_from_params": {
            "name": "build_plugin_from_params",
            "location": 27,
            "return": [
                "Optional[audiopyle.lib.models.plugin.VampyPlugin]"
            ],
            "arguments": {
                "self": [],
                "vendor": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "VampyPluginProvider.build_plugin_from_full_key": {
            "name": "build_plugin_from_full_key",
            "location": 33,
            "return": [
                "Optional[audiopyle.lib.models.plugin.VampyPlugin]"
            ],
            "arguments": {
                "self": [],
                "full_plugin_key": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VampyPluginProvider.list_full_plugin_keys": {
            "name": "list_full_plugin_keys",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginProvider.list_vampy_plugins": {
            "name": "list_vampy_plugins",
            "location": 49,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginProvider._is_plugin_available": {
            "name": "_is_plugin_available",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "vendor": [
                    "str",
                    "zerver.models.Realm"
                ],
                "name": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "VampyPluginProvider._list_vampy_plugin_keys": {
            "name": "_list_vampy_plugin_keys",
            "location": 60,
            "return": [
                "List[str]",
                "str",
                "bytes",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginProvider._split_vampy_key_into_vendor_and_name": {
            "name": "_split_vampy_key_into_vendor_and_name",
            "location": 64,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "vampy_key": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "VampyPluginProvider._split_full_key_into_params": {
            "name": "_split_full_key_into_params",
            "location": 68,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "full_key": [
                    "str",
                    "bytes",
                    "Union[str,int]",
                    "Union[str,bytes]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/result_store_client.py": {
        "ResultApiClient.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "bool"
                ],
                "logger": [
                    "str",
                    "List[str]",
                    "logging.Logger",
                    "Tuple[tuple[Union[str,...]]]",
                    "Tuple[Tuple[str,...]]"
                ]
            }
        },
        "ResultApiClient.store_data": {
            "name": "store_data",
            "location": 13,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ],
                "payload": [
                    "str"
                ]
            }
        },
        "ResultApiClient.store_meta": {
            "name": "store_meta",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ],
                "payload": [
                    "str"
                ]
            }
        },
        "ResultApiClient.store_stats": {
            "name": "store_stats",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ],
                "payload": [
                    "str"
                ]
            }
        },
        "ResultApiClient._send_post": {
            "name": "_send_post",
            "location": 22,
            "return": [
                "None",
                "Optional[Tuple[int,int]]",
                "Dict[str,str]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str"
                ],
                "url": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/store_provider.py": {
        "FileStore.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None",
                    "Iterator[dep_check.models.SourceFile]",
                    "Iterator",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "permissions": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "FileStore.store": {
            "name": "store",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "content": [
                    "str",
                    "Union[List,str]",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FileStore.read": {
            "name": "read",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "FileStore.meta": {
            "name": "meta",
            "location": 44,
            "return": [
                "audiopyle.lib.models.file_meta.FileMeta"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "FileStore.list": {
            "name": "list",
            "location": 53,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStore.list_full_paths": {
            "name": "list_full_paths",
            "location": 57,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStore.get_full_path": {
            "name": "get_full_path",
            "location": 61,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FileStore.remove": {
            "name": "remove",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "FileStore.exists": {
            "name": "exists",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "FileStore._inherit_store": {
            "name": "_inherit_store",
            "location": 76,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "bool",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[Any]",
                    "List"
                ],
                "content": [
                    "str",
                    "bool",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[Any]",
                    "List"
                ]
            }
        },
        "FileStore._inherit_read": {
            "name": "_inherit_read",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "Tuple[Union[str,...]]",
                    "Optional[Tuple[str,...]]",
                    "None",
                    "Optional[Directory]",
                    "Optional[str]"
                ]
            }
        },
        "FileStore._build_full_path": {
            "name": "_build_full_path",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Mp3FileStore.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "Mp3FileStore._inherit_read": {
            "name": "_inherit_read",
            "location": 90,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "Tuple[Union[str,...]]",
                    "Optional[Tuple[str,...]]",
                    "None",
                    "Optional[Directory]",
                    "Optional[str]"
                ]
            }
        },
        "Mp3FileStore._inherit_store": {
            "name": "_inherit_store",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "bool",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[Any]",
                    "List"
                ],
                "content": [
                    "str",
                    "bool",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[Any]",
                    "List"
                ]
            }
        },
        "JsonFileStore.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "JsonFileStore._inherit_store": {
            "name": "_inherit_store",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "Callable[[str],None]"
                ],
                "content": [
                    "Union[Dict[str,Any],List[Any]]",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[Any]"
                ]
            }
        },
        "JsonFileStore._inherit_read": {
            "name": "_inherit_read",
            "location": 105,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str"
                ]
            }
        },
        "GzipJsonFileStore.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "GzipJsonFileStore._inherit_store": {
            "name": "_inherit_store",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "content": [
                    "str",
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "GzipJsonFileStore._inherit_read": {
            "name": "_inherit_read",
            "location": 120,
            "return": [
                "models.Subtask",
                "IO[bytes]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str"
                ]
            }
        },
        "LzmaJsonFileStore.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "LzmaJsonFileStore._inherit_store": {
            "name": "_inherit_store",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "content": [
                    "str",
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "LzmaJsonFileStore._inherit_read": {
            "name": "_inherit_read",
            "location": 135,
            "return": [
                "models.Subtask",
                "IO[bytes]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/uuid_generation.py": {
        "generate_uuid": {
            "name": "generate_uuid",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "BinaryIO",
                    "bool"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/services/__init__.py": {},
    "audiopyle-master/backend/audiopyle/lib/utils/conversion.py": {
        "b_to_B": {
            "name": "b_to_B",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "b": [
                    "float",
                    "Optional[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "B_to_b": {
            "name": "B_to_b",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "B": [
                    "float",
                    "Optional[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "to_kilo": {
            "name": "to_kilo",
            "location": 19,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "v": [
                    "float",
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "to_mega": {
            "name": "to_mega",
            "location": 23,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "v": [
                    "float",
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "frames_to_sec": {
            "name": "frames_to_sec",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "frames_count": [
                    "int",
                    "Union[str, type]"
                ],
                "sample_rate": [
                    "int",
                    "Union[str, type]"
                ]
            }
        },
        "sec_to_frames": {
            "name": "sec_to_frames",
            "location": 32,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "seconds": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "sample_rate": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "sec_to_min": {
            "name": "sec_to_min",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "sec": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "min_to_sec": {
            "name": "min_to_sec",
            "location": 42,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "minutes": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "utc_datetime_to_timestamp": {
            "name": "utc_datetime_to_timestamp",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "utc_timestamp_to_datetime": {
            "name": "utc_timestamp_to_datetime",
            "location": 52,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "timestamp": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "utc_datetime_to_iso_format": {
            "name": "utc_datetime_to_iso_format",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "datetime.date"
                ]
            }
        },
        "utc_iso_format_to_datetime": {
            "name": "utc_iso_format_to_datetime",
            "location": 62,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "iso_dt": [
                    "str"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict"
                ]
            }
        },
        "seconds_between": {
            "name": "seconds_between",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "start_time_point": [
                    "int",
                    "datetime.datetime"
                ],
                "end_time_point": [
                    "datetime.datetime",
                    "int"
                ],
                "precision": [
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "safe_cast": {
            "name": "safe_cast",
            "location": 76,
            "return": [
                "bool",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "type"
                ],
                "expected_type": [
                    "Type",
                    "str",
                    "Iterable[Hashable]",
                    "bool"
                ],
                "default": [
                    "Literal",
                    "bool"
                ]
            }
        },
        "first_if_collection": {
            "name": "first_if_collection",
            "location": 85,
            "return": [
                "float",
                "str",
                "bytearray",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "maybe_collection": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "object_size_humanized": {
            "name": "object_size_humanized",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "any_object": [
                    "int",
                    "List[List[str]]",
                    "float"
                ]
            }
        },
        "object_size": {
            "name": "object_size",
            "location": 93,
            "return": [
                "dict",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "any_object": [
                    "dict",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "_sizeof_fmt": {
            "name": "_sizeof_fmt",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Union[str, int]"
                ],
                "suffix": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/utils/env_var.py": {
        "read_env_var": {
            "name": "read_env_var",
            "location": 10,
            "return": [
                "None",
                "bool",
                "Type[T]",
                "str"
            ],
            "arguments": {
                "var_name": [
                    "str",
                    "Set[str]"
                ],
                "expected_type": [
                    "Type",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "default": [
                    "Optional[Any]",
                    "str",
                    "None",
                    "Type",
                    "Any"
                ]
            }
        },
        "_select_value": {
            "name": "_select_value",
            "location": 19,
            "return": [
                "bool",
                "str",
                "Any",
                "None",
                "Type",
                "Exception",
                "List[str]"
            ],
            "arguments": {
                "var_name": [
                    "str",
                    "Optional[Any]",
                    "Exception",
                    "Any",
                    "List[str]",
                    "Type[BaseException]",
                    "None",
                    "Type"
                ],
                "expected_type": [
                    "Type",
                    "bool",
                    "str"
                ],
                "default": [
                    "str",
                    "Optional[Any]",
                    "Exception",
                    "Any",
                    "List[str]",
                    "Type[BaseException]",
                    "None",
                    "Type"
                ],
                "actual": [
                    "Any",
                    "Optional[Any]",
                    "int",
                    "None",
                    "Dict",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/utils/file_system.py": {
        "file_exists": {
            "name": "file_exists",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "absolute_path": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "concatenate_paths": {
            "name": "concatenate_paths",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "get_file_name": {
            "name": "get_file_name",
            "location": 29,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "absolute_path": [
                    "str"
                ]
            }
        },
        "list_full_paths": {
            "name": "list_full_paths",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Text"
                ]
            }
        },
        "list_files": {
            "name": "list_files",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "copy_file": {
            "name": "copy_file",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "destination": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "extract_extension": {
            "name": "extract_extension",
            "location": 47,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Dict"
                ]
            }
        },
        "extract_all_extensions": {
            "name": "extract_all_extensions",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "remove_file": {
            "name": "remove_file",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "ignore_errors": [
                    "bool",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "file_size_bytes": {
            "name": "file_size_bytes",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "absolute_path": [
                    "str"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/utils/logger.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "int",
                    "str",
                    "float",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 13,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "calling_module": [
                    "Text",
                    "str",
                    "logging.Logger",
                    "Callable",
                    "Exception",
                    "Tuple[str,int]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/lib/utils/__init__.py": {},
    "audiopyle-master/backend/audiopyle/test/test_audio_conversion.py": {
        "ConversionUtilsTest.test_should_measure_seconds_since_event": {
            "name": "test_should_measure_seconds_since_event",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversionUtilsTest.test_should_measure_seconds_between_events": {
            "name": "test_should_measure_seconds_between_events",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_feature.py": {
        "ConstantStepAudioFeatureModelTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantStepAudioFeatureModelTest.test_should_serialize_and_deserialize_feature": {
            "name": "test_should_serialize_and_deserialize_feature",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantStepAudioFeatureModelTest.test_should_serialized_to_json": {
            "name": "test_should_serialized_to_json",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantStepAudioFeatureModelTest.test_should_calculate_frames_properly": {
            "name": "test_should_calculate_frames_properly",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantStepAudioFeatureModelTest.test_should_list_timestamps_properly": {
            "name": "test_should_list_timestamps_properly",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantStepAudioFeatureModelTest.test_values_should_have_correct_shape": {
            "name": "test_values_should_have_correct_shape",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableStepAudioFeatureModelTest.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableStepAudioFeatureModelTest.test_should_serialize_and_deserialize_feature": {
            "name": "test_should_serialize_and_deserialize_feature",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableStepAudioFeatureModelTest.test_should_serialized_to_json": {
            "name": "test_should_serialized_to_json",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_file_meta.py": {
        "Mp3AudioFileMetaTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mp3AudioFileMetaTest.test_should_serialize_and_deserialize_audio_meta_file": {
            "name": "test_should_serialize_and_deserialize_audio_meta_file",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mp3AudioFileMetaTest.test_should_store_as_json": {
            "name": "test_should_store_as_json",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_file_meta_providing.py": {
        "FileMetaProvidingTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetaProvidingTest.test_should_return_file_meta_from_mp3": {
            "name": "test_should_return_file_meta_from_mp3",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetaProvidingTest.test_should_return_file_meta_from_flac": {
            "name": "test_should_return_file_meta_from_flac",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetaProvidingTest.test_should_return_none_on_non_existing_file": {
            "name": "test_should_return_none_on_non_existing_file",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileMetaProvidingTest.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileMetaProvidingTest.test_should_create_mp3_audio_file_meta": {
            "name": "test_should_create_mp3_audio_file_meta",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileMetaProvidingTest.test_should_create_flac_audio_file_meta": {
            "name": "test_should_create_flac_audio_file_meta",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileMetaProvidingTest.test_should_return_none_on_non_existing_file": {
            "name": "test_should_return_none_on_non_existing_file",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_file_repository.py": {
        "AudioFileDbRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "AudioFileDbRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "AudioFileDbRepositoryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileDbRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileDbRepositoryTest.test_should_insert_and_retrieve_entity_by_name": {
            "name": "test_should_insert_and_retrieve_entity_by_name",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_id3_tag.py": {
        "AudioFileId3TagTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileId3TagTest.test_should_serialize_and_deserialize_id3_tag_object": {
            "name": "test_should_serialize_and_deserialize_id3_tag_object",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileId3TagTest.test_should_be_serialized_to_json": {
            "name": "test_should_be_serialized_to_json",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_id3_tag_providing.py": {
        "function_raising_error": {
            "name": "function_raising_error",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "AudioFileId3TagProvidingTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileId3TagProvidingTest.test_should_read_id3_tag_from_mp3": {
            "name": "test_should_read_id3_tag_from_mp3",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileId3TagProvidingTest.test_should_read_tag_from_flac": {
            "name": "test_should_read_tag_from_flac",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileId3TagProvidingTest.test_should_return_none_on_non_existing_file": {
            "name": "test_should_return_none_on_non_existing_file",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileId3TagProvidingTest.test_should_return_none_on_non_existing_tags": {
            "name": "test_should_return_none_on_non_existing_tags",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_normalization.py": {
        "AudioNormalizationTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioNormalizationTest.test_should_normalize_volume_in_mp3_file": {
            "name": "test_should_normalize_volume_in_mp3_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_plugin.py": {
        "AudioPluginModelTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPluginModelTest.test_model_properties": {
            "name": "test_model_properties",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPluginModelTest.test_should_serialize_and_deserialize_plugin": {
            "name": "test_should_serialize_and_deserialize_plugin",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPluginModelTest.test_should_serialize_plugin_to_json": {
            "name": "test_should_serialize_plugin_to_json",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPluginModelTest.test_should_have_size_defined": {
            "name": "test_should_have_size_defined",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginConfigTest.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginConfigTest.test_should_create_parameters_from_config": {
            "name": "test_should_create_parameters_from_config",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginConfigTest.test_should_serialize_and_deserialize": {
            "name": "test_should_serialize_and_deserialize",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_audio_tag_repository.py": {
        "AudioTagDbRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "AudioTagDbRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "AudioTagDbRepositoryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTagDbRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTagDbRepositoryTest.test_should_insert_and_retrieve_tag": {
            "name": "test_should_insert_and_retrieve_tag",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTagDbRepositoryTest.test_should_get_id_by_name": {
            "name": "test_should_get_id_by_name",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTagDbRepositoryTest.test_should_query_multiple_by_param_and_return_none": {
            "name": "test_should_query_multiple_by_param_and_return_none",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTagDbRepositoryTest.test_should_query_multiple_by_param": {
            "name": "test_should_query_multiple_by_param",
            "location": 52,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_compressed_feature.py": {
        "CompressedFeatureModelTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedFeatureModelTest.test_should_serialize_and_deserialize_model": {
            "name": "test_should_serialize_and_deserialize_model",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedFeatureModelTest.test_should_serialize_to_json_and_back": {
            "name": "test_should_serialize_to_json_and_back",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_compression.py": {
        "CompressionTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTest.test_should_compress_and_decompress_with_none_compression": {
            "name": "test_should_compress_and_decompress_with_none_compression",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTest.test_should_compress_and_decompress_with_gzip": {
            "name": "test_should_compress_and_decompress_with_gzip",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTest.test_should_compress_and_decompress_with_lzma": {
            "name": "test_should_compress_and_decompress_with_lzma",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_conversion.py": {
        "UnitConverterTest.test_b_to_B": {
            "name": "test_b_to_B",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitConverterTest.test_B_to_b": {
            "name": "test_B_to_b",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitConverterTest.test_to_kilo": {
            "name": "test_to_kilo",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitConverterTest.test_to_mega": {
            "name": "test_to_mega",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitConverterTest.frames_to_sec": {
            "name": "frames_to_sec",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitConverterTest.sec_to_frames": {
            "name": "sec_to_frames",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_env_variable.py": {
        "OsEnvVariableAccessingTest.test_should_read_existing_variable": {
            "name": "test_should_read_existing_variable",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsEnvVariableAccessingTest.test_should_fallback_to_default_on_non_existing_variable": {
            "name": "test_should_fallback_to_default_on_non_existing_variable",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsEnvVariableAccessingTest.test_should_fallback_to_default_on_non_wrong_variable_type": {
            "name": "test_should_fallback_to_default_on_non_wrong_variable_type",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsEnvVariableAccessingTest.test_should_cast_int_of_0_to_false": {
            "name": "test_should_cast_int_of_0_to_false",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsEnvVariableAccessingTest.test_should_cast_int_of_1_to_true": {
            "name": "test_should_cast_int_of_1_to_true",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_extraction_request.py": {
        "ExtractionRequestModelTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionRequestModelTest.test_should_serialize_and_deserialize_model": {
            "name": "test_should_serialize_and_deserialize_model",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionRequestModelTest.test_should_serialize_to_json_and_back": {
            "name": "test_should_serialize_to_json_and_back",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionRequestModelTest.test_same_request_should_generate_same_uuid": {
            "name": "test_same_request_should_generate_same_uuid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionRequestModelTest.test_different_requests_should_generate_different_uuids": {
            "name": "test_different_requests_should_generate_different_uuids",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_feature_data_repository.py": {
        "FeatureDataRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "FeatureDataRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "FeatureDataRepositoryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureDataRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureDataRepositoryTest.test_should_insert_and_retrieve_id_by_task_id": {
            "name": "test_should_insert_and_retrieve_id_by_task_id",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureDataRepositoryTest.test_should_insert_and_retrieve_model_by_task_id": {
            "name": "test_should_insert_and_retrieve_model_by_task_id",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_feature_extraction.py": {
        "ExtractedFeatureMappingTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractedFeatureMappingTest.test_should_build_constant_step_feature": {
            "name": "test_should_build_constant_step_feature",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractedFeatureMappingTest.test_should_build_variable_step_feature": {
            "name": "test_should_build_variable_step_feature",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractedFeatureMappingTest.test_should_raise_error_on_wrong_feature_type": {
            "name": "test_should_raise_error_on_wrong_feature_type",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_feature_meta_extraction.py": {
        "FeatureMetaExtractionTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetaExtractionTest.test_should_calculate_stats_on_vector": {
            "name": "test_should_calculate_stats_on_vector",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetaExtractionTest.test_should_calculate_stats_on_square_matrix": {
            "name": "test_should_calculate_stats_on_square_matrix",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetaExtractionTest.test_should_calculate_stats_on_non_square_matrix": {
            "name": "test_should_calculate_stats_on_non_square_matrix",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_feature_meta_repository.py": {
        "FeatureMetaRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "FeatureMetaRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "FeatureMetaRepositoryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetaRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetaRepositoryTest.test_should_insert_and_retrieve_id_by_task_id": {
            "name": "test_should_insert_and_retrieve_id_by_task_id",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetaRepositoryTest.test_should_insert_and_retrieve_model_by_task_id": {
            "name": "test_should_insert_and_retrieve_model_by_task_id",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_file_accessor.py": {
        "TestFileAccessor.test_checking_if_file_exists": {
            "name": "test_checking_if_file_exists",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileAccessor.test_getting_file_name": {
            "name": "test_getting_file_name",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileAccessor.test_getting_extension": {
            "name": "test_getting_extension",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileAccessor.test_getting_dir_name": {
            "name": "test_getting_dir_name",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileAccessor.test_listing_files": {
            "name": "test_listing_files",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_file_meta.py": {
        "FileMetaModelTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetaModelTest.test_should_turn_into_serializable_form_and_back": {
            "name": "test_should_turn_into_serializable_form_and_back",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetaModelTest.test_should_serialize_to_json_and_back": {
            "name": "test_should_serialize_to_json_and_back",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_metric_extraction.py": {
        "FeatureMetricTransformationTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetricTransformationTest.test_should_extract_using_none_transformation_on_2d_feature": {
            "name": "test_should_extract_using_none_transformation_on_2d_feature",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetricTransformationTest.test_should_extract_using_select_row_transformation_on_3d_feature": {
            "name": "test_should_extract_using_select_row_transformation_on_3d_feature",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetricTransformationTest.test_should_extract_using_single_value_transformation": {
            "name": "test_should_extract_using_single_value_transformation",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureMetricTransformationTest.test_should_transform_segment_based_simple_variable_feature_into_ratio_metric": {
            "name": "test_should_transform_segment_based_simple_variable_feature_into_ratio_metric",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_metric_model.py": {
        "MetricDefinitionModelTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionModelTest.test_should_turn_into_serializable_form_and_back": {
            "name": "test_should_turn_into_serializable_form_and_back",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionModelTest.test_should_serialize_to_json_and_back_without_errors": {
            "name": "test_should_serialize_to_json_and_back_without_errors",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueModelTest.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueModelTest.test_should_turn_into_serializable_form_and_back": {
            "name": "test_should_turn_into_serializable_form_and_back",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueModelTest.test_should_serialize_to_json_and_back_without_errors": {
            "name": "test_should_serialize_to_json_and_back_without_errors",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_metric_repository.py": {
        "MetricDefinitionDbRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "MetricDefinitionDbRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "MetricDefinitionDbRepositoryTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionDbRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionDbRepositoryTest.test_should_insert_and_retrieve_by_id": {
            "name": "test_should_insert_and_retrieve_by_id",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionDbRepositoryTest.test_should_insert_multiple_for_single_plugin": {
            "name": "test_should_insert_multiple_for_single_plugin",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionDbRepositoryTest.test_should_fail_on_same_metric_name": {
            "name": "test_should_fail_on_same_metric_name",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricDefinitionDbRepositoryTest.test_should_filter_metrics_by_name": {
            "name": "test_should_filter_metrics_by_name",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueDbRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "MetricValueDbRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "MetricValueDbRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueDbRepositoryTest.setUp": {
            "name": "setUp",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueDbRepositoryTest.test_should_insert_and_retrieve_by_id": {
            "name": "test_should_insert_and_retrieve_by_id",
            "location": 101,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricValueDbRepositoryTest.test_should_select_metric_values_by_name": {
            "name": "test_should_select_metric_values_by_name",
            "location": 112,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_plugin_providing.py": {
        "TestPluginProviding.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPluginProviding._set_up_plugin_provider": {
            "name": "_set_up_plugin_provider",
            "location": 33,
            "return": [
                "audiopyle.lib.services.plugin_providing.VampyPluginProvider"
            ],
            "arguments": {
                "self": [],
                "blacklist": [
                    "Optional[Iterable[T]]",
                    "Iterable[T]",
                    "bool",
                    "None",
                    "salon.models.Stylist"
                ]
            }
        },
        "TestPluginProviding.test_should_return_all_plugins_when_black_list_is_empty": {
            "name": "test_should_return_all_plugins_when_black_list_is_empty",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPluginProviding.test_should_omit_certain_blacklisted_plugins": {
            "name": "test_should_omit_certain_blacklisted_plugins",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampInterfaceStub.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_vampy_key_to_outputs": [
                    "str",
                    "bytes"
                ]
            }
        },
        "VampInterfaceStub.get_outputs_of": {
            "name": "get_outputs_of",
            "location": 68,
            "return": [
                "bool",
                "int",
                "float",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "vampy_plugin_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "VampInterfaceStub.list_plugins": {
            "name": "list_plugins",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampHostInterfaceStub.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_vampy_key_to_lib_file_name": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VampHostInterfaceStub.get_library_for": {
            "name": "get_library_for",
            "location": 79,
            "return": [
                "str",
                "bool",
                "int",
                "annofabapi.models.Inspection"
            ],
            "arguments": {
                "self": [],
                "vampy_key": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_plugin_repository.py": {
        "VampyPluginDbRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "VampyPluginDbRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "VampyPluginDbRepositoryTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_repository_should_be_empty_on_start": {
            "name": "test_repository_should_be_empty_on_start",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_insert_vampy_plugin_and_list_it": {
            "name": "test_should_insert_vampy_plugin_and_list_it",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_insert_and_retrieve_vampy_plugin": {
            "name": "test_should_insert_and_retrieve_vampy_plugin",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_insert_and_delete_vampy_plugin": {
            "name": "test_should_insert_and_delete_vampy_plugin",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_insert_multiple_and_retrieve_all": {
            "name": "test_should_insert_multiple_and_retrieve_all",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_insert_multiple_and_retrieve_one_by_one": {
            "name": "test_should_insert_multiple_and_retrieve_one_by_one",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_query_multiple_by_vendor": {
            "name": "test_should_query_multiple_by_vendor",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_insert_multiple_and_filter_one_of_them": {
            "name": "test_should_insert_multiple_and_filter_one_of_them",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_raise_on_duplicate_insert": {
            "name": "test_should_raise_on_duplicate_insert",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_return_none_when_querying_by_non_existing_identifier": {
            "name": "test_should_return_none_when_querying_by_non_existing_identifier",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_raise_when_querying_by_absent_model": {
            "name": "test_should_raise_when_querying_by_absent_model",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_raise_when_deleting_by_absent_identifier": {
            "name": "test_should_raise_when_deleting_by_absent_identifier",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_create_non_existing_entity_using_get_or_create": {
            "name": "test_should_create_non_existing_entity_using_get_or_create",
            "location": 117,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_get_existing_entity_using_get_or_create": {
            "name": "test_should_get_existing_entity_using_get_or_create",
            "location": 124,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampyPluginDbRepositoryTest.test_should_list_just_keys": {
            "name": "test_should_list_just_keys",
            "location": 132,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_reading_file_segment.py": {
        "TestReadingRawAudio.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadingRawAudio.test_read_mp3_data_should_have_correct_length_and_value_range": {
            "name": "test_read_mp3_data_should_have_correct_length_and_value_range",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadingRawAudio.test_read_flac_data_should_have_correct_length_and_value_range": {
            "name": "test_read_flac_data_should_have_correct_length_and_value_range",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_request_repository.py": {
        "RequestRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "RequestRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "RequestRepositoryTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestRepositoryTest.test_should_insert_sub_entities_of_request_and_then_list_them": {
            "name": "test_should_insert_sub_entities_of_request_and_then_list_them",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestRepositoryTest.test_should_insert_the_request_with_sub_entities_automatically_and_then_list_them": {
            "name": "test_should_insert_the_request_with_sub_entities_automatically_and_then_list_them",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_result_data.py": {
        "AnalysisResultDataModelTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisResultDataModelTest.test_should_serialize_and_deserialize_analysis_result_data_model": {
            "name": "test_should_serialize_and_deserialize_analysis_result_data_model",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisRequestModelTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisRequestModelTest.test_should_serialize_and_deserialize_analysis_result_data_model": {
            "name": "test_should_serialize_and_deserialize_analysis_result_data_model",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_result_stats_repository.py": {
        "ResultStatsRepositoryTest.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "ResultStatsRepositoryTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "ResultStatsRepositoryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultStatsRepositoryTest.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultStatsRepositoryTest.test_should_insert_example_stats_and_retrieve_by_model": {
            "name": "test_should_insert_example_stats_and_retrieve_by_model",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultStatsRepositoryTest.test_should_insert_and_retrieve_by_task_id": {
            "name": "test_should_insert_and_retrieve_by_task_id",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_store_service.py": {
        "JsonFileStoreTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileStoreTest.test_should_report_file_does_not_exist": {
            "name": "test_should_report_file_does_not_exist",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileStoreTest.test_should_create_file_with_correct_permissions_and_report_it_exists_then_remove_it": {
            "name": "test_should_create_file_with_correct_permissions_and_report_it_exists_then_remove_it",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileStoreTest.test_should_raise_exception_on_removal_of_non_existing_file": {
            "name": "test_should_raise_exception_on_removal_of_non_existing_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileStoreTest.test_should_none_on_read_of_non_existing_file": {
            "name": "test_should_none_on_read_of_non_existing_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileStoreTest.test_created_file_should_be_on_the_list": {
            "name": "test_created_file_should_be_on_the_list",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileStoreTest.test_should_create_file_and_read_it": {
            "name": "test_should_create_file_and_read_it",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "GzippedJsonFileStoreTest.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GzippedJsonFileStoreTest.test_should_create_file_and_read_it": {
            "name": "test_should_create_file_and_read_it",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "LzmaJsonFileStoreTest.setUp": {
            "name": "setUp",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LzmaJsonFileStoreTest.test_should_create_file_and_read_it": {
            "name": "test_should_create_file_and_read_it",
            "location": 105,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/test_uuid_generation.py": {
        "TestUuidGeneration.test_should_generate_uuid": {
            "name": "test_should_generate_uuid",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUuidGeneration.test_should_generate_same_uuid_for_same_content": {
            "name": "test_should_generate_same_uuid_for_same_content",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/utils.py": {
        "setup_db_repository_test_class": {
            "name": "setup_db_repository_test_class",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ]
            }
        },
        "tear_down_db_repository_test_class": {
            "name": "tear_down_db_repository_test_class",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "get_absolute_path_for_project_file": {
            "name": "get_absolute_path_for_project_file",
            "location": 25,
            "return": [],
            "arguments": {
                "caller_file_object": [
                    "str"
                ],
                "project_file_path": [
                    "str"
                ]
            }
        },
        "get_audiopyle_root_dir": {
            "name": "get_audiopyle_root_dir",
            "location": 35,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "test_file_object": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "fake_function_from_method": {
            "name": "fake_function_from_method",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/test/__init__.py": {},
    "audiopyle-master/backend/audiopyle/testcases/test_audio_api.py": {
        "AudioApiTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioApiTest.test_should_list_audio_file": {
            "name": "test_should_list_audio_file",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioApiTest.test_should_list_file_details": {
            "name": "test_should_list_file_details",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_audio_tag_api.py": {
        "AudioTagApiTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTagApiTest.test_should_show_audio_tags_of_mp3_file": {
            "name": "test_should_show_audio_tags_of_mp3_file",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_automation_api.py": {
        "AutomationApiTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomationApiTest.test_should_return_method_not_allowed_on_get": {
            "name": "test_should_return_method_not_allowed_on_get",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_config_api.py": {
        "ConfigApiTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigApiTest.test_should_return_plugin_config_content": {
            "name": "test_should_return_plugin_config_content",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigApiTest.test_should_return_metric_config_content": {
            "name": "test_should_return_metric_config_content",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_coordinator_api.py": {
        "CoordinatorApiTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorApiTest.test_should_return_ok_after_boot": {
            "name": "test_should_return_ok_after_boot",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_extraction_api.py": {
        "CoordinatorApiTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorApiTest.test_should_accept_mp3_task_and_return_extracted_data": {
            "name": "test_should_accept_mp3_task_and_return_extracted_data",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorApiTest.test_should_accept_flac_task_and_return_extracted_data": {
            "name": "test_should_accept_flac_task_and_return_extracted_data",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorApiTest._retrieve_and_verify_analysis_data": {
            "name": "_retrieve_and_verify_analysis_data",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extraction_task_id": [
                    "int",
                    "str",
                    "float"
                ],
                "request_api_url": [
                    "int",
                    "str",
                    "float"
                ],
                "expected_status_code": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "expected_result_len": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "Tuple[Any,int]",
                    "Tuple[Union[Any,int]]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "expected_time_step_range": [
                    "Tuple[Union[float,float]]",
                    "int",
                    "Tuple[float,float]",
                    "str",
                    "Dict[int,dict]",
                    "bool"
                ]
            }
        },
        "CoordinatorApiTest._request_extraction_and_verify": {
            "name": "_request_extraction_and_verify",
            "location": 143,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "api_url": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ],
                "request": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ],
                "expected_status_code": [
                    "int",
                    "str"
                ]
            }
        },
        "CoordinatorApiTest._wait_for_extraction_to_complete_and_verify": {
            "name": "_wait_for_extraction_to_complete_and_verify",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extraction_task_id": [
                    "str",
                    "bool"
                ],
                "expected_status_code": [
                    "str",
                    "bool",
                    "int"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "int"
                ],
                "tick": [
                    "str",
                    "bool",
                    "int"
                ],
                "api_url": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "CoordinatorApiTest._retrieve_and_verify_request_details": {
            "name": "_retrieve_and_verify_request_details",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "request_api_url": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "status_code": [
                    "int",
                    "constants.HttpStatusCode",
                    "HttpStatusCode"
                ],
                "expected_audio_meta": [
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ],
                "expected_audio_tag": [
                    "Dict[str,Any]",
                    "int",
                    "Dict",
                    "bytes"
                ],
                "expected_plugin_meta": [
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ],
                "expected_plugin_block_size": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple[Any,int]",
                    "Tuple[Union[Any,int]]"
                ],
                "expected_plugin_step_size": [
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ]
            }
        },
        "CoordinatorApiTest._delete_request_and_verify": {
            "name": "_delete_request_and_verify",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_api_url": [
                    "str",
                    "int",
                    "Dict[str,str]"
                ],
                "task_id": [
                    "str",
                    "int",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_plugin_api.py": {
        "PluginApiTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginApiTest.test_should_list_plugins": {
            "name": "test_should_list_plugins",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginApiTest.test_should_read_plugin_details": {
            "name": "test_should_read_plugin_details",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginApiTest.test_should_return_404_on_non_existing_plugin_details": {
            "name": "test_should_return_404_on_non_existing_plugin_details",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/test_smoke_ui.py": {
        "UiSmokeTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UiSmokeTest.test_should_return_ok_on_ui": {
            "name": "test_should_return_ok_on_ui",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/utils.py": {
        "get_api_host": {
            "name": "get_api_host",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_api_port": {
            "name": "get_api_port",
            "location": 17,
            "return": [
                "bool",
                "Mapping",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_ui_host": {
            "name": "get_ui_host",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_ui_port": {
            "name": "get_ui_port",
            "location": 25,
            "return": [
                "bool",
                "Mapping",
                "List[str]"
            ],
            "arguments": {}
        },
        "keep_polling_until": {
            "name": "keep_polling_until",
            "location": 33,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict",
                    "datetime.date",
                    "int",
                    "Optional[int]",
                    "None",
                    "Union[str,Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "expected_status": [
                    "int",
                    "str",
                    "Dict",
                    "requests.Response"
                ],
                "timeout": [
                    "float",
                    "str",
                    "int",
                    "bytes"
                ],
                "tick": [
                    "float",
                    "int",
                    "str",
                    "Optional[str]",
                    "lib.model.user.user.User",
                    "List[int]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/testcases/__init__.py": {},
    "audiopyle-master/backend/audiopyle/worker/extraction_service.py": {
        "FeatureExtractionService.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_provider": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "audio_file_store": [
                    "str"
                ],
                "audio_tag_repo": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "audio_meta_repo": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "plugin_repo": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "plugin_config_repo": [
                    "str",
                    "Dict",
                    "bool",
                    "Iterable[str]"
                ],
                "metric_definition_repo": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "metric_value_repo": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Sequence[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "feature_data_repo": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Tuple[int,int]",
                    "None",
                    "datetime.datetime",
                    "Optional[str]",
                    "List[A]",
                    "List[annofabapi.models.SingleAnnotation]"
                ],
                "feature_meta_repo": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "request_repo": [
                    "str",
                    "bool",
                    "float"
                ],
                "result_stats_repo": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "FeatureExtractionService.extract_feature_and_store": {
            "name": "extract_feature_and_store",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "audiopyle.lib.abstractions.api_model.ApiRequest"
                ]
            }
        },
        "FeatureExtractionService._build_plugin_config": {
            "name": "_build_plugin_config",
            "location": 91,
            "return": [
                "audiopyle.lib.models.plugin.VampyPluginParams"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FeatureExtractionService._store_results_in_db": {
            "name": "_store_results_in_db",
            "location": 99,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "metric_values": [
                    "str",
                    "Dict",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "feature_dto": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes",
                    "Optional[int]"
                ],
                "feature_meta": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        },
        "FeatureExtractionService._build_feature_meta": {
            "name": "_build_feature_meta",
            "location": 116,
            "return": [
                "Tuple[(audiopyle.lib.models.result.FeatureMeta, float)]"
            ],
            "arguments": {
                "self": [],
                "feature_object": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "task_id": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "FeatureExtractionService._compress_feature": {
            "name": "_compress_feature",
            "location": 121,
            "return": [
                "Tuple[(audiopyle.lib.models.compressed_feature.CompressedFeatureDTO, float)]"
            ],
            "arguments": {
                "self": [],
                "feature_object": [
                    "str",
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "task_id": [
                    "int",
                    "str",
                    "raiden.utils.ChainID",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "FeatureExtractionService._do_extraction": {
            "name": "_do_extraction",
            "location": 127,
            "return": [
                "Tuple[(Union[(audiopyle.lib.models.feature.VampyConstantStepFeature, audiopyle.lib.models.feature.VampyVariableStepFeature)], float)]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "tracim.models.data.Content",
                    "bool"
                ],
                "plugin": [
                    "str",
                    "bool",
                    "int"
                ],
                "input_audio_meta": [
                    "str",
                    "bool",
                    "int"
                ],
                "wav_data": [
                    "str",
                    "bool",
                    "int"
                ],
                "plugin_config": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "FeatureExtractionService._read_raw_audio_data_from": {
            "name": "_read_raw_audio_data_from",
            "location": 136,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "self": [],
                "input_file_path": [
                    "str"
                ]
            }
        },
        "FeatureExtractionService._read_file_meta": {
            "name": "_read_file_meta",
            "location": 142,
            "return": [
                "Tuple[(audiopyle.lib.models.file_meta.FileMeta, audiopyle.lib.models.file_meta.CompressedAudioFileMeta, Any)]"
            ],
            "arguments": {
                "self": [],
                "audio_file_absolute_path": [
                    "int",
                    "str"
                ]
            }
        },
        "FeatureExtractionService._extract_metrics": {
            "name": "_extract_metrics",
            "location": 152,
            "return": [
                "Tuple[(List[audiopyle.lib.models.metric.MetricValue], float)]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "audio_meta": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "plugin_key": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "metric_config": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,float]]",
                    "Dict[str,float]",
                    "Optional[Match]",
                    "Match",
                    "Optional[dict]",
                    "Dict",
                    "Optional[zerver.models.UserProfile]"
                ],
                "feature": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "FeatureExtractionService._calculate_metric": {
            "name": "_calculate_metric",
            "location": 163,
            "return": [
                "audiopyle.lib.models.metric.MetricValue"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "str",
                    "int",
                    "audiopyle.lib.models.metric.MetricDefinition"
                ],
                "metric_config": [
                    "str"
                ],
                "metric_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "plugin_key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "task_id": [
                    "str",
                    "int",
                    "audiopyle.lib.models.metric.MetricDefinition"
                ],
                "audio_meta": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "topicdb.core.models.language.Language"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/worker/result_model.py": {
        "map_celery_status": {
            "name": "map_celery_status",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "celery_status": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "build_extraction_result": {
            "name": "build_extraction_result",
            "location": 52,
            "return": [
                "ExtractionResult"
            ],
            "arguments": {
                "celery_async_result": [
                    "str",
                    "float"
                ]
            }
        },
        "ExtractionResult.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "status": [
                    "str",
                    "int",
                    "MutableMapping",
                    "None",
                    "bool",
                    "MutableMapping[str,Any]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ExtractionResult.to_serializable": {
            "name": "to_serializable",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionResult.from_serializable": {
            "name": "from_serializable",
            "location": 46,
            "return": [
                "Dict[Text,TaskStatus]",
                "str",
                "Callable",
                "Callable[[None,None],bool]",
                "busboy.model.Passage"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "serialized": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/worker/task_api.py": {
        "run_task": {
            "name": "run_task",
            "location": 8,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int",
                    "bytes",
                    "celery.Task"
                ],
                "task_id": [
                    "str",
                    "int",
                    "bytes",
                    "celery.Task"
                ]
            }
        },
        "retrieve_result": {
            "name": "retrieve_result",
            "location": 13,
            "return": [
                "audiopyle.worker.result_model.ExtractionResult"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "delete_result": {
            "name": "delete_result",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "has_finished": {
            "name": "has_finished",
            "location": 31,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/worker/__init__.py": {},
    "audiopyle-master/backend/audiopyle/worker/engine/celery.py": {
        "get_celery": {
            "name": "get_celery",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "audiopyle-master/backend/audiopyle/worker/engine/config.py": {},
    "audiopyle-master/backend/audiopyle/worker/engine/tasks.py": {
        "extract_feature": {
            "name": "extract_feature",
            "location": 25,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "extraction_request": [
                    "lunch_buddies.lib.service_contexServiceContext"
                ]
            }
        }
    },
    "audiopyle-master/backend/audiopyle/worker/engine/__init__.py": {},
    "audiopyle-master/scripts/rewrite_flac_tags.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "flac_file_path": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        }
    }
}
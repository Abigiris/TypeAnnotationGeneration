{
    "autograder-sandbox-master/setup.py": {},
    "autograder-sandbox-master/autograder_sandbox/autograder_sandbox.py": {
        "_get_next_linux_uid": {
            "name": "_get_next_linux_uid",
            "location": 395,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "AutograderSandbox.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[int]",
                    "int"
                ],
                "docker_image": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "allow_network_access": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "environment_variables": [
                    "Iterable[str]",
                    "None",
                    "List[str]",
                    "Dict",
                    "List[object]"
                ],
                "container_create_timeout": [
                    "str",
                    "None",
                    "bool",
                    "Mapping",
                    "int"
                ],
                "debug": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Iterable[str]"
                ]
            }
        },
        "AutograderSandbox.__enter__": {
            "name": "__enter__",
            "location": 83,
            "return": [
                "AutograderSandbox"
            ],
            "arguments": {
                "self": [
                    "_TAutograderSandbox@@AutograderSandbox@@"
                ]
            }
        },
        "AutograderSandbox.__exit__": {
            "name": "__exit__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.reset": {
            "name": "reset",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.restart": {
            "name": "restart",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox._create_and_start": {
            "name": "_create_and_start",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox._destroy": {
            "name": "_destroy",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox._stop": {
            "name": "_stop",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.name": {
            "name": "name",
            "location": 157,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.docker_image": {
            "name": "docker_image",
            "location": 164,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.allow_network_access": {
            "name": "allow_network_access",
            "location": 180,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "AutograderSandbox.environment_variables": {
            "name": "environment_variables",
            "location": 191,
            "return": [
                "Dict",
                "str",
                "Dict[str,str]",
                "Type",
                "Dict[str,List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.run_command": {
            "name": "run_command",
            "location": 201,
            "return": [
                "CompletedCommand"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "max_num_processes": [
                    "Optional[float]",
                    "None",
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "max_stack_size": [
                    "None",
                    "Optional[float]",
                    "int",
                    "float",
                    "Optional[Union[int,str]]",
                    "str",
                    "Optional[str]",
                    "Union[str,int]"
                ],
                "max_virtual_memory": [
                    "None",
                    "Optional[float]",
                    "bool",
                    "float",
                    "int",
                    "str",
                    "Union[str,int]",
                    "Optional[Union[int,str]]"
                ],
                "as_root": [
                    "bool",
                    "str",
                    "float"
                ],
                "stdin": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "Callable[,Iterable[float]]",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "check": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "truncate_stdout": [
                    "bool",
                    "None",
                    "float",
                    "List[str]",
                    "Optional[int]",
                    "Callable[,Iterable[float]]",
                    "int",
                    "Optional[List[str]]"
                ],
                "truncate_stderr": [
                    "bool",
                    "None",
                    "float",
                    "List[str]",
                    "Optional[int]",
                    "Callable[,Iterable[float]]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "AutograderSandbox.add_files": {
            "name": "add_files",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandbox.add_and_rename_file": {
            "name": "add_and_rename_file",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "new_filename": [
                    "str"
                ]
            }
        },
        "AutograderSandbox._chown_files": {
            "name": "_chown_files",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "str"
                ]
            }
        },
        "CompletedCommand.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "return_code": [
                    "int"
                ],
                "stdout": [
                    "str",
                    "List[list[str]]",
                    "List[List[str]]",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "stderr": [
                    "str",
                    "List[list[str]]",
                    "List[List[str]]",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "timed_out": [
                    "str",
                    "List[list[str]]",
                    "List[List[str]]",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "stdout_truncated": [
                    "str",
                    "List[list[str]]",
                    "List[List[str]]",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "stderr_truncated": [
                    "str",
                    "List[list[str]]",
                    "List[List[str]]",
                    "bool",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "None",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "autograder-sandbox-master/autograder_sandbox/tests.py": {
        "kb_to_bytes": {
            "name": "kb_to_bytes",
            "location": 18,
            "return": [
                "int",
                "List[str]",
                "List[list[float]]",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "num_kb": [
                    "int",
                    "List[list[float]]",
                    "List[str]",
                    "List[List[float]]",
                    "Optional[List[str]]",
                    "bool",
                    "Callable[[Any],int]"
                ]
            }
        },
        "mb_to_bytes": {
            "name": "mb_to_bytes",
            "location": 22,
            "return": [
                "str",
                "List[List[int]]",
                "dict",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "num_mb": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "gb_to_bytes": {
            "name": "gb_to_bytes",
            "location": 26,
            "return": [
                "str",
                "List[List[int]]",
                "dict",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "num_gb": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_run_stack_usage_prog": {
            "name": "_run_stack_usage_prog",
            "location": 563,
            "return": [
                "Any"
            ],
            "arguments": {
                "mem_to_use": [
                    "int",
                    "float",
                    "bool"
                ],
                "mem_limit": [
                    "int",
                    "float",
                    "bool"
                ],
                "sandbox": [
                    "bool",
                    "List",
                    "autograder_sandbox.AutograderSandbox",
                    "int"
                ]
            }
        },
        "_run_heap_usage_prog": {
            "name": "_run_heap_usage_prog",
            "location": 592,
            "return": [
                "Any"
            ],
            "arguments": {
                "mem_to_use": [
                    "int",
                    "float",
                    "bool"
                ],
                "mem_limit": [
                    "int",
                    "float",
                    "bool"
                ],
                "sandbox": [
                    "bool",
                    "List",
                    "autograder_sandbox.AutograderSandbox",
                    "int"
                ]
            }
        },
        "_compile_in_sandbox": {
            "name": "_compile_in_sandbox",
            "location": 622,
            "return": [
                "str"
            ],
            "arguments": {
                "sandbox": [
                    "str",
                    "autograder_sandbox.AutograderSandbox",
                    "dict"
                ]
            }
        },
        "_run_process_spawning_prog": {
            "name": "_run_process_spawning_prog",
            "location": 630,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_processes_to_spawn": [
                    "bool",
                    "Sequence",
                    "None",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Iterable[T]"
                ],
                "process_limit": [
                    "bool",
                    "Sequence",
                    "None",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Iterable[T]"
                ],
                "sandbox": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_add_string_to_sandbox_as_file": {
            "name": "_add_string_to_sandbox_as_file",
            "location": 661,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "autograder_sandbox.AutograderSandbox"
                ],
                "file_extension": [
                    "str",
                    "BinaryIO",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "autograder_sandbox.AutograderSandbox"
                ],
                "sandbox": [
                    "str",
                    "autograder_sandbox.AutograderSandbox",
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "_call_function_and_allocate_sandbox_if_needed": {
            "name": "_call_function_and_allocate_sandbox_if_needed",
            "location": 670,
            "return": [
                "type",
                "Type",
                "Optional[Type[BaseException]]",
                "dict",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ],
                "sandbox": [
                    "str"
                ]
            }
        },
        "AutograderSandboxInitTestCase.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxInitTestCase.test_default_init": {
            "name": "test_default_init",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxInitTestCase.test_non_default_init": {
            "name": "test_non_default_init",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxBasicRunCommandTestCase.setUp": {
            "name": "setUp",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxBasicRunCommandTestCase.test_run_legal_command_non_root": {
            "name": "test_run_legal_command_non_root",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxBasicRunCommandTestCase.test_run_illegal_command_non_root": {
            "name": "test_run_illegal_command_non_root",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxBasicRunCommandTestCase.test_run_command_as_root": {
            "name": "test_run_command_as_root",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxBasicRunCommandTestCase.test_run_command_raise_on_error": {
            "name": "test_run_command_raise_on_error",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxBasicRunCommandTestCase.test_run_command_executable_does_not_exist_no_error": {
            "name": "test_run_command_executable_does_not_exist_no_error",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.setUp": {
            "name": "setUp",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.tearDown": {
            "name": "tearDown",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase._write_and_seek": {
            "name": "_write_and_seek",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "IO[bytes]",
                    "Union[str, os.PathLike]",
                    "bytes",
                    "Union[str, bytes]",
                    "str",
                    "BinaryIO"
                ],
                "content": [
                    "bytes",
                    "BinaryIO",
                    "str",
                    "IO",
                    "IO[bytes]",
                    "Union[str,os.PathLike]",
                    "Union[str,bytes]"
                ]
            }
        },
        "AutograderSandboxMiscTestCase.test_very_large_io_no_truncate": {
            "name": "test_very_large_io_no_truncate",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_truncate_stdout": {
            "name": "test_truncate_stdout",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_truncate_stderr": {
            "name": "test_truncate_stderr",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_run_command_with_input": {
            "name": "test_run_command_with_input",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_command_tries_to_read_from_stdin_when_stdin_arg_is_none": {
            "name": "test_command_tries_to_read_from_stdin_when_stdin_arg_is_none",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_return_code_reported_and_stderr_recorded": {
            "name": "test_return_code_reported_and_stderr_recorded",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_context_manager": {
            "name": "test_context_manager",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_sandbox_environment_variables_set": {
            "name": "test_sandbox_environment_variables_set",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_reset": {
            "name": "test_reset",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_restart_added_files_preserved": {
            "name": "test_restart_added_files_preserved",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_entire_process_tree_killed_on_timeout": {
            "name": "test_entire_process_tree_killed_on_timeout",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_try_to_change_cmd_runner": {
            "name": "test_try_to_change_cmd_runner",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxMiscTestCase.test_container_create_timeout": {
            "name": "test_container_create_timeout",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check_call": []
            }
        },
        "AutograderSandboxEncodeDecodeIOTestCase.setUp": {
            "name": "setUp",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxEncodeDecodeIOTestCase.tearDown": {
            "name": "tearDown",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxEncodeDecodeIOTestCase.test_non_unicode_chars_in_normal_output": {
            "name": "test_non_unicode_chars_in_normal_output",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxEncodeDecodeIOTestCase.test_non_unicode_chars_in_output_command_timed_out": {
            "name": "test_non_unicode_chars_in_output_command_timed_out",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxEncodeDecodeIOTestCase.test_non_unicode_chars_in_output_on_process_error": {
            "name": "test_non_unicode_chars_in_output_on_process_error",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.setUp": {
            "name": "setUp",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_run_command_timeout_exceeded": {
            "name": "test_run_command_timeout_exceeded",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_exceeds_process_limit": {
            "name": "test_command_exceeds_process_limit",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_doesnt_exceed_process_limit": {
            "name": "test_command_doesnt_exceed_process_limit",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_spawns_no_processes_with_limit_zero": {
            "name": "test_command_spawns_no_processes_with_limit_zero",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_exceeds_stack_size_limit": {
            "name": "test_command_exceeds_stack_size_limit",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_doesnt_exceed_stack_size_limit": {
            "name": "test_command_doesnt_exceed_stack_size_limit",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_exceeds_virtual_mem_limit": {
            "name": "test_command_exceeds_virtual_mem_limit",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_command_doesnt_exceed_virtual_mem_limit": {
            "name": "test_command_doesnt_exceed_virtual_mem_limit",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_run_subsequent_commands_with_different_resource_limits": {
            "name": "test_run_subsequent_commands_with_different_resource_limits",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_stack_resource_limit_test": {
            "name": "_do_stack_resource_limit_test",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_to_use": [
                    "int",
                    "str",
                    "None",
                    "autograder_sandbox.AutograderSandbox",
                    "Optional[int]",
                    "bool"
                ],
                "mem_limit": [
                    "int",
                    "str",
                    "None",
                    "autograder_sandbox.AutograderSandbox",
                    "Optional[int]",
                    "bool"
                ],
                "sandbox": [
                    "int",
                    "autograder_sandbox.AutograderSandbox",
                    "bytes",
                    "str",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_heap_resource_limit_test": {
            "name": "_do_heap_resource_limit_test",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_to_use": [
                    "int",
                    "str",
                    "None",
                    "autograder_sandbox.AutograderSandbox",
                    "Optional[int]",
                    "bool"
                ],
                "mem_limit": [
                    "int",
                    "str",
                    "None",
                    "autograder_sandbox.AutograderSandbox",
                    "Optional[int]",
                    "bool"
                ],
                "sandbox": [
                    "int",
                    "autograder_sandbox.AutograderSandbox",
                    "bytes",
                    "str",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_process_resource_limit_test": {
            "name": "_do_process_resource_limit_test",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_processes_to_spawn": [
                    "int",
                    "float",
                    "bool",
                    "Union[int,float]"
                ],
                "process_limit": [
                    "int",
                    "float",
                    "bool",
                    "Union[int,float]"
                ],
                "sandbox": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase._check_resource_limit_test_result": {
            "name": "_check_resource_limit_test_result",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret_code": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "resource_used": [
                    "int",
                    "str"
                ],
                "resource_limit": [
                    "int",
                    "str"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase.test_multiple_containers_dont_exceed_ulimits": {
            "name": "test_multiple_containers_dont_exceed_ulimits",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_parallel_container_stack_limit_test": {
            "name": "_do_parallel_container_stack_limit_test",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_containers": [
                    "int",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "mem_to_use": [
                    "int",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "mem_limit": [
                    "int",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_parallel_container_heap_limit_test": {
            "name": "_do_parallel_container_heap_limit_test",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_containers": [
                    "int",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "mem_to_use": [
                    "int",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "mem_limit": [
                    "int",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_parallel_container_process_limit_test": {
            "name": "_do_parallel_container_process_limit_test",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_containers": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "num_processes_to_spawn": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "process_limit": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "AutograderSandboxResourceLimitTestCase._do_parallel_container_resource_limit_test": {
            "name": "_do_parallel_container_resource_limit_test",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_to_run": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "num_containers": [
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "amount_to_use": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "resource_limit": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "_run_stack_usage_prog._run_prog": {
            "name": "_run_prog",
            "location": 564,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "_run_heap_usage_prog._run_prog": {
            "name": "_run_prog",
            "location": 593,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "_run_process_spawning_prog._run_prog": {
            "name": "_run_prog",
            "location": 632,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "sandbox": [
                    "bool"
                ]
            }
        },
        "AutograderSandboxNetworkAccessTestCase.setUp": {
            "name": "setUp",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxNetworkAccessTestCase.test_networking_disabled": {
            "name": "test_networking_disabled",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxNetworkAccessTestCase.test_networking_enabled": {
            "name": "test_networking_enabled",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxNetworkAccessTestCase.test_set_allow_network_access": {
            "name": "test_set_allow_network_access",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxNetworkAccessTestCase.test_error_set_allow_network_access_while_running": {
            "name": "test_error_set_allow_network_access_while_running",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxCopyFilesTestCase.test_copy_files_into_sandbox": {
            "name": "test_copy_files_into_sandbox",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxCopyFilesTestCase.test_copy_and_rename_file_into_sandbox": {
            "name": "test_copy_and_rename_file_into_sandbox",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxCopyFilesTestCase.test_add_files_root_owner_and_read_only": {
            "name": "test_add_files_root_owner_and_read_only",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxCopyFilesTestCase.test_overwrite_non_read_only_file": {
            "name": "test_overwrite_non_read_only_file",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutograderSandboxCopyFilesTestCase.test_error_add_files_invalid_owner": {
            "name": "test_error_add_files_invalid_owner",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autograder-sandbox-master/autograder_sandbox/__init__.py": {},
    "autograder-sandbox-master/autograder_sandbox/docker-image-setup/cmd_runner.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 107,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "main.set_subprocess_rlimits": {
            "name": "set_subprocess_rlimits",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "autograder-sandbox-master/docs/conf.py": {}
}
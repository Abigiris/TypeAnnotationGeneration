{
    "autorecurse-master/build/util/autorecurse_path.py": {
        "autorecurse_path": {
            "name": "autorecurse_path",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "autorecurse-master/build/util/update_header.py": {
        "Cli.make": {
            "name": "make",
            "location": 46,
            "return": [
                "Cli",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Cli.execute": {
            "name": "execute",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "FileManager.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager.make": {
            "name": "make",
            "location": 73,
            "return": [
                "FileManager",
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "FileManager._directory": {
            "name": "_directory",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager.temporary_directory": {
            "name": "temporary_directory",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager._make_directory": {
            "name": "_make_directory",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileManager.create_temporary_file": {
            "name": "create_temporary_file",
            "location": 90,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.make": {
            "name": "make",
            "location": 107,
            "return": [
                "FileInfo",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "insert_before": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "skip_count": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FileInfo.insert_before": {
            "name": "insert_before",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.skip_count": {
            "name": "skip_count",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.make": {
            "name": "make",
            "location": 137,
            "return": [
                "Substitution",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "target_path": [
                    "str"
                ],
                "replacement_path": [
                    "str"
                ],
                "comment_prefix": [
                    "str"
                ],
                "file_manager": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Substitution._init_first_and_last_replacement_lines": {
            "name": "_init_first_and_last_replacement_lines",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.execute": {
            "name": "execute",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution._perform_substitution": {
            "name": "_perform_substitution",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_file": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, List[Any]]",
                    "dict[str, list[typing.Any]]"
                ],
                "target_file": [
                    "str"
                ],
                "replacement_file": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, List[Any]]",
                    "dict[str, list[typing.Any]]"
                ],
                "file_info": [
                    "str",
                    "float",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "Substitution._collect_file_info": {
            "name": "_collect_file_info",
            "location": 180,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.Iterator",
                    "Iterator[str]",
                    "int",
                    "str",
                    "\"RequirementsFile\"",
                    "typing.IO",
                    "IO"
                ]
            }
        },
        "Substitution._comment_line": {
            "name": "_comment_line",
            "location": 200,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Cli.ArgumentParserFactory.make": {
            "name": "make",
            "location": 19,
            "return": [
                "tuple",
                "Substitution"
            ],
            "arguments": {}
        },
        "Cli.ArgumentParserFactory._make": {
            "name": "_make",
            "location": 25,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "Cli.ArgumentParserFactory._constructor_args": {
            "name": "_constructor_args",
            "location": 31,
            "return": [
                "dict[typing.Text, typing.Text]",
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "Cli.ArgumentParserFactory._setup_parser": {
            "name": "_setup_parser",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "ArgumentParser"
                ]
            }
        }
    },
    "autorecurse-master/python3/autorecurse_path.py": {
        "script_dir": {
            "name": "script_dir",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "autorecurse_path": {
            "name": "autorecurse_path",
            "location": 15,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "autorecurse-master/python3/main.py": {},
    "autorecurse-master/python3/setup.py": {},
    "autorecurse-master/python3/unittest_main.py": {
        "script_dir": {
            "name": "script_dir",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_suite": {
            "name": "test_suite",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "autorecurse-master/python3/src/autorecurse/cli.py": {
        "main": {
            "name": "main",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Cli.make": {
            "name": "make",
            "location": 77,
            "return": [
                "Cli",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Cli.execute": {
            "name": "execute",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Cli._configure_application": {
            "name": "_configure_application",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "bool",
                    "str"
                ]
            }
        },
        "Cli._configure_directory_mapping": {
            "name": "_configure_directory_mapping",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "argparse.Namespace",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "typing.Any",
                    "Optional[Dict]",
                    "Optional[Any]"
                ]
            }
        },
        "Cli._configure_parse_pipeline": {
            "name": "_configure_parse_pipeline",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "argparse.Namespace",
                    "list[str]",
                    "str",
                    "Optional[vtes.game.Game.Namespace]",
                    "typing.Callable[, ]",
                    "List[str]",
                    "argparse.Action",
                    "Callable"
                ]
            }
        },
        "Cli.ArgumentParserFactory.create_parser": {
            "name": "create_parser",
            "location": 20,
            "return": [
                "Optional[bool]",
                "argparse.Namespace",
                "str",
                "Optional[Dict[str, str]]",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "Cli.ArgumentParserFactory._create_parser": {
            "name": "_create_parser",
            "location": 26,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "Cli.ArgumentParserFactory._init_args": {
            "name": "_init_args",
            "location": 36,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]",
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "Tuple[str]",
                "list"
            ],
            "arguments": {}
        },
        "Cli.ArgumentParserFactory._setup_parser": {
            "name": "_setup_parser",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "ArgumentParser",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Cli.ArgumentParserFactory._init_gnumake": {
            "name": "_init_gnumake",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "bool",
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "Optional[str]"
                ]
            }
        },
        "Cli.ArgumentParserFactory._init_targetlisting": {
            "name": "_init_targetlisting",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "bool",
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "Optional[str]"
                ]
            }
        },
        "Cli.ArgumentParserFactory._init_nestedrules": {
            "name": "_init_nestedrules",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "bool",
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "Optional[str]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/config.py": {
        "ConfigFileLocator.make": {
            "name": "make",
            "location": 17,
            "return": [
                "ConfigFileLocator",
                "os.PathLike",
                "str",
                "bool",
                "List[bytes]",
                "autorecurse.gnumake.data.Makefile"
            ],
            "arguments": {}
        },
        "ConfigFileLocator.include_standard_config_files": {
            "name": "include_standard_config_files",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "str",
                    "Union[str, IO[bytes]]",
                    "typing.IO"
                ]
            }
        },
        "ConfigFileLocator._default_config_resource_name": {
            "name": "_default_config_resource_name",
            "location": 30,
            "return": [
                "typing.Text",
                "configparser.ConfigParser",
                "List[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigFileLocator._platform_config_resource_name": {
            "name": "_platform_config_resource_name",
            "location": 33,
            "return": [
                "bool",
                "typing.Text",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigFileLocator._resource_name_to_file": {
            "name": "_resource_name_to_file",
            "location": 48,
            "return": [
                "str",
                "TextIOWrapper"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "ConfigFileConverter.include_config_file_path": {
            "name": "include_config_file_path",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "ConfigFileConverter.include_config_file": {
            "name": "include_config_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "typing.Sequence[str]",
                    "io.TextIOBase",
                    "list[dict[str, typing.Any]]",
                    "Sequence[str]",
                    "list[str]",
                    "str",
                    "list[]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "list[dict[, ]]",
                    "list[typing.Union[str,int]]",
                    "list",
                    "List[dict]",
                    "Iterable[str]",
                    "[str]",
                    "List[Union[str, int]]"
                ]
            }
        },
        "DirectoryMappingBuilder.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryMappingBuilder.make": {
            "name": "make",
            "location": 70,
            "return": [
                "DirectoryMappingBuilder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "DirectoryMappingBuilder.include_config_file_path": {
            "name": "include_config_file_path",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DirectoryMappingBuilder.include_config_file": {
            "name": "include_config_file",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "io.TextIOBase",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "DirectoryMappingBuilder._process_config": {
            "name": "_process_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "configparser.ConfigParser",
                    "Sequence",
                    "bool",
                    "dict"
                ]
            }
        },
        "DirectoryMappingBuilder.build_directory_mapping": {
            "name": "build_directory_mapping",
            "location": 95,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryMappingBuilder._expand_path": {
            "name": "_expand_path",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/__init__.py": {},
    "autorecurse-master/python3/src/autorecurse/common/storage.py": {
        "DirectoryMapping.get_directory": {
            "name": "get_directory",
            "location": 9,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "symbolic_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DirectoryMapping.make_directory": {
            "name": "make_directory",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbolic_name": [
                    "str"
                ]
            }
        },
        "DictionaryDirectoryMapping.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictionaryDirectoryMapping.make": {
            "name": "make",
            "location": 24,
            "return": [
                "DictionaryDirectoryMapping",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mapping": [
                    "Dict[str, str]",
                    "bool",
                    "dict[str, str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "DictionaryDirectoryMapping._setup": {
            "name": "_setup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Iterable[Dict[str, Any]]"
                ],
                "mapping": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Iterable[Dict[str, Any]]",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "DictionaryDirectoryMapping.get_directory": {
            "name": "get_directory",
            "location": 35,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "symbolic_name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DefaultDirectoryMapping.make": {
            "name": "make",
            "location": 44,
            "return": [
                "bool",
                "dict",
                "float",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "DefaultDirectoryMapping.set": {
            "name": "set",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mapping": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/common/__init__.py": {},
    "autorecurse-master/python3/src/autorecurse/gnumake/data.py": {
        "Makefile.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Makefile.make": {
            "name": "make",
            "location": 16,
            "return": [
                "Makefile",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Makefile._setup": {
            "name": "_setup",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Makefile.make_with_exec_path": {
            "name": "make_with_exec_path",
            "location": 27,
            "return": [
                "Makefile",
                "int",
                "str"
            ],
            "arguments": {
                "exec_path": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "Makefile._setup_with_exec_path": {
            "name": "_setup_with_exec_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "exec_path": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "Makefile.path": {
            "name": "path",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Makefile.exec_path": {
            "name": "exec_path",
            "location": 67,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bool"
                ]
            }
        },
        "Makefile.file_path": {
            "name": "file_path",
            "location": 78,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Target.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.make": {
            "name": "make",
            "location": 93,
            "return": [
                "Target",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prerequisites": [
                    "list[typing.Union[str,str,bytes,str,bytes,str,bytes,str,bytes,str,bytes,str,bytes,str,bytes]]",
                    "str",
                    "List[str]",
                    "bytes",
                    "bool",
                    "int"
                ],
                "order_only_prerequisites": [
                    "list[typing.Union[str,str,str,str,str]]",
                    "str",
                    "List[str]",
                    "Iterable[Any]",
                    "int",
                    "list",
                    "Optional[Union[str, Any]]",
                    "bool"
                ],
                "recipe_lines": [
                    "list[typing.Union[str,str,str,str,str]]",
                    "str",
                    "List[str]",
                    "Iterable[Any]",
                    "int",
                    "list",
                    "Optional[Union[str, Any]]",
                    "bool"
                ]
            }
        },
        "Target.file": {
            "name": "file",
            "location": 107,
            "return": [
                "None",
                "list[str]",
                "list[]",
                "str",
                "dict[, ]",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Target.path": {
            "name": "path",
            "location": 115,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Target.prerequisites": {
            "name": "prerequisites",
            "location": 119,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.order_only_prerequisites": {
            "name": "order_only_prerequisites",
            "location": 123,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.recipe_lines": {
            "name": "recipe_lines",
            "location": 127,
            "return": [
                "List[Dict]",
                "List[int]",
                "Union[List[float], List[int]]",
                "str",
                "List[str]",
                "list",
                "dict",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetFormatter.print": {
            "name": "print",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[List, set]",
                    "list[]",
                    "bool",
                    "set[]",
                    "str",
                    "Optional[str]",
                    "IO[str]",
                    "None",
                    "typing.IO"
                ],
                "file": [
                    "Union[List, set]",
                    "list[]",
                    "bool",
                    "set[]",
                    "str",
                    "Optional[str]",
                    "IO[str]",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "DefaultTargetFormatter.make": {
            "name": "make",
            "location": 143,
            "return": [
                "DefaultTargetFormatter",
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "DefaultTargetFormatter.print": {
            "name": "print",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "list[str]"
                ],
                "file": [
                    "io.TextIOBase",
                    "BinaryIO",
                    "str",
                    "IO[bytes]",
                    "IO"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/implementation.py": {
        "GnuMake.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GnuMake.make": {
            "name": "make",
            "location": 45,
            "return": [
                "GnuMake",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "GnuMake._init_nested_makefile_locator": {
            "name": "_init_nested_makefile_locator",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GnuMake._init_base_makefile_locator": {
            "name": "_init_base_makefile_locator",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GnuMake._init_storage_engine": {
            "name": "_init_storage_engine",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bytes"
                ]
            }
        },
        "GnuMake.storage_engine": {
            "name": "storage_engine",
            "location": 77,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "bytes",
                "float",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "GnuMake.executable_name": {
            "name": "executable_name",
            "location": 85,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GnuMake.base_makefile": {
            "name": "base_makefile",
            "location": 88,
            "return": [
                "None",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "list[str]",
                    "bool",
                    "Optional[List[str]]",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "GnuMake.nested_makefiles": {
            "name": "nested_makefiles",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str"
                ]
            }
        },
        "GnuMake.execution_directory": {
            "name": "execution_directory",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GnuMake.create_nested_update_file": {
            "name": "create_nested_update_file",
            "location": 107,
            "return": [
                "str",
                "bytes",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "GnuMake.update_nested_update_file": {
            "name": "update_nested_update_file",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "io.TextIOBase",
                    "BinaryIO",
                    "bytes",
                    "str"
                ],
                "execution_directory": [
                    "str"
                ]
            }
        },
        "GnuMake.target_listing_file_path": {
            "name": "target_listing_file_path",
            "location": 131,
            "return": [
                "autorecurse.gnumake.data.Makefile",
                "Type['GenericList']",
                "Type['Declared']",
                "str"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "str",
                    "autorecurse.gnumake.data.Makefile"
                ]
            }
        },
        "GnuMake.update_target_listing_file": {
            "name": "update_target_listing_file",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "str",
                    "bool",
                    "freqtrade.data.history.idatahandler.IDataHandler",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "GnuMake._get_target_listing_target": {
            "name": "_get_target_listing_target",
            "location": 145,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "int",
                    "str",
                    "list[int]",
                    "autorecurse.gnumake.data.Makefile",
                    "slice",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "GnuMake.target_to_literal_target": {
            "name": "target_to_literal_target",
            "location": 155,
            "return": [
                "str",
                "Callable",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict[, ]",
                    "autorecurse.gnumake.data.Target",
                    "str",
                    "dict",
                    "list[]",
                    "list"
                ],
                "execution_directory": [
                    "str",
                    "list[]",
                    "list",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "GnuMake.nested_rule_file_path": {
            "name": "nested_rule_file_path",
            "location": 187,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int",
                "Optional[Callable[[None], None]]"
            ],
            "arguments": {
                "self": [],
                "execution_directory": [
                    "str"
                ]
            }
        },
        "GnuMake.update_nested_rule_file": {
            "name": "update_nested_rule_file",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution_directory": [
                    "str"
                ]
            }
        },
        "GnuMake.run_make": {
            "name": "run_make",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "nested_update_file_path": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TargetReader._setup": {
            "name": "_setup",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "executable_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TargetReader.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetReader.executable_name": {
            "name": "executable_name",
            "location": 272,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetReader.target_iterator": {
            "name": "target_iterator",
            "location": 276,
            "return": [
                "autorecurse.lib.iterator.Iterator.Context[autorecurse.gnumake.data.Target]",
                "None"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TargetListingTargetReader.make": {
            "name": "make",
            "location": 309,
            "return": [
                "TargetListingTargetReader",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "executable_name": [
                    "str",
                    "bool",
                    "Iterator[bytes]",
                    "typing.Iterator"
                ]
            }
        },
        "TargetListingTargetReader.target_iterator": {
            "name": "target_iterator",
            "location": 314,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "List[str]",
                    "list[str]",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "Dict[str, str]",
                    "bool",
                    "dict[str, str]",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "NestedRuleTargetReader.make": {
            "name": "make",
            "location": 351,
            "return": [
                "NestedRuleTargetReader",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "executable_name": [
                    "str",
                    "bool",
                    "Iterator[bytes]",
                    "typing.Iterator"
                ],
                "storage_engine": [
                    "bool",
                    "autorecurse.gnumake.storage.StorageEngine",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,int]]",
                    "Dict[str, Any]",
                    "Tuple[str, int]"
                ]
            }
        },
        "NestedRuleTargetReader.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedRuleTargetReader.target_iterator": {
            "name": "target_iterator",
            "location": 361,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "DirectoryMakefileLocator.makefile_iterator": {
            "name": "makefile_iterator",
            "location": 368,
            "return": [
                "autorecurse.lib.iterator.Iterator.Context[autorecurse.gnumake.data.Makefile]",
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "Optional[Tuple[str, ...]]",
                    "None",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "PriorityMakefileLocator._setup": {
            "name": "_setup",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PriorityMakefileLocator.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityMakefileLocator.set_filename_priorities": {
            "name": "set_filename_priorities",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "List[str]",
                    "list",
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "PriorityMakefileLocator._get_best_name": {
            "name": "_get_best_name",
            "location": 389,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "IO"
                ]
            }
        },
        "NestedMakefileLocator.make": {
            "name": "make",
            "location": 436,
            "return": [
                "NestedMakefileLocator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "NestedMakefileLocator.makefile_iterator": {
            "name": "makefile_iterator",
            "location": 441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "bool",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "BaseMakefileLocator.make": {
            "name": "make",
            "location": 477,
            "return": [
                "BaseMakefileLocator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BaseMakefileLocator.makefile_iterator": {
            "name": "makefile_iterator",
            "location": 482,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "bool",
                    "typing.Callable[str, bool]",
                    "int",
                    "list[str]",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "GnuMake.ArgumentParserFactory.create_parser": {
            "name": "create_parser",
            "location": 24,
            "return": [
                "Optional[bool]",
                "Callable[[Optional, Optional, str], None]",
                "str",
                "Optional[Dict[str, str]]",
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "GnuMake.ArgumentParserFactory._create_parser": {
            "name": "_create_parser",
            "location": 30,
            "return": [
                "argparse._SubParsersAction",
                "ThrowingArgumentParser"
            ],
            "arguments": {}
        },
        "TargetReader.Context._setup": {
            "name": "_setup",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool"
                ],
                "makefile": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TargetReader.Context.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetReader.Context.__enter__": {
            "name": "__enter__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TargetReader.Context.__exit__": {
            "name": "__exit__",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "TargetReader.Context._check_returncode": {
            "name": "_check_returncode",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetReader.Context._spawn_subprocess": {
            "name": "_spawn_subprocess",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetListingTargetReader.Context.make": {
            "name": "make",
            "location": 285,
            "return": [
                "Context"
            ],
            "arguments": {
                "parent": [],
                "makefile": []
            }
        },
        "TargetListingTargetReader.Context.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetListingTargetReader.Context._check_returncode": {
            "name": "_check_returncode",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetListingTargetReader.Context._spawn_subprocess": {
            "name": "_spawn_subprocess",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedRuleTargetReader.Context.make": {
            "name": "make",
            "location": 323,
            "return": [
                "Context"
            ],
            "arguments": {
                "parent": [],
                "makefile": []
            }
        },
        "NestedRuleTargetReader.Context.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedRuleTargetReader.Context._check_returncode": {
            "name": "_check_returncode",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedRuleTargetReader.Context._spawn_subprocess": {
            "name": "_spawn_subprocess",
            "location": 336,
            "return": [
                "Popen",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedMakefileLocator.Context.make": {
            "name": "make",
            "location": 406,
            "return": [
                "Context"
            ],
            "arguments": {
                "parent": [],
                "directory_path": []
            }
        },
        "NestedMakefileLocator.Context.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedMakefileLocator.Context.__enter__": {
            "name": "__enter__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedMakefileLocator.Context.__exit__": {
            "name": "__exit__",
            "location": 432,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "BaseMakefileLocator.Context.make": {
            "name": "make",
            "location": 450,
            "return": [
                "Context",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "List[str]",
                    "dict",
                    "str"
                ],
                "directory_path": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseMakefileLocator.Context.__init__": {
            "name": "__init__",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMakefileLocator.Context.__enter__": {
            "name": "__enter__",
            "location": 461,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMakefileLocator.Context.__exit__": {
            "name": "__exit__",
            "location": 473,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/parse.py": {
        "ParseContextTargetBuilder.make": {
            "name": "make",
            "location": 20,
            "return": [
                "ParseContextTargetBuilder",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "ParseContextTargetBuilder.build_target": {
            "name": "build_target",
            "location": 25,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ],
                "target_index": [
                    "int",
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "bool",
                    "typing.Sequence[str]",
                    "Union[Sequence[str], Sequence[int]]",
                    "typing.Sequence[int]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ParseContextTargetBuilder._trim_recipe_line": {
            "name": "_trim_recipe_line",
            "location": 40,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "recipe_line": [
                    "int",
                    "str",
                    "list",
                    "Sequence[int]"
                ]
            }
        },
        "ParsePipelineFactory.build_parse_pipeline": {
            "name": "build_parse_pipeline",
            "location": 53,
            "return": [
                "autorecurse.lib.iterator.Iterator[autorecurse.gnumake.data.Target]",
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "list[]",
                    "io.TextIOBase",
                    "typing.IO",
                    "list",
                    "autorecurse.gnumake.data.Makefile",
                    "IO[str]"
                ],
                "makefile": [
                    "list[]",
                    "io.TextIOBase",
                    "typing.IO",
                    "list",
                    "autorecurse.gnumake.data.Makefile",
                    "IO[str]"
                ]
            }
        },
        "BufferedParsePipelineFactory.make": {
            "name": "make",
            "location": 62,
            "return": [
                "BufferedParsePipelineFactory",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BufferedParsePipelineFactory.build_parse_pipeline": {
            "name": "build_parse_pipeline",
            "location": 67,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "typing.IO",
                    "io.TextIOBase",
                    "bool",
                    "dict[str, str]",
                    "IO[Any]",
                    "typing.BinaryIO",
                    "Dict[str, str]",
                    "BinaryIO"
                ],
                "makefile": [
                    "int",
                    "str",
                    "autorecurse.gnumake.data.Makefile",
                    "typing.TextIO",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "StreamingParsePipelineFactory.make": {
            "name": "make",
            "location": 104,
            "return": [
                "StreamingParsePipelineFactory",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "StreamingParsePipelineFactory.build_parse_pipeline": {
            "name": "build_parse_pipeline",
            "location": 109,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "typing.IO",
                    "io.TextIOBase",
                    "bool",
                    "dict[str, str]",
                    "IO[Any]",
                    "typing.BinaryIO",
                    "Dict[str, str]",
                    "BinaryIO"
                ],
                "makefile": [
                    "int",
                    "str",
                    "autorecurse.gnumake.data.Makefile",
                    "typing.TextIO",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "BalancedParsePipelineFactory.make": {
            "name": "make",
            "location": 133,
            "return": [
                "BalancedParsePipelineFactory",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BalancedParsePipelineFactory.build_parse_pipeline": {
            "name": "build_parse_pipeline",
            "location": 138,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "typing.IO",
                    "io.TextIOBase",
                    "bool",
                    "dict[str, str]",
                    "IO[Any]",
                    "typing.BinaryIO",
                    "Dict[str, str]",
                    "BinaryIO"
                ],
                "makefile": [
                    "int",
                    "str",
                    "autorecurse.gnumake.data.Makefile",
                    "typing.TextIO",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "DefaultParsePipelineFactory.make": {
            "name": "make",
            "location": 176,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "DefaultParsePipelineFactory.set": {
            "name": "set",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "MakefileRuleParserToIteratorAdapter.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter.make": {
            "name": "make",
            "location": 203,
            "return": [
                "MakefileRuleParserToIteratorAdapter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "parser": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._setup": {
            "name": "_setup",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "MakefileRuleParserToIteratorAdapter.current_item": {
            "name": "current_item",
            "location": 215,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter.has_current_item": {
            "name": "has_current_item",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter.is_at_start": {
            "name": "is_at_start",
            "location": 223,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter.is_at_end": {
            "name": "is_at_end",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter.move_to_next": {
            "name": "move_to_next",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._current_length": {
            "name": "_current_length",
            "location": 247,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._get_next_target": {
            "name": "_get_next_target",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._generate_target": {
            "name": "_generate_target",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._get_next_non_empty_context": {
            "name": "_get_next_non_empty_context",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._get_next_context": {
            "name": "_get_next_context",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._to_S": {
            "name": "_to_S",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._to_I": {
            "name": "_to_I",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter._to_E": {
            "name": "_to_E",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParserToIteratorAdapter.makefile": {
            "name": "makefile",
            "location": 309,
            "return": [
                "None",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/storage.py": {
        "StorageEngine.create_nested_update_file": {
            "name": "create_nested_update_file",
            "location": 12,
            "return": [
                "autorecurse.lib.file.FileLifetimeManager",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageEngine.target_listing_file_path": {
            "name": "target_listing_file_path",
            "location": 16,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "bool",
                    "str",
                    "autorecurse.gnumake.data.Makefile",
                    "tuple[typing.Union[str,str]]",
                    "tuple[tuple[typing.Union[str,str]]]",
                    "Tuple[str, str]",
                    "int",
                    "Tuple[Tuple[str, str]]"
                ]
            }
        },
        "StorageEngine.create_target_listing_file": {
            "name": "create_target_listing_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "str",
                    "bool",
                    "autorecurse.gnumake.data.Makefile"
                ]
            }
        },
        "StorageEngine.nested_rule_file_path": {
            "name": "nested_rule_file_path",
            "location": 24,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "execution_directory": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "StorageEngine.create_nested_rule_file": {
            "name": "create_nested_rule_file",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution_directory": [
                    "str",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "FileStorageEngine.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStorageEngine.make": {
            "name": "make",
            "location": 38,
            "return": [
                "FileStorageEngine",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "directory_mapping": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "DirectoryMapping",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "FileStorageEngine.create_nested_update_file": {
            "name": "create_nested_update_file",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStorageEngine.target_listing_file_path": {
            "name": "target_listing_file_path",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "FileStorageEngine.create_target_listing_file": {
            "name": "create_target_listing_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "makefile": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileStorageEngine.nested_rule_file_path": {
            "name": "nested_rule_file_path",
            "location": 69,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "execution_directory": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "Union[str, Sequence[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "FileStorageEngine._make_hash": {
            "name": "_make_hash",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "FileStorageEngine.create_nested_rule_file": {
            "name": "create_nested_rule_file",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution_directory": [
                    "str"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/__init__.py": {},
    "autorecurse-master/python3/src/autorecurse/gnumake/grammar/filter.py": {
        "FileSectionFilter.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSectionFilter.make": {
            "name": "make",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "FileSectionFilter._setup": {
            "name": "_setup",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Dict[str, Callable]",
                    "bool"
                ]
            }
        },
        "FileSectionFilter._set_current_item": {
            "name": "_set_current_item",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "autorecurse.lib.line.Line",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "FileSectionFilter.condition": {
            "name": "condition",
            "location": 101,
            "return": [
                "str",
                "bool",
                "Callable",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSectionFilter._do_transition": {
            "name": "_do_transition",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition_label": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "DatabaseSectionFilter.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseSectionFilter.make": {
            "name": "make",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "DatabaseSectionFilter._set_current_item": {
            "name": "_set_current_item",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "autorecurse.lib.line.Line",
                    "bool",
                    "Tuple[Any, float]",
                    "str",
                    "Union[int, float, str]"
                ]
            }
        },
        "DatabaseSectionFilter.condition": {
            "name": "condition",
            "location": 178,
            "return": [
                "str",
                "bool",
                "int",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseSectionFilter._do_transition": {
            "name": "_do_transition",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition_label": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InformationalCommentFilter.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InformationalCommentFilter.make": {
            "name": "make",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "InformationalCommentFilter._setup": {
            "name": "_setup",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "InformationalCommentFilter._set_current_item": {
            "name": "_set_current_item",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "autorecurse.lib.line.Line",
                    "dict",
                    "Tuple[Sequence]",
                    "str",
                    "bool"
                ]
            }
        },
        "InformationalCommentFilter.condition": {
            "name": "condition",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/grammar/MakefileRuleLexer.py": {
        "serializedATN": {
            "name": "serializedATN",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "MakefileRuleLexer.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/grammar/MakefileRuleParser.py": {
        "serializedATN": {
            "name": "serializedATN",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "MakefileRuleParser.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "MakefileRuleParser.declaration": {
            "name": "declaration",
            "location": 106,
            "return": [
                "DeclarationContext",
                "str",
                "int",
                "Dict[str, Any]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.makefileRule": {
            "name": "makefileRule",
            "location": 185,
            "return": [
                "MakefileRuleContext",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.target": {
            "name": "target",
            "location": 266,
            "return": [
                "TargetContext",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.prerequisite": {
            "name": "prerequisite",
            "location": 305,
            "return": [
                "PrerequisiteContext",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.orderOnlyPrerequisite": {
            "name": "orderOnlyPrerequisite",
            "location": 344,
            "return": [
                "OrderOnlyPrerequisiteContext",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.recipe": {
            "name": "recipe",
            "location": 395,
            "return": [
                "RecipeContext",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.DeclarationContext.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Type",
                    "Tuple[float, float, float, float]"
                ],
                "parent": [
                    "int",
                    "None"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "MakefileRuleParser.DeclarationContext.makefileRule": {
            "name": "makefileRule",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.DeclarationContext.EOL": {
            "name": "EOL",
            "location": 89,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.DeclarationContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 92,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.DeclarationContext.enterRule": {
            "name": "enterRule",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.DeclarationContext.exitRule": {
            "name": "exitRule",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.MakefileRuleContext.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Type",
                    "Tuple[float, float, float, float]"
                ],
                "parent": [
                    "int",
                    "None"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "MakefileRuleParser.MakefileRuleContext.COLON": {
            "name": "COLON",
            "location": 140,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.MakefileRuleContext.recipe": {
            "name": "recipe",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.MakefileRuleContext.target": {
            "name": "target",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "None"
                ]
            }
        },
        "MakefileRuleParser.MakefileRuleContext.prerequisite": {
            "name": "prerequisite",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "None"
                ]
            }
        },
        "MakefileRuleParser.MakefileRuleContext.PIPE": {
            "name": "PIPE",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.MakefileRuleContext.orderOnlyPrerequisite": {
            "name": "orderOnlyPrerequisite",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "None"
                ]
            }
        },
        "MakefileRuleParser.MakefileRuleContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.MakefileRuleContext.enterRule": {
            "name": "enterRule",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.MakefileRuleContext.exitRule": {
            "name": "exitRule",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.TargetContext.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Type",
                    "Tuple[float, float, float, float]"
                ],
                "parent": [
                    "int",
                    "None"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "MakefileRuleParser.TargetContext.IDENTIFIER": {
            "name": "IDENTIFIER",
            "location": 249,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.TargetContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.TargetContext.enterRule": {
            "name": "enterRule",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.TargetContext.exitRule": {
            "name": "exitRule",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.PrerequisiteContext.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Type",
                    "Tuple[float, float, float, float]"
                ],
                "parent": [
                    "int",
                    "None"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "MakefileRuleParser.PrerequisiteContext.IDENTIFIER": {
            "name": "IDENTIFIER",
            "location": 288,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.PrerequisiteContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.PrerequisiteContext.enterRule": {
            "name": "enterRule",
            "location": 294,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.PrerequisiteContext.exitRule": {
            "name": "exitRule",
            "location": 298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.OrderOnlyPrerequisiteContext.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Type",
                    "Tuple[float, float, float, float]"
                ],
                "parent": [
                    "int",
                    "None"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "MakefileRuleParser.OrderOnlyPrerequisiteContext.IDENTIFIER": {
            "name": "IDENTIFIER",
            "location": 327,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.OrderOnlyPrerequisiteContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.OrderOnlyPrerequisiteContext.enterRule": {
            "name": "enterRule",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.OrderOnlyPrerequisiteContext.exitRule": {
            "name": "exitRule",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.RecipeContext.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Type",
                    "Tuple[float, float, float, float]"
                ],
                "parent": [
                    "int",
                    "None"
                ],
                "invokingState": [
                    "int"
                ]
            }
        },
        "MakefileRuleParser.RecipeContext.RECIPE_LINE": {
            "name": "RECIPE_LINE",
            "location": 366,
            "return": [
                "str",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "None"
                ]
            }
        },
        "MakefileRuleParser.RecipeContext.EOL": {
            "name": "EOL",
            "location": 372,
            "return": [
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MakefileRuleParser.RecipeContext.EOF": {
            "name": "EOF",
            "location": 378,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.RecipeContext.getRuleIndex": {
            "name": "getRuleIndex",
            "location": 381,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakefileRuleParser.RecipeContext.enterRule": {
            "name": "enterRule",
            "location": 384,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MakefileRuleParser.RecipeContext.exitRule": {
            "name": "exitRule",
            "location": 388,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/grammar/TargetParagraphLexer.py": {
        "serializedATN": {
            "name": "serializedATN",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TargetParagraphLexer.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/gnumake/grammar/__init__.py": {},
    "autorecurse-master/python3/src/autorecurse/lib/buffer.py": {
        "Buffer.count": {
            "name": "count",
            "location": 117,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.current_index": {
            "name": "current_index",
            "location": 122,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.is_empty": {
            "name": "is_empty",
            "location": 127,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.move_to_start": {
            "name": "move_to_start",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buffer.move_to_index": {
            "name": "move_to_index",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List[str]",
                    "list[str]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "StringBuffer.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.make": {
            "name": "make",
            "location": 162,
            "return": [
                "StringBuffer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "StringBuffer._setup": {
            "name": "_setup",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "StringBuffer.current_item": {
            "name": "current_item",
            "location": 173,
            "return": [
                "str",
                "baseplate.lib.metrics.Batch"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.has_current_item": {
            "name": "has_current_item",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.is_at_start": {
            "name": "is_at_start",
            "location": 181,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.is_at_end": {
            "name": "is_at_end",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.move_to_next": {
            "name": "move_to_next",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.move_to_end": {
            "name": "move_to_end",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.count": {
            "name": "count",
            "location": 218,
            "return": [
                "int",
                "str",
                "baseplate.lib.metrics.Batch",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.current_index": {
            "name": "current_index",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.is_empty": {
            "name": "is_empty",
            "location": 226,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.move_to_start": {
            "name": "move_to_start",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer.move_to_index": {
            "name": "move_to_index",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bytes",
                    "int",
                    "str",
                    "IO",
                    "typing.IO",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "StringBuffer._to_S": {
            "name": "_to_S",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer._to_I": {
            "name": "_to_I",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer._to_E": {
            "name": "_to_E",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer._to_SE": {
            "name": "_to_SE",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringBuffer._to_EE": {
            "name": "_to_EE",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/fifo.py": {
        "FifoBase.push": {
            "name": "push",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Fifo.shift": {
            "name": "shift",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedFifo.collect_garbage": {
            "name": "collect_garbage",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedFifo.new_strong_reference": {
            "name": "new_strong_reference",
            "location": 279,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedFifo.release_strong_reference": {
            "name": "release_strong_reference",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_token": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "LinkedFifo.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.make": {
            "name": "make",
            "location": 340,
            "return": [
                "LinkedFifo",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "LinkedFifo._setup": {
            "name": "_setup",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LinkedFifo.current_item": {
            "name": "current_item",
            "location": 350,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.has_current_item": {
            "name": "has_current_item",
            "location": 354,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.is_at_start": {
            "name": "is_at_start",
            "location": 358,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.is_at_end": {
            "name": "is_at_end",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.move_to_next": {
            "name": "move_to_next",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.move_to_end": {
            "name": "move_to_end",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.count": {
            "name": "count",
            "location": 397,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.current_index": {
            "name": "current_index",
            "location": 401,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.is_empty": {
            "name": "is_empty",
            "location": 405,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]",
                "str",
                "int",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.move_to_start": {
            "name": "move_to_start",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.push": {
            "name": "push",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.MutableMapping",
                    "T",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "LinkedFifo._do_push": {
            "name": "_do_push",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Type['GenericList']",
                    "Union[str, List[str]]",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "LinkedFifo._do_empty_push": {
            "name": "_do_empty_push",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "list",
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "LinkedFifo.shift": {
            "name": "shift",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo._do_shift": {
            "name": "_do_shift",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo._to_S": {
            "name": "_to_S",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo._to_I": {
            "name": "_to_I",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo._to_E": {
            "name": "_to_E",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo._to_SE": {
            "name": "_to_SE",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo._to_EE": {
            "name": "_to_EE",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.make": {
            "name": "make",
            "location": 531,
            "return": [
                "ArrayedFifo",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ArrayedFifo._setup": {
            "name": "_setup",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "ArrayedFifo.current_item": {
            "name": "current_item",
            "location": 546,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[str]",
                "bool",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.has_current_item": {
            "name": "has_current_item",
            "location": 551,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.is_at_start": {
            "name": "is_at_start",
            "location": 556,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.is_at_end": {
            "name": "is_at_end",
            "location": 561,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.move_to_next": {
            "name": "move_to_next",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.move_to_end": {
            "name": "move_to_end",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.count": {
            "name": "count",
            "location": 592,
            "return": [
                "Tuple[Tuple[int, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.current_index": {
            "name": "current_index",
            "location": 600,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.is_empty": {
            "name": "is_empty",
            "location": 605,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.move_to_start": {
            "name": "move_to_start",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.move_to_index": {
            "name": "move_to_index",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bytes",
                    "int",
                    "str",
                    "IO",
                    "typing.IO",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ArrayedFifo.push": {
            "name": "push",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Type",
                    "typing.Type",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ArrayedFifo._increment_physical_index_end": {
            "name": "_increment_physical_index_end",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.shift": {
            "name": "shift",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._increment_physical_index_start": {
            "name": "_increment_physical_index_start",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._physical_index": {
            "name": "_physical_index",
            "location": 673,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._increase_capacity": {
            "name": "_increase_capacity",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._reallocate": {
            "name": "_reallocate",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_capacity": [
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ArrayedFifo._copy_to_list": {
            "name": "_copy_to_list",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_": [
                    "List[List]",
                    "list[list[]]",
                    "dict",
                    "dict[, ]",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "ArrayedFifo.capacity": {
            "name": "capacity",
            "location": 718,
            "return": [
                "int",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo.capacity_factor": {
            "name": "capacity_factor",
            "location": 728,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "bytes",
                "float",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "ArrayedFifo.trim_capacity": {
            "name": "trim_capacity",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._to_S": {
            "name": "_to_S",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._to_I": {
            "name": "_to_I",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayedFifo._to_E": {
            "name": "_to_E",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.__init__": {
            "name": "__init__",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.make": {
            "name": "make",
            "location": 792,
            "return": [
                "FifoManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fifo": [
                    "int",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "FifoManager._setup": {
            "name": "_setup",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "fifo": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FifoManager._initialize_ref_counters": {
            "name": "_initialize_ref_counters",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int"
                ]
            }
        },
        "FifoManager.current_item": {
            "name": "current_item",
            "location": 815,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.has_current_item": {
            "name": "has_current_item",
            "location": 819,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.is_at_start": {
            "name": "is_at_start",
            "location": 823,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.is_at_end": {
            "name": "is_at_end",
            "location": 827,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.move_to_next": {
            "name": "move_to_next",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.move_to_end": {
            "name": "move_to_end",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.count": {
            "name": "count",
            "location": 837,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.current_index": {
            "name": "current_index",
            "location": 841,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.is_empty": {
            "name": "is_empty",
            "location": 845,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.move_to_start": {
            "name": "move_to_start",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.move_to_index": {
            "name": "move_to_index",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FifoManager.push": {
            "name": "push",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "FifoManager.collect_garbage": {
            "name": "collect_garbage",
            "location": 859,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager._can_shift": {
            "name": "_can_shift",
            "location": 865,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.new_strong_reference": {
            "name": "new_strong_reference",
            "location": 884,
            "return": [
                "bool",
                "Mapping[str, str]",
                "str",
                "int",
                "dict[int, str]",
                "typing.Type",
                "dict[str, str]",
                "dict[str, tuple[]]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager._next_available_reference_token": {
            "name": "_next_available_reference_token",
            "location": 893,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "dict",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager._next_reference_token": {
            "name": "_next_reference_token",
            "location": 901,
            "return": [
                "int",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ref_token": [
                    "int",
                    "list[int]",
                    "bool",
                    "str",
                    "List[int]"
                ]
            }
        },
        "FifoManager._current_reference_counter": {
            "name": "_current_reference_counter",
            "location": 909,
            "return": [
                "str",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.release_strong_reference": {
            "name": "release_strong_reference",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_token": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FifoManager.inner_object": {
            "name": "inner_object",
            "location": 920,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.current_item": {
            "name": "current_item",
            "location": 927,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.has_current_item": {
            "name": "has_current_item",
            "location": 931,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.is_at_start": {
            "name": "is_at_start",
            "location": 935,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.is_at_end": {
            "name": "is_at_end",
            "location": 939,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.move_to_next": {
            "name": "move_to_next",
            "location": 942,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.move_to_end": {
            "name": "move_to_end",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.count": {
            "name": "count",
            "location": 949,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.current_index": {
            "name": "current_index",
            "location": 953,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.is_empty": {
            "name": "is_empty",
            "location": 957,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.move_to_start": {
            "name": "move_to_start",
            "location": 960,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.move_to_index": {
            "name": "move_to_index",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FifoWrapper.push": {
            "name": "push",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "FifoWrapper.shift": {
            "name": "shift",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoWrapper.inner_object": {
            "name": "inner_object",
            "location": 974,
            "return": [
                "Fifo[T]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.__init__": {
            "name": "__init__",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.make": {
            "name": "make",
            "location": 1002,
            "return": [
                "FifoStateCacheWrapper",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fifo": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "FifoStateCacheWrapper._setup": {
            "name": "_setup",
            "location": 1008,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Union[object, type]",
                    "typing.Type",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ],
                "fifo": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FifoStateCacheWrapper.current_item": {
            "name": "current_item",
            "location": 1026,
            "return": [
                "bool",
                "int",
                "str",
                "complex",
                "list[int]",
                "tuple[typing.Union[tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Any,typing.Literal]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.has_current_item": {
            "name": "has_current_item",
            "location": 1035,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.is_at_start": {
            "name": "is_at_start",
            "location": 1044,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.is_at_end": {
            "name": "is_at_end",
            "location": 1053,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.move_to_next": {
            "name": "move_to_next",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.move_to_end": {
            "name": "move_to_end",
            "location": 1074,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.count": {
            "name": "count",
            "location": 1088,
            "return": [
                "int",
                "str",
                "Callable",
                "set[str]",
                "dict[int, str]",
                "tuple[typing.Union[str,str,str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.current_index": {
            "name": "current_index",
            "location": 1097,
            "return": [
                "int",
                "str",
                "Callable",
                "bytes",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.is_empty": {
            "name": "is_empty",
            "location": 1106,
            "return": [
                "bool",
                "int",
                "str",
                "dict[, ]",
                "list[]",
                "dict[int, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.move_to_start": {
            "name": "move_to_start",
            "location": 1114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.move_to_index": {
            "name": "move_to_index",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "FifoStateCacheWrapper.push": {
            "name": "push",
            "location": 1140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "FifoStateCacheWrapper.shift": {
            "name": "shift",
            "location": 1149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoStateCacheWrapper.inner_object": {
            "name": "inner_object",
            "location": 1163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoGlobalIndexWrapper.__init__": {
            "name": "__init__",
            "location": 1176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoGlobalIndexWrapper.make": {
            "name": "make",
            "location": 1182,
            "return": [
                "FifoGlobalIndexWrapper",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fifo": [
                    "str",
                    "bool",
                    "bytes",
                    "buffer.Buffer"
                ]
            }
        },
        "FifoGlobalIndexWrapper._setup": {
            "name": "_setup",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "fifo": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FifoGlobalIndexWrapper.shift": {
            "name": "shift",
            "location": 1192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoGlobalIndexWrapper.inner_object": {
            "name": "inner_object",
            "location": 1197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoGlobalIndexWrapper.global_count": {
            "name": "global_count",
            "location": 1201,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoGlobalIndexWrapper.current_global_index": {
            "name": "current_global_index",
            "location": 1205,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoGlobalIndexWrapper.move_to_global_index": {
            "name": "move_to_global_index",
            "location": 1208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "LinkedFifo.LinkElement.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.LinkElement.make": {
            "name": "make",
            "location": 308,
            "return": [
                "LinkElement",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "LinkedFifo.LinkElement._setup": {
            "name": "_setup",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool"
                ],
                "content": [
                    "bytes",
                    "str",
                    "Type[Dict[str, Any]]",
                    "dict",
                    "bool"
                ]
            }
        },
        "LinkedFifo.LinkElement.content": {
            "name": "content",
            "location": 319,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedFifo.LinkElement.next": {
            "name": "next",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "FifoManager.ReferenceCounter.__init__": {
            "name": "__init__",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.ReferenceCounter.make": {
            "name": "make",
            "location": 765,
            "return": [
                "LinkElement",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "FifoManager.ReferenceCounter._setup": {
            "name": "_setup",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "typing.Type",
                    "Callable",
                    "typing.Mapping",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "FifoManager.ReferenceCounter.is_at_zero": {
            "name": "is_at_zero",
            "location": 775,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.ReferenceCounter.increment": {
            "name": "increment",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FifoManager.ReferenceCounter.decrement": {
            "name": "decrement",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/file.py": {
        "FileCreator.create_file": {
            "name": "create_file",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCreator.file_path": {
            "name": "file_path",
            "location": 47,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UniqueFileCreator.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UniqueFileCreator.make": {
            "name": "make",
            "location": 64,
            "return": [
                "UniqueFileCreator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "UniqueFileCreator.create_file": {
            "name": "create_file",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UniqueFileCreator.file_path": {
            "name": "file_path",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UniqueFileCreator.file_name_suffix": {
            "name": "file_name_suffix",
            "location": 85,
            "return": [
                "None",
                "str",
                "dict[typing.Any, str]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "UniqueFileCreator.file_name_prefix": {
            "name": "file_name_prefix",
            "location": 93,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "UniqueFileCreator.directory": {
            "name": "directory",
            "location": 101,
            "return": [
                "None",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "UniqueFileCreator._args": {
            "name": "_args",
            "location": 105,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLifetimeManager.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLifetimeManager.make": {
            "name": "make",
            "location": 123,
            "return": [
                "FileLifetimeManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "file_creator": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "FileLifetimeManager.open_file": {
            "name": "open_file",
            "location": 128,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLifetimeManager.file_path": {
            "name": "file_path",
            "location": 132,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLifetimeManager.__enter__": {
            "name": "__enter__",
            "location": 135,
            "return": [
                "FileLifetimeManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLifetimeManager.__exit__": {
            "name": "__exit__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/hash.py": {
        "_wrap_to_sys_int": {
            "name": "_wrap_to_sys_int",
            "location": 9,
            "return": [
                "int",
                "Dict[str, int]",
                "Generator",
                "dict",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "Union[int, slice]",
                    "str"
                ]
            }
        },
        "HashCombiner.make": {
            "name": "make",
            "location": 31,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "HashCombiner.make_with_seed_and_factor": {
            "name": "make_with_seed_and_factor",
            "location": 39,
            "return": [
                "HashCombiner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "factor": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HashCombiner._setup_with_seed_and_factor": {
            "name": "_setup_with_seed_and_factor",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int",
                    "Tuple[float, float, float]",
                    "tuple[typing.Union[float,float,float]]"
                ],
                "seed": [
                    "str",
                    "int",
                    "Tuple[float, float, float]",
                    "tuple[typing.Union[float,float,float]]"
                ],
                "factor": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HashCombiner.value": {
            "name": "value",
            "location": 54,
            "return": [
                "None",
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "HashCombiner.factor": {
            "name": "factor",
            "location": 62,
            "return": [
                "None",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "HashCombiner.put": {
            "name": "put",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Iterable[Any]",
                    "bool",
                    "bytes",
                    "int",
                    "str"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/iterator.py": {
        "Iterator.current_item": {
            "name": "current_item",
            "location": 72,
            "return": [
                "T_co",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterator.has_current_item": {
            "name": "has_current_item",
            "location": 77,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterator.is_at_start": {
            "name": "is_at_start",
            "location": 82,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterator.is_at_end": {
            "name": "is_at_end",
            "location": 87,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterator.move_to_next": {
            "name": "move_to_next",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterator.move_to_end": {
            "name": "move_to_end",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iterator.__iter__": {
            "name": "__iter__",
            "location": 98,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorContext.__enter__": {
            "name": "__enter__",
            "location": 105,
            "return": [
                "Iterator[T_co]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorContext.__exit__": {
            "name": "__exit__",
            "location": 109,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "ListIterator.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterator.make": {
            "name": "make",
            "location": 121,
            "return": [
                "ListIterator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "Iterable[List[T]]",
                    "bool",
                    "typing.Iterable[list[T]]",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "ListIterator._setup": {
            "name": "_setup",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bytes",
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "it": [
                    "Iterable[T]",
                    "List[\"SqlFile\"]",
                    "list",
                    "Sequence[Sequence[T]]",
                    "int"
                ]
            }
        },
        "ListIterator.current_item": {
            "name": "current_item",
            "location": 132,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[str]",
                "bool",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterator.has_current_item": {
            "name": "has_current_item",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterator.is_at_start": {
            "name": "is_at_start",
            "location": 140,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterator.is_at_end": {
            "name": "is_at_end",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterator.move_to_next": {
            "name": "move_to_next",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterator.move_to_end": {
            "name": "move_to_end",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator.make": {
            "name": "make",
            "location": 166,
            "return": [
                "IteratorConcatenator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "float",
                    "TextIO",
                    "typing.TextIO",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "IteratorConcatenator._setup": {
            "name": "_setup",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "float",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "IteratorConcatenator._init_current_iterator": {
            "name": "_init_current_iterator",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "IteratorConcatenator.current_item": {
            "name": "current_item",
            "location": 193,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator.has_current_item": {
            "name": "has_current_item",
            "location": 197,
            "return": [
                "list",
                "Iterable[T]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator.is_at_start": {
            "name": "is_at_start",
            "location": 201,
            "return": [
                "int",
                "str",
                "Sequence[Sequence[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator.is_at_end": {
            "name": "is_at_end",
            "location": 205,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[Callable]",
                "dict",
                "Tuple[type]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator.move_to_next": {
            "name": "move_to_next",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator._move_to_next_non_empty_iterator": {
            "name": "_move_to_next_non_empty_iterator",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator._to_S": {
            "name": "_to_S",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator._to_I": {
            "name": "_to_I",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorConcatenator._to_E": {
            "name": "_to_E",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonIteratorWrapper.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonIteratorWrapper.make": {
            "name": "make",
            "location": 251,
            "return": [
                "PythonIteratorWrapper",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PythonIteratorWrapper.__iter__": {
            "name": "__iter__",
            "location": 256,
            "return": [
                "PythonIteratorWrapper",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonIteratorWrapper.__next__": {
            "name": "__next__",
            "location": 259,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/line.py": {
        "LineBreakError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Line.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.make": {
            "name": "make",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Line._setup": {
            "name": "_setup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "MutableMapping[str, str]",
                    "Pattern",
                    "IO"
                ],
                "content": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Line.make_with_line_number": {
            "name": "make_with_line_number",
            "location": 41,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "content": [
                    "list",
                    "bool"
                ],
                "line_number": [
                    "list",
                    "bool"
                ]
            }
        },
        "Line._setup_with_line_number": {
            "name": "_setup_with_line_number",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "content": [
                    "str"
                ],
                "line_number": [
                    "str",
                    "Callable",
                    "Type['GenericList']"
                ]
            }
        },
        "Line.content": {
            "name": "content",
            "location": 52,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.has_line_number": {
            "name": "has_line_number",
            "location": 56,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.line_number": {
            "name": "line_number",
            "location": 60,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list",
                "lib.model.folder.folder.Folder"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str",
                "bytes",
                "type",
                "io.TextIO",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__eq__": {
            "name": "__eq__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Line.__hash__": {
            "name": "__hash__",
            "location": 82,
            "return": [
                "Optional[int]",
                "SupportsInt",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator.make": {
            "name": "make",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fp": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "FileLineIterator._setup": {
            "name": "_setup",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Iterable['cirq.Operation']",
                    "Iterable[str]"
                ],
                "fp": [
                    "str"
                ]
            }
        },
        "FileLineIterator.current_item": {
            "name": "current_item",
            "location": 109,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator.has_current_item": {
            "name": "has_current_item",
            "location": 113,
            "return": [
                "dict",
                "Optional[str]",
                "type",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator.is_at_start": {
            "name": "is_at_start",
            "location": 117,
            "return": [
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator.is_at_end": {
            "name": "is_at_end",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator.move_to_next": {
            "name": "move_to_next",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator._to_S": {
            "name": "_to_S",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator._to_I": {
            "name": "_to_I",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineIterator._to_E": {
            "name": "_to_E",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.make": {
            "name": "make",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "LineToCharIterator._setup": {
            "name": "_setup",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "float"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "LineToCharIterator.current_item": {
            "name": "current_item",
            "location": 179,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator._content": {
            "name": "_content",
            "location": 187,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "int",
                "bytes",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.has_current_item": {
            "name": "has_current_item",
            "location": 192,
            "return": [
                "list",
                "Iterable[T]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.is_at_start": {
            "name": "is_at_start",
            "location": 196,
            "return": [
                "int",
                "str",
                "Sequence[Sequence[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.is_at_end": {
            "name": "is_at_end",
            "location": 200,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[Callable]",
                "dict",
                "Tuple[type]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.move_to_next": {
            "name": "move_to_next",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator._current_length": {
            "name": "_current_length",
            "location": 219,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator._move_to_next_non_blank_line": {
            "name": "_move_to_next_non_blank_line",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToCharIterator.move_to_end": {
            "name": "move_to_end",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineFilter.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineFilter.make": {
            "name": "make",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "EmptyLineFilter._setup": {
            "name": "_setup",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "EmptyLineFilter._set_current_item": {
            "name": "_set_current_item",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "EmptyLineFilter.condition": {
            "name": "condition",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/stream.py": {
        "Condition._set_current_item": {
            "name": "_set_current_item",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Condition.condition": {
            "name": "condition",
            "location": 63,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeCondition.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeCondition.make": {
            "name": "make",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sub_conditions": [
                    "float",
                    "Optional[Union[str, Any]]",
                    "Callable",
                    "str",
                    "list",
                    "Union[int, slice]"
                ]
            }
        },
        "CompositeCondition._set_current_item": {
            "name": "_set_current_item",
            "location": 81,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "autorecurse.lib.line.Line",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "int"
                ]
            }
        },
        "CompositeCondition.condition": {
            "name": "condition",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionFilter.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionFilter.make": {
            "name": "make",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterator": [
                    "bool",
                    "float",
                    "AsyncGenerator",
                    "int"
                ],
                "condition": [
                    "bool",
                    "float",
                    "AsyncGenerator",
                    "int"
                ]
            }
        },
        "ConditionFilter._setup": {
            "name": "_setup",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "Callable",
                    "str"
                ],
                "iterator": [
                    "int",
                    "Callable",
                    "str"
                ],
                "condition": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConditionFilter.current_item": {
            "name": "current_item",
            "location": 118,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionFilter.has_current_item": {
            "name": "has_current_item",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionFilter.is_at_start": {
            "name": "is_at_start",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionFilter.is_at_end": {
            "name": "is_at_end",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionFilter.move_to_next": {
            "name": "move_to_next",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/__init__.py": {},
    "autorecurse-master/python3/src/autorecurse/lib/antlr4/abstract.py": {
        "IntStream.index": {
            "name": "index",
            "location": 23,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntStream.size": {
            "name": "size",
            "location": 28,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntStream.getSourceName": {
            "name": "getSourceName",
            "location": 31,
            "return": [
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntStream.mark": {
            "name": "mark",
            "location": 35,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntStream.release": {
            "name": "release",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marker": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IntStream.LA": {
            "name": "LA",
            "location": 43,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IntStream.consume": {
            "name": "consume",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntStream.seek": {
            "name": "seek",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CharStream.getText": {
            "name": "getText",
            "location": 58,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "stop": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "TokenStream.get": {
            "name": "get",
            "location": 65,
            "return": [
                "antlr4.Token.Token",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "TokenStream.getText": {
            "name": "getText",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "TokenStream.LT": {
            "name": "LT",
            "location": 81,
            "return": [
                "antlr4.Token.Token",
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TokenStream._total_stream_size": {
            "name": "_total_stream_size",
            "location": 86,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSource.nextToken": {
            "name": "nextToken",
            "location": 93,
            "return": [
                "antlr4.Token.Token",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/antlr4/custom.py": {
        "CustomTokenFactory.make": {
            "name": "make",
            "location": 14,
            "return": [
                "CustomTokenFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "CustomTokenFactory.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomTokenFactory.create": {
            "name": "create",
            "location": 22,
            "return": [
                "int",
                "typing.Deque",
                "str",
                "bool",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "type": [
                    "int",
                    "Type[object]",
                    "str",
                    "typing.Type",
                    "Optional[int]",
                    "None"
                ],
                "text": [
                    "int",
                    "str"
                ],
                "channel": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "start": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "stop": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "line": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "column": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "CustomLexer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "CustomLexer.recover": {
            "name": "recover",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustomParser.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/antlr4/stream.py": {
        "IteratorToIntStreamAdapter.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._setup": {
            "name": "_setup",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "instance": [
                    "list",
                    "int",
                    "list[]",
                    "bytes",
                    "str"
                ],
                "iterator": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToIntStreamAdapter._initialize_buffer": {
            "name": "_initialize_buffer",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "typing.Sequence[int]",
                    "Tuple[float, float, float, float]",
                    "Sequence[int]",
                    "T",
                    "slice"
                ]
            }
        },
        "IteratorToIntStreamAdapter.current_item": {
            "name": "current_item",
            "location": 144,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.has_current_item": {
            "name": "has_current_item",
            "location": 148,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.is_at_start": {
            "name": "is_at_start",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.is_at_end": {
            "name": "is_at_end",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.move_to_next": {
            "name": "move_to_next",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._has_more_buffer": {
            "name": "_has_more_buffer",
            "location": 171,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._load_one_item_from_iterator": {
            "name": "_load_one_item_from_iterator",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.move_to_end": {
            "name": "move_to_end",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.index": {
            "name": "index",
            "location": 199,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.size": {
            "name": "size",
            "location": 206,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.getSourceName": {
            "name": "getSourceName",
            "location": 210,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.mark": {
            "name": "mark",
            "location": 216,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._new_strong_reference_exclude": {
            "name": "_new_strong_reference_exclude",
            "location": 233,
            "return": [
                "bool",
                "list[tuple[typing.Union[typing.Any,float]]]",
                "Mapping[str, str]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "IteratorToIntStreamAdapter.release": {
            "name": "release",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marker": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToIntStreamAdapter.LA": {
            "name": "LA",
            "location": 246,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToIntStreamAdapter._offset_to_index": {
            "name": "_offset_to_index",
            "location": 265,
            "return": [
                "int",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "eth.abc.ComputationAPI",
                    "Tuple[FrozenSet[int]]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "IteratorToIntStreamAdapter._LA_result": {
            "name": "_LA_result",
            "location": 272,
            "return": [
                "bool",
                "\"Task\""
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._item_to_int": {
            "name": "_item_to_int",
            "location": 279,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T"
                ]
            }
        },
        "IteratorToIntStreamAdapter.consume": {
            "name": "consume",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter.seek": {
            "name": "seek",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "List[float]"
                ]
            }
        },
        "IteratorToIntStreamAdapter._index_is_in_buffer": {
            "name": "_index_is_in_buffer",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "IteratorToIntStreamAdapter._lowest_index_in_buffer": {
            "name": "_lowest_index_in_buffer",
            "location": 330,
            "return": [
                "Dict[str, str]",
                "int",
                "Iterable[Iterable[T]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._is_I": {
            "name": "_is_I",
            "location": 335,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._is_E": {
            "name": "_is_E",
            "location": 339,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToIntStreamAdapter._is_EE": {
            "name": "_is_EE",
            "location": 343,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToCharStreamAdapter.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToCharStreamAdapter.make": {
            "name": "make",
            "location": 372,
            "return": [
                "IteratorToCharStreamAdapter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToCharStreamAdapter.LA": {
            "name": "LA",
            "location": 377,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToCharStreamAdapter._item_to_int": {
            "name": "_item_to_int",
            "location": 384,
            "return": [
                "int",
                "float",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "IteratorToCharStreamAdapter.getText": {
            "name": "getText",
            "location": 387,
            "return": [
                "Dict[str, Sequence[str]]",
                "str",
                "io.StringIO",
                "TextIO",
                "int"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "stop": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "IteratorToCharStreamAdapter._write_text": {
            "name": "_write_text",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer_": [
                    "str",
                    "int",
                    "bytes"
                ],
                "length": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "IteratorToTokenStreamAdapter.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToTokenStreamAdapter.make": {
            "name": "make",
            "location": 498,
            "return": [
                "IteratorToTokenStreamAdapter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterator": [
                    "str",
                    "int"
                ]
            }
        },
        "IteratorToTokenStreamAdapter._setup": {
            "name": "_setup",
            "location": 511,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "instance": [
                    "list",
                    "int",
                    "list[]",
                    "bytes",
                    "str"
                ],
                "iterator": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToTokenStreamAdapter._initialize_buffer": {
            "name": "_initialize_buffer",
            "location": 526,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "Tuple[float, float, float, float]",
                    "slice",
                    "T"
                ]
            }
        },
        "IteratorToTokenStreamAdapter._load_one_item_from_iterator": {
            "name": "_load_one_item_from_iterator",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToTokenStreamAdapter._item_to_int": {
            "name": "_item_to_int",
            "location": 554,
            "return": [
                "str",
                "T",
                "bool",
                "tuple",
                "type"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "IteratorToTokenStreamAdapter.get": {
            "name": "get",
            "location": 557,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "IteratorToTokenStreamAdapter._get_result": {
            "name": "_get_result",
            "location": 576,
            "return": [
                "Optional[int]",
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToTokenStreamAdapter.LT": {
            "name": "LT",
            "location": 582,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorToTokenStreamAdapter._total_stream_size": {
            "name": "_total_stream_size",
            "location": 599,
            "return": [
                "Sequence[int]",
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToTokenStreamAdapter._iterator_is_at_eof_token": {
            "name": "_iterator_is_at_eof_token",
            "location": 613,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorToTokenStreamAdapter._eof_token": {
            "name": "_eof_token",
            "location": 619,
            "return": [
                "Sequence[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter.__init__": {
            "name": "__init__",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter.make": {
            "name": "make",
            "location": 633,
            "return": [
                "TokenSourceToIteratorAdapter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "token_source": [
                    "str",
                    "int",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "TokenSourceToIteratorAdapter._setup": {
            "name": "_setup",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "T"
                ],
                "token_source": [
                    "bytes",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TokenSourceToIteratorAdapter.current_item": {
            "name": "current_item",
            "location": 644,
            "return": [
                "int",
                "List[int]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter.has_current_item": {
            "name": "has_current_item",
            "location": 648,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter.is_at_start": {
            "name": "is_at_start",
            "location": 652,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter.is_at_end": {
            "name": "is_at_end",
            "location": 656,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter.move_to_next": {
            "name": "move_to_next",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter._to_S": {
            "name": "_to_S",
            "location": 677,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter._to_I": {
            "name": "_to_I",
            "location": 681,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSourceToIteratorAdapter._to_E": {
            "name": "_to_E",
            "location": 684,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator.__init__": {
            "name": "__init__",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator.make": {
            "name": "make",
            "location": 704,
            "return": [
                "TokenToCharIterator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TokenToCharIterator._setup": {
            "name": "_setup",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "TokenToCharIterator._initialize": {
            "name": "_initialize",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Optional[bytes]",
                    "Optional[Callable]",
                    "float"
                ]
            }
        },
        "TokenToCharIterator.current_item": {
            "name": "current_item",
            "location": 726,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator.has_current_item": {
            "name": "has_current_item",
            "location": 731,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator.is_at_start": {
            "name": "is_at_start",
            "location": 735,
            "return": [
                "int",
                "str",
                "Sequence[Sequence[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator.is_at_end": {
            "name": "is_at_end",
            "location": 739,
            "return": [
                "bool",
                "Iterable[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator.move_to_next": {
            "name": "move_to_next",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator._current_length": {
            "name": "_current_length",
            "location": 758,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator._move_to_next_non_blank_token": {
            "name": "_move_to_next_non_blank_token",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator._move_to_next_text": {
            "name": "_move_to_next_text",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator._set_text": {
            "name": "_set_text",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenToCharIterator._to_E": {
            "name": "_to_E",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/antlr4/__init__.py": {},
    "autorecurse-master/python3/src/autorecurse/lib/python/argparse.py": {
        "ThrowingArgumentParser.error": {
            "name": "error",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[dict]",
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "autorecurse-master/python3/src/autorecurse/lib/python/__init__.py": {},
    "autorecurse-master/python3/tests/__init__.py": {},
    "autorecurse-master/python3/tests/gnumake/test_data.py": {
        "TestDefaultTargetFormatter.test_minimal_target": {
            "name": "test_minimal_target",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTargetFormatter.test_prerequisites_only": {
            "name": "test_prerequisites_only",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTargetFormatter.test_order_only_prerequisites_only": {
            "name": "test_order_only_prerequisites_only",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTargetFormatter.test_recipe_only": {
            "name": "test_recipe_only",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTargetFormatter.test_maximal_target": {
            "name": "test_maximal_target",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTargetFormatter._target_to_string": {
            "name": "_target_to_string",
            "location": 44,
            "return": [
                "str",
                "int",
                "io.BytesIO"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Optional[Union[float, str]]",
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/test_implementation.py": {
        "TestGnuMake.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnuMake.test_nested_makefiles": {
            "name": "test_nested_makefiles",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnuMake.test_execution_directory": {
            "name": "test_execution_directory",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnuMake.test_target_listing_file": {
            "name": "test_target_listing_file",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnuMake.test_nested_rule_file": {
            "name": "test_nested_rule_file",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTargetListingTargetReader.test_target_iterator": {
            "name": "test_target_iterator",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedMakefileLocator.test_with_results": {
            "name": "test_with_results",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedMakefileLocator.test_without_results": {
            "name": "test_without_results",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/test_parse.py": {
        "TestParseContextTargetBuilder.test_basic_operation": {
            "name": "test_basic_operation",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/__init__.py": {},
    "autorecurse-master/python3/tests/gnumake/grammar/test_filter.py": {
        "TestFileSectionFilter.test_content": {
            "name": "test_content",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/grammar/test_MakefileRuleLexer.py": {
        "TestMakefileRuleLexer.test_basic_operation": {
            "name": "test_basic_operation",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/grammar/test_MakefileRuleParser.py": {
        "TestMakefileRuleParser.test_basic_operation": {
            "name": "test_basic_operation",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/grammar/test_TargetParagraphLexer.py": {
        "TestTargetParagraphLexer.test_basic_operation": {
            "name": "test_basic_operation",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/gnumake/grammar/__init__.py": {},
    "autorecurse-master/python3/tests/lib/test_file.py": {
        "TestUniqueFileCreator.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUniqueFileCreator.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUniqueFileCreator.test_operation": {
            "name": "test_operation",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUniqueFileCreator._new_file_creator": {
            "name": "_new_file_creator",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLifetimeManager.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLifetimeManager.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLifetimeManager.test_operation": {
            "name": "test_operation",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLifetimeManager._new_file_creator": {
            "name": "_new_file_creator",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/lib/test_iterator.py": {
        "IteratorTestWrapper.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.make": {
            "name": "make",
            "location": 18,
            "return": [
                "IteratorTestWrapper",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "actual": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "IteratorTestWrapper._setup": {
            "name": "_setup",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[int]",
                    "None",
                    "Dict[str, Any]",
                    "int",
                    "List[str]",
                    "dict[str, typing.Any]"
                ],
                "actual": [
                    "int"
                ],
                "expected": [
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "IteratorTestWrapper.assert_start_state": {
            "name": "assert_start_state",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.assert_intermediate_state": {
            "name": "assert_intermediate_state",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.assert_end_state": {
            "name": "assert_end_state",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.current_item": {
            "name": "current_item",
            "location": 46,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.has_current_item": {
            "name": "has_current_item",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.is_at_start": {
            "name": "is_at_start",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.is_at_end": {
            "name": "is_at_end",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.move_to_next": {
            "name": "move_to_next",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTestWrapper.move_to_end": {
            "name": "move_to_end",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorTrajectoryTest.run": {
            "name": "run",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "str",
                    "bool"
                ]
            }
        },
        "IteratorTrajectoryNextTest.make": {
            "name": "make",
            "location": 81,
            "return": [
                "BaseException",
                "IteratorTrajectoryNextTest"
            ],
            "arguments": {}
        },
        "IteratorTrajectoryNextTest.run": {
            "name": "run",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int"
                ]
            }
        },
        "IteratorTrajectoryEndTest.make": {
            "name": "make",
            "location": 96,
            "return": [
                "BaseException",
                "IteratorTrajectoryEndTest"
            ],
            "arguments": {}
        },
        "IteratorTrajectoryEndTest.run": {
            "name": "run",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int"
                ]
            }
        },
        "IteratorTrajectoryNextEndTest.make": {
            "name": "make",
            "location": 109,
            "return": [
                "Tuple[Any, Any, Any]",
                "IteratorTrajectoryNextEndTest"
            ],
            "arguments": {}
        },
        "IteratorTrajectoryNextEndTest.run": {
            "name": "run",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": []
            }
        },
        "IteratorTests.run_all": {
            "name": "run_all",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": [
                    "int",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestListIterator.make_iterator_wrapper_content": {
            "name": "make_iterator_wrapper_content",
            "location": 131,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TestListIterator.make_iterator_wrapper_empty": {
            "name": "make_iterator_wrapper_empty",
            "location": 137,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "TestListIterator.test_iterator_tests": {
            "name": "test_iterator_tests",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/lib/test_line.py": {
        "MockFile.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFile.make": {
            "name": "make",
            "location": 16,
            "return": [
                "MockFile",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "MockFile._setup": {
            "name": "_setup",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Optional[bool]",
                    "bool",
                    "List[int]",
                    "None",
                    "int",
                    "list[int]"
                ]
            }
        },
        "MockFile.current_line": {
            "name": "current_line",
            "location": 28,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFile.append_line": {
            "name": "append_line",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "MockFile.readline": {
            "name": "readline",
            "location": 34,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineBreakError.test_default_message": {
            "name": "test_default_message",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineBreakError.test_custom_message": {
            "name": "test_custom_message",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLine.test_no_line_breaks": {
            "name": "test_no_line_breaks",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLine.test_one_line_break": {
            "name": "test_one_line_break",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLine.test_empty_no_line_breaks": {
            "name": "test_empty_no_line_breaks",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLine.test_empty_one_line_break": {
            "name": "test_empty_one_line_break",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLine.test_two_line_breaks": {
            "name": "test_two_line_breaks",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLine.test_eq_operator": {
            "name": "test_eq_operator",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLineIterator.make_iterator_wrapper_content": {
            "name": "make_iterator_wrapper_content",
            "location": 91,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TestFileLineIterator.make_iterator_wrapper_empty": {
            "name": "make_iterator_wrapper_empty",
            "location": 101,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "TestFileLineIterator.test_iterator_tests": {
            "name": "test_iterator_tests",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyLineFilter.test_non_empty_line": {
            "name": "test_non_empty_line",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyLineFilter.test_empty_line": {
            "name": "test_empty_line",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/lib/test_stream.py": {
        "TestConditionFilter.make_iterator_wrapper_content": {
            "name": "make_iterator_wrapper_content",
            "location": 12,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TestConditionFilter.make_iterator_wrapper_content_no_padding": {
            "name": "make_iterator_wrapper_content_no_padding",
            "location": 24,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TestConditionFilter.make_iterator_wrapper_content_blank": {
            "name": "make_iterator_wrapper_content_blank",
            "location": 36,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TestConditionFilter.make_iterator_wrapper_empty": {
            "name": "make_iterator_wrapper_empty",
            "location": 45,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "TestConditionFilter.test_iterator_tests": {
            "name": "test_iterator_tests",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autorecurse-master/python3/tests/lib/__init__.py": {}
}
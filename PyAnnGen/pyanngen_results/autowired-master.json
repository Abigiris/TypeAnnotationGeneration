{
    "autowired-master/setup.py": {},
    "autowired-master/autowired/pyramid.py": {
        "register_autowire": {
            "name": "register_autowire",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "pyramid.config.Configurator",
                    "None"
                ],
                "cls": [
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "bool",
                    "None",
                    "Optional[Iterable[Any]]",
                    "Type[Any]",
                    "Iterable[Any]",
                    "int",
                    "Type"
                ],
                "iface": [
                    "Optional[str]",
                    "pyramid.config.Configurator",
                    "bool"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "bool",
                    "Mapping",
                    "Dict[str, str]"
                ]
            }
        },
        "register_autowire.factory": {
            "name": "factory",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context_": [],
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "autowired-master/autowired/__init__.py": {
        "factory_factory": {
            "name": "factory_factory",
            "location": 168,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "bool",
                    "None",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Type",
                    "int",
                    "Iterable[Any]"
                ],
                "cls_args": [
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "bool",
                    "Mapping",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Type",
                    "int",
                    "Iterable[Any]"
                ],
                "cls_kwargs": [
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "bool",
                    "Mapping",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Type",
                    "int",
                    "Iterable[Any]"
                ],
                "namespace": [
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "bool",
                    "Mapping",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Type",
                    "int",
                    "Iterable[Any]"
                ],
                "lazy": [
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "int"
                ]
            }
        },
        "register_autowire": {
            "name": "register_autowire",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "Type[Any]",
                    "Type",
                    "int",
                    "Optional[Type[Any]]",
                    "None",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "cls": [
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "bool",
                    "None",
                    "Callable",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Type",
                    "Iterable[Any]"
                ],
                "iface": [
                    "str",
                    "Type[Any]",
                    "Optional[Type[Any]]",
                    "Tuple[float, float]",
                    "int"
                ]
            }
        },
        "enable_autowire": {
            "name": "enable_autowire",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "FromProperty.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "FromNamespace.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Autowire.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iface_or_type": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Autowire.raise_if_using_lazy": {
            "name": "raise_if_using_lazy",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autowire.resolved": {
            "name": "resolved",
            "location": 78,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "obj": [
                    "bool",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Callable[[str],None]",
                    "Mapping",
                    "types.ModuleType",
                    "Callable[str,None]"
                ],
                "namespace": [
                    "None"
                ]
            }
        },
        "AutowireField.__get__": {
            "name": "__get__",
            "location": 114,
            "return": [
                "AutowireField",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "type": [
                    "str",
                    "None",
                    "Type",
                    "Optional[type]"
                ]
            }
        },
        "AutowireFieldLazyLoader.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "List[Callable]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "namespace": [
                    "List[Callable]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "property_map": [
                    "Callable",
                    "Dict[str,Any]",
                    "Dict[str,Callable[,Any]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "AutowireInit.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutowireInit.__call__": {
            "name": "__call__",
            "location": 151,
            "return": [
                "Callable",
                "int",
                "float",
                "Union[int,slice]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "float",
                    "Callable[[T],bool]"
                ]
            }
        },
        "AutowireInit.raise_if_using_lazy": {
            "name": "raise_if_using_lazy",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutowireInit.resolved": {
            "name": "resolved",
            "location": 159,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Mapping",
                    "str",
                    "wired.ServiceContainer",
                    "Mapping[str,Any]"
                ],
                "namespace": [
                    "Mapping",
                    "str",
                    "wired.ServiceContainer",
                    "Mapping[str,Any]"
                ]
            }
        },
        "factory_factory.factory": {
            "name": "factory",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "container": [
                    "wired.ServiceContainer",
                    "dict",
                    "list",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "autowired-master/tests/test_errors.py": {
        "test_does_not_wired": {
            "name": "test_does_not_wired",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_does_not_support_lazy_eager": {
            "name": "test_does_not_support_lazy_eager",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_does_not_support_lazy_init": {
            "name": "test_does_not_support_lazy_init",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_does_not_support_lazy_init.Foo.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autowired-master/tests/test_field_eager.py": {
        "test": {
            "name": "test",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "autowired-master/tests/test_field_lazy.py": {
        "assert_lazy": {
            "name": "assert_lazy",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls_args": [
                    "int",
                    "Callable",
                    "str",
                    "float",
                    "bytes",
                    "bool"
                ],
                "cls_kwargs": [
                    "int",
                    "Callable",
                    "str",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_args": {
            "name": "test_args",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kwargs": {
            "name": "test_kwargs",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args_kwargs": {
            "name": "test_args_kwargs",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_impl04": [
                    "int"
                ],
                "p_impl05": [
                    "int"
                ]
            }
        }
    },
    "autowired-master/tests/test_init.py": {
        "test": {
            "name": "test",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "impl00": [
                    "int",
                    "float",
                    "bool"
                ],
                "impl01": [
                    "int",
                    "float",
                    "bool"
                ],
                "impl02": [
                    "int",
                    "float",
                    "bool"
                ],
                "impl03": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "autowired-master/tests/test_pyramid.py": {
        "test": {
            "name": "test",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.aview": {
            "name": "aview",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "base.Request"
                ]
            }
        }
    }
}
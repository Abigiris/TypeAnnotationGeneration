{
    "aws-assume-master/setup.py": {},
    "aws-assume-master/awsassume/assume_role.py": {
        "AssumeRole.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assume_role_args": [
                    "int",
                    "bool",
                    "awsassume.data_models.AssumeRoleArgs"
                ]
            }
        },
        "AssumeRole.assume_role": {
            "name": "assume_role",
            "location": 15,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-assume-master/awsassume/assume_role_cache_executor.py": {
        "AssumeRoleCacheExecutor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_token_service": [
                    "int",
                    "str",
                    "Callable",
                    "List"
                ],
                "response_cache_adapter": [
                    "Optional[float]",
                    "Dict[str,Any]",
                    "float",
                    "None"
                ]
            }
        },
        "AssumeRoleCacheExecutor.execute": {
            "name": "execute",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssumeRoleCacheExecutor.newly_request_and_cache_assume_role": {
            "name": "newly_request_and_cache_assume_role",
            "location": 34,
            "return": [
                "Tuple[int,str]",
                "Dict[Any,str]",
                "Dict",
                "Dict[str,str]",
                "Optional[Any]",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssumeRoleCacheExecutor.compose_credentials": {
            "name": "compose_credentials",
            "location": 41,
            "return": [
                "Credentials",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "assumed_role_response": [
                    "dict"
                ]
            }
        }
    },
    "aws-assume-master/awsassume/assume_role_executor.py": {
        "AssumeRoleExecutor.execute": {
            "name": "execute",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-assume-master/awsassume/assume_role_executor_factory.py": {
        "AssumeRoleExecutorFactory.get_executor": {
            "name": "get_executor",
            "location": 13,
            "return": [
                "Union[(awsassume.assume_role_cache_executor.AssumeRoleCacheExecutor, awsassume.assume_role_no_cache_executor.AssumeRoleNoCacheExecutor)]"
            ],
            "arguments": {
                "cli_args": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Exception",
                    "Dict"
                ]
            }
        }
    },
    "aws-assume-master/awsassume/assume_role_no_cache_executor.py": {
        "AssumeRoleNoCacheExecutor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_token_service": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "Callable",
                    "List",
                    "int",
                    "bytes",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ]
            }
        },
        "AssumeRoleNoCacheExecutor.execute": {
            "name": "execute",
            "location": 11,
            "return": [
                "Credentials",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-assume-master/awsassume/command_executor.py": {
        "CommandExecutor.execute": {
            "name": "execute",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ],
                "env_var": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "aws-assume-master/awsassume/command_line_args.py": {
        "CommandLineArgs.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineArgs.get_cli_args": {
            "name": "get_cli_args",
            "location": 20,
            "return": [
                "CliArgs",
                "bool",
                "str",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-assume-master/awsassume/data_models.py": {},
    "aws-assume-master/awsassume/environment_variable.py": {
        "EnvironmentVariable.display_credentials_to_be_exported": {
            "name": "display_credentials_to_be_exported",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "awsassume.data_models.Credentials",
                    "List[str]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "region_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "EnvironmentVariable.generate_command_to_export_credentials": {
            "name": "generate_command_to_export_credentials",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "credentials": [
                    "str"
                ],
                "region_name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Iterable[str]",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "EnvironmentVariable.get_env_var_with_credentials": {
            "name": "get_env_var_with_credentials",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "Dict",
                    "awsassume.data_models.Credentials"
                ],
                "region_name": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "aws-assume-master/awsassume/main.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-assume-master/awsassume/response_cache.py": {
        "ResponseCache.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseCache.set_response_to_cache": {
            "name": "set_response_to_cache",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_cache_args": [
                    "str",
                    "bool"
                ],
                "assumed_role_response": [
                    "Dict",
                    "awsassume.data_models.AssumedRoleResponse"
                ]
            }
        },
        "ResponseCache.get_response_from_cache": {
            "name": "get_response_from_cache",
            "location": 26,
            "return": [
                "Tuple[int, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response_cache_args": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Tuple[str,str,str,str,str]",
                    "Tuple[Union[str,str,str,str,str]]"
                ]
            }
        },
        "ResponseCache.delete_cache_file": {
            "name": "delete_cache_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_cache_args": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "ResponseCache.get_cache_full_path": {
            "name": "get_cache_full_path",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response_cache_args": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "ResponseCache.get_cache_name": {
            "name": "get_cache_name",
            "location": 50,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "response_cache_args": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "aws-assume-master/awsassume/response_cache_adapter.py": {
        "ResponseCacheAdapter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_cache_args": [
                    "None",
                    "List[str]",
                    "Optional[ShippingInfo]",
                    "bytes",
                    "str",
                    "Dict",
                    "Optional[bytes]",
                    "bool",
                    "List[tuple[Union[str,...]]]",
                    "List[Tuple[str,...]]"
                ]
            }
        },
        "ResponseCacheAdapter.set_response_to_cache": {
            "name": "set_response_to_cache",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assumed_role_response": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "ResponseCacheAdapter.get_response_from_cache": {
            "name": "get_response_from_cache",
            "location": 15,
            "return": [
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseCacheAdapter.delete_cache_file": {
            "name": "delete_cache_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-assume-master/awsassume/security_token_service.py": {
        "SecurityTokenService.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "region_name": [
                    "str",
                    "None"
                ]
            }
        },
        "SecurityTokenService.assume_role": {
            "name": "assume_role",
            "location": 14,
            "return": [
                "awsassume.data_models.AssumedRoleResponse",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-assume-master/awsassume/__init__.py": {},
    "aws-assume-master/awsassume/__main__.py": {
        "console_entry": {
            "name": "console_entry",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-assume-master/tests/test_assume_role.py": {
        "assume_role": {
            "name": "assume_role",
            "location": 10,
            "return": [
                "Callable",
                "AssumeRole"
            ],
            "arguments": {}
        },
        "assumed_role_response": {
            "name": "assumed_role_response",
            "location": 18,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Tuple[str, Optional[int]]",
                "Tuple[bytes, str]",
                "dict"
            ],
            "arguments": {}
        },
        "test_assume_role": {
            "name": "test_assume_role",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "assume_role": [
                    "Dict",
                    "unittesmock.MagicMock"
                ],
                "assumed_role_response": [
                    "Dict",
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "aws-assume-master/tests/test_assume_role_cache_executor.py": {
        "assume_role": {
            "name": "assume_role",
            "location": 14,
            "return": [
                "Callable",
                "AssumeRole"
            ],
            "arguments": {}
        },
        "response_cache_args": {
            "name": "response_cache_args",
            "location": 22,
            "return": [
                "ResponseCacheArgs",
                "Dict[str,Any]",
                "int",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "response_cache_adapter": {
            "name": "response_cache_adapter",
            "location": 30,
            "return": [
                "ResponseCacheAdapter",
                "Dict[str,Any]",
                "str",
                "int"
            ],
            "arguments": {
                "response_cache_args": [
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "assume_role_cache_executor": {
            "name": "assume_role_cache_executor",
            "location": 35,
            "return": [
                "AssumeRoleCacheExecutor",
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "assume_role": [
                    "str",
                    "bool"
                ],
                "response_cache_adapter": [
                    "str",
                    "bool"
                ]
            }
        },
        "assumed_role_response": {
            "name": "assumed_role_response",
            "location": 40,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Tuple[str, Optional[int]]",
                "Tuple[bytes, str]",
                "dict"
            ],
            "arguments": {}
        },
        "cached_response": {
            "name": "cached_response",
            "location": 47,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "datetime.datetime"
                ]
            }
        },
        "credentials": {
            "name": "credentials",
            "location": 52,
            "return": [
                "bool",
                "Credentials"
            ],
            "arguments": {}
        },
        "test_execute": {
            "name": "test_execute",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "assume_role_cache_executor": [
                    "unittesmock.MagicMock"
                ],
                "assumed_role_response": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "cached_response": [],
                "credentials": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "aws-assume-master/tests/test_assume_role_executor_factory.py": {
        "cli_args": {
            "name": "cli_args",
            "location": 10,
            "return": [
                "CliArgs",
                "Optional[Any]",
                "bool",
                "Callable[...,None]"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_get_executor": {
            "name": "test_get_executor",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_args": []
            }
        }
    },
    "aws-assume-master/tests/test_assume_role_no_cache_executor.py": {
        "assume_role": {
            "name": "assume_role",
            "location": 13,
            "return": [
                "Callable",
                "AssumeRole"
            ],
            "arguments": {}
        },
        "assume_role_no_cache_executor": {
            "name": "assume_role_no_cache_executor",
            "location": 21,
            "return": [
                "str",
                "AssumeRoleNoCacheExecutor"
            ],
            "arguments": {
                "assume_role": [
                    "List[List[str]]",
                    "str",
                    "List[list[str]]"
                ]
            }
        },
        "assumed_role_response": {
            "name": "assumed_role_response",
            "location": 26,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Tuple[str, Optional[int]]",
                "Tuple[bytes, str]",
                "dict"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 33,
            "return": [
                "bool",
                "Credentials"
            ],
            "arguments": {}
        },
        "test_execute": {
            "name": "test_execute",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "assume_role_no_cache_executor": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "assumed_role_response": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "credentials": [
                    "bool",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "aws-assume-master/tests/test_command_line_args.py": {
        "command_line_args": {
            "name": "command_line_args",
            "location": 11,
            "return": [
                "Tuple",
                "CommandLineArgs"
            ],
            "arguments": {}
        },
        "argparse_cli_args": {
            "name": "argparse_cli_args",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "cli_args": {
            "name": "cli_args",
            "location": 28,
            "return": [
                "CliArgs",
                "Optional[Any]",
                "bool",
                "Callable[...,None]"
            ],
            "arguments": {}
        },
        "test_get_cli_args": {
            "name": "test_get_cli_args",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_args": [
                    "mock.MagicMock"
                ],
                "argparse_cli_args": [
                    "mock.MagicMock"
                ],
                "cli_args": [
                    "str",
                    "argparse.Namespace"
                ]
            }
        }
    },
    "aws-assume-master/tests/test_environment_variable.py": {
        "credentials": {
            "name": "credentials",
            "location": 12,
            "return": [
                "bool",
                "Credentials"
            ],
            "arguments": {}
        },
        "region_name": {
            "name": "region_name",
            "location": 20,
            "return": [
                "int",
                "str",
                "T",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_display_credentials_to_be_exported": {
            "name": "test_display_credentials_to_be_exported",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [
                    "str"
                ],
                "region_name": [
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "capsys": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_generate_command_to_export_credentials": {
            "name": "test_generate_command_to_export_credentials",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "List[str]"
                ],
                "region_name": [
                    "str",
                    "Union[str,Sequence[str]]",
                    "Sequence[str]",
                    "Union[str,List[str],Tuple[str,...]]",
                    "List[str]",
                    "Optional[str]",
                    "Tuple[Union[str,...]]",
                    "None"
                ]
            }
        },
        "test_get_env_var_with_credentials": {
            "name": "test_get_env_var_with_credentials",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "Union[str,List[str],Tuple[str,...]]",
                    "List[str]",
                    "Optional[str]",
                    "Tuple[Union[str,...]]",
                    "None"
                ],
                "region_name": [
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "aws-assume-master/tests/test_response_cache.py": {
        "response_cache": {
            "name": "response_cache",
            "location": 9,
            "return": [
                "ResponseCache",
                "Dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {}
        },
        "response_cache_args": {
            "name": "response_cache_args",
            "location": 14,
            "return": [
                "ResponseCacheArgs",
                "Dict[str,Any]",
                "int",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "cache_directory": {
            "name": "cache_directory",
            "location": 22,
            "return": [
                "Text",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "assumed_role_response": {
            "name": "assumed_role_response",
            "location": 27,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Tuple[str, Optional[int]]",
                "Tuple[bytes, str]",
                "dict"
            ],
            "arguments": {}
        },
        "test_cache_directory_name": {
            "name": "test_cache_directory_name",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cache_directory": [
                    "str"
                ]
            }
        },
        "test_cache_directory_exist": {
            "name": "test_cache_directory_exist",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cache_directory": [
                    "str"
                ]
            }
        },
        "test_get_cache_name": {
            "name": "test_get_cache_name",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "response_cache": [
                    "dict",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "str"
                ],
                "response_cache_args": [
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Dict[str,str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "test_get_cache_full_path": {
            "name": "test_get_cache_full_path",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "response_cache": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "response_cache_args": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "cache_directory": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_set_get_delete_response": {
            "name": "test_set_get_delete_response",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "response_cache": [
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "response_cache_args": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict",
                    "None"
                ],
                "cache_directory": [
                    "str",
                    "Callable"
                ],
                "assumed_role_response": [
                    "Optional[str]",
                    "Dict",
                    "str",
                    "None"
                ]
            }
        }
    },
    "aws-assume-master/tests/test_response_cache_adapter.py": {
        "response_cache_adapter": {
            "name": "response_cache_adapter",
            "location": 9,
            "return": [
                "ResponseCacheAdapter",
                "Dict[str,Any]",
                "str",
                "int"
            ],
            "arguments": {
                "response_cache_args": [
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "response_cache_args": {
            "name": "response_cache_args",
            "location": 14,
            "return": [
                "ResponseCacheArgs",
                "Dict[str,Any]",
                "int",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "assumed_role_response": {
            "name": "assumed_role_response",
            "location": 22,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Tuple[str, Optional[int]]",
                "Tuple[bytes, str]",
                "dict"
            ],
            "arguments": {}
        },
        "test_set_get_delete_response": {
            "name": "test_set_get_delete_response",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "response_cache_adapter": [
                    "int",
                    "bool"
                ],
                "assumed_role_response": [
                    "Dict",
                    "int",
                    "Dict[str,str]",
                    "Set[str]"
                ]
            }
        }
    },
    "aws-assume-master/tests/__init__.py": {},
    "aws-assume-master/tests/fixture/assumed_role_response.py": {},
    "aws-assume-master/tests/fixture/__init__.py": {}
}
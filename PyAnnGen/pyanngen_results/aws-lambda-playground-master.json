{
    "aws-lambda-playground-master/aws-sam/api-gateway/src/handlers/create/index.py": {
        "response": {
            "name": "response",
            "location": 9,
            "return": [
                "Dict[Text,int]",
                "str",
                "Dict[str,Any]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "body": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Callable]",
                    "Callable",
                    "List[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 17,
            "return": [
                "dict",
                "int",
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict",
                    "Callable[[T],bool]",
                    "Callable",
                    "Dict[str,Any]"
                ],
                "context": [
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/api-gateway/src/handlers/delete/index.py": {
        "response": {
            "name": "response",
            "location": 9,
            "return": [
                "Dict[Text,int]",
                "str",
                "Dict[str,Any]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "body": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Callable]",
                    "Callable",
                    "List[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 17,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int",
                    "bool"
                ],
                "context": [
                    "Dict"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/api-gateway/src/handlers/user/index.py": {
        "response": {
            "name": "response",
            "location": 9,
            "return": [
                "Dict[Text,int]",
                "str",
                "Dict[str,Any]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "result": [
                    "Dict",
                    "str",
                    "Exception",
                    "Dict[str,Any]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 17,
            "return": [
                "Optional[List[str]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "event": [
                    "float",
                    "bool"
                ],
                "context": [
                    "Callable"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/aws-health-step-function/src/handlers/func/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/aws-health-step-function-transform-not-work/src/handlers/handler/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/cloudfront-auto-update-ips/index.py": {
        "handler": {
            "name": "handler",
            "location": 4,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/cloudwatch-export-task/src/handlers/func1/index.py": {
        "get_from_timestamp": {
            "name": "get_from_timestamp",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool",
                "Mapping[str,Any]",
                "List[Dict]"
            ],
            "arguments": {}
        },
        "get_to_timestamp": {
            "name": "get_to_timestamp",
            "location": 21,
            "return": [
                "int",
                "Dict",
                "Exception",
                "Optional[Dict[str,Any]]",
                "str"
            ],
            "arguments": {
                "from_ts": [
                    "bool",
                    "List[tuple[Union[str,int]]]",
                    "Counter",
                    "List[Tuple[str,int]]",
                    "Optional[datetime.date]"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 25,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/codepipeline-custom-action/test1/src/handlers/func1/handler.py": {
        "hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/cron/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "float",
                "List[dict[str,Any]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/dead-letter-queue/src/handlers/failure/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/dead-letter-queue/src/handlers/invoked/index.py": {
        "handler": {
            "name": "handler",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "int",
                    "float",
                    "List[str]",
                    "Optional[float]",
                    "None"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/di-python-inject/src/handlers/func/config.py": {
        "cloud": {
            "name": "cloud",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "binder": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "localhost": {
            "name": "localhost",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "binder": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/di-python-inject/src/handlers/func/func1.py": {
        "Func1.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "context": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ]
            }
        },
        "Func1._put_item": {
            "name": "_put_item",
            "location": 16,
            "return": [
                "Optional[str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Func1.main": {
            "name": "main",
            "location": 20,
            "return": [
                "str",
                "Dict[str, str]",
                "list",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/di-python-inject/src/handlers/func/index.py": {
        "handler": {
            "name": "handler",
            "location": 9,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Dict",
                    "config.ConfigManager"
                ],
                "context": [
                    "Dict[str,Any]",
                    "Dict",
                    "config.ConfigManager"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/di-python-inject/src/handlers/func/inject.py": {
        "configure": {
            "name": "configure",
            "location": 94,
            "return": [
                "Injector",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config": [
                    "Optional[List[str]]",
                    "None",
                    "Dict[str,str]",
                    "Dict",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "configure_once": {
            "name": "configure_once",
            "location": 107,
            "return": [
                "None",
                "Optional[str]",
                "Dict[str,Any]",
                "int",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "clear_and_configure": {
            "name": "clear_and_configure",
            "location": 116,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "is_configured": {
            "name": "is_configured",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "clear": {
            "name": "clear",
            "location": 129,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "instance": {
            "name": "instance",
            "location": 141,
            "return": [
                "str",
                "bool",
                "logging.LogRecord",
                "list",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "attr": {
            "name": "attr",
            "location": 146,
            "return": [
                "_AttributeInjection",
                "str",
                "Dict",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[int]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "param": {
            "name": "param",
            "location": 151,
            "return": [
                "_ParameterInjection",
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "cls": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "params": {
            "name": "params",
            "location": 156,
            "return": [
                "_ParametersInjection",
                "str",
                "Dict",
                "Union[str,Dict]",
                "Exception",
                "Dict[str,Any]",
                "float"
            ],
            "arguments": {}
        },
        "get_injector": {
            "name": "get_injector",
            "location": 168,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_injector_or_die": {
            "name": "get_injector_or_die",
            "location": 173,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Binder.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binder.install": {
            "name": "install",
            "location": 186,
            "return": [
                "Binder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "Binder.bind": {
            "name": "bind",
            "location": 191,
            "return": [
                "Binder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Exception",
                    "bool",
                    "Type",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "instance": [
                    "Exception",
                    "str"
                ]
            }
        },
        "Binder.bind_to_constructor": {
            "name": "bind_to_constructor",
            "location": 198,
            "return": [
                "Binder",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Set[str]",
                    "str",
                    "Type"
                ],
                "constructor": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[str]",
                    "Any",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[Callable]",
                    "Callable",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "Binder.bind_to_provider": {
            "name": "bind_to_provider",
            "location": 208,
            "return": [
                "Binder",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type",
                    "str"
                ],
                "provider": [
                    "Callable",
                    "Optional[Callable]",
                    "Optional[int]",
                    "Type",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Binder._check_class": {
            "name": "_check_class",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[str]",
                    "Type",
                    "str",
                    "None",
                    "Tuple[List[str],Optional[str]]",
                    "Tuple[Union[list[str],str,None]]"
                ]
            }
        },
        "Injector.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None"
                ]
            }
        },
        "Injector.get_instance": {
            "name": "get_instance",
            "location": 235,
            "return": [
                "str",
                "bool",
                "int",
                "Dict",
                "Dict[str,tuple[Union[str,bool]]]",
                "List[str]",
                "Tuple[Type]",
                "Callable[,Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict",
                    "Type",
                    "str",
                    "Exception",
                    "Collection[str]",
                    "Collection"
                ]
            }
        },
        "_ConstructorBinding.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constructor": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_ConstructorBinding.__call__": {
            "name": "__call__",
            "location": 268,
            "return": [
                "Callable",
                "int",
                "str",
                "float",
                "bytes",
                "Dict",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AttributeInjection.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_AttributeInjection.__get__": {
            "name": "__get__",
            "location": 286,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ],
                "owner": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ]
            }
        },
        "_ParameterInjection.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "cls": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_ParameterInjection.__call__": {
            "name": "__call__",
            "location": 297,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "_ParametersInjection.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ParametersInjection.__call__": {
            "name": "__call__",
            "location": 313,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "_ParameterInjection.__call__.injection_wrapper": {
            "name": "injection_wrapper",
            "location": 299,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "_ParametersInjection.__call__.injection_wrapper": {
            "name": "injection_wrapper",
            "location": 321,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/aws-sam/di-python-inject/src/handlers/func/tests/conftest.py": {
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "T",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "dynamodb": {
            "name": "dynamodb",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "create_table": {
            "name": "create_table",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamodb": [
                    "str",
                    "bool"
                ],
                "request": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "create_table.delete_table": {
            "name": "delete_table",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/aws-sam/di-python-inject/src/handlers/func/tests/test_func1.py": {
        "test_injected_dynamodb": {
            "name": "test_injected_dynamodb",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/dynamodb-step-functions/src/handlers/invoke_step_functions/index.py": {
        "handler": {
            "name": "handler",
            "location": 9,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/dynamodb-step-functions/src/handlers/remind/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "str",
                "List[str]",
                "float",
                "List[dict[str,Any]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/dynamodb-step-functions/src/handlers/remind_handler/index.py": {
        "handler": {
            "name": "handler",
            "location": 8,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Mapping[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/external-module/src/handlers/handler/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/import-dynamodb-stream/src/handlers/test_func/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/iot-rule-lambda/src/handlers/action_func/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/iot-rule-lambda/src/handlers/where_func/index.py": {
        "emit": {
            "name": "emit",
            "location": 9,
            "return": [
                "Dict[Text,Union[Type,float]]",
                "Dict",
                "Dict[str,Any]",
                "Dict[str,int]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "flag": [
                    "Type",
                    "float"
                ]
            }
        },
        "item_exists": {
            "name": "item_exists",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "device_id": [
                    "str",
                    "int",
                    "bytes",
                    "Type[int]",
                    "Type"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict",
                    "Optional[models.LTI1p3Provider]",
                    "Callable"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/nested-stack/src/handlers/func1/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/nested-stack/src/handlers/func2/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/plural-events/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "float",
                "List[dict[str,Any]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/publish-version-not-work/src/handlers/func1/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "Text",
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/publish-version-sns-backed-custom/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "Text",
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/publish-version-sns-backed-custom/src/handlers/func2/index.py": {
        "handler": {
            "name": "handler",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict"
                ],
                "context": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/put-metric-data/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/pynamodb/test1.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/aws-sam/pynamodb/test2.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/aws-sam/pynamodb/user1.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/aws-sam/pynamodb/user2.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/aws-sam/pynamodb/__init__.py": {},
    "aws-lambda-playground-master/aws-sam/python3.6/src/handlers/python36/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "str",
                "List[str]",
                "float",
                "List[dict[str,Any]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/sqs/src/handlers/test_func/index.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/step-function/src/handlers/handler/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/swagger-external/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/swagger-inline1/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/swagger-inline2/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/swagger-inline3/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/swagger-transform-1/src/handlers/func1/index.py": {
        "handler": {
            "name": "handler",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/test1/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/test2/src/handlers/pure-python/handler.py": {
        "hello": {
            "name": "hello",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/test3/src/handlers/func1/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "Text",
                "int",
                "bool"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/test3/src/handlers/func2/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "Text",
                "int",
                "bool"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/test4/src/handlers/func1/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "Text",
                "int",
                "bool"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/aws-sam/test4/src/handlers/func2/handler.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "Text",
                "int",
                "bool"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/delete-snapshot/delete_snapshot.py": {
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/dynamodb/functions/dynamodb_simple/main.py": {
        "handle": {
            "name": "handle",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "DynamoDB.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DynamoDB.describe_table": {
            "name": "describe_table",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDB.scan": {
            "name": "scan",
            "location": 22,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDB.query": {
            "name": "query",
            "location": 25,
            "return": [
                "str",
                "Dict[Hashable, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDB.get_item": {
            "name": "get_item",
            "location": 30,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[Mapping[str, str]]",
                "dict",
                "Dict[int, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "None",
                    "int",
                    "VT",
                    "KT",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "DynamoDB.update_item": {
            "name": "update_item",
            "location": 35,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Key]"
                ]
            }
        },
        "DynamoDB.put_item": {
            "name": "put_item",
            "location": 40,
            "return": [
                "bool",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,object]",
                    "T"
                ]
            }
        }
    },
    "aws-lambda-playground-master/dynamodb-conditional-writes/functions/dynamodb_conditional_writes/main.py": {},
    "aws-lambda-playground-master/lambda-auto-encrypt-logs/functions/lambda_auto_encrypt_logs/main.py": {
        "handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/lambda-to-slack/functions/lambda-to-slack/main.py": {
        "handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "logging.Logger",
                    "bool",
                    "dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/python-apex-external-module/functions/dependency/main.py": {
        "handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "Dict[str,Any]",
                "Callable",
                "None",
                "int"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "int",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "context": [
                    "Dict[str,Any]",
                    "int",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        }
    },
    "aws-lambda-playground-master/python-apex-simple/functions/hello/main.py": {},
    "aws-lambda-playground-master/python-lambda-local/handler.py": {
        "hello": {
            "name": "hello",
            "location": 4,
            "return": [
                "Dict[Text,int]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Callable",
                    "keras.models.Sequential"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/rds-connection-pooling/functions/rds_connection_pooling/main.py": {
        "get_conn": {
            "name": "get_conn",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test10/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Dict[str,str]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test11/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "TestException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TestException.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test12/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "TestException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TestException.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test13/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test2/posts.py": {
        "put_item": {
            "name": "put_item",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "str",
                "type"
            ],
            "arguments": {
                "number": [
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 16,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "bool",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "context": [
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test3/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text],dict[Text,bool]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test4/src/handlers/handlers.py": {
        "generate_policy": {
            "name": "generate_policy",
            "location": 4,
            "return": [
                "Dict[Text,Union[int,str,dict[Text,Union[Text,list[dict[Text,Union[Text,int]]]]]]]",
                "Dict[str,Dict[str,int]]",
                "bool",
                "Dict[str,str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "principal_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "effect": [
                    "int",
                    "str",
                    "bool"
                ],
                "resource": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "authorizerFunc": {
            "name": "authorizerFunc",
            "location": 14,
            "return": [
                "Text",
                "bool",
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "List[dict]",
                    "Dict",
                    "Dict[str,Any]",
                    "List[Dict]",
                    "int"
                ],
                "context": []
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test4/src/handlers/posts.py": {
        "put_item": {
            "name": "put_item",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "str",
                "type"
            ],
            "arguments": {
                "number": [
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 16,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "bool",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Mapping[str, Any]"
                ],
                "context": [
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test5/src/handlers/posts.py": {
        "put_item": {
            "name": "put_item",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "Type['BaseConfig']",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "body": [
                    "str"
                ]
            }
        },
        "get_item": {
            "name": "get_item",
            "location": 17,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "user_name": [
                    "str",
                    "int"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 23,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "bool",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "context": [
                    "List",
                    "Dict"
                ]
            }
        },
        "detail": {
            "name": "detail",
            "location": 38,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test6/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, str]"
                ],
                "context": [
                    "str",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "int",
                    "List[dict[str,Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test7/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, str]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test8/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Dict[str,str]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/api-gateway/test9/src/handlers/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "Dict[Text,Union[int,dict[Text,Text]]]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Dict[str,str]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/cfn-step-functions/handler.py": {
        "hello": {
            "name": "hello",
            "location": 3,
            "return": [
                "Dict[Text,int]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Callable",
                    "keras.models.Sequential"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/dead-letter/test1/handler.py": {
        "fail": {
            "name": "fail",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/dead-letter/test2/handler.py": {
        "fail": {
            "name": "fail",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "invoked": {
            "name": "invoked",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "int",
                    "float",
                    "List[str]",
                    "Optional[float]",
                    "None"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/diff/handler.py": {
        "hello": {
            "name": "hello",
            "location": 4,
            "return": [
                "Dict[Text,int]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Callable",
                    "keras.models.Sequential"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/ghe-backed-static-website/main.py": {
        "handler": {
            "name": "handler",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/e2e/put_records.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stream": {
            "name": "stream",
            "location": 21,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        },
        "records": {
            "name": "records",
            "location": 25,
            "return": [
                "List[dict[Text,Text]]",
                "List",
                "Dict[int,str]",
                "int",
                "Dict[str,Any]",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "payload": {
            "name": "payload",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/src/handlers/firehose/index.py": {
        "handler": {
            "name": "handler",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "float"
                ],
                "context": [
                    "Callable",
                    "Dict[str,Any]",
                    "List[dict]"
                ]
            }
        },
        "Firehose.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "context": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ]
            }
        },
        "Firehose.transform": {
            "name": "transform",
            "location": 9,
            "return": [
                "Dict[Text,list[dict[Text,Text]]]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/src/handlers/firehose/tests/conftest.py": {
        "event": {
            "name": "event",
            "location": 8,
            "return": [
                "Callable[[Any], bool]",
                "dict",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/src/handlers/firehose/tests/test_firehose.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/src/handlers/stream/index.py": {
        "handler": {
            "name": "handler",
            "location": 35,
            "return": [
                "str",
                "bool",
                "\"CollectionList\"",
                "Dict[str, int]"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "context": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "Stream.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "str",
                    "Dict",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "context": [
                    "int",
                    "float",
                    "bool"
                ],
                "client": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Stream.put_object": {
            "name": "put_object",
            "location": 15,
            "return": [
                "bool",
                "Dict[Text,]",
                "Optional[str]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.format_key": {
            "name": "format_key",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str,str]",
                    "Type[RuntimeError]",
                    "Type",
                    "int",
                    "Tuple",
                    "Optional[str]",
                    "None",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]"
                ]
            }
        },
        "Stream.b64decode_with_newline": {
            "name": "b64decode_with_newline",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "None",
                    "bytes",
                    "Union[None,int,str]",
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Iterable[str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/src/handlers/stream/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "create_bucket": {
            "name": "create_bucket",
            "location": 22,
            "return": [],
            "arguments": {
                "client": [
                    "str"
                ],
                "request": [
                    "Callable"
                ]
            }
        },
        "event": {
            "name": "event",
            "location": 34,
            "return": [
                "Callable[[Any], bool]",
                "dict",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {}
        },
        "create_bucket.fin": {
            "name": "fin",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "aws-lambda-playground-master/serverless/kinesis2firehose/src/handlers/stream/tests/test_stream.py": {
        "test_put_object": {
            "name": "test_put_object",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "pathlib.Path"
                ],
                "event": [
                    "pathlib.Path"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_get_object": {
            "name": "test_get_object",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "pathlib.Path"
                ],
                "event": [
                    "str"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/scriptable-plugin/handler.py": {
        "hello": {
            "name": "hello",
            "location": 3,
            "return": [
                "Dict[Text,int]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Callable",
                    "keras.models.Sequential"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/serverless-python-requirements/test1/handler.py": {
        "hello": {
            "name": "hello",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/serverless-python-requirements/test2/handler.py": {
        "hello": {
            "name": "hello",
            "location": 6,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/step-functions-plugin/choice.py": {
        "handler": {
            "name": "handler",
            "location": 1,
            "return": [
                "Dict[Text,int]",
                "int",
                "Dict[str,str]",
                "Dict[str,Any]",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Callable",
                    "\"keras.models.Sequential\""
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/step-functions-plugin/handler.py": {
        "hello": {
            "name": "hello",
            "location": 3,
            "return": [
                "Dict[Text,int]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Callable",
                    "keras.models.Sequential"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/step-functions-plugin/random.py": {
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 2,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/warmup/handler.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "str",
                "Optional[int]",
                "Dict[Text,int]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/serverless/warrant/auth.py": {
        "handler": {
            "name": "handler",
            "location": 5,
            "return": [
                "str",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "event": [
                    "List",
                    "int",
                    "Dict"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/spot-fleet/functions/modify-spot-fleet-request/main.py": {
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/vpc-lambda/functions/vpc_lambda/main.py": {
        "handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/what-is-my-lambda-ip/functions/what_is_my_lambda_ip/main.py": {
        "handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "aws-lambda-playground-master/what-is-your-ip/functions/what_is_your_ip/main.py": {
        "handle": {
            "name": "handle",
            "location": 5,
            "return": [
                "Dict[Text,]",
                "str",
                "IO",
                "int"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    }
}
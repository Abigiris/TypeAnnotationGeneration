{
    "azure-python-labs-main/01-azure-functions-python-vscode/sentiment/__init__.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "bool",
                "str",
                "tuple",
                "Optional[int]"
            ],
            "arguments": {
                "req": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "azure-python-labs-main/01-dapr/main.py": {
        "dapr_http_get_state": {
            "name": "dapr_http_get_state",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "typing.Text",
                    "str",
                    "dict"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "dict"
                ]
            }
        },
        "dapr_http_post_state": {
            "name": "dapr_http_post_state",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Set[str]"
                ],
                "value": [
                    "typing.Text",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "dapr_http_get_secret": {
            "name": "dapr_http_get_secret",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "str",
                    "typing.Text"
                ],
                "name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "dapr_get_state": {
            "name": "dapr_get_state",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "str",
                    "typing.Text"
                ],
                "name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "dapr_save_state": {
            "name": "dapr_save_state",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "str",
                    "typing.Text"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "value": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "dapr_save_state_etag": {
            "name": "dapr_save_state_etag",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "typing.Text",
                    "str",
                    "int",
                    "List[str]",
                    "List[List[int]]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Dict[str, bytes]"
                ],
                "value": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Dict[str, bytes]"
                ],
                "etag": [
                    "typing.Text",
                    "str",
                    "Dict[str, bytes]",
                    "int"
                ]
            }
        },
        "dapr_get_secret": {
            "name": "dapr_get_secret",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "store": [
                    "str",
                    "typing.Text"
                ],
                "name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/01-postgres/pg-lab.py": {
        "writeConfig": {
            "name": "writeConfig",
            "location": 5,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "conn_string": [
                    "str"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 10,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {}
        },
        "populateDevices": {
            "name": "populateDevices",
            "location": 20,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "loadData": {
            "name": "loadData",
            "location": 27,
            "return": [
                "typing.Text",
                "str",
                "Callable",
                "bool",
                "OrderedDict",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "getAllData": {
            "name": "getAllData",
            "location": 42,
            "return": [
                "dict[, ]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {}
        },
        "getNearestDevice": {
            "name": "getNearestDevice",
            "location": 55,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "latitude": [
                    "str",
                    "bool"
                ],
                "longitude": [
                    "str",
                    "bool"
                ]
            }
        },
        "getDeviceAverage": {
            "name": "getDeviceAverage",
            "location": 63,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "device": [
                    "str",
                    "bool"
                ]
            }
        },
        "runSQL": {
            "name": "runSQL",
            "location": 70,
            "return": [
                "None",
                "str",
                "Optional[type]",
                "Optional[int]"
            ],
            "arguments": {
                "statement": [
                    "str",
                    "int"
                ]
            }
        },
        "getAverageTemperatures": {
            "name": "getAverageTemperatures",
            "location": 77,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/1-vscode-django-docker/manage.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/admin.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/apps.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/forms.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/models.py": {
        "LogMessage.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/tests.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/urls.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/views.py": {
        "about": {
            "name": "about",
            "location": 20,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "contact": {
            "name": "contact",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "hello_there": {
            "name": "hello_there",
            "location": 30,
            "return": [
                "List[str]",
                "str",
                "int",
                "Tuple[str, Optional[int]]",
                "Dict[str, Any]",
                "Tuple[str, int, Dict[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "name": [
                    "int",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "log_message": {
            "name": "log_message",
            "location": 40,
            "return": [
                "str",
                "Dict[str, Any]",
                "ItemsView",
                "Dict[str, str]",
                "app.models.TweetContent"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "HomeListView.get_context_data": {
            "name": "get_context_data",
            "location": 15,
            "return": [
                "str",
                "int",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/__init__.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/migrations/0001_initial.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/hello/migrations/__init__.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/web_project/settings.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/web_project/urls.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/web_project/wsgi.py": {},
    "azure-python-labs-main/2019/1-vscode-django-docker/web_project/__init__.py": {},
    "azure-python-labs-main/2019/2a-vscode-flask-dev-container/app.py": {
        "index": {
            "name": "index",
            "location": 5,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/4-azure-functions-python/python_azure_func/prime_calculator/is_prime/__init__.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Type",
                    "typing.Type",
                    "bytes",
                    "defaultdict",
                    "typing.DefaultDict",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "is_prime": {
            "name": "is_prime",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/5-jupyter-azure-cognitive-services-face/key_handler/__init__.py": {
        "get_api_key": {
            "name": "get_api_key",
            "location": 6,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/score.py": {
        "init": {
            "name": "init",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 23,
            "return": [
                "str",
                "model.Integration",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "raw_data": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/train.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/azureml/svd_training.py": {
        "svd_training": {
            "name": "svd_training",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/azureml/wide_deep.py": {
        "_log": {
            "name": "_log",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "metric": [
                    "bool",
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Tuple[str, Any]]"
                ],
                "value": [
                    "list",
                    "str",
                    "bool",
                    "float",
                    "List[Union[int, float]]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/azureml/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/constants.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/general_utils.py": {
        "invert_dictionary": {
            "name": "invert_dictionary",
            "location": 8,
            "return": [
                "dict[tuple[typing.Union[str,set[str]]], tuple[typing.Union[str,set[str]]]]",
                "Set[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "dictionary": [
                    "dict[str, set[str]]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_physical_memory": {
            "name": "get_physical_memory",
            "location": 22,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_number_processors": {
            "name": "get_number_processors",
            "location": 31,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/gpu_utils.py": {
        "get_number_gpus": {
            "name": "get_number_gpus",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "clear_memory_all_gpus": {
            "name": "clear_memory_all_gpus",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_cuda_version": {
            "name": "get_cuda_version",
            "location": 36,
            "return": [
                "List[str]",
                "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,str]]]",
                "str",
                "dict[, ]",
                "bool",
                "list[dict[typing.Any, typing.Any]]",
                "set",
                "typing.Text"
            ],
            "arguments": {
                "unix_path": [
                    "typing.Text",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "get_cudnn_version": {
            "name": "get_cudnn_version",
            "location": 58,
            "return": [
                "bool",
                "str",
                "rflx.error.Location"
            ],
            "arguments": {}
        },
        "get_cudnn_version.find_cudnn_in_headers": {
            "name": "find_cudnn_in_headers",
            "location": 66,
            "return": [
                "typing.Text",
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "candidates": [
                    "List[str]",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/notebook_memory_management.py": {
        "start_watching_memory": {
            "name": "start_watching_memory",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "stop_watching_memory": {
            "name": "stop_watching_memory",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "watch_memory": {
            "name": "watch_memory",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "pre_run_cell": {
            "name": "pre_run_cell",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/notebook_utils.py": {
        "is_jupyter": {
            "name": "is_jupyter",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_databricks": {
            "name": "is_databricks",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/python_utils.py": {
        "exponential_decay": {
            "name": "exponential_decay",
            "location": 13,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ],
                "max_val": [
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ],
                "half_life": [
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ]
            }
        },
        "jaccard": {
            "name": "jaccard",
            "location": 27,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "cooccurrence": [
                    "str",
                    "int"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 45,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "cooccurrence": [
                    "str",
                    "int"
                ]
            }
        },
        "get_top_k_scored_items": {
            "name": "get_top_k_scored_items",
            "location": 63,
            "return": [
                "tuple[]",
                "str",
                "Iterable[int]",
                "dict",
                "float"
            ],
            "arguments": {
                "scores": [
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "top_k": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "typing.Type",
                    "Type"
                ],
                "sort_top_k": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/spark_utils.py": {
        "start_or_get_spark": {
            "name": "start_or_get_spark",
            "location": 14,
            "return": [
                "str",
                "bool",
                "list[str]",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "app_name": [
                    "typing.Text",
                    "str",
                    "list",
                    "dict"
                ],
                "url": [
                    "typing.Text",
                    "str",
                    "list",
                    "dict"
                ],
                "memory": [
                    "typing.Text",
                    "str",
                    "list",
                    "dict"
                ],
                "packages": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "jars": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "repository": [
                    "str",
                    "None",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/tf_utils.py": {
        "pandas_input_fn": {
            "name": "pandas_input_fn",
            "location": 12,
            "return": [
                "int",
                "tuple[typing.Union[int,int,int]]",
                "Callable",
                "list[float]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "df": [
                    "dict[, ]",
                    "list['cirq.Circuit']",
                    "bool",
                    "str",
                    "pandas.DataFrame",
                    "Optional[dict]",
                    "List['cirq.Circuit']",
                    "float"
                ],
                "y_col": [
                    "int",
                    "None",
                    "Optional[Mapping[str, str]]",
                    "bool",
                    "typing.Mapping",
                    "Optional[str]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Union[float, List[float]]"
                ],
                "num_epochs": [
                    "int",
                    "bool",
                    "Union[float, List[float]]"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "Union[float, List[float]]"
                ],
                "num_threads": [
                    "int",
                    "bool",
                    "Union[float, List[float]]"
                ]
            }
        },
        "build_optimizer": {
            "name": "build_optimizer",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "lr": [
                    "float",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "evaluation_log_hook": {
            "name": "evaluation_log_hook",
            "location": 102,
            "return": [
                "_TrainLogHook",
                "str",
                "float",
                "numpy.ndarray",
                "Tuple[int, int, int]",
                "tuple"
            ],
            "arguments": {
                "estimator": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "true_df": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "y_col": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "eval_df": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "every_n_iter": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "model_dir": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "eval_fns": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "MetricsLogger.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsLogger.log": {
            "name": "log",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "typing.MutableMapping",
                    "float",
                    "T",
                    "typing.Callable[, ]",
                    "MutableMapping[str, Any]",
                    "Callable"
                ],
                "value": [
                    "str",
                    "Match[str]",
                    "typing.Match",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MetricsLogger.get_log": {
            "name": "get_log",
            "location": 163,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrainLogHook.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "logger": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "true_df": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "y_col": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "eval_df": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "every_n_iter": [
                    "int",
                    "str"
                ],
                "model_dir": [
                    "int",
                    "None",
                    "str",
                    "Callable[[float], None]",
                    "Callable[[int, int], None]",
                    "typing.Callable[float, None]",
                    "Optional[float]",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ],
                "eval_fns": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "_TrainLogHook.begin": {
            "name": "begin",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrainLogHook.before_run": {
            "name": "before_run",
            "location": 204,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_TrainLogHook.after_run": {
            "name": "after_run",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [
                    "bool"
                ],
                "run_values": [
                    "str",
                    "bool",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "_TrainLogHook.end": {
            "name": "end",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[]",
                    "list",
                    "Iterable"
                ]
            }
        },
        "_TrainLogHook._log": {
            "name": "_log",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 33,
            "return": [
                "Timer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.interval": {
            "name": "interval",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/common/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/cosmos_cli.py": {
        "find_collection": {
            "name": "find_collection",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "Optional[bytes]",
                    "str",
                    "Optional[str]"
                ],
                "dbid": [
                    "str",
                    "bytes",
                    "Sequence[Tuple[str, int]]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "id": [
                    "Optional[bytes]",
                    "bytes",
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "read_collection": {
            "name": "read_collection",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool"
                ],
                "dbid": [
                    "Sequence[Tuple[str, int]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "read_database": {
            "name": "read_database",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[int, str]"
                ]
            }
        },
        "find_database": {
            "name": "find_database",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]",
                    "dict"
                ],
                "id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/criteo.py": {
        "load_pandas_df": {
            "name": "load_pandas_df",
            "location": 29,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "local_cache_path": [
                    "None"
                ],
                "header": [
                    "list[typing.Text]"
                ]
            }
        },
        "load_spark_df": {
            "name": "load_spark_df",
            "location": 61,
            "return": [],
            "arguments": {
                "spark": [],
                "size": [
                    "typing.Text"
                ],
                "header": [
                    "list[typing.Text]"
                ],
                "local_cache_path": [
                    "None"
                ],
                "dbfs_datapath": [
                    "typing.Text"
                ],
                "dbutils": [
                    "None"
                ]
            }
        },
        "download_criteo": {
            "name": "download_criteo",
            "location": 120,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "work_directory": [
                    "typing.Text"
                ]
            }
        },
        "extract_criteo": {
            "name": "extract_criteo",
            "location": 135,
            "return": [],
            "arguments": {
                "size": [],
                "compressed_file": [],
                "path": [
                    "None"
                ]
            }
        },
        "get_spark_schema": {
            "name": "get_spark_schema",
            "location": 163,
            "return": [
                "StructType"
            ],
            "arguments": {
                "header": [
                    "list[typing.Text]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/download_utils.py": {
        "maybe_download": {
            "name": "maybe_download",
            "location": 31,
            "return": [
                "str",
                "int",
                "Callable",
                "list[str]",
                "float"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "filename": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "work_directory": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "expected_bytes": [
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "download_path": {
            "name": "download_path",
            "location": 61,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[typing.Union[str,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "path": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TqdmUpTo.update_to": {
            "name": "update_to",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "bsize": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "tsize": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Match",
                    "Optional[List[str]]",
                    "typing.Match",
                    "list[str]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/movielens.py": {
        "load_pandas_df": {
            "name": "load_pandas_df",
            "location": 147,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "header": [],
                "local_cache_path": [
                    "None"
                ],
                "title_col": [
                    "None"
                ],
                "genres_col": [
                    "None"
                ],
                "year_col": [
                    "None"
                ]
            }
        },
        "load_item_df": {
            "name": "load_item_df",
            "location": 229,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "local_cache_path": [
                    "None"
                ],
                "movie_col": [],
                "title_col": [
                    "None"
                ],
                "genres_col": [
                    "None"
                ],
                "year_col": [
                    "None"
                ]
            }
        },
        "_load_item_df": {
            "name": "_load_item_df",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "item_datapath": [],
                "movie_col": [],
                "title_col": [],
                "genres_col": [],
                "year_col": []
            }
        },
        "load_spark_df": {
            "name": "load_spark_df",
            "location": 331,
            "return": [],
            "arguments": {
                "spark": [],
                "size": [
                    "typing.Text"
                ],
                "header": [
                    "tuple[]"
                ],
                "schema": [
                    "None"
                ],
                "local_cache_path": [
                    "None"
                ],
                "dbutils": [
                    "None"
                ],
                "title_col": [
                    "None"
                ],
                "genres_col": [
                    "None"
                ],
                "year_col": [
                    "None"
                ]
            }
        },
        "_get_schema": {
            "name": "_get_schema",
            "location": 451,
            "return": [
                "None",
                "StructType"
            ],
            "arguments": {
                "header": [],
                "schema": []
            }
        },
        "_maybe_download_and_extract": {
            "name": "_maybe_download_and_extract",
            "location": 480,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "size": [],
                "dest_path": []
            }
        },
        "download_movielens": {
            "name": "download_movielens",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "dest_path": []
            }
        },
        "extract_movielens": {
            "name": "extract_movielens",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "rating_path": [],
                "item_path": [],
                "zip_path": []
            }
        },
        "_DataFormat.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [],
                "path": [],
                "has_header": [
                    "bool"
                ],
                "item_sep": [
                    "None"
                ],
                "item_path": [
                    "None"
                ],
                "item_has_header": [
                    "bool"
                ]
            }
        },
        "_DataFormat.separator": {
            "name": "separator",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.path": {
            "name": "path",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.has_header": {
            "name": "has_header",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.item_separator": {
            "name": "item_separator",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.item_path": {
            "name": "item_path",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.item_has_header": {
            "name": "item_has_header",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_load_item_df.parse_year": {
            "name": "parse_year",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "t": []
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/pandas_df_utils.py": {
        "user_item_pairs": {
            "name": "user_item_pairs",
            "location": 21,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "user_df": [
                    "int",
                    "str"
                ],
                "item_df": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "user_col": [
                    "str",
                    "list"
                ],
                "item_col": [
                    "str",
                    "list"
                ],
                "user_item_filter_df": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[List[int]]",
                    "list[int]"
                ],
                "shuffle": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "filter_by": {
            "name": "filter_by",
            "location": 62,
            "return": [
                "Optional[int]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "df": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "filter_by_df": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "filter_by_cols": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "negative_feedback_sampler": {
            "name": "negative_feedback_sampler",
            "location": 253,
            "return": [
                "int",
                "list[int]",
                "str",
                "Callable",
                "list[]",
                "list[tuple[]]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "col_user": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "Optional[int]"
                ],
                "col_item": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "col_label": [
                    "float",
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "ratio_neg_per_user": [
                    "int",
                    "float",
                    "bool",
                    "complex"
                ],
                "seed": [
                    "int",
                    "float",
                    "bool",
                    "complex"
                ]
            }
        },
        "has_columns": {
            "name": "has_columns",
            "location": 354,
            "return": [
                "bool",
                "pandas.Series",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "columns": [
                    "list[str]",
                    "int",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "has_same_base_dtype": {
            "name": "has_same_base_dtype",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "df_1": [
                    "list[str]",
                    "List[str]",
                    "list[dict[str, str]]",
                    "int",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "df_2": [
                    "list[str]",
                    "list[dict[str, str]]",
                    "int",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ],
                "columns": [
                    "int",
                    "None",
                    "bool",
                    "float",
                    "str",
                    "List[\"DeliveryItem\"]",
                    "list[\"DeliveryItem\"]"
                ]
            }
        },
        "lru_cache_df": {
            "name": "lru_cache_df",
            "location": 450,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "maxsize": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "typed": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "LibffmConverter.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "LibffmConverter.fit": {
            "name": "fit",
            "location": 137,
            "return": [
                "LibffmConverter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "pandas.DataFrame",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "col_rating": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "LibffmConverter.transform": {
            "name": "transform",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "int"
                ]
            }
        },
        "LibffmConverter.fit_transform": {
            "name": "fit_transform",
            "location": 228,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "List[int]",
                    "None",
                    "list[int]"
                ],
                "col_rating": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "LibffmConverter.get_params": {
            "name": "get_params",
            "location": 240,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasHash.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pandas_object": [
                    "bool",
                    "typing.Sequence[int]",
                    "int",
                    "pandas.DataFrame",
                    "Sequence[int]"
                ]
            }
        },
        "PandasHash.__eq__": {
            "name": "__eq__",
            "location": 424,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "PandasHash.__hash__": {
            "name": "__hash__",
            "location": 435,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "lru_cache_df.to_pandas_hash": {
            "name": "to_pandas_hash",
            "location": 458,
            "return": [
                "PandasHash",
                "str",
                "Callable",
                "dict",
                "int",
                "float",
                "Iterable[int]"
            ],
            "arguments": {
                "val": [
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "lru_cache_df.from_pandas_hash": {
            "name": "from_pandas_hash",
            "location": 462,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "val": [
                    "dict",
                    "bool",
                    "Any",
                    "str",
                    "int"
                ]
            }
        },
        "lru_cache_df.decorating_function": {
            "name": "decorating_function",
            "location": 466,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "user_function": [
                    "type",
                    "Callable",
                    "numpy.array",
                    "str"
                ]
            }
        },
        "LibffmConverter.transform._convert": {
            "name": "_convert",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Mapping"
                ],
                "feature": [
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ],
                "field_index": [
                    "str",
                    "Optional[str]"
                ],
                "field_feature_index_dict": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "float"
                ]
            }
        },
        "lru_cache_df.decorating_function.wrapper": {
            "name": "wrapper",
            "location": 468,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "lru_cache_df.decorating_function.cached_wrapper": {
            "name": "cached_wrapper",
            "location": 475,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/python_splitters.py": {
        "python_random_split": {
            "name": "python_random_split",
            "location": 19,
            "return": [
                "list[]",
                "list",
                "Dict[str, Any]",
                "bool",
                "List[Dict]",
                "List[object]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "float",
                    "Union[float, str]",
                    "str",
                    "int",
                    "list[typing.Optional[typing.Any]]",
                    "pandas.DataFrame",
                    "list[str]",
                    "List[Optional[Any]]",
                    "List[str]"
                ],
                "ratio": [
                    "float",
                    "str",
                    "dict",
                    "List[str]",
                    "type"
                ],
                "seed": [
                    "int",
                    "dict",
                    "Union[float, str]",
                    "bool",
                    "pandas.DataFrame",
                    "List[Optional[Any]]",
                    "List[str]"
                ]
            }
        },
        "_do_stratification": {
            "name": "_do_stratification",
            "location": 46,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "data": [
                    "int",
                    "float",
                    "pandas.DataFrame"
                ],
                "ratio": [
                    "float",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[Any]",
                    "Iterable",
                    "object",
                    "gluonts.model.common.Tensor",
                    "str",
                    "Optional[float]"
                ],
                "min_rating": [
                    "int",
                    "Optional[int]",
                    "BinaryIO"
                ],
                "filter_by": [
                    "typing.Text",
                    "int",
                    "Sequence[int]",
                    "Dict[str, int]",
                    "Optional[int]",
                    "list",
                    "pandas.DataFrame",
                    "float"
                ],
                "is_random": [
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "seed": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "Optional[bool]",
                    "pandas._CompressionOptions",
                    "Optional[str]"
                ],
                "col_user": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "col_item": [
                    "int",
                    "Iterable",
                    "Dict[str, Any]"
                ],
                "col_timestamp": [
                    "Optional[int]",
                    "int",
                    "Union[int, str, None]",
                    "Optional[float]"
                ]
            }
        },
        "python_chrono_split": {
            "name": "python_chrono_split",
            "location": 121,
            "return": [],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "ratio": [
                    "float",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "filter_by": [
                    "typing.Text",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "col_timestamp": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "python_stratified_split": {
            "name": "python_stratified_split",
            "location": 165,
            "return": [],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "ratio": [
                    "float",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "filter_by": [
                    "typing.Text",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "seed": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "numpy_stratified_split": {
            "name": "numpy_stratified_split",
            "location": 206,
            "return": [
                "tuple[]",
                "bool",
                "str"
            ],
            "arguments": {
                "X": [
                    "str",
                    "Sequence[Any]"
                ],
                "ratio": [
                    "float",
                    "int",
                    "str"
                ],
                "seed": [
                    "int",
                    "str",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "Sequence[T]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/spark_splitters.py": {
        "spark_random_split": {
            "name": "spark_random_split",
            "location": 18,
            "return": [
                "Callable[[Any], bool]",
                "bool",
                "IO[bytes]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "ratio": [
                    "int",
                    "float"
                ],
                "seed": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "spark_chrono_split": {
            "name": "spark_chrono_split",
            "location": 42,
            "return": [
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "ratio": [
                    "float",
                    "Dict[str, int]",
                    "int",
                    "Set[int]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "filter_by": [
                    "typing.Text",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Callable",
                    "dict",
                    "Hashable"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_timestamp": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "spark_stratified_split": {
            "name": "spark_stratified_split",
            "location": 123,
            "return": [
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "ratio": [
                    "float",
                    "Dict[str, int]",
                    "int",
                    "Set[int]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "filter_by": [
                    "typing.Text",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Callable",
                    "dict",
                    "Hashable"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_rating": [
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "seed": [
                    "int",
                    "bool"
                ]
            }
        },
        "spark_timestamp_split": {
            "name": "spark_timestamp_split",
            "location": 205,
            "return": [
                "list[typing.Union[list[tuple[typing.Union[str,bool,typing.Any]]],dict[str, typing.Any],float,str]]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Sequence[str]]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[float]",
                    "Optional[str]",
                    "List[float]"
                ],
                "ratio": [
                    "float",
                    "str",
                    "int",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, str]",
                    "List[str]",
                    "Type[List[Any]]"
                ],
                "col_user": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ],
                "col_item": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ],
                "col_timestamp": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/sparse.py": {
        "AffinityMatrix.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "DF": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "Optional[str]",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "list['cirq.Circuit']",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "col_user": [
                    "Union[int, float]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "col_rating": [
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "col_pred": [
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "save_path": [
                    "str",
                    "Union[str, bytes, int]",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "AffinityMatrix._gen_index": {
            "name": "_gen_index",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffinityMatrix.gen_affinity_matrix": {
            "name": "gen_affinity_matrix",
            "location": 108,
            "return": [
                "bool",
                "str",
                "float",
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffinityMatrix.map_back_sparse": {
            "name": "map_back_sparse",
            "location": 151,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "Iterable[T]"
                ],
                "kind": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/split_utils.py": {
        "process_split_ratio": {
            "name": "process_split_ratio",
            "location": 15,
            "return": [
                "tuple[typing.Union[bool,float,dict[str, str],list[]]]",
                "bool",
                "str",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "ratio": []
            }
        },
        "min_rating_filter_pandas": {
            "name": "min_rating_filter_pandas",
            "location": 49,
            "return": [
                "bool",
                "dict[, ]",
                "float",
                "dict[str, int]",
                "Optional[Any]",
                "dict[str, str]",
                "typing.OrderedDict"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "numpy.ndarray",
                    "None",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[Tuple[Any]]",
                    "tuple[typing.Union[pandas.DataFrame,pandas.DataFrame]]",
                    "Tuple[pandas.DataFrame, pandas.DataFrame]"
                ],
                "min_rating": [
                    "str",
                    "int"
                ],
                "filter_by": [
                    "str",
                    "typing.Text"
                ],
                "col_user": [
                    "str"
                ],
                "col_item": [
                    "str"
                ]
            }
        },
        "min_rating_filter_spark": {
            "name": "min_rating_filter_spark",
            "location": 84,
            "return": [
                "bool",
                "list[str]",
                "float",
                "Optional[Any]",
                "list[]",
                "str",
                "list[bool]",
                "list[tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "numpy.ndarray",
                    "None"
                ],
                "min_rating": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "Optional[int]"
                ],
                "filter_by": [
                    "typing.Text",
                    "str",
                    "list",
                    "int",
                    "Sequence[str]",
                    "tuple",
                    "bool"
                ],
                "col_user": [
                    "str",
                    "list",
                    "int",
                    "Sequence[str]",
                    "tuple",
                    "bool"
                ],
                "col_item": [
                    "str",
                    "list",
                    "int",
                    "Sequence[str]",
                    "tuple",
                    "bool"
                ]
            }
        },
        "_check_min_rating_filter": {
            "name": "_check_min_rating_filter",
            "location": 126,
            "return": [
                "tuple[typing.Union[str,None,bool,list[str]]]",
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "filter_by": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "min_rating": [
                    "bool",
                    "str",
                    "float",
                    "Optional[float]",
                    "List[str]"
                ],
                "col_user": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[List[Any]]"
                ],
                "col_item": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "split_pandas_data_with_ratios": {
            "name": "split_pandas_data_with_ratios",
            "location": 138,
            "return": [
                "int",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "Mapping[str, Any]",
                    "Dict[int, Dict[int, Any]]",
                    "pandas.DataFrame",
                    "pandas.core.frame.DataFrame",
                    "Tuple[int, str]",
                    "int"
                ],
                "ratios": [
                    "pandas.DataFrame",
                    "Sequence[T]",
                    "str",
                    "dict",
                    "List['cirq.Circuit']",
                    "List[str]"
                ],
                "seed": [
                    "int",
                    "numpy.ndarray",
                    "pandas.core.frame.DataFrame"
                ],
                "shuffle": [
                    "bool",
                    "dict",
                    "Tuple[str]",
                    "List[str]",
                    "List[dict]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/dataset/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/evaluation/parameter_sweep.py": {
        "generate_param_grid": {
            "name": "generate_param_grid",
            "location": 9,
            "return": [
                "list[dict[typing.Union[tuple[typing.Union[str,object]],tuple[typing.Union[str,dict[str, int]]]], typing.Union[tuple[typing.Union[str,object]],tuple[typing.Union[str,dict[str, int]]]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "dict[str, object]",
                    "Dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/evaluation/python_evaluation.py": {
        "check_column_dtypes": {
            "name": "check_column_dtypes",
            "location": 31,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "merge_rating_true_pred": {
            "name": "merge_rating_true_pred",
            "location": 89,
            "return": [
                "tuple[]",
                "bool",
                "int"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "str"
                ],
                "rating_pred": [
                    "bool",
                    "str"
                ],
                "col_user": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "col_item": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "col_rating": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, List[str]]",
                    "str"
                ],
                "col_prediction": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "rmse": {
            "name": "rmse",
            "location": 126,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "mae": {
            "name": "mae",
            "location": 159,
            "return": [
                "bool",
                "str",
                "Dict[str, Dict[str, float]]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "rsquared": {
            "name": "rsquared",
            "location": 192,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "exp_var": {
            "name": "exp_var",
            "location": 225,
            "return": [
                "str",
                "int",
                "numpy.ndarray",
                "List[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "rating_true": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "list[str]",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "rating_pred": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "list[str]",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_user": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_item": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_rating": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_prediction": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ]
            }
        },
        "auc": {
            "name": "auc",
            "location": 258,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, Any]]",
                "numpy.ndarray",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "logloss": {
            "name": "logloss",
            "location": 301,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "merge_ranking_true_pred": {
            "name": "merge_ranking_true_pred",
            "location": 340,
            "return": [
                "tuple[typing.Union[list[int],int]]",
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "rating_true": [
                    "list[dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], ]]",
                    "str",
                    "int",
                    "list[str]",
                    "list['Token']",
                    "List[dict]",
                    "Optional[str]",
                    "numpy.ndarray",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "List['Token']"
                ],
                "rating_pred": [
                    "list[typing.Optional[str]]",
                    "str",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "pandas.DataFrame"
                ],
                "col_user": [
                    "int",
                    "List[dict]",
                    "Optional[str]",
                    "numpy.ndarray",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "str",
                    "List['Token']"
                ],
                "col_item": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "col_rating": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "col_prediction": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "relevancy_method": [
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "k": [
                    "str",
                    "recidiviz.common.ingest_metadata.IngestMetadata"
                ],
                "threshold": [
                    "Optional[str]",
                    "str",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "precision_at_k": {
            "name": "precision_at_k",
            "location": 412,
            "return": [
                "float",
                "str",
                "list"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "recall_at_k": {
            "name": "recall_at_k",
            "location": 465,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "ndcg_at_k": {
            "name": "ndcg_at_k",
            "location": 512,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "map_at_k": {
            "name": "map_at_k",
            "location": 573,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "get_top_k_items": {
            "name": "get_top_k_items",
            "location": 636,
            "return": [
                "bool",
                "Optional[str]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "bool",
                    "Iterable[Hashable]"
                ],
                "col_user": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[Hashable]"
                ],
                "col_rating": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[Hashable]"
                ],
                "k": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[Hashable]"
                ]
            }
        },
        "check_column_dtypes.check_column_dtypes_wrapper": {
            "name": "check_column_dtypes_wrapper",
            "location": 43,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "rating_pred": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "col_user": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "col_item": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "col_rating": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "col_prediction": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/evaluation/spark_evaluation.py": {
        "_get_top_k_items": {
            "name": "_get_top_k_items",
            "location": 338,
            "return": [
                "bool",
                "int",
                "dict[int, int]",
                "list[]"
            ],
            "arguments": {
                "dataframe": [
                    "float",
                    "bool"
                ],
                "col_user": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_item": [
                    "float",
                    "bool"
                ],
                "col_rating": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_prediction": [
                    "float",
                    "bool"
                ],
                "k": [
                    "float",
                    "bool"
                ]
            }
        },
        "_get_relevant_items_by_threshold": {
            "name": "_get_relevant_items_by_threshold",
            "location": 381,
            "return": [
                "bool",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[float]"
                ],
                "col_user": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "col_item": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "col_rating": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "col_prediction": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "threshold": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "_get_relevant_items_by_timestamp": {
            "name": "_get_relevant_items_by_timestamp",
            "location": 424,
            "return": [
                "bool",
                "int",
                "list[list[str]]",
                "dict[int, int]",
                "list[]"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "bool"
                ],
                "col_user": [
                    "str",
                    "int"
                ],
                "col_item": [
                    "int",
                    "bool"
                ],
                "col_rating": [
                    "int",
                    "bool"
                ],
                "col_timestamp": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "col_prediction": [
                    "int",
                    "bool"
                ],
                "k": [
                    "int",
                    "bool"
                ]
            }
        },
        "SparkRatingEvaluation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rating_true": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rating_pred": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "col_user": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "col_item": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "col_rating": [
                    "str"
                ],
                "col_prediction": [
                    "str"
                ]
            }
        },
        "SparkRatingEvaluation.rmse": {
            "name": "rmse",
            "location": 113,
            "return": [
                "str",
                "Dict[str, Any]",
                "type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRatingEvaluation.mae": {
            "name": "mae",
            "location": 121,
            "return": [
                "str",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRatingEvaluation.rsquared": {
            "name": "rsquared",
            "location": 129,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRatingEvaluation.exp_var": {
            "name": "exp_var",
            "location": 136,
            "return": [
                "float",
                "int",
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rating_true": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "int",
                    "None",
                    "Optional[List[Any]]",
                    "list[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "rating_pred": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "k": [
                    "recidiviz.common.constants.state.state_case_type.StateSupervisionCaseType",
                    "Optional[bool]"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "col_user": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "col_item": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "col_rating": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "col_prediction": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "threshold": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "recidiviz.common.constants.state.state_case_type.StateSupervisionCaseType",
                    "int"
                ]
            }
        },
        "SparkRankingEvaluation._calculate_metrics": {
            "name": "_calculate_metrics",
            "location": 270,
            "return": [
                "RankingMetrics",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.precision_at_k": {
            "name": "precision_at_k",
            "location": 287,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str, str]",
                "tuple[typing.Union[int,int,int]]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.recall_at_k": {
            "name": "recall_at_k",
            "location": 299,
            "return": [
                "float",
                "dict[str, typing.Union[typing.Any,typing.Any,bool,int,str]]",
                "int",
                "Dict[str, str]",
                "dict[str, list[str]]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "typing.Type",
                "list[]",
                "tuple[]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.ndcg_at_k": {
            "name": "ndcg_at_k",
            "location": 313,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str, str]",
                "tuple[typing.Union[int,int,int]]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.map_at_k": {
            "name": "map_at_k",
            "location": 325,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/evaluation/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/recommender/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/recommender/sar/sar_singlenode.py": {
        "SARSingleNode.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "remove_seen": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_user": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "col_item": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "col_rating": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "col_timestamp": [
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_prediction": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "similarity_type": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Callable"
                ],
                "time_decay_coefficient": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "time_now": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "timedecay_formula": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "threshold": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "SARSingleNode.compute_affinity_matrix": {
            "name": "compute_affinity_matrix",
            "location": 96,
            "return": [
                "int",
                "numpy.ndarray",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "n_users": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "n_items": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "SARSingleNode.compute_coocurrence_matrix": {
            "name": "compute_coocurrence_matrix",
            "location": 116,
            "return": [
                "str",
                "Dict[str, Any]",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "n_users": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "n_items": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "SARSingleNode.set_index": {
            "name": "set_index",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "pandas.DataFrame"
                ]
            }
        },
        "SARSingleNode.fit": {
            "name": "fit",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Union[bool, numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "SARSingleNode.score": {
            "name": "score",
            "location": 252,
            "return": [
                "str",
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Union[int, float, complex]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "bool"
                ],
                "remove_seen": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "SARSingleNode.get_popularity_based_topk": {
            "name": "get_popularity_based_topk",
            "location": 286,
            "return": [
                "int",
                "bool",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "top_k": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "sort_top_k": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Callable"
                ]
            }
        },
        "SARSingleNode.get_item_based_topk": {
            "name": "get_item_based_topk",
            "location": 313,
            "return": [
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "tuple[typing.Sequence[]]",
                    "\"SignedBlindedBalanceProof\"",
                    "Tuple[Sequence]",
                    "\"MutableRangeSet[T]\""
                ],
                "top_k": [
                    "int",
                    "Callable",
                    "Optional[float]"
                ],
                "sort_top_k": [
                    "bool",
                    "Callable",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "SARSingleNode.recommend_k_items": {
            "name": "recommend_k_items",
            "location": 380,
            "return": [
                "int",
                "bool",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "int",
                    "list",
                    "float",
                    "list[]",
                    "str",
                    "Callable[..., bool]",
                    "typing.Callable[..., bool]"
                ],
                "top_k": [
                    "int",
                    "float",
                    "Optional[List[int]]"
                ],
                "sort_top_k": [
                    "bool",
                    "float",
                    "Optional[List[int]]"
                ],
                "remove_seen": [
                    "bool",
                    "int",
                    "Callable[[], Any]",
                    "Optional[bool]"
                ]
            }
        },
        "SARSingleNode.predict": {
            "name": "predict",
            "location": 410,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/movielens-sar/reco_utils/recommender/sar/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/azureml/aks_utils.py": {
        "qps_to_replicas": {
            "name": "qps_to_replicas",
            "location": 6,
            "return": [
                "str",
                "int",
                "bytes",
                "set[]",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "target_qps": [
                    "int",
                    "float",
                    "str"
                ],
                "processing_time": [
                    "str",
                    "typing.IO",
                    "Optional[\"Address\"]",
                    "IO[str]"
                ],
                "max_qp_replica": [
                    "int",
                    "Optional[int]"
                ],
                "target_utilization": [
                    "float",
                    "str",
                    "Optional[\"Address\"]",
                    "IO[str]"
                ]
            }
        },
        "replicas_to_qps": {
            "name": "replicas_to_qps",
            "location": 23,
            "return": [
                "int",
                "bytes",
                "dict[str, int]",
                "str",
                "IO",
                "None",
                "List[str]"
            ],
            "arguments": {
                "num_replicas": [
                    "int",
                    "Callable"
                ],
                "processing_time": [
                    "int",
                    "Callable"
                ],
                "max_qp_replica": [
                    "int",
                    "Callable"
                ],
                "target_utilization": [
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "total_cores_to_replicas": {
            "name": "total_cores_to_replicas",
            "location": 40,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "n_cores": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "cpu_cores_per_replica": [
                    "float",
                    "int"
                ],
                "overhead": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/azureml/azureml_utils.py": {
        "get_or_create_workspace": {
            "name": "get_or_create_workspace",
            "location": 9,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "Optional[str]"
                ],
                "subscription_id": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "resource_group": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "workspace_name": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ],
                "workspace_region": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[\"Node\"]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/azureml/svd_training.py": {
        "svd_training": {
            "name": "svd_training",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/azureml/wide_deep.py": {
        "_log": {
            "name": "_log",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "metric": [
                    "bool",
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Tuple[str, Any]]"
                ],
                "value": [
                    "list",
                    "str",
                    "bool",
                    "float",
                    "List[Union[int, float]]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/azureml/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/constants.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/general_utils.py": {
        "invert_dictionary": {
            "name": "invert_dictionary",
            "location": 8,
            "return": [
                "dict[tuple[typing.Union[str,set[str]]], tuple[typing.Union[str,set[str]]]]",
                "Set[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "dictionary": [
                    "dict[str, set[str]]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_physical_memory": {
            "name": "get_physical_memory",
            "location": 22,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_number_processors": {
            "name": "get_number_processors",
            "location": 31,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/gpu_utils.py": {
        "get_number_gpus": {
            "name": "get_number_gpus",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "clear_memory_all_gpus": {
            "name": "clear_memory_all_gpus",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_cuda_version": {
            "name": "get_cuda_version",
            "location": 36,
            "return": [
                "List[str]",
                "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,str]]]",
                "str",
                "dict[, ]",
                "bool",
                "list[dict[typing.Any, typing.Any]]",
                "set",
                "typing.Text"
            ],
            "arguments": {
                "unix_path": [
                    "typing.Text",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "get_cudnn_version": {
            "name": "get_cudnn_version",
            "location": 58,
            "return": [
                "bool",
                "str",
                "rflx.error.Location"
            ],
            "arguments": {}
        },
        "get_cudnn_version.find_cudnn_in_headers": {
            "name": "find_cudnn_in_headers",
            "location": 66,
            "return": [
                "typing.Text",
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "candidates": [
                    "List[str]",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/notebook_memory_management.py": {
        "start_watching_memory": {
            "name": "start_watching_memory",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "stop_watching_memory": {
            "name": "stop_watching_memory",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "watch_memory": {
            "name": "watch_memory",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "pre_run_cell": {
            "name": "pre_run_cell",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/notebook_utils.py": {
        "is_jupyter": {
            "name": "is_jupyter",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_databricks": {
            "name": "is_databricks",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/python_utils.py": {
        "exponential_decay": {
            "name": "exponential_decay",
            "location": 13,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ],
                "max_val": [
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ],
                "half_life": [
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ]
            }
        },
        "jaccard": {
            "name": "jaccard",
            "location": 27,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "cooccurrence": [
                    "str",
                    "int"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 45,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "cooccurrence": [
                    "str",
                    "int"
                ]
            }
        },
        "get_top_k_scored_items": {
            "name": "get_top_k_scored_items",
            "location": 63,
            "return": [
                "tuple[]",
                "str",
                "Iterable[int]",
                "dict",
                "float"
            ],
            "arguments": {
                "scores": [
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "top_k": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "typing.Type",
                    "Type"
                ],
                "sort_top_k": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/spark_utils.py": {
        "start_or_get_spark": {
            "name": "start_or_get_spark",
            "location": 14,
            "return": [
                "str",
                "bool",
                "list[str]",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "app_name": [
                    "typing.Text",
                    "str",
                    "list",
                    "dict"
                ],
                "url": [
                    "typing.Text",
                    "str",
                    "list",
                    "dict"
                ],
                "memory": [
                    "typing.Text",
                    "str",
                    "list",
                    "dict"
                ],
                "packages": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "jars": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "repository": [
                    "str",
                    "None",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/tf_utils.py": {
        "pandas_input_fn": {
            "name": "pandas_input_fn",
            "location": 12,
            "return": [
                "int",
                "tuple[typing.Union[int,int,int]]",
                "Callable",
                "list[float]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "df": [
                    "dict[, ]",
                    "list['cirq.Circuit']",
                    "bool",
                    "str",
                    "pandas.DataFrame",
                    "Optional[dict]",
                    "List['cirq.Circuit']",
                    "float"
                ],
                "y_col": [
                    "int",
                    "None",
                    "Optional[Mapping[str, str]]",
                    "bool",
                    "typing.Mapping",
                    "Optional[str]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Union[float, List[float]]"
                ],
                "num_epochs": [
                    "int",
                    "bool",
                    "Union[float, List[float]]"
                ],
                "shuffle": [
                    "bool",
                    "int",
                    "Union[float, List[float]]"
                ],
                "num_threads": [
                    "int",
                    "bool",
                    "Union[float, List[float]]"
                ]
            }
        },
        "build_optimizer": {
            "name": "build_optimizer",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "lr": [
                    "float",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "evaluation_log_hook": {
            "name": "evaluation_log_hook",
            "location": 102,
            "return": [
                "_TrainLogHook",
                "str",
                "float",
                "numpy.ndarray",
                "Tuple[int, int, int]",
                "tuple"
            ],
            "arguments": {
                "estimator": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "true_df": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "y_col": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "eval_df": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "every_n_iter": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "model_dir": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "eval_fns": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "MetricsLogger.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsLogger.log": {
            "name": "log",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "typing.MutableMapping",
                    "float",
                    "T",
                    "typing.Callable[, ]",
                    "MutableMapping[str, Any]",
                    "Callable"
                ],
                "value": [
                    "str",
                    "Match[str]",
                    "typing.Match",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MetricsLogger.get_log": {
            "name": "get_log",
            "location": 163,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrainLogHook.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "logger": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "true_df": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "y_col": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "eval_df": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "every_n_iter": [
                    "int",
                    "str"
                ],
                "model_dir": [
                    "int",
                    "None",
                    "str",
                    "Callable[[float], None]",
                    "Callable[[int, int], None]",
                    "typing.Callable[float, None]",
                    "Optional[float]",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ],
                "eval_fns": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "_TrainLogHook.begin": {
            "name": "begin",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrainLogHook.before_run": {
            "name": "before_run",
            "location": 204,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_TrainLogHook.after_run": {
            "name": "after_run",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [
                    "bool"
                ],
                "run_values": [
                    "str",
                    "bool",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "_TrainLogHook.end": {
            "name": "end",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[]",
                    "list",
                    "Iterable"
                ]
            }
        },
        "_TrainLogHook._log": {
            "name": "_log",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 33,
            "return": [
                "Timer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.interval": {
            "name": "interval",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/common/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/cosmos_cli.py": {
        "find_collection": {
            "name": "find_collection",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "Optional[bytes]",
                    "str",
                    "Optional[str]"
                ],
                "dbid": [
                    "str",
                    "bytes",
                    "Sequence[Tuple[str, int]]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "id": [
                    "Optional[bytes]",
                    "bytes",
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "read_collection": {
            "name": "read_collection",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool"
                ],
                "dbid": [
                    "Sequence[Tuple[str, int]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "read_database": {
            "name": "read_database",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[int, str]"
                ]
            }
        },
        "find_database": {
            "name": "find_database",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]",
                    "dict"
                ],
                "id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/criteo.py": {
        "load_pandas_df": {
            "name": "load_pandas_df",
            "location": 29,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "local_cache_path": [
                    "None"
                ],
                "header": [
                    "list[typing.Text]"
                ]
            }
        },
        "load_spark_df": {
            "name": "load_spark_df",
            "location": 61,
            "return": [],
            "arguments": {
                "spark": [],
                "size": [
                    "typing.Text"
                ],
                "header": [
                    "list[typing.Text]"
                ],
                "local_cache_path": [
                    "None"
                ],
                "dbfs_datapath": [
                    "typing.Text"
                ],
                "dbutils": [
                    "None"
                ]
            }
        },
        "download_criteo": {
            "name": "download_criteo",
            "location": 120,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "work_directory": [
                    "typing.Text"
                ]
            }
        },
        "extract_criteo": {
            "name": "extract_criteo",
            "location": 135,
            "return": [],
            "arguments": {
                "size": [],
                "compressed_file": [],
                "path": [
                    "None"
                ]
            }
        },
        "get_spark_schema": {
            "name": "get_spark_schema",
            "location": 163,
            "return": [
                "StructType"
            ],
            "arguments": {
                "header": [
                    "list[typing.Text]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/download_utils.py": {
        "maybe_download": {
            "name": "maybe_download",
            "location": 31,
            "return": [
                "str",
                "int",
                "Callable",
                "list[str]",
                "float"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "filename": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "work_directory": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "expected_bytes": [
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "download_path": {
            "name": "download_path",
            "location": 61,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[typing.Union[str,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "path": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TqdmUpTo.update_to": {
            "name": "update_to",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "bsize": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "tsize": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Match",
                    "Optional[List[str]]",
                    "typing.Match",
                    "list[str]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/movielens.py": {
        "load_pandas_df": {
            "name": "load_pandas_df",
            "location": 147,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "header": [],
                "local_cache_path": [
                    "None"
                ],
                "title_col": [
                    "None"
                ],
                "genres_col": [
                    "None"
                ],
                "year_col": [
                    "None"
                ]
            }
        },
        "load_item_df": {
            "name": "load_item_df",
            "location": 229,
            "return": [],
            "arguments": {
                "size": [
                    "typing.Text"
                ],
                "local_cache_path": [
                    "None"
                ],
                "movie_col": [],
                "title_col": [
                    "None"
                ],
                "genres_col": [
                    "None"
                ],
                "year_col": [
                    "None"
                ]
            }
        },
        "_load_item_df": {
            "name": "_load_item_df",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "item_datapath": [],
                "movie_col": [],
                "title_col": [],
                "genres_col": [],
                "year_col": []
            }
        },
        "load_spark_df": {
            "name": "load_spark_df",
            "location": 331,
            "return": [],
            "arguments": {
                "spark": [],
                "size": [
                    "typing.Text"
                ],
                "header": [
                    "tuple[]"
                ],
                "schema": [
                    "None"
                ],
                "local_cache_path": [
                    "None"
                ],
                "dbutils": [
                    "None"
                ],
                "title_col": [
                    "None"
                ],
                "genres_col": [
                    "None"
                ],
                "year_col": [
                    "None"
                ]
            }
        },
        "_get_schema": {
            "name": "_get_schema",
            "location": 451,
            "return": [
                "None",
                "StructType"
            ],
            "arguments": {
                "header": [],
                "schema": []
            }
        },
        "_maybe_download_and_extract": {
            "name": "_maybe_download_and_extract",
            "location": 480,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "size": [],
                "dest_path": []
            }
        },
        "download_movielens": {
            "name": "download_movielens",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "dest_path": []
            }
        },
        "extract_movielens": {
            "name": "extract_movielens",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "rating_path": [],
                "item_path": [],
                "zip_path": []
            }
        },
        "_DataFormat.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [],
                "path": [],
                "has_header": [
                    "bool"
                ],
                "item_sep": [
                    "None"
                ],
                "item_path": [
                    "None"
                ],
                "item_has_header": [
                    "bool"
                ]
            }
        },
        "_DataFormat.separator": {
            "name": "separator",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.path": {
            "name": "path",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.has_header": {
            "name": "has_header",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.item_separator": {
            "name": "item_separator",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.item_path": {
            "name": "item_path",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DataFormat.item_has_header": {
            "name": "item_has_header",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_load_item_df.parse_year": {
            "name": "parse_year",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "t": []
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/pandas_df_utils.py": {
        "user_item_pairs": {
            "name": "user_item_pairs",
            "location": 21,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "user_df": [
                    "int",
                    "str"
                ],
                "item_df": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "user_col": [
                    "str",
                    "list"
                ],
                "item_col": [
                    "str",
                    "list"
                ],
                "user_item_filter_df": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[List[int]]",
                    "list[int]"
                ],
                "shuffle": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "filter_by": {
            "name": "filter_by",
            "location": 62,
            "return": [
                "Optional[int]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "df": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "filter_by_df": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "filter_by_cols": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "negative_feedback_sampler": {
            "name": "negative_feedback_sampler",
            "location": 253,
            "return": [
                "int",
                "list[int]",
                "str",
                "Callable",
                "list[]",
                "list[tuple[]]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "col_user": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "Optional[int]"
                ],
                "col_item": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "col_label": [
                    "float",
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "ratio_neg_per_user": [
                    "int",
                    "float",
                    "bool",
                    "complex"
                ],
                "seed": [
                    "int",
                    "float",
                    "bool",
                    "complex"
                ]
            }
        },
        "has_columns": {
            "name": "has_columns",
            "location": 354,
            "return": [
                "bool",
                "pandas.Series",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "columns": [
                    "list[str]",
                    "int",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "has_same_base_dtype": {
            "name": "has_same_base_dtype",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "df_1": [
                    "list[str]",
                    "List[str]",
                    "list[dict[str, str]]",
                    "int",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "df_2": [
                    "list[str]",
                    "list[dict[str, str]]",
                    "int",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ],
                "columns": [
                    "int",
                    "None",
                    "bool",
                    "float",
                    "str",
                    "List[\"DeliveryItem\"]",
                    "list[\"DeliveryItem\"]"
                ]
            }
        },
        "lru_cache_df": {
            "name": "lru_cache_df",
            "location": 450,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "maxsize": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "typed": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "LibffmConverter.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "LibffmConverter.fit": {
            "name": "fit",
            "location": 137,
            "return": [
                "LibffmConverter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "pandas.DataFrame",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "col_rating": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "LibffmConverter.transform": {
            "name": "transform",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "int"
                ]
            }
        },
        "LibffmConverter.fit_transform": {
            "name": "fit_transform",
            "location": 228,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "List[int]",
                    "None",
                    "list[int]"
                ],
                "col_rating": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "LibffmConverter.get_params": {
            "name": "get_params",
            "location": 240,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasHash.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pandas_object": [
                    "bool",
                    "typing.Sequence[int]",
                    "int",
                    "pandas.DataFrame",
                    "Sequence[int]"
                ]
            }
        },
        "PandasHash.__eq__": {
            "name": "__eq__",
            "location": 424,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "PandasHash.__hash__": {
            "name": "__hash__",
            "location": 435,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "lru_cache_df.to_pandas_hash": {
            "name": "to_pandas_hash",
            "location": 458,
            "return": [
                "PandasHash",
                "str",
                "Callable",
                "dict",
                "int",
                "float",
                "Iterable[int]"
            ],
            "arguments": {
                "val": [
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "lru_cache_df.from_pandas_hash": {
            "name": "from_pandas_hash",
            "location": 462,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "val": [
                    "dict",
                    "bool",
                    "Any",
                    "str",
                    "int"
                ]
            }
        },
        "lru_cache_df.decorating_function": {
            "name": "decorating_function",
            "location": 466,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "user_function": [
                    "type",
                    "Callable",
                    "numpy.array",
                    "str"
                ]
            }
        },
        "LibffmConverter.transform._convert": {
            "name": "_convert",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Mapping"
                ],
                "feature": [
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ],
                "field_index": [
                    "str",
                    "Optional[str]"
                ],
                "field_feature_index_dict": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "float"
                ]
            }
        },
        "lru_cache_df.decorating_function.wrapper": {
            "name": "wrapper",
            "location": 468,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "lru_cache_df.decorating_function.cached_wrapper": {
            "name": "cached_wrapper",
            "location": 475,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/python_splitters.py": {
        "python_random_split": {
            "name": "python_random_split",
            "location": 19,
            "return": [
                "list[]",
                "list",
                "Dict[str, Any]",
                "bool",
                "List[Dict]",
                "List[object]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "float",
                    "Union[float, str]",
                    "str",
                    "int",
                    "list[typing.Optional[typing.Any]]",
                    "pandas.DataFrame",
                    "list[str]",
                    "List[Optional[Any]]",
                    "List[str]"
                ],
                "ratio": [
                    "float",
                    "str",
                    "dict",
                    "List[str]",
                    "type"
                ],
                "seed": [
                    "int",
                    "dict",
                    "Union[float, str]",
                    "bool",
                    "pandas.DataFrame",
                    "List[Optional[Any]]",
                    "List[str]"
                ]
            }
        },
        "_do_stratification": {
            "name": "_do_stratification",
            "location": 46,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "data": [
                    "int",
                    "float",
                    "pandas.DataFrame"
                ],
                "ratio": [
                    "float",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[Any]",
                    "Iterable",
                    "object",
                    "gluonts.model.common.Tensor",
                    "str",
                    "Optional[float]"
                ],
                "min_rating": [
                    "int",
                    "Optional[int]",
                    "BinaryIO"
                ],
                "filter_by": [
                    "typing.Text",
                    "int",
                    "Sequence[int]",
                    "Dict[str, int]",
                    "Optional[int]",
                    "list",
                    "pandas.DataFrame",
                    "float"
                ],
                "is_random": [
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "seed": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "Optional[bool]",
                    "pandas._CompressionOptions",
                    "Optional[str]"
                ],
                "col_user": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "col_item": [
                    "int",
                    "Iterable",
                    "Dict[str, Any]"
                ],
                "col_timestamp": [
                    "Optional[int]",
                    "int",
                    "Union[int, str, None]",
                    "Optional[float]"
                ]
            }
        },
        "python_chrono_split": {
            "name": "python_chrono_split",
            "location": 121,
            "return": [],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "ratio": [
                    "float",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "filter_by": [
                    "typing.Text",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "col_timestamp": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "python_stratified_split": {
            "name": "python_stratified_split",
            "location": 165,
            "return": [],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "ratio": [
                    "float",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "filter_by": [
                    "typing.Text",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "seed": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "numpy_stratified_split": {
            "name": "numpy_stratified_split",
            "location": 206,
            "return": [
                "tuple[]",
                "bool",
                "str"
            ],
            "arguments": {
                "X": [
                    "str",
                    "Sequence[Any]"
                ],
                "ratio": [
                    "float",
                    "int",
                    "str"
                ],
                "seed": [
                    "int",
                    "str",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "Sequence[T]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/spark_splitters.py": {
        "spark_random_split": {
            "name": "spark_random_split",
            "location": 18,
            "return": [
                "Callable[[Any], bool]",
                "bool",
                "IO[bytes]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "ratio": [
                    "int",
                    "float"
                ],
                "seed": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "spark_chrono_split": {
            "name": "spark_chrono_split",
            "location": 42,
            "return": [
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "ratio": [
                    "float",
                    "Dict[str, int]",
                    "int",
                    "Set[int]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "filter_by": [
                    "typing.Text",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Callable",
                    "dict",
                    "Hashable"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_timestamp": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "spark_stratified_split": {
            "name": "spark_stratified_split",
            "location": 123,
            "return": [
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "ratio": [
                    "float",
                    "Dict[str, int]",
                    "int",
                    "Set[int]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "min_rating": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "filter_by": [
                    "typing.Text",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Callable",
                    "dict",
                    "Hashable"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "Tuple[Sequence]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "float"
                ],
                "col_rating": [
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "seed": [
                    "int",
                    "bool"
                ]
            }
        },
        "spark_timestamp_split": {
            "name": "spark_timestamp_split",
            "location": 205,
            "return": [
                "list[typing.Union[list[tuple[typing.Union[str,bool,typing.Any]]],dict[str, typing.Any],float,str]]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Sequence[str]]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[float]",
                    "Optional[str]",
                    "List[float]"
                ],
                "ratio": [
                    "float",
                    "str",
                    "int",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, str]",
                    "List[str]",
                    "Type[List[Any]]"
                ],
                "col_user": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ],
                "col_item": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ],
                "col_timestamp": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/sparse.py": {
        "AffinityMatrix.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "DF": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "Optional[str]",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "list['cirq.Circuit']",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "col_user": [
                    "Union[int, float]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "col_rating": [
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "col_pred": [
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List['cirq.Circuit']",
                    "int"
                ],
                "save_path": [
                    "str",
                    "Union[str, bytes, int]",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "AffinityMatrix._gen_index": {
            "name": "_gen_index",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffinityMatrix.gen_affinity_matrix": {
            "name": "gen_affinity_matrix",
            "location": 108,
            "return": [
                "bool",
                "str",
                "float",
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AffinityMatrix.map_back_sparse": {
            "name": "map_back_sparse",
            "location": 151,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "Iterable[T]"
                ],
                "kind": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/split_utils.py": {
        "process_split_ratio": {
            "name": "process_split_ratio",
            "location": 15,
            "return": [
                "tuple[typing.Union[bool,float,dict[str, str],list[]]]",
                "bool",
                "str",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "ratio": []
            }
        },
        "min_rating_filter_pandas": {
            "name": "min_rating_filter_pandas",
            "location": 49,
            "return": [
                "bool",
                "dict[, ]",
                "float",
                "dict[str, int]",
                "Optional[Any]",
                "dict[str, str]",
                "typing.OrderedDict"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "numpy.ndarray",
                    "None",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[Tuple[Any]]",
                    "tuple[typing.Union[pandas.DataFrame,pandas.DataFrame]]",
                    "Tuple[pandas.DataFrame, pandas.DataFrame]"
                ],
                "min_rating": [
                    "str",
                    "int"
                ],
                "filter_by": [
                    "str",
                    "typing.Text"
                ],
                "col_user": [
                    "str"
                ],
                "col_item": [
                    "str"
                ]
            }
        },
        "min_rating_filter_spark": {
            "name": "min_rating_filter_spark",
            "location": 84,
            "return": [
                "bool",
                "list[str]",
                "float",
                "Optional[Any]",
                "list[]",
                "str",
                "list[bool]",
                "list[tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "numpy.ndarray",
                    "None"
                ],
                "min_rating": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "Optional[int]"
                ],
                "filter_by": [
                    "typing.Text",
                    "str",
                    "list",
                    "int",
                    "Sequence[str]",
                    "tuple",
                    "bool"
                ],
                "col_user": [
                    "str",
                    "list",
                    "int",
                    "Sequence[str]",
                    "tuple",
                    "bool"
                ],
                "col_item": [
                    "str",
                    "list",
                    "int",
                    "Sequence[str]",
                    "tuple",
                    "bool"
                ]
            }
        },
        "_check_min_rating_filter": {
            "name": "_check_min_rating_filter",
            "location": 126,
            "return": [
                "tuple[typing.Union[str,None,bool,list[str]]]",
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "filter_by": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "min_rating": [
                    "bool",
                    "str",
                    "float",
                    "Optional[float]",
                    "List[str]"
                ],
                "col_user": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[List[Any]]"
                ],
                "col_item": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "split_pandas_data_with_ratios": {
            "name": "split_pandas_data_with_ratios",
            "location": 138,
            "return": [
                "int",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "Mapping[str, Any]",
                    "Dict[int, Dict[int, Any]]",
                    "pandas.DataFrame",
                    "pandas.core.frame.DataFrame",
                    "Tuple[int, str]",
                    "int"
                ],
                "ratios": [
                    "pandas.DataFrame",
                    "Sequence[T]",
                    "str",
                    "dict",
                    "List['cirq.Circuit']",
                    "List[str]"
                ],
                "seed": [
                    "int",
                    "numpy.ndarray",
                    "pandas.core.frame.DataFrame"
                ],
                "shuffle": [
                    "bool",
                    "dict",
                    "Tuple[str]",
                    "List[str]",
                    "List[dict]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/dataset/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/evaluation/parameter_sweep.py": {
        "generate_param_grid": {
            "name": "generate_param_grid",
            "location": 9,
            "return": [
                "list[dict[typing.Union[tuple[typing.Union[str,object]],tuple[typing.Union[str,dict[str, int]]]], typing.Union[tuple[typing.Union[str,object]],tuple[typing.Union[str,dict[str, int]]]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "dict[str, object]",
                    "Dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/evaluation/python_evaluation.py": {
        "check_column_dtypes": {
            "name": "check_column_dtypes",
            "location": 31,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "merge_rating_true_pred": {
            "name": "merge_rating_true_pred",
            "location": 89,
            "return": [
                "tuple[]",
                "bool",
                "int"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "str"
                ],
                "rating_pred": [
                    "bool",
                    "str"
                ],
                "col_user": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "col_item": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "col_rating": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, List[str]]",
                    "str"
                ],
                "col_prediction": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "rmse": {
            "name": "rmse",
            "location": 126,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "mae": {
            "name": "mae",
            "location": 159,
            "return": [
                "bool",
                "str",
                "Dict[str, Dict[str, float]]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "rsquared": {
            "name": "rsquared",
            "location": 192,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "exp_var": {
            "name": "exp_var",
            "location": 225,
            "return": [
                "str",
                "int",
                "numpy.ndarray",
                "List[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "rating_true": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "list[str]",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "rating_pred": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "list[str]",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_user": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_item": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_rating": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ],
                "col_prediction": [
                    "float",
                    "str",
                    "complex",
                    "int",
                    "bool",
                    "\"DataFrame\"",
                    "List[str]"
                ]
            }
        },
        "auc": {
            "name": "auc",
            "location": 258,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, Any]]",
                "numpy.ndarray",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "logloss": {
            "name": "logloss",
            "location": 301,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "rating_true": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "rating_pred": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "col_user": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_item": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_rating": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "col_prediction": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "merge_ranking_true_pred": {
            "name": "merge_ranking_true_pred",
            "location": 340,
            "return": [
                "tuple[typing.Union[list[int],int]]",
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "rating_true": [
                    "list[dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], ]]",
                    "str",
                    "int",
                    "list[str]",
                    "list['Token']",
                    "List[dict]",
                    "Optional[str]",
                    "numpy.ndarray",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "List['Token']"
                ],
                "rating_pred": [
                    "list[typing.Optional[str]]",
                    "str",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "pandas.DataFrame"
                ],
                "col_user": [
                    "int",
                    "List[dict]",
                    "Optional[str]",
                    "numpy.ndarray",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "str",
                    "List['Token']"
                ],
                "col_item": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "col_rating": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "col_prediction": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "relevancy_method": [
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "k": [
                    "str",
                    "recidiviz.common.ingest_metadata.IngestMetadata"
                ],
                "threshold": [
                    "Optional[str]",
                    "str",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "precision_at_k": {
            "name": "precision_at_k",
            "location": 412,
            "return": [
                "float",
                "str",
                "list"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "recall_at_k": {
            "name": "recall_at_k",
            "location": 465,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "ndcg_at_k": {
            "name": "ndcg_at_k",
            "location": 512,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "map_at_k": {
            "name": "map_at_k",
            "location": 573,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "rating_pred": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "col_user": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_item": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_rating": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "col_prediction": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "k": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "threshold": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "get_top_k_items": {
            "name": "get_top_k_items",
            "location": 636,
            "return": [
                "bool",
                "Optional[str]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "bool",
                    "Iterable[Hashable]"
                ],
                "col_user": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[Hashable]"
                ],
                "col_rating": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[Hashable]"
                ],
                "k": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[Hashable]"
                ]
            }
        },
        "check_column_dtypes.check_column_dtypes_wrapper": {
            "name": "check_column_dtypes_wrapper",
            "location": 43,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "rating_true": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "rating_pred": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "col_user": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "col_item": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "col_rating": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "col_prediction": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/evaluation/spark_evaluation.py": {
        "_get_top_k_items": {
            "name": "_get_top_k_items",
            "location": 338,
            "return": [
                "bool",
                "int",
                "dict[int, int]",
                "list[]"
            ],
            "arguments": {
                "dataframe": [
                    "float",
                    "bool"
                ],
                "col_user": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_item": [
                    "float",
                    "bool"
                ],
                "col_rating": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_prediction": [
                    "float",
                    "bool"
                ],
                "k": [
                    "float",
                    "bool"
                ]
            }
        },
        "_get_relevant_items_by_threshold": {
            "name": "_get_relevant_items_by_threshold",
            "location": 381,
            "return": [
                "bool",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[float]"
                ],
                "col_user": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "col_item": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "col_rating": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "col_prediction": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "threshold": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "_get_relevant_items_by_timestamp": {
            "name": "_get_relevant_items_by_timestamp",
            "location": 424,
            "return": [
                "bool",
                "int",
                "list[list[str]]",
                "dict[int, int]",
                "list[]"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "bool"
                ],
                "col_user": [
                    "str",
                    "int"
                ],
                "col_item": [
                    "int",
                    "bool"
                ],
                "col_rating": [
                    "int",
                    "bool"
                ],
                "col_timestamp": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "col_prediction": [
                    "int",
                    "bool"
                ],
                "k": [
                    "int",
                    "bool"
                ]
            }
        },
        "SparkRatingEvaluation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rating_true": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rating_pred": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "col_user": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "col_item": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "col_rating": [
                    "str"
                ],
                "col_prediction": [
                    "str"
                ]
            }
        },
        "SparkRatingEvaluation.rmse": {
            "name": "rmse",
            "location": 113,
            "return": [
                "str",
                "Dict[str, Any]",
                "type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRatingEvaluation.mae": {
            "name": "mae",
            "location": 121,
            "return": [
                "str",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRatingEvaluation.rsquared": {
            "name": "rsquared",
            "location": 129,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRatingEvaluation.exp_var": {
            "name": "exp_var",
            "location": 136,
            "return": [
                "float",
                "int",
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rating_true": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "int",
                    "None",
                    "Optional[List[Any]]",
                    "list[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "rating_pred": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "k": [
                    "recidiviz.common.constants.state.state_case_type.StateSupervisionCaseType",
                    "Optional[bool]"
                ],
                "relevancy_method": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "col_user": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "col_item": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "col_rating": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "col_prediction": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "threshold": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "recidiviz.common.constants.state.state_case_type.StateSupervisionCaseType",
                    "int"
                ]
            }
        },
        "SparkRankingEvaluation._calculate_metrics": {
            "name": "_calculate_metrics",
            "location": 270,
            "return": [
                "RankingMetrics",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.precision_at_k": {
            "name": "precision_at_k",
            "location": 287,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str, str]",
                "tuple[typing.Union[int,int,int]]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.recall_at_k": {
            "name": "recall_at_k",
            "location": 299,
            "return": [
                "float",
                "dict[str, typing.Union[typing.Any,typing.Any,bool,int,str]]",
                "int",
                "Dict[str, str]",
                "dict[str, list[str]]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "typing.Type",
                "list[]",
                "tuple[]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.ndcg_at_k": {
            "name": "ndcg_at_k",
            "location": 313,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str, str]",
                "tuple[typing.Union[int,int,int]]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkRankingEvaluation.map_at_k": {
            "name": "map_at_k",
            "location": 325,
            "return": [
                "float",
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/evaluation/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/recommender/__init__.py": {},
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/recommender/sar/sar_singlenode.py": {
        "SARSingleNode.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "remove_seen": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_user": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "col_item": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "col_rating": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "col_timestamp": [
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "col_prediction": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "similarity_type": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Callable"
                ],
                "time_decay_coefficient": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "time_now": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "timedecay_formula": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "threshold": [
                    "List[List[str]]",
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "SARSingleNode.compute_affinity_matrix": {
            "name": "compute_affinity_matrix",
            "location": 96,
            "return": [
                "int",
                "numpy.ndarray",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "n_users": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "n_items": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "SARSingleNode.compute_coocurrence_matrix": {
            "name": "compute_coocurrence_matrix",
            "location": 116,
            "return": [
                "str",
                "Dict[str, Any]",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "n_users": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "n_items": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "SARSingleNode.set_index": {
            "name": "set_index",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "pandas.DataFrame"
                ]
            }
        },
        "SARSingleNode.fit": {
            "name": "fit",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Union[bool, numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "SARSingleNode.score": {
            "name": "score",
            "location": 252,
            "return": [
                "str",
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Union[int, float, complex]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "bool"
                ],
                "remove_seen": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "SARSingleNode.get_popularity_based_topk": {
            "name": "get_popularity_based_topk",
            "location": 286,
            "return": [
                "int",
                "bool",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "top_k": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "sort_top_k": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Callable"
                ]
            }
        },
        "SARSingleNode.get_item_based_topk": {
            "name": "get_item_based_topk",
            "location": 313,
            "return": [
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "tuple[typing.Sequence[]]",
                    "\"SignedBlindedBalanceProof\"",
                    "Tuple[Sequence]",
                    "\"MutableRangeSet[T]\""
                ],
                "top_k": [
                    "int",
                    "Callable",
                    "Optional[float]"
                ],
                "sort_top_k": [
                    "bool",
                    "Callable",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "SARSingleNode.recommend_k_items": {
            "name": "recommend_k_items",
            "location": 380,
            "return": [
                "int",
                "bool",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "int",
                    "list",
                    "float",
                    "list[]",
                    "str",
                    "Callable[..., bool]",
                    "typing.Callable[..., bool]"
                ],
                "top_k": [
                    "int",
                    "float",
                    "Optional[List[int]]"
                ],
                "sort_top_k": [
                    "bool",
                    "float",
                    "Optional[List[int]]"
                ],
                "remove_seen": [
                    "bool",
                    "int",
                    "Callable[[], Any]",
                    "Optional[bool]"
                ]
            }
        },
        "SARSingleNode.predict": {
            "name": "predict",
            "location": 410,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "azure-python-labs-main/2019/6-azureml-movie-recommendation/reco_utils/recommender/sar/__init__.py": {},
    "azure-python-labs-main/2019/8-azure-service-bus-messaging/app.py": {
        "send": {
            "name": "send",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2021/9-azure-machine-learning/run_experiment.py": {
        "submit": {
            "name": "submit",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2021/9-azure-machine-learning/train.py": {},
    "azure-python-labs-main/2021/9-azure-machine-learning/utils.py": {
        "load_data": {
            "name": "load_data",
            "location": 10,
            "return": [
                "str",
                "List[str]",
                "numpy.ndarray",
                "Callable",
                "Dict[str, int]",
                "Mapping[str, object]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "label": [
                    "bool",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "one_hot_encode": {
            "name": "one_hot_encode",
            "location": 25,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "float",
                    "type",
                    "set"
                ],
                "num_of_classes": [
                    "int",
                    "float",
                    "type",
                    "typing.Type",
                    "set",
                    "set[]"
                ]
            }
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 28,
            "return": [
                "tuple[typing.Union[float,str,list[str],list[],dict[, ],None]]",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "dataset": [
                    "int",
                    "str"
                ],
                "data_folder": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "prepare_data.download_data": {
            "name": "download_data",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "azure-python-labs-main/2021/9-azure-web-apps/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "azure-python-labs-main/2021/9-azure-web-apps/appservicenumberfacts/asgi.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/appservicenumberfacts/settings.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/appservicenumberfacts/urls.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/appservicenumberfacts/wsgi.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/appservicenumberfacts/__init__.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/admin.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/apps.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/models.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/tests.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/urls.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/views.py": {
        "index": {
            "name": "index",
            "location": 4,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/__init__.py": {},
    "azure-python-labs-main/2021/9-azure-web-apps/randnum/migrations/__init__.py": {}
}
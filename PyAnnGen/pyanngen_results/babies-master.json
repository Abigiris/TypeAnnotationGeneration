{
    "babies-master/setup.py": {},
    "babies-master/babies/command.py": {
        "run_babies": {
            "name": "run_babies",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "babies-master/babies/config.py": {
        "_load_first_data": {
            "name": "_load_first_data",
            "location": 11,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.load": {
            "name": "load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_youtube_api_key": {
            "name": "get_youtube_api_key",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_spotify_access_token": {
            "name": "get_spotify_access_token",
            "location": 34,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.save_spotify_access_token": {
            "name": "save_spotify_access_token",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool"
                ],
                "expires": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config.get_spotify_client_id_and_secret": {
            "name": "get_spotify_client_id_and_secret",
            "location": 55,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_spotify_market": {
            "name": "get_spotify_market",
            "location": 67,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "babies-master/babies/db.py": {
        "Db.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.load_series": {
            "name": "load_series",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dirpath": [
                    "str"
                ]
            }
        },
        "Db.path_has_series_db": {
            "name": "path_has_series_db",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        },
        "Db.get_next_index_in_series": {
            "name": "get_next_index_in_series",
            "location": 45,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_next_in_series": {
            "name": "get_next_in_series",
            "location": 62,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.prune_watched": {
            "name": "prune_watched",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.add_show_to_series": {
            "name": "add_show_to_series",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "list",
                    "list[]"
                ]
            }
        },
        "Db.write_series": {
            "name": "write_series",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirpath": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Db.get_series_media_set": {
            "name": "get_series_media_set",
            "location": 86,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_series_db_path": {
            "name": "get_series_db_path",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        },
        "Db.load_global_record": {
            "name": "load_global_record",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_matching_entries": {
            "name": "get_matching_entries",
            "location": 101,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "filter_expression": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "Db.filter_db": {
            "name": "filter_db",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_expression": [
                    "str",
                    "bool",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Db.append_global_record": {
            "name": "append_global_record",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Db.get_global_record_db_path": {
            "name": "get_global_record_db_path",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "babies-master/babies/formatting.py": {
        "format_duration": {
            "name": "format_duration",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "duration": [
                    "bool",
                    "float",
                    "List[Tuple[int, str]]",
                    "int",
                    "str"
                ]
            }
        },
        "format_date": {
            "name": "format_date",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "str"
                ]
            }
        },
        "format_time_with_duration": {
            "name": "format_time_with_duration",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "time": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "format_duration.timecomp": {
            "name": "timecomp",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "comp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "babies-master/babies/input.py": {
        "_better_readchar": {
            "name": "_better_readchar",
            "location": 14,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_cleanup_readchar": {
            "name": "_cleanup_readchar",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ReadInput.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadInput.start": {
            "name": "start",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([str], None)]"
                ]
            }
        },
        "ReadInput.stop": {
            "name": "stop",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadInput.destroy": {
            "name": "destroy",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadInput.__handle_keypress": {
            "name": "__handle_keypress",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[KT], VT]",
                    "typing.Callable[T, T]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "ReadInput.__read_keypresses": {
            "name": "__read_keypresses",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadInput.__read_keypresses_for_tty": {
            "name": "__read_keypresses_for_tty",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadInput.__read_keypresses_for_non_tty": {
            "name": "__read_keypresses_for_non_tty",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadInput.__read_keypresses_for_tty.readchars": {
            "name": "readchars",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "ReadInput.__read_keypresses_for_non_tty.readlines": {
            "name": "readlines",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "babies-master/babies/logger.py": {
        "MpvLogger.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MpvLogger.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_level": [
                    "int",
                    "float",
                    "bytes"
                ],
                "component": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Union[int, str]",
                    "int",
                    "str"
                ],
                "message": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Union[int, str]",
                    "int",
                    "str"
                ]
            }
        },
        "MpvLogger.unsuspend": {
            "name": "unsuspend",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "babies-master/babies/media.py": {
        "_is_url": {
            "name": "_is_url",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_is_spotify": {
            "name": "_is_spotify",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_media_path": {
            "name": "_get_media_path",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "media_entry": [
                    "babies.db.MediaEntry"
                ]
            }
        },
        "_get_media_entry_for_log": {
            "name": "_get_media_entry_for_log",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "media_path": [
                    "str"
                ]
            }
        },
        "_is_video": {
            "name": "_is_video",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_find_candidate_in_directory": {
            "name": "_find_candidate_in_directory",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_path_to_media": {
            "name": "_path_to_media",
            "location": 72,
            "return": [
                "Tuple[(str, Optional[babies.db.MediaEntry])]"
            ],
            "arguments": {
                "db": [
                    "babies.db.Db"
                ],
                "path": [
                    "str"
                ],
                "ignore_errors": [
                    "bool",
                    "str",
                    "dict",
                    "Union[str, List[str]]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "dict",
                    "Union[str, List[str]]"
                ]
            }
        },
        "record_media": {
            "name": "record_media",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "comment": [
                    "str"
                ]
            }
        },
        "_parse_duration": {
            "name": "_parse_duration",
            "location": 153,
            "return": [
                "float"
            ],
            "arguments": {
                "duration": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "play_media": {
            "name": "play_media",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "read_input": [
                    "babies.input.ReadInput"
                ],
                "uri": [
                    "str"
                ],
                "dont_record": [
                    "bool",
                    "int",
                    "Callable"
                ],
                "night_mode": [
                    "bool",
                    "int",
                    "bytes"
                ],
                "sub_file": [
                    "int",
                    "None",
                    "bytes",
                    "bool"
                ],
                "comment": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[float]"
                ],
                "title": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "_record_session": {
            "name": "_record_session",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "babies.db.Db"
                ],
                "media_entry": [
                    "Optional[babies.db.MediaEntry]"
                ],
                "uri": [
                    "str"
                ],
                "media_log_entry": [
                    "str"
                ],
                "start_time": [
                    "_datetime.datetime"
                ],
                "start_position": [
                    "int"
                ],
                "end_time": [
                    "_datetime.datetime"
                ],
                "position": [
                    "int"
                ],
                "formatted_duration": [
                    "str"
                ],
                "comment": [
                    "str",
                    "None",
                    "int",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "None",
                    "int",
                    "db.Db",
                    "Dict[str, 'LabwareDefinition']",
                    "dict[str, D]"
                ],
                "is_audio": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "skip_global_record": [
                    "bool",
                    "str",
                    "datetime.datetime",
                    "int",
                    "MutableMapping"
                ]
            }
        },
        "print_path_to_media": {
            "name": "print_path_to_media",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "List[str]"
                ],
                "ignore_errors": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "no_extension_filter": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "enqueue_media": {
            "name": "enqueue_media",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "queue_path": [
                    "str"
                ],
                "paths": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ],
                "comment": [
                    "bool",
                    "None",
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "typing.Iterable[str]"
                ],
                "prune": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "title": [
                    "bool",
                    "None",
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "dequeue_media": {
            "name": "dequeue_media",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "queue_path": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "paths": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "grep_media_record": {
            "name": "grep_media_record",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "terms": [
                    "float",
                    "str"
                ],
                "quiet": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "create_record_from_directory": {
            "name": "create_record_from_directory",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "babies.db.Db"
                ],
                "dirpath": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "force": [
                    "str",
                    "bool",
                    "solo.server.db.types.SQLEngine"
                ]
            }
        },
        "enqueue_media.add_new_entry": {
            "name": "add_new_entry",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "media": [
                    "float",
                    "list"
                ],
                "alias": [
                    "str",
                    "None"
                ],
                "audio": [
                    "bool",
                    "django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor",
                    "str",
                    "int"
                ]
            }
        }
    },
    "babies-master/babies/spotify.py": {
        "search_spotify": {
            "name": "search_spotify",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "babies.config.Config"
                ],
                "search_terms": [
                    "List[str]"
                ],
                "limit": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "raw": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_format_spotify_results": {
            "name": "_format_spotify_results",
            "location": 55,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "results": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "handle_keypress": {
            "name": "handle_keypress",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "listen_to_track": {
            "name": "listen_to_track",
            "location": 168,
            "return": [
                "Tuple[(int, str, _datetime.datetime)]"
            ],
            "arguments": {
                "read_input": [
                    "babies.input.ReadInput"
                ],
                "track_uri": [
                    "str"
                ]
            }
        },
        "SpotifyPlayer.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyPlayer.play_track": {
            "name": "play_track",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ]
            }
        },
        "SpotifyPlayer.stop": {
            "name": "stop",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyPlayer.__get_metadata": {
            "name": "__get_metadata",
            "location": 114,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyPlayer.__get_playback_status": {
            "name": "__get_playback_status",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyPlayer.wait_for_track_to_start": {
            "name": "wait_for_track_to_start",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyPlayer.get_duration": {
            "name": "get_duration",
            "location": 133,
            "return": [
                "int",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyPlayer.wait_for_track_to_end": {
            "name": "wait_for_track_to_end",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "babies-master/babies/videos.py": {
        "_apply_watch_options": {
            "name": "_apply_watch_options",
            "location": 22,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {
                "player": [
                    "str",
                    "bytes"
                ],
                "video_path": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "_wait_for_duration_or_terminate": {
            "name": "_wait_for_duration_or_terminate",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "player": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "List[str]",
                    "None",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ]
            }
        },
        "register_pause_handler": {
            "name": "register_pause_handler",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "player": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "watch_video": {
            "name": "watch_video",
            "location": 95,
            "return": [
                "Optional[Tuple[(int, str, _datetime.datetime)]]"
            ],
            "arguments": {
                "read_input": [
                    "babies.input.ReadInput"
                ],
                "path": [
                    "str"
                ],
                "video_path": [
                    "str"
                ],
                "display_video": [
                    "str"
                ],
                "start_position": [
                    "int"
                ],
                "night_mode": [
                    "bool",
                    "str",
                    "int",
                    "Iterator[int]"
                ],
                "sub_file": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "Iterator[int]",
                    "typing.Iterator"
                ]
            }
        },
        "_wait_for_duration_or_terminate.wait_for_duration": {
            "name": "wait_for_duration",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_wait_for_duration_or_terminate.wait_for_playback": {
            "name": "wait_for_playback",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "register_pause_handler.pause_handler": {
            "name": "pause_handler",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "named": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "watch_video.quit_binding": {
            "name": "quit_binding",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_wait_for_duration_or_terminate.wait_for_duration.set_duration": {
            "name": "set_duration",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "babies-master/babies/yaml.py": {
        "load_yaml_file": {
            "name": "load_yaml_file",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Mapping[int, str]",
                "IO",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "save_yaml_file": {
            "name": "save_yaml_file",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Sequence[str]",
                    "type",
                    "int",
                    "bool"
                ],
                "data": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "mode": [
                    "typing.Text",
                    "Sequence[str]",
                    "str",
                    "type",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "babies-master/babies/youtube.py": {
        "search_youtube": {
            "name": "search_youtube",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "babies.config.Config"
                ],
                "search_terms": [
                    "List[str]"
                ],
                "duration": [
                    "str"
                ],
                "raw": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "search_youtube.format_search_entry": {
            "name": "format_search_entry",
            "location": 26,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "bytes",
                "str"
            ],
            "arguments": {
                "entry": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "babies-master/babies/__init__.py": {}
}
{
    "bankroll-broker-schwab-master/setup.py": {},
    "bankroll-broker-schwab-master/bankroll/brokers/schwab/account.py": {
        "_schwabDecimal": {
            "name": "_schwabDecimal",
            "location": 61,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_parseOption": {
            "name": "_parseOption",
            "location": 68,
            "return": [
                "Option",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "_parseSchwabPosition": {
            "name": "_parseSchwabPosition",
            "location": 118,
            "return": [
                "None",
                "Optional[str]",
                "Position",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "p": [
                    "_SchwabPosition"
                ]
            }
        },
        "padToLength": {
            "name": "padToLength",
            "location": 142,
            "return": [
                "Iterable[_T]"
            ],
            "arguments": {
                "seq": [
                    "Sequence[_T]"
                ],
                "length": [
                    "int"
                ],
                "padding": [
                    "_T"
                ]
            }
        },
        "_schwabPositionsFromRows": {
            "name": "_schwabPositionsFromRows",
            "location": 146,
            "return": [
                "Iterable[_SchwabPosition]"
            ],
            "arguments": {
                "rows": [
                    "Iterable[List[str]]"
                ]
            }
        },
        "_parsePositions": {
            "name": "_parsePositions",
            "location": 158,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "_parseCashValue": {
            "name": "_parseCashValue",
            "location": 174,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "p": [
                    "_SchwabPosition"
                ]
            }
        },
        "_parseBalance": {
            "name": "_parseBalance",
            "location": 181,
            "return": [
                "AccountBalance",
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "_guessInstrumentFromSymbol": {
            "name": "_guessInstrumentFromSymbol",
            "location": 213,
            "return": [
                "Bond",
                "Optional[str]",
                "Stock",
                "int",
                "Optional[bytes]"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "_parseSchwabTransactionDate": {
            "name": "_parseSchwabTransactionDate",
            "location": 222,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "datestr": [
                    "str"
                ]
            }
        },
        "_forceParseSchwabTransaction": {
            "name": "_forceParseSchwabTransaction",
            "location": 226,
            "return": [
                "Trade",
                "datetime.datetime",
                "Optional[str]",
                "str",
                "int",
                "bankroll.model.Currency",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "t": [
                    "_SchwabTransaction"
                ],
                "flags": [
                    "None",
                    "bool",
                    "Optional[datetime.date]",
                    "str",
                    "int"
                ]
            }
        },
        "_parseSchwabTransaction": {
            "name": "_parseSchwabTransaction",
            "location": 251,
            "return": [
                "str",
                "CashPayment",
                "bool",
                "Trade",
                "None"
            ],
            "arguments": {
                "t": [
                    "_SchwabTransaction"
                ],
                "otherTransactionsThisDate": [
                    "Iterable[_SchwabTransaction]"
                ]
            }
        },
        "_parseTransactions": {
            "name": "_parseTransactions",
            "location": 355,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "_fixUpShortSales": {
            "name": "_fixUpShortSales",
            "location": 395,
            "return": [
                "list"
            ],
            "arguments": {
                "activity": [
                    "Sequence"
                ],
                "inboundTransfers": [
                    "Sequence"
                ]
            }
        },
        "Settings.help": {
            "name": "help",
            "location": 48,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.sectionName": {
            "name": "sectionName",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "Type[Any]",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "Type[T]"
                ]
            }
        },
        "_fixUpShortSales.f": {
            "name": "f",
            "location": 400,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "t": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "SchwabAccount.fromSettings": {
            "name": "fromSettings",
            "location": 450,
            "return": [
                "SchwabAccount"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSchwabAccount]"
                ],
                "settings": [
                    "Mapping[(Any, str)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "SchwabAccount.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "Optional[pathlib.Path]"
                ],
                "transactions": [
                    "Optional[pathlib.Path]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "SchwabAccount.positions": {
            "name": "positions",
            "location": 473,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchwabAccount.activity": {
            "name": "activity",
            "location": 484,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchwabAccount.balance": {
            "name": "balance",
            "location": 495,
            "return": [
                "str",
                "int",
                "AccountBalance",
                "Exception",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-schwab-master/bankroll/brokers/schwab/__init__.py": {},
    "bankroll-broker-schwab-master/tests/helpers.py": {
        "cashUSD": {
            "name": "cashUSD",
            "location": 5,
            "return": [
                "Cash",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "amount": [
                    "decimal.Decimal"
                ]
            }
        }
    },
    "bankroll-broker-schwab-master/tests/test_schwab.py": {
        "TestSchwabPositions.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabPositions.test_positionValidity": {
            "name": "test_positionValidity",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabPositions.test_tBill": {
            "name": "test_tBill",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabPositions.test_bnd": {
            "name": "test_bnd",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabPositions.test_uvxy": {
            "name": "test_uvxy",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabPositions.test_vti": {
            "name": "test_vti",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.setUp": {
            "name": "setUp",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_activityValidity": {
            "name": "test_activityValidity",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_buyBond": {
            "name": "test_buyBond",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_redeemBond": {
            "name": "test_redeemBond",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_buyStock": {
            "name": "test_buyStock",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_dividendReinvested": {
            "name": "test_dividendReinvested",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_cashDividend": {
            "name": "test_cashDividend",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_reinvestShares": {
            "name": "test_reinvestShares",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_shortSaleAndCover": {
            "name": "test_shortSaleAndCover",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_buyToOpenOption": {
            "name": "test_buyToOpenOption",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_sellToCloseOption": {
            "name": "test_sellToCloseOption",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_exercisedOption": {
            "name": "test_exercisedOption",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_assignedOption": {
            "name": "test_assignedOption",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_expiredShortOption": {
            "name": "test_expiredShortOption",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_buyToCloseOption": {
            "name": "test_buyToCloseOption",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_sellToOpenOption": {
            "name": "test_sellToOpenOption",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_securityTransferSale": {
            "name": "test_securityTransferSale",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_cashInterest": {
            "name": "test_cashInterest",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabTransactions.test_marginInterest": {
            "name": "test_marginInterest",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabBalance.setUp": {
            "name": "setUp",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchwabBalance.testUSDBalance": {
            "name": "testUSDBalance",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-schwab-master/tests/__init__.py": {}
}
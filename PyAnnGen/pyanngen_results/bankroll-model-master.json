{
    "bankroll-model-master/setup.py": {},
    "bankroll-model-master/bankroll/model/activity.py": {
        "CashPayment.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.quantizeQuantity": {
            "name": "quantizeQuantity",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "quantity": [
                    "Type",
                    "float"
                ]
            }
        },
        "Trade.__post_init__": {
            "name": "__post_init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.price": {
            "name": "price",
            "location": 71,
            "return": [
                "str",
                "bytearray",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.proceeds": {
            "name": "proceeds",
            "location": 78,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.action": {
            "name": "action",
            "location": 82,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.__str__": {
            "name": "__str__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/balance.py": {
        "AccountBalance.__post_init__": {
            "name": "__post_init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountBalance.__add__": {
            "name": "__add__",
            "location": 32,
            "return": [
                "Union[(AccountBalance, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str,str]",
                    "AbstractSet",
                    "str",
                    "Callable",
                    "AbstractSet[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "AccountBalance.__sub__": {
            "name": "__sub__",
            "location": 57,
            "return": [
                "Union[(AccountBalance, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "AbstractSet[Any]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "AbstractSet[T]"
                ]
            }
        },
        "AccountBalance.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/cash.py": {
        "Currency.__lt__": {
            "name": "__lt__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.format": {
            "name": "format",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "quantity": []
            }
        },
        "Currency.formatWithPadding": {
            "name": "formatWithPadding",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [],
                "padding": []
            }
        },
        "Cash.quantize": {
            "name": "quantize",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "Cash.__post_init__": {
            "name": "__post_init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cash.paddedString": {
            "name": "paddedString",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "padding": [
                    "int"
                ]
            }
        },
        "Cash.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cash.__add__": {
            "name": "__add__",
            "location": 80,
            "return": [
                "Union[(Cash, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__sub__": {
            "name": "__sub__",
            "location": 95,
            "return": [
                "Union[(Cash, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__mul__": {
            "name": "__mul__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__truediv__": {
            "name": "__truediv__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 152,
            "return": [
                "Union[(Cash, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__neg__": {
            "name": "__neg__",
            "location": 158,
            "return": [
                "Cash"
            ],
            "arguments": {
                "self": [
                    "_TCash@@Cash@@"
                ]
            }
        },
        "Cash.__abs__": {
            "name": "__abs__",
            "location": 161,
            "return": [
                "Cash"
            ],
            "arguments": {
                "self": [
                    "_TCash@@Cash@@"
                ]
            }
        },
        "Cash.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__lt__": {
            "name": "__lt__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/converter.py": {
        "dataframeForModelObjects": {
            "name": "dataframeForModelObjects",
            "location": 14,
            "return": [
                "str",
                "IO[str]",
                "Iterable[int]",
                "List[List[int]]",
                "int",
                "bytes"
            ],
            "arguments": {
                "items": [
                    "Union[int, slice]",
                    "str",
                    "dict",
                    "Iterable[T]"
                ]
            }
        },
        "_dataframeColumnFunctions": {
            "name": "_dataframeColumnFunctions",
            "location": 25,
            "return": [
                "Dict[(str, Callable[([Any], Any)])]"
            ],
            "arguments": {
                "model": [
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "bankroll-model-master/bankroll/model/instrument.py": {
        "Instrument.quantizeMultiplier": {
            "name": "quantizeMultiplier",
            "location": 25,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "decimal.Decimal",
                    "complex",
                    "bytes",
                    "bool"
                ],
                "multiplier": [
                    "Type",
                    "int",
                    "decimal.Decimal",
                    "complex",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Instrument.__post_init__": {
            "name": "__post_init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrument.__lt__": {
            "name": "__lt__",
            "location": 42,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Exception",
                    "Type",
                    "Dict[str,Any]",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "Instrument.__format__": {
            "name": "__format__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]",
                    "None"
                ]
            }
        },
        "Instrument.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stock.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "currency": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "exchange": [
                    "None",
                    "str",
                    "Optional[str]",
                    "cash.Currency",
                    "decimal.Decimal"
                ]
            }
        },
        "Bond.validBondSymbol": {
            "name": "validBondSymbol",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,dict]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "symbol": [
                    "str",
                    "Dict[str,dict]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Bond.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Iterable[str]"
                ],
                "currency": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "exchange": [
                    "None",
                    "str",
                    "Optional[str]",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "validateSymbol": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "Dict[str,Any]",
                    "Union[List[str],str]",
                    "Optional[Pattern]"
                ]
            }
        },
        "Option.quantizeStrike": {
            "name": "quantizeStrike",
            "location": 102,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "int",
                    "decimal.Decimal"
                ],
                "strike": [
                    "Dict",
                    "int",
                    "decimal.Decimal"
                ]
            }
        },
        "Option.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "underlying": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping"
                ],
                "currency": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "float",
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "Optional[Union[float,str]]",
                    "Optional[Union[str,Callable,bool]]",
                    "Optional[InstrumentBase]"
                ],
                "optionType": [
                    "bool"
                ],
                "expiration": [
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping"
                ],
                "strike": [
                    "str",
                    "type",
                    "Union[None, str, int]",
                    "Optional[str]"
                ],
                "multiplier": [
                    "Decimal",
                    "decimal.Decimal",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "exchange": [
                    "None",
                    "Optional[str]",
                    "str",
                    "cash.Currency",
                    "float",
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "Optional[Union[float,str]]",
                    "Optional[Union[str,Callable,bool]]",
                    "Optional[InstrumentBase]"
                ],
                "symbol": [
                    "FrozenSet[str]",
                    "None",
                    "Optional[Union[int,float]]",
                    "Callable",
                    "List[str]",
                    "frozenset",
                    "Dict",
                    "int",
                    "float"
                ]
            }
        },
        "FutureOption.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "underlying": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "currency": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "optionType": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "expiration": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "strike": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "multiplier": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ],
                "exchange": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "datetime.date",
                    "cash.Currency",
                    "Optional[str]"
                ]
            }
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "currency": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "multiplier": [
                    "str",
                    "Optional[str]",
                    "None",
                    "cash.Currency",
                    "decimal.Decimal"
                ],
                "expiration": [
                    "int",
                    "str",
                    "Sequence"
                ],
                "exchange": [
                    "None",
                    "str",
                    "Optional[str]",
                    "cash.Currency",
                    "decimal.Decimal"
                ]
            }
        },
        "Forex.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baseCurrency": [
                    "str",
                    "cash.Currency",
                    "bool",
                    "Any",
                    "None",
                    "Optional[str]"
                ],
                "quoteCurrency": [
                    "str",
                    "int",
                    "cash.Currency",
                    "Union[str,int]"
                ],
                "exchange": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Forex.quoteCurrency": {
            "name": "quoteCurrency",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/position.py": {
        "Position.quantizeQuantity": {
            "name": "quantizeQuantity",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "decimal.Decimal",
                    "complex",
                    "bytes",
                    "bool"
                ],
                "quantity": [
                    "Type",
                    "int",
                    "decimal.Decimal",
                    "complex",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Position.averagePrice": {
            "name": "averagePrice",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__post_init__": {
            "name": "__post_init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__add__": {
            "name": "__add__",
            "location": 47,
            "return": [
                "Union[(Position, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Position.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/quote.py": {
        "_allEqual": {
            "name": "_allEqual",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Iterator",
                    "bool"
                ]
            }
        },
        "Quote.__post_init__": {
            "name": "__post_init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quote.midpoint": {
            "name": "midpoint",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quote.market": {
            "name": "market",
            "location": 51,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/__init__.py": {},
    "bankroll-model-master/tests/helpers.py": {
        "optionals": {
            "name": "optionals",
            "location": 52,
            "return": [
                "bool",
                "Optional[str]",
                "Union[int, None]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "inner": [
                    "str",
                    "List",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "List[Callable]"
                ]
            }
        },
        "cashAmounts": {
            "name": "cashAmounts",
            "location": 56,
            "return": [
                "int",
                "bool",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal",
                    "Decimal"
                ],
                "max_value": [
                    "decimal.Decimal",
                    "Decimal"
                ]
            }
        },
        "positionQuantities": {
            "name": "positionQuantities",
            "location": 65,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "min_value": [
                    "Decimal",
                    "decimal.Decimal",
                    "Optional[Tuple[int,...]]",
                    "Optional[Sequence[Any]]",
                    "Optional[int]"
                ],
                "max_value": [
                    "Decimal",
                    "decimal.Decimal",
                    "Optional[Tuple[int,...]]",
                    "Optional[Sequence[Any]]",
                    "Optional[int]"
                ],
                "allow_zero": [
                    "bool",
                    "float",
                    "Set"
                ]
            }
        },
        "multipliers": {
            "name": "multipliers",
            "location": 80,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "float",
                "str"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal",
                    "Decimal"
                ],
                "max_value": [
                    "decimal.Decimal",
                    "Decimal"
                ]
            }
        },
        "strikes": {
            "name": "strikes",
            "location": 88,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "min_value": [
                    "Decimal",
                    "decimal.Decimal",
                    "List",
                    "str",
                    "Callable"
                ],
                "max_value": [
                    "Decimal",
                    "decimal.Decimal",
                    "List",
                    "str",
                    "Callable"
                ]
            }
        },
        "cash": {
            "name": "cash",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "currency": [
                    "int",
                    "Callable",
                    "str"
                ],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "exchanges": {
            "name": "exchanges",
            "location": 103,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "bonds": {
            "name": "bonds",
            "location": 107,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "symbol": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "exchange": [
                    "str",
                    "Dict",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]"
                ]
            }
        },
        "stocks": {
            "name": "stocks",
            "location": 115,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Dict",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "exchange": [
                    "str",
                    "Dict",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]"
                ]
            }
        },
        "options": {
            "name": "options",
            "location": 123,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "underlying": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "optionType": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "expiration": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "strike": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "multiplier": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "exchange": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ]
            }
        },
        "futuresOptions": {
            "name": "futuresOptions",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "symbol": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "underlying": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "optionType": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "expiration": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "strike": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "multiplier": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ]
            }
        },
        "futures": {
            "name": "futures",
            "location": 167,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "str"
                ],
                "multiplier": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]"
                ],
                "exchange": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]"
                ]
            }
        },
        "forex": {
            "name": "forex",
            "location": 182,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "baseCurrency": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "bytes",
                    "Mapping"
                ],
                "quoteCurrency": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "bytes",
                    "Mapping"
                ],
                "exchange": [
                    "bytes",
                    "Mapping",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]"
                ]
            }
        },
        "instruments": {
            "name": "instruments",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "currency": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "exchange": [
                    "float",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "str",
                    "Iterable[str]",
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]"
                ]
            }
        },
        "positions": {
            "name": "positions",
            "location": 212,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "instrument": [
                    "int",
                    "Callable",
                    "str"
                ],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ],
                "costBasis": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "dividendPayments": {
            "name": "dividendPayments",
            "location": 222,
            "return": [
                "str",
                "datetime.datetime",
                "Optional[str]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "date": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "stock": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "proceeds": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "trades": {
            "name": "trades",
            "location": 230,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "date": [
                    "Sequence[str]",
                    "str",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime"
                ],
                "instrument": [
                    "Sequence[str]",
                    "str",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime"
                ],
                "quantity": [
                    "Sequence[str]",
                    "str",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime"
                ],
                "amount": [
                    "Sequence[str]",
                    "str",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime"
                ],
                "fees": [
                    "Sequence[str]",
                    "str",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime"
                ],
                "flags": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "activity": {
            "name": "activity",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "quotes": {
            "name": "quotes",
            "location": 253,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "bid": [
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "bool",
                    "str",
                    "list",
                    "dict"
                ],
                "ask": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "str",
                    "List",
                    "Dict"
                ],
                "last": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "str",
                    "List",
                    "Dict"
                ],
                "close": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "str",
                    "List",
                    "Dict"
                ],
                "grow_ask": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "str",
                    "List",
                    "Dict"
                ]
            }
        },
        "uniformCurrencyQuotes": {
            "name": "uniformCurrencyQuotes",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "bid": [
                    "bool",
                    "Tuple[Union[float,float]]",
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "int",
                    "Tuple[float,float]"
                ],
                "ask": [
                    "bool",
                    "Tuple[Union[float,float]]",
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "int",
                    "Tuple[float,float]"
                ],
                "last": [
                    "bool",
                    "Tuple[Union[float,float]]",
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "int",
                    "Tuple[float,float]"
                ],
                "close": [
                    "bool",
                    "Tuple[Union[float,float]]",
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "int",
                    "Tuple[float,float]"
                ],
                "grow_ask": [
                    "bool",
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "int",
                    "Tuple[float,float]"
                ]
            }
        },
        "accountBalances": {
            "name": "accountBalances",
            "location": 290,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "currencies": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "int"
                ],
                "quantities": [
                    "Dict[str,set[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "str",
                    "Dict",
                    "int",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "Dict[str,Set[str]]"
                ]
            }
        },
        "cashUSD": {
            "name": "cashUSD",
            "location": 372,
            "return": [
                "Cash",
                "str",
                "Tuple[Any,Any,Any]"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "str",
                    "decimal.Decimal"
                ]
            }
        },
        "splitAndStripCSVString": {
            "name": "splitAndStripCSVString",
            "location": 376,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "bankroll-model-master/tests/test_converter.py": {
        "TestModelConverter.test_convertTrades": {
            "name": "test_convertTrades",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trades": [
                    "int",
                    "List[dict]"
                ]
            }
        },
        "TestModelConverter.test_convertPositions": {
            "name": "test_convertPositions",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "int",
                    "List[dict]"
                ]
            }
        }
    },
    "bankroll-model-master/tests/test_model.py": {
        "TestCash.test_addCash": {
            "name": "test_addCash",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur": [
                    "Optional[str]",
                    "str",
                    "float",
                    "int",
                    "None",
                    "Optional[float]"
                ],
                "a": [
                    "List",
                    "Callable",
                    "datetime.timedelta"
                ],
                "b": [
                    "List[Q]",
                    "Dict",
                    "List[cirq.Qid]"
                ]
            }
        },
        "TestCash.test_subtractCash": {
            "name": "test_subtractCash",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur": [
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None"
                ],
                "a": [
                    "Tuple[float, float, float]",
                    "Callable",
                    "datetime.timedelta"
                ],
                "b": [
                    "dict",
                    "str",
                    "datetime.datetime",
                    "List['cirq.Qid']"
                ]
            }
        },
        "TestCash.test_addIncompatibleCash": {
            "name": "test_addIncompatibleCash",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "curs": [
                    "bool",
                    "datetime.datetime"
                ],
                "a": [],
                "b": [
                    "float",
                    "str",
                    "List[int]",
                    "List[str]",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "TestCash.test_subtractIncompatibleCash": {
            "name": "test_subtractIncompatibleCash",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "curs": [
                    "Optional[float]",
                    "int",
                    "Union[complex, float, int]"
                ],
                "a": [],
                "b": [
                    "float",
                    "int",
                    "List[int]",
                    "str",
                    "Callable"
                ]
            }
        },
        "TestCash.test_multiplyCash": {
            "name": "test_multiplyCash",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cashA": [
                    "bool",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "b": [
                    "bool",
                    "Dict[str,List]",
                    "int"
                ]
            }
        },
        "TestCash.test_divideCash": {
            "name": "test_divideCash",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cashA": [
                    "bool",
                    "Tuple[float,float,float]"
                ],
                "b": [
                    "bool",
                    "Dict[str,List]",
                    "int"
                ]
            }
        },
        "TestCash.test_cashEqualsSelf": {
            "name": "test_cashEqualsSelf",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cashA": []
            }
        },
        "TestCash.test_cashEquality": {
            "name": "test_cashEquality",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur": [
                    "Optional[int]",
                    "float",
                    "int",
                    "None"
                ],
                "a": [
                    "Optional[int]",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "TestCash.test_cashInequality": {
            "name": "test_cashInequality",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur": [
                    "float",
                    "int",
                    "gluonts.model.common.Tensor"
                ],
                "a": [
                    "float",
                    "int",
                    "gluonts.model.common.Tensor"
                ],
                "b": [
                    "int",
                    "Collection[int]"
                ]
            }
        },
        "TestCash.test_cashComparison": {
            "name": "test_cashComparison",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur": [
                    "float",
                    "int",
                    "gluonts.model.common.Tensor"
                ],
                "a": [
                    "float",
                    "gluonts.model.common.Tensor"
                ],
                "b": [
                    "float"
                ]
            }
        },
        "TestPosition.test_positionEqualsItself": {
            "name": "test_positionEqualsItself",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "TestPosition.test_combineError": {
            "name": "test_combineError",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "b": [
                    "int",
                    "float",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestPosition.test_combineIncreasesBasis": {
            "name": "test_combineIncreasesBasis",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float",
                    "List"
                ]
            }
        },
        "TestPosition.test_combineIsCommutative": {
            "name": "test_combineIsCommutative",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float",
                    "Sequence[str]",
                    "str"
                ],
                "aQty": [
                    "float",
                    "bool"
                ],
                "aPrice": [
                    "List[int]",
                    "int",
                    "float"
                ],
                "bQty": [
                    "int"
                ],
                "bPrice": [
                    "float",
                    "Tuple",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TestPosition.test_combineToZero": {
            "name": "test_combineToZero",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "TestInstrument.test_instrumentEqualsItself": {
            "name": "test_instrumentEqualsItself",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "TestInstrument.test_instrumentHashStable": {
            "name": "test_instrumentHashStable",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Optional[int]"
                ]
            }
        },
        "TestInstrument.test_differentInstrumentTypesNotEqual": {
            "name": "test_differentInstrumentTypesNotEqual",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int",
                    "List[int]",
                    "Set[int]",
                    "List",
                    "Dict"
                ],
                "b": [
                    "str",
                    "int",
                    "List[int]",
                    "Set[int]",
                    "List",
                    "Dict"
                ]
            }
        },
        "TestOption.test_spxSymbol": {
            "name": "test_spxSymbol",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOption.test_lamrSymbol": {
            "name": "test_lamrSymbol",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuote.test_quoteEqualsItself": {
            "name": "test_quoteEqualsItself",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q": []
            }
        },
        "TestQuote.test_quoteEquality": {
            "name": "test_quoteEquality",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "Dict[str,Any]"
                ],
                "bid": [
                    "str",
                    "Dict[str,Any]"
                ],
                "ask": [
                    "str",
                    "Dict[str,Any]"
                ],
                "last": [
                    "bool"
                ],
                "close": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestTrade.test_tradeEqualsItself": {
            "name": "test_tradeEqualsItself",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "TestTrade.test_signOfTradePrice": {
            "name": "test_signOfTradePrice",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "TestAccountBalance.test_zeroEntriesIgnoredForEquality": {
            "name": "test_zeroEntriesIgnoredForEquality",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "List[Tuple[bool,Any]]",
                    "List[tuple[Union[bool,Any]]]"
                ]
            }
        },
        "TestAccountBalance.test_unhashable": {
            "name": "test_unhashable",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "float",
                    "str",
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "bool"
                ]
            }
        },
        "TestAccountBalance.test_additionAndSubtraction": {
            "name": "test_additionAndSubtraction",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "src.core.model.scripScript",
                    "Iterable"
                ],
                "second": [
                    "src.core.model.scripScript",
                    "Iterable"
                ]
            }
        }
    },
    "bankroll-model-master/tests/__init__.py": {}
}
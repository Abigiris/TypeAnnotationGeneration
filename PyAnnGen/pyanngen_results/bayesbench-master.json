{
    "bayesbench-master/stan_api_inference_engine.py": {
        "inference": {
            "name": "inference",
            "location": 2,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ],
                "diagnostics": [
                    "bool",
                    "str"
                ],
                "seed": [
                    "bool",
                    "str"
                ],
                "extra_fitting_args": [
                    "bool",
                    "str"
                ]
            }
        },
        "validate_args": {
            "name": "validate_args",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bayesbench-master/bayesbench/setup.py": {},
    "bayesbench-master/bayesbench/bayesbench/compare_means.py": {
        "compare_means": {
            "name": "compare_means",
            "location": 14,
            "return": [
                "bool",
                "list[typing.Mapping]",
                "Optional[Union[str, Any]]",
                "list[typing.Sequence[str]]",
                "list[typing.MutableMapping]"
            ],
            "arguments": {
                "outputs": [
                    "list[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "posterior_db_location": [
                    "List[Callable]",
                    "None",
                    "bool",
                    "str",
                    "list[typing.Callable[, ]]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ]
            }
        },
        "get_mean": {
            "name": "get_mean",
            "location": 50,
            "return": [
                "dict[, ]",
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "output": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "bayesbench-master/bayesbench/bayesbench/iterate_yaml.py": {},
    "bayesbench-master/bayesbench/bayesbench/main.py": {
        "enumerate_possibilities": {
            "name": "enumerate_possibilities",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "knowledge_base": [
                    "bool",
                    "str",
                    "typing.Iterable[int]",
                    "int",
                    "Iterable[int]"
                ]
            }
        }
    },
    "bayesbench-master/bayesbench/bayesbench/output.py": {
        "RunConfig.to_dict": {
            "name": "to_dict",
            "location": 37,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunConfig.from_dict": {
            "name": "from_dict",
            "location": 41,
            "return": [
                "T",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "dict",
                    "Optional[int]",
                    "dict[, ]"
                ],
                "dct": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "dict",
                    "Optional[int]",
                    "dict[, ]"
                ]
            }
        },
        "RunConfig.from_zip": {
            "name": "from_zip",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Output.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [
                "bool",
                "Dict[str, bool]",
                "dict",
                "int",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.from_dict": {
            "name": "from_dict",
            "location": 76,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "T",
                    "type"
                ],
                "dct": [
                    "int",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "Output.to_zip": {
            "name": "to_zip",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Output.from_zip": {
            "name": "from_zip",
            "location": 113,
            "return": [
                "Dict[str, bool]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Type['Declared']",
                    "typing.Type"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "bayesbench-master/bayesbench/bayesbench/run.py": {
        "run": {
            "name": "run",
            "location": 36,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "apply_run": {
            "name": "apply_run",
            "location": 104,
            "return": [
                "bool",
                "Dict[str, Dict[str, Any]]",
                "list",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "run_data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "run_many": {
            "name": "run_many",
            "location": 108,
            "return": [
                "list[]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "runs": [
                    "dict",
                    "dict[, ]"
                ],
                "parallel": [
                    "dict",
                    "bool"
                ]
            }
        },
        "result_to_output": {
            "name": "result_to_output",
            "location": 123,
            "return": [
                "Output",
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "get_hash": {
            "name": "get_hash",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "to_hash": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "save_output": {
            "name": "save_output",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "NumpyEncoder.default": {
            "name": "default",
            "location": 155,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "bayesbench-master/bayesbench/bayesbench/sbc.py": {},
    "bayesbench-master/bayesbench/bayesbench/__init__.py": {},
    "bayesbench-master/bayesbench_pymc3/__init__.py": {
        "nuts": {
            "name": "nuts",
            "location": 36,
            "return": [
                "typing.Tuple[bayesbench.Samples, typing.Mapping[builtins.str, typing.Any], typing.Mapping[builtins.str, typing.Any]]",
                "None"
            ],
            "arguments": {}
        },
        "generate_prior_predictive": {
            "name": "generate_prior_predictive",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "get_model_path": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_model": {
            "name": "get_model",
            "location": 76,
            "return": [
                "str",
                "bytes",
                "IO",
                "list[]",
                "Union[int, float, complex]",
                "tuple[str]",
                "list[list[str]]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "bayesbench-master/bayesbench_stan/setup.py": {},
    "bayesbench-master/bayesbench_stan/bayesbench_stan/stan_utility.py": {
        "check_div": {
            "name": "check_div",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fit": []
            }
        },
        "check_treedepth": {
            "name": "check_treedepth",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fit": [],
                "max_depth": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "check_energy": {
            "name": "check_energy",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fit": []
            }
        },
        "check_n_eff": {
            "name": "check_n_eff",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fit": [
                    "numpy.array",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "check_rhat": {
            "name": "check_rhat",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_all_diagnostics": {
            "name": "check_all_diagnostics",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fit": [
                    "bytes",
                    "int",
                    "str",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "_by_chain": {
            "name": "_by_chain",
            "location": 105,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "unpermuted_extraction": [
                    "int",
                    "list",
                    "bytes",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "_shaped_ordered_params": {
            "name": "_shaped_ordered_params",
            "location": 114,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fit": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "partition_div": {
            "name": "partition_div",
            "location": 131,
            "return": [
                "tuple[typing.Union[dict[str, str],int,list[],dict[, ],set[],dict[str, list[str]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fit": [
                    "str"
                ]
            }
        },
        "compile_model": {
            "name": "compile_model",
            "location": 141,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "model_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[None, List[str]]",
                    "list[str]",
                    "Callable[[Any], bool]",
                    "typing.Callable[typing.Any, bool]"
                ]
            }
        }
    },
    "bayesbench-master/bayesbench_stan/bayesbench_stan/__init__.py": {
        "nuts": {
            "name": "nuts",
            "location": 26,
            "return": [
                "tuple[typing.Union[str,list[str],None]]",
                "float",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {}
        },
        "vb": {
            "name": "vb",
            "location": 54,
            "return": [
                "tuple[typing.Union[dict[, ],str,None,list[str]]]",
                "str",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {}
        },
        "generate_prior_predictive": {
            "name": "generate_prior_predictive",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "get_model_path": [
                    "str"
                ]
            }
        },
        "get_generative_model": {
            "name": "get_generative_model",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "Optional[str]"
                ],
                "get_model_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_compiled_model": {
            "name": "get_compiled_model",
            "location": 120,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "get_model_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_custom_inference_method": {
            "name": "create_custom_inference_method",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "str"
                ],
                "dataset": [
                    "bool",
                    "str"
                ],
                "other_args": [
                    "bool",
                    "str"
                ]
            }
        },
        "transform_samples": {
            "name": "transform_samples",
            "location": 144,
            "return": [
                "dict[, ]",
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "samples": [
                    "dict",
                    "str",
                    "Dict[str, float]",
                    "float",
                    "Dict[str, numpy.ndarray]"
                ]
            }
        }
    },
    "bayesbench-master/examples/8_schools_simple/gen_yaml.py": {},
    "bayesbench-master/examples/8_schools_simple/run_nuts.py": {},
    "bayesbench-master/examples/8_schools_simple/run_with_config.py": {},
    "bayesbench-master/examples/8_schools_simple/simple_run.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bayesbench-master/examples/8_schools_simple/view.py": {},
    "bayesbench-master/examples/parallel/generate_arguments.py": {},
    "bayesbench-master/examples/parallel/run.py": {},
    "bayesbench-master/examples/parallel/view.py": {},
    "bayesbench-master/examples/radon/config_run.py": {},
    "bayesbench-master/examples/radon/gen_yaml.py": {},
    "bayesbench-master/examples/radon/simple_run.py": {},
    "bayesbench-master/examples/where_a_method_works_well_enough/generate_arguments.py": {},
    "bayesbench-master/examples/where_a_method_works_well_enough/view.py": {},
    "bayesbench-master/experiments/compare.py": {
        "recursive_defaultdict": {
            "name": "recursive_defaultdict",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "defaultdict_to_dict": {
            "name": "defaultdict_to_dict",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bytes",
                "Mapping[str, Any]",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "Callable",
                    "dict",
                    "Sequence[str]",
                    "Iterator[None]"
                ]
            }
        },
        "compare": {
            "name": "compare",
            "location": 15,
            "return": [
                "bytes",
                "Dict[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "posterior_outputs": [
                    "str",
                    "int"
                ],
                "gold_standards": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "comparisons": [
                    "dict[bytes, bytes]",
                    "Dict[bytes, bytes]",
                    "dict[, ]",
                    "dict",
                    "dict[str, int]",
                    "dict[str, list[str]]",
                    "Dict[str, int]",
                    "Dict[str, List[str]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "make_matrixes": {
            "name": "make_matrixes",
            "location": 49,
            "return": [
                "tuple[list[]]",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "output": [
                    "str"
                ],
                "gold_standard": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bayesbench-master/experiments/constants.py": {},
    "bayesbench-master/experiments/create_gold_standards.py": {
        "create_run": {
            "name": "create_run",
            "location": 19,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[],dict[, ]]]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "posterior_name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bayesbench-master/experiments/create_vi.py": {
        "create_run": {
            "name": "create_run",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Union[str,bool,list[]]]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "posterior_name": [
                    "str",
                    "bool"
                ],
                "method_name": [
                    "str",
                    "bool"
                ],
                "method_specific_arguments": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bayesbench-master/experiments/posteriors.py": {},
    "bayesbench-master/experiments/try_8schools.py": {
        "diagnostics_good": {
            "name": "diagnostics_good",
            "location": 23,
            "return": [
                "bool",
                "Tuple[int, int]",
                "bytes",
                "str",
                "Tuple[pandas.DataFrame, pandas.DataFrame]",
                "int",
                "dict"
            ],
            "arguments": {
                "output": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "get_gold_standard_names": {
            "name": "get_gold_standard_names",
            "location": 29,
            "return": [
                "set[list[]]",
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "get_all": {
            "name": "get_all",
            "location": 44,
            "return": [
                "tuple[dict[list[], str]]",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "get_8_schools": {
            "name": "get_8_schools",
            "location": 67,
            "return": [
                "tuple[typing.Union[str,dict[, ],list[str],bool]]",
                "str",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "get_output": {
            "name": "get_output",
            "location": 87,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "scipy_wrapper": {
            "name": "scipy_wrapper",
            "location": 94,
            "return": [
                "str",
                "list[]",
                "tuple[typing.Union[int,tuple[typing.Union[typing.Literal,typing.Literal]],str,float,np_@_ndarray,bytes]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "str",
                    "Tuple[float, float, float, float]",
                    "numpy.ndarray",
                    "Union[int, bool]"
                ],
                "y": [
                    "float",
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "str",
                    "Tuple[float, float, float, float]",
                    "numpy.ndarray",
                    "Union[int, bool]"
                ],
                "f": [
                    "float",
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "str",
                    "Tuple[float, float, float, float]",
                    "numpy.ndarray",
                    "Union[int, bool]"
                ]
            }
        },
        "try_stuff": {
            "name": "try_stuff",
            "location": 115,
            "return": [
                "list[]",
                "str",
                "List[str]",
                "int",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {}
        },
        "to_dataframe": {
            "name": "to_dataframe",
            "location": 130,
            "return": [
                "dict[, ]",
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "frames_to_html": {
            "name": "frames_to_html",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "scipy_wrapper.format_s_p": {
            "name": "format_s_p",
            "location": 95,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "p": [
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "bayesbench-master/experiments/view_gold_standard_diagnostics.py": {},
    "bayesbench-master/experiments/__init__.py": {},
    "bayesbench-master/misc/convert_pdb_to_new_mans.py": {
        "get_file_name": {
            "name": "get_file_name",
            "location": 11,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[]",
                    "typing.IO",
                    "list",
                    "IO[bytes]",
                    "pathlib.PurePath",
                    "pathlib.Path"
                ]
            }
        },
        "get_old_info": {
            "name": "get_old_info",
            "location": 18,
            "return": [
                "dict[, ]",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "old_info_path": [
                    "str"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 25,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[typing.Literal,dict[str, typing.Union[None,bool,str]],dict[str, None]]],dict[typing.Text, typing.Union[tuple[typing.Union[typing.Any,typing.Any,typing.Any]],str,int]],str]]",
                "bool",
                "dict",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "posterior_info": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_convert": {
            "name": "test_convert",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_new_files": {
            "name": "get_new_files",
            "location": 96,
            "return": [
                "tuple[typing.Union[dict[, ],list[]]]",
                "str",
                "Optional[str]",
                "pathlib.Path",
                "bytes"
            ],
            "arguments": {}
        },
        "maybe_delete": {
            "name": "maybe_delete",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_new_files": {
            "name": "write_new_files",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_extensions": {
            "name": "test_multiple_extensions",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bayesbench-master/misc/convert_to_mine.py": {
        "get_file_name": {
            "name": "get_file_name",
            "location": 13,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[]",
                    "typing.IO",
                    "list",
                    "IO[bytes]",
                    "pathlib.PurePath",
                    "pathlib.Path"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 21,
            "return": [
                "str",
                "tuple[typing.Union[str,dict[typing.Text, typing.Union[str,None,dict[str, str],list[]]]]]"
            ],
            "arguments": {
                "posterior_info": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Set[str]"
                ],
                "posterior_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_convert": {
            "name": "test_convert",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_new_files": {
            "name": "get_new_files",
            "location": 65,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[str, str],dict[, ],list[]]]",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {}
        },
        "write_new_files": {
            "name": "write_new_files",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_extensions": {
            "name": "test_multiple_extensions",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bayesbench-master/misc/rename_model_paths.py": {
        "rewrite_path": {
            "name": "rewrite_path",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "replace_function": [
                    "str",
                    "bool",
                    "bytes",
                    "typing.Iterable[\"Issue\"]",
                    "Iterable[\"Issue\"]",
                    "Tuple[int, int]",
                    "None",
                    "typing.TextIO",
                    "Optional[dict]",
                    "TextIO"
                ]
            }
        },
        "replace_model": {
            "name": "replace_model",
            "location": 27,
            "return": [
                "Optional[str]",
                "dict",
                "Mapping"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "replace_data": {
            "name": "replace_data",
            "location": 37,
            "return": [
                "Callable",
                "bytes",
                "OrderedDict"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    }
}
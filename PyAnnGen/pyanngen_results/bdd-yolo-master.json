{
    "bdd-yolo-master/darknet_test.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bdd-yolo-master/dataset_prep.py": {
        "dataset_preparation": {
            "name": "dataset_preparation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bdd-yolo-master/dataset_test.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bdd-yolo-master/bdd/consts.py": {},
    "bdd-yolo-master/bdd/dataset.py": {
        "BDDDataset.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listfile": [
                    "str"
                ],
                "img_path": [
                    "str"
                ],
                "lbl_path": [
                    "str"
                ],
                "ext": [
                    "str"
                ],
                "transform": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "BDDDataset.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BDDDataset.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BDDDataset.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BDDDataset.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "BDDDataset.collate_fn": {
            "name": "collate_fn",
            "location": 60,
            "return": [
                "Tuple[(Any, list, list)]"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "Callable[[None], \"Expr\"]"
                ],
                "items": [
                    "List[Tuple[(Any, Any, Any)]]"
                ]
            }
        }
    },
    "bdd-yolo-master/bdd/utils.py": {
        "delete_unlabelled_images": {
            "name": "delete_unlabelled_images",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "img_path": [
                    "str"
                ],
                "info_path": [
                    "str"
                ]
            }
        },
        "create_labels": {
            "name": "create_labels",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "info_path": [
                    "str"
                ],
                "labels_path": [
                    "str"
                ]
            }
        },
        "create_list_file": {
            "name": "create_list_file",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "images_path": [
                    "str"
                ],
                "listfile": [
                    "str"
                ]
            }
        },
        "resize_img_dir": {
            "name": "resize_img_dir",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str"
                ]
            }
        },
        "colors_generator": {
            "name": "colors_generator",
            "location": 78,
            "return": [
                "generator"
            ],
            "arguments": {}
        },
        "draw_outline": {
            "name": "draw_outline",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "patch": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "lw": [
                    "int"
                ]
            }
        },
        "show_img": {
            "name": "show_img",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "None",
                    "Optional[str]",
                    "list[list[str]]",
                    "torch.Tensor",
                    "list[int]",
                    "List[List[str]]",
                    "list[str]",
                    "List[int]",
                    "List[str]"
                ],
                "labels": [
                    "int",
                    "Union[int, float]",
                    "tuple"
                ],
                "bboxes": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "torch.LongTensor"
                ],
                "img_size": [
                    "Tuple[(int, int)]"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/consts.py": {},
    "bdd-yolo-master/yolo/darknet.py": {
        "DarknetLayer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "Darknet"
                ],
                "index": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ]
            }
        },
        "DarknetLayer.forward": {
            "name": "forward",
            "location": 21,
            "return": [
                "torch.Tensor",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "DarknetLayer.load_weights": {
            "name": "load_weights",
            "location": 24,
            "return": [
                "str",
                "bool",
                "list[]",
                "typing.IO"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "Darknet.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "subdivisions": [
                    "int"
                ],
                "max_batches": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "channels": [
                    "int"
                ],
                "lr": [
                    "float"
                ],
                "burn_in": [
                    "int"
                ],
                "steps": [
                    "List[Tuple[(int, float)]]"
                ],
                "momentum": [
                    "float"
                ],
                "decay": [
                    "float"
                ],
                "angle": [
                    "float"
                ],
                "saturation": [
                    "float"
                ],
                "exposure": [
                    "float"
                ],
                "hue": [
                    "float"
                ]
            }
        },
        "Darknet.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Darknet.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Darknet.load_weights": {
            "name": "load_weights",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "weights_file": [
                    "str"
                ]
            }
        },
        "Darknet.forward": {
            "name": "forward",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "int",
                    "list[]",
                    "float",
                    "Union[int, str]",
                    "str"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/parsers.py": {
        "get_parsers": {
            "name": "get_parsers",
            "location": 17,
            "return": [
                "Dict[(str, Callable)]"
            ],
            "arguments": {}
        },
        "get_activation": {
            "name": "get_activation",
            "location": 26,
            "return": [
                "None",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get_last_layer_out_channels": {
            "name": "get_last_layer_out_channels",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "net": [
                    "yolo.darknet.Darknet"
                ]
            }
        },
        "parse_net": {
            "name": "parse_net",
            "location": 38,
            "return": [
                "yolo.darknet.Darknet"
            ],
            "arguments": {
                "layer": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "parse_convolutional": {
            "name": "parse_convolutional",
            "location": 52,
            "return": [
                "yolo.layers.conv.Conv"
            ],
            "arguments": {
                "layer": [
                    "Dict[(str, str)]"
                ],
                "net": [
                    "yolo.darknet.Darknet"
                ]
            }
        },
        "parse_upsample": {
            "name": "parse_upsample",
            "location": 67,
            "return": [
                "yolo.layers.upsample.Upsample"
            ],
            "arguments": {
                "layer": [
                    "Dict[(str, str)]"
                ],
                "net": [
                    "yolo.darknet.Darknet"
                ]
            }
        },
        "parse_shortcut": {
            "name": "parse_shortcut",
            "location": 74,
            "return": [
                "yolo.layers.shortcut.Shortcut"
            ],
            "arguments": {
                "layer": [
                    "Dict[(str, str)]"
                ],
                "net": [
                    "yolo.darknet.Darknet"
                ]
            }
        },
        "parse_route": {
            "name": "parse_route",
            "location": 83,
            "return": [
                "yolo.layers.route.Route"
            ],
            "arguments": {
                "layer": [
                    "Dict[(str, str)]"
                ],
                "net": [
                    "yolo.darknet.Darknet"
                ]
            }
        },
        "parse_yolo": {
            "name": "parse_yolo",
            "location": 93,
            "return": [
                "yolo.layers.detector.Detector"
            ],
            "arguments": {
                "layer": [
                    "Dict[(str, str)]"
                ],
                "net": [
                    "yolo.darknet.Darknet"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/utils.py": {
        "read_cfg": {
            "name": "read_cfg",
            "location": 14,
            "return": [
                "list[typing.Union[dict[str, str],None,typing.Iterator]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "parse_layers": {
            "name": "parse_layers",
            "location": 35,
            "return": [
                "int",
                "list[str]",
                "str",
                "Callable",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "tuple[typing.Union[str,str,str]]"
            ],
            "arguments": {
                "layers": [
                    "str",
                    "int"
                ]
            }
        },
        "bbox_iou": {
            "name": "bbox_iou",
            "location": 47,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "list[str]",
                    "torch.Tensor",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List[str]]",
                    "List[Tuple[str, str]]"
                ],
                "b": [
                    "list[str]",
                    "torch.Tensor",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List[str]]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "nms_filter": {
            "name": "nms_filter",
            "location": 69,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "p": [
                    "int",
                    "bytes",
                    "float"
                ],
                "nms_thresh": [
                    "float",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "process_predictions": {
            "name": "process_predictions",
            "location": 80,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "predictions": [
                    "bool",
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "thresh": [
                    "int",
                    "str",
                    "Callable"
                ],
                "nms_thresh": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/layers/conv.py": {
        "Conv.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "yolo.darknet.Darknet"
                ],
                "index": [
                    "int"
                ],
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "stride": [
                    "int"
                ],
                "padding": [
                    "int"
                ],
                "activ": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "batch_norm": [
                    "bool"
                ]
            }
        },
        "Conv.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conv.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conv.load_weights": {
            "name": "load_weights",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "bool"
                ]
            }
        },
        "Conv.forward": {
            "name": "forward",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "tensorflow.Tensor"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/layers/detector.py": {
        "Detector.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "yolo.darknet.Darknet"
                ],
                "index": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "num_classes": [
                    "int"
                ],
                "anchors": [
                    "List[Tuple[(int, int)]]"
                ],
                "jitter": [
                    "float"
                ],
                "ignore_thresh": [
                    "float"
                ],
                "truth_thresh": [
                    "float"
                ],
                "random": [
                    "bool"
                ]
            }
        },
        "Detector.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.forward": {
            "name": "forward",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "gluonts.model.common.Tensor"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/layers/route.py": {
        "Route.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "yolo.darknet.Darknet"
                ],
                "index": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "indexes": [
                    "List[int]"
                ]
            }
        },
        "Route.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Route.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Route.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/layers/shortcut.py": {
        "Shortcut.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "yolo.darknet.Darknet"
                ],
                "index": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "from_": [
                    "int"
                ]
            }
        },
        "Shortcut.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "SupportsInt",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "bdd-yolo-master/yolo/layers/upsample.py": {
        "Upsample.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "yolo.darknet.Darknet"
                ],
                "index": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "scale_factor": [
                    "int"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "Upsample.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upsample.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upsample.forward": {
            "name": "forward",
            "location": 28,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    }
}
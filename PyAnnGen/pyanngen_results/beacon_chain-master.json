{
    "beacon_chain-master/hash_ssz.py": {
        "hash": {
            "name": "hash",
            "location": 4,
            "return": [
                "bytes"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "next_power_of_2": {
            "name": "next_power_of_2",
            "location": 9,
            "return": [
                "int",
                "tuple",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "extend_to_power_of_2": {
            "name": "extend_to_power_of_2",
            "location": 12,
            "return": [
                "int",
                "bool",
                "bytes",
                "bytearray",
                "str",
                "Union[str, bytes]",
                "List[float]"
            ],
            "arguments": {
                "bytez": [
                    "list",
                    "str",
                    "List[List[Any]]",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "merkle_hash": {
            "name": "merkle_hash",
            "location": 15,
            "return": [
                "bytes"
            ],
            "arguments": {
                "lst": [
                    "list",
                    "List[tuple]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "hash_ssz": {
            "name": "hash_ssz",
            "location": 32,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "val": [
                    "Optional[Tuple[int, int]]",
                    "Union[Iterable[int], int]",
                    "Callable"
                ],
                "typ": [
                    "Union[Iterable[int], int]",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "List[\"Block\"]"
                ]
            }
        },
        "hash_validator_record": {
            "name": "hash_validator_record",
            "location": 64,
            "return": [
                "bytes"
            ],
            "arguments": {
                "val": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ]
            }
        },
        "hash_shard_and_committee": {
            "name": "hash_shard_and_committee",
            "location": 69,
            "return": [
                "bytes"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        }
    },
    "beacon_chain-master/setup.py": {},
    "beacon_chain-master/time_test.py": {
        "hash": {
            "name": "hash",
            "location": 7,
            "return": [
                "bytes"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "make_crystallized_state": {
            "name": "make_crystallized_state",
            "location": 14,
            "return": [
                "cs.CrystallizedState"
            ],
            "arguments": {
                "valcount": [
                    "int",
                    "django.db.migrations.state.StateApps",
                    "List[int]"
                ]
            }
        },
        "time_test": {
            "name": "time_test",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "valcount": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "encoded_length": {
            "name": "encoded_length",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "valcount": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "hash_time_test": {
            "name": "hash_time_test",
            "location": 41,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "valcount": [
                    "bool"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/__init__.py": {},
    "beacon_chain-master/beacon_chain/beacon_typing/custom.py": {},
    "beacon_chain-master/beacon_chain/beacon_typing/__init__.py": {},
    "beacon_chain-master/beacon_chain/state/active_state.py": {
        "ActiveState.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveState.__setattr__": {
            "name": "__setattr__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "ActiveState.__getattribute__": {
            "name": "__getattribute__",
            "location": 45,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ActiveState.num_pending_attestations": {
            "name": "num_pending_attestations",
            "location": 49,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveState.num_recent_block_hashes": {
            "name": "num_recent_block_hashes",
            "location": 53,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/attestation_record.py": {
        "AttestationRecord.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttestationRecord.__setattr__": {
            "name": "__setattr__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "AttestationRecord.__getattribute__": {
            "name": "__getattribute__",
            "location": 41,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/block.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.__setattr__": {
            "name": "__setattr__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Block.__getattribute__": {
            "name": "__getattribute__",
            "location": 54,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Block.hash": {
            "name": "hash",
            "location": 58,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.num_attestations": {
            "name": "num_attestations",
            "location": 62,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/chain.py": {
        "Chain.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "beacon_chain.state.block.Block"
                ],
                "blocks": [
                    "List[beacon_chain.state.block.Block]"
                ]
            }
        },
        "Chain.__contains__": {
            "name": "__contains__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "beacon_chain.state.block.Block"
                ]
            }
        },
        "Chain.get_block_by_slot_number": {
            "name": "get_block_by_slot_number",
            "location": 45,
            "return": [
                "beacon_chain.state.block.Block"
            ],
            "arguments": {
                "self": [],
                "slot_number": [
                    "int"
                ]
            }
        },
        "Chain.get_block_by_hash": {
            "name": "get_block_by_hash",
            "location": 48,
            "return": [
                "beacon_chain.state.block.Block"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "bytes"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/config.py": {
        "generate_config": {
            "name": "generate_config",
            "location": 21,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "beacon_chain-master/beacon_chain/state/constants.py": {},
    "beacon_chain-master/beacon_chain/state/crosslink_record.py": {
        "CrosslinkRecord.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrosslinkRecord.__setattr__": {
            "name": "__setattr__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "CrosslinkRecord.__getattribute__": {
            "name": "__getattribute__",
            "location": 30,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/crystallized_state.py": {
        "CrystallizedState.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrystallizedState.__setattr__": {
            "name": "__setattr__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "CrystallizedState.__getattribute__": {
            "name": "__getattribute__",
            "location": 60,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CrystallizedState.active_validator_indices": {
            "name": "active_validator_indices",
            "location": 64,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrystallizedState.total_deposits": {
            "name": "total_deposits",
            "location": 71,
            "return": [
                "bool",
                "float",
                "bytearray",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrystallizedState.num_validators": {
            "name": "num_validators",
            "location": 80,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrystallizedState.num_crosslink_records": {
            "name": "num_crosslink_records",
            "location": 84,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/genesis_helpers.py": {
        "get_genesis_active_state": {
            "name": "get_genesis_active_state",
            "location": 29,
            "return": [
                "beacon_chain.state.active_state.ActiveState"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_genesis_crystallized_state": {
            "name": "get_genesis_crystallized_state",
            "location": 39,
            "return": [
                "beacon_chain.state.crystallized_state.CrystallizedState"
            ],
            "arguments": {
                "validators": [
                    "List[beacon_chain.state.validator_record.ValidatorRecord]"
                ],
                "init_shuffling_seed": [
                    "beacon_chain.beacon_typing.custom.Hash32"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_genesis_block": {
            "name": "get_genesis_block",
            "location": 75,
            "return": [
                "beacon_chain.state.block.Block"
            ],
            "arguments": {
                "active_state_root": [
                    "beacon_chain.beacon_typing.custom.Hash32"
                ],
                "crystallized_state_root": [
                    "beacon_chain.beacon_typing.custom.Hash32"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/helpers.py": {
        "is_power_of_two": {
            "name": "is_power_of_two",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        },
        "int_sqrt": {
            "name": "int_sqrt",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "get_hashes_to_sign": {
            "name": "get_hashes_to_sign",
            "location": 52,
            "return": [
                "List[beacon_chain.beacon_typing.custom.Hash32]"
            ],
            "arguments": {
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_signed_parent_hashes": {
            "name": "get_signed_parent_hashes",
            "location": 70,
            "return": [
                "List[beacon_chain.beacon_typing.custom.Hash32]"
            ],
            "arguments": {
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "attestation": [
                    "int",
                    "typing.Callable[, ]",
                    "raiden.transfer.state.BalanceProofSignedState",
                    "Callable"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_hashes_from_active_state": {
            "name": "get_hashes_from_active_state",
            "location": 86,
            "return": [
                "List[beacon_chain.beacon_typing.custom.Hash32]"
            ],
            "arguments": {
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "from_slot": [
                    "int"
                ],
                "to_slot": [
                    "int"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_attestation_indices": {
            "name": "get_attestation_indices",
            "location": 104,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "attestation": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "bool",
                    "Union[bool, int, str]",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_new_recent_block_hashes": {
            "name": "get_new_recent_block_hashes",
            "location": 127,
            "return": [
                "List[beacon_chain.beacon_typing.custom.Hash32]"
            ],
            "arguments": {
                "old_block_hashes": [
                    "List[beacon_chain.beacon_typing.custom.Hash32]"
                ],
                "parent_slot": [
                    "int"
                ],
                "current_slot": [
                    "int"
                ],
                "parent_hash": [
                    "beacon_chain.beacon_typing.custom.Hash32"
                ]
            }
        },
        "get_active_validator_indices": {
            "name": "get_active_validator_indices",
            "location": 135,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "dynasty": [
                    "int"
                ],
                "validators": [
                    "List[beacon_chain.state.validator_record.ValidatorRecord]"
                ]
            }
        },
        "shuffle": {
            "name": "shuffle",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "lst": [
                    "list"
                ],
                "seed": [
                    "beacon_chain.beacon_typing.custom.Hash32"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 167,
            "return": [
                "list"
            ],
            "arguments": {
                "lst": [
                    "list"
                ],
                "N": [
                    "int"
                ]
            }
        },
        "get_new_shuffling": {
            "name": "get_new_shuffling",
            "location": 174,
            "return": [
                "List[List[beacon_chain.state.shard_and_committee.ShardAndCommittee]]"
            ],
            "arguments": {
                "seed": [
                    "beacon_chain.beacon_typing.custom.Hash32"
                ],
                "validators": [
                    "List[beacon_chain.state.validator_record.ValidatorRecord]"
                ],
                "dynasty": [
                    "int"
                ],
                "crosslinking_start_shard": [
                    "beacon_chain.beacon_typing.custom.ShardId"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_shards_and_committees_for_slot": {
            "name": "get_shards_and_committees_for_slot",
            "location": 208,
            "return": [
                "List[beacon_chain.state.shard_and_committee.ShardAndCommittee]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "slot": [
                    "int"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_block_hash": {
            "name": "get_block_hash",
            "location": 219,
            "return": [
                "beacon_chain.beacon_typing.custom.Hash32"
            ],
            "arguments": {
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "current_block": [
                    "beacon_chain.state.block.Block"
                ],
                "slot": [
                    "int"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_proposer_position": {
            "name": "get_proposer_position",
            "location": 231,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/shard_and_committee.py": {
        "ShardAndCommittee.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardAndCommittee.__setattr__": {
            "name": "__setattr__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "ShardAndCommittee.__getattribute__": {
            "name": "__getattribute__",
            "location": 28,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/state_transition.py": {
        "validate_block_pre_processing_conditions": {
            "name": "validate_block_pre_processing_conditions",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "validate_parent_block_proposer": {
            "name": "validate_parent_block_proposer",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "validate_attestation": {
            "name": "validate_attestation",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "attestation": [],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_updated_block_vote_cache": {
            "name": "get_updated_block_vote_cache",
            "location": 219,
            "return": [
                "Dict[(str, Dict[(str, Union[(bytes, int, str)])])]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "attestation": [
                    "dict[str, typing.Any]",
                    "CrystallizedState",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict",
                    "raiden.utils.Address"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "block_vote_cache": [
                    "Dict[(str, Dict[(str, Union[(bytes, int, str)])])]"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "process_block": {
            "name": "process_block",
            "location": 258,
            "return": [
                "beacon_chain.state.active_state.ActiveState"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "process_updated_crosslinks": {
            "name": "process_updated_crosslinks",
            "location": 298,
            "return": [
                "List[beacon_chain.state.crosslink_record.CrosslinkRecord]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "initialize_new_cycle": {
            "name": "initialize_new_cycle",
            "location": 340,
            "return": [
                "Tuple[(beacon_chain.state.crystallized_state.CrystallizedState, beacon_chain.state.active_state.ActiveState)]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "fill_recent_block_hashes": {
            "name": "fill_recent_block_hashes",
            "location": 424,
            "return": [
                "beacon_chain.state.active_state.ActiveState"
            ],
            "arguments": {
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ]
            }
        },
        "get_reward_context": {
            "name": "get_reward_context",
            "location": 440,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "total_deposits": [
                    "int"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "calculate_ffg_rewards": {
            "name": "calculate_ffg_rewards",
            "location": 456,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "calculate_crosslink_rewards": {
            "name": "calculate_crosslink_rewards",
            "location": 517,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "apply_rewards_and_penalties": {
            "name": "apply_rewards_and_penalties",
            "location": 598,
            "return": [
                "List[beacon_chain.state.validator_record.ValidatorRecord]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ready_for_dynasty_transition": {
            "name": "ready_for_dynasty_transition",
            "location": 637,
            "return": [
                "bool"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "compute_dynasty_transition": {
            "name": "compute_dynasty_transition",
            "location": 662,
            "return": [
                "beacon_chain.state.crystallized_state.CrystallizedState"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "compute_cycle_transitions": {
            "name": "compute_cycle_transitions",
            "location": 686,
            "return": [
                "Tuple[(beacon_chain.state.crystallized_state.CrystallizedState, beacon_chain.state.active_state.ActiveState)]"
            ],
            "arguments": {
                "crystallized_state": [
                    "beacon_chain.state.crystallized_state.CrystallizedState"
                ],
                "active_state": [
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "compute_state_transition": {
            "name": "compute_state_transition",
            "location": 709,
            "return": [
                "Tuple[(beacon_chain.state.crystallized_state.CrystallizedState, beacon_chain.state.active_state.ActiveState)]"
            ],
            "arguments": {
                "parent_state": [
                    "Tuple[(beacon_chain.state.crystallized_state.CrystallizedState, beacon_chain.state.active_state.ActiveState)]"
                ],
                "parent_block": [
                    "beacon_chain.state.block.Block"
                ],
                "block": [
                    "beacon_chain.state.block.Block"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/validator_record.py": {
        "ValidatorRecord.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorRecord.__setattr__": {
            "name": "__setattr__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "ValidatorRecord.__getattribute__": {
            "name": "__getattribute__",
            "location": 43,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/state/__init__.py": {},
    "beacon_chain-master/beacon_chain/utils/bitfield.py": {
        "has_voted": {
            "name": "has_voted",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "bitfield": [
                    "str",
                    "int"
                ],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "set_voted": {
            "name": "set_voted",
            "location": 5,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "bitfield": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]",
                    "dict",
                    "Protocol"
                ],
                "index": [
                    "Optional[Collection[int]]",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_bitfield_length": {
            "name": "get_bitfield_length",
            "location": 12,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "bit_count": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_empty_bitfield": {
            "name": "get_empty_bitfield",
            "location": 17,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bit_count": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_vote_count": {
            "name": "get_vote_count",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "bitfield": [
                    "str",
                    "bool",
                    "list",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "or_bitfields": {
            "name": "or_bitfields",
            "location": 29,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bitfields": [
                    "str",
                    "Sequence[T]",
                    "list[str]",
                    "list[int]",
                    "list[]",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/utils/blake.py": {
        "blake": {
            "name": "blake",
            "location": 7,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/utils/bls.py": {
        "compress_G1": {
            "name": "compress_G1",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pt": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "decompress_G1": {
            "name": "decompress_G1",
            "location": 39,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sqrt_fq2": {
            "name": "sqrt_fq2",
            "location": 51,
            "return": [
                "int",
                "float",
                "Callable",
                "FQ2",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "hash_to_G2": {
            "name": "hash_to_G2",
            "location": 58,
            "return": [
                "Union[str, int, float]",
                "List[int]",
                "str",
                "float"
            ],
            "arguments": {
                "m": []
            }
        },
        "compress_G2": {
            "name": "compress_G2",
            "location": 77,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "pt": [
                    "int",
                    "str",
                    "Dict[str, Tuple[int, int]]",
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "float",
                    "List[int]",
                    "list[int]",
                    "Sequence[Tuple[float, float]]",
                    "typing.Sequence[tuple[typing.Union[float,float]]]"
                ]
            }
        },
        "decompress_G2": {
            "name": "decompress_G2",
            "location": 83,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "p": [
                    "list[]",
                    "tuple[str]",
                    "Dict[str, Tuple[int, int]]",
                    "Iterable[Any]",
                    "list",
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 97,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "m": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "k": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "privtopub": {
            "name": "privtopub",
            "location": 101,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "k": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 105,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "pub": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "sig": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "aggregate_sigs": {
            "name": "aggregate_sigs",
            "location": 113,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "sigs": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "aggregate_pubs": {
            "name": "aggregate_pubs",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pubs": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "beacon_chain-master/beacon_chain/utils/__init__.py": {},
    "beacon_chain-master/contracts/validator_registration.v.py": {
        "deposit": {
            "name": "deposit",
            "location": 18,
            "return": [],
            "arguments": {
                "deposit_input": []
            }
        },
        "get_deposit_root": {
            "name": "get_deposit_root",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "get_branch": {
            "name": "get_branch",
            "location": 51,
            "return": [],
            "arguments": {
                "leaf": []
            }
        }
    },
    "beacon_chain-master/ssz/ssz.py": {
        "serialize": {
            "name": "serialize",
            "location": 4,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "val": [
                    "\"ImageStack\""
                ],
                "typ": [
                    "str",
                    "Union[Iterable[int], int]",
                    "dict",
                    "int"
                ]
            }
        },
        "_deserialize": {
            "name": "_deserialize",
            "location": 33,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Union[str, int, float]"
                ],
                "start": [
                    "int",
                    "Union[str, int, float]"
                ],
                "typ": [
                    "str",
                    "int",
                    "property"
                ]
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 72,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "T",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, str]"
                ],
                "typ": [
                    "str",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "T",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "eq": {
            "name": "eq",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "deepcopy": {
            "name": "deepcopy",
            "location": 91,
            "return": [
                "list[]",
                "Dict[str, Any]",
                "dict[, ]",
                "set[]",
                "str",
                "Type",
                "Dict[str, int]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "x": [
                    "list"
                ]
            }
        },
        "to_dict": {
            "name": "to_dict",
            "location": 107,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        }
    },
    "beacon_chain-master/ssz/__init__.py": {},
    "beacon_chain-master/tests/conftest.py": {
        "privkeys": {
            "name": "privkeys",
            "location": 8,
            "return": [
                "list[int]",
                "bool",
                "int",
                "Dict[str, Dict[str, float]]",
                "Dict[str, Any]",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "keymap": {
            "name": "keymap",
            "location": 13,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "privkeys": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "pubkeys": {
            "name": "pubkeys",
            "location": 23,
            "return": [
                "list[str]",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "keymap": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "beacon_chain-master/tests/__init__.py": {},
    "beacon_chain-master/tests/contracts/conftest.py": {
        "get_dirs": {
            "name": "get_dirs",
            "location": 22,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "registration_code": {
            "name": "registration_code",
            "location": 34,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "tester": {
            "name": "tester",
            "location": 40,
            "return": [
                "EthereumTester",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "a0": {
            "name": "a0",
            "location": 45,
            "return": [
                "bool",
                "Iterable[Any]"
            ],
            "arguments": {
                "tester": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "w3": {
            "name": "w3",
            "location": 50,
            "return": [
                "Web3",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tester": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "registration_contract": {
            "name": "registration_contract",
            "location": 56,
            "return": [
                "int",
                "float",
                "Callable",
                "tuple[]",
                "str",
                "list[]",
                "tuple[typing.Literal]"
            ],
            "arguments": {
                "w3": [
                    "int",
                    "str",
                    "dict[, ]",
                    "dict",
                    "list[float]",
                    "List[float]",
                    "Union[web3.IPCProvider, web3.WebsocketProvider, web3.HTTPProvider]"
                ],
                "tester": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "registration_code": [
                    "str",
                    "int"
                ]
            }
        },
        "chain_start_full_deposit_thresholds": {
            "name": "chain_start_full_deposit_thresholds",
            "location": 72,
            "return": [
                "list[]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "modified_registration_contract": {
            "name": "modified_registration_contract",
            "location": 77,
            "return": [
                "int",
                "list[]",
                "Callable",
                "str",
                "tuple[]",
                "tuple[typing.Literal]",
                "float"
            ],
            "arguments": {
                "request": [
                    "float",
                    "bool",
                    "str"
                ],
                "w3": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ],
                "tester": [
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "registration_code": [
                    "int",
                    "str",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "chain_start_full_deposit_thresholds": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "assert_tx_failed": {
            "name": "assert_tx_failed",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tester": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "assert_tx_failed.assert_tx_failed": {
            "name": "assert_tx_failed",
            "location": 112,
            "return": [],
            "arguments": {
                "function_to_test": [],
                "exception": []
            }
        }
    },
    "beacon_chain-master/tests/contracts/test_deposit.py": {
        "compute_merkle_root": {
            "name": "compute_merkle_root",
            "location": 17,
            "return": [
                "int",
                "str",
                "float",
                "Pattern"
            ],
            "arguments": {
                "leaf_nodes": []
            }
        },
        "verify_merkle_branch": {
            "name": "verify_merkle_branch",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "leaf": [
                    "str",
                    "bool",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "List[Dict[str, str]]",
                    "List[str]"
                ],
                "branch": [
                    "int",
                    "set",
                    "set[]",
                    "type",
                    "typing.Type"
                ],
                "depth": [
                    "bool",
                    "int"
                ],
                "index": [
                    "int",
                    "bytes"
                ],
                "root": [
                    "str",
                    "bool",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "List[Dict[str, str]]",
                    "List[str]"
                ]
            }
        },
        "test_deposit_amount": {
            "name": "test_deposit_amount",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "registration_contract": [],
                "w3": [],
                "success": [],
                "amount_deposit": [],
                "assert_tx_failed": [
                    "int",
                    "str"
                ]
            }
        },
        "test_deposit_log": {
            "name": "test_deposit_log",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "registration_contract": [],
                "a0": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "w3": [
                    "bool"
                ]
            }
        },
        "test_receipt_tree": {
            "name": "test_receipt_tree",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "registration_contract": [],
                "w3": [
                    "str"
                ],
                "assert_tx_failed": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_chain_start": {
            "name": "test_chain_start",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "modified_registration_contract": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "w3": [],
                "assert_tx_failed": [
                    "dict[str, typing.Sequence[str]]",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/ssz/test_deserialize.py": {
        "test_basic_deserialization": {
            "name": "test_basic_deserialization",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "typ": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_deserialization_unknown_type": {
            "name": "test_deserialization_unknown_type",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "typ": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ]
            }
        }
    },
    "beacon_chain-master/tests/ssz/test_eq.py": {
        "test_eq": {
            "name": "test_eq",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "left_fields": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Mapping[str, T]",
                    "Exception"
                ],
                "right_fields": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Mapping[str, T]",
                    "Exception"
                ],
                "equal": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/ssz/test_serialize.py": {
        "test_basic_serialization": {
            "name": "test_basic_serialization",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "Iterator[T]",
                    "typing.Iterator",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "typ": [
                    "str",
                    "bytes",
                    "Iterator[T]",
                    "typing.Iterator",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Iterator[T]",
                    "typing.Iterator",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_failed_serialization": {
            "name": "test_failed_serialization",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "int"
                ],
                "typ": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "beacon_chain-master/tests/ssz/test_to_dict.py": {
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "result": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_object_to_dict": {
            "name": "test_object_to_dict",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "field_data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/conftest.py": {
        "bls_verify_mock": {
            "name": "bls_verify_mock",
            "location": 59,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "m": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "typing.Optional[]",
                    "bool",
                    "Optional",
                    "Callable[[], bytes]"
                ],
                "pub": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "typing.Optional[]",
                    "bool",
                    "Optional",
                    "Callable[[], bytes]"
                ],
                "sig": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "typing.Optional[]",
                    "bool",
                    "Optional",
                    "Callable[[], bytes]"
                ]
            }
        },
        "bls_sign_mock": {
            "name": "bls_sign_mock",
            "location": 63,
            "return": [
                "tuple[int]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "m": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Iterable"
                ],
                "k": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "mock_bls": {
            "name": "mock_bls",
            "location": 68,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ],
                "request": []
            }
        },
        "sample_active_state_params": {
            "name": "sample_active_state_params",
            "location": 77,
            "return": [
                "dict[typing.Text, list[]]",
                "Iterable[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "sample_attestation_record_params": {
            "name": "sample_attestation_record_params",
            "location": 85,
            "return": [
                "dict[typing.Text, typing.Union[int,bytes,list[int]]]",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "sample_block_params": {
            "name": "sample_block_params",
            "location": 99,
            "return": [
                "dict[typing.Text, typing.Union[bytes,int,list[]]]",
                "str",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {}
        },
        "sample_crystallized_state_params": {
            "name": "sample_crystallized_state_params",
            "location": 112,
            "return": [
                "dict[typing.Text, typing.Union[list[],int,bytes]]",
                "int",
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "sample_recent_proposer_record_params": {
            "name": "sample_recent_proposer_record_params",
            "location": 128,
            "return": [
                "dict[typing.Text, typing.Union[int,bytes]]",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {}
        },
        "sample_shard_and_committee_params": {
            "name": "sample_shard_and_committee_params",
            "location": 137,
            "return": [
                "dict[typing.Text, typing.Union[int,list[]]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "sample_crosslink_record_params": {
            "name": "sample_crosslink_record_params",
            "location": 145,
            "return": [
                "dict[typing.Text, typing.Union[int,bytes]]",
                "float",
                "str",
                "utils.Node"
            ],
            "arguments": {}
        },
        "init_shuffling_seed": {
            "name": "init_shuffling_seed",
            "location": 154,
            "return": [
                "bytes",
                "int",
                "list",
                "List[Tuple[str, str]]",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "init_randao": {
            "name": "init_randao",
            "location": 159,
            "return": [
                "bytes",
                "int",
                "list",
                "List[Tuple[str, str]]",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "base_reward_quotient": {
            "name": "base_reward_quotient",
            "location": 164,
            "return": [
                "str",
                "List[int]",
                "tuple"
            ],
            "arguments": {}
        },
        "default_end_dynasty": {
            "name": "default_end_dynasty",
            "location": 169,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "deposit_size": {
            "name": "deposit_size",
            "location": 174,
            "return": [
                "str",
                "List[float]",
                "bool",
                "Set[str]",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "cycle_length": {
            "name": "cycle_length",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "max_validator_count": {
            "name": "max_validator_count",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "min_committee_size": {
            "name": "min_committee_size",
            "location": 189,
            "return": [
                "str",
                "bool",
                "float",
                "Optional[int]",
                "int",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {}
        },
        "min_dynasty_length": {
            "name": "min_dynasty_length",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "shard_count": {
            "name": "shard_count",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "slot_duration": {
            "name": "slot_duration",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sqrt_e_drop_time": {
            "name": "sqrt_e_drop_time",
            "location": 209,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 214,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "base_reward_quotient": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "default_end_dynasty": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "deposit_size": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "cycle_length": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "max_validator_count": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "min_committee_size": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "min_dynasty_length": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "shard_count": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "slot_duration": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "sqrt_e_drop_time": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "num_validators": {
            "name": "num_validators",
            "location": 239,
            "return": [
                "int",
                "str",
                "Callable[[KT], VT]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "init_validator_keys": {
            "name": "init_validator_keys",
            "location": 244,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "pubkeys": [
                    "int",
                    "Optional[int]"
                ],
                "num_validators": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "genesis_validators": {
            "name": "genesis_validators",
            "location": 249,
            "return": [
                "list[ValidatorRecord]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "init_validator_keys": [
                    "bytes"
                ],
                "config": [
                    "bytes"
                ]
            }
        },
        "genesis_crystallized_state": {
            "name": "genesis_crystallized_state",
            "location": 266,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "genesis_validators": [
                    "int"
                ],
                "init_shuffling_seed": [
                    "int"
                ],
                "config": [
                    "int"
                ]
            }
        },
        "genesis_active_state": {
            "name": "genesis_active_state",
            "location": 277,
            "return": [
                "bool",
                "List[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "config": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "genesis_block": {
            "name": "genesis_block",
            "location": 282,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "genesis_active_state": [
                    "bytes",
                    "str",
                    "bool",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "genesis_crystallized_state": [
                    "bytes",
                    "str",
                    "bool",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "mock_make_attestations": {
            "name": "mock_make_attestations",
            "location": 293,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "keymap": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ],
                "config": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "mock_make_child": {
            "name": "mock_make_child",
            "location": 379,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "keymap": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ],
                "config": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "mock_make_attestations.mock_make_attestations": {
            "name": "mock_make_attestations",
            "location": 294,
            "return": [],
            "arguments": {
                "parent_state": [],
                "block": [],
                "attester_share": []
            }
        },
        "mock_make_child.mock_make_child": {
            "name": "mock_make_child",
            "location": 380,
            "return": [],
            "arguments": {
                "parent_state": [],
                "parent": [],
                "slot_number": [],
                "attestations": []
            }
        }
    },
    "beacon_chain-master/tests/state/helpers.py": {
        "mock_validator_record": {
            "name": "mock_validator_record",
            "location": 13,
            "return": [
                "ValidatorRecord",
                "float",
                "Callable[[bytes], None]",
                "bool",
                "pricemonitor.config.Coin",
                "str"
            ],
            "arguments": {
                "pubkey": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[Sequence['cirq.Qid']]",
                    "raiden.transfer.state.ChainState",
                    "Optional[int]"
                ],
                "start_dynasty": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[Sequence['cirq.Qid']]",
                    "raiden.transfer.state.ChainState",
                    "Optional[int]"
                ],
                "config": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[Sequence['cirq.Qid']]",
                    "raiden.transfer.state.ChainState",
                    "Optional[int]"
                ]
            }
        },
        "get_pseudo_chain": {
            "name": "get_pseudo_chain",
            "location": 25,
            "return": [
                "list[Block]",
                "str",
                "MutableMapping[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "length": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_active_state.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "param": [
                    "str"
                ],
                "default_value": [
                    "dict[str, float]",
                    "raiden.transfer.state.ChainState",
                    "Dict[str, float]"
                ],
                "sample_active_state_params": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_num_pending_attestations": {
            "name": "test_num_pending_attestations",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "int"
                ]
            }
        },
        "test_block_vote_cache": {
            "name": "test_block_vote_cache",
            "location": 47,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "block_vote_cache": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_attestation_record.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "param": [
                    "Callable",
                    "typing.Callable[, ]",
                    "set",
                    "set[]",
                    "List[str]",
                    "list[str]"
                ],
                "default_value": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "sample_attestation_record_params": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_block.py": {
        "test_block_hash": {
            "name": "test_block_hash",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_num_attestations": {
            "name": "test_num_attestations",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_chain.py": {
        "test_head": {
            "name": "test_head",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_block_by_hash": {
            "name": "test_block_by_hash",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_block_by_slot_number": {
            "name": "test_block_by_slot_number",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "slot_number": []
            }
        },
        "test_chain": {
            "name": "test_chain",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "beacon_chain-master/tests/state/test_crosslink_record.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "param": [
                    "Callable",
                    "typing.Callable[, ]",
                    "set",
                    "set[]",
                    "List[str]",
                    "list[str]"
                ],
                "default_value": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "sample_crosslink_record_params": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_crystallized_state.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "param": [
                    "str"
                ],
                "default_value": [
                    "dict[str, float]",
                    "raiden.transfer.state.ChainState",
                    "Dict[str, float]"
                ],
                "sample_crystallized_state_params": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_num_validators": {
            "name": "test_num_validators",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "Optional[Exception]",
                    "int",
                    "Exception",
                    "None"
                ]
            }
        },
        "test_num_crosslink_records": {
            "name": "test_num_crosslink_records",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "int"
                ]
            }
        },
        "test_total_deposits": {
            "name": "test_total_deposits",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "num_active_validators": [
                    "int",
                    "float"
                ],
                "config": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Args]]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_full_pos.py": {
        "test_state_transition_integration": {
            "name": "test_state_transition_integration",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_crystallized_state": [
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "List[int]",
                    "list[int]",
                    "Set[int]",
                    "set[int]",
                    "Set[str]",
                    "set[str]"
                ],
                "genesis_active_state": [
                    "str",
                    "float",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[List[str]]"
                ],
                "genesis_block": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "mock_make_child": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "mock_make_attestations": [
                    "float"
                ],
                "config": [
                    "float",
                    "dict"
                ]
            }
        },
        "test_pos_finalization": {
            "name": "test_pos_finalization",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "genesis_crystallized_state": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool"
                ],
                "genesis_active_state": [
                    "str",
                    "int",
                    "dict[str, int]",
                    "raiden.transfer.state.BalanceProofUnsignedState",
                    "Dict[str, int]",
                    "bool"
                ],
                "genesis_block": [
                    "str",
                    "int"
                ],
                "mock_make_child": [
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "Callable"
                ],
                "mock_make_attestations": [
                    "str",
                    "set",
                    "set[]"
                ],
                "config": [
                    "Optional[bool]"
                ]
            }
        },
        "test_pos_finalization.mock_validate_parent_block_proposer": {
            "name": "mock_validate_parent_block_proposer",
            "location": 106,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "block": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "parent_block": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "crystallized_state": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "config": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_genesis_helpers.py": {
        "test_get_genesis_active_state": {
            "name": "test_get_genesis_active_state",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "test_get_genesis_crystallized_state": {
            "name": "test_get_genesis_crystallized_state",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "genesis_validators": [],
                "init_shuffling_seed": [],
                "config": []
            }
        },
        "test_get_genesis_block": {
            "name": "test_get_genesis_block",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "genesis_active_state": [
                    "str",
                    "bytes"
                ],
                "genesis_crystallized_state": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_helpers.py": {
        "test_int_sqrt": {
            "name": "test_int_sqrt",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n": [
                    "float",
                    "int"
                ],
                "output": [
                    "float",
                    "int"
                ]
            }
        },
        "test_get_new_shuffling_is_complete": {
            "name": "test_get_new_shuffling_is_complete",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_validators": [
                    "int",
                    "tests.async_mock.Mock"
                ],
                "config": [
                    "int",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_get_new_shuffling_handles_shard_wrap": {
            "name": "test_get_new_shuffling_handles_shard_wrap",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_validators": [],
                "config": []
            }
        },
        "test_get_shards_and_committees_for_slot": {
            "name": "test_get_shards_and_committees_for_slot",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_crystallized_state": [
                    "int",
                    "float",
                    "str",
                    "Set[str]",
                    "set[str]"
                ],
                "num_validators": [
                    "bool"
                ],
                "slot": [
                    "int"
                ],
                "success": [
                    "bool"
                ],
                "config": [
                    "int"
                ]
            }
        },
        "test_get_block_hash": {
            "name": "test_get_block_hash",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_block": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "current_block_number": [
                    "Callable[[str], None]"
                ],
                "slot": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "success": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "config": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_proposer_position": {
            "name": "test_get_proposer_position",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "genesis_block": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "genesis_crystallized_state": [],
                "committee": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "parent_block_number": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "result_proposer_index_in_committee": [
                    "str",
                    "tests.conftesWorker"
                ],
                "config": []
            }
        },
        "test_get_proposer_position.mock_get_shards_and_committees_for_slot": {
            "name": "mock_get_shards_and_committees_for_slot",
            "location": 203,
            "return": [
                "list[ShardAndCommittee]",
                "str",
                "int"
            ],
            "arguments": {
                "parent_block": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "crystallized_state": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "config": [
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_shard_and_committee.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "param": [
                    "Callable",
                    "typing.Callable[, ]",
                    "set",
                    "set[]",
                    "List[str]",
                    "list[str]"
                ],
                "default_value": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "sample_shard_and_committee_params": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "beacon_chain-master/tests/state/test_state_transition.py": {
        "attestation_validation_fixture": {
            "name": "attestation_validation_fixture",
            "location": 37,
            "return": [
                "bool",
                "tuple[typing.Union[int,str,list[int],float,None]]"
            ],
            "arguments": {
                "genesis_crystallized_state": [
                    "int",
                    "utils.SimpleReachabilityContainer",
                    "raiden.utils.BlockNumber",
                    "state.state.State"
                ],
                "genesis_active_state": [
                    "int",
                    "utils.SimpleReachabilityContainer",
                    "raiden.utils.BlockNumber",
                    "state.state.State"
                ],
                "genesis_block": [
                    "str",
                    "int",
                    "List[int]",
                    "float",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ],
                "mock_make_child": [
                    "int"
                ],
                "mock_make_attestations": [
                    "raiden.utils.Address",
                    "raiden.utils.SecreRegistryAddress"
                ],
                "config": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "test_validate_attestation_valid": {
            "name": "test_validate_attestation_valid",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attestation_validation_fixture": [],
                "config": []
            }
        },
        "test_validate_attestation_slot": {
            "name": "test_validate_attestation_slot",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attestation_validation_fixture": [
                    "dict",
                    "dict[, ]"
                ],
                "attestation_slot": [],
                "config": []
            }
        },
        "test_validate_attestation_justified": {
            "name": "test_validate_attestation_justified",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attestation_validation_fixture": [],
                "config": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_validate_attestation_attester_bitfield": {
            "name": "test_validate_attestation_attester_bitfield",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attestation_validation_fixture": [],
                "config": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_validate_attestation_aggregate_sig": {
            "name": "test_validate_attestation_aggregate_sig",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attestation_validation_fixture": [],
                "config": []
            }
        },
        "test_calculate_crosslink_rewards": {
            "name": "test_calculate_crosslink_rewards",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_crystallized_state": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "None"
                ],
                "genesis_active_state": [
                    "int",
                    "bool",
                    "raiden.transfer.state.BalanceProofUnsignedState",
                    "raiden.utils.PaymentID",
                    "raiden.utils.ChainID"
                ],
                "genesis_block": [
                    "bool",
                    "str",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "config": [
                    "str",
                    "int",
                    "bool",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "mock_make_attestations": [
                    "int",
                    "float",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "mock_make_child": [
                    "int",
                    "str",
                    "bool",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ]
            }
        },
        "test_initialize_new_cycle": {
            "name": "test_initialize_new_cycle",
            "location": 358,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "genesis_crystallized_state": [
                    "int",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.Address",
                    "raiden.transfer.state.NettingChannelEndState",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "genesis_active_state": [
                    "int",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.Address",
                    "raiden.transfer.state.NettingChannelEndState",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "genesis_block": [
                    "int"
                ],
                "last_state_recalc": [
                    "int",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress"
                ],
                "last_justified_slot": [
                    "int",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.Address",
                    "raiden.transfer.state.NettingChannelEndState",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "justified_streak": [
                    "mythril.laser.ethereum.state.constraints.Constraints",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockTimeout",
                    "raiden.transfer.mediated_transfer.state.TransferDescriptionWithSecretState",
                    "raiden.transfer.state.NettingChannelState",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.BlockHash"
                ],
                "last_finalized_slot": [
                    "bytes",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.NodeNetworkStateMap",
                    "raiden.transfer.mediated_transfer.state.MediatorTransferState",
                    "raiden.utils.TokenAmount"
                ],
                "fraction_voted": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ],
                "result_last_state_recalc": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address",
                    "raiden.utils.SignedTransaction"
                ],
                "result_justified_streak": [
                    "int",
                    "raiden.utils.Address",
                    "mythril.laser.ethereum.state.constraints.Constraints",
                    "raiden.transfer.state.NettingChannelEndState",
                    "raiden.utils.InitiatorAddress"
                ],
                "result_last_finalized_slot": [
                    "mythril.laser.ethereum.state.constraints.Constraints",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.Address",
                    "raiden.utils.BlockNumber"
                ],
                "config": [
                    "int",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.InitiatorAddress"
                ]
            }
        },
        "test_compute_cycle_transitions": {
            "name": "test_compute_cycle_transitions",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "genesis_crystallized_state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockTimeout",
                    "raiden.transfer.mediated_transfer.state.LockedTransferUnsignedState",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.NodeNetworkStateMap"
                ],
                "genesis_active_state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockTimeout",
                    "raiden.transfer.mediated_transfer.state.LockedTransferUnsignedState",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.NodeNetworkStateMap"
                ],
                "genesis_block": [
                    "typing.Sequence[str]",
                    "raiden.utils.BlockTimeout",
                    "Sequence[str]"
                ],
                "config": [
                    "str",
                    "metrics_backend.utils.Address"
                ]
            }
        }
    },
    "beacon_chain-master/tests/utils/test_bitfield.py": {
        "test_bitfield_length": {
            "name": "test_bitfield_length",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attester_count": [
                    "int",
                    "str"
                ],
                "bitfield_length": [
                    "int",
                    "str"
                ]
            }
        },
        "test_empty_bitfield": {
            "name": "test_empty_bitfield",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitfield_single_votes": {
            "name": "test_bitfield_single_votes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitfield_all_votes": {
            "name": "test_bitfield_all_votes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitfield_some_votes": {
            "name": "test_bitfield_some_votes",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitfield_multiple_votes": {
            "name": "test_bitfield_multiple_votes",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "beacon_chain-master/tests/utils/test_bls.py": {
        "test_bls_core": {
            "name": "test_bls_core",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "privkey": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_signature_aggregation": {
            "name": "test_signature_aggregation",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ],
                "privkeys": [
                    "str"
                ]
            }
        }
    }
}
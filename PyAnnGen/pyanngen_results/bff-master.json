{
    "bff-master/setup.py": {
        "NoopTestCommand.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dist": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        }
    },
    "bff-master/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 335,
            "return": [
                "VersioneerConfig"
            ],
            "arguments": {
                "root": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 373,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 384,
            "return": [
                "Tuple[(Optional[str], Optional[int])]"
            ],
            "arguments": {
                "commands": [
                    "int",
                    "List[str]",
                    "dict",
                    "set",
                    "str"
                ],
                "args": [],
                "cwd": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "hide_stderr": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 945,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "versionfile_abs": [
                    "str"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 974,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "keywords": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "tag_prefix": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int",
                    "MutableMapping[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1029,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "root": [
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "run_command": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "manifest_in": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "versionfile_source": [
                    "str",
                    "Union[int, str]",
                    "bool"
                ],
                "ipy": [
                    "str",
                    "int",
                    "Callable",
                    "List[Union[\"PipeChain\", str]]",
                    "float"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1158,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "str"
                ],
                "root": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1201,
            "return": [
                "str",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "versions": [
                    "str"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1229,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1277,
            "return": [
                "Optional[Type]",
                "dict",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1304,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "str"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 1366,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "List[dict]"
                ],
                "style": [
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[str, float]"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1402,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1478,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1483,
            "return": [
                "Dict[(str, type)]"
            ],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1697,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1779,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 347,
            "return": [
                "str",
                "Optional[str]",
                "kedro.io.core.Version"
            ],
            "arguments": {
                "parser": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 375,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1637,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "Optional[str]"
                ],
                "files": [
                    "str",
                    "IO",
                    "Optional[str]"
                ]
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1601,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bff-master/bff/config.py": {
        "FancyConfig.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_config_to_load": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Union[pathlib.Path, str, None]"
                ],
                "default_config_path": [
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "Optional[str]"
                ]
            }
        },
        "FancyConfig.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [
                "bool",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict",
                    "Union[int, slice]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FancyConfig.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FancyConfig.__len__": {
            "name": "__len__",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FancyConfig.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FancyConfig.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bff-master/bff/fancy.py": {
        "avg_dicts": {
            "name": "avg_dicts",
            "location": 23,
            "return": [
                "Dict[(nothing, float)]"
            ],
            "arguments": {}
        },
        "cast_to_category_pd": {
            "name": "cast_to_category_pd",
            "location": 53,
            "return": [
                "int",
                "pandas.DataFrame",
                "datetime.timedelta"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "List[pandas.DataFrame]",
                    "str",
                    "pandas.DataFrame"
                ],
                "deep": [
                    "bool",
                    "pandas.DataFrame",
                    "List[pandas.DataFrame]",
                    "str"
                ]
            }
        },
        "_check_sklearn_support": {
            "name": "_check_sklearn_support",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "caller_name": [
                    "str",
                    "Union[str,Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "concat_with_categories": {
            "name": "concat_with_categories",
            "location": 134,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "df_left": [
                    "List[dict]",
                    "pandas.DataFrame",
                    "List[Dict]"
                ],
                "df_right": [
                    "List[dict]",
                    "pandas.DataFrame",
                    "List[Dict]"
                ]
            }
        },
        "dates_split": {
            "name": "dates_split",
            "location": 241,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "date_start": [
                    "int",
                    "datetime.date",
                    "Tuple[int,int]",
                    "pandas.DataFrame",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "date_end": [
                    "int",
                    "float",
                    "Optional[datetime.datetime]",
                    "pandas.DataFrame",
                    "Tuple[int,int]",
                    "datetime.date",
                    "str",
                    "List[str]"
                ],
                "n_splits": [
                    "int",
                    "datetime.date",
                    "Tuple[Union[int,int]]",
                    "None",
                    "Tuple[int,int]",
                    "pandas.DataFrame",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "get_peaks": {
            "name": "get_peaks",
            "location": 291,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ],
                "distance_scale": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "idict": {
            "name": "idict",
            "location": 326,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "kwargs_2_list": {
            "name": "kwargs_2_list",
            "location": 366,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "log_df": {
            "name": "log_df",
            "location": 401,
            "return": [
                "str",
                "bool",
                "numpy.ndarray",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "bool",
                    "pandas.DataFrame",
                    "logging.Logger"
                ],
                "f": [
                    "Callable",
                    "str",
                    "pandas.DataFrame",
                    "bool",
                    "logging.Logger"
                ],
                "msg": [
                    "Text",
                    "str",
                    "pandas.DataFrame",
                    "bool",
                    "logging.Logger"
                ]
            }
        },
        "mem_usage_pd": {
            "name": "mem_usage_pd",
            "location": 447,
            "return": [
                "Dict[(Any, Union[(set, str)])]"
            ],
            "arguments": {
                "pd_obj": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "index": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ],
                "deep": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ],
                "details": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "normalization_pd": {
            "name": "normalization_pd",
            "location": 523,
            "return": [
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "scaler": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[pandas.DataFrame]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "columns": [
                    "Optional[Union[str,Any]]",
                    "None",
                    "str",
                    "List[str]",
                    "pandas.DataFrame",
                    "bool",
                    "Tuple[str]",
                    "Any"
                ],
                "suffix": [
                    "None",
                    "numpy.dtype",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "new_type": [
                    "numpy.dtype",
                    "Optional[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 603,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "None",
                    "Optional[Callable]",
                    "Callable",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[datetime.date]",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "date_fields": [
                    "Text",
                    "Sequence[str]",
                    "bool",
                    "str",
                    "Dict",
                    "T",
                    "int"
                ]
            }
        },
        "pipe_multiprocessing_pd": {
            "name": "pipe_multiprocessing_pd",
            "location": 668,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "df": [
                    "float",
                    "numpy.ndarray",
                    "Callable",
                    "List"
                ],
                "func": [
                    "Callable",
                    "T",
                    "Callable[,Dict[str,object]]"
                ]
            }
        },
        "read_sql_by_chunks": {
            "name": "read_sql_by_chunks",
            "location": 708,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Type"
                ],
                "cnxn": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Type"
                ],
                "params": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Dict",
                    "Type"
                ],
                "chunksize": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Type"
                ],
                "column_types": [
                    "int",
                    "None",
                    "List[Tuple[int,Any]]",
                    "List[tuple[Union[int,Any]]]"
                ]
            }
        },
        "size_2_square": {
            "name": "size_2_square",
            "location": 755,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "sliding_window": {
            "name": "sliding_window",
            "location": 777,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "Sequence[Mapping[str, Any]]",
                    "List[List[str]]",
                    "float"
                ],
                "window_size": [
                    "int",
                    "float"
                ],
                "step": [
                    "int",
                    "float",
                    "bytearray"
                ]
            }
        },
        "value_2_list": {
            "name": "value_2_list",
            "location": 835,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "List",
                    "None",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "parse_date._parse_date": {
            "name": "_parse_date",
            "location": 651,
            "return": [
                "pandas.DataFrame",
                "datetime.datetime",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool",
                    "zerver.lib.types.ViewFuncT",
                    "Tuple[Type[Exception]]",
                    "Callable[..., Dict]"
                ]
            }
        },
        "parse_date._parse_date.wrapper": {
            "name": "wrapper",
            "location": 653,
            "return": [
                "str",
                "int",
                "pandas.Series",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "bff-master/bff/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 20,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 37,
            "return": [
                "VersioneerConfig"
            ],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 59,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 70,
            "return": [
                "Tuple[(Optional[str], Optional[int])]"
            ],
            "arguments": {
                "commands": [
                    "int",
                    "List[str]",
                    "dict",
                    "set",
                    "str"
                ],
                "args": [],
                "cwd": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "hide_stderr": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "str"
                ],
                "root": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 133,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "versionfile_abs": [
                    "str"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 162,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "keywords": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "tag_prefix": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int",
                    "MutableMapping[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 217,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "root": [
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "run_command": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 356,
            "return": [
                "Optional[Type]",
                "dict",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "str"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 445,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "List[dict]"
                ],
                "style": [
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[str, float]"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 477,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "bff-master/bff/__init__.py": {},
    "bff-master/bff/plot/plot.py": {
        "add_identity": {
            "name": "add_identity",
            "location": 31,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "ax": [
                    "_T0@@"
                ]
            }
        },
        "get_n_colors": {
            "name": "get_n_colors",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [],
                "cmap": [
                    "typing.Text"
                ]
            }
        },
        "plot_cluster": {
            "name": "plot_cluster",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "cluster_col_1": [
                    "typing.Text"
                ],
                "cluster_col_2": [
                    "typing.Text"
                ],
                "label_col": [
                    "None"
                ],
                "colors": [],
                "labels": [
                    "None"
                ],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "loc": [
                    "typing.Text"
                ],
                "s": [],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_confusion_matrix": {
            "name": "plot_confusion_matrix",
            "location": 281,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_true": [],
                "y_pred": [],
                "labels_filter": [
                    "None"
                ],
                "ticklabels": [
                    "typing.Text"
                ],
                "sample_weight": [
                    "None"
                ],
                "normalize": [
                    "None"
                ],
                "stats": [],
                "annotation_fmt": [
                    "None"
                ],
                "cbar_fmt": [
                    "None"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "rotation_xticks": [
                    "int"
                ],
                "rotation_yticks": [
                    "None"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_correlation": {
            "name": "plot_correlation",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "already_computed": [
                    "bool"
                ],
                "method": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "rotation_xticks": [
                    "int"
                ],
                "rotation_yticks": [
                    "None"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_counter": {
            "name": "plot_counter",
            "location": 507,
            "return": [
                "Any"
            ],
            "arguments": {
                "counter": [],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "width": [
                    "float"
                ],
                "threshold": [
                    "int"
                ],
                "vertical": [
                    "bool"
                ],
                "ax": [
                    "None"
                ],
                "rotation_xticks": [
                    "None"
                ],
                "grid": [
                    "typing.Text"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_history": {
            "name": "plot_history",
            "location": 642,
            "return": [
                "Any"
            ],
            "arguments": {
                "history": [],
                "metric": [],
                "twinx": [
                    "bool"
                ],
                "title": [
                    "typing.Text"
                ],
                "axes": [
                    "None"
                ],
                "loc": [
                    "typing.Text"
                ],
                "grid": [
                    "None"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_kmeans": {
            "name": "plot_kmeans",
            "location": 801,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "kmeans_col_1": [
                    "typing.Text"
                ],
                "kmeans_col_2": [
                    "typing.Text"
                ],
                "label_col": [
                    "typing.Text"
                ],
                "centroids": [
                    "None"
                ],
                "cmap": [
                    "typing.Text"
                ],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "loc": [
                    "typing.Text"
                ],
                "s": [],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_pca_explained_variance_ratio": {
            "name": "plot_pca_explained_variance_ratio",
            "location": 931,
            "return": [
                "Any"
            ],
            "arguments": {
                "pca": [],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "hline": [
                    "None"
                ],
                "ax": [
                    "None"
                ],
                "lim_x": [
                    "None"
                ],
                "lim_y": [
                    "None"
                ],
                "grid": [
                    "None"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_pie": {
            "name": "plot_pie",
            "location": 1038,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "explode": [
                    "float"
                ],
                "circle": [
                    "bool"
                ],
                "colors": [
                    "None"
                ],
                "textprops": [
                    "None"
                ],
                "title": [
                    "typing.Text"
                ],
                "threshold": [
                    "int"
                ],
                "ax": [
                    "None"
                ],
                "loc": [
                    "None"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_predictions": {
            "name": "plot_predictions",
            "location": 1154,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_true": [],
                "y_pred": [],
                "x_true": [
                    "None"
                ],
                "x_pred": [
                    "None"
                ],
                "label_true": [
                    "typing.Text"
                ],
                "label_pred": [
                    "typing.Text"
                ],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "loc": [
                    "typing.Text"
                ],
                "rotation_xticks": [
                    "None"
                ],
                "grid": [
                    "typing.Text"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_roc_curve": {
            "name": "plot_roc_curve",
            "location": 1292,
            "return": [
                "Any"
            ],
            "arguments": {
                "labels": [],
                "predictions": [],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "grid": [
                    "typing.Text"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_series": {
            "name": "plot_series",
            "location": 1380,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "column": [],
                "groupby": [
                    "None"
                ],
                "with_sem": [
                    "bool"
                ],
                "with_peaks": [
                    "bool"
                ],
                "with_missing_datetimes": [
                    "bool"
                ],
                "distance_scale": [
                    "float"
                ],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "None"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "color": [
                    "typing.Text"
                ],
                "loc": [
                    "typing.Text"
                ],
                "rotation_xticks": [
                    "None"
                ],
                "grid": [
                    "typing.Text"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "plot_true_vs_pred": {
            "name": "plot_true_vs_pred",
            "location": 1574,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "y_true": [],
                "y_pred": [],
                "with_correlation": [
                    "bool"
                ],
                "with_determination": [
                    "bool"
                ],
                "with_histograms": [
                    "bool"
                ],
                "with_identity": [
                    "bool"
                ],
                "label_x": [
                    "typing.Text"
                ],
                "label_y": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "lim_x": [
                    "None"
                ],
                "lim_y": [
                    "None"
                ],
                "grid": [
                    "typing.Text"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dpi": [
                    "int"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "set_thousands_separator": {
            "name": "set_thousands_separator",
            "location": 1758,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "axes": [
                    "_T0@@"
                ],
                "which": [
                    "typing.Text"
                ],
                "nb_decimals": [
                    "int"
                ]
            }
        },
        "add_identity.callback": {
            "name": "callback",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "axes": []
            }
        },
        "plot_pie.format_label": {
            "name": "format_label",
            "location": 1109,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "percent": [],
                "values": [],
                "limit": []
            }
        },
        "plot_pie.get_labels": {
            "name": "get_labels",
            "location": 1114,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "sizes": [],
                "labels": [],
                "limit": []
            }
        },
        "plot_true_vs_pred.get_limit": {
            "name": "get_limit",
            "location": 1683,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "limit": [],
                "data": [],
                "percent": [
                    "int"
                ]
            }
        }
    },
    "bff-master/bff/plot/__init__.py": {},
    "bff-master/doc/source/conf.py": {
        "setup": {
            "name": "setup",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "bff-master/tests/test_config.py": {
        "TestiFancyConfig.test_create_config": {
            "name": "test_create_config",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestiFancyConfig.test_access_config": {
            "name": "test_access_config",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bff-master/tests/test_fancy.py": {
        "df_dummy_func_one": {
            "name": "df_dummy_func_one",
            "location": 24,
            "return": [
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "numpy.ndarray",
                    "Dict[str, List[float]]",
                    "bool"
                ],
                "i": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "df_dummy_func_two": {
            "name": "df_dummy_func_two",
            "location": 34,
            "return": [
                "pandas.DataFrame",
                "int",
                "float",
                "Optional[int]",
                "Optional[List[int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "df": [
                    "numpy.ndarray",
                    "Set[int]",
                    "List[apps.monero.xmr.types.Sc25519]",
                    "List[str]",
                    "bool",
                    "int",
                    "numpy.random.RandomState"
                ],
                "i": [
                    "int",
                    "numpy.ndarray",
                    "Set[int]",
                    "List[apps.monero.xmr.types.Sc25519]",
                    "List[str]",
                    "bool",
                    "numpy.random.RandomState"
                ]
            }
        },
        "TestFancy.test_avg_dicts": {
            "name": "test_avg_dicts",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_cast_to_category_pd": {
            "name": "test_cast_to_category_pd",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_concat_with_categories": {
            "name": "test_concat_with_categories",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_dates_split": {
            "name": "test_dates_split",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_get_peaks": {
            "name": "test_get_peaks",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_idict": {
            "name": "test_idict",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_kwargs_2_list": {
            "name": "test_kwargs_2_list",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_log_df": {
            "name": "test_log_df",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_mem_usage_pd": {
            "name": "test_mem_usage_pd",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_normalization_pd": {
            "name": "test_normalization_pd",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_parse_date": {
            "name": "test_parse_date",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_pipe_multiprocessing_pd_one": {
            "name": "test_pipe_multiprocessing_pd_one",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_pipe_multiprocessing_pd_two": {
            "name": "test_pipe_multiprocessing_pd_two",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_size_2_square": {
            "name": "test_size_2_square",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_sliding_window": {
            "name": "test_sliding_window",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_value_2_list": {
            "name": "test_value_2_list",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFancy.test_parse_date.dummy_function": {
            "name": "dummy_function",
            "location": 322,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Set[str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "TestFancy.test_parse_date.dummy_function_custom": {
            "name": "dummy_function_custom",
            "location": 341,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Set[str]",
                "bytearray"
            ],
            "arguments": {}
        }
    },
    "bff-master/tests/test_plot.py": {
        "TestPlot.test_get_n_colors": {
            "name": "test_get_n_colors",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_cluster": {
            "name": "test_plot_cluster",
            "location": 138,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_cluster_with_colors": {
            "name": "test_plot_cluster_with_colors",
            "location": 146,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_cluster_without_label": {
            "name": "test_plot_cluster_without_label",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_cluster_without_label_with_color": {
            "name": "test_plot_cluster_without_label_with_color",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_cluster_warning_colors": {
            "name": "test_plot_cluster_warning_colors",
            "location": 178,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_cluster_warning_labels": {
            "name": "test_plot_cluster_warning_labels",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix": {
            "name": "test_plot_confusion_matrix",
            "location": 205,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_annotation_fmt": {
            "name": "test_plot_confusion_matrix_annotation_fmt",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_cbar_fmt": {
            "name": "test_plot_confusion_matrix_cbar_fmt",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_fmt_thousand": {
            "name": "test_plot_confusion_matrix_fmt_thousand",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_labels_filter": {
            "name": "test_plot_confusion_matrix_labels_filter",
            "location": 246,
            "return": [
                "Callable",
                "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_normalize": {
            "name": "test_plot_confusion_matrix_normalize",
            "location": 257,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_sample_weight": {
            "name": "test_plot_confusion_matrix_sample_weight",
            "location": 268,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_stats_acc": {
            "name": "test_plot_confusion_matrix_stats_acc",
            "location": 280,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_stats_error": {
            "name": "test_plot_confusion_matrix_stats_error",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_stats_prec": {
            "name": "test_plot_confusion_matrix_stats_prec",
            "location": 306,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_stats_fscore": {
            "name": "test_plot_confusion_matrix_stats_fscore",
            "location": 317,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_ticklabels_cat": {
            "name": "test_plot_confusion_matrix_ticklabels_cat",
            "location": 328,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_ticklabels_false": {
            "name": "test_plot_confusion_matrix_ticklabels_false",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_confusion_matrix_ticklabels_n_labels": {
            "name": "test_plot_confusion_matrix_ticklabels_n_labels",
            "location": 350,
            "return": [
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_correlation": {
            "name": "test_plot_correlation",
            "location": 361,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_correlation_with_ax": {
            "name": "test_plot_correlation_with_ax",
            "location": 369,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_counter": {
            "name": "test_plot_counter",
            "location": 384,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_counter_horizontal": {
            "name": "test_plot_counter_horizontal",
            "location": 392,
            "return": [
                "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_counter_dict": {
            "name": "test_plot_counter_dict",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history": {
            "name": "test_plot_history",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_default": {
            "name": "test_plot_history_default",
            "location": 423,
            "return": [
                "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_with_ax": {
            "name": "test_plot_history_with_ax",
            "location": 432,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_with_metric": {
            "name": "test_plot_history_with_metric",
            "location": 444,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_with_metric_twinx": {
            "name": "test_plot_history_with_metric_twinx",
            "location": 454,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_with_metric_twinx_with_ax": {
            "name": "test_plot_history_with_metric_twinx_with_ax",
            "location": 464,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_with_multiple_ticks": {
            "name": "test_plot_history_with_multiple_ticks",
            "location": 477,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_without_val": {
            "name": "test_plot_history_without_val",
            "location": 488,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_without_val_twinx": {
            "name": "test_plot_history_without_val_twinx",
            "location": 498,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_without_val_and_metric": {
            "name": "test_plot_history_without_val_and_metric",
            "location": 508,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_history_without_val_and_metric_twinx": {
            "name": "test_plot_history_without_val_and_metric_twinx",
            "location": 518,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_kmeans": {
            "name": "test_plot_kmeans",
            "location": 528,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_kmeans_with_centroids": {
            "name": "test_plot_kmeans_with_centroids",
            "location": 536,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pca_explained_variance_ratio": {
            "name": "test_plot_pca_explained_variance_ratio",
            "location": 546,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pca_explained_variance_ratio_with_hline": {
            "name": "test_plot_pca_explained_variance_ratio_with_hline",
            "location": 556,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pca_explained_variance_ratio_with_limits": {
            "name": "test_plot_pca_explained_variance_ratio_with_limits",
            "location": 568,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pie": {
            "name": "test_plot_pie",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pie_counter": {
            "name": "test_plot_pie_counter",
            "location": 586,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pie_full": {
            "name": "test_plot_pie_full",
            "location": 595,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pie_threshold": {
            "name": "test_plot_pie_threshold",
            "location": 607,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_pie_dict": {
            "name": "test_plot_pie_dict",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_predictions": {
            "name": "test_plot_predictions",
            "location": 627,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_predictions_with_x": {
            "name": "test_plot_predictions_with_x",
            "location": 635,
            "return": [
                "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_predictions_wrong_length": {
            "name": "test_plot_predictions_wrong_length",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_roc_curve": {
            "name": "test_plot_roc_curve",
            "location": 657,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series": {
            "name": "test_plot_series",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series_all_same_axis": {
            "name": "test_plot_series_all_same_axis",
            "location": 685,
            "return": [
                "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series_mult_axis": {
            "name": "test_plot_series_mult_axis",
            "location": 698,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series_with_peaks": {
            "name": "test_plot_series_with_peaks",
            "location": 712,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series_with_missing_datetimes": {
            "name": "test_plot_series_with_missing_datetimes",
            "location": 723,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series_with_missing_datetimes_groupby": {
            "name": "test_plot_series_with_missing_datetimes_groupby",
            "location": 734,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_series_with_sem": {
            "name": "test_plot_series_with_sem",
            "location": 745,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_true_vs_pred": {
            "name": "test_plot_true_vs_pred",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_true_vs_pred_default": {
            "name": "test_plot_true_vs_pred_default",
            "location": 766,
            "return": [
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_true_vs_pred_with_ax": {
            "name": "test_plot_true_vs_pred_with_ax",
            "location": 774,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_true_vs_pred_with_correlation": {
            "name": "test_plot_true_vs_pred_with_correlation",
            "location": 785,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_true_vs_pred_with_histograms": {
            "name": "test_plot_true_vs_pred_with_histograms",
            "location": 796,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_plot_true_vs_pred_with_identity": {
            "name": "test_plot_true_vs_pred_with_identity",
            "location": 807,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_set_thousands_separator_both": {
            "name": "test_set_thousands_separator_both",
            "location": 818,
            "return": [
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlot.test_set_thousands_separator_x": {
            "name": "test_set_thousands_separator_x",
            "location": 831,
            "return": [
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bff-master/tests/__init__.py": {}
}
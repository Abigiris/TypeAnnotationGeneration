{
    "biscuits-master/bnh/bnh.py": {
        "Bin.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uniq": [
                    "int",
                    "float",
                    "bool"
                ],
                "cnts": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Bin.best_split": {
            "name": "best_split",
            "location": 16,
            "return": [
                "Tuple",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "BNH.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_bins": [
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[int]"
                ],
                "min_obs_per_bin": [
                    "int",
                    "Optional[float]"
                ],
                "exceptions": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Dict[str,np.ndarray]",
                    "Union[None,int]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "epsilon_break": [
                    "float",
                    "int",
                    "Callable",
                    "Dict[str,Any]"
                ],
                "epsilon_heal": [
                    "float",
                    "int",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "BNH._break_bin": {
            "name": "_break_bin",
            "location": 47,
            "return": [
                "List[Bin]",
                "None"
            ],
            "arguments": {
                "self": [],
                "bin": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BNH._merge_bins": {
            "name": "_merge_bins",
            "location": 50,
            "return": [
                "Bin",
                "None"
            ],
            "arguments": {
                "self": [],
                "binx": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "biny": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BNH._break": {
            "name": "_break",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BNH._heal": {
            "name": "_heal",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BNH._break_and_heal": {
            "name": "_break_and_heal",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BNH._fit": {
            "name": "_fit",
            "location": 68,
            "return": [
                "Tuple[list]",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "w": [
                    "None",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "numpy.array"
                ]
            }
        }
    },
    "biscuits-master/bnh/metrics.py": {
        "Metric.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric.evaluate": {
            "name": "evaluate",
            "location": 14,
            "return": [
                "numpy.ndarray",
                "None"
            ],
            "arguments": {
                "bin": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Metric.best_index": {
            "name": "best_index",
            "location": 19,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "values": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "IV.evaluate": {
            "name": "evaluate",
            "location": 27,
            "return": [
                "int",
                "float",
                "str",
                "Callable"
            ],
            "arguments": {
                "bin": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IV.best_index": {
            "name": "best_index",
            "location": 43,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str,bytes]"
                ]
            }
        }
    },
    "biscuits-master/bnh/tabulate.py": {
        "tabulate": {
            "name": "tabulate",
            "location": 5,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "list",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "List",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ],
                "w": [
                    "List",
                    "None",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "biscuits-master/bnh/util.py": {
        "pairwise": {
            "name": "pairwise",
            "location": 3,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "Iterable[T]",
                    "int",
                    "Iterator[Any]",
                    "BaseException",
                    "Tuple[int,int]",
                    "None",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "biscuits-master/bnh/tests/test_util.py": {
        "TestTabulate.test_tabulate": {
            "name": "test_tabulate",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "biscuits-master/bnh/tests/__init__.py": {}
}
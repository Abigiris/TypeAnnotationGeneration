{
    "bitcoin-tools-master/analyze.py": {
        "dofile": {
            "name": "dofile",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "fileobj": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bitcoin-tools-master/graph-progress.py": {
        "configure_matplotlib": {
            "name": "configure_matplotlib",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "dpi": [
                    "int",
                    "Callable",
                    "str"
                ],
                "figsize": [
                    "tuple[int]",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sec_formatter": {
            "name": "sec_formatter",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]"
                ],
                "_": [
                    "float",
                    "numpy.array",
                    "str",
                    "typing.Type",
                    "Union[type, numpy.dtype]"
                ]
            }
        },
        "fmt_commit": {
            "name": "fmt_commit",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "hostinfo": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "pd_to_np": {
            "name": "pd_to_np",
            "location": 34,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "data": [
                    "str",
                    "numpy.ndarray",
                    "list[]",
                    "list"
                ]
            }
        },
        "get_progress": {
            "name": "get_progress",
            "location": 40,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "df": [
                    "str",
                    "bool"
                ]
            }
        },
        "make_figure": {
            "name": "make_figure",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "data1": [
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "data2": [
                    "str",
                    "Optional[float]",
                    "float",
                    "Sequence[int]",
                    "None",
                    "Dict[int, dict]",
                    "typing.Sequence[int]",
                    "Optional[str]",
                    "dict[int, dict[, ]]",
                    "Optional[bool]",
                    "bool"
                ],
                "outname": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ],
                "hours_per_tick": [
                    "int"
                ]
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 95,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bitcoin-tools-master/plotutils.py": {
        "set_flushes": {
            "name": "set_flushes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "float"
                ]
            }
        },
        "overlay_flushes": {
            "name": "overlay_flushes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "flushes": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "title": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "secondary_y": [
                    "list[]",
                    "int",
                    "Callable",
                    "str"
                ],
                "ylabel": [
                    "typing.Text",
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "ylabel2": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "strip_suffix": {
            "name": "strip_suffix",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "select": {
            "name": "select",
            "location": 38,
            "return": [
                "Tuple[Any, Any, Any]",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Dict[str, Any]"
                ],
                "suffix": [
                    "str"
                ]
            }
        }
    },
    "bitcoin-tools-master/unpack.py": {
        "arrange_fields": {
            "name": "arrange_fields",
            "location": 25,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "fields": [
                    "Set[str]"
                ]
            }
        },
        "split_fields": {
            "name": "split_fields",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ]
            }
        },
        "parse_v1": {
            "name": "parse_v1",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ],
                "output": [
                    "EventData"
                ],
                "events": [
                    "str",
                    "list[dict[, ]]",
                    "int",
                    "List[dict]",
                    "bool"
                ],
                "event_fields": [
                    "str",
                    "int",
                    "Dict[Any, str]"
                ]
            }
        },
        "parse_v2": {
            "name": "parse_v2",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "fields": [
                    "List[str]"
                ],
                "output": [
                    "EventData"
                ],
                "events": [
                    "str",
                    "int",
                    "list[dict[, ]]",
                    "List[dict]",
                    "bool"
                ],
                "event_fields": [
                    "int",
                    "str",
                    "Dict[Any, str]",
                    "dict[typing.Any, str]"
                ]
            }
        },
        "load_events": {
            "name": "load_events",
            "location": 106,
            "return": [
                "EventData"
            ],
            "arguments": {
                "infile": [
                    "TextIO"
                ]
            }
        },
        "create_flushes_frame": {
            "name": "create_flushes_frame",
            "location": 159,
            "return": [
                "int",
                "bool",
                "List[dict]",
                "str",
                "bytes"
            ],
            "arguments": {
                "times": [
                    "List[datetime.datetime]"
                ],
                "flushes": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "create_v1_frame": {
            "name": "create_v1_frame",
            "location": 166,
            "return": [
                "int",
                "pandas.DataFrame",
                "str",
                "bool"
            ],
            "arguments": {
                "times": [
                    "List[datetime.datetime]"
                ],
                "data": [
                    "List[Dict[(str, Any)]]"
                ],
                "columns": [
                    "List[str]"
                ]
            }
        },
        "create_v2_frame": {
            "name": "create_v2_frame",
            "location": 176,
            "return": [
                "int",
                "pandas.DataFrame",
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "List[Dict[(str, Any)]]"
                ],
                "columns": [
                    "List[str]"
                ]
            }
        },
        "choose_input": {
            "name": "choose_input",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "choose_output": {
            "name": "choose_output",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "input_file": [
                    "str"
                ]
            }
        },
        "unpack_data_strict": {
            "name": "unpack_data_strict",
            "location": 219,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "input_file": [
                    "str"
                ]
            }
        },
        "unpack_data": {
            "name": "unpack_data",
            "location": 250,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EventData.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
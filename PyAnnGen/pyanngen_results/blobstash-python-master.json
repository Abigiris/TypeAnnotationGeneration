{
    "blobstash-python-master/setup.py": {},
    "blobstash-python-master/blobstash/base/blobstore.py": {
        "Blob.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "int",
                    "float",
                    "list[str]",
                    "bool",
                    "List[str]",
                    "Union[float, int]"
                ],
                "data": [
                    "int",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "size": [
                    "int",
                    "None",
                    "List[int]",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "Blob.from_data": {
            "name": "from_data",
            "location": 27,
            "return": [
                "Blob"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBlob]"
                ],
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Blob.__hash__": {
            "name": "__hash__",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.__eq__": {
            "name": "__eq__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "Blob.__ne__": {
            "name": "__ne__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "typing.Iterable[T]",
                    "Collection",
                    "typing.Collection",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "Blob.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobsIterator.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "None",
                    "baseplate.lib.metrics.Client",
                    "Optional[str]"
                ]
            }
        },
        "BlobsIterator.parse_data": {
            "name": "parse_data",
            "location": 57,
            "return": [
                "List[Blob]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "BlobStoreClient.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "None"
                ],
                "api_key": [
                    "str",
                    "None"
                ],
                "client": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "BlobStoreClient.put": {
            "name": "put",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blob": [
                    "typing.Type",
                    "str",
                    "Type[Exception]",
                    "bool",
                    "int"
                ]
            }
        },
        "BlobStoreClient.get": {
            "name": "get",
            "location": 81,
            "return": [
                "Blob"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]",
                    "None",
                    "dict[, ]",
                    "Optional",
                    "typing.Optional[]"
                ]
            }
        },
        "BlobStoreClient.iter": {
            "name": "iter",
            "location": 93,
            "return": [
                "BlobsIterator"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "limit": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "per_page": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "BlobStoreClient.__iter__": {
            "name": "__iter__",
            "location": 98,
            "return": [
                "BlobsIterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/blobstash/base/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "api_key": [
                    "str",
                    "None",
                    "float",
                    "bytes",
                    "Tuple[str, str]",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "list",
                    "list[]"
                ],
                "json_encoder": [
                    "str",
                    "int",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "Client.request": {
            "name": "request",
            "location": 19,
            "return": [
                "dict",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "blobstash-python-master/blobstash/base/error.py": {},
    "blobstash-python-master/blobstash/base/iterator.py": {
        "BasePaginationIterator.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "dict[, ]",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "path": [
                    "str"
                ],
                "params": [
                    "dict",
                    "None",
                    "MutableMapping[str, str]",
                    "dict[, ]",
                    "List[Dict]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[dict[, ]]",
                    "str"
                ],
                "limit": [
                    "dict",
                    "None",
                    "MutableMapping[str, str]",
                    "dict[, ]",
                    "List[Dict]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[dict[, ]]",
                    "str"
                ],
                "per_page": [
                    "dict",
                    "None",
                    "MutableMapping[str, str]",
                    "dict[, ]",
                    "List[Dict]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[dict[, ]]",
                    "str"
                ],
                "cursor": [
                    "dict",
                    "None",
                    "MutableMapping[str, str]",
                    "dict[, ]",
                    "List[Dict]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[dict[, ]]",
                    "str"
                ]
            }
        },
        "BasePaginationIterator.parse_resp": {
            "name": "parse_resp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "BasePaginationIterator.do_req": {
            "name": "do_req",
            "location": 39,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "int",
                "Optional[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePaginationIterator.parse_data": {
            "name": "parse_data",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "BasePaginationIterator.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [
                "BasePaginationIterator"
            ],
            "arguments": {
                "self": [
                    "_TBasePaginationIterator"
                ]
            }
        },
        "BasePaginationIterator.__next__": {
            "name": "__next__",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, int]]",
                "dict[str, int]",
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/blobstash/base/kvstore.py": {
        "KeyValue.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "version": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "hash": [
                    "str",
                    "None",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "KeyValue.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValue.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValue.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValue.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "KeyValue.__ne__": {
            "name": "__ne__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "typing.Iterable[T]",
                    "Collection",
                    "typing.Collection",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "KeysIterator.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "None",
                    "baseplate.lib.metrics.Client",
                    "Optional[str]"
                ]
            }
        },
        "KeysIterator.parse_data": {
            "name": "parse_data",
            "location": 52,
            "return": [
                "List[KeyValue]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "Dict[int, str]",
                    "Mapping[int, str]",
                    "Dict[str, Any]",
                    "Type[object]"
                ]
            }
        },
        "KeyVersionsIterator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "KeyVersionsIterator.parse_data": {
            "name": "parse_data",
            "location": 68,
            "return": [
                "List[KeyValue]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "Dict[int, str]",
                    "Mapping[int, str]",
                    "Dict[str, Any]",
                    "Type[object]"
                ]
            }
        },
        "KVStoreClient.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "None"
                ],
                "api_key": [
                    "str",
                    "None"
                ],
                "client": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "KVStoreClient.put": {
            "name": "put",
            "location": 85,
            "return": [
                "KeyValue"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Optional[dict]",
                    "None"
                ],
                "ref": [
                    "typing.Text",
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ],
                "version": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "KVStoreClient.get": {
            "name": "get",
            "location": 95,
            "return": [
                "KeyValue"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict"
                ],
                "version": [
                    "int",
                    "None",
                    "str",
                    "Hashable",
                    "List[str]",
                    "typing.Hashable",
                    "list[str]"
                ]
            }
        },
        "KVStoreClient.get_versions": {
            "name": "get_versions",
            "location": 103,
            "return": [
                "KeyVersionsIterator"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "cursor": [
                    "str",
                    "None",
                    "bool",
                    "list",
                    "dict",
                    "list[]",
                    "dict[, ]"
                ],
                "limit": [
                    "str",
                    "None",
                    "bool",
                    "list",
                    "dict",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "KVStoreClient.iter": {
            "name": "iter",
            "location": 113,
            "return": [
                "KeysIterator"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Callable",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ],
                "limit": [
                    "Callable",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "KVStoreClient.__iter__": {
            "name": "__iter__",
            "location": 116,
            "return": [
                "KeysIterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/blobstash/base/test_utils.py": {
        "BlobStash.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None"
                ],
                "rebuild": [
                    "dict",
                    "bool"
                ]
            }
        },
        "BlobStash.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reindex": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "str"
                ],
                "log_level": [
                    "typing.Text",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "BlobStash.cleanup": {
            "name": "cleanup",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStash.shutdown": {
            "name": "shutdown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/blobstash/base/__init__.py": {},
    "blobstash-python-master/blobstash/docstore/attachment.py": {
        "add_attachment": {
            "name": "add_attachment",
            "location": 25,
            "return": [
                "Attachment"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "fadd_attachment": {
            "name": "fadd_attachment",
            "location": 44,
            "return": [
                "Attachment"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "fileobj": [
                    "str",
                    "bool"
                ],
                "content_type": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "fget_attachment": {
            "name": "fget_attachment",
            "location": 51,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]",
                "Sequence[Sequence[T]]"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "attachment": [
                    "float",
                    "str"
                ]
            }
        },
        "get_attachment": {
            "name": "get_attachment",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ],
                "attachment": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "pathlib.Path",
                    "list[dict[, ]]",
                    "None",
                    "List[Dict]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "Attachment.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pointer": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "node": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Attachment.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/blobstash/docstore/error.py": {},
    "blobstash-python-master/blobstash/docstore/query.py": {
        "_lua_repr": {
            "name": "_lua_repr",
            "location": 41,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ]
            }
        },
        "LuaScript.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LuaStoredQuery.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "type",
                    "typing.Type"
                ],
                "query_args": [
                    "Callable",
                    "typing.Callable[, ]",
                    "BaseException",
                    "Optional[Callable[..., None]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LogicalOperator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogicalOperator.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clause": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Not.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuaShortQuery.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any, str]]",
                    "typing.Any",
                    "Union[str, int]",
                    "int"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "operator": [
                    "bytes",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "LuaShortQuery.query": {
            "name": "query",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuaShortQuery.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuaShortQueryComplex.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "LuaShortQueryComplex.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetaQuery.__getitem__": {
            "name": "__getitem__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "_MetaQuery"
                ],
                "key": [
                    "Optional[List[str]]",
                    "list[str]",
                    "Sequence[str]",
                    "str",
                    "None",
                    "dict",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ]
            }
        },
        "Q.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "Q.__getitem__": {
            "name": "__getitem__",
            "location": 100,
            "return": [
                "_TQ"
            ],
            "arguments": {
                "self": [
                    "_TQ"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Q.path": {
            "name": "path",
            "location": 108,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q.any": {
            "name": "any",
            "location": 114,
            "return": [
                "LuaShortQueryComplex"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "bytes",
                    "float",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "Q.not_any": {
            "name": "not_any",
            "location": 124,
            "return": [
                "LuaShortQueryComplex"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "bytes",
                    "float",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "Q.contains": {
            "name": "contains",
            "location": 134,
            "return": [
                "LuaShortQueryComplex"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Q.__eq__": {
            "name": "__eq__",
            "location": 150,
            "return": [
                "LuaShortQuery"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str, List]",
                    "list[]",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]"
                ]
            }
        },
        "Q.__ne__": {
            "name": "__ne__",
            "location": 153,
            "return": [
                "LuaShortQuery"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str, List]",
                    "list[]",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]"
                ]
            }
        },
        "Q.__lt__": {
            "name": "__lt__",
            "location": 156,
            "return": [
                "LuaShortQuery"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str, List]",
                    "list[]",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]"
                ]
            }
        },
        "Q.__le__": {
            "name": "__le__",
            "location": 159,
            "return": [
                "LuaShortQuery"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str, List]",
                    "list[]",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]"
                ]
            }
        },
        "Q.__ge__": {
            "name": "__ge__",
            "location": 162,
            "return": [
                "LuaShortQuery"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str, List]",
                    "list[]",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]"
                ]
            }
        },
        "Q.__gt__": {
            "name": "__gt__",
            "location": 165,
            "return": [
                "LuaShortQuery"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[str, List]",
                    "list[]",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]"
                ]
            }
        }
    },
    "blobstash-python-master/blobstash/docstore/__init__.py": {
        "_fill_pointers": {
            "name": "_fill_pointers",
            "location": 239,
            "return": [],
            "arguments": {
                "doc": [],
                "pointers": []
            }
        },
        "JSONEncoder.default": {
            "name": "default",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_Document.__setitem__": {
            "name": "__setitem__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "_Document.checkpoint": {
            "name": "checkpoint",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Document.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ID.inject": {
            "name": "inject",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "ID.version": {
            "name": "version",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.id": {
            "name": "id",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.created": {
            "name": "created",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.updated": {
            "name": "updated",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID._parse_dt": {
            "name": "_parse_dt",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "dt_str": []
            }
        },
        "ID.__hash__": {
            "name": "__hash__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.__eq__": {
            "name": "__eq__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__ne__": {
            "name": "__ne__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__repr__": {
            "name": "__repr__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.__str__": {
            "name": "__str__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocVersionsIterator.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "col_name": [],
                "_id": [],
                "params": [],
                "limit": [],
                "cursor": []
            }
        },
        "DocVersionsIterator.parse_data": {
            "name": "parse_data",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "DocsQueryIterator.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "collection": [],
                "query": [],
                "script": [],
                "stored_query": [],
                "stored_query_args": [],
                "as_of": [],
                "params": [],
                "limit": [],
                "cursor": [],
                "per_page": []
            }
        },
        "DocsQueryIterator.parse_data": {
            "name": "parse_data",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "name": []
            }
        },
        "Collection.insert": {
            "name": "insert",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "Collection.update": {
            "name": "update",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "Collection.get_by_id": {
            "name": "get_by_id",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "_id": []
            }
        },
        "Collection.get_versions": {
            "name": "get_versions",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "_id": []
            }
        },
        "Collection.delete": {
            "name": "delete",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "doc_or_docs": []
            }
        },
        "Collection.map_reduce": {
            "name": "map_reduce",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "map_": [],
                "reduce_": [],
                "as_of": []
            }
        },
        "Collection.query": {
            "name": "query",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "script": [],
                "stored_query": [],
                "stored_query_args": [],
                "as_of": [],
                "limit": [],
                "cursor": [],
                "per_page": []
            }
        },
        "Collection.get": {
            "name": "get",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "script": []
            }
        },
        "Collection.__repr__": {
            "name": "__repr__",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Collection.__str__": {
            "name": "__str__",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocStoreClient.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "base_url": [],
                "api_key": []
            }
        },
        "DocStoreClient.__getitem__": {
            "name": "__getitem__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DocStoreClient.__getattr__": {
            "name": "__getattr__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DocStoreClient.collection": {
            "name": "collection",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DocStoreClient.collections": {
            "name": "collections",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocStoreClient.fadd_attachment": {
            "name": "fadd_attachment",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fileobj": [],
                "content_type": []
            }
        },
        "DocStoreClient.add_attachment": {
            "name": "add_attachment",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "DocStoreClient.fget_attachment": {
            "name": "fget_attachment",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "attachment": []
            }
        },
        "DocStoreClient.get_attachment": {
            "name": "get_attachment",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "attachment": [],
                "path": []
            }
        },
        "DocStoreClient.__repr__": {
            "name": "__repr__",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DocStoreClient.__str__": {
            "name": "__str__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/blobstash/filetree/__init__.py": {
        "file_hash": {
            "name": "file_hash",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]"
                ],
                "ref": [
                    "bool",
                    "str",
                    "int"
                ],
                "size": [
                    "bool",
                    "str",
                    "int"
                ],
                "type_": [
                    "bool",
                    "str",
                    "int"
                ],
                "url": [
                    "bool",
                    "str",
                    "int"
                ],
                "metadata": [
                    "bool",
                    "str",
                    "int"
                ],
                "children": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Node.from_resp": {
            "name": "from_resp",
            "location": 45,
            "return": [
                "Node"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TNode]"
                ],
                "node": [
                    "str"
                ]
            }
        },
        "Node.is_dir": {
            "name": "is_dir",
            "location": 65,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_file": {
            "name": "is_file",
            "location": 68,
            "return": [
                "bool",
                "pathlib.Path",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Node.__ne__": {
            "name": "__ne__",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "typing.Iterable[T]",
                    "Collection",
                    "typing.Collection",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "FS.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "name": [
                    "str",
                    "None",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "ref": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "FS.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FS._path": {
            "name": "_path",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "bytes",
                    "bool",
                    "IO",
                    "typing.IO",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FS.node": {
            "name": "node",
            "location": 114,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "FS.fput_node": {
            "name": "fput_node",
            "location": 128,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ],
                "fileobj": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ],
                "content_type": [
                    "None",
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ]
            }
        },
        "FS.put_node": {
            "name": "put_node",
            "location": 139,
            "return": [
                "bool",
                "dict[str, typing.Any]",
                "dict",
                "Callable",
                "dict[, ]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "tuple[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[Tuple[float, float]]",
                    "list[tuple[typing.Union[float,float]]]"
                ],
                "src_path": [
                    "pathlib.Path"
                ]
            }
        },
        "FS.download": {
            "name": "download",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst_path": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "FS._download": {
            "name": "_download",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "int",
                    "bool",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "root_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "dst_path": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FS.upload": {
            "name": "upload",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "FS._fs_from_dir_iter": {
            "name": "_fs_from_dir_iter",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "List[List[str]]"
                ],
                "base_root": [
                    "None",
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "typing.IO",
                    "Union[pathlib3x.Path, IO[str], None]"
                ]
            }
        },
        "FileTreeClient.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "None"
                ],
                "api_key": [
                    "str",
                    "None"
                ],
                "client": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "FileTreeClient.fput_node": {
            "name": "fput_node",
            "location": 213,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "fileobj": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "content_type": [
                    "str",
                    "None",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FileTreeClient.put_node": {
            "name": "put_node",
            "location": 223,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[pathlib.Path]"
                ]
            }
        },
        "FileTreeClient.fget_node": {
            "name": "fget_node",
            "location": 229,
            "return": [
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "ref_or_node": [
                    "int",
                    "float",
                    "Iterable[T]",
                    "typing.Iterable[T]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "FileTreeClient.get_node": {
            "name": "get_node",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_or_node": [
                    "str",
                    "Optional[Mapping]",
                    "typing.Mapping",
                    "float",
                    "int",
                    "Type['AbstractIntegrationConversation']",
                    "None",
                    "typing.Type",
                    "Dict[int, int]",
                    "dict[int, int]"
                ],
                "path": [
                    "str",
                    "Path",
                    "pathlib.Path",
                    "Type[T]"
                ]
            }
        },
        "FileTreeClient.node": {
            "name": "node",
            "location": 257,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "List[str]",
                    "Exception",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, bool]]"
                ]
            }
        },
        "FileTreeClient.fs": {
            "name": "fs",
            "location": 263,
            "return": [
                "FS"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "ref": [
                    "str",
                    "None"
                ],
                "prefix": [
                    "str",
                    "None"
                ]
            }
        },
        "FileTreeClient.__repr__": {
            "name": "__repr__",
            "location": 267,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTreeClient.__str__": {
            "name": "__str__",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blobstash-python-master/docs/conf.py": {},
    "blobstash-python-master/tests/test_blobstash_base.py": {
        "test_test_utils": {
            "name": "test_test_utils",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blobstore_client": {
            "name": "test_blobstore_client",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kvstore_client": {
            "name": "test_kvstore_client",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blobstore_client.by_hash": {
            "name": "by_hash",
            "location": 59,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "blob": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "blobstash-python-master/tests/test_blobstash_docstore.py": {
        "test_docstore": {
            "name": "test_docstore",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "blobstash-python-master/tests/test_blobstash_filetree.py": {
        "test_filetree_node_fileobj": {
            "name": "test_filetree_node_fileobj",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filetree_node_file": {
            "name": "test_filetree_node_file",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filetree_fs_upload_download": {
            "name": "test_filetree_fs_upload_download",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filetree_fs": {
            "name": "test_filetree_fs",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
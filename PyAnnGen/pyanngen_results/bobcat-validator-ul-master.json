{
    "bobcat-validator-ul-master/cronConf/setup.py": {},
    "bobcat-validator-ul-master/cronConf/cron_conf/config.py": {},
    "bobcat-validator-ul-master/cronConf/cron_conf/main.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "CronConf.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CronConf.run": {
            "name": "run",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bobcat-validator-ul-master/cronConf/cron_conf/schema_validator.py": {
        "validate_config_schema": {
            "name": "validate_config_schema",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "SchemaValidator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schemas": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaValidator.validate": {
            "name": "validate",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[int, None]",
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/cronConf/cron_conf/__init__.py": {},
    "bobcat-validator-ul-master/DisplayDriver/UL-DisplayDriver.py": {
        "DisplayText.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "fontSize": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "color": [
                    "tuple[int]"
                ]
            }
        },
        "Sound.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Sound.play_tag": {
            "name": "play_tag",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Sound.play_status": {
            "name": "play_status",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "Display.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [],
                "config": []
            }
        },
        "Display.show": {
            "name": "show",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.set_background": {
            "name": "set_background",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.update_display": {
            "name": "update_display",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "displayTexts": [],
                "icon": [],
                "translation": [
                    "None"
                ]
            }
        },
        "Display.set_icon": {
            "name": "set_icon",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icon": []
            }
        },
        "Display.idle": {
            "name": "idle",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_result": []
            }
        },
        "Display.feedback": {
            "name": "feedback",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        }
    },
    "bobcat-validator-ul-master/feeder/setup.py": {},
    "bobcat-validator-ul-master/feeder/bobcat_feeder/base_service.py": {
        "BaseService.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "dispatcher": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "dothebackup.types.CONFIGTYPE",
                    "Mapping[str, Any]"
                ]
            }
        },
        "BaseService.get_channel_functions": {
            "name": "get_channel_functions",
            "location": 21,
            "return": [
                "int",
                "Dict[str, Dict[str, Any]]",
                "Optional[Callable]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Callable",
                    "typing.Callable[, ]",
                    "type",
                    "typing.Type",
                    "str",
                    "Sequence",
                    "bool",
                    "typing.Sequence[]",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "BaseService.register_channel_function": {
            "name": "register_channel_function",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "type",
                    "logging.Logger",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "config": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BaseService.call_channel": {
            "name": "call_channel",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "channel_func": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "int",
                    "list",
                    "list[]",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ],
                "packet": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "int",
                    "list",
                    "list[]",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "BaseService.run": {
            "name": "run",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/configuration.py": {
        "dict_merge": {
            "name": "dict_merge",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "dict[str, typing.Any]",
                "dict",
                "dict[, ]",
                "list",
                "list[]"
            ],
            "arguments": {
                "orig_dict": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "Callable",
                    "list"
                ],
                "new_dict": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Tuple[str, Set[str]]",
                    "tuple[typing.Union[str,set[str]]]",
                    "Tuple[List[Any], int]",
                    "tuple[typing.Union[list[typing.Any],int]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "str"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "Configuration.filename": {
            "name": "filename",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool"
                ]
            }
        },
        "Configuration.load_external_data": {
            "name": "load_external_data",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.create_from_config_file": {
            "name": "create_from_config_file",
            "location": 45,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "filename": [
                    "typing.Text",
                    "str",
                    "logging.Logger"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/data_packet.py": {
        "DataPacket.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "list",
                    "list[]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "metadata": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "DataPacket.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Mapping",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataPacket.__ne__": {
            "name": "__ne__",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "DataPacket.as_bytes": {
            "name": "as_bytes",
            "location": 22,
            "return": [
                "bytes",
                "dict",
                "Callable",
                "Dict[str, Any]",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataPacket.as_str": {
            "name": "as_str",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataPacket.format": {
            "name": "format",
            "location": 41,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataPacket.outputs": {
            "name": "outputs",
            "location": 45,
            "return": [
                "str",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataPacket.create_data_packet": {
            "name": "create_data_packet",
            "location": 49,
            "return": [
                "str",
                "int",
                "float",
                "List[str]",
                "Exception"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "format": [
                    "str",
                    "bool"
                ],
                "output": [
                    "str",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/dispatcher.py": {
        "Dispatcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "configuration.Configuration"
                ],
                "loop": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Dispatcher.add_service": {
            "name": "add_service",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "dict",
                    "dict[, ]"
                ],
                "config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Dispatcher.register_channel_function": {
            "name": "register_channel_function",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.AbstractSet",
                    "AbstractSet[\"OntologyNode\"]",
                    "str",
                    "typing.Match",
                    "bool",
                    "typing.Type",
                    "Match",
                    "list[]",
                    "Type",
                    "list"
                ],
                "func": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "Dispatcher.do_output": {
            "name": "do_output",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "bytes",
                    "int",
                    "typing.Any",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "data": [
                    "int",
                    "Sequence",
                    "typing.Sequence[]",
                    "dict",
                    "dict[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "asyncio.Task",
                    "None"
                ]
            }
        },
        "Dispatcher.run": {
            "name": "run",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/gps_service.py": {
        "GpsService.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "dispatcher": [
                    "dict[, ]",
                    "dict",
                    "dispatcher.Dispatcher"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/journey_service.py": {
        "JourneyService.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "dispatcher": [
                    "dict[, ]",
                    "dict",
                    "dispatcher.Dispatcher"
                ]
            }
        },
        "JourneyService.channel_service": {
            "name": "channel_service",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict"
                ],
                "dispatcher": [
                    "dict[, ]",
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict[, ]",
                    "dispatcher.Dispatcher",
                    "dict"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/main.py": {
        "setup_dispatcher": {
            "name": "setup_dispatcher",
            "location": 11,
            "return": [
                "Dispatcher",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "loop": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/mqtt_service.py": {
        "MQTTService.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "dispatcher": [
                    "dict",
                    "dispatcher.Dispatcher"
                ]
            }
        },
        "MQTTService.get_qos": {
            "name": "get_qos",
            "location": 88,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ]
            }
        },
        "MQTTService.channel_mqtt_gps": {
            "name": "channel_mqtt_gps",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, int]]",
                    "Mapping[str, str]"
                ],
                "dispatcher": [
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "MQTTService.channel_mqtt_time": {
            "name": "channel_mqtt_time",
            "location": 117,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "MutableMapping[str, Any]",
                    "int"
                ],
                "dispatcher": [
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "MQTTService.channel_mqtt_journey": {
            "name": "channel_mqtt_journey",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, int]]",
                    "Mapping[str, str]"
                ],
                "dispatcher": [
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "MQTTService.channel_mqtt_next_stop": {
            "name": "channel_mqtt_next_stop",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, int]]",
                    "Mapping[str, str]"
                ],
                "dispatcher": [
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "MQTTService.channel_mqtt_last_stop": {
            "name": "channel_mqtt_last_stop",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Mapping[str, str]"
                ],
                "dispatcher": [
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "MQTTService.get_mqtt_config": {
            "name": "get_mqtt_config",
            "location": 191,
            "return": [
                "Dict[str, Any]",
                "raiden.constants.Environment",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQTTService.get_default_will": {
            "name": "get_default_will",
            "location": 202,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/stop_service.py": {
        "GeoPoint.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "float",
                    "bool"
                ],
                "long": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "StopService.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "dispatcher": [
                    "dict[, ]",
                    "dict",
                    "dispatcher.Dispatcher"
                ]
            }
        },
        "StopService.channel_route": {
            "name": "channel_route",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str"
                ],
                "dispatcher": [
                    "dict[, ]",
                    "dispatcher.Dispatcher",
                    "dict"
                ],
                "config": [
                    "dict[, ]",
                    "dispatcher.Dispatcher",
                    "dict"
                ]
            }
        },
        "StopService.channel_geofence": {
            "name": "channel_geofence",
            "location": 47,
            "return": [
                "None",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "dispatcher": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Union[int,bool]]",
                    "Dict[str, Union[int, bool]]",
                    "str",
                    "Union[Dict, str]",
                    "asyncio.AbstractEventLoop"
                ],
                "config": [
                    "dict[, ]",
                    "dispatcher.Dispatcher",
                    "dict"
                ]
            }
        },
        "StopService.isInGeofence": {
            "name": "isInGeofence",
            "location": 68,
            "return": [
                "Callable[[T], bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stopPoint": [
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ],
                "point": [
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "StopService.findStop": {
            "name": "findStop",
            "location": 75,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str",
                    "float",
                    "Union[str, int]"
                ]
            }
        },
        "StopService.validateStop": {
            "name": "validateStop",
            "location": 85,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "StopService.getNextStop": {
            "name": "getNextStop",
            "location": 92,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "dict[typing.Text, typing.Text]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lastStop": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[str]",
                    "Iterable[str]",
                    "set[str]",
                    "List[str]",
                    "Set[str]"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/__init__.py": {},
    "bobcat-validator-ul-master/feeder/bobcat_feeder/gps/file.py": {
        "Listner.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "service": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Listner.disconnect": {
            "name": "disconnect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listner.getPos": {
            "name": "getPos",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listner.generateList": {
            "name": "generateList",
            "location": 39,
            "return": [
                "list[dict[typing.Text, ]]",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Listner.createNmeaString": {
            "name": "createNmeaString",
            "location": 59,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "longitude": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Listner.decdeg2dms": {
            "name": "decdeg2dms",
            "location": 72,
            "return": [
                "str",
                "tuple[typing.Union[str,int,typing.Callable[, ]]]"
            ],
            "arguments": {
                "self": [],
                "dd": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dirpos": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "dirneg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "bobcat-validator-ul-master/feeder/bobcat_feeder/gps/router.py": {
        "Listner.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "service": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Listner.disconnect": {
            "name": "disconnect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listner.getPos": {
            "name": "getPos",
            "location": 30,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listner.get_gps_data": {
            "name": "get_gps_data",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    }
}
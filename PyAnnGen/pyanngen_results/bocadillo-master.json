{
    "bocadillo-master/setup.py": {},
    "bocadillo-master/bocadillo/applications.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "App.include_router": {
            "name": "include_router",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "str",
                    "list[str]",
                    "int",
                    "List[str]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "App.mount": {
            "name": "mount",
            "location": 70,
            "return": [
                "Callable",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "int"
                ],
                "app": [
                    "str",
                    "int"
                ]
            }
        },
        "App.route": {
            "name": "route",
            "location": 84,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "methods": [
                    "str",
                    "None",
                    "bytes",
                    "List[str]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "App.websocket_route": {
            "name": "websocket_route",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bool",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "App.add_error_handler": {
            "name": "add_error_handler",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_cls": [
                    "int",
                    "str"
                ],
                "handler": [
                    "int",
                    "str"
                ]
            }
        },
        "App.error_handler": {
            "name": "error_handler",
            "location": 134,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "exception_cls": [
                    "typing.Type",
                    "str",
                    "Type[Exception]",
                    "int",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "list[str]",
                    "Iterable[T]",
                    "List[str]",
                    "dict[str, object]",
                    "list[object]",
                    "Dict[str, object]",
                    "List[object]"
                ]
            }
        },
        "App.add_middleware": {
            "name": "add_middleware",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "middleware_cls": [
                    "bool",
                    "Optional[Mapping]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "App.on": {
            "name": "on",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "handler": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "App.error_handler.wrapper": {
            "name": "wrapper",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "bytes",
                    "List[str]",
                    "BaseException"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/app_types.py": {
        "ASGIApp.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "dict",
                    "dict[, ]"
                ],
                "receive": [
                    "dict",
                    "dict[, ]"
                ],
                "send": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/compat.py": {
        "check_async": {
            "name": "check_async",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "Callable[[T], bool]"
                ],
                "reason": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "Callable[[T], bool]"
                ]
            }
        },
        "is_asgi3": {
            "name": "is_asgi3",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "empty_wsgi_app": {
            "name": "empty_wsgi_app",
            "location": 52,
            "return": [
                "str",
                "Callable",
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "asyncnullcontext.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "enter_result": [
                    "float",
                    "None",
                    "Dict[str, Any]",
                    "bool",
                    "Counter",
                    "dict[str, typing.Any]",
                    "typing.Counter",
                    "int"
                ]
            }
        },
        "empty_wsgi_app.wsgi": {
            "name": "wsgi",
            "location": 55,
            "return": [
                "list[bytes]",
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "nullcontext": {
            "name": "nullcontext",
            "location": 11,
            "return": [
                "",
                "typing.Generator[typing.Union[None,list[str],bool]]"
            ],
            "arguments": {
                "enter_result": [
                    "None",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/config.py": {
        "configure": {
            "name": "configure",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "App"
                ],
                "settings_obj": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LazySettings.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySettings.configure": {
            "name": "configure",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "None",
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LazySettings.configured": {
            "name": "configured",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySettings.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LazySettings.__setattr__": {
            "name": "__setattr__",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "LazySettings.__contains__": {
            "name": "__contains__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "LazySettings.get": {
            "name": "get",
            "location": 76,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "LazySettings._clear": {
            "name": "_clear",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bocadillo-master/bocadillo/constants.py": {},
    "bocadillo-master/bocadillo/converters.py": {
        "convert_arguments": {
            "name": "convert_arguments",
            "location": 109,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "type",
                    "typing.Type"
                ],
                "converter_class": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Converter.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Set[str]",
                    "set[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Converter.convert": {
            "name": "convert",
            "location": 43,
            "return": [
                "tuple[]",
                "int",
                "float",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "ViewConverter.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[int, float, decimal.Decimal]",
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ViewConverter.get_query_params": {
            "name": "get_query_params",
            "location": 96,
            "return": [
                "builtins.dict",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "ViewConverter.convert": {
            "name": "convert",
            "location": 99,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        }
    },
    "bocadillo-master/bocadillo/deprecation.py": {
        "deprecated": {
            "name": "deprecated",
            "location": 11,
            "return": [
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "since": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[str, Tuple[str, str]]",
                    "tuple[typing.Union[str,str]]"
                ],
                "removal": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[str, Tuple[str, str]]",
                    "tuple[typing.Union[str,str]]"
                ],
                "alternative": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[str, Tuple[str, str]]",
                    "tuple[typing.Union[str,str]]"
                ],
                "update_doc": [
                    "bool",
                    "str",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "warn_on_instanciate": [
                    "bool",
                    "str",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ]
            }
        },
        "deprecated.get_message": {
            "name": "get_message",
            "location": 45,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "obj": [
                    "Type[T]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "deprecated.show_warning": {
            "name": "show_warning",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "Union[str, List[str]]",
                    "bool",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "deprecated.get_doc_warning": {
            "name": "get_doc_warning",
            "location": 58,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "deprecated.add_warning": {
            "name": "add_warning",
            "location": 61,
            "return": [
                "wrapped",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "float"
                ]
            }
        },
        "ReplacedBy.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "List[float]",
                    "list[float]",
                    "bool",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "str",
                    "list",
                    "list[]"
                ],
                "removal": [
                    "List[float]",
                    "list[float]",
                    "bool",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "str",
                    "list",
                    "list[]"
                ],
                "obj_root": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ],
                "doc_root": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "ReplacedBy.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fragment": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "deprecated.add_warning.wrapped": {
            "name": "wrapped",
            "location": 83,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "deprecated.add_warning.wrapped.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bocadillo-master/bocadillo/errors.py": {
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "detail": [
                    "typing.Text",
                    "int",
                    "str",
                    "http.HTTPStatus",
                    "bool"
                ]
            }
        },
        "HTTPError.status_code": {
            "name": "status_code",
            "location": 39,
            "return": [
                "bool",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPError.status_phrase": {
            "name": "status_phrase",
            "location": 44,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPError.title": {
            "name": "title",
            "location": 49,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPError.as_json": {
            "name": "as_json",
            "location": 53,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPError.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bocadillo-master/bocadillo/error_handlers.py": {},
    "bocadillo-master/bocadillo/hooks.py": {
        "_with_hook": {
            "name": "_with_hook",
            "location": 80,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "hook_type": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "func": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "handler": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Hooks.before": {
            "name": "before",
            "location": 25,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "hook": [
                    "bool",
                    "tuple",
                    "tuple[]",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Hooks.after": {
            "name": "after",
            "location": 33,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "hook": [
                    "bool",
                    "tuple",
                    "tuple[]",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Hooks._prepare": {
            "name": "_prepare",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "hook": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Hooks._hook_decorator": {
            "name": "_hook_decorator",
            "location": 64,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hook_type": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "hook": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "Hooks._hook_decorator.attach_hook": {
            "name": "attach_hook",
            "location": 69,
            "return": [
                "tuple",
                "Type[Any]"
            ],
            "arguments": {
                "view": [
                    "View",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/injection.py": {},
    "bocadillo-master/bocadillo/middleware.py": {
        "MiddlewareMeta.__new__": {
            "name": "__new__",
            "location": 14,
            "return": [
                "str",
                "Callable[[str], T]",
                "dict[, ]",
                "typing.OrderedDict",
                "list[str]",
                "dict[str, str]",
                "list[]"
            ],
            "arguments": {
                "mcs": [
                    "str",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ],
                "name": [
                    "str",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ],
                "bases": [
                    "str",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ],
                "namespace": [
                    "str",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ]
            }
        },
        "Middleware.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ExceptionMiddleware.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app.App",
                    "aiohttp.web.Request"
                ],
                "handlers": []
            }
        },
        "ExceptionMiddleware.add_exception_handler": {
            "name": "add_exception_handler",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_class": [
                    "Type[BaseException]",
                    "typing.Type",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "handler": [
                    "str",
                    "app_types.ErrorHandler",
                    "Exception",
                    "BaseException"
                ]
            }
        },
        "ExceptionMiddleware._get_exception_handler": {
            "name": "_get_exception_handler",
            "location": 86,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "float",
                    "BaseException"
                ]
            }
        },
        "ServerErrorMiddleware.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app.App",
                    "aiohttp.web.Request"
                ],
                "handler": [
                    "str",
                    "App"
                ]
            }
        },
        "RequestResponseMiddleware.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app.App",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/plugins.py": {
        "_builtin": {
            "name": "_builtin",
            "location": 26,
            "return": [
                "Dict[str, Dict[str, int]]",
                "int",
                "Dict[str, Any]",
                "list[]",
                "str",
                "typing.Callable[[], None]"
            ],
            "arguments": {
                "func": [
                    "int",
                    "list",
                    "list[]",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "use_providers": {
            "name": "use_providers",
            "location": 32,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "App",
                    "flaskapp.App"
                ]
            }
        },
        "use_allowed_hosts": {
            "name": "use_allowed_hosts",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]",
                    "App",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "use_cors": {
            "name": "use_cors",
            "location": 70,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]",
                    "App",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "use_gzip": {
            "name": "use_gzip",
            "location": 93,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "App",
                    "int",
                    "None",
                    "Optional[bool]"
                ]
            }
        },
        "use_hsts": {
            "name": "use_hsts",
            "location": 114,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]",
                    "App",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "use_sessions": {
            "name": "use_sessions",
            "location": 131,
            "return": [
                "None",
                "DefaultDict",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "float",
                "OrderedDict"
            ],
            "arguments": {
                "app": [
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]",
                    "App",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "use_staticfiles": {
            "name": "use_staticfiles",
            "location": 169,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "typing.Type",
                    "App",
                    "dict[, ]",
                    "type",
                    "None",
                    "Optional[dict]",
                    "sphinx.config.Config"
                ]
            }
        },
        "use_path_conversion_error_handling": {
            "name": "use_path_conversion_error_handling",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int",
                    "App",
                    "bocadillo.App"
                ]
            }
        },
        "use_typesystem_validation_error_handling": {
            "name": "use_typesystem_validation_error_handling",
            "location": 202,
            "return": [
                "None",
                "str",
                "Optional[bool]",
                "Dict[str, Any]",
                "DefaultDict"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "App",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "setup_plugins": {
            "name": "setup_plugins",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "App",
                    "asyncworker.App"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/redirection.py": {
        "Redirect.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "permanent": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Redirect.status_code": {
            "name": "status_code",
            "location": 15,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redirect.response": {
            "name": "response",
            "location": 19,
            "return": [
                "RedirectResponse",
                "bool",
                "\"User\"",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bocadillo-master/bocadillo/request.py": {},
    "bocadillo-master/bocadillo/response.py": {
        "_content_setter": {
            "name": "_content_setter",
            "location": 20,
            "return": [],
            "arguments": {
                "content_type": [],
                "serializer": [
                    "str"
                ],
                "doc": [
                    "None"
                ]
            }
        },
        "_content_setter.fset": {
            "name": "fset",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "res": [],
                "value": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Response.file": {
            "name": "file",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "attach": [
                    "bool"
                ]
            }
        },
        "Response.background": {
            "name": "background",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Response._background_task": {
            "name": "_background_task",
            "location": 138,
            "return": [
                "BackgroundTask",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.stream": {
            "name": "stream",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "None"
                ],
                "raise_on_disconnect": [
                    "bool"
                ]
            }
        },
        "Response.event_stream": {
            "name": "event_stream",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "None"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/routing.py": {
        "_join": {
            "name": "_join",
            "location": 19,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "redirect_trailing_slash_enabled": {
            "name": "redirect_trailing_slash_enabled",
            "location": 256,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "BaseRoute.matches": {
            "name": "matches",
            "location": 24,
            "return": [
                "typing.Tuple[builtins.bool, builtins.dict]",
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "dict",
                    "dict[, ]",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Patterned.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "int",
                    "Iterable[str]"
                ],
                "view": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Patterned.pattern": {
            "name": "pattern",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRoute.matches": {
            "name": "matches",
            "location": 44,
            "return": [
                "bool",
                "tuple[typing.Union[bool,dict[, ]]]",
                "tuple[typing.Union[bool,dict[typing.Text, typing.Union[dict[, ],str,None]]]]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "Union[str, Tuple[Any]]",
                    "tuple[typing.Any]"
                ]
            }
        },
        "WebSocketRoute.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "Dict[str, object]",
                    "dict[str, object]"
                ],
                "view": [
                    "str",
                    "Dict[str, object]",
                    "dict[str, object]"
                ]
            }
        },
        "WebSocketRoute.matches": {
            "name": "matches",
            "location": 64,
            "return": [
                "bool",
                "tuple[typing.Union[bool,dict[, ]]]",
                "tuple[typing.Union[bool,dict[typing.Text, typing.Union[dict[, ],str,None]]]]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "Union[str, Tuple[Any]]",
                    "tuple[typing.Any]"
                ]
            }
        },
        "Mount.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool"
                ],
                "app": [
                    "str",
                    "starlette.types.ASGIApp",
                    "dict[str, typing.Any]",
                    "app_types.ASGIApp",
                    "Dict[str, Any]"
                ]
            }
        },
        "Mount.matches": {
            "name": "matches",
            "location": 87,
            "return": [
                "bool",
                "tuple[typing.Union[bool,dict[typing.Text, ]]]",
                "tuple[typing.Union[bool,dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "float",
                    "Callable[[T], bool]",
                    "dict"
                ]
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.add_route": {
            "name": "add_route",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "float",
                    "int"
                ]
            }
        },
        "Router.include": {
            "name": "include",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]",
                    "None"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "defx.view.View",
                    "sublime.View",
                    "Exception"
                ]
            }
        },
        "Router.mount": {
            "name": "mount",
            "location": 143,
            "return": [
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "app": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Router.on": {
            "name": "on",
            "location": 147,
            "return": [
                "None",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "jumeaux.domain.config.vo.Config"
                ],
                "handler": [
                    "jumeaux.domain.config.vo.Config",
                    "None"
                ]
            }
        },
        "Router.route": {
            "name": "route",
            "location": 159,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "methods": [
                    "str",
                    "None",
                    "Callable",
                    "List[str]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "Router.websocket_route": {
            "name": "websocket_route",
            "location": 174,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bool",
                    "Tuple[int]",
                    "tuple[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Router._find_route": {
            "name": "_find_route",
            "location": 209,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Tuple[Literal, Literal]",
                    "int",
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "float"
                ]
            }
        },
        "Router.route.decorate": {
            "name": "decorate",
            "location": 166,
            "return": [
                "HTTPRoute"
            ],
            "arguments": {
                "view": []
            }
        },
        "Router.websocket_route.decorate": {
            "name": "decorate",
            "location": 193,
            "return": [
                "HTTPRoute",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "view": [
                    "model.View",
                    "sublime.View",
                    "View"
                ]
            }
        },
        "Router.on.register": {
            "name": "register",
            "location": 150,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Tuple[int, Any]",
                    "int",
                    "Exception",
                    "starlette.types.Scope",
                    "starlette.types.Send"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/sse.py": {
        "server_event.__new__": {
            "name": "__new__",
            "location": 38,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "name": [
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "dict[, ]",
                    "str",
                    "Optional[List[str]]",
                    "list[int]",
                    "bool",
                    "list[str]",
                    "Type[T]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "server_event.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "None",
                    "str",
                    "Union[str, Sequence]",
                    "bool",
                    "typing.Sequence[]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/staticfiles.py": {
        "static": {
            "name": "static",
            "location": 8,
            "return": [
                "WhiteNoise",
                "str",
                "Optional[int]",
                "Callable",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/streaming.py": {
        "stream_until_disconnect": {
            "name": "stream_until_disconnect",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "req": [
                    "str",
                    "bool"
                ],
                "source": [
                    "str",
                    "bool"
                ],
                "raise_on_disconnect": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/templates.py": {
        "Templates.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Templates.directory": {
            "name": "directory",
            "location": 49,
            "return": [
                "",
                "str",
                "typing.Final",
                "dict[, ]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Templates.context": {
            "name": "context",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Templates._loader": {
            "name": "_loader",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Templates._get_template": {
            "name": "_get_template",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Templates._enable_async": {
            "name": "_enable_async",
            "location": 69,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Templates.render_sync": {
            "name": "render_sync",
            "location": 99,
            "return": [
                "str",
                "bool",
                "Dict[str, List[Any]]",
                "pathlib.Path",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Templates.render_string": {
            "name": "render_string",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/testing.py": {
        "create_client": {
            "name": "create_client",
            "location": 18,
            "return": [
                "TestClient",
                "str",
                "flaskapp.App"
            ],
            "arguments": {
                "app": [
                    "str",
                    "App",
                    "apistar.interfaces.App",
                    "bocadillo.App"
                ]
            }
        },
        "ServerURL.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "str",
                "List[Tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "LiveServer.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "str",
                    "starlette.types.ASGIApp",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "ready_timeout": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "stop_timeout": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "LiveServer.url": {
            "name": "url",
            "location": 82,
            "return": [
                "ServerURL",
                "str",
                "Dict[str, str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveServer.__enter__": {
            "name": "__enter__",
            "location": 91,
            "return": [
                "LiveServer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveServer.__exit__": {
            "name": "__exit__",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bocadillo-master/bocadillo/urlparse.py": {
        "convert_part": {
            "name": "convert_part",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "converter": [
                    "str",
                    "Union[List[str], str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "compile_path": {
            "name": "compile_path",
            "location": 21,
            "return": [
                "str",
                "tuple[typing.Text]"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "bytes",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes",
                    "List[List[float]]"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 56,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/utils.py": {
        "override_env": {
            "name": "override_env",
            "location": 6,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "variable": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/views.py": {
        "get_handlers": {
            "name": "get_handlers",
            "location": 25,
            "return": [
                "dict[, ]",
                "str",
                "List[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HTTPConverter.get_query_params": {
            "name": "get_query_params",
            "location": 20,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "methods": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool",
                    "Optional[Match]",
                    "dict[str, typing.Any]",
                    "Optional[float]",
                    "typing.Match",
                    "float"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/websockets.py": {
        "WebSocket.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "None",
                    "Optional[Callable]",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]"
                ],
                "receive": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "None",
                    "Optional[Callable]",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]"
                ],
                "send": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "None",
                    "Optional[Callable]",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]"
                ],
                "auto_accept": [
                    "bool",
                    "float",
                    "int",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionLevel]"
                ],
                "value_type": [
                    "str",
                    "None",
                    "Dict[str, str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "dict[str, str]",
                    "typing.Sequence[str]",
                    "Optional[str]"
                ],
                "receive_type": [
                    "None",
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "send_type": [
                    "None",
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "caught_close_codes": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "Optional[Dict]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Any",
                    "Union[str, Iterable[str]]",
                    "Optional[Any]"
                ]
            }
        },
        "WebSocket.__getattr__": {
            "name": "__getattr__",
            "location": 103,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WebSocketConverter.get_query_params": {
            "name": "get_query_params",
            "location": 230,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "WebSocketView.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "None",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/__init__.py": {},
    "bocadillo-master/bocadillo/contrib/pydocmd.py": {
        "DocsMeta.__new__": {
            "name": "__new__",
            "location": 4,
            "return": [
                "str",
                "Callable[[str], T]",
                "dict[, ]",
                "typing.OrderedDict",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "mcs": [],
                "name": [
                    "str",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ],
                "bases": [],
                "namespace": []
            }
        },
        "DocsMeta._prepare_for_docs": {
            "name": "_prepare_for_docs",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mcs": [
                    "int",
                    "str",
                    "typing.Iterable[int]",
                    "bool",
                    "typing.Callable[, ]",
                    "Iterable[int]",
                    "Callable"
                ],
                "bases": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[int]",
                    "Callable"
                ],
                "namespace": [
                    "str",
                    "int",
                    "type",
                    "typing.Type",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "bocadillo-master/bocadillo/contrib/__init__.py": {},
    "bocadillo-master/docs/guide/snippets/json-validation/test_json_validation_example.py": {
        "test_todos": {
            "name": "test_todos",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/docs/guide/snippets/json-validation/todos/app.py": {},
    "bocadillo-master/docs/guide/snippets/json-validation/todos/asgi.py": {},
    "bocadillo-master/docs/guide/snippets/json-validation/todos/models.py": {},
    "bocadillo-master/docs/guide/snippets/json-validation/todos/__init__.py": {},
    "bocadillo-master/docs/guide/snippets/sessions/app.py": {},
    "bocadillo-master/docs/guide/snippets/sessions/settings.py": {},
    "bocadillo-master/docs/guide/snippets/sessions/test_sessions_example.py": {
        "setup_env": {
            "name": "setup_env",
            "location": 9,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_todos": {
            "name": "test_todos",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/docs/guide/snippets/sessions/__init__.py": {},
    "bocadillo-master/docs/guide/snippets/websocket-example/chat/app.py": {},
    "bocadillo-master/docs/guide/snippets/websocket-example/chat/__init__.py": {},
    "bocadillo-master/docs/guide/tutorial/client.py": {},
    "bocadillo-master/docs/guide/tutorial/chatbot/app.py": {},
    "bocadillo-master/docs/guide/tutorial/chatbot/asgi.py": {},
    "bocadillo-master/docs/guide/tutorial/chatbot/bot.py": {},
    "bocadillo-master/docs/guide/tutorial/chatbot/providerconf.py": {
        "diego": {
            "name": "diego",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "clients": {
            "name": "clients",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "set[]"
            ],
            "arguments": {}
        },
        "save_client": {
            "name": "save_client",
            "location": 23,
            "return": [
                "str",
                "Iterable",
                "bytes",
                "IO"
            ],
            "arguments": {
                "clients": [
                    "bool",
                    "set",
                    "set[]",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "save_client._save": {
            "name": "_save",
            "location": 25,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "ws": [
                    "Callable[[VT], bool]",
                    "Union[tuple, list]"
                ]
            }
        }
    },
    "bocadillo-master/docs/guide/tutorial/chatbot/settings.py": {},
    "bocadillo-master/docs/guide/tutorial/chatbot/__init__.py": {},
    "bocadillo-master/docs/guide/tutorial/tests/conftest.py": {
        "diego": {
            "name": "diego",
            "location": 8,
            "return": [
                "EchoDiego",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 17,
            "return": [
                "dict",
                "Mapping"
            ],
            "arguments": {}
        },
        "diego.EchoDiego.get_response": {
            "name": "get_response",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "BaseException",
                "bytes",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bocadillo-master/docs/guide/tutorial/tests/test_app.py": {
        "test_connect_and_converse": {
            "name": "test_connect_and_converse",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        },
        "test_client_count": {
            "name": "test_client_count",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        }
    },
    "bocadillo-master/docs/guide/tutorial/tests/__init__.py": {},
    "bocadillo-master/docs/news/snippets/release_0_13_sse.py": {},
    "bocadillo-master/scripts/changelog_bump.py": {
        "update": {
            "name": "update",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "match": [
                    "Optional[List[str]]",
                    "Iterable[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "dict"
                ],
                "first_line": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Union[float, int]",
                    "float",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "second_line": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Union[float, int]",
                    "float",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "sep": [
                    "typing.Text",
                    "Callable",
                    "str",
                    "Union[float, int]",
                    "Optional[str]"
                ]
            }
        },
        "bump_changelog": {
            "name": "bump_changelog",
            "location": 28,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "next_version": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "next_version": [
                    "Optional[List[str]]",
                    "list[str]",
                    "str",
                    "IO[str]",
                    "None",
                    "typing.IO",
                    "Callable",
                    "Optional[bytes]",
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        }
    },
    "bocadillo-master/tasks/__init__.py": {
        "install": {
            "name": "install",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "Iterator[Any]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "tuple",
                    "bool",
                    "int"
                ],
                "missing": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "ci": {
            "name": "ci",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "tuple",
                    "bool",
                    "int"
                ]
            }
        },
        "apiref": {
            "name": "apiref",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "bumpversion": {
            "name": "bumpversion",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "Iterator[Any]",
                    "..."
                ],
                "level": [
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "float",
                    "tuple",
                    "tuple[]",
                    "bool"
                ]
            }
        }
    },
    "bocadillo-master/tests/conftest.py": {
        "fixture_raw_app": {
            "name": "fixture_raw_app",
            "location": 9,
            "return": [
                "\"App\"",
                "App"
            ],
            "arguments": {
                "request": []
            }
        },
        "fixture_app": {
            "name": "fixture_app",
            "location": 15,
            "return": [
                "dict[str, typing.Sequence[typing.Any]]"
            ],
            "arguments": {
                "raw_app": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "bocadillo.App",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 21,
            "return": [
                "dict",
                "Mapping"
            ],
            "arguments": {
                "app": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "fixture_templates": {
            "name": "fixture_templates",
            "location": 26,
            "return": [
                "str",
                "Templates"
            ],
            "arguments": {}
        },
        "create_template": {
            "name": "create_template",
            "location": 37,
            "return": [
                "str",
                "TemplateWrapper"
            ],
            "arguments": {
                "templates": [
                    "str",
                    "bytes",
                    "bocadillo.Templates"
                ],
                "tmpdir_factory": [
                    "str",
                    "int"
                ],
                "dirname": [
                    "str",
                    "int"
                ]
            }
        },
        "template_file": {
            "name": "template_file",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "templates": [
                    "str",
                    "bocadillo.Templates",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, str]"
                ],
                "tmpdir_factory": [
                    "str",
                    "bocadillo.Templates",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_allowed_hosts.py": {
        "test_if_host_not_allowed_then_400": {
            "name": "test_if_host_not_allowed_then_400",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        }
    },
    "bocadillo-master/tests/test_attachment.py": {
        "test_attachment": {
            "name": "test_attachment",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_background_tasks.py": {
        "test_background_task_is_executed": {
            "name": "test_background_task_is_executed",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_background_task_is_executed_after_response_is_sent": {
            "name": "test_background_task_is_executed_after_response_is_sent",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_can_pass_extra_kwargs": {
            "name": "test_can_pass_extra_kwargs",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_chunked_response.py": {
        "test_chunked_response": {
            "name": "test_chunked_response",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_config.py": {
        "test_cannot_reconfigure": {
            "name": "test_cannot_reconfigure",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_must_be_configured_to_serve": {
            "name": "test_must_be_configured_to_serve",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        },
        "test_settings": {
            "name": "test_settings",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "List[str]",
                    "list[str]"
                ],
                "positional": []
            }
        }
    },
    "bocadillo-master/tests/test_converters.py": {
        "setup_http": {
            "name": "setup_http",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "annotation": []
            }
        },
        "setup_websocket": {
            "name": "setup_websocket",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "annotation": []
            }
        },
        "get_http_json": {
            "name": "get_http_json",
            "location": 21,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "get_websocket_json": {
            "name": "get_websocket_json",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "None",
                    "typing.Any"
                ],
                "url": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "test_convert_route_parameters": {
            "name": "test_convert_route_parameters",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "Type",
                    "typing.Type"
                ],
                "client": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "setup": [
                    "Type",
                    "typing.Type"
                ],
                "get_json": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "annotation": [
                    "Type",
                    "typing.Type"
                ],
                "string_value": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "converted_value": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "check_http_status": {
            "name": "check_http_status",
            "location": 62,
            "return": [
                "str",
                "List[str]",
                "dict",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "check_websocket_status": {
            "name": "check_websocket_status",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "url": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_if_invalid_route_parameter_then_error_response": {
            "name": "test_if_invalid_route_parameter_then_error_response",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "float",
                    "Type",
                    "typing.Type",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "setup": [
                    "Type",
                    "str",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ],
                "check_status": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "annotation": [
                    "Type",
                    "str",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ],
                "string_value": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_typesystem_converter": {
            "name": "test_typesystem_converter",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_defaults_to_str": {
            "name": "test_defaults_to_str",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "setup_http_query_params_route": {
            "name": "setup_http_query_params_route",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "annotation": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "default": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "setup_websocket_query_params_route": {
            "name": "setup_websocket_query_params_route",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "annotation": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "default": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_querystring_converter": {
            "name": "test_querystring_converter",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "setup": [],
                "get_json": [],
                "annotation": [],
                "default": [],
                "params": [
                    "dict[, ]",
                    "str",
                    "Callable[[Any, Any], Any]",
                    "dict"
                ],
                "result": []
            }
        }
    },
    "bocadillo-master/tests/test_cors.py": {
        "test_allow_origin": {
            "name": "test_allow_origin",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]"
                ],
                "origin": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "allowed": [
                    "bool",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "test_no_allowed_origins_by_default": {
            "name": "test_no_allowed_origins_by_default",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_allow_method": {
            "name": "test_allow_method",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "allowed": [
                    "bool",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "int",
                    "List[Tuple[Any, Any]]"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_error_handling.py": {
        "test_async_check": {
            "name": "test_async_check",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_if_http_error_is_raised_then_automatic_response_is_sent": {
            "name": "test_if_http_error_is_raised_then_automatic_response_is_sent",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bocadillo.App",
                    "bool",
                    "list[str]",
                    "List[str]"
                ],
                "client": [
                    "str"
                ],
                "status": [
                    "str",
                    "bocadillo.App",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_custom_error_handler": {
            "name": "test_custom_error_handler",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bocadillo.App",
                    "App",
                    "apistar.interfaces.App"
                ],
                "exception_cls": [
                    "str",
                    "bool"
                ],
                "success": []
            }
        },
        "detail": {
            "name": "detail",
            "location": 87,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "test_builtin_handlers": {
            "name": "test_builtin_handlers",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[str, typing.Sequence[str]]",
                    "bocadillo.App",
                    "Dict[str, Sequence[str]]"
                ],
                "client": [],
                "detail": [
                    "str"
                ],
                "handler": [
                    "dict[str, typing.Sequence[str]]",
                    "bocadillo.App",
                    "Dict[str, Sequence[str]]"
                ],
                "content": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_http_error_status_must_be_int_or_http_status": {
            "name": "test_http_error_status_must_be_int_or_http_status",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_http_error_str_representation": {
            "name": "test_http_error_str_representation",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_async_check.handle_key_error": {
            "name": "handle_key_error",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "req": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "res": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "params": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_events.py": {
        "test_startup_and_shutdown": {
            "name": "test_startup_and_shutdown",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_sync_handler": {
            "name": "test_sync_handler",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": [
                    "bool",
                    "bocadillo.App"
                ]
            }
        },
        "test_non_decorator_syntax": {
            "name": "test_non_decorator_syntax",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "bocadillo.App"
                ]
            }
        },
        "test_sync_handler.setup": {
            "name": "setup",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_file_responses.py": {
        "fixture_txt": {
            "name": "fixture_txt",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Iterable[str]",
                    "list",
                    "pathlib.Path"
                ]
            }
        },
        "test_file_response": {
            "name": "test_file_response",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "txt": [
                    "str",
                    "pathlib.Path"
                ],
                "attach": [
                    "bool"
                ]
            }
        },
        "test_if_file_does_not_exist_then_fail": {
            "name": "test_if_file_does_not_exist_then_fail",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "bool"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_gzip.py": {
        "test_if_gzip_enabled_then_response_is_compressed": {
            "name": "test_if_gzip_enabled_then_response_is_compressed",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        }
    },
    "bocadillo-master/tests/test_hooks.py": {
        "register": {
            "name": "register",
            "location": 9,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_function_hooks": {
            "name": "test_function_hooks",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_classed_based_hooks": {
            "name": "test_classed_based_hooks",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "bool"
                ]
            }
        },
        "test_class_hook_must_be_callable": {
            "name": "test_class_hook_must_be_callable",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "app.App",
                    "App"
                ],
                "register": []
            }
        },
        "test_async_check": {
            "name": "test_async_check",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str",
                    "bocadillo.App"
                ],
                "register": []
            }
        },
        "test_pass_extra_args": {
            "name": "test_pass_extra_args",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_use_hook_on_view_class": {
            "name": "test_use_hook_on_view_class",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "bool"
                ]
            }
        },
        "test_method_hooks": {
            "name": "test_method_hooks",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "bool"
                ]
            }
        },
        "test_before_does_not_run_if_method_not_allowed": {
            "name": "test_before_does_not_run_if_method_not_allowed",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_async_check.hook": {
            "name": "hook",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "req": [
                    "str",
                    "bool"
                ],
                "res": [
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_async_check.Hook.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "res": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "params": [
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_hsts.py": {
        "test_if_hsts_enabled_and_request_is_on_http_then_redirects_to_https": {
            "name": "test_if_hsts_enabled_and_request_is_on_http_then_redirects_to_https",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        }
    },
    "bocadillo-master/tests/test_http.py": {
        "test_function_based_view": {
            "name": "test_function_based_view",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_async_check": {
            "name": "test_async_check",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ]
            }
        },
        "test_can_register_class_based_view": {
            "name": "test_can_register_class_based_view",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int",
                    "bocadillo.App"
                ]
            }
        },
        "test_if_method_not_implemented_then_405": {
            "name": "test_if_method_not_implemented_then_405",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "method": []
            }
        },
        "test_if_method_implemented_then_as_normal": {
            "name": "test_if_method_implemented_then_as_normal",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_handle_is_implemented_then_bypasses_other_methods": {
            "name": "test_if_handle_is_implemented_then_bypasses_other_methods",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_view_from_obj": {
            "name": "test_view_from_obj",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": []
            }
        },
        "test_parameter_is_passed_as_keyword_argument": {
            "name": "test_parameter_is_passed_as_keyword_argument",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_match_path": {
            "name": "test_match_path",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_unknown_specifier": {
            "name": "test_unknown_specifier",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str",
                    "bocadillo.App"
                ]
            }
        },
        "test_async_check.index": {
            "name": "index",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "req": [],
                "res": []
            }
        },
        "test_async_check.Index.get": {
            "name": "get",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "res": []
            }
        }
    },
    "bocadillo-master/tests/test_import.py": {
        "test_import_package": {
            "name": "test_import_package",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_injection.py": {
        "app": {
            "name": "app",
            "location": 7,
            "return": [],
            "arguments": {
                "raw_app": [
                    "str",
                    "int",
                    "bocadillo.App"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": [
                    "flaskapp.App"
                ],
                "view": [
                    "bocadillo.App",
                    "flaskapp.App"
                ]
            }
        },
        "test_with_route_parameter": {
            "name": "test_with_route_parameter",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": [],
                "view": [
                    "bocadillo.App",
                    "flaskapp.App"
                ]
            }
        },
        "test_provider_name": {
            "name": "test_provider_name",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_websocket_clients_example": {
            "name": "test_websocket_clients_example",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_useprovider": {
            "name": "test_useprovider",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": [
                    "flaskapp.App"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_json.py": {
        "test_json_response": {
            "name": "test_json_response",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_json_validation_errors.py": {
        "test_handle_validation_errors": {
            "name": "test_handle_validation_errors",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_disable_validation_error_handling": {
            "name": "test_disable_validation_error_handling",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_methods.py": {
        "test_allowed_methods": {
            "name": "test_allowed_methods",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "bocadillo.App",
                    "Dict[str, Any]"
                ],
                "client": [
                    "str"
                ],
                "methods": [
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "bocadillo.App",
                    "Dict[str, Any]"
                ],
                "method": [
                    "str"
                ],
                "status": [
                    "int",
                    "typing.Sequence[int]",
                    "bool",
                    "typing.Type",
                    "Sequence[int]",
                    "Type[Any]"
                ]
            }
        },
        "test_unsafe_methods_not_supported_by_default": {
            "name": "test_unsafe_methods_not_supported_by_default",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "method": []
            }
        },
        "test_if_get_implemented_then_head_mapped": {
            "name": "test_if_get_implemented_then_head_mapped",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_if_get_in_function_view_methods_then_head_mapped": {
            "name": "test_if_get_in_function_view_methods_then_head_mapped",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_if_methods_is_all_then_all_methods_allowed": {
            "name": "test_if_methods_is_all_then_all_methods_allowed",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_middleware_asgi.py": {
        "test_asgi_middleware": {
            "name": "test_asgi_middleware",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "bool"
                ],
                "client": [
                    "bool"
                ]
            }
        },
        "test_send_response_in_middleware": {
            "name": "test_send_response_in_middleware",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "str",
                    "apistar.interfaces.App",
                    "flaskapp.App"
                ],
                "client": []
            }
        },
        "test_error_handling": {
            "name": "test_error_handling",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": []
            }
        },
        "test_middleware_called_if_routed_to_sub_app": {
            "name": "test_middleware_called_if_routed_to_sub_app",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": []
            }
        },
        "test_asgi2_middleware_not_supported": {
            "name": "test_asgi2_middleware_not_supported",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "App"
                ]
            }
        },
        "ASGIMiddleware.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app.App"
                ]
            }
        },
        "test_asgi_middleware.Middleware.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "test_middleware_called_if_routed_to_sub_app.Middleware.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app.App"
                ]
            }
        },
        "test_asgi2_middleware_not_supported.Middleware.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "dict"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_middleware_http.py": {
        "test_async_check": {
            "name": "test_async_check",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str",
                    "asyncio.AbstractEventLoop",
                    "bocadillo.App"
                ]
            }
        },
        "build_middleware": {
            "name": "build_middleware",
            "location": 24,
            "return": [
                "",
                "typing.Generator[SetCalled]"
            ],
            "arguments": {
                "expect_kwargs": [
                    "Optional[str]",
                    "str",
                    "None",
                    "float",
                    "Sequence[Callable]",
                    "typing.Sequence[typing.Callable[, ]]"
                ],
                "expect_call_after": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_if_middleware_is_added_then_it_is_called": {
            "name": "test_if_middleware_is_added_then_it_is_called",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_extra_kwargs": {
            "name": "test_extra_kwargs",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_only_before_dispatch_is_called_if_method_not_allowed": {
            "name": "test_only_before_dispatch_is_called_if_method_not_allowed",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_errors_raised_in_callback_are_handled": {
            "name": "test_errors_raised_in_callback_are_handled",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "when": [
                    "bocadillo.App"
                ]
            }
        },
        "test_middleware_uses_registered_http_error_handler": {
            "name": "test_middleware_uses_registered_http_error_handler",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_return_response_in_before_hook": {
            "name": "test_return_response_in_before_hook",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_middleware_called_if_routed_to_sub_app": {
            "name": "test_middleware_called_if_routed_to_sub_app",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": []
            }
        },
        "build_middleware.SetCalled.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "test_async_check.BeforeMiddleware.before_dispatch": {
            "name": "before_dispatch",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_async_check.AfterMiddleware.after_dispatch": {
            "name": "after_dispatch",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bocadillo-master/tests/test_mount.py": {
        "test_mount": {
            "name": "test_mount",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "str"
                ],
                "client": [
                    "str",
                    "Tuple[str, str, str]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_mount_route_parameter": {
            "name": "test_mount_route_parameter",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_plugins.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        },
        "test_use_settings": {
            "name": "test_use_settings",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "bocadillo.App"
                ]
            }
        },
        "test_conditional_plugin": {
            "name": "test_conditional_plugin",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [],
                "should_use": [
                    "bool"
                ]
            }
        },
        "test_basic.use_foo": {
            "name": "use_foo",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "Sequence[int]"
                ]
            }
        },
        "test_use_settings.use_hello": {
            "name": "use_hello",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_conditional_plugin.use_hello": {
            "name": "use_hello",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_redirect.py": {
        "_setup_views_with_redirect": {
            "name": "_setup_views_with_redirect",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "None",
                    "Optional[\"Game\"]",
                    "app.App",
                    "App"
                ],
                "permanent": [
                    "None",
                    "Optional[\"Game\"]",
                    "app.App",
                    "App"
                ]
            }
        },
        "test_redirection_is_temporary_by_default": {
            "name": "test_redirection_is_temporary_by_default",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App",
                    "App"
                ],
                "client": []
            }
        },
        "test_permanent_redirect": {
            "name": "test_permanent_redirect",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_redirect_to_internal_url": {
            "name": "test_redirect_to_internal_url",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_redirect_to_non_matching_internal_url_then_404": {
            "name": "test_if_redirect_to_non_matching_internal_url_then_404",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "bocadillo.App"
                ]
            }
        },
        "test_redirect_to_external_url": {
            "name": "test_redirect_to_external_url",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        }
    },
    "bocadillo-master/tests/test_request.py": {
        "test_method": {
            "name": "test_method",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "method": []
            }
        },
        "test_url": {
            "name": "test_url",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "attr": [
                    "str"
                ],
                "value": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_headers": {
            "name": "test_headers",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_query_params": {
            "name": "test_query_params",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_raw_body": {
            "name": "test_raw_body",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_form_body": {
            "name": "test_form_body",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_json_body": {
            "name": "test_json_body",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "typing.Callable[..., None]",
                    "str",
                    "Callable[..., None]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "Dict[str, Tuple[str, str]]",
                    "Callable[[], None]"
                ],
                "client": [
                    "int",
                    "str"
                ],
                "data": [
                    "int",
                    "str"
                ],
                "status": [
                    "int",
                    "str"
                ]
            }
        },
        "test_stream_request": {
            "name": "test_stream_request",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str",
                    "bool",
                    "app.App"
                ],
                "get_stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_stream_request.stream": {
            "name": "stream",
            "location": 144,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_response.py": {
        "test_default_response_is_success_empty_text": {
            "name": "test_default_response_is_success_empty_text",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_status_code_is_no_content_then_no_content_type_set": {
            "name": "test_if_status_code_is_no_content_then_no_content_type_set",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_content_type_defaults_to_plaintext": {
            "name": "test_content_type_defaults_to_plaintext",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_text_set_then_response_is_plain_text": {
            "name": "test_if_text_set_then_response_is_plain_text",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_json_set_then_response_is_json": {
            "name": "test_if_json_set_then_response_is_json",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_html_set_then_response_is_html": {
            "name": "test_if_html_set_then_response_is_html",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_last_response_setter_called_has_priority": {
            "name": "test_last_response_setter_called_has_priority",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "list[]",
                    "bocadillo.App",
                    "list"
                ],
                "client": [
                    "bocadillo.App"
                ],
                "contents": [
                    "list[]",
                    "bocadillo.App",
                    "list"
                ],
                "content_type": [
                    "str",
                    "bocadillo.Templates"
                ],
                "check_content": []
            }
        }
    },
    "bocadillo-master/tests/test_router.py": {
        "test_index_returns_404_by_default": {
            "name": "test_index_returns_404_by_default",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_route_not_registered_then_404": {
            "name": "test_if_route_not_registered_then_404",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_route_registered_then_not_404": {
            "name": "test_if_route_registered_then_not_404",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_default_status_code_is_200_on_routes": {
            "name": "test_default_status_code_is_200_on_routes",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_leading_slash_is_added_if_not_present": {
            "name": "test_leading_slash_is_added_if_not_present",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_trailing_slash_not_redirected": {
            "name": "test_trailing_slash_not_redirected",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_redirect_trailing_slash": {
            "name": "test_redirect_trailing_slash",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "List[int]",
                    "bool",
                    "list[int]"
                ],
                "redirect": [
                    "Optional[Iterable[Any]]",
                    "typing.Iterable[typing.Any]",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "test_include_router_http": {
            "name": "test_include_router_http",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "Callable"
                ],
                "client": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_include_router_no_prefix": {
            "name": "test_include_router_no_prefix",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "flaskapp.App"
                ],
                "client": []
            }
        },
        "test_include_router_websocket": {
            "name": "test_include_router_websocket",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "path": [],
                "success": []
            }
        },
        "test_include_router_nested_apps": {
            "name": "test_include_router_nested_apps",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App",
                    "Callable"
                ],
                "client": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_include_router_websocket.connect": {
            "name": "connect",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_sessions.py": {
        "test_sessions_enabled_no_secret_key": {
            "name": "test_sessions_enabled_no_secret_key",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        },
        "test_sessions_enabled_secret_key_empty": {
            "name": "test_sessions_enabled_secret_key_empty",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [],
                "from_env": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_sessions_enabled_secret_key_present": {
            "name": "test_sessions_enabled_secret_key_present",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "bool",
                    "str"
                ],
                "from_env": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_sse.py": {
        "test_send_event": {
            "name": "test_send_event",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "list[]",
                    "bocadillo.App",
                    "dict[, ]",
                    "list",
                    "dict"
                ],
                "client": [
                    "dict[str, str]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "args": [],
                "kwargs": [],
                "lines": [
                    "list[]",
                    "list",
                    "bool"
                ]
            }
        },
        "test_sse_headers_are_set": {
            "name": "test_sse_headers_are_set",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "flaskapp.App"
                ]
            }
        },
        "test_cache_control_header_not_replaced_if_manually_set": {
            "name": "test_cache_control_header_not_replaced_if_manually_set",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_stop_on_client_disconnect": {
            "name": "test_stop_on_client_disconnect",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ]
            }
        },
        "test_raise_client_disconnects": {
            "name": "test_raise_client_disconnects",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_static.py": {
        "_create_asset": {
            "name": "_create_asset",
            "location": 10,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "static_dir": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_assets_are_served_at_static_by_default": {
            "name": "test_assets_are_served_at_static_by_default",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "test_if_asset_does_not_exist_then_404": {
            "name": "test_if_asset_does_not_exist_then_404",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_customize_static_root": {
            "name": "test_customize_static_root",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "test_if_static_dir_is_none_then_no_assets_served": {
            "name": "test_if_static_dir_is_none_then_no_assets_served",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [],
                "tmpdir_factory": [
                    "str"
                ]
            }
        },
        "test_mount_extra_static_files_dirs": {
            "name": "test_mount_extra_static_files_dirs",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "bocadillo.App"
                ],
                "tmpdir_factory": [
                    "bytes"
                ]
            }
        },
        "test_if_static_dir_does_not_exist_then_no_files_mounted": {
            "name": "test_if_static_dir_does_not_exist_then_no_files_mounted",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": []
            }
        },
        "test_whitenoise_config": {
            "name": "test_whitenoise_config",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_app": [
                    "bocadillo.App"
                ]
            }
        }
    },
    "bocadillo-master/tests/test_streaming_response.py": {
        "test_stream_response": {
            "name": "test_stream_response",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "test_stream_func_must_be_async_generator_function": {
            "name": "test_stream_func_must_be_async_generator_function",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_stop_on_client_disconnect": {
            "name": "test_stop_on_client_disconnect",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_raise_on_disconnect": {
            "name": "test_raise_on_disconnect",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_stream_func_must_be_async_generator_function.index.foo": {
            "name": "foo",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_stream_func_must_be_async_generator_function.index.baz": {
            "name": "baz",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_templates.py": {
        "test_render_sync": {
            "name": "test_render_sync",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "template_file": [
                    "str",
                    "bocadillo.Templates"
                ],
                "templates": [
                    "str",
                    "bocadillo.Templates",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_render_string": {
            "name": "test_render_string",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "templates": [
                    "bocadillo.Templates",
                    "str"
                ]
            }
        },
        "test_modify_context": {
            "name": "test_modify_context",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_utils.py": {
        "test_override_env": {
            "name": "test_override_env",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_override_env.getvar": {
            "name": "getvar",
            "location": 9,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {}
        }
    },
    "bocadillo-master/tests/test_websocket.py": {
        "test_websocket_route": {
            "name": "test_websocket_route",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_async_check": {
            "name": "test_async_check",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ]
            }
        },
        "test_enter_context_twice_is_safe": {
            "name": "test_enter_context_twice_is_safe",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_manual_accept": {
            "name": "test_manual_accept",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_websocket_route_parameters": {
            "name": "test_websocket_route_parameters",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_websocket_route_parameters_no_match": {
            "name": "test_websocket_route_parameters_no_match",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_non_existing_endpoint_returns_403": {
            "name": "test_non_existing_endpoint_returns_403",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_reject_closes_with_403": {
            "name": "test_reject_closes_with_403",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_iter_websocket": {
            "name": "test_iter_websocket",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_can_close_within_context": {
            "name": "test_can_close_within_context",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": [],
                "manual": [
                    "bool",
                    "bocadillo.App"
                ]
            }
        },
        "test_websocket_url": {
            "name": "test_websocket_url",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_websocket_headers": {
            "name": "test_websocket_headers",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_websocket_query_params": {
            "name": "test_websocket_query_params",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_receive_type": {
            "name": "test_receive_type",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "receive_type": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "example_message": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "expected_type": [
                    "bocadillo.App"
                ]
            }
        },
        "test_send_type": {
            "name": "test_send_type",
            "location": 200,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [],
                "send_type": [
                    "str"
                ],
                "example_message": [],
                "expected_type": [
                    "int",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "test_value_type": {
            "name": "test_value_type",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "str",
                    "bocadillo.App"
                ],
                "client": [
                    "Callable",
                    "str"
                ],
                "value_type": [
                    "str",
                    "type",
                    "typing.Type",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "example_message": [
                    "str"
                ],
                "expected_type": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_receive_and_send_event": {
            "name": "test_receive_and_send_event",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_catch_disconnect": {
            "name": "test_catch_disconnect",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "slice",
                    "str"
                ],
                "close_codes": [
                    "bocadillo.App"
                ],
                "code": [
                    "app.App"
                ],
                "expected_caught": [
                    "int",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_if_exception_raised_in_context_then_closed_with_1011": {
            "name": "test_if_exception_raised_in_context_then_closed_with_1011",
            "location": 294,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_accepted_and_exception_raised_then_closed_with_1011": {
            "name": "test_accepted_and_exception_raised_then_closed_with_1011",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_if_not_accepted_and_exception_raised_then_closed_with_1011": {
            "name": "test_if_not_accepted_and_exception_raised_then_closed_with_1011",
            "location": 319,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_context_does_not_silence_exceptions": {
            "name": "test_context_does_not_silence_exceptions",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_async_check.chat": {
            "name": "chat",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "ws": []
            }
        }
    },
    "bocadillo-master/tests/test_wildcard_routes.py": {
        "test_root_wildcard": {
            "name": "test_root_wildcard",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": []
            }
        },
        "test_wildcard": {
            "name": "test_wildcard",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "bocadillo.App"
                ],
                "client": [
                    "flaskapp.App"
                ]
            }
        },
        "test_if_wildcard_first_then_other_routes_wont_match": {
            "name": "test_if_wildcard_first_then_other_routes_wont_match",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "flaskapp.App"
                ]
            }
        },
        "test_if_wildcard_last_then_matches_by_default": {
            "name": "test_if_wildcard_last_then_matches_by_default",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bocadillo.App"
                ],
                "client": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "bocadillo-master/tests/utils.py": {
        "function_hooks": {
            "name": "function_hooks",
            "location": 10,
            "return": [
                "",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "expected_before": [
                    "bool",
                    "Type",
                    "List[int]",
                    "Union[int, float]",
                    "str"
                ],
                "expected_after": [
                    "bool",
                    "Type",
                    "List[int]",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "class_hooks": {
            "name": "class_hooks",
            "location": 32,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[SetFlag,SetFlag]]]"
            ],
            "arguments": {}
        },
        "stops_incrementing": {
            "name": "stops_incrementing",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "counter": [
                    "List[str]",
                    "float",
                    "list[str]"
                ],
                "response": [
                    "requests.Response"
                ],
                "tolerance": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "stops_incrementing.wait_for_events": {
            "name": "wait_for_events",
            "location": 59,
            "return": [
                "int",
                "str",
                "Optional[Dict[str, int]]",
                "float"
            ],
            "arguments": {
                "expect_many": [
                    "bool",
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "class_hooks.SetFlag.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "bool",
                    "List[Tuple[int, float]]"
                ],
                "value": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "bocadillo-master/tests/__init__.py": {},
    "bocadillo-master/tests/data/providerconf.py": {}
}
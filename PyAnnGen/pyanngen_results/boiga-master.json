{
    "boiga-master/setup.py": {},
    "boiga-master/src/boiga/compose.py": {
        "compose2": {
            "name": "compose2",
            "location": 13,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T], U)]"
                ],
                "g": [
                    "Callable[([U], R)]"
                ]
            }
        },
        "compose3": {
            "name": "compose3",
            "location": 22,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T], U)]"
                ],
                "g": [
                    "Callable[([U], V)]"
                ],
                "h": [
                    "Callable[([V], R)]"
                ]
            }
        },
        "compose4": {
            "name": "compose4",
            "location": 32,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T], U)]"
                ],
                "g": [
                    "Callable[([U], V)]"
                ],
                "h": [
                    "Callable[([V], W)]"
                ],
                "i": [
                    "Callable[([W], R)]"
                ]
            }
        },
        "compose5": {
            "name": "compose5",
            "location": 43,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T], U)]"
                ],
                "g": [
                    "Callable[([U], V)]"
                ],
                "h": [
                    "Callable[([V], W)]"
                ],
                "i": [
                    "Callable[([W], X)]"
                ],
                "j": [
                    "Callable[([X], R)]"
                ]
            }
        },
        "compose6": {
            "name": "compose6",
            "location": 55,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T], U)]"
                ],
                "g": [
                    "Callable[([U], V)]"
                ],
                "h": [
                    "Callable[([V], W)]"
                ],
                "i": [
                    "Callable[([W], X)]"
                ],
                "j": [
                    "Callable[([X], Y)]"
                ],
                "k": [
                    "Callable[([Y], R)]"
                ]
            }
        },
        "compose7": {
            "name": "compose7",
            "location": 68,
            "return": [
                "Callable[([T], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T], U)]"
                ],
                "g": [
                    "Callable[([U], V)]"
                ],
                "h": [
                    "Callable[([V], W)]"
                ],
                "i": [
                    "Callable[([W], X)]"
                ],
                "j": [
                    "Callable[([X], Y)]"
                ],
                "k": [
                    "Callable[([Y], Z)]"
                ],
                "l": [
                    "Callable[([Z], R)]"
                ]
            }
        },
        "compose2.composed": {
            "name": "composed",
            "location": 17,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose3.composed": {
            "name": "composed",
            "location": 27,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose4.composed": {
            "name": "composed",
            "location": 38,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose5.composed": {
            "name": "composed",
            "location": 50,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose6.composed": {
            "name": "composed",
            "location": 63,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compose7.composed": {
            "name": "composed",
            "location": 77,
            "return": [
                "str",
                "Dict[str, Any]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "x": [
                    "T",
                    "List[int]"
                ]
            }
        }
    },
    "boiga-master/src/boiga/either.py": {
        "Either.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Either.bind": {
            "name": "bind",
            "location": 20,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], Either[(_L, _U)])]"
                ]
            }
        },
        "Either.__rshift__": {
            "name": "__rshift__",
            "location": 24,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], Either[(_L, _U)])]"
                ]
            }
        },
        "Either.fmap": {
            "name": "fmap",
            "location": 28,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], _U)]"
                ]
            }
        },
        "Either.__mul__": {
            "name": "__mul__",
            "location": 30,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], _U)]"
                ]
            }
        },
        "Left.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_L"
                ]
            }
        },
        "Left.bind": {
            "name": "bind",
            "location": 39,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], Either[(_L, _U)])]"
                ]
            }
        },
        "Left.fmap": {
            "name": "fmap",
            "location": 43,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], _U)]"
                ]
            }
        },
        "Left.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Right.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T"
                ]
            }
        },
        "Right.bind": {
            "name": "bind",
            "location": 57,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], Either[(_L, _U)])]"
                ]
            }
        },
        "Right.fmap": {
            "name": "fmap",
            "location": 61,
            "return": [
                "Either[(_L, _U)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_T], _U)]"
                ]
            }
        },
        "Right.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boiga-master/src/boiga/functor.py": {
        "Functor.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Functor.fmap": {
            "name": "fmap",
            "location": 11,
            "return": [
                "Functor[_U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_Tco], _U)]"
                ]
            }
        },
        "Functor.__mul__": {
            "name": "__mul__",
            "location": 13,
            "return": [
                "Functor[_U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_Tco], _U)]"
                ]
            }
        }
    },
    "boiga-master/src/boiga/maybe.py": {
        "Maybe.unit": {
            "name": "unit",
            "location": 13,
            "return": [
                "Nothing",
                "Just",
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "None",
                    "Optional[T]",
                    "str",
                    "float",
                    "Optional[Union[str, Any]]",
                    "typing.Any",
                    "T",
                    "int",
                    "Optional[str]",
                    "Union[int, None]",
                    "Union[str, None]"
                ]
            }
        },
        "Maybe.bind": {
            "name": "bind",
            "location": 19,
            "return": [
                "'Maybe[_U]'",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Maybe.__rshift__": {
            "name": "__rshift__",
            "location": 21,
            "return": [
                "'Maybe[_U]'",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Just.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "bool",
                    "float",
                    "Hashable",
                    "str",
                    "typing.Hashable",
                    "Optional[int]"
                ]
            }
        },
        "Just.bind": {
            "name": "bind",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping[str, Dict[str, Any]]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "Just.fmap": {
            "name": "fmap",
            "location": 36,
            "return": [
                "Just",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[[], typing.Any]",
                    "T",
                    "typing.IO",
                    "tuple[]",
                    "util.Unary[V, N]",
                    "Callable[[], Any]",
                    "IO[bytes]",
                    "tuple"
                ]
            }
        },
        "Just.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.__new__": {
            "name": "__new__",
            "location": 47,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "dict[, ]",
                    "list[list[str]]",
                    "dict",
                    "List[List[str]]",
                    "type",
                    "Type"
                ]
            }
        },
        "Nothing.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.bind": {
            "name": "bind",
            "location": 58,
            "return": [
                "Nothing",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Nothing.fmap": {
            "name": "fmap",
            "location": 62,
            "return": [
                "Nothing",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Nothing.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boiga-master/src/boiga/monad.py": {
        "Monad.bind": {
            "name": "bind",
            "location": 10,
            "return": [
                "_M"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_Tco], _M)]"
                ]
            }
        },
        "Monad.__rshift__": {
            "name": "__rshift__",
            "location": 12,
            "return": [
                "_M"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([_Tco], _M)]"
                ]
            }
        }
    },
    "boiga-master/src/boiga/partial.py": {
        "partial2": {
            "name": "partial2",
            "location": 25,
            "return": [
                "Callable[([U], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T, U], R)]"
                ],
                "a": [
                    "T"
                ]
            }
        },
        "partial3": {
            "name": "partial3",
            "location": 48,
            "return": [
                "Callable[([V], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T, U, V], R)]"
                ],
                "a": [
                    "T"
                ],
                "b": [
                    "U"
                ]
            }
        },
        "partial4": {
            "name": "partial4",
            "location": 81,
            "return": [
                "Callable[([W], R)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([T, U, V, W], R)]"
                ],
                "a": [
                    "T"
                ],
                "b": [
                    "U"
                ],
                "c": [
                    "V"
                ]
            }
        },
        "partial2.g": {
            "name": "g",
            "location": 35,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "partial3.g2": {
            "name": "g2",
            "location": 60,
            "return": [],
            "arguments": {
                "b": [],
                "c": []
            }
        },
        "partial3.g1": {
            "name": "g1",
            "location": 65,
            "return": [],
            "arguments": {
                "c2": []
            }
        },
        "partial4.g3": {
            "name": "g3",
            "location": 95,
            "return": [],
            "arguments": {
                "b": [],
                "c": [],
                "d": []
            }
        },
        "partial4.g2": {
            "name": "g2",
            "location": 100,
            "return": [],
            "arguments": {
                "c": [],
                "d": []
            }
        },
        "partial4.g1": {
            "name": "g1",
            "location": 106,
            "return": [],
            "arguments": {
                "d": []
            }
        }
    },
    "boiga-master/src/boiga/util.py": {
        "_Container.__eq__": {
            "name": "__eq__",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "boiga-master/src/boiga/__init__.py": {},
    "boiga-master/stubs/pytest/__init__.py": {
        "raises": {
            "name": "raises",
            "location": 6,
            "return": [],
            "arguments": {
                "exc_cls": [],
                "message": []
            }
        }
    },
    "boiga-master/tests/test_boiga.py": {},
    "boiga-master/tests/test_compose.py": {
        "_flow0": {
            "name": "_flow0",
            "location": 50,
            "return": [
                "_Flow1"
            ],
            "arguments": {
                "x": [
                    "_Flow0"
                ]
            }
        },
        "_flow1": {
            "name": "_flow1",
            "location": 51,
            "return": [
                "_Flow2"
            ],
            "arguments": {
                "x": [
                    "_Flow1"
                ]
            }
        },
        "_flow2": {
            "name": "_flow2",
            "location": 52,
            "return": [
                "_Flow3"
            ],
            "arguments": {
                "x": [
                    "_Flow2"
                ]
            }
        },
        "_flow3": {
            "name": "_flow3",
            "location": 53,
            "return": [
                "_Flow4"
            ],
            "arguments": {
                "x": [
                    "_Flow3"
                ]
            }
        },
        "_flow4": {
            "name": "_flow4",
            "location": 54,
            "return": [
                "_Flow5"
            ],
            "arguments": {
                "x": [
                    "_Flow4"
                ]
            }
        },
        "_flow5": {
            "name": "_flow5",
            "location": 55,
            "return": [
                "_Flow6"
            ],
            "arguments": {
                "x": [
                    "_Flow5"
                ]
            }
        },
        "_flow6": {
            "name": "_flow6",
            "location": 56,
            "return": [
                "_Flow7"
            ],
            "arguments": {
                "x": [
                    "_Flow6"
                ]
            }
        },
        "typecheck_flow": {
            "name": "typecheck_flow",
            "location": 66,
            "return": [
                "tests.typecheck_helper.TypecheckResult"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "_Flow0.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ]
            }
        },
        "_Flow0.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow1.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int"
                ]
            }
        },
        "_Flow1.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow2.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int"
                ]
            }
        },
        "_Flow2.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow3.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int"
                ]
            }
        },
        "_Flow3.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow4.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int"
                ]
            }
        },
        "_Flow4.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow5.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int"
                ]
            }
        },
        "_Flow5.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow6.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int"
                ]
            }
        },
        "_Flow6.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "_Flow7.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "int"
                ]
            }
        },
        "_Flow7.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "TestCompose2.test_valid_flow_with_call": {
            "name": "test_valid_flow_with_call",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose2.test_valid_flow_typechecks": {
            "name": "test_valid_flow_typechecks",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose2.test_invalid_flow_fns": {
            "name": "test_invalid_flow_fns",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose2.test_invalid_flow_call": {
            "name": "test_invalid_flow_call",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose2.test_invalid_flow_result": {
            "name": "test_invalid_flow_result",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose3.test_valid_flow_with_call": {
            "name": "test_valid_flow_with_call",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose3.test_valid_flow_typechecks": {
            "name": "test_valid_flow_typechecks",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose3.test_invalid_flow_fns": {
            "name": "test_invalid_flow_fns",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose3.test_invalid_flow_call": {
            "name": "test_invalid_flow_call",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose3.test_invalid_flow_result": {
            "name": "test_invalid_flow_result",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose4.test_valid_flow_with_call": {
            "name": "test_valid_flow_with_call",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose4.test_valid_flow_typechecks": {
            "name": "test_valid_flow_typechecks",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose4.test_invalid_flow_fns": {
            "name": "test_invalid_flow_fns",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose4.test_invalid_flow_call": {
            "name": "test_invalid_flow_call",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose4.test_invalid_flow_result": {
            "name": "test_invalid_flow_result",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose5.test_valid_flow_with_call": {
            "name": "test_valid_flow_with_call",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose5.test_valid_flow_typechecks": {
            "name": "test_valid_flow_typechecks",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose5.test_invalid_flow_fns": {
            "name": "test_invalid_flow_fns",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose5.test_invalid_flow_call": {
            "name": "test_invalid_flow_call",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose5.test_invalid_flow_result": {
            "name": "test_invalid_flow_result",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose6.test_valid_flow_with_call": {
            "name": "test_valid_flow_with_call",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose6.test_valid_flow_typechecks": {
            "name": "test_valid_flow_typechecks",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose6.test_invalid_flow_fns": {
            "name": "test_invalid_flow_fns",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose6.test_invalid_flow_call": {
            "name": "test_invalid_flow_call",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose6.test_invalid_flow_result": {
            "name": "test_invalid_flow_result",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose7.test_valid_flow_with_call": {
            "name": "test_valid_flow_with_call",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose7.test_valid_flow_typechecks": {
            "name": "test_valid_flow_typechecks",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose7.test_invalid_flow_fns": {
            "name": "test_invalid_flow_fns",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose7.test_invalid_flow_call": {
            "name": "test_invalid_flow_call",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose7.test_invalid_flow_result": {
            "name": "test_invalid_flow_result",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boiga-master/tests/test_either.py": {
        "TestEitherBind.test_left_bind_is_no_op": {
            "name": "test_left_bind_is_no_op",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_right_bind_calls_with_value": {
            "name": "test_right_bind_calls_with_value",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_right_bind_calls_with_value_other_type": {
            "name": "test_right_bind_calls_with_value_other_type",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind._test_bind_typecheck": {
            "name": "_test_bind_typecheck",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ],
                "fn_def": [
                    "str"
                ],
                "sig": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestEitherBind.test_left_bind_with_invalid_fn_param": {
            "name": "test_left_bind_with_invalid_fn_param",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_right_bind_with_invalid_fn_param": {
            "name": "test_right_bind_with_invalid_fn_param",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_left_bind_with_invalid_fn_return_left_type": {
            "name": "test_left_bind_with_invalid_fn_return_left_type",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_right_bind_with_invalid_fn_return_right_type": {
            "name": "test_right_bind_with_invalid_fn_return_right_type",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_left_bind_with_invalid_fn_return_type": {
            "name": "test_left_bind_with_invalid_fn_return_type",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_right_bind_with_invalid_fn_return_type": {
            "name": "test_right_bind_with_invalid_fn_return_type",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherFmap.test_left_fmap_is_no_op": {
            "name": "test_left_fmap_is_no_op",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherFmap.test_right_fmap_calls_with_value": {
            "name": "test_right_fmap_calls_with_value",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherFmap.test_right_fmap_calls_with_value_other_type": {
            "name": "test_right_fmap_calls_with_value_other_type",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherFmap._test_fmap_typecheck": {
            "name": "_test_fmap_typecheck",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ],
                "fn_def": [
                    "str"
                ],
                "sig": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestEitherFmap.test_left_fmap_with_invalid_fn_param": {
            "name": "test_left_fmap_with_invalid_fn_param",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherFmap.test_right_fmap_with_invalid_fn_param": {
            "name": "test_right_fmap_with_invalid_fn_param",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherRepr.test_left": {
            "name": "test_left",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherRepr.test_right": {
            "name": "test_right",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEitherBind.test_left_bind_is_no_op.oops": {
            "name": "oops",
            "location": 11,
            "return": [
                "boiga.either.Either[builtins.str, builtins.int]",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "TestEitherBind.test_right_bind_calls_with_value.inc": {
            "name": "inc",
            "location": 16,
            "return": [
                "Right",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "TestEitherBind.test_right_bind_calls_with_value_other_type.f": {
            "name": "f",
            "location": 21,
            "return": [
                "Right",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "TestEitherFmap.test_left_fmap_is_no_op.oops": {
            "name": "oops",
            "location": 89,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "boiga-master/tests/test_maybe.py": {
        "test_unit_with_non_none": {
            "name": "test_unit_with_non_none",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unit_with_none": {
            "name": "test_unit_with_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nothing_is_singleton": {
            "name": "test_nothing_is_singleton",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_with_none": {
            "name": "test_maybe_with_none",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMaybeBind.test_just_bind_calls_with_value": {
            "name": "test_just_bind_calls_with_value",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeBind.test_just_bind_calls_with_value_other_type": {
            "name": "test_just_bind_calls_with_value_other_type",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeBind.test_nothing_bind_is_no_op": {
            "name": "test_nothing_bind_is_no_op",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeFmap.test_just_fmap_calls_with_value": {
            "name": "test_just_fmap_calls_with_value",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeFmap.test_just_fmap_calls_with_value_other_type": {
            "name": "test_just_fmap_calls_with_value_other_type",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeFmap.test_nothing_fmap_is_no_op": {
            "name": "test_nothing_fmap_is_no_op",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeEq.test_just_when_eq": {
            "name": "test_just_when_eq",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeEq.test_just_when_not_eq": {
            "name": "test_just_when_not_eq",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeEq.test_just_and_nothing": {
            "name": "test_just_and_nothing",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeEq.test_nothing_and_nothing": {
            "name": "test_nothing_and_nothing",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeRepr.test_just": {
            "name": "test_just",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeRepr.test_nothing": {
            "name": "test_nothing",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybeBind.test_just_bind_calls_with_value.inc": {
            "name": "inc",
            "location": 24,
            "return": [
                "Just"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestMaybeBind.test_just_bind_calls_with_value_other_type.inc": {
            "name": "inc",
            "location": 30,
            "return": [
                "Just",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "TestMaybeBind.test_nothing_bind_is_no_op.oops": {
            "name": "oops",
            "location": 36,
            "return": [
                "boiga.maybe.Maybe[builtins.int]",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "TestMaybeFmap.test_just_fmap_calls_with_value.inc": {
            "name": "inc",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "TestMaybeFmap.test_just_fmap_calls_with_value_other_type.f": {
            "name": "f",
            "location": 50,
            "return": [
                "typing.Text",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "TestMaybeFmap.test_nothing_fmap_is_no_op.oops": {
            "name": "oops",
            "location": 56,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "boiga-master/tests/test_partial.py": {
        "TestPartial2.sum2": {
            "name": "sum2",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "TestPartial2.test_with_0_arg": {
            "name": "test_with_0_arg",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TestPartial2.test_with_1_arg": {
            "name": "test_with_1_arg",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TestPartial3.sum3": {
            "name": "sum3",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "TestPartial3.test_with_0_arg": {
            "name": "test_with_0_arg",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "bool"
                ],
                "b": [
                    "int",
                    "float",
                    "bool"
                ],
                "c": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestPartial3.test_with_1_arg": {
            "name": "test_with_1_arg",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "bool"
                ],
                "b": [
                    "int",
                    "float",
                    "bool"
                ],
                "c": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestPartial3.test_with_2_arg": {
            "name": "test_with_2_arg",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "bool"
                ],
                "b": [
                    "int",
                    "float",
                    "bool"
                ],
                "c": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestPartial4.sum4": {
            "name": "sum4",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "int"
                ],
                "d": [
                    "int"
                ]
            }
        },
        "TestPartial4.test_with_0_arg": {
            "name": "test_with_0_arg",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "b": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "c": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "d": [
                    "int",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "TestPartial4.test_with_1_arg": {
            "name": "test_with_1_arg",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "b": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "c": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "d": [
                    "int",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "TestPartial4.test_with_2_arg": {
            "name": "test_with_2_arg",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "b": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "c": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "d": [
                    "int",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "TestPartial4.test_with_3_arg": {
            "name": "test_with_3_arg",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "b": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "c": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "d": [
                    "int",
                    "List[T]",
                    "list[T]"
                ]
            }
        }
    },
    "boiga-master/tests/typecheck_helper.py": {
        "typecheck": {
            "name": "typecheck",
            "location": 10,
            "return": [
                "TypecheckResult"
            ],
            "arguments": {
                "program": [
                    "Union[(str, Sequence[str])]"
                ]
            }
        }
    },
    "boiga-master/tests/__init__.py": {}
}
{
    "bookstore-master/setup.py": {},
    "bookstore-master/bookstore/archive.py": {
        "BookstoreContentsArchiver.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreContentsArchiver.run_pre_save_hook": {
            "name": "run_pre_save_hook",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Union[str,Dict[str,Any]]",
                    "Dict",
                    "Set[str]",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "List[Exception]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "bookstore-master/bookstore/bookstore_config.py": {
        "validate_bookstore": {
            "name": "validate_bookstore",
            "location": 80,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "settings": [
                    "bool"
                ]
            }
        }
    },
    "bookstore-master/bookstore/clone.py": {
        "build_notebook_model": {
            "name": "build_notebook_model",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Deque",
                    "deque[str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "Deque",
                    "deque[str]",
                    "pathlib.Path"
                ]
            }
        },
        "build_file_model": {
            "name": "build_file_model",
            "location": 48,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "validate_relpath": {
            "name": "validate_relpath",
            "location": 335,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "relpath": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[None,str]"
                ],
                "settings": [
                    "str",
                    "bytes",
                    "int"
                ],
                "log": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "BookstoreCloneHandler.initialize": {
            "name": "initialize",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreCloneHandler.construct_template_params": {
            "name": "construct_template_params",
            "location": 126,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "s3_bucket": [
                    "str"
                ],
                "s3_object_key": [
                    "str"
                ],
                "s3_version_id": [
                    "str"
                ]
            }
        },
        "BookstoreCloneHandler.get_template": {
            "name": "get_template",
            "location": 152,
            "return": [
                "pathlib.Path",
                "str",
                "pypi2nix.path.Path"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BookstoreCloneAPIHandler.initialize": {
            "name": "initialize",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreCloneAPIHandler._build_s3_request_object": {
            "name": "_build_s3_request_object",
            "location": 185,
            "return": [
                "Dict[(str, Union[(_T0, _T1, _T2)])]"
            ],
            "arguments": {
                "self": [],
                "s3_bucket": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "s3_object_key": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "s3_version_id": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BookstoreCloneAPIHandler.build_content_model": {
            "name": "build_content_model",
            "location": 285,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Dict",
                    "path.Path",
                    "pathlib.Path"
                ],
                "target_path": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "BookstoreCloneAPIHandler.build_post_response_model": {
            "name": "build_post_response_model",
            "location": 309,
            "return": [
                "Callable[[Dict], None]",
                "Dict[int, dict]",
                "List[cmk.gui.plugins.visuals.utils.Filter]",
                "Callable[[dict], None]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Callable",
                    "Optional[Callable]",
                    "str",
                    "Dict",
                    "None",
                    "bytes",
                    "Callable[[str,str],None]",
                    "raiden.utils.BlockNumber"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[str]]"
                ],
                "s3_bucket": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "int",
                    "Optional[bytes]"
                ],
                "s3_object_key": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "BookstoreFSCloneHandler.initialize": {
            "name": "initialize",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreFSCloneHandler.construct_template_params": {
            "name": "construct_template_params",
            "location": 413,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "str",
                    "int",
                    "T"
                ],
                "fs_clonepath": [
                    "Dict[str,Any]"
                ]
            }
        },
        "BookstoreFSCloneHandler.get_template": {
            "name": "get_template",
            "location": 439,
            "return": [
                "pathlib.Path",
                "str",
                "pypi2nix.path.Path"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BookstoreFSCloneAPIHandler.initialize": {
            "name": "initialize",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreFSCloneAPIHandler._get_content": {
            "name": "_get_content",
            "location": 468,
            "return": [
                "str",
                "Optional[str]",
                "Generator[Union[Any,None,None]]",
                "bool",
                "List[str]",
                "Tuple[str,str]",
                "Tuple[Union[str,str,str]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "BookstoreFSCloneAPIHandler.build_content_model": {
            "name": "build_content_model",
            "location": 516,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Dict",
                    "path.Path",
                    "pathlib.Path"
                ],
                "target_path": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        }
    },
    "bookstore-master/bookstore/handlers.py": {
        "build_settings_dict": {
            "name": "build_settings_dict",
            "location": 53,
            "return": [
                "Dict[(str, Union[(str, _T0)])]"
            ],
            "arguments": {
                "validation": [
                    "bool",
                    "str",
                    "complex",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "load_jupyter_server_extension": {
            "name": "load_jupyter_server_extension",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "nb_app": [
                    "Dict[str, Any]"
                ]
            }
        },
        "collect_handlers": {
            "name": "collect_handlers",
            "location": 71,
            "return": [
                "List[Tuple[(str, Type[Union[(BookstoreVersionHandler, bookstore.clone.BookstoreCloneAPIHandler, bookstore.clone.BookstoreCloneHandler, bookstore.clone.BookstoreFSCloneAPIHandler, bookstore.clone.BookstoreFSCloneHandler, bookstore.publish.BookstorePublishAPIHandler)]])]]"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "base_url": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "validation": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BookstoreVersionHandler.get": {
            "name": "get",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BookstoreVersionHandler.build_response_dict": {
            "name": "build_response_dict",
            "location": 45,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bookstore-master/bookstore/publish.py": {
        "BookstorePublishAPIHandler.initialize": {
            "name": "initialize",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstorePublishAPIHandler.validate_model": {
            "name": "validate_model",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict",
                    "bool",
                    "Mapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "BookstorePublishAPIHandler.prepare_response": {
            "name": "prepare_response",
            "location": 124,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict"
                ],
                "full_s3_path": [
                    "str",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "Callable[[str],None]",
                    "None"
                ]
            }
        }
    },
    "bookstore-master/bookstore/s3_paths.py": {
        "_join": {
            "name": "_join",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "s3_path": {
            "name": "s3_path",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "s3_key": {
            "name": "s3_key",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "s3_display_path": {
            "name": "s3_display_path",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "bookstore-master/bookstore/utils.py": {
        "url_path_join": {
            "name": "url_path_join",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TemporaryWorkingDirectory.__enter__": {
            "name": "__enter__",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryWorkingDirectory.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Dict",
                    "int",
                    "float"
                ],
                "value": [
                    "Dict",
                    "int",
                    "float"
                ],
                "tb": [
                    "Dict",
                    "int",
                    "float"
                ]
            }
        }
    },
    "bookstore-master/bookstore/_version.py": {
        "_check_version": {
            "name": "_check_version",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "bookstore_version": [],
                "log": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        }
    },
    "bookstore-master/bookstore/__init__.py": {
        "_jupyter_server_extension_paths": {
            "name": "_jupyter_server_extension_paths",
            "location": 14,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        }
    },
    "bookstore-master/bookstore/client/nb_client.py": {
        "extract_kernel_id": {
            "name": "extract_kernel_id",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "connection_file": [
                    "str"
                ]
            }
        },
        "KernelInfo.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KernelInfo.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KernelInfo.__eq__": {
            "name": "__eq__",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "NotebookSession.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookSession.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookSession.__eq__": {
            "name": "__eq__",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "os.DirEntry"
                ]
            }
        },
        "NotebookClient.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb_config": [
                    "Optional[List[Any]]",
                    "Dict[str,Any]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "NotebookClient.setup_auth": {
            "name": "setup_auth",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.setup_request_sessions": {
            "name": "setup_request_sessions",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.sessions": {
            "name": "sessions",
            "location": 218,
            "return": [
                "Dict[,NotebookSession]",
                "Dict",
                "Iterable[Event]",
                "str",
                "Dict[str,Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.headers": {
            "name": "headers",
            "location": 225,
            "return": [
                "Dict[Text,Text]",
                "int",
                "Dict",
                "Dict[str,Type]",
                "str",
                "Dict[str,float]",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.sessions_endpoint": {
            "name": "sessions_endpoint",
            "location": 235,
            "return": [
                "Text",
                "str",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.get_sessions": {
            "name": "get_sessions",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.kernels_endpoint": {
            "name": "kernels_endpoint",
            "location": 247,
            "return": [
                "Text",
                "str",
                "float",
                "Optional[str]",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.get_kernels": {
            "name": "get_kernels",
            "location": 252,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.kernels": {
            "name": "kernels",
            "location": 259,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.contents_endpoint": {
            "name": "contents_endpoint",
            "location": 264,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotebookClient.get_contents": {
            "name": "get_contents",
            "location": 269,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "NotebookClientCollection.current_server": {
            "name": "current_server",
            "location": 284,
            "return": [
                "Optional[NotebookClient]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "CurrentNotebookClient.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentNotebookClient.connection_file": {
            "name": "connection_file",
            "location": 305,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentNotebookClient.kernel_id": {
            "name": "kernel_id",
            "location": 310,
            "return": [
                "IO",
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bookstore-master/bookstore/client/store_client.py": {
        "BookstoreClient.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_bucket": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "BookstoreClient.publish_endpoint": {
            "name": "publish_endpoint",
            "location": 28,
            "return": [
                "Text",
                "str",
                "float",
                "Optional[str]",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreClient.publish": {
            "name": "publish",
            "location": 33,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "BookstoreClient.clone_endpoint": {
            "name": "clone_endpoint",
            "location": 54,
            "return": [
                "Text",
                "str",
                "float",
                "Optional[str]",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BookstoreClient.clone": {
            "name": "clone",
            "location": 59,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "s3_bucket": [
                    "Text",
                    "str",
                    "Union[Dict[str,Any],List[Any]]"
                ],
                "s3_key": [
                    "str",
                    "Text"
                ],
                "target_path": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "bookstore-master/bookstore/client/__init__.py": {},
    "bookstore-master/bookstore/tests/test_archive.py": {
        "test_create_contentsarchiver": {
            "name": "test_create_contentsarchiver",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_contentsarchiver_invalid_args_count": {
            "name": "test_create_contentsarchiver_invalid_args_count",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pre_save_hook": {
            "name": "test_pre_save_hook",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pre_save_hook_bad_model": {
            "name": "test_pre_save_hook_bad_model",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bookstore-master/bookstore/tests/test_bookstore_config.py": {
        "test_validate_bookstore_defaults": {
            "name": "test_validate_bookstore_defaults",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_bookstore_published": {
            "name": "test_validate_bookstore_published",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_bookstore_workspace": {
            "name": "test_validate_bookstore_workspace",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_bookstore_endpoint": {
            "name": "test_validate_bookstore_endpoint",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_bookstore_bucket": {
            "name": "test_validate_bookstore_bucket",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_cloning": {
            "name": "test_disable_cloning",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_fs_cloning": {
            "name": "test_enable_fs_cloning",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relative_basepath": {
            "name": "test_relative_basepath",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        }
    },
    "bookstore-master/bookstore/tests/test_clone.py": {
        "test_build_notebook_model": {
            "name": "test_build_notebook_model",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_file_model": {
            "name": "test_build_file_model",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_relpath": {
            "name": "test_validate_relpath",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_relpath_empty_relpath": {
            "name": "test_validate_relpath_empty_relpath",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "test_validate_relpath_escape_basedir": {
            "name": "test_validate_relpath_escape_basedir",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "TestCloneHandler.setUp": {
            "name": "setUp",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneHandler.get_handler": {
            "name": "get_handler",
            "location": 75,
            "return": [
                "bookstore.clone.BookstoreCloneHandler"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "tornado.httpclienAsyncHTTPClient",
                    "None"
                ],
                "app": [
                    "None",
                    "aiohttp.web.Application",
                    "aiohttp.web.Request",
                    "abilian.app.Application"
                ]
            }
        },
        "TestCloneHandler.test_gen_template_params": {
            "name": "test_gen_template_params",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneHandler.test_gen_template_params_s3_version_id": {
            "name": "test_gen_template_params_s3_version_id",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneHandler.test_gen_template_params_base_url": {
            "name": "test_gen_template_params_base_url",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneAPIHandler.setUp": {
            "name": "setUp",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneAPIHandler.post_handler": {
            "name": "post_handler",
            "location": 184,
            "return": [
                "bookstore.clone.BookstoreCloneAPIHandler"
            ],
            "arguments": {
                "self": [],
                "body_dict": [
                    "str",
                    "Dict",
                    "Dict[str,str]"
                ],
                "app": [
                    "None"
                ]
            }
        },
        "TestCloneAPIHandler.test_build_s3_request_object": {
            "name": "test_build_s3_request_object",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneAPIHandler.test_build_s3_request_object_version_id": {
            "name": "test_build_s3_request_object_version_id",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneAPIHandler.test_build_post_response_model": {
            "name": "test_build_post_response_model",
            "location": 257,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSCloneHandler.setUp": {
            "name": "setUp",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSCloneHandler.get_handler": {
            "name": "get_handler",
            "location": 355,
            "return": [
                "bookstore.clone.BookstoreFSCloneHandler"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "tornado.httpclienAsyncHTTPClient",
                    "None"
                ],
                "app": [
                    "None",
                    "aiohttp.web.Application",
                    "aiohttp.web.Request",
                    "abilian.app.Application"
                ]
            }
        },
        "TestFSCloneHandler.test_gen_template_params": {
            "name": "test_gen_template_params",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSCloneHandler.test_gen_template_params_base_url": {
            "name": "test_gen_template_params_base_url",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSCloneAPIHandler.setUp": {
            "name": "setUp",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSCloneAPIHandler.post_handler": {
            "name": "post_handler",
            "location": 453,
            "return": [
                "bookstore.clone.BookstoreFSCloneAPIHandler"
            ],
            "arguments": {
                "self": [],
                "body_dict": [
                    "str",
                    "Dict",
                    "Dict[str,str]"
                ],
                "app": [
                    "bool",
                    "Dict",
                    "None",
                    "str"
                ]
            }
        }
    },
    "bookstore-master/bookstore/tests/test_handlers.py": {
        "test_collect_handlers_all": {
            "name": "test_collect_handlers_all",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_handlers_no_clone": {
            "name": "test_collect_handlers_no_clone",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_handlers_no_publish": {
            "name": "test_collect_handlers_no_publish",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_only_fs_clone": {
            "name": "test_collect_only_fs_clone",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_handlers_only_version": {
            "name": "test_collect_handlers_only_version",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bookstore_settings": {
            "name": "bookstore_settings",
            "location": 115,
            "return": [
                "BookstoreSettings",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "int",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_build_settings_dict": {
            "name": "test_build_settings_dict",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "bookstore_settings": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestCloneAPIHandler.setUp": {
            "name": "setUp",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneAPIHandler.get_handler": {
            "name": "get_handler",
            "location": 160,
            "return": [
                "BookstoreVersionHandler",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "tornado.httpclienAsyncHTTPClient",
                    "None"
                ],
                "app": [
                    "None",
                    "aiohttp.web.Application",
                    "aiohttp.web.Request",
                    "abilian.app.Application"
                ]
            }
        },
        "TestCloneAPIHandler.test_get": {
            "name": "test_get",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloneAPIHandler.test_build_response": {
            "name": "test_build_response",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bookstore-master/bookstore/tests/test_publish.py": {
        "test_create_publish_handler_no_params": {
            "name": "test_create_publish_handler_no_params",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPublishAPIHandler.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublishAPIHandler.put_handler": {
            "name": "put_handler",
            "location": 38,
            "return": [
                "bookstore.publish.BookstorePublishAPIHandler"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "int",
                    "None"
                ],
                "body_dict": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Match]",
                    "List[Tuple[str,bytes]]",
                    "Match",
                    "Optional[Dict[str,str]]",
                    "List[tuple[Union[str,bytes]]]",
                    "Optional[int]",
                    "Dict[str,str]",
                    "int"
                ],
                "app": [
                    "application.Application",
                    "List[str]",
                    "None",
                    "Union[PartSet,List[Part]]",
                    "List[Part]"
                ]
            }
        },
        "TestPublishAPIHandler.test_prepare_response": {
            "name": "test_prepare_response",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublishAPIHandler.test_validate_model_no_type": {
            "name": "test_validate_model_no_type",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublishAPIHandler.test_validate_model_wrong_type": {
            "name": "test_validate_model_wrong_type",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublishAPIHandler.test_validate_model_empty_content": {
            "name": "test_validate_model_empty_content",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublishAPIHandler.test_validate_model_bad_notebook": {
            "name": "test_validate_model_bad_notebook",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublishAPIHandler.test_validate_model_good_notebook": {
            "name": "test_validate_model_good_notebook",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bookstore-master/bookstore/tests/test_s3_paths.py": {
        "test_s3_paths": {
            "name": "test_s3_paths",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_paths_no_path": {
            "name": "test_s3_paths_no_path",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_paths_no_prefix": {
            "name": "test_s3_paths_no_prefix",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_key_no_prefix": {
            "name": "test_s3_key_no_prefix",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_key_invalid_prefix": {
            "name": "test_s3_key_invalid_prefix",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_key_valid_parameters": {
            "name": "test_s3_key_valid_parameters",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bookstore-master/bookstore/tests/test_utils.py": {
        "test_url_join_pieces": {
            "name": "test_url_join_pieces",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_join_no_pieces": {
            "name": "test_url_join_no_pieces",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_join_one_piece": {
            "name": "test_url_join_one_piece",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_path_join_strip_slash": {
            "name": "test_url_path_join_strip_slash",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bookstore-master/bookstore/tests/test_version.py": {
        "test_check_version": {
            "name": "test_check_version",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "bookstore_version": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "msg": [
                    "str",
                    "int"
                ],
                "caplog": [
                    "str",
                    "TextIO",
                    "logging.Logger"
                ]
            }
        }
    },
    "bookstore-master/bookstore/tests/__init__.py": {},
    "bookstore-master/bookstore/tests/client/client_fixtures.py": {
        "notebook_server_dict": {
            "name": "notebook_server_dict",
            "location": 7,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "Dict[str,Any]",
                "Dict[str,bool]",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "notebook_server_record": {
            "name": "notebook_server_record",
            "location": 23,
            "return": [
                "LiveNotebookRecord",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "notebook_server_dict": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "kernel_info_dict": {
            "name": "kernel_info_dict",
            "location": 29,
            "return": [
                "Dict[Text,Union[Text,int]]",
                "Dict[str,bool]",
                "Dict[str,Dict]",
                "Dict[str,float]",
                "Mapping[str,Any]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "kernel_info": {
            "name": "kernel_info",
            "location": 41,
            "return": [
                "KernelInfo",
                "str",
                "Dict",
                "int"
            ],
            "arguments": {
                "kernel_info_dict": [
                    "Dict",
                    "str",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "session_dict": {
            "name": "session_dict",
            "location": 47,
            "return": [
                "Dict[Text,Union[Text,dict,dict[str,object],None,dict[Text,Text]]]",
                "Dict",
                "Dict[str,Any]",
                "Optional[Dict[str,str]]",
                "int"
            ],
            "arguments": {
                "kernel_info_dict": [
                    "Dict",
                    "Dict[str,object]",
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "notebook_session": {
            "name": "notebook_session",
            "location": 60,
            "return": [
                "NotebookSession",
                "Dict",
                "Exception",
                "str",
                "Dict[str,Any]",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "session_dict": [
                    "str"
                ]
            }
        }
    },
    "bookstore-master/bookstore/tests/client/test_nb_client.py": {
        "test_notebook_server_record": {
            "name": "test_notebook_server_record",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "notebook_server_record": [
                    "Dict"
                ],
                "notebook_server_dict": [
                    "Dict"
                ]
            }
        },
        "test_kernel_info_class": {
            "name": "test_kernel_info_class",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "kernel_info_dict": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "kernel_info": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_notebook_session_class": {
            "name": "test_notebook_session_class",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "notebook_session": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "session_dict": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "test_extract_kernel_id": {
            "name": "test_extract_kernel_id",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_file": [
                    "str",
                    "int"
                ],
                "expected_kernel_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bookstore-master/bookstore/tests/client/__init__.py": {},
    "bookstore-master/ci/clone_request.py": {
        "get": {
            "name": "get",
            "location": 37,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "queries": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 41,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {}
        }
    },
    "bookstore-master/ci/jupyter_notebook_config.py": {},
    "bookstore-master/docs/source/conf.py": {}
}
{
    "bottom-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [
                "str",
                "List[T]",
                "Type"
            ],
            "arguments": {}
        }
    },
    "bottom-master/bottom/client.py": {
        "rfc2812_handler": {
            "name": "rfc2812_handler",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "RawClient.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RawClient.loop": {
            "name": "loop",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawClient.handle_raw": {
            "name": "handle_raw",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "typing.Callable[[], None]",
                    "Callable[[], None]",
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "RawClient.send_raw": {
            "name": "send_raw",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "RawClient.trigger": {
            "name": "trigger",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]"
                ]
            }
        },
        "RawClient.on": {
            "name": "on",
            "location": 111,
            "return": [
                "Callable",
                "str",
                "typing.Callable[, ]",
                "bool",
                "None",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Mapping"
                ],
                "func": [
                    "None",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Callable[[str], bool]]"
                ]
            }
        },
        "RawClient._connection_lost": {
            "name": "_connection_lost",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "AsyncGenerator",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "str",
                    "logging.LogRecord",
                    "list[]",
                    "list",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]"
                ],
                "port": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "Client.send": {
            "name": "send",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Callable[[Any], bool]",
                    "typing.Callable[typing.Any, bool]",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RawClient.connect.protocol_factory": {
            "name": "protocol_factory",
            "location": 72,
            "return": [
                "Protocol",
                "Optional[str]",
                "asyncio.AbstractEventLoop",
                "int"
            ],
            "arguments": {}
        }
    },
    "bottom-master/bottom/pack.py": {
        "b": {
            "name": "b",
            "location": 7,
            "return": [
                "bool",
                "str",
                "typing.Iterable[str]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[Tuple[str, str]]"
                ],
                "kwargs": [],
                "present": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "dict",
                    "typing.Any",
                    "Type[T]",
                    "dict[, ]",
                    "Optional[dict]",
                    "typing.Type"
                ],
                "missing": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "kwargs": [],
                "default": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "pack": {
            "name": "pack",
            "location": 26,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "field": [
                    "T"
                ],
                "kwargs": [],
                "default": [
                    "Optional[Any]",
                    "None",
                    "List[str]",
                    "Union[str, Pattern[str]]",
                    "typing.Any",
                    "list[str]",
                    "str",
                    "typing.Pattern"
                ],
                "sep": [
                    "typing.Text",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "pack_command": {
            "name": "pack_command",
            "location": 41,
            "return": [
                "str",
                "Dict[str, Any]",
                "typing.Text"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        }
    },
    "bottom-master/bottom/protocol.py": {
        "Protocol.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "None"
                ]
            }
        },
        "Protocol.connection_made": {
            "name": "connection_made",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "int",
                    "asyncio.BaseTransport",
                    "bool"
                ]
            }
        },
        "Protocol.connection_lost": {
            "name": "connection_lost",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Protocol.data_received": {
            "name": "data_received",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "T"
                ]
            }
        },
        "Protocol.write": {
            "name": "write",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "Protocol.close": {
            "name": "close",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bottom-master/bottom/unpack.py": {
        "synonym": {
            "name": "synonym",
            "location": 170,
            "return": [
                "typing.Text",
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Mapping[str, Any]",
                    "float"
                ]
            }
        },
        "nickmask": {
            "name": "nickmask",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int"
                ],
                "kwargs": []
            }
        },
        "add_nickmask": {
            "name": "add_nickmask",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "split_line": {
            "name": "split_line",
            "location": 190,
            "return": [
                "tuple[typing.Union[typing.Text,list[str]]]",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "Pattern[str]",
                    "list[str]",
                    "Pattern[bytes]",
                    "typing.Pattern",
                    "list",
                    "list[]",
                    "set",
                    "set[]"
                ]
            }
        },
        "unpack_command": {
            "name": "unpack_command",
            "location": 207,
            "return": [
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "parameters": {
            "name": "parameters",
            "location": 325,
            "return": [
                "list[typing.Text]",
                "int",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        }
    },
    "bottom-master/bottom/__init__.py": {},
    "bottom-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        }
    },
    "bottom-master/examples/common.py": {
        "handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "None",
                    "asyncio.Queue",
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[str], None]"
                ]
            }
        },
        "waiter": {
            "name": "waiter",
            "location": 23,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bottom-master/examples/echo.py": {
        "on_privmsg": {
            "name": "on_privmsg",
            "location": 7,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "nick": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Callable[[], object]",
                    "typing.Callable[[], object]",
                    "Pattern",
                    "typing.Pattern"
                ],
                "target": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "int"
                ],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "bottom-master/examples/regex.py": {
        "Router.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Router._handle": {
            "name": "_handle",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nick": [
                    "str",
                    "int",
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "simulation.core.common.Structure"
                ],
                "target": [
                    "str",
                    "int",
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "simulation.core.common.Structure"
                ],
                "message": [
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Router.route": {
            "name": "route",
            "location": 20,
            "return": [
                "str",
                "Dict[str, int]",
                "None",
                "dict[str, typing.Any]",
                "bool",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "dict[, ]",
                    "dict",
                    "bytes",
                    "T",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "func": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[textmetrics.common.References]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 41,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "nick": [
                    "int",
                    "str"
                ],
                "target": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "List[Tuple[str, str]]",
                    "None",
                    "int",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "message": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "match": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "bottom-master/examples/__init__.py": {},
    "bottom-master/tests/integ/conftest.py": {
        "host": {
            "name": "host",
            "location": 10,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "port": {
            "name": "port",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ssl": {
            "name": "ssl",
            "location": 20,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "flush": {
            "name": "flush",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loop": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 45,
            "return": [
                "TrackingClient",
                "str",
                "Callable"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "host": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "ssl": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 60,
            "return": [
                "typing.Protocol",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "loop": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "server": {
            "name": "server",
            "location": 100,
            "return": [
                "",
                "typing.Generator[Server]"
            ],
            "arguments": {
                "protocol": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "loop": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "host": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ssl": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "client": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "loop": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "flush._flush": {
            "name": "_flush",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "connect._connect": {
            "name": "_connect",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "client.TrackingClient.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "client.TrackingClient.trigger": {
            "name": "trigger",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "protocol.Protocol.factory": {
            "name": "factory",
            "location": 68,
            "return": [
                "typing.Callable[, ]",
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "server": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "protocol.Protocol.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "str"
                ]
            }
        },
        "protocol.Protocol.connection_made": {
            "name": "connection_made",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "protocol.Protocol.data_received": {
            "name": "data_received",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "T"
                ]
            }
        },
        "protocol.Protocol.write": {
            "name": "write",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "outgoing": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "protocol.Protocol.close": {
            "name": "close",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "server.Server.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "server.Server.close": {
            "name": "close",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "server.Server.expect": {
            "name": "expect",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "response": [
                    "None",
                    "int",
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "server.Server.handle": {
            "name": "handle",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "float",
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "server.Server.write": {
            "name": "write",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "outgoing": [
                    "int",
                    "float",
                    "List[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "bottom-master/tests/integ/test_local.py": {
        "test_connect": {
            "name": "test_connect",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "connect": [
                    "bool"
                ]
            }
        },
        "test_ping_pong": {
            "name": "test_ping_pong",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "server": [
                    "Dict[str, Any]",
                    "str"
                ],
                "connect": [
                    "bool"
                ],
                "flush": [
                    "bool"
                ]
            }
        }
    },
    "bottom-master/tests/unit/conftest.py": {
        "watch": {
            "name": "watch",
            "location": 10,
            "return": [
                "Watcher",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "connection_info": {
            "name": "connection_info",
            "location": 15,
            "return": [
                "dict[typing.Text, int]",
                "str",
                "T",
                "Sequence[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transport": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "protocol": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "connection_info": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "flush": {
            "name": "flush",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loop": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "schedule": {
            "name": "schedule",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loop": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "flush": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 59,
            "return": [
                "Protocol",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "transport": {
            "name": "transport",
            "location": 64,
            "return": [
                "Transport",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "protocol": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 80,
            "return": [
                "TrackingClient",
                "str",
                "Callable",
                "Callable[..., neuromation.api.Client]"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., neuromation.api.Client]"
                ]
            }
        },
        "active_client": {
            "name": "active_client",
            "location": 88,
            "return": [],
            "arguments": {
                "client": [
                    "Client",
                    "google.cloud.datastore.Client"
                ],
                "schedule": [
                    "Client",
                    "google.cloud.datastore.Client"
                ]
            }
        },
        "flush._flush": {
            "name": "_flush",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "schedule._schedule": {
            "name": "_schedule",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TrackingClient.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackingClient.trigger": {
            "name": "trigger",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Watcher.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Watcher.call": {
            "name": "call",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Watcher.called": {
            "name": "called",
            "location": 115,
            "return": [
                "Union",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "transport.Transport.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "transport.Transport.write": {
            "name": "write",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ]
            }
        },
        "transport.Transport.close": {
            "name": "close",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bottom-master/tests/unit/test_client.py": {
        "test_default_event_loop": {
            "name": "test_default_event_loop",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default_raw_handlers": {
            "name": "test_default_raw_handlers",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "int"
                ],
                "flush": [
                    "str"
                ]
            }
        },
        "test_stop_processing": {
            "name": "test_stop_processing",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "loop": [
                    "int"
                ],
                "flush": [
                    "str",
                    "typing.Mapping",
                    "asyncio.AbstractEventLoop",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_send_unknown_command": {
            "name": "test_send_unknown_command",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "active_client": [],
                "protocol": []
            }
        },
        "test_send_before_connected": {
            "name": "test_send_before_connected",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "neuromation.api.Client"
                ],
                "transport": [
                    "str",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_disconnect_before_connected": {
            "name": "test_disconnect_before_connected",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "neuromation.api.Client"
                ],
                "schedule": [
                    "libqtile.ipc.Client"
                ]
            }
        },
        "test_send_after_disconnected": {
            "name": "test_send_after_disconnected",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "transport": [
                    "str",
                    "neuromation.api.Client"
                ],
                "schedule": [
                    "Callable[..., neuromation.api.Client]",
                    "typing.Callable[..., C]"
                ]
            }
        },
        "test_old_connection_lost": {
            "name": "test_old_connection_lost",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "active_client": [
                    "str"
                ],
                "protocol": []
            }
        },
        "test_multiple_connect": {
            "name": "test_multiple_connect",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "Optional[arxiv.submission.Client]",
                    "Client",
                    "google.cloud.datastore.Client"
                ],
                "protocol": [],
                "schedule": [],
                "connection_info": [
                    "List[List[int]]",
                    "str",
                    "list[list[int]]"
                ]
            }
        },
        "test_unpack_triggers_client": {
            "name": "test_unpack_triggers_client",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "active_client": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ],
                "protocol": [
                    "str"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_on_signature": {
            "name": "test_on_signature",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_on_coroutine": {
            "name": "test_on_coroutine",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_trigger_no_handlers": {
            "name": "test_trigger_no_handlers",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "neuromation.api.Client"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_trigger_one_handler": {
            "name": "test_trigger_one_handler",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "bool"
                ],
                "watch": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "asyncio.AbstractEventLoop"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_trigger_multiple_handlers": {
            "name": "test_trigger_multiple_handlers",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "asyncio.AbstractEventLoop"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_trigger_unpacking": {
            "name": "test_trigger_unpacking",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "Sequence[str]",
                    "asyncio.AbstractEventLoop"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_bound_method_of_instance": {
            "name": "test_bound_method_of_instance",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "flush": [
                    "str",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_callback_ordering": {
            "name": "test_callback_ordering",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_wait_ordering": {
            "name": "test_wait_ordering",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "Callable[..., neuromation.api.Client]"
                ],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_wait_return_value": {
            "name": "test_wait_return_value",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "flush": [
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_trigger_multiple_handlers.incr": {
            "name": "incr",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "test_trigger_unpacking.func": {
            "name": "func",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "arg": [
                    "float",
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]",
                    "Iterable"
                ]
            }
        },
        "test_wait_ordering.handle": {
            "name": "handle",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bound_method_of_instance.Class.method": {
            "name": "method",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "kw_default": [
                    "typing.Text",
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "bottom-master/tests/unit/test_pack.py": {
        "like": {
            "name": "like",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "list",
                    "list[]",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Union[str, bytes]",
                    "bytes",
                    "Union[bytes, bytearray, str]",
                    "bytearray"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "test_no_command": {
            "name": "test_no_command",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_command": {
            "name": "test_bad_command",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_command": {
            "name": "test_unknown_command",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_case": {
            "name": "test_ignore_case",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pass": {
            "name": "test_pass",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_nick": {
            "name": "test_nick",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_user": {
            "name": "test_user",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_oper": {
            "name": "test_oper",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_usermode": {
            "name": "test_usermode",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_service": {
            "name": "test_service",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_quit": {
            "name": "test_quit",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_squit": {
            "name": "test_squit",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_join": {
            "name": "test_join",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part": {
            "name": "test_part",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channelmode": {
            "name": "test_channelmode",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_topic": {
            "name": "test_topic",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_names": {
            "name": "test_names",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_invite": {
            "name": "test_invite",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_command": {
            "name": "test_command",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_privmsg": {
            "name": "test_privmsg",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_notice": {
            "name": "test_notice",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_motd": {
            "name": "test_motd",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lusers": {
            "name": "test_lusers",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_stats": {
            "name": "test_stats",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_links": {
            "name": "test_links",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_time": {
            "name": "test_time",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_connect": {
            "name": "test_connect",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_trace": {
            "name": "test_trace",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_admin": {
            "name": "test_admin",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_info": {
            "name": "test_info",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_servlist": {
            "name": "test_servlist",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_squery": {
            "name": "test_squery",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_who": {
            "name": "test_who",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_whois": {
            "name": "test_whois",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_whowas": {
            "name": "test_whowas",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_kill": {
            "name": "test_kill",
            "location": 297,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ping": {
            "name": "test_ping",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pong": {
            "name": "test_pong",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_away": {
            "name": "test_away",
            "location": 315,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_rehash": {
            "name": "test_rehash",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_die": {
            "name": "test_die",
            "location": 326,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_restart": {
            "name": "test_restart",
            "location": 331,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_summon": {
            "name": "test_summon",
            "location": 336,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_users": {
            "name": "test_users",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_wallops": {
            "name": "test_wallops",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_userhost": {
            "name": "test_userhost",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ison": {
            "name": "test_ison",
            "location": 364,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "bottom-master/tests/unit/test_protocol.py": {
        "test_connection_made": {
            "name": "test_connection_made",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "int"
                ],
                "transport": [
                    "str",
                    "int"
                ]
            }
        },
        "test_connection_lost": {
            "name": "test_connection_lost",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": []
            }
        },
        "test_disconnect_after_connect": {
            "name": "test_disconnect_after_connect",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str"
                ],
                "transport": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "active_client": []
            }
        },
        "test_write": {
            "name": "test_write",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [],
                "transport": [
                    "str",
                    "slice"
                ],
                "active_client": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_partial_line": {
            "name": "test_partial_line",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "slice"
                ],
                "transport": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "active_client": [],
                "flush": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_multipart_line": {
            "name": "test_multipart_line",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "slice"
                ],
                "transport": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "active_client": [],
                "flush": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_multiline_chunk": {
            "name": "test_multiline_chunk",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "slice"
                ],
                "transport": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "active_client": [],
                "flush": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_invalid_line": {
            "name": "test_invalid_line",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "slice"
                ],
                "transport": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "active_client": [],
                "flush": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [],
                "transport": [],
                "active_client": []
            }
        },
        "test_connection_lost.MockClient._connection_lost": {
            "name": "_connection_lost",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "bottom-master/tests/unit/test_unpack.py": {
        "test_no_command": {
            "name": "test_no_command",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_command": {
            "name": "test_bad_command",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_command": {
            "name": "test_unknown_command",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_case": {
            "name": "test_ignore_case",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_synonym": {
            "name": "test_synonym",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "validate": {
            "name": "validate",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "command": [
                    "IO",
                    "str",
                    "typing.IO",
                    "List[Dict[str, str]]",
                    "int",
                    "list[dict[str, str]]",
                    "set",
                    "set[]",
                    "list",
                    "list[]",
                    "Type",
                    "typing.Type"
                ],
                "message": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected_kwargs": [
                    "IO",
                    "str",
                    "typing.IO",
                    "List[Dict[str, str]]",
                    "int",
                    "list[dict[str, str]]",
                    "set",
                    "set[]",
                    "list",
                    "list[]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "test_param_positioning": {
            "name": "test_param_positioning",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_client_commands": {
            "name": "test_client_commands",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ping": {
            "name": "test_ping",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_privmsg": {
            "name": "test_privmsg",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_notice": {
            "name": "test_notice",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_join": {
            "name": "test_join",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_nick": {
            "name": "test_nick",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_quit": {
            "name": "test_quit",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_quit_no_msg": {
            "name": "test_quit_no_msg",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part": {
            "name": "test_part",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_part_no_msg": {
            "name": "test_part_no_msg",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_invite": {
            "name": "test_invite",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channel_message_commands": {
            "name": "test_channel_message_commands",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_topic": {
            "name": "test_topic",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channelmode_no_params": {
            "name": "test_channelmode_no_params",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channelmode_hash": {
            "name": "test_channelmode_hash",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channelmode_ampersand": {
            "name": "test_channelmode_ampersand",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channelmode_bang": {
            "name": "test_channelmode_bang",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_channelmode_plus": {
            "name": "test_channelmode_plus",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_usermode": {
            "name": "test_usermode",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_who_reply": {
            "name": "test_who_reply",
            "location": 257,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_end_of_who_reply": {
            "name": "test_end_of_who_reply",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_name_reply": {
            "name": "test_name_reply",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_name_reply_longer": {
            "name": "test_name_reply_longer",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_message_commands": {
            "name": "test_message_commands",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_count_commands": {
            "name": "test_count_commands",
            "location": 304,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_count_commands_no_msg": {
            "name": "test_count_commands_no_msg",
            "location": 313,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_info_commands": {
            "name": "test_info_commands",
            "location": 322,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    }
}
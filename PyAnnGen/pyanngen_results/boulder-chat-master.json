{
    "boulder-chat-master/setup.py": {},
    "boulder-chat-master/boulder_chat/authserver.py": {
        "get_test_auth_store": {
            "name": "get_test_auth_store",
            "location": 31,
            "return": [
                "s.AuthStore"
            ],
            "arguments": {}
        },
        "get_test_stores": {
            "name": "get_test_stores",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "make_auth_token": {
            "name": "make_auth_token",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "server_key_pair": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "KT"
                ],
                "sender_public": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "KT"
                ],
                "receiver_public": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "KT"
                ]
            }
        },
        "check_auth_token": {
            "name": "check_auth_token",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "server_public": [
                    "str"
                ],
                "auth_token": [
                    "str"
                ],
                "sender_public": [
                    "bytes",
                    "str"
                ],
                "receiver_secret": [
                    "bytes",
                    "str"
                ]
            }
        },
        "make_auth_payload": {
            "name": "make_auth_payload",
            "location": 51,
            "return": [
                "dict"
            ],
            "arguments": {
                "server_public_key": [
                    "bytes",
                    "bool",
                    "Dict[str,list[dict]]",
                    "int",
                    "Dict[str,List[Dict]]"
                ],
                "sender_public_key": [
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "receiver_public_key": [
                    "bytes"
                ]
            }
        },
        "process_auth_payload": {
            "name": "process_auth_payload",
            "location": 59,
            "return": [
                "dict"
            ],
            "arguments": {
                "server_key_pair": [
                    "bytes",
                    "str",
                    "float"
                ],
                "payload": [
                    "bytes"
                ],
                "hook": [
                    "Callable",
                    "int",
                    "bool",
                    "str",
                    "Iterable[Iterable[T]]",
                    "Optional[str]"
                ]
            }
        },
        "decode_auth_response": {
            "name": "decode_auth_response",
            "location": 77,
            "return": [
                "dict"
            ],
            "arguments": {
                "server_public": [
                    "str",
                    "bool",
                    "int"
                ],
                "receiver_public": [
                    "List[str]",
                    "Union[bytes,bytearray,memoryview]",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ],
                "sender_secret": [
                    "bytes",
                    "float"
                ],
                "payload": [
                    "str",
                    "List[str]",
                    "Dict[int,str]"
                ]
            }
        },
        "get_auth_store": {
            "name": "get_auth_store",
            "location": 92,
            "return": [
                "s.AuthStore"
            ],
            "arguments": {}
        },
        "request_symetric_key": {
            "name": "request_symetric_key",
            "location": 95,
            "return": [
                "dict"
            ],
            "arguments": {
                "store": [
                    "str",
                    "Optional[List[Any]]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "receiver_public_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_symetric_key": {
            "name": "get_symetric_key",
            "location": 123,
            "return": [
                "Tuple[int]",
                "Optional[Dict]",
                "Dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/boulder_chat/client.py": {
        "create_message_payload": {
            "name": "create_message_payload",
            "location": 18,
            "return": [
                "dict"
            ],
            "arguments": {
                "key_pair": [
                    "str",
                    "bool",
                    "Optional[List]",
                    "List",
                    "Dict",
                    "None",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "symetric_key": [
                    "str",
                    "float",
                    "bytes",
                    "List",
                    "bool",
                    "BinaryIO"
                ],
                "message": [
                    "bytes",
                    "str",
                    "crypto.PointG2"
                ],
                "is_file": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "create_first_message_payload": {
            "name": "create_first_message_payload",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "sender_key_pair": [
                    "bool",
                    "List[str]",
                    "Tuple[Union[list[int],list[int]]]",
                    "bytes",
                    "Tuple[List[int],List[int]]",
                    "Dict",
                    "Iterable"
                ],
                "reciever_key_pair": [
                    "bytes",
                    "IO[Any]",
                    "int",
                    "tuple"
                ],
                "symetric_key": [
                    "bytes",
                    "int",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "authentication_token": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "None",
                    "bytes",
                    "Dict[str,Set[str]]",
                    "Optional[str]",
                    "Dict[str,set[str]]"
                ],
                "sender_host": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "None",
                    "bytes",
                    "Dict[str,Set[str]]",
                    "Optional[str]",
                    "Dict[str,set[str]]"
                ],
                "message": [
                    "int",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "str",
                    "bytes",
                    "bool",
                    "Dict",
                    "Union[dict,list]",
                    "List"
                ]
            }
        },
        "process_message_payload": {
            "name": "process_message_payload",
            "location": 44,
            "return": [
                "dict"
            ],
            "arguments": {
                "symetric_key": [
                    "str",
                    "float",
                    "bytes",
                    "AnyStr"
                ],
                "payload": [
                    "bytes"
                ],
                "hook": [
                    "Callable",
                    "Iterable[Iterable[T]]",
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "process_first_message_payload": {
            "name": "process_first_message_payload",
            "location": 66,
            "return": [
                "dict"
            ],
            "arguments": {
                "secret_key": [
                    "Sequence[Hashable]",
                    "str",
                    "Dict",
                    "bytes"
                ],
                "server_public": [
                    "str",
                    "Type",
                    "bytes",
                    "Optional[VT]",
                    "None"
                ],
                "payload": [
                    "str",
                    "bytes",
                    "T",
                    "int"
                ],
                "hook": [
                    "Callable",
                    "int",
                    "List[Tuple[int,int]]",
                    "float",
                    "bytes",
                    "str"
                ]
            }
        },
        "deliver_message": {
            "name": "deliver_message",
            "location": 90,
            "return": [
                "Optional[requests.models.Response]"
            ],
            "arguments": {
                "store": [
                    "bytes",
                    "Optional[str]",
                    "List[str]"
                ],
                "user_public_key": [
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "None",
                    "Optional[Union[str,int]]",
                    "int"
                ],
                "message": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "is_file": [
                    "bool",
                    "bytes",
                    "str"
                ],
                "file_path": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "deliver_first_message": {
            "name": "deliver_first_message",
            "location": 115,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "store": [
                    "bytes",
                    "str"
                ],
                "user_host": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "user_public_key": [
                    "str",
                    "bytes",
                    "Optional[Union[str,int]]",
                    "Optional[str]"
                ],
                "sender_host": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "recieve_first_message": {
            "name": "recieve_first_message",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "dict",
                    "Exception",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "recieve_message": {
            "name": "recieve_message",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "str",
                    "list"
                ],
                "message": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "create_test_users": {
            "name": "create_test_users",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "save": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "get_receiver": {
            "name": "get_receiver",
            "location": 191,
            "return": [
                "s.ClientStore"
            ],
            "arguments": {}
        },
        "get_sender": {
            "name": "get_sender",
            "location": 194,
            "return": [
                "s.ClientStore"
            ],
            "arguments": {}
        },
        "send_first_message": {
            "name": "send_first_message",
            "location": 200,
            "return": [
                "Tuple[int]",
                "int",
                "Tuple[Union[Text,int]]",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "send_message": {
            "name": "send_message",
            "location": 219,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Tuple[int]",
                "Union[str,List[str]]",
                "int"
            ],
            "arguments": {}
        },
        "run_flask": {
            "name": "run_flask",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/boulder_chat/crypto.py": {
        "create_key": {
            "name": "create_key",
            "location": 16,
            "return": [
                "bytes"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "generate_key": {
            "name": "generate_key",
            "location": 21,
            "return": [
                "bytes"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str",
                    "float",
                    "Tuple[int,int]"
                ]
            }
        },
        "encrypt_AES": {
            "name": "encrypt_AES",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "payload": [
                    "str",
                    "bytes"
                ]
            }
        },
        "decrypt_AES": {
            "name": "decrypt_AES",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "ecrypted_payload": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "gen_key_RSA": {
            "name": "gen_key_RSA",
            "location": 54,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "encrypt_RSA": {
            "name": "encrypt_RSA",
            "location": 59,
            "return": [
                "bytes"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "payload": [
                    "str",
                    "bytes"
                ]
            }
        },
        "decrypt_RSA": {
            "name": "decrypt_RSA",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "private_key": [
                    "bytes",
                    "int",
                    "str",
                    "Optional[bytes]",
                    "None"
                ],
                "payload": [
                    "str",
                    "bytes",
                    "Callable",
                    "Union[str,bytes]"
                ]
            }
        },
        "import_public_key": {
            "name": "import_public_key",
            "location": 74,
            "return": [
                "str",
                "bool",
                "List[int]",
                "Set[str]"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "export_public_key": {
            "name": "export_public_key",
            "location": 79,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "key_pair": [
                    "bool",
                    "str",
                    "int",
                    "PublicKey"
                ]
            }
        },
        "import_private_key": {
            "name": "import_private_key",
            "location": 82,
            "return": [
                "str",
                "bool",
                "List[int]",
                "Set[str]"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "export_private_key": {
            "name": "export_private_key",
            "location": 87,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "key_pair": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "sign_text": {
            "name": "sign_text",
            "location": 90,
            "return": [
                "Set[str]",
                "List[int]",
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "key_pair": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "text": [
                    "str",
                    "Union[str,bytes]"
                ]
            }
        },
        "verify_sign": {
            "name": "verify_sign",
            "location": 101,
            "return": [
                "dict",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "List[int]"
            ],
            "arguments": {
                "key_pair": [
                    "str",
                    "List[str]",
                    "Tuple[str, str, int]"
                ],
                "signature": [
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "Union[bytes,bytearray]",
                    "bytes",
                    "Optional[str]",
                    "bytearray",
                    "None"
                ],
                "text": [
                    "str",
                    "bytes",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "boulder-chat-master/boulder_chat/message.py": {
        "read_line": {
            "name": "read_line",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "select_option": {
            "name": "select_option",
            "location": 12,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {
                "options": [
                    "list",
                    "List[List[T]]",
                    "List[int]",
                    "List[List]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/boulder_chat/store.py": {
        "load_json": {
            "name": "load_json",
            "location": 6,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "create_test_store": {
            "name": "create_test_store",
            "location": 175,
            "return": [
                "ClientStore"
            ],
            "arguments": {
                "server_materials": [
                    "str",
                    "int",
                    "None",
                    "defaultdict",
                    "DefaultDict"
                ]
            }
        },
        "AuthStore.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "materials": [
                    "Dict[str,Any]",
                    "None",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "MutableMapping[str,str]",
                    "MutableMapping"
                ]
            }
        },
        "AuthStore.public_key": {
            "name": "public_key",
            "location": 26,
            "return": [
                "str",
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthStore.private_key": {
            "name": "private_key",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthStore.toSerializableDict": {
            "name": "toSerializableDict",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthStore.save": {
            "name": "save",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "ClientStore.from_data": {
            "name": "from_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[int]",
                    "int",
                    "Collection"
                ],
                "file_path": [
                    "str",
                    "None"
                ]
            }
        },
        "ClientStore.get_user_data": {
            "name": "get_user_data",
            "location": 64,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "user_pk": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "ClientStore.public_key": {
            "name": "public_key",
            "location": 75,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.private_key": {
            "name": "private_key",
            "location": 78,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.server_data": {
            "name": "server_data",
            "location": 81,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.server_host": {
            "name": "server_host",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.server_public_key": {
            "name": "server_public_key",
            "location": 90,
            "return": [
                "str",
                "bytes",
                "Sequence[Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.add_message": {
            "name": "add_message",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_public_key": [
                    "int",
                    "str"
                ],
                "message": [
                    "List[List[Any]]",
                    "List[str]",
                    "List[list[Any]]",
                    "List",
                    "int",
                    "rchain.crypto.PrivateKey",
                    "Callable",
                    "Optional[Callable]",
                    "None"
                ],
                "sender": [
                    "bool",
                    "List[List[Any]]",
                    "List[str]",
                    "List",
                    "rchain.crypto.PrivateKey",
                    "int",
                    "Optional[Callable]"
                ]
            }
        },
        "ClientStore.add_file": {
            "name": "add_file",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_public_key": [
                    "int",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "message": [
                    "str",
                    "TextIO"
                ],
                "sender": [
                    "bool",
                    "str",
                    "Dict",
                    "Tuple[IO[bytes],dict]",
                    "List[Dict[str,Any]]",
                    "Dict[str,str]"
                ],
                "file_path": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Dict[str,Any]",
                    "bytes",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ]
            }
        },
        "ClientStore.get_user_host": {
            "name": "get_user_host",
            "location": 111,
            "return": [
                "str",
                "Optional[str]",
                "None",
                "bool",
                "List[str]",
                "Callable[,None]"
            ],
            "arguments": {
                "self": [],
                "user_public_key": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ClientStore.get_user_conversation": {
            "name": "get_user_conversation",
            "location": 118,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "Union[None, str]"
            ],
            "arguments": {
                "self": [],
                "user_public_key": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "ClientStore.add_user": {
            "name": "add_user",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "int",
                    "bytes",
                    "crypto.PointG1",
                    "bool"
                ],
                "symetric_key": [
                    "Tuple[int,int]",
                    "Dict",
                    "Tuple[Union[int,int]]",
                    "bytes",
                    "Union[Mapping,str]",
                    "Mapping",
                    "Union[str,int]",
                    "str",
                    "int"
                ],
                "first_message": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "rchain.crypto.PrivateKey"
                ],
                "is_sender": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "rchain.crypto.PrivateKey"
                ],
                "host": [
                    "Text",
                    "Tuple[int,int]",
                    "Dict",
                    "bytes",
                    "Union[Mapping,str]",
                    "Union[str,int]"
                ]
            }
        },
        "ClientStore.all_user_data": {
            "name": "all_user_data",
            "location": 132,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.toSerializableDict": {
            "name": "toSerializableDict",
            "location": 138,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.save": {
            "name": "save",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStore.get_user_symetric_key": {
            "name": "get_user_symetric_key",
            "location": 160,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "frozenset",
                    "FrozenSet[bytes]",
                    "int"
                ]
            }
        },
        "ClientStore.save_public_key": {
            "name": "save_public_key",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "ClientStore.reload": {
            "name": "reload",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boulder-chat-master/boulder_chat/__init__.py": {},
    "boulder-chat-master/scripts/ask_for_auth.py": {},
    "boulder-chat-master/scripts/send_message.py": {},
    "boulder-chat-master/tests/test_authserver.py": {
        "test_process_auth_payload": {
            "name": "test_process_auth_payload",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/tests/test_client.py": {
        "test_process_message_payload": {
            "name": "test_process_message_payload",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_first_message_payload": {
            "name": "test_process_first_message_payload",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/tests/test_crypto.py": {
        "create_test_key": {
            "name": "create_test_key",
            "location": 3,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "create_test_string": {
            "name": "create_test_string",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_aes_encryption": {
            "name": "test_aes_encryption",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_public_key_encryption": {
            "name": "test_public_key_encryption",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/tests/test_store.py": {
        "test_authentication_store": {
            "name": "test_authentication_store",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_store": {
            "name": "test_client_store",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boulder-chat-master/tests/__init__.py": {}
}
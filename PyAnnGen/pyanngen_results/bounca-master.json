{
    "bounca-master/manage.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bounca-master/setup.py": {
        "FrontendBuilder.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendBuilder.initialize_options": {
            "name": "initialize_options",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendBuilder.finalize_options": {
            "name": "finalize_options",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "sdist.run": {
            "name": "run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "install.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/api/apps.py": {},
    "bounca-master/api/filters.py": {
        "RelatedOrderingFilter._get_verbose_name": {
            "name": "_get_verbose_name",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool"
                ],
                "non_verbose_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "RelatedOrderingFilter._retrieve_all_related_fields": {
            "name": "_retrieve_all_related_fields",
            "location": 16,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "model": [
                    "str",
                    "int",
                    "django.db.models.fields.Field"
                ],
                "depth": [
                    "int",
                    "Dict[str,Any]",
                    "SupportsInt"
                ]
            }
        },
        "RelatedOrderingFilter.get_valid_fields": {
            "name": "get_valid_fields",
            "location": 38,
            "return": [
                "Dict[str,Any]",
                "List[list[tuple]]",
                "str",
                "List[tuple[Union[str,str]]]",
                "Mapping[str,T]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "django.db.models.QuerySet"
                ],
                "view": [
                    "Dict[str,Any]",
                    "bool",
                    "core.models.Recipe",
                    "salon.models.Stylist",
                    "core.models.Step"
                ],
                "context": [
                    "str",
                    "None",
                    "tartare.core.models.Job",
                    "models.Course"
                ]
            }
        }
    },
    "bounca-master/api/forms.py": {
        "Submit.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordConfirmValidator.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "int",
                    "List[int]",
                    "Dict",
                    "str",
                    "frozenset",
                    "AbstractSet[str]",
                    "AbstractSet"
                ]
            }
        },
        "CertificateForm.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddRootCAForm.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddIntermediateCAForm.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddCertificateForm.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangePasswordForm.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeProfileForm.__init__": {
            "name": "__init__",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/api/mixins.py": {
        "TrapDjangoValidationErrorCreateMixin.perform_create": {
            "name": "perform_create",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "Dict[str, Set[str]]",
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "TrapDjangoValidationErrorUpdateMixin.perform_update": {
            "name": "perform_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "List[str]",
                    "Callable",
                    "type",
                    "List[List[str]]"
                ]
            }
        }
    },
    "bounca-master/api/permissions.py": {
        "BounCAUserPermissions.has_permission": {
            "name": "has_permission",
            "location": 7,
            "return": [
                "bool",
                "Optional[str]",
                "Dict",
                "Dict[str,Tuple[Any,Any]]",
                "int",
                "Dict[str,Type[Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Set[str]",
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "int",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "BounCAUserPermissions.has_object_permission": {
            "name": "has_object_permission",
            "location": 15,
            "return": [
                "bool",
                "Dict[str,Tuple[Any,Any]]",
                "str",
                "Mapping[int,str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "Tuple[int]",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "str",
                    "rest_framework.requesRequest"
                ],
                "obj": [
                    "Dict",
                    "Tuple[int]",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "bounca-master/api/serializers.py": {
        "CertificateSerializer.validate_passphrase_out": {
            "name": "validate_passphrase_out",
            "location": 67,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "passphrase_out": [
                    "str",
                    "int"
                ]
            }
        },
        "CertificateSerializer.validate_passphrase_issuer": {
            "name": "validate_passphrase_issuer",
            "location": 73,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "passphrase_issuer": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CertificateSerializer.validate_passphrase_out_confirmation": {
            "name": "validate_passphrase_out_confirmation",
            "location": 88,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "passphrase_out_confirmation": [
                    "int",
                    "str",
                    "Dict",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "CertificateSerializer.validate": {
            "name": "validate",
            "location": 97,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "CertificateSerializer.create": {
            "name": "create",
            "location": 109,
            "return": [
                "bool",
                "str",
                "float",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,float]",
                    "story.models.Story"
                ]
            }
        },
        "CertificateRevokeSerializer.validate_passphrase_issuer": {
            "name": "validate_passphrase_issuer",
            "location": 124,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "passphrase_issuer": [
                    "IO",
                    "db.models.Region",
                    "viewer.models.Archive",
                    "IO[str]",
                    "zerver.models.Realm"
                ]
            }
        },
        "CertificateCRLSerializer.validate_passphrase_issuer": {
            "name": "validate_passphrase_issuer",
            "location": 147,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "passphrase_issuer": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "CertificateCRLSerializer.update": {
            "name": "update",
            "location": 155,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "validated_data": [
                    "bytes",
                    "Dict",
                    "Dict[str,float]",
                    "Dict[str,Union[str,bool]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "bounca-master/api/urls.py": {},
    "bounca-master/api/views.py": {
        "IsCertificateOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "scrapy.http.Request"
                ],
                "view": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "scrapy.http.Request"
                ]
            }
        },
        "CertificateListView.get_queryset": {
            "name": "get_queryset",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateInstanceView.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateInstanceView.destroy": {
            "name": "destroy",
            "location": 85,
            "return": [
                "Response",
                "str",
                "Dict[str,Any]",
                "Dict[str,str]",
                "flask.Response",
                "Dict[str,Dict[str,Any]]",
                "lunch_buddies.models.poll_responses.PollResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Iterator",
                    "django.http.HttpRequest"
                ]
            }
        },
        "CertificateInfoView.get": {
            "name": "get",
            "location": 98,
            "return": [
                "Response",
                "Callable",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "Dict",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ApiRoot.as_view": {
            "name": "as_view",
            "location": 113,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str"
                ],
                "urlpatterns": [
                    "List",
                    "Callable",
                    "str"
                ]
            }
        },
        "ApiRoot.get_api_structure": {
            "name": "get_api_structure",
            "location": 117,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "patterns": [
                    "int"
                ],
                "request": [
                    "str",
                    "Dict[str,Any]",
                    "duniterpy.api.endpoinConnectionHandler"
                ]
            }
        },
        "ApiRoot.get": {
            "name": "get",
            "location": 134,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "django.http.HttpRequest"
                ]
            }
        },
        "FileView.get_cert_keystore": {
            "name": "get_cert_keystore",
            "location": 143,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cert": [
                    "bytes"
                ]
            }
        },
        "FileView.get_crlstore": {
            "name": "get_crlstore",
            "location": 149,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cert": [
                    "str",
                    "bool"
                ]
            }
        },
        "CertificateFilesView._get_cert_chain": {
            "name": "_get_cert_chain",
            "location": 157,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "IO",
                    "django.db.models.QuerySet",
                    "str",
                    "int",
                    "Type",
                    "List",
                    "IO[bytes]",
                    "Type[T]"
                ],
                "cert": [
                    "bytes",
                    "IO",
                    "django.db.models.QuerySet",
                    "str",
                    "int",
                    "Type",
                    "List",
                    "IO[bytes]",
                    "Type[T]"
                ]
            }
        },
        "CertificateFilesView._get_filename_escape": {
            "name": "_get_filename_escape",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "cert": [
                    "str",
                    "Callable",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "CertificateFilesView.make_certificate_zip": {
            "name": "make_certificate_zip",
            "location": 165,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "IO[bytes]",
                    "Type['AbstractIntegrationConversation']"
                ],
                "cert": [
                    "Type",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "str",
                    "None",
                    "bytes",
                    "IO[bytes]",
                    "IO",
                    "int"
                ]
            }
        },
        "CertificateFilesView._make_file_response": {
            "name": "_make_file_response",
            "location": 202,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str,Any]",
                "Dict[str,Union[str,int]]",
                "Dict",
                "Dict[str,Dict[str,str]]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Dict[str,Any]"
                ],
                "filename": [
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CertificateFilesView._make_certificate_content": {
            "name": "_make_certificate_content",
            "location": 208,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "Mapping",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "CertificateFilesView.get": {
            "name": "get",
            "location": 240,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "Dict",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "CertificateCRLFilesView.get": {
            "name": "get",
            "location": 251,
            "return": [
                "HttpResponse",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "Dict",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "bounca-master/api/__init__.py": {},
    "bounca-master/api/auth/adapter.py": {
        "DefaultAccountAdapterFrontendHost.get_email_confirmation_url": {
            "name": "get_email_confirmation_url",
            "location": 7,
            "return": [
                "str",
                "Iterable[Tuple[str,str]]",
                "List[None]",
                "Set",
                "List",
                "List[str]",
                "Dict[str,str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "emailconfirmation": []
            }
        }
    },
    "bounca-master/api/auth/serializers.py": {
        "PasswordResetSerializerFrontendHost.save": {
            "name": "save",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/api/auth/__init__.py": {},
    "bounca-master/api/tests/__init__.py": {},
    "bounca-master/bounca/settings.py": {
        "get_services_config": {
            "name": "get_services_config",
            "location": 15,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "bounca-master/bounca/urls.py": {},
    "bounca-master/bounca/wsgi.py": {},
    "bounca-master/bounca/__init__.py": {},
    "bounca-master/bounca/management/__init__.py": {},
    "bounca-master/bounca/management/commands/site.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/bounca/management/commands/__init__.py": {},
    "bounca-master/certificate_engine/apps.py": {},
    "bounca-master/certificate_engine/types.py": {},
    "bounca-master/certificate_engine/__init__.py": {},
    "bounca-master/certificate_engine/ssl/certificate.py": {
        "Certificate.certificate": {
            "name": "certificate",
            "location": 63,
            "return": [
                "None",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate._get_certificate_policy": {
            "name": "_get_certificate_policy",
            "location": 69,
            "return": [
                "Union[(certificate_engine.types.CertificateIntermediatePolicy, certificate_engine.types.CertificatePolicy, certificate_engine.types.CertificateRootPolicy)]"
            ],
            "arguments": {
                "cert": [
                    "None",
                    "x509_pki.models.Certificate",
                    "str",
                    "Optional[mypy.types.Type]",
                    "mypy.types.Type",
                    "Optional[str]"
                ]
            }
        },
        "Certificate.build_subject_names": {
            "name": "build_subject_names",
            "location": 79,
            "return": [
                "x509.Name"
            ],
            "arguments": {
                "cert": [
                    "bool",
                    "str",
                    "gardnr.models.Metric",
                    "models.Credentials"
                ]
            }
        },
        "Certificate._check_common_name": {
            "name": "_check_common_name",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "str",
                    "Set[str]",
                    "x509_pki.models.Certificate"
                ],
                "common_name": [
                    "str",
                    "None",
                    "types.ModuleType",
                    "Optional[str]",
                    "pringles.models.Model"
                ]
            }
        },
        "Certificate._check_policies_optional": {
            "name": "_check_policies_optional",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "dn": [
                    "Dict[str,Any]",
                    "int",
                    "Dict",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ],
                "cp": [
                    "str",
                    "int",
                    "types.TopicPartition"
                ]
            }
        },
        "Certificate._check_policies_supplied": {
            "name": "_check_policies_supplied",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "dn": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "cp": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "Certificate._lookup_x509_attr": {
            "name": "_lookup_x509_attr",
            "location": 117,
            "return": [
                "dict",
                "Callable[[KT, VT], bool]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Union[str,TrackingCode]"
                ],
                "cp": [
                    "str",
                    "Dict[str,str]",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "None"
                ]
            }
        },
        "Certificate._check_policies": {
            "name": "_check_policies",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "Set[int]",
                    "int",
                    "str"
                ]
            }
        },
        "Certificate._check_issuer_provided": {
            "name": "_check_issuer_provided",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "x509_pki.models.Certificate",
                    "mypy.types.CallableType",
                    "mypy.types.Instance"
                ]
            }
        },
        "Certificate._set_issuer_name": {
            "name": "_set_issuer_name",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "int",
                    "x509_pki.models.Certificate",
                    "float",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Certificate._set_subject_name": {
            "name": "_set_subject_name",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "Type",
                    "bool",
                    "x509_pki.models.Certificate"
                ]
            }
        },
        "Certificate._set_public_key": {
            "name": "_set_public_key",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "int",
                    "x509_pki.models.Certificate",
                    "ics.types.ExtraParams"
                ],
                "private_key": [
                    "bytes",
                    "certificate_engine.ssl.key.Key"
                ],
                "issuer_key": [
                    "bytes",
                    "certificate_engine.ssl.key.Key",
                    "str",
                    "None",
                    "Optional[bytes]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict",
                    "Union[dict,list]",
                    "List"
                ]
            }
        },
        "Certificate._set_crl_distribution_url": {
            "name": "_set_crl_distribution_url",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "Dict",
                    "str",
                    "starlette.types.Scope"
                ]
            }
        },
        "Certificate._set_ocsp_distribution_url": {
            "name": "_set_ocsp_distribution_url",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "Callable",
                    "starlette.types.Scope"
                ]
            }
        },
        "Certificate._set_basic_constraints": {
            "name": "_set_basic_constraints",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "mypy.types.Type",
                    "x509_pki.models.Certificate"
                ]
            }
        },
        "Certificate._set_key_usage": {
            "name": "_set_key_usage",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate._set_dates": {
            "name": "_set_dates",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "int",
                    "datetime.datetime",
                    "None",
                    "float",
                    "str",
                    "x509_pki.models.Certificate",
                    "Optional[datetime.date]"
                ]
            }
        },
        "Certificate._set_basic": {
            "name": "_set_basic",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "bool",
                    "List[dict[str,Any]]",
                    "django.db.models.QuerySet",
                    "x509_pki.models.Certificate",
                    "int",
                    "List[Dict[str,Any]]"
                ],
                "private_key": [
                    "bytes",
                    "int",
                    "certificate_engine.ssl.key.Key",
                    "None",
                    "apps.monero.xmr.types.Sc25519",
                    "Optional[bytes]"
                ],
                "issuer_key": [
                    "bytes",
                    "int",
                    "certificate_engine.ssl.key.Key",
                    "None",
                    "apps.monero.xmr.types.Sc25519",
                    "Optional[bytes]"
                ]
            }
        },
        "Certificate._sign_certificate": {
            "name": "_sign_certificate",
            "location": 267,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "cryptography.x509.Certificate",
                    "None",
                    "cryptography.hazmaprimitives.asymmetric.rsa.RSAPrivateKeyWithSerialization",
                    "Optional[str]"
                ]
            }
        },
        "Certificate._create_root_certificate": {
            "name": "_create_root_certificate",
            "location": 274,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str"
                ],
                "private_key": [
                    "str",
                    "int",
                    "x509_pki.models.Certificate",
                    "core.models.GroupingKey"
                ]
            }
        },
        "Certificate._create_intermediate_certificate": {
            "name": "_create_intermediate_certificate",
            "location": 282,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "x509_pki.models.Certificate",
                    "None",
                    "Optional[str]"
                ],
                "private_key": [
                    "bytes",
                    "Optional[Callable]",
                    "bool",
                    "Callable",
                    "str",
                    "apps.monero.xmr.types.Sc25519",
                    "None"
                ],
                "issuer_key": [
                    "str",
                    "bytes",
                    "certificate_engine.ssl.key.Key",
                    "None",
                    "List[risesdk.protocol.primitives.Signature]",
                    "apps.monero.xmr.types.Sc25519",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]"
                ]
            }
        },
        "Certificate._create_server_certificate": {
            "name": "_create_server_certificate",
            "location": 304,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "bytes",
                    "x509_pki.models.Certificate"
                ],
                "private_key": [
                    "bytes",
                    "Optional[Callable]",
                    "bool",
                    "Callable",
                    "str",
                    "apps.monero.xmr.types.Sc25519",
                    "None"
                ],
                "issuer_key": [
                    "str",
                    "bytes",
                    "certificate_engine.ssl.key.Key",
                    "None",
                    "List[risesdk.protocol.primitives.Signature]",
                    "apps.monero.xmr.types.Sc25519",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]"
                ]
            }
        },
        "Certificate._create_client_certificate": {
            "name": "_create_client_certificate",
            "location": 355,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "bytes",
                    "x509_pki.models.Certificate"
                ],
                "private_key": [
                    "bytes",
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "List[bytes]",
                    "None",
                    "apps.monero.xmr.types.Sc25519",
                    "bool"
                ],
                "issuer_key": [
                    "str",
                    "bytes",
                    "certificate_engine.ssl.key.Key",
                    "None",
                    "apps.monero.xmr.types.Sc25519",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ]
            }
        },
        "Certificate._create_ocsp_certificate": {
            "name": "_create_ocsp_certificate",
            "location": 400,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "bytes",
                    "x509_pki.models.Certificate"
                ],
                "private_key": [
                    "bytes",
                    "Optional[Callable]",
                    "bool",
                    "Callable",
                    "str",
                    "apps.monero.xmr.types.Sc25519",
                    "None"
                ],
                "issuer_key": [
                    "str",
                    "bytes",
                    "certificate_engine.ssl.key.Key",
                    "None",
                    "List[risesdk.protocol.primitives.Signature]",
                    "apps.monero.xmr.types.Sc25519",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]"
                ]
            }
        },
        "Certificate.check_policies": {
            "name": "check_policies",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert_request": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Certificate._get_issuer_key": {
            "name": "_get_issuer_key",
            "location": 432,
            "return": [
                "Optional[certificate_engine.ssl.key.Key]"
            ],
            "arguments": {
                "cert_request": [
                    "Dict",
                    "str"
                ],
                "passphrase_issuer": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "Certificate._get_key": {
            "name": "_get_key",
            "location": 442,
            "return": [
                "certificate_engine.ssl.key.Key"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None",
                    "Union[float,str]",
                    "float"
                ],
                "passphrase": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None",
                    "Union[float,str]",
                    "float"
                ]
            }
        },
        "Certificate.create_certificate": {
            "name": "create_certificate",
            "location": 448,
            "return": [
                "Certificate"
            ],
            "arguments": {
                "self": [
                    "_TCertificate@@Certificate@@"
                ],
                "cert_request": [
                    "str",
                    "List",
                    "bytes",
                    "Dict",
                    "Dict[P,types.Lines]",
                    "Dict[pathlib.Path,types.Lines]",
                    "tracim.models.data.Content"
                ],
                "key": [
                    "str",
                    "cryptography.hazmabackends.openssl.ec._EllipticCurvePrivateKey"
                ],
                "passphrase": [
                    "str",
                    "None",
                    "cryptography.hazmabackends.openssl.ec._EllipticCurvePrivateKey"
                ],
                "passphrase_issuer": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "Certificate.serialize": {
            "name": "serialize",
            "location": 475,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str",
                    "jumeaux.models.Log2ReqsAddOnPayload",
                    "int",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "Certificate.load": {
            "name": "load",
            "location": 490,
            "return": [
                "Certificate"
            ],
            "arguments": {
                "self": [
                    "_TCertificate@@Certificate@@"
                ],
                "pem": [
                    "str",
                    "Optional[Callable]",
                    "bool",
                    "apps.monero.xmr.types.Sc25519"
                ]
            }
        }
    },
    "bounca-master/certificate_engine/ssl/crl.py": {
        "revocation_builder": {
            "name": "revocation_builder",
            "location": 20,
            "return": [
                "x509.RevokedCertificate"
            ],
            "arguments": {
                "pem": [
                    "zam_repondeur.models.Lecture"
                ],
                "timestamp": [
                    "List[cirq.Qid]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "revocation_list_builder": {
            "name": "revocation_list_builder",
            "location": 28,
            "return": [
                "x509.CertificateRevocationList"
            ],
            "arguments": {
                "certificates": [
                    "List[str]",
                    "List",
                    "bool",
                    "List[int]",
                    "Callable"
                ],
                "issuer_cert": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict",
                    "int",
                    "Optional[Union[str,bytes]]",
                    "str",
                    "None"
                ],
                "passphrase": [
                    "Dict[str,Any]",
                    "None",
                    "str",
                    "Union[str,int]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "last_update": [
                    "datetime.datetime",
                    "Dict[int,datetime.datetime]",
                    "None",
                    "str"
                ],
                "next_update": [
                    "datetime.datetime",
                    "str",
                    "None",
                    "Dict[int,datetime.datetime]"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 71,
            "return": [
                "MutableMapping[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "crl": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "jumeaux.models.Log2ReqsAddOnPayload",
                    "int",
                    "bytes",
                    "BinaryIO"
                ]
            }
        }
    },
    "bounca-master/certificate_engine/ssl/info.py": {
        "get_certificate_info": {
            "name": "get_certificate_info",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "crt": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bounca-master/certificate_engine/ssl/key.py": {
        "Key.key": {
            "name": "key",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.create_key": {
            "name": "create_key",
            "location": 21,
            "return": [
                "Key"
            ],
            "arguments": {
                "self": [
                    "_TKey@@Key@@"
                ],
                "key_algorithm": [],
                "key_size": []
            }
        },
        "Key.serialize_pkcs12": {
            "name": "serialize_pkcs12",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "certificate": [
                    "None"
                ],
                "passphrase": [],
                "cas": [
                    "None"
                ]
            }
        },
        "Key.serialize": {
            "name": "serialize",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "passphrase": [],
                "encoding": []
            }
        },
        "Key.load": {
            "name": "load",
            "location": 99,
            "return": [
                "Key"
            ],
            "arguments": {
                "self": [
                    "_TKey@@Key@@"
                ],
                "pem": [],
                "passphrase": []
            }
        },
        "Key.check_passphrase": {
            "name": "check_passphrase",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "pem": [],
                "passphrase": []
            }
        }
    },
    "bounca-master/certificate_engine/ssl/__init__.py": {},
    "bounca-master/certificate_engine/tests/helpers.py": {
        "CertificateTestCase.assert_subject": {
            "name": "assert_subject",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "Dict[str, Any]"
                ],
                "certificate_request": [
                    "Dict[str,Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "CertificateTestCase.assert_crl_distribution": {
            "name": "assert_crl_distribution",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "django.http.HttpResponse"
                ],
                "certificate_request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "CertificateTestCase.assert_root_authority": {
            "name": "assert_root_authority",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[float]"
                ],
                "path_length": [
                    "List[str]",
                    "None",
                    "List",
                    "List[Optional[str]]",
                    "str",
                    "int",
                    "Tuple[str,str,str,str,str,str,str,str,str,str,str]",
                    "Tuple[Union[str,str,str,str,str,str,str,str,str,str,str]]"
                ]
            }
        },
        "CertificateTestCase.assert_user_certificate": {
            "name": "assert_user_certificate",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "str",
                    "bool",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "content_commitment": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "CertificateTestCase.assert_ocsp_certificate": {
            "name": "assert_ocsp_certificate",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "CertificateTestCase.assert_intermediate_authority": {
            "name": "assert_intermediate_authority",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "path_length": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "CertificateTestCase.assert_basic_information": {
            "name": "assert_basic_information",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "List[List[int]]",
                    "List[str]",
                    "List[list[int]]"
                ],
                "certificate": [
                    "int",
                    "float",
                    "Callable[int,None]",
                    "Callable[[int],None]",
                    "arrow.Arrow"
                ]
            }
        },
        "CertificateTestCase.assert_hash": {
            "name": "assert_hash",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "critical": [
                    "float",
                    "bool"
                ]
            }
        },
        "CertificateTestCase.assert_oscp": {
            "name": "assert_oscp",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "Callable",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "certificate": [
                    "float",
                    "int",
                    "List"
                ]
            }
        },
        "CertificateTestCase.assert_authority_key": {
            "name": "assert_authority_key",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "str",
                    "List[Optional[str]]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "issuer_certificate": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "Callable[[bytes],bytes]",
                    "Tuple[int,int]",
                    "Callable[bytes,bytes]",
                    "Tuple[Union[int,int]]"
                ],
                "critical": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CertificateTestCase.assert_extension": {
            "name": "assert_extension",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "Dict[str,Any]",
                    "Set",
                    "str",
                    "int",
                    "bool"
                ],
                "oid": [
                    "Dict[str,Any]",
                    "Set",
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "List",
                    "int",
                    "datetime.datetime.date"
                ],
                "critical": [
                    "bool",
                    "bytes",
                    "Optional[List[Any]]",
                    "int"
                ]
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_client_certificate.py": {
        "EmailCertificateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Sequence",
                    "Optional[TrackingData]",
                    "None"
                ]
            }
        },
        "EmailCertificateTest.test_generate_client_certificate": {
            "name": "test_generate_client_certificate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailCertificateTest.test_generate_client_certificate_minimal": {
            "name": "test_generate_client_certificate_minimal",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailCertificateTest.test_generate_client_certificate_no_subject_altnames": {
            "name": "test_generate_client_certificate_no_subject_altnames",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailCertificateTest.test_generate_client_certificate_no_intermediate_ca": {
            "name": "test_generate_client_certificate_no_intermediate_ca",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailCertificateTest.test_generate_client_certificate_parent_client_cert": {
            "name": "test_generate_client_certificate_parent_client_cert",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_crl.py": {
        "CRLClientServerTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "Sequence",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "CRLClientServerTest.make_server_certificate": {
            "name": "make_server_certificate",
            "location": 73,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLClientServerTest.test_revocation_builder": {
            "name": "test_revocation_builder",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLClientServerTest.test_revocation_list_builder_empty": {
            "name": "test_revocation_list_builder_empty",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLClientServerTest.test_revocation_list_builder_one_cert": {
            "name": "test_revocation_list_builder_one_cert",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLClientServerTest.test_revocation_list_builder_one_cert_passphrase": {
            "name": "test_revocation_list_builder_one_cert_passphrase",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLClientServerTest.test_revocation_list_builder_serialization": {
            "name": "test_revocation_list_builder_serialization",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLIntermediateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "Sequence",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "CRLIntermediateTest.make_intermediate_certificate": {
            "name": "make_intermediate_certificate",
            "location": 183,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLIntermediateTest.test_revocation_builder": {
            "name": "test_revocation_builder",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLIntermediateTest.test_revocation_list_builder_empty": {
            "name": "test_revocation_list_builder_empty",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLIntermediateTest.test_revocation_list_builder_one_cert": {
            "name": "test_revocation_list_builder_one_cert",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLIntermediateTest.test_revocation_list_builder_one_cert_passphrase": {
            "name": "test_revocation_list_builder_one_cert_passphrase",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRLIntermediateTest.test_revocation_list_builder_serialization": {
            "name": "test_revocation_list_builder_serialization",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_ed25519_key.py": {
        "KeyEd25519Test.test_generate_private_key": {
            "name": "test_generate_private_key",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyEd25519Test.test_serialize_keys_passphrase": {
            "name": "test_serialize_keys_passphrase",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyEd25519Test.test_store_keys_no_object": {
            "name": "test_store_keys_no_object",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyEd25519Test.test_store_keys_no_passphrase": {
            "name": "test_store_keys_no_passphrase",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyEd25519Test.test_store_keys_wrong_passphrase": {
            "name": "test_store_keys_wrong_passphrase",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyEd25519Test.test_check_passphrase_valid": {
            "name": "test_check_passphrase_valid",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyEd25519Test.test_check_passphrase_invalid": {
            "name": "test_check_passphrase_invalid",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_intermediate_certificate.py": {
        "IntermediateCertificateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "IntermediateCertificateTest.test_parent_not_set": {
            "name": "test_parent_not_set",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_parent_object_not_set": {
            "name": "test_parent_object_not_set",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.root_ca_not_matching_attribute": {
            "name": "root_ca_not_matching_attribute",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "List",
                    "NamedTuple"
                ],
                "attribute_name": [
                    "str"
                ]
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_not_matching_countryName": {
            "name": "test_generate_intermediate_certificate_not_matching_countryName",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_not_matching_stateOrProvinceName": {
            "name": "test_generate_intermediate_certificate_not_matching_stateOrProvinceName",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_not_matching_organizationName": {
            "name": "test_generate_intermediate_certificate_not_matching_organizationName",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_duplicate_commonName": {
            "name": "test_generate_intermediate_certificate_duplicate_commonName",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate": {
            "name": "test_generate_intermediate_certificate",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_minimal": {
            "name": "test_generate_intermediate_certificate_minimal",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_passphrase": {
            "name": "test_generate_intermediate_certificate_passphrase",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_passphrase_wrong_cert_passphrase": {
            "name": "test_generate_intermediate_certificate_passphrase_wrong_cert_passphrase",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateCertificateTest.test_generate_intermediate_certificate_passphrase_wrong_issuer_passphrase": {
            "name": "test_generate_intermediate_certificate_passphrase_wrong_issuer_passphrase",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_oscp_certificate.py": {
        "OcspCertificateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Sequence",
                    "Optional[TrackingData]",
                    "None"
                ]
            }
        },
        "OcspCertificateTest.test_generate_ocsp_certificate": {
            "name": "test_generate_ocsp_certificate",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcspCertificateTest.test_generate_ocsp_certificate_minimal": {
            "name": "test_generate_ocsp_certificate_minimal",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OcspCertificateTest.test_generate_ocsp_certificate_parent_client_cert": {
            "name": "test_generate_ocsp_certificate_parent_client_cert",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_root_certificate.py": {
        "RootCertificateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "Optional[Tuple[str]]",
                    "Tuple[str]",
                    "None"
                ]
            }
        },
        "RootCertificateTest.root_ca_missing_attribute": {
            "name": "root_ca_missing_attribute",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dn": [
                    "str",
                    "bool",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "attribute_name": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_countryName": {
            "name": "test_generate_root_ca_missing_countryName",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_countryName_space": {
            "name": "test_generate_root_ca_missing_countryName_space",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_stateOrProvinceName": {
            "name": "test_generate_root_ca_missing_stateOrProvinceName",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_stateOrProvinceName_space": {
            "name": "test_generate_root_ca_missing_stateOrProvinceName_space",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_organizationName": {
            "name": "test_generate_root_ca_missing_organizationName",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_organizationName_space": {
            "name": "test_generate_root_ca_missing_organizationName_space",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_missing_commonName": {
            "name": "test_generate_root_ca_missing_commonName",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_minimal_root_ca": {
            "name": "test_generate_minimal_root_ca",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca": {
            "name": "test_generate_root_ca",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_no_crl_distribution": {
            "name": "test_generate_root_ca_no_crl_distribution",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_no_ocsp": {
            "name": "test_generate_root_ca_no_ocsp",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_passphrase": {
            "name": "test_generate_root_ca_passphrase",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_generate_root_ca_wrong_passphrase": {
            "name": "test_generate_root_ca_wrong_passphrase",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_serialize_root_certificate": {
            "name": "test_serialize_root_certificate",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootCertificateTest.test_serialize_no_certificate": {
            "name": "test_serialize_no_certificate",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_rsa_key.py": {
        "KeyRsaTest.test_generate_private_key_2048": {
            "name": "test_generate_private_key_2048",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_generate_private_key_4096": {
            "name": "test_generate_private_key_4096",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_keys_passphrase": {
            "name": "test_serialize_keys_passphrase",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_store_keys_no_object": {
            "name": "test_store_keys_no_object",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_store_keys_no_passphrase": {
            "name": "test_store_keys_no_passphrase",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_store_keys_wrong_passphrase": {
            "name": "test_store_keys_wrong_passphrase",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_check_passphrase_valid": {
            "name": "test_check_passphrase_valid",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_check_passphrase_invalid": {
            "name": "test_check_passphrase_invalid",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_pkcs12_no_key": {
            "name": "test_serialize_pkcs12_no_key",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_pkcs12_no_name": {
            "name": "test_serialize_pkcs12_no_name",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_pkcs12_no_certificate": {
            "name": "test_serialize_pkcs12_no_certificate",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_pkcs12_nopassphrase": {
            "name": "test_serialize_pkcs12_nopassphrase",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_pkcs12_passphrase": {
            "name": "test_serialize_pkcs12_passphrase",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRsaTest.test_serialize_pkcs12_cas_nopassphrase": {
            "name": "test_serialize_pkcs12_cas_nopassphrase",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/test_server_certificate.py": {
        "ServerCertificateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Sequence",
                    "Optional[TrackingData]",
                    "None"
                ]
            }
        },
        "ServerCertificateTest.test_generate_server_certificate": {
            "name": "test_generate_server_certificate",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_minimal": {
            "name": "test_generate_server_certificate_minimal",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_no_subject_altnames": {
            "name": "test_generate_server_certificate_no_subject_altnames",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_no_intermediate_ca": {
            "name": "test_generate_server_certificate_no_intermediate_ca",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_duplicate_commonname_intermediate": {
            "name": "test_generate_server_certificate_duplicate_commonname_intermediate",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_duplicate_commonname_root": {
            "name": "test_generate_server_certificate_duplicate_commonname_root",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_no_parent": {
            "name": "test_generate_server_certificate_no_parent",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerCertificateTest.test_generate_server_certificate_parent_server_cert": {
            "name": "test_generate_server_certificate_parent_server_cert",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/certificate_engine/tests/__init__.py": {},
    "bounca-master/docs/source/conf.py": {},
    "bounca-master/superuser_signup/apps.py": {},
    "bounca-master/superuser_signup/forms.py": {
        "SuperUserSignupForm.save": {
            "name": "save",
            "location": 5,
            "return": [
                "set",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception"
                ]
            }
        }
    },
    "bounca-master/superuser_signup/views.py": {
        "CreateSuperUserView.dispatch": {
            "name": "dispatch",
            "location": 16,
            "return": [
                "HttpResponseNotFound",
                "List[str]",
                "Dict[str,Any]",
                "Optional[str]",
                "bool",
                "Dict[str,dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "CreateSuperUserView.get_context_data": {
            "name": "get_context_data",
            "location": 21,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                "Dict[int,Dict[int,Any]]",
                "str",
                "tests.models.Customer",
                "List[Dict[str,Any]]",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateSuperUserView.form_valid": {
            "name": "form_valid",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job",
                "bool"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "BinaryIO",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "bounca-master/superuser_signup/__init__.py": {},
    "bounca-master/vuetifyforms/apps.py": {},
    "bounca-master/vuetifyforms/components.py": {
        "VueScriptElem.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elems": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "VueScriptElem.render": {
            "name": "render",
            "location": 40,
            "return": [
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ],
                "form_style": [
                    "str"
                ],
                "context": [
                    "str"
                ],
                "template_pack": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "VueField.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/vuetifyforms/views.py": {
        "_flatten_vue_validation": {
            "name": "_flatten_vue_validation",
            "location": 5,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "MutableMapping",
                    "Iterable[cirq.Qid]",
                    "MutableMapping[Any,Any]",
                    "Union[tuple,list]"
                ],
                "key_prefix": [
                    "str",
                    "Text"
                ]
            }
        },
        "vue_exception_handler": {
            "name": "vue_exception_handler",
            "location": 21,
            "return": [
                "List[str]",
                "float",
                "str"
            ],
            "arguments": {
                "exc": [
                    "Mapping",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ],
                "context": [
                    "Exception",
                    "Callable",
                    "int",
                    "str",
                    "BaseException"
                ]
            }
        }
    },
    "bounca-master/vuetifyforms/vue.py": {
        "VuetifyFormMixin.get_subclasses": {
            "name": "get_subclasses",
            "location": 9,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "VuetifyFormMixin.as_vuetify": {
            "name": "as_vuetify",
            "location": 14,
            "return": [
                "Dict[int,Any]",
                "str",
                "Dict[str,str]",
                "int",
                "Dict",
                "Dict[str,Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/vuetifyforms/__init__.py": {},
    "bounca-master/vuetifyforms/management/commands/generate_forms.py": {
        "Command.generate_form": {
            "name": "generate_form",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Iterable[str]",
                    "Any",
                    "Union[str,Any]",
                    "Dict"
                ]
            }
        },
        "Command.generate_forms": {
            "name": "generate_forms",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/vuetifyforms/management/commands/__init__.py": {},
    "bounca-master/vuetifyforms/templatetags/crispy_forms_vuetify.py": {
        "rule_MaxLengthValidator": {
            "name": "rule_MaxLengthValidator",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "rule_ProhibitNullCharactersValidator": {
            "name": "rule_ProhibitNullCharactersValidator",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "rule_EmailValidator": {
            "name": "rule_EmailValidator",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[PydanticModelField]",
                    "List[M]"
                ]
            }
        },
        "rule_URLValidator": {
            "name": "rule_URLValidator",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "str",
                    "List[str]",
                    "Tuple",
                    "Dict",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "rule_PasswordConfirmValidator": {
            "name": "rule_PasswordConfirmValidator",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "vee_validate_rules": {
            "name": "vee_validate_rules",
            "location": 60,
            "return": [
                "VeeValidateNode",
                "bool",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "parser": [
                    "Callable[...,None]",
                    "Dict",
                    "str"
                ],
                "token": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_array": {
            "name": "is_array",
            "location": 73,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Callable"
            ],
            "arguments": {
                "field": [
                    "Set",
                    "str",
                    "int",
                    "django.db.models.fields.Field"
                ]
            }
        },
        "dottounderscore": {
            "name": "dottounderscore",
            "location": 78,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "error_field": {
            "name": "error_field",
            "location": 83,
            "return": [
                "int",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Callable[[T], bool]"
                ]
            }
        },
        "error_slot_suffix": {
            "name": "error_slot_suffix",
            "location": 88,
            "return": [
                "str",
                "List",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "val": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_set_sub_field": {
            "name": "_set_sub_field",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ],
                "keys": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_set_field_data": {
            "name": "_set_field_data",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]",
                    "Callable[..., T]",
                    "Set[str]"
                ],
                "form_object_name": [
                    "str",
                    "Callable[...,T]",
                    "Optional[str]",
                    "Set[str]",
                    "None"
                ],
                "field_name": [
                    "str",
                    "Optional[str]",
                    "Callable[...,T]",
                    "Set[str]"
                ],
                "field": [
                    "Mapping[str,Any]",
                    "str",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "_set_password_visible_vars": {
            "name": "_set_password_visible_vars",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "field_name": [
                    "str"
                ],
                "field": [
                    "str",
                    "int",
                    "django.db.models.fields.Field",
                    "pydantic.fields.ModelField"
                ]
            }
        },
        "_get_empty_value": {
            "name": "_get_empty_value",
            "location": 116,
            "return": [
                "Optional[Union[(str, List[nothing])]]"
            ],
            "arguments": {
                "field": [
                    "Type",
                    "typesystem.fields.Field",
                    "str",
                    "Type[Model]",
                    "Dict",
                    "List[Any]",
                    "Union[django.db.models.fields.Field,django.db.models.fields.reverse_related.ForeignObjectRel]",
                    "Union[dict,List[Any]]"
                ]
            }
        },
        "make_data_object": {
            "name": "make_data_object",
            "location": 164,
            "return": [
                "DataObjectNode",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List"
                ],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "VeeValidateNode.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "int",
                    "ClassVar",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "VeeValidateNode.render": {
            "name": "render",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict",
                    "float"
                ]
            }
        },
        "DataObjectNode.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "DataObjectNode.render": {
            "name": "render",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "List[dict]",
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping"
                ]
            }
        }
    },
    "bounca-master/vuetifyforms/templatetags/__init__.py": {},
    "bounca-master/x509_pki/admin.py": {
        "ReadOnlyAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 18,
            "return": [
                "List",
                "str",
                "bool",
                "MutableSequence[utils.CWLObjectType]",
                "viewer.models.Archive",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict[str,str]",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ReadOnlyAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "ReadOnlyAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 28,
            "return": [
                "bool",
                "Optional[Callable[...,Any]]",
                "str",
                "Dict",
                "List[Dict[str,Any]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Dict[str,Any]",
                    "Callable[...,Awaitable[dict]]",
                    "Callable[...,collections.abc.Awaitable[dict]]"
                ],
                "obj": [
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "Callable[...,Awaitable[dict]]",
                    "Callable[...,collections.abc.Awaitable[dict]]"
                ]
            }
        },
        "ReadOnlyAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        }
    },
    "bounca-master/x509_pki/apps.py": {},
    "bounca-master/x509_pki/models.py": {
        "validate_in_future": {
            "name": "validate_in_future",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        },
        "set_fields_certificate": {
            "name": "set_fields_certificate",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "check_if_not_update_certificate": {
            "name": "check_if_not_update_certificate",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "check_if_passphrases_are_matching": {
            "name": "check_if_passphrases_are_matching",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "check_if_root_has_no_parent": {
            "name": "check_if_root_has_no_parent",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "check_if_only_root_intermediate_has_crl_or_ocsp": {
            "name": "check_if_only_root_intermediate_has_crl_or_ocsp",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "check_if_non_root_certificate_has_parent": {
            "name": "check_if_non_root_certificate_has_parent",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "check_intermediate_policies": {
            "name": "check_intermediate_policies",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "check_if_child_not_expires_after_parent": {
            "name": "check_if_child_not_expires_after_parent",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "validation_rules_certificate": {
            "name": "validation_rules_certificate",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "check_passphrase_issuer": {
            "name": "check_passphrase_issuer",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [],
                "passphrase": []
            }
        },
        "check_policies_certificate": {
            "name": "check_policies_certificate",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "generate_certificate": {
            "name": "generate_certificate",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "generate_certificate_revocation_list": {
            "name": "generate_certificate_revocation_list",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "DistinguishedName._to_dn": {
            "name": "_to_dn",
            "location": 93,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "email_label": [
                    "typing.Text"
                ]
            }
        },
        "DistinguishedName.dn": {
            "name": "dn",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistinguishedName.subj": {
            "name": "subj",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistinguishedName.save": {
            "name": "save",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistinguishedName.slug_commonName": {
            "name": "slug_commonName",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistinguishedName.__unicode__": {
            "name": "__unicode__",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistinguishedName.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateQuerySet.delete": {
            "name": "delete",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.days_valid": {
            "name": "days_valid",
            "location": 215,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.slug_revoked_at": {
            "name": "slug_revoked_at",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Certificate.slug_name": {
            "name": "slug_name",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Certificate.revoked": {
            "name": "revoked",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.expired": {
            "name": "expired",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.is_passphrase_valid": {
            "name": "is_passphrase_valid",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "passphrase": []
            }
        },
        "Certificate.get_certificate_info": {
            "name": "get_certificate_info",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.save": {
            "name": "save",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.delete": {
            "name": "delete",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.__unicode__": {
            "name": "__unicode__",
            "location": 284,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certificate.__str__": {
            "name": "__str__",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyStore.save": {
            "name": "save",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_clean": [
                    "bool"
                ]
            }
        }
    },
    "bounca-master/x509_pki/__init__.py": {},
    "bounca-master/x509_pki/migrations/0001_squashed_0015_keystore_p12.py": {},
    "bounca-master/x509_pki/migrations/__init__.py": {},
    "bounca-master/x509_pki/tests/factories.py": {
        "UserFactory.default": {
            "name": "default",
            "location": 34,
            "return": [
                "bool",
                "Dict[str,str]",
                "Set",
                "Dict[int,Any]",
                "django.db.migrations.state.StateApps",
                "str",
                "django.db.models.QuerySet",
                "Dict[str,bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict",
                    "Iterable[Tuple[int,int]]"
                ]
            }
        }
    },
    "bounca-master/x509_pki/tests/test_factories.py": {
        "FactoriesTest.test_user_factory": {
            "name": "test_user_factory",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoriesTest.test_distinguished_name_factory": {
            "name": "test_distinguished_name_factory",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoriesTest.test_certificate_factory": {
            "name": "test_certificate_factory",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/x509_pki/tests/test_models.py": {
        "ModelDistinguishedNameTest.test_distinguished_name_to_dn": {
            "name": "test_distinguished_name_to_dn",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDistinguishedNameTest.test_distinguished_name_update_not_allowed": {
            "name": "test_distinguished_name_update_not_allowed",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDistinguishedNameTest.test_distinguished_name_validation_in_future_not_allowed": {
            "name": "test_distinguished_name_validation_in_future_not_allowed",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "ModelCertificateTest.test_generate_root_certificate": {
            "name": "test_generate_root_certificate",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_generate_intermediate_certificate": {
            "name": "test_generate_intermediate_certificate",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_generate_server_certificate": {
            "name": "test_generate_server_certificate",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_generate_client_certificate": {
            "name": "test_generate_client_certificate",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_generate_ocsp_certificate": {
            "name": "test_generate_ocsp_certificate",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_days_valid": {
            "name": "test_days_valid",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_set_name_to_common_name": {
            "name": "test_set_name_to_common_name",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_generate_root_certificate_unique_violate_name": {
            "name": "test_generate_root_certificate_unique_violate_name",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_generate_root_certificate_unique_violate_dn": {
            "name": "test_generate_root_certificate_unique_violate_dn",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_parent_not_allowed_for_root_certificate": {
            "name": "test_parent_not_allowed_for_root_certificate",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_parent_intermediate_has_no_root_parent": {
            "name": "test_parent_intermediate_has_no_root_parent",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_client_cert_parent_no_intermediate_parent": {
            "name": "test_client_cert_parent_no_intermediate_parent",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_server_cert_parent_no_intermediate_parent": {
            "name": "test_server_cert_parent_no_intermediate_parent",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_ocsp_cert_parent_no_intermediate_parent": {
            "name": "test_ocsp_cert_parent_no_intermediate_parent",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_ocsp_cert_parent_is_not_intermediate_parent": {
            "name": "test_ocsp_cert_parent_is_not_intermediate_parent",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_intermediate_dn_country_difference": {
            "name": "test_intermediate_dn_country_difference",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_intermediate_dn_state_difference": {
            "name": "test_intermediate_dn_state_difference",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_intermediate_dn_organization_difference": {
            "name": "test_intermediate_dn_organization_difference",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_child_expire_date_exceeds_parent_expire_date": {
            "name": "test_child_expire_date_exceeds_parent_expire_date",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCertificateTest.test_passphrase_out_not_matching": {
            "name": "test_passphrase_out_not_matching",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bounca-master/x509_pki/tests/__init__.py": {}
}
{
    "boyle-master/setup.py": {},
    "boyle-master/boyleworkflow/api.py": {
        "_get_loc": {
            "name": "_get_loc",
            "location": 19,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "bytes"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ensure_comp_tuple": {
            "name": "ensure_comp_tuple",
            "location": 30,
            "return": [
                "Tuple[(boyleworkflow.core.Comp, ...)]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "Tuple",
                    "T"
                ]
            }
        },
        "rename": {
            "name": "rename",
            "location": 77,
            "return": [
                "boyleworkflow.core.Comp"
            ],
            "arguments": {
                "comp": [
                    "str",
                    "boyleworkflow.core.Comp"
                ],
                "new_loc": [
                    "str",
                    "boyleworkflow.core.Comp"
                ]
            }
        },
        "shell": {
            "name": "shell",
            "location": 82,
            "return": [
                "Task"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "str"
                ],
                "inputs": [
                    "str",
                    "Tuple"
                ],
                "stdin": [
                    "preacher.core.extraction.analysis.Analyzer",
                    "None"
                ]
            }
        },
        "load_value": {
            "name": "load_value",
            "location": 96,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "digest": [
                    "str",
                    "int",
                    "boyleworkflow.storage.Digest",
                    "List[str]",
                    "boyleworkflow.storage.Storage",
                    "bool"
                ],
                "storage": [
                    "str",
                    "int",
                    "boyleworkflow.storage.Digest",
                    "List[str]",
                    "boyleworkflow.storage.Storage",
                    "bool"
                ]
            }
        },
        "python": {
            "name": "python",
            "location": 100,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "Task.validate": {
            "name": "validate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Task"
                ],
                "attribute": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "inputs": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Task.out": {
            "name": "out",
            "location": 54,
            "return": [
                "boyleworkflow.core.Comp"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Task.stdout": {
            "name": "stdout",
            "location": 65,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.stderr": {
            "name": "stderr",
            "location": 71,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boyle-master/boyleworkflow/cli.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        }
    },
    "boyle-master/boyleworkflow/config.py": {
        "_read_config_if_exists": {
            "name": "_read_config_if_exists",
            "location": 15,
            "return": [
                "Dict",
                "str",
                "Optional[dict]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "_get_config_path": {
            "name": "_get_config_path",
            "location": 47,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_load_config_file": {
            "name": "_load_config_file",
            "location": 56,
            "return": [
                "List[str]",
                "Dict[str,Any]",
                "Dict",
                "Dict[str,Union[str,None]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "_overwrite_config_file": {
            "name": "_overwrite_config_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "config": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "set": {
            "name": "set",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence[str]"
                ],
                "key": [
                    "bool",
                    "str",
                    "Set[str]",
                    "bytes"
                ],
                "value": [
                    "str",
                    "Set[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "unset": {
            "name": "unset",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "key": [
                    "str",
                    "Dict",
                    "Set[str]",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        }
    },
    "boyle-master/boyleworkflow/core.py": {
        "_make_tuple_sorted_by_loc": {
            "name": "_make_tuple_sorted_by_loc",
            "location": 34,
            "return": [
                "tuple"
            ],
            "arguments": {
                "items": [
                    "str",
                    "int",
                    "Type[object]",
                    "T",
                    "Iterable[T]",
                    "Dict"
                ]
            }
        },
        "_validate_input_locs": {
            "name": "_validate_input_locs",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "Dict[str,Any]",
                    "List[str]",
                    "int",
                    "T",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "validate_out_loc": {
            "name": "validate_out_loc",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "List[str]",
                    "List",
                    "int",
                    "Type[T]",
                    "Type"
                ],
                "attribute": [
                    "str",
                    "List[str]",
                    "List",
                    "int",
                    "Type[T]",
                    "Type"
                ],
                "value": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Tuple[cirq.Qid]",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_parents": {
            "name": "get_parents",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "comps": [
                    "str"
                ]
            }
        },
        "get_upstream_sorted": {
            "name": "get_upstream_sorted",
            "location": 96,
            "return": [
                "list"
            ],
            "arguments": {
                "requested": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "Result.validate": {
            "name": "validate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Result"
                ],
                "attribute": [
                    "int",
                    "Iterable[cirq.Qid]",
                    "None",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict",
                    "List",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Op.run": {
            "name": "run",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "boyleworkflow.storage.Storage"
                ],
                "out_locs": [
                    "str",
                    "boyleworkflow.storage.Storage"
                ],
                "storage": [
                    "str",
                    "boyleworkflow.storage.Storage"
                ]
            }
        },
        "Calc.validate": {
            "name": "validate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Calc"
                ],
                "attribute": [
                    "int",
                    "Iterable[cirq.Qid]",
                    "None",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "Calc.calc_id": {
            "name": "calc_id",
            "location": 59,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comp.validate": {
            "name": "validate",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Comp"
                ],
                "attribute": [
                    "int",
                    "Iterable[cirq.Qid]",
                    "None",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict",
                    "List",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Comp.comp_id": {
            "name": "comp_id",
            "location": 84,
            "return": [
                "bool",
                "Dict[Text,list]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boyle-master/boyleworkflow/loc.py": {
        "check_valid_loc": {
            "name": "check_valid_loc",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "normalize_loc": {
            "name": "normalize_loc",
            "location": 39,
            "return": [
                "Loc"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_valid_loc": {
            "name": "is_valid_loc",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "boyle-master/boyleworkflow/log.py": {
        "Log.create": {
            "name": "create",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Log.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None"
                ]
            }
        },
        "Log.close": {
            "name": "close",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.save_calc": {
            "name": "save_calc",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calc": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Log.save_run": {
            "name": "save_run",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calc": [
                    "Optional[int]",
                    "Dict[int,dict]",
                    "int",
                    "float",
                    "None"
                ],
                "results": [
                    "str",
                    "List",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "start_time": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "end_time": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Log.save_comp": {
            "name": "save_comp",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaf_comp": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Log.save_response": {
            "name": "save_response",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comp": [
                    "str",
                    "int"
                ],
                "digest": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "time": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Log.set_trust": {
            "name": "set_trust",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calc_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "loc": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "digest": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "opinion": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Log.get_opinions": {
            "name": "get_opinions",
            "location": 149,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "calc": [
                    "str",
                    "float"
                ],
                "loc": [
                    "str",
                    "float"
                ]
            }
        },
        "Log.get_result": {
            "name": "get_result",
            "location": 160,
            "return": [
                "boyleworkflow.core.Result"
            ],
            "arguments": {
                "self": [],
                "calc": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ]
            }
        },
        "Log.get_calc": {
            "name": "get_calc",
            "location": 181,
            "return": [
                "boyleworkflow.core.Calc"
            ],
            "arguments": {
                "self": [],
                "comp": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "Log.get_calc.get_comp_result": {
            "name": "get_comp_result",
            "location": 182,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "input_comp": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "boyle-master/boyleworkflow/make.py": {
        "_determine_sets": {
            "name": "_determine_sets",
            "location": 19,
            "return": [
                "Dict[(str, set)]"
            ],
            "arguments": {
                "comps": [
                    "str",
                    "Iterable[boyleworkflow.core.Comp]",
                    "List",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]"
                ],
                "log": [
                    "Optional[str]"
                ],
                "storage": [
                    "int",
                    "float",
                    "Union[float,int]"
                ]
            }
        },
        "_get_ready_and_needed": {
            "name": "_get_ready_and_needed",
            "location": 55,
            "return": [
                "set"
            ],
            "arguments": {
                "requested": [
                    "Dict"
                ],
                "log": [],
                "storage": []
            }
        },
        "_run_calc": {
            "name": "_run_calc",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "calc": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "Mapping",
                    "Mapping[str,Any]",
                    "int"
                ],
                "out_locs": [
                    "bool",
                    "Dict",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Tuple[Any,int,Dict[str,str]]",
                    "None",
                    "Tuple[Union[Any,int,dict[str,str]]]"
                ],
                "log": [
                    "int",
                    "boyleworkflow.log.Log",
                    "Dict",
                    "bytes",
                    "str"
                ],
                "storage": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[str,None,bool]]",
                    "Tuple[Optional[str],bool]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Optional[ShippingInfo]",
                    "int"
                ]
            }
        },
        "_ensure_available": {
            "name": "_ensure_available",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "requested": [],
                "log": [],
                "storage": []
            }
        },
        "make": {
            "name": "make",
            "location": 115,
            "return": [
                "dict"
            ],
            "arguments": {
                "requested": [],
                "log": [
                    "str",
                    "bool",
                    "boyleworkflow.log.Log"
                ],
                "storage": []
            }
        }
    },
    "boyle-master/boyleworkflow/ops.py": {
        "is_inside": {
            "name": "is_inside",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict",
                    "IO",
                    "Union[str,IO]",
                    "Optional[Directory]"
                ],
                "parent": [
                    "Optional[str]",
                    "str",
                    "Union[str, IO]",
                    "bool",
                    "dict",
                    "Optional['Directory']"
                ]
            }
        },
        "place_inputs": {
            "name": "place_inputs",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bytes",
                    "Iterable[boyleworkflow.core.Result]",
                    "bool",
                    "List[pathlib.Path]",
                    "Path",
                    "Union[str,bytes]"
                ],
                "the_dir": [
                    "List",
                    "str",
                    "pathlib.Path"
                ],
                "storage": [
                    "str",
                    "boyleworkflow.storage.Storage",
                    "None",
                    "List[int]",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "ShellOp.definition": {
            "name": "definition",
            "location": 57,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[List[str]]",
                "List[\"ElementHandle\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOp.op_id": {
            "name": "op_id",
            "location": 61,
            "return": [
                "dict",
                "str",
                "Callable[[KT, VT], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOp.run": {
            "name": "run",
            "location": 64,
            "return": [
                "List[boyleworkflow.core.Result]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "List[float]",
                    "Union[str,Tuple[Any]]",
                    "Tuple[Any]",
                    "Optional[float]",
                    "float",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "out_locs": [
                    "str",
                    "boyleworkflow.storage.Storage",
                    "Callable[[str,str],None]",
                    "Iterable[str]",
                    "pathlib.Path"
                ],
                "storage": [
                    "str",
                    "boyleworkflow.storage.Storage",
                    "Callable[str,str,None]",
                    "Iterable[str]",
                    "Callable[[str,str],None]",
                    "pathlib.Path"
                ]
            }
        },
        "RenameOp.definition": {
            "name": "definition",
            "location": 127,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[List[str]]",
                "List[\"ElementHandle\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameOp.op_id": {
            "name": "op_id",
            "location": 131,
            "return": [
                "dict",
                "str",
                "Callable[[KT, VT], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameOp.run": {
            "name": "run",
            "location": 134,
            "return": [
                "List[boyleworkflow.core.Result]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "bool",
                    "pathlib.Path"
                ],
                "out_locs": [
                    "Iterable[Result]",
                    "str",
                    "boyleworkflow.storage.Storage"
                ],
                "storage": [
                    "Iterable[Result]",
                    "str",
                    "boyleworkflow.storage.Storage"
                ]
            }
        },
        "ShellOp.run.open_special_file": {
            "name": "open_special_file",
            "location": 85,
            "return": [
                "IO",
                "str",
                "pathlib.Path",
                "Union[str,pathlib.Path]",
                "Sequence[str]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "Dict[str, pathlib.Path]"
                ],
                "activated": [
                    "List[str]",
                    "Iterable[pathlib.Path]",
                    "IO[str]",
                    "IO[Any]",
                    "Sequence[str]",
                    "List[Callable]"
                ]
            }
        }
    },
    "boyle-master/boyleworkflow/storage.py": {
        "Storage.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage._get_store_path": {
            "name": "_get_store_path",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "digest": [
                    "str",
                    "bool"
                ]
            }
        },
        "Storage._get_meta_path": {
            "name": "_get_meta_path",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "digest": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Storage._appears_unchanged": {
            "name": "_appears_unchanged",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "digest": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict"
                ]
            }
        },
        "Storage._set_meta": {
            "name": "_set_meta",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "digest": [
                    "str",
                    "Union[str,IO[bytes]]",
                    "IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Storage.can_restore": {
            "name": "can_restore",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "digest": [
                    "str",
                    "int"
                ]
            }
        },
        "Storage.restore": {
            "name": "restore",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "digest": [
                    "str",
                    "Optional[PathLike]",
                    "None"
                ],
                "dst_path": [
                    "str",
                    "boyleworkflow.util.PathLike"
                ]
            }
        },
        "Storage.store": {
            "name": "store",
            "location": 80,
            "return": [
                "Digest"
            ],
            "arguments": {
                "self": [],
                "src_path": [
                    "str"
                ]
            }
        }
    },
    "boyle-master/boyleworkflow/util.py": {
        "_enable": {
            "name": "_enable",
            "location": 20,
            "return": [
                "bool",
                "float",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "permissions": [
                    "Tuple[str, str]",
                    "str",
                    "os.DirEntry",
                    "List[str]",
                    "Sequence[str]"
                ],
                "bit": [
                    "Tuple[str, str]",
                    "str",
                    "os.DirEntry",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "_disable": {
            "name": "_disable",
            "location": 24,
            "return": [
                "bool",
                "float",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "permissions": [
                    "Tuple[str, str]",
                    "str",
                    "os.DirEntry",
                    "List[str]",
                    "Sequence[str]"
                ],
                "bit": [
                    "Tuple[str, str]",
                    "str",
                    "os.DirEntry",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "set_file_permissions": {
            "name": "set_file_permissions",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "TextIO",
                    "bool",
                    "str",
                    "IO[bytes]"
                ],
                "read": [
                    "str"
                ],
                "write": [
                    "str"
                ],
                "execute": [
                    "str"
                ]
            }
        },
        "get_file_permissions": {
            "name": "get_file_permissions",
            "location": 45,
            "return": [
                "Dict[(str, Tuple[(bool, ...)])]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "digest_str": {
            "name": "digest_str",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        },
        "digest_file": {
            "name": "digest_file",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "unique_json": {
            "name": "unique_json",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "id_property": {
            "name": "id_property",
            "location": 82,
            "return": [
                "property"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "float",
                    "Callable"
                ]
            }
        },
        "id_property.id_func": {
            "name": "id_func",
            "location": 85,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "boyle-master/boyleworkflow/__init__.py": {},
    "boyle-master/boyleworkflow/resources/__init__.py": {},
    "boyle-master/docs/conf.py": {},
    "boyle-master/notes/sweep.py": {},
    "boyle-master/notes/internal-python-dsl/api_sketch.py": {},
    "boyle-master/notes/internal-python-dsl/implementation_sketch_old.py": {
        "_run": {
            "name": "_run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "calculation": [
                    "bool",
                    "str",
                    "Dict[str,str]"
                ],
                "output_instruments": [
                    "Dict",
                    "int",
                    "str"
                ],
                "log": [
                    "bool",
                    "int"
                ],
                "storage": [
                    "List[str]",
                    "bytes",
                    "List[List[int]]",
                    "bool",
                    "List[list[int]]",
                    "float"
                ]
            }
        },
        "ensure_restorable": {
            "name": "ensure_restorable",
            "location": 60,
            "return": [
                "dict"
            ],
            "arguments": {
                "requested_defs": [
                    "bool"
                ],
                "log": [
                    "int",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "storage": [
                    "int",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "_resolve": {
            "name": "_resolve",
            "location": 72,
            "return": [
                "dict"
            ],
            "arguments": {
                "requested_defs": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "log": [
                    "str",
                    "bool",
                    "List"
                ],
                "storage": [
                    "int"
                ]
            }
        },
        "Context.get_result": {
            "name": "get_result",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "calculation": [
                    "Context"
                ],
                "instrument": [
                    "bool",
                    "Dict",
                    "Iterable[str]"
                ],
                "tmax": [
                    "bool",
                    "Dict",
                    "Iterable[str]"
                ]
            }
        },
        "_resolve.get_calculation": {
            "name": "get_calculation",
            "location": 95,
            "return": [
                "bool",
                "Callable[[], bool]",
                "Dict[str, Tuple[str, str]]",
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "definition": [
                    "bool"
                ]
            }
        },
        "_resolve.get_result": {
            "name": "get_result",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "definition": [
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        }
    },
    "boyle-master/notes/internal-python-dsl/simple_workflow.py": {},
    "boyle-master/notes/internal-python-dsl/variant1.py": {},
    "boyle-master/notes/internal-python-dsl/variant2.py": {},
    "boyle-master/notes/internal-python-dsl/variant3.py": {},
    "boyle-master/notes/internal-python-dsl/variant4.py": {},
    "boyle-master/notes/internal-python-dsl/variant5.py": {},
    "boyle-master/notes/internal-python-dsl/variant6.py": {},
    "boyle-master/notes/internal-python-dsl/variant7.py": {
        "get_col_values": {
            "name": "get_col_values",
            "location": 3,
            "return": [
                "dict",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "colname": [
                    "str",
                    "bytes",
                    "Callable",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Mapping[str,str]",
                    "pandas.DataFrame"
                ]
            }
        },
        "make_matrix": {
            "name": "make_matrix",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boyle-master/notes/internal-python-dsl/variant8-nesting-problem.py": {},
    "boyle-master/notes/internal-python-dsl/variant8.py": {},
    "boyle-master/notes/internal-python-dsl/variant9.py": {
        "list_col_values": {
            "name": "list_col_values",
            "location": 31,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "colname": [
                    "List",
                    "Tuple",
                    "Optional[List[str]]",
                    "Dict[str,Any]",
                    "List[str]",
                    "Callable",
                    "None"
                ]
            }
        },
        "collect": {
            "name": "collect",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "something": {
            "name": "something",
            "location": 83,
            "return": [
                "List",
                "str",
                "bytes"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "dict"
                ],
                "param1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "build_dict": {
            "name": "build_dict",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "List[str]",
                    "AnyStr",
                    "Callable[[str], str]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[bytes]",
                    "None"
                ]
            }
        }
    },
    "boyle-master/tests/test_api.py": {
        "storage": {
            "name": "storage",
            "location": 20,
            "return": [
                "Storage",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 35,
            "return": [
                "Log",
                "str",
                "List",
                "float",
                "Dict[str,Any]",
                "Tuple",
                "Callable[...,None]",
                "Dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "restore_and_read": {
            "name": "restore_and_read",
            "location": 50,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "digest": [
                    "str",
                    "List[str]",
                    "Union[tuple,list]",
                    "Tuple",
                    "List"
                ],
                "storage": [
                    "str",
                    "List[str]",
                    "Union[tuple, list]"
                ],
                "mode": [
                    "Text",
                    "str",
                    "bytes",
                    "Union[bytes,bytearray]",
                    "bytearray"
                ]
            }
        },
        "make_and_check_expected_contents": {
            "name": "make_and_check_expected_contents",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_file_contents": [
                    "str",
                    "Dict[str,str]",
                    "Sequence[str]"
                ],
                "log": [
                    "str",
                    "bool"
                ],
                "storage": [
                    "str",
                    "int"
                ]
            }
        },
        "test_simple_shell": {
            "name": "test_simple_shell",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "storage": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "test_stdin": {
            "name": "test_stdin",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict[int,dict]",
                    "bool"
                ],
                "storage": [
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict[int,dict]",
                    "bool"
                ]
            }
        },
        "test_stdout_output": {
            "name": "test_stdout_output",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "storage": [
                    "Dict[str,Any]",
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_stdout_input": {
            "name": "test_stdout_input",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict[int,dict]",
                    "bool"
                ],
                "storage": [
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict[int,dict]",
                    "bool"
                ]
            }
        },
        "test_stdout_chain": {
            "name": "test_stdout_chain",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "int"
                ],
                "storage": [
                    "int"
                ]
            }
        },
        "test_stderr": {
            "name": "test_stderr",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "bool"
                ],
                "storage": [
                    "bool"
                ]
            }
        },
        "test_special_files_access": {
            "name": "test_special_files_access",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_specal_files_disallowed": {
            "name": "test_specal_files_disallowed",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rename": {
            "name": "test_rename",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "int"
                ],
                "storage": [
                    "int"
                ]
            }
        },
        "test_single_or_multiple_inputs": {
            "name": "test_single_or_multiple_inputs",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inputs_context_manager": {
            "name": "test_inputs_context_manager",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simplest_python_task": {
            "name": "test_simplest_python_task",
            "location": 206,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "log": [
                    "bool"
                ],
                "storage": [
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "storage.fin": {
            "name": "fin",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "log.fin": {
            "name": "fin",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boyle-master/tests/test_boyle.py": {
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boyle-master/tests/test_loc.py": {
        "test_allowed_loc": {
            "name": "test_allowed_loc",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boyle-master/tests/test_log.py": {
        "log": {
            "name": "log",
            "location": 23,
            "return": [
                "Log",
                "str",
                "List",
                "float",
                "Dict[str,Any]",
                "Tuple",
                "Callable[...,None]",
                "Dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "generate_test_data": {
            "name": "generate_test_data",
            "location": 38,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "test_log_read_write_results": {
            "name": "test_log_read_write_results",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "tartare.core.models.NewProcess",
                    "bool"
                ]
            }
        },
        "log.fin": {
            "name": "fin",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "boyle-master/tests/test_storage.py": {
        "storage": {
            "name": "storage",
            "location": 22,
            "return": [
                "Storage",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_store_and_restore": {
            "name": "test_store_and_restore",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "storage": [
                    "deeplearning.ml4pl.testing.random_log_database_generator.RandomLogDatabaseGenerator"
                ]
            }
        },
        "test_file_permissions": {
            "name": "test_file_permissions",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "storage": [
                    "str"
                ]
            }
        },
        "test_modify": {
            "name": "test_modify",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "storage": [
                    "str"
                ]
            }
        },
        "storage.fin": {
            "name": "fin",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
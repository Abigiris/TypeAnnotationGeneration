{
    "brainiak-master/setup.py": {
        "has_flag": {
            "name": "has_flag",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "compiler": [
                    "bool",
                    "str",
                    "os.DirEntry",
                    "type",
                    "Type"
                ],
                "flagname": [
                    "bool",
                    "str",
                    "typing.Type",
                    "os.DirEntry",
                    "type",
                    "Type"
                ]
            }
        },
        "cpp_flag": {
            "name": "cpp_flag",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "BuildExt.build_extensions": {
            "name": "build_extensions",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildExt.finalize_options": {
            "name": "finalize_options",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "brainiak-master/brainiak/image.py": {
        "mask_image": {
            "name": "mask_image",
            "location": 107,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "OrderedDict",
                    "nibabel.spatialimages.SpatialImage",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "\"HexpySession\""
                ],
                "mask": [
                    "np.ndarray"
                ],
                "data_type": [
                    "type"
                ]
            }
        },
        "multimask_images": {
            "name": "multimask_images",
            "location": 140,
            "return": [
                "Iterable[Sequence[np.ndarray]]"
            ],
            "arguments": {
                "images": [
                    "Iterable"
                ],
                "masks": [
                    "Sequence[np.ndarray]"
                ],
                "image_type": [
                    "type"
                ]
            }
        },
        "mask_images": {
            "name": "mask_images",
            "location": 163,
            "return": [
                "Iterable[np.ndarray]"
            ],
            "arguments": {
                "images": [
                    "Iterable"
                ],
                "mask": [
                    "np.ndarray"
                ],
                "image_type": [
                    "type"
                ]
            }
        },
        "MaskedMultiSubjectData.from_masked_images": {
            "name": "from_masked_images",
            "location": 40,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "masked_images": [
                    "Iterable[np.ndarray]"
                ],
                "n_subjects": [
                    "int"
                ]
            }
        },
        "SingleConditionSpec.extract_labels": {
            "name": "extract_labels",
            "location": 94,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "brainiak-master/brainiak/io.py": {
        "load_images_from_dir": {
            "name": "load_images_from_dir",
            "location": 39,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "in_dir": [
                    "Union[(str, pathlib.Path)]"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "load_images": {
            "name": "load_images",
            "location": 75,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "image_paths": [
                    "Iterable[Union[(str, pathlib.Path)]]"
                ]
            }
        },
        "load_boolean_mask": {
            "name": "load_boolean_mask",
            "location": 106,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "predicate": [
                    "Callable[([np.ndarray], np.ndarray)]"
                ]
            }
        },
        "load_labels": {
            "name": "load_labels",
            "location": 134,
            "return": [
                "List[brainiak.image.SingleConditionSpec]"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "save_as_nifti_file": {
            "name": "save_as_nifti_file",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "np.ndarray"
                ],
                "affine": [
                    "np.ndarray"
                ],
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/isc.py": {
        "isc": {
            "name": "isc",
            "location": 82,
            "return": [],
            "arguments": {
                "data": [],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "None"
                ],
                "tolerate_nans": [
                    "bool"
                ]
            }
        },
        "isfc": {
            "name": "isfc",
            "location": 212,
            "return": [],
            "arguments": {
                "data": [],
                "targets": [
                    "None"
                ],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "None"
                ],
                "vectorize_isfcs": [
                    "bool"
                ],
                "tolerate_nans": [
                    "bool"
                ]
            }
        },
        "_check_isc_input": {
            "name": "_check_isc_input",
            "location": 375,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "iscs": [],
                "pairwise": [
                    "bool"
                ]
            }
        },
        "_check_targets_input": {
            "name": "_check_targets_input",
            "location": 430,
            "return": [
                "Tuple[(Any, Any, Any, Any, bool)]"
            ],
            "arguments": {
                "targets": [],
                "data": []
            }
        },
        "compute_summary_statistic": {
            "name": "compute_summary_statistic",
            "location": 484,
            "return": [],
            "arguments": {
                "iscs": [],
                "summary_statistic": [
                    "typing.Text"
                ],
                "axis": [
                    "None"
                ]
            }
        },
        "squareform_isfc": {
            "name": "squareform_isfc",
            "location": 530,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "isfcs": [],
                "iscs": []
            }
        },
        "_threshold_nans": {
            "name": "_threshold_nans",
            "location": 593,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "data": [],
                "tolerate_nans": []
            }
        },
        "bootstrap_isc": {
            "name": "bootstrap_isc",
            "location": 650,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)], Any, np.ndarray)]"
            ],
            "arguments": {
                "iscs": [],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "typing.Text"
                ],
                "n_bootstraps": [
                    "int"
                ],
                "ci_percentile": [
                    "int"
                ],
                "side": [
                    "typing.Text"
                ],
                "random_state": [
                    "None"
                ]
            }
        },
        "_check_group_assignment": {
            "name": "_check_group_assignment",
            "location": 806,
            "return": [
                "list[]"
            ],
            "arguments": {
                "group_assignment": [],
                "n_subjects": []
            }
        },
        "_get_group_parameters": {
            "name": "_get_group_parameters",
            "location": 822,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "group_assignment": [],
                "n_subjects": [],
                "pairwise": [
                    "bool"
                ]
            }
        },
        "_permute_one_sample_iscs": {
            "name": "_permute_one_sample_iscs",
            "location": 900,
            "return": [],
            "arguments": {
                "iscs": [],
                "group_parameters": [],
                "i": [],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "typing.Text"
                ],
                "group_matrix": [
                    "None"
                ],
                "exact_permutations": [
                    "None"
                ],
                "prng": [
                    "None"
                ]
            }
        },
        "_permute_two_sample_iscs": {
            "name": "_permute_two_sample_iscs",
            "location": 968,
            "return": [],
            "arguments": {
                "iscs": [],
                "group_parameters": [],
                "i": [],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "typing.Text"
                ],
                "exact_permutations": [
                    "None"
                ],
                "prng": [
                    "None"
                ]
            }
        },
        "permutation_isc": {
            "name": "permutation_isc",
            "location": 1057,
            "return": [
                "Tuple[(Any, Any, np.ndarray)]"
            ],
            "arguments": {
                "iscs": [],
                "group_assignment": [
                    "None"
                ],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "typing.Text"
                ],
                "n_permutations": [
                    "int"
                ],
                "side": [
                    "typing.Text"
                ],
                "random_state": [
                    "None"
                ]
            }
        },
        "timeshift_isc": {
            "name": "timeshift_isc",
            "location": 1252,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": [],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "typing.Text"
                ],
                "n_shifts": [
                    "int"
                ],
                "side": [
                    "typing.Text"
                ],
                "tolerate_nans": [
                    "bool"
                ],
                "random_state": [
                    "None"
                ]
            }
        },
        "phaseshift_isc": {
            "name": "phaseshift_isc",
            "location": 1408,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": [],
                "pairwise": [
                    "bool"
                ],
                "summary_statistic": [
                    "typing.Text"
                ],
                "n_shifts": [
                    "int"
                ],
                "side": [
                    "typing.Text"
                ],
                "tolerate_nans": [
                    "bool"
                ],
                "random_state": [
                    "None"
                ]
            }
        }
    },
    "brainiak-master/brainiak/__init__.py": {},
    "brainiak-master/brainiak/eventseg/event.py": {
        "EventSegment._default_var_schedule": {
            "name": "_default_var_schedule",
            "location": 113,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "step": [
                    "EventSegment"
                ]
            }
        },
        "EventSegment.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_events": [
                    "int"
                ],
                "step_var": [],
                "n_iter": [
                    "int"
                ],
                "event_chains": [
                    "None"
                ],
                "split_merge": [
                    "bool"
                ],
                "split_merge_proposals": [
                    "int"
                ]
            }
        },
        "EventSegment._fit_validate": {
            "name": "_fit_validate",
            "location": 130,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_T0"
                ]
            }
        },
        "EventSegment.fit": {
            "name": "fit",
            "location": 167,
            "return": [
                "EventSegment"
            ],
            "arguments": {
                "self": [
                    "_TEventSegment"
                ],
                "X": [],
                "y": [
                    "None"
                ]
            }
        },
        "EventSegment._logprob_obs": {
            "name": "_logprob_obs",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "mean_pat": [],
                "var": []
            }
        },
        "EventSegment._forward_backward": {
            "name": "_forward_backward",
            "location": 284,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "logprob": []
            }
        },
        "EventSegment._log": {
            "name": "_log",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "EventSegment.set_event_patterns": {
            "name": "set_event_patterns",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_pat": []
            }
        },
        "EventSegment.find_events": {
            "name": "find_events",
            "location": 406,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "testing_data": [],
                "var": [
                    "None"
                ],
                "scramble": [
                    "bool"
                ]
            }
        },
        "EventSegment.predict": {
            "name": "predict",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "EventSegment.calc_weighted_event_var": {
            "name": "calc_weighted_event_var",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "D": [],
                "weights": [],
                "event_pat": []
            }
        },
        "EventSegment.model_prior": {
            "name": "model_prior",
            "location": 518,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "EventSegment._split_merge": {
            "name": "_split_merge",
            "location": 542,
            "return": [
                "Tuple[(Any, _T1, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "log_gamma": [
                    "_T1"
                ],
                "iteration_var": [],
                "curr_ll": []
            }
        }
    },
    "brainiak-master/brainiak/eventseg/__init__.py": {},
    "brainiak-master/brainiak/factoranalysis/htfa.py": {
        "HTFA.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "K": [],
                "n_subj": [],
                "max_global_iter": [
                    "int"
                ],
                "max_local_iter": [
                    "int"
                ],
                "threshold": [
                    "float"
                ],
                "nlss_method": [
                    "typing.Text"
                ],
                "nlss_loss": [
                    "typing.Text"
                ],
                "jac": [
                    "typing.Text"
                ],
                "x_scale": [
                    "typing.Text"
                ],
                "tr_solver": [
                    "None"
                ],
                "weight_method": [
                    "typing.Text"
                ],
                "upper_ratio": [
                    "float"
                ],
                "lower_ratio": [
                    "float"
                ],
                "voxel_ratio": [
                    "float"
                ],
                "tr_ratio": [
                    "float"
                ],
                "max_voxel": [
                    "int"
                ],
                "max_tr": [
                    "int"
                ],
                "comm": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "HTFA._converged": {
            "name": "_converged",
            "location": 192,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTFA._mse_converged": {
            "name": "_mse_converged",
            "location": 222,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTFA._map_update": {
            "name": "_map_update",
            "location": 246,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "prior_mean": [],
                "prior_cov": [],
                "global_cov_scaled": [],
                "new_observation": []
            }
        },
        "HTFA._map_update_posterior": {
            "name": "_map_update_posterior",
            "location": 290,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ]
            }
        },
        "HTFA._get_gather_offset": {
            "name": "_get_gather_offset",
            "location": 343,
            "return": [
                "Tuple[(tuple, tuple, Dict[(int, Tuple[(Any, Any)])])]"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "HTFA._get_weight_size": {
            "name": "_get_weight_size",
            "location": 388,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "n_local_subj": []
            }
        },
        "HTFA._get_subject_info": {
            "name": "_get_subject_info",
            "location": 422,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "n_local_subj": [],
                "data": []
            }
        },
        "HTFA._get_mpi_info": {
            "name": "_get_mpi_info",
            "location": 455,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTFA._init_prior_posterior": {
            "name": "_init_prior_posterior",
            "location": 475,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ],
                "rank": [],
                "R": [],
                "n_local_subj": []
            }
        },
        "HTFA._gather_local_posterior": {
            "name": "_gather_local_posterior",
            "location": 515,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ],
                "use_gather": [],
                "gather_size": [],
                "gather_offset": []
            }
        },
        "HTFA._assign_posterior": {
            "name": "_assign_posterior",
            "location": 560,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ]
            }
        },
        "HTFA._update_global_posterior": {
            "name": "_update_global_posterior",
            "location": 592,
            "return": [
                "_T2"
            ],
            "arguments": {
                "self": [],
                "rank": [],
                "m": [],
                "outer_converged": [
                    "_T2"
                ]
            }
        },
        "HTFA._update_weight": {
            "name": "_update_weight",
            "location": 626,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ],
                "data": [],
                "R": [],
                "n_local_subj": [],
                "local_weight_offset": []
            }
        },
        "HTFA._fit_htfa": {
            "name": "_fit_htfa",
            "location": 672,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ],
                "data": [],
                "R": []
            }
        },
        "HTFA._check_input": {
            "name": "_check_input",
            "location": 766,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ],
                "X": [],
                "R": []
            }
        },
        "HTFA.fit": {
            "name": "fit",
            "location": 811,
            "return": [
                "HTFA"
            ],
            "arguments": {
                "self": [
                    "_THTFA"
                ],
                "X": [],
                "R": []
            }
        }
    },
    "brainiak-master/brainiak/factoranalysis/tfa.py": {
        "TFA.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_iter": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "threshold": [
                    "float",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "K": [
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "nlss_method": [
                    "typing.Text",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "nlss_loss": [
                    "typing.Text",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "jac": [
                    "typing.Text",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "x_scale": [
                    "typing.Text",
                    "bool",
                    "int"
                ],
                "tr_solver": [
                    "int",
                    "None",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "weight_method": [
                    "typing.Text",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "upper_ratio": [
                    "float",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "lower_ratio": [
                    "float",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "max_num_tr": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "max_num_voxel": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "seed": [
                    "int",
                    "str",
                    "Sequence[Sequence[float]]",
                    "bool"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[Sequence[float]]"
                ]
            }
        },
        "TFA.set_K": {
            "name": "set_K",
            "location": 169,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "K": [
                    "int",
                    "float",
                    "tuple",
                    "tuple[]",
                    "List[Tuple[int, float]]",
                    "list[tuple[typing.Union[int,float]]]"
                ]
            }
        },
        "TFA.set_prior": {
            "name": "set_prior",
            "location": 188,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "prior": [
                    "bool",
                    "float"
                ]
            }
        },
        "TFA.set_seed": {
            "name": "set_seed",
            "location": 207,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "seed": [
                    "bool",
                    "float"
                ]
            }
        },
        "TFA.init_prior": {
            "name": "init_prior",
            "location": 225,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "R": [
                    "int",
                    "float",
                    "str",
                    "None",
                    "raiden.utils.Callable",
                    "Union[None, float, int]",
                    "Optional[int]"
                ]
            }
        },
        "TFA._assign_posterior": {
            "name": "_assign_posterior",
            "location": 242,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ]
            }
        },
        "TFA._converged": {
            "name": "_converged",
            "location": 262,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFA._mse_converged": {
            "name": "_mse_converged",
            "location": 288,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFA.get_map_offset": {
            "name": "get_map_offset",
            "location": 309,
            "return": [
                "str",
                "int",
                "bool",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFA.init_centers_widths": {
            "name": "init_centers_widths",
            "location": 328,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ]
            }
        },
        "TFA.get_template": {
            "name": "get_template",
            "location": 352,
            "return": [
                "Tuple[(Any, Any, float)]"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "str",
                    "int",
                    "list[]",
                    "numpy.ndarray",
                    "typing.Match",
                    "list",
                    "Match[str]"
                ]
            }
        },
        "TFA.set_centers": {
            "name": "set_centers",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "bool",
                    "float"
                ],
                "centers": [
                    "bool",
                    "float"
                ]
            }
        },
        "TFA.set_widths": {
            "name": "set_widths",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "int"
                ],
                "widths": [
                    "int"
                ]
            }
        },
        "TFA.set_centers_mean_cov": {
            "name": "set_centers_mean_cov",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "bool",
                    "float"
                ],
                "centers_mean_cov": [
                    "bool",
                    "float"
                ]
            }
        },
        "TFA.set_widths_mean_var": {
            "name": "set_widths_mean_var",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "int",
                    "typing.Pattern",
                    "Pattern[str]",
                    "list[int]",
                    "str",
                    "List[int]",
                    "None",
                    "Optional[int]",
                    "list[]",
                    "Optional[str]",
                    "bool",
                    "list"
                ],
                "widths_mean_var": [
                    "int",
                    "Pattern[str]",
                    "List[int]",
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "TFA.get_centers": {
            "name": "get_centers",
            "location": 444,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Callable[[Any], None]",
                    "typing.Callable[typing.Any, None]"
                ]
            }
        },
        "TFA.get_widths": {
            "name": "get_widths",
            "location": 463,
            "return": [
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TFA.get_centers_mean_cov": {
            "name": "get_centers_mean_cov",
            "location": 483,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "int"
                ]
            }
        },
        "TFA.get_widths_mean_var": {
            "name": "get_widths_mean_var",
            "location": 504,
            "return": [
                "float",
                "bool",
                "Optional[int]",
                "list",
                "raiden.utils.PaymentAmount",
                "raiden.utils.FeeAmount",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "estimation": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TFA.get_factors": {
            "name": "get_factors",
            "location": 525,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "unique_R": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "inds": [
                    "list[int]",
                    "int",
                    "float",
                    "List[int]"
                ],
                "centers": [
                    "int",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict"
                ],
                "widths": [
                    "int",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "TFA.get_weights": {
            "name": "get_weights",
            "location": 569,
            "return": [
                "str",
                "bool",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "F": [
                    "bytes",
                    "int",
                    "Tuple[int, int, bytearray]",
                    "tuple[typing.Union[int,int,bytearray]]"
                ]
            }
        },
        "TFA._get_max_sigma": {
            "name": "_get_max_sigma",
            "location": 600,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "TFA.get_bounds": {
            "name": "get_bounds",
            "location": 620,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "bool",
                    "float"
                ]
            }
        },
        "TFA._residual_multivariate": {
            "name": "_residual_multivariate",
            "location": 652,
            "return": [
                "typing.Callable[[], typing.Any]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "estimate": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[int]",
                    "None"
                ],
                "unique_R": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "inds": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "X": [
                    "List[int]",
                    "int",
                    "list[int]"
                ],
                "W": [
                    "bool",
                    "numpy.ndarray",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "template_centers": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "template_centers_mean_cov": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "template_widths": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ],
                "template_widths_mean_var_reci": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "data_sigma": [
                    "bool",
                    "str",
                    "tuple",
                    "tuple[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TFA._estimate_centers_widths": {
            "name": "_estimate_centers_widths",
            "location": 738,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "unique_R": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "inds": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "X": [
                    "float",
                    "str",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "W": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "init_centers": [
                    "float",
                    "bool"
                ],
                "init_widths": [
                    "float",
                    "bool"
                ],
                "template_centers": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "template_widths": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "template_centers_mean_cov": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "template_widths_mean_var_reci": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TFA._fit_tfa": {
            "name": "_fit_tfa",
            "location": 824,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "data": [
                    "bytes"
                ],
                "R": [
                    "bytes"
                ],
                "template_prior": [
                    "dict",
                    "None",
                    "Any",
                    "dict[, ]",
                    "Optional[int]",
                    "typing.Any",
                    "int"
                ]
            }
        },
        "TFA.get_unique_R": {
            "name": "get_unique_R",
            "location": 879,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "list[numpy.ndarray]",
                    "int",
                    "tuple[]",
                    "str",
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "tuple",
                    "Sequence[int]"
                ]
            }
        },
        "TFA._fit_tfa_inner": {
            "name": "_fit_tfa_inner",
            "location": 908,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "data": [
                    "str",
                    "bytes"
                ],
                "R": [
                    "str",
                    "int"
                ],
                "template_centers": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "template_widths": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "template_centers_mean_cov": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "template_widths_mean_var_reci": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "TFA.fit": {
            "name": "fit",
            "location": 971,
            "return": [
                "FA"
            ],
            "arguments": {
                "self": [
                    "_TTFA"
                ],
                "X": [],
                "R": [
                    "str",
                    "int",
                    "deque",
                    "typing.Deque"
                ],
                "template_prior": [
                    "None",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "raiden.utils.BlockIdentifier",
                    "Optional[numpy.ndarray]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/factoranalysis/__init__.py": {},
    "brainiak-master/brainiak/fcma/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "float",
                    "int",
                    "str",
                    "tuple[]",
                    "tuple",
                    "bool"
                ],
                "num_processed_voxels": [
                    "int"
                ],
                "epochs_per_subj": [
                    "int",
                    "float",
                    "tuple",
                    "str",
                    "bool"
                ]
            }
        },
        "Classifier._prepare_corerelation_data": {
            "name": "_prepare_corerelation_data",
            "location": 125,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "self": [],
                "X1": [
                    "int",
                    "float",
                    "str",
                    "Optional[Sequence[str]]",
                    "List[int]"
                ],
                "X2": [
                    "str",
                    "list[float]",
                    "list[str]",
                    "bool",
                    "int",
                    "List[float]",
                    "Callable",
                    "List[str]",
                    "dict"
                ],
                "start_voxel": [
                    "int",
                    "str"
                ],
                "num_processed_voxels": [
                    "Optional[int]",
                    "None",
                    "Union[int, None]",
                    "int"
                ]
            }
        },
        "Classifier._normalize_correlation_data": {
            "name": "_normalize_correlation_data",
            "location": 184,
            "return": [
                "bool",
                "IO[bytes]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "corr_data": [
                    "numpy.ndarray",
                    "T",
                    "List[int]",
                    "dict",
                    "bool"
                ],
                "norm_unit": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Classifier._prepare_test_data": {
            "name": "_prepare_test_data",
            "location": 222,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "corr_data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Classifier._compute_kernel_matrix_in_portion": {
            "name": "_compute_kernel_matrix_in_portion",
            "location": 279,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X1": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "X2": [
                    "numpy.ndarray"
                ]
            }
        },
        "Classifier._generate_training_data": {
            "name": "_generate_training_data",
            "location": 350,
            "return": [
                "list[int]",
                "Dict[str, List[int]]",
                "dict[, ]",
                "str",
                "int",
                "Optional[float]",
                "dict[str, typing.Union[typing.Any,int]]",
                "dict",
                "Optional[Dict[str, Any]]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "X1": [
                    "Optional[Sequence[T]]",
                    "int",
                    "typing.Sequence[T]",
                    "str",
                    "None"
                ],
                "X2": [
                    "Optional[Sequence[T]]",
                    "int",
                    "typing.Sequence[T]",
                    "str",
                    "None"
                ],
                "num_training_samples": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "float",
                    "typing.Callable[str, int]",
                    "Union[int, None]",
                    "numpy.ndarray",
                    "Callable[[str], int]"
                ]
            }
        },
        "Classifier.fit": {
            "name": "fit",
            "location": 426,
            "return": [
                "Classifier"
            ],
            "arguments": {
                "self": [
                    "_TClassifier"
                ],
                "X": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "numpy.random.RandomState",
                    "int"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "num_training_samples": [
                    "None",
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Union[int, None]"
                ]
            }
        },
        "Classifier.predict": {
            "name": "predict",
            "location": 506,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[str, str]",
                "dict[str, tuple[typing.Union[int,str]]]",
                "dict[tuple[typing.Union[str,int]], str]",
                "dict[int, str]",
                "dict[typing.Any, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "dict[str, list[float]]",
                    "numpy.ndarray",
                    "Optional[str]",
                    "Type",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "Classifier._is_equal_to_test_raw_data": {
            "name": "_is_equal_to_test_raw_data",
            "location": 568,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "list",
                    "Dict[str, int]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Classifier.decision_function": {
            "name": "decision_function",
            "location": 597,
            "return": [
                "str",
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "Iterable[Any]",
                    "Sequence[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Classifier.score": {
            "name": "score",
            "location": 652,
            "return": [
                "list[]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int"
                ],
                "y": [
                    "float",
                    "numpy.ndarray"
                ],
                "sample_weight": [
                    "float",
                    "None",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "brainiak-master/brainiak/fcma/mvpa_voxelselector.py": {
        "_sfn": {
            "name": "_sfn",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "mask": [
                    "int",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "myrad": [
                    "bool",
                    "float",
                    "int"
                ],
                "bcast_var": [
                    "list[str]",
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MVPAVoxelSelector.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "typing.Iterable[dict[, ]]",
                    "bytes",
                    "None",
                    "Iterable[dict]",
                    "dict",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "mask": [
                    "int",
                    "bytes",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "labels": [
                    "int",
                    "bytes",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Iterable[Iterable]",
                    "typing.Iterable[typing.Iterable[]]"
                ],
                "num_folds": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "sl": [
                    "int",
                    "bytes",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Iterable[Iterable]",
                    "typing.Iterable[typing.Iterable[]]"
                ]
            }
        },
        "MVPAVoxelSelector.run": {
            "name": "run",
            "location": 90,
            "return": [
                "Tuple[(Any, List[Tuple[(int, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "bool",
                    "str",
                    "tuple[]",
                    "tuple",
                    "int"
                ]
            }
        }
    },
    "brainiak-master/brainiak/fcma/preprocessing.py": {
        "_separate_epochs": {
            "name": "_separate_epochs",
            "location": 41,
            "return": [
                "Tuple[(list, List[int])]"
            ],
            "arguments": {
                "activity_data": [
                    "bool",
                    "str",
                    "int"
                ],
                "epoch_list": [
                    "List[str]",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[\"Node\"]"
                ]
            }
        },
        "_randomize_single_subject": {
            "name": "_randomize_single_subject",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "float",
                    "typing.Iterable[]",
                    "Optional[Iterable]",
                    "None",
                    "int",
                    "Union[numpy.ndarray, xarray.DataArray]"
                ],
                "seed": [
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[bool]",
                    "bool",
                    "IO[str]",
                    "typing.IO",
                    "Optional[int]"
                ]
            }
        },
        "_randomize_subject_list": {
            "name": "_randomize_subject_list",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "data_list": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "int"
                ],
                "random": [
                    "str",
                    "bytes",
                    "Match",
                    "typing.Match",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "prepare_fcma_data": {
            "name": "prepare_fcma_data",
            "location": 156,
            "return": [
                "Tuple[(list, Optional[list], Any)]"
            ],
            "arguments": {
                "images": [
                    "numpy.ndarray"
                ],
                "conditions": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mask1": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mask2": [
                    "Optional[float]",
                    "None",
                    "Set[str]",
                    "float",
                    "Optional[numpy.ndarray]",
                    "set[str]"
                ],
                "random": [
                    "List[List[str]]",
                    "bytes",
                    "list"
                ],
                "comm": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "generate_epochs_info": {
            "name": "generate_epochs_info",
            "location": 235,
            "return": [
                "List[Tuple[(int, int, Any, Any)]]"
            ],
            "arguments": {
                "epoch_list": [
                    "str",
                    "int"
                ]
            }
        },
        "prepare_mvpa_data": {
            "name": "prepare_mvpa_data",
            "location": 274,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "images": [
                    "int",
                    "numpy.ndarray"
                ],
                "conditions": [
                    "int",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "List[bytes]",
                    "list[bytes]",
                    "List[int]",
                    "list[int]"
                ],
                "mask": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "prepare_searchlight_mvpa_data": {
            "name": "prepare_searchlight_mvpa_data",
            "location": 328,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "images": [
                    "str",
                    "list[str]",
                    "Callable[[Any, Any], Any]",
                    "List[str]",
                    "Exception",
                    "Optional[str]",
                    "bool"
                ],
                "conditions": [
                    "dict",
                    "List[List[int]]",
                    "memoryview",
                    "Dict[str, List[float]]"
                ],
                "data_type": [
                    "dict",
                    "bool"
                ],
                "random": [
                    "bool",
                    "Type"
                ]
            }
        }
    },
    "brainiak-master/brainiak/fcma/util.py": {
        "_normalize_for_correlation": {
            "name": "_normalize_for_correlation",
            "location": 32,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "axis": [
                    "str",
                    "int",
                    "typing.Match",
                    "bool",
                    "None",
                    "Match[str]",
                    "Optional[str]"
                ],
                "return_nans": [
                    "bool",
                    "int",
                    "Dict[str, List[Dict]]",
                    "str",
                    "list"
                ]
            }
        },
        "compute_correlation": {
            "name": "compute_correlation",
            "location": 63,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "matrix1": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "bytes",
                    "float",
                    "Union[str, bytes]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]"
                ],
                "matrix2": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "bytes",
                    "float",
                    "Union[str, bytes]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]"
                ],
                "return_nans": [
                    "bool",
                    "Dict[str, Any]",
                    "T",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "brainiak-master/brainiak/fcma/voxelselector.py": {
        "_cross_validation_for_one_voxel": {
            "name": "_cross_validation_for_one_voxel",
            "location": 41,
            "return": [
                "Tuple[(_T1, Any)]"
            ],
            "arguments": {
                "clf": [
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "vid": [
                    "_T1"
                ],
                "num_folds": [
                    "int",
                    "float",
                    "bool",
                    "raiden.utils.ChannelID",
                    "numpy.ndarray"
                ],
                "subject_data": [
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "labels": [
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "VoxelSelector.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "int"
                ],
                "epochs_per_subj": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "int"
                ],
                "num_folds": [
                    "int",
                    "bool",
                    "raiden.utils.Nonce"
                ],
                "raw_data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Union[bytes, str, None]",
                    "Optional[\"TrackingData\"]",
                    "List[int]"
                ],
                "raw_data2": [
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "voxel_unit": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "tuple"
                ],
                "process_num": [
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[str]",
                    "Dict[str, np.ndarray]"
                ],
                "master_rank": [
                    "int",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "List[Tuple[str, float, int, float]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "VoxelSelector.run": {
            "name": "run",
            "location": 149,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "str",
                    "int",
                    "list[]",
                    "bool",
                    "list"
                ]
            }
        },
        "VoxelSelector._master": {
            "name": "_master",
            "location": 176,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoxelSelector._worker": {
            "name": "_worker",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "VoxelSelector._correlation_computation": {
            "name": "_correlation_computation",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "VoxelSelector._correlation_normalization": {
            "name": "_correlation_normalization",
            "location": 331,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "corr": [
                    "T",
                    "Callable",
                    "Sequence[int]"
                ]
            }
        },
        "VoxelSelector._prepare_for_cross_validation": {
            "name": "_prepare_for_cross_validation",
            "location": 371,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "corr": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "clf": [
                    "int",
                    "float"
                ]
            }
        },
        "VoxelSelector._do_cross_validation": {
            "name": "_do_cross_validation",
            "location": 423,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "float",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "data": [
                    "int",
                    "Iterable[Any]",
                    "bool",
                    "Optional[Dict]"
                ],
                "task": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Iterable[Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "VoxelSelector._voxel_scoring": {
            "name": "_voxel_scoring",
            "location": 467,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "clf": [
                    "Optional[Tuple]",
                    "tuple[]",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/fcma/__init__.py": {},
    "brainiak-master/brainiak/funcalign/fastsrm.py": {
        "get_shape": {
            "name": "get_shape",
            "location": 32,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "safe_load": {
            "name": "safe_load",
            "location": 46,
            "return": [
                "np_@_ndarray",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "int",
                "Optional[float]",
                "tuple",
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "T",
                    "str",
                    "typing.Type",
                    "bytes",
                    "List[str]",
                    "type",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "safe_encode": {
            "name": "safe_encode",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "img": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "assert_non_empty_list": {
            "name": "assert_non_empty_list",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "input_list": [
                    "str",
                    "bool"
                ],
                "list_name": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "assert_array_2axis": {
            "name": "assert_array_2axis",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [
                    "str",
                    "bool",
                    "Set[Tuple[int, Any, Any]]",
                    "set[tuple[typing.Union[int,typing.Any,typing.Any]]]"
                ],
                "name_array": [
                    "str",
                    "bytes",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "assert_valid_index": {
            "name": "assert_valid_index",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "indexes": [
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "max_value": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ],
                "name_indexes": [
                    "str"
                ]
            }
        },
        "_check_imgs_list": {
            "name": "_check_imgs_list",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "imgs": [
                    "Callable",
                    "list",
                    "float",
                    "numpy.ndarray",
                    "Set[int]"
                ]
            }
        },
        "_check_imgs_list_list": {
            "name": "_check_imgs_list_list",
            "location": 129,
            "return": [
                "int",
                "str",
                "List[int]",
                "float",
                "Sequence[int]"
            ],
            "arguments": {
                "imgs": [
                    "list",
                    "List[List[Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "_check_imgs_list_array": {
            "name": "_check_imgs_list_array",
            "location": 176,
            "return": [
                "Tuple[(List[list], Any)]"
            ],
            "arguments": {
                "imgs": [
                    "list",
                    "List[List[Any]]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_check_imgs_array": {
            "name": "_check_imgs_array",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "imgs": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_check_shapes_components": {
            "name": "_check_shapes_components",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "n_components": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_timeframes": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_check_shapes_atlas_compatibility": {
            "name": "_check_shapes_atlas_compatibility",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "n_voxels": [
                    "int",
                    "str"
                ],
                "n_timeframes": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "n_components": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "atlas_shape": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "_check_shapes": {
            "name": "_check_shapes",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "shapes": [
                    "str",
                    "int",
                    "bytearray",
                    "list[]",
                    "list"
                ],
                "n_components": [
                    "int",
                    "None",
                    "List[int]",
                    "dict",
                    "list[int]",
                    "dict[, ]"
                ],
                "atlas_shape": [
                    "int",
                    "None",
                    "List[int]",
                    "dict",
                    "list[int]",
                    "dict[, ]"
                ],
                "ignore_nsubjects": [
                    "bool",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "check_atlas": {
            "name": "check_atlas",
            "location": 314,
            "return": [
                "None",
                "Optional[str]",
                "tuple[int]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "atlas": [
                    "int",
                    "Optional[int]",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "n_components": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "check_imgs": {
            "name": "check_imgs",
            "location": 376,
            "return": [
                "Tuple[(bool, Union[(List[list], _T0)], Any)]"
            ],
            "arguments": {
                "imgs": [
                    "_T0"
                ],
                "n_components": [
                    "int",
                    "None",
                    "bool",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "atlas_shape": [
                    "int",
                    "None",
                    "bool",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "ignore_nsubjects": [
                    "bool",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "check_indexes": {
            "name": "check_indexes",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "indexes": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "cmk.base.api.agent_based.type_defs.RuleSetName"
                ]
            }
        },
        "_check_shared_response_list_of_list": {
            "name": "_check_shared_response_list_of_list",
            "location": 449,
            "return": [
                "list"
            ],
            "arguments": {
                "shared_response": [
                    "int",
                    "list",
                    "bytes",
                    "List[List[int]]",
                    "str",
                    "Sequence[str]"
                ],
                "n_components": [
                    "bytes"
                ],
                "input_shapes": [
                    "bytes"
                ]
            }
        },
        "_check_shared_response_list_sessions": {
            "name": "_check_shared_response_list_sessions",
            "location": 479,
            "return": [
                "_T0"
            ],
            "arguments": {
                "shared_response": [
                    "_T0"
                ],
                "n_components": [
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "input_shapes": [
                    "None",
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "T",
                    "Optional[Any]"
                ]
            }
        },
        "_check_shared_response_list_subjects": {
            "name": "_check_shared_response_list_subjects",
            "location": 502,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "shared_response": [
                    "int",
                    "Callable",
                    "numpy.random.RandomState",
                    "List[tuple]",
                    "List[str]"
                ],
                "n_components": [
                    "bytes",
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "input_shapes": [
                    "bytes",
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "_check_shared_response_array": {
            "name": "_check_shared_response_array",
            "location": 511,
            "return": [
                "List[_T0]"
            ],
            "arguments": {
                "shared_response": [
                    "_T0"
                ],
                "n_components": [
                    "Optional[str]",
                    "str",
                    "Sequence[int]",
                    "bytes",
                    "None",
                    "Dict[str, Any]",
                    "typing.Sequence[int]",
                    "dict[str, typing.Any]"
                ],
                "input_shapes": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "str"
                ]
            }
        },
        "check_shared_response": {
            "name": "check_shared_response",
            "location": 524,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "shared_response": [
                    "_T0"
                ],
                "aggregate": [
                    "typing.Text",
                    "bool",
                    "float",
                    "int",
                    "tuple"
                ],
                "n_components": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "dict[str, str]",
                    "List[Optional[str]]",
                    "bool",
                    "OrderedDict",
                    "list[typing.Optional[str]]",
                    "Iterable[int]",
                    "typing.OrderedDict"
                ],
                "input_shapes": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "dict[str, str]",
                    "List[Optional[str]]",
                    "bool",
                    "OrderedDict",
                    "list[typing.Optional[str]]",
                    "Iterable[int]",
                    "typing.OrderedDict"
                ]
            }
        },
        "create_temp_dir": {
            "name": "create_temp_dir",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "reduce_data_single": {
            "name": "reduce_data_single",
            "location": 585,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "subject_index": [
                    "str",
                    "bytes",
                    "Exception"
                ],
                "session_index": [
                    "str",
                    "bytes",
                    "Exception"
                ],
                "img": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "atlas": [
                    "Callable",
                    "int",
                    "None",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "str"
                ],
                "inv_atlas": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "int"
                ],
                "low_ram": [
                    "bool",
                    "str",
                    "int",
                    "dict"
                ],
                "temp_dir": [
                    "str",
                    "None",
                    "Callable",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "reduce_data": {
            "name": "reduce_data",
            "location": 671,
            "return": [
                "str",
                "bytes",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "imgs": [
                    "str",
                    "bool",
                    "int",
                    "tuple"
                ],
                "atlas": [
                    "Optional[numpy.ndarray]",
                    "float",
                    "None",
                    "List[int]",
                    "list[int]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "n_jobs": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "low_ram": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "temp_dir": [
                    "bool",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ]
            }
        },
        "_reduced_space_compute_shared_response": {
            "name": "_reduced_space_compute_shared_response",
            "location": 774,
            "return": [
                "list"
            ],
            "arguments": {
                "reduced_data_list": [
                    "str",
                    "bool",
                    "int"
                ],
                "reduced_basis_list": [
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "List[Dict[Any, str]]",
                    "list[str]",
                    "list[dict[typing.Any, str]]"
                ],
                "n_components": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "_compute_and_save_corr_mat": {
            "name": "_compute_and_save_corr_mat",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "str",
                    "bytes",
                    "typing.IO",
                    "IO",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "T"
                ],
                "shared_response": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "uuid.UUID"
                ],
                "temp_dir": [
                    "str"
                ]
            }
        },
        "_compute_and_save_subject_basis": {
            "name": "_compute_and_save_subject_basis",
            "location": 862,
            "return": [
                "str"
            ],
            "arguments": {
                "subject_number": [
                    "str"
                ],
                "sessions": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "temp_dir": [
                    "str"
                ]
            }
        },
        "_compute_subject_basis": {
            "name": "_compute_subject_basis",
            "location": 908,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "corr_mat": [
                    "dict[, ]",
                    "numpy.ndarray",
                    "numpy.array",
                    "dict"
                ]
            }
        },
        "fast_srm": {
            "name": "fast_srm",
            "location": 938,
            "return": [
                "list[]",
                "Optional[Exception]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "reduced_data_list": [
                    "str",
                    "list[]",
                    "Optional[str]",
                    "int",
                    "list",
                    "Dict[str, List[str]]"
                ],
                "n_iter": [
                    "int",
                    "Optional[str]",
                    "list",
                    "str"
                ],
                "n_components": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "low_ram": [
                    "bool",
                    "int",
                    "Sequence[Union[str, Any]]",
                    "Sequence[Dict[str, Any]]",
                    "List[Dict[str, Any]]"
                ],
                "seed": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "lowram_srm": {
            "name": "lowram_srm",
            "location": 1006,
            "return": [
                "list"
            ],
            "arguments": {
                "reduced_data_list": [
                    "str"
                ],
                "n_iter": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "n_components": [
                    "numpy.ndarray",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Tuple[Any, Any, Any]",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]"
                ]
            }
        },
        "_compute_basis_subject_online": {
            "name": "_compute_basis_subject_online",
            "location": 1058,
            "return": [
                "int",
                "numpy.ndarray",
                "List[dict]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "sessions": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "list[str]",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "shared_response_list": [
                    "Dict[str, int]",
                    "dict[str, int]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_compute_shared_response_online_single": {
            "name": "_compute_shared_response_online_single",
            "location": 1097,
            "return": [
                "float",
                "str",
                "dict",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "subjects": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "basis_list": [
                    "int",
                    "tuple[typing.Union[int,slice,int,slice]]",
                    "str",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "typing.Sequence[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "temp_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[IO[bytes]]",
                    "typing.IO"
                ],
                "subjects_indexes": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "aggregate": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[List[Any]]",
                    "Optional[Set[int]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, int]]",
                    "set[int]",
                    "dict[str, int]"
                ]
            }
        },
        "_compute_shared_response_online": {
            "name": "_compute_shared_response_online",
            "location": 1166,
            "return": [
                "Optional[str]",
                "list[]",
                "str",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "Dict[str, Any]",
                "list[list[]]"
            ],
            "arguments": {
                "imgs": [
                    "list[]",
                    "list",
                    "tuple[]",
                    "tuple",
                    "numpy.array"
                ],
                "basis_list": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Iterable[T]",
                    "Iterable[T]"
                ],
                "temp_dir": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Iterable[T]",
                    "Iterable[T]"
                ],
                "n_jobs": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Iterable[T]",
                    "Iterable[T]"
                ],
                "subjects_indexes": [
                    "int",
                    "List[str]"
                ],
                "aggregate": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Iterable[T]",
                    "Iterable[T]"
                ]
            }
        },
        "FastSRM.__init__": {
            "name": "__init__",
            "location": 1310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atlas": [
                    "float",
                    "None",
                    "int",
                    "numpy.ndarray"
                ],
                "n_components": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "n_iter": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "temp_dir": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "low_ram": [
                    "bool"
                ],
                "seed": [
                    "float",
                    "None",
                    "int",
                    "numpy.ndarray"
                ],
                "n_jobs": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "verbose": [
                    "typing.Text",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "aggregate": [
                    "typing.Text",
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[numpy.ndarray]",
                    "int"
                ]
            }
        },
        "FastSRM.clean": {
            "name": "clean",
            "location": 1351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastSRM.fit": {
            "name": "fit",
            "location": 1366,
            "return": [
                "FastSRM"
            ],
            "arguments": {
                "self": [
                    "_TFastSRM"
                ],
                "imgs": [
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[List[T]]",
                    "list[list[T]]"
                ]
            }
        },
        "FastSRM.fit_transform": {
            "name": "fit_transform",
            "location": 1451,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "imgs": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "subjects_indexes": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FastSRM.transform": {
            "name": "transform",
            "location": 1496,
            "return": [
                "list[]",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "imgs": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "subjects_indexes": [
                    "int",
                    "None",
                    "bytes",
                    "list",
                    "numpy.array",
                    "list[]",
                    "Tuple[FrozenSet[int]]",
                    "tuple[frozenset]"
                ]
            }
        },
        "FastSRM.inverse_transform": {
            "name": "inverse_transform",
            "location": 1581,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "shared_response": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "subjects_indexes": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "sessions_indexes": [
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "FastSRM.add_subjects": {
            "name": "add_subjects",
            "location": 1664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "imgs": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "shared_response": [
                    "Optional[List[T]]",
                    "list[T]",
                    "set",
                    "None",
                    "set[]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/funcalign/rsrm.py": {
        "RSRM.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ],
                "features": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "rand_seed": [
                    "int"
                ]
            }
        },
        "RSRM.fit": {
            "name": "fit",
            "location": 114,
            "return": [
                "RSRM"
            ],
            "arguments": {
                "self": [
                    "_TRSRM"
                ],
                "X": []
            }
        },
        "RSRM.transform": {
            "name": "transform",
            "location": 157,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "RSRM._transform_new_data": {
            "name": "_transform_new_data",
            "location": 193,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "subject": []
            }
        },
        "RSRM.transform_subject": {
            "name": "transform_subject",
            "location": 222,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "RSRM._rsrm": {
            "name": "_rsrm",
            "location": 256,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "RSRM._init_transforms": {
            "name": "_init_transforms",
            "location": 304,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "subjs": [],
                "voxels": [],
                "features": [],
                "random_state": []
            }
        },
        "RSRM._objective_function": {
            "name": "_objective_function",
            "location": 346,
            "return": [
                "float"
            ],
            "arguments": {
                "X": [],
                "W": [],
                "R": [],
                "S": [],
                "gamma": []
            }
        },
        "RSRM._update_individual": {
            "name": "_update_individual",
            "location": 387,
            "return": [
                "list"
            ],
            "arguments": {
                "X": [],
                "W": [],
                "R": [],
                "gamma": []
            }
        },
        "RSRM._init_individual": {
            "name": "_init_individual",
            "location": 420,
            "return": [
                "list"
            ],
            "arguments": {
                "subjs": [],
                "voxels": [],
                "TRs": []
            }
        },
        "RSRM._update_shared_response": {
            "name": "_update_shared_response",
            "location": 445,
            "return": [
                "int"
            ],
            "arguments": {
                "X": [],
                "S": [],
                "W": [],
                "features": []
            }
        },
        "RSRM._update_transform_subject": {
            "name": "_update_transform_subject",
            "location": 481,
            "return": [],
            "arguments": {
                "Xi": [],
                "Si": [],
                "R": []
            }
        },
        "RSRM._update_transforms": {
            "name": "_update_transforms",
            "location": 509,
            "return": [
                "list"
            ],
            "arguments": {
                "X": [],
                "S": [],
                "R": []
            }
        },
        "RSRM._shrink": {
            "name": "_shrink",
            "location": 538,
            "return": [
                "_T0"
            ],
            "arguments": {
                "v": [
                    "_T0"
                ],
                "gamma": []
            }
        }
    },
    "brainiak-master/brainiak/funcalign/srm.py": {
        "_init_w_transforms": {
            "name": "_init_w_transforms",
            "location": 53,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "data": [],
                "features": [],
                "random_states": [],
                "comm": []
            }
        },
        "load": {
            "name": "load",
            "location": 109,
            "return": [
                "SRM"
            ],
            "arguments": {
                "file": []
            }
        },
        "SRM.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ],
                "features": [
                    "int"
                ],
                "rand_seed": [
                    "int"
                ],
                "comm": []
            }
        },
        "SRM.fit": {
            "name": "fit",
            "location": 217,
            "return": [
                "SRM"
            ],
            "arguments": {
                "self": [
                    "_TSRM"
                ],
                "X": [],
                "y": [
                    "None"
                ]
            }
        },
        "SRM.transform": {
            "name": "transform",
            "location": 270,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "None"
                ]
            }
        },
        "SRM._init_structures": {
            "name": "_init_structures",
            "location": 303,
            "return": [
                "Tuple[(list, list, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "subjects": []
            }
        },
        "SRM._likelihood": {
            "name": "_likelihood",
            "location": 349,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "chol_sigma_s_rhos": [],
                "log_det_psi": [],
                "chol_sigma_s": [],
                "trace_xt_invsigma2_x": [],
                "inv_sigma_s_rhos": [],
                "wt_invpsi_x": [],
                "samples": []
            }
        },
        "SRM._update_transform_subject": {
            "name": "_update_transform_subject",
            "location": 397,
            "return": [],
            "arguments": {
                "Xi": [],
                "S": []
            }
        },
        "SRM.transform_subject": {
            "name": "transform_subject",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "SRM.save": {
            "name": "save",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "SRM._srm": {
            "name": "_srm",
            "location": 482,
            "return": [
                "Tuple[(Any, list, list, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetSRM.__init__": {
            "name": "__init__",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ],
                "features": [
                    "int"
                ],
                "rand_seed": [
                    "int"
                ]
            }
        },
        "DetSRM.fit": {
            "name": "fit",
            "location": 680,
            "return": [
                "DetSRM"
            ],
            "arguments": {
                "self": [
                    "_TDetSRM"
                ],
                "X": [],
                "y": [
                    "None"
                ]
            }
        },
        "DetSRM.transform": {
            "name": "transform",
            "location": 717,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "None"
                ]
            }
        },
        "DetSRM._objective_function": {
            "name": "_objective_function",
            "location": 749,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "w": [],
                "s": []
            }
        },
        "DetSRM._compute_shared_response": {
            "name": "_compute_shared_response",
            "location": 778,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "w": []
            }
        },
        "DetSRM._update_transform_subject": {
            "name": "_update_transform_subject",
            "location": 804,
            "return": [],
            "arguments": {
                "Xi": [],
                "S": []
            }
        },
        "DetSRM.transform_subject": {
            "name": "transform_subject",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "DetSRM._srm": {
            "name": "_srm",
            "location": 856,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "brainiak-master/brainiak/funcalign/sssrm.py": {
        "SSSRM.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int",
                    "tuple"
                ],
                "features": [
                    "int",
                    "tuple"
                ],
                "gamma": [
                    "float",
                    "int",
                    "tuple"
                ],
                "alpha": [
                    "float",
                    "int",
                    "tuple"
                ],
                "rand_seed": [
                    "int",
                    "tuple"
                ]
            }
        },
        "SSSRM.fit": {
            "name": "fit",
            "location": 145,
            "return": [
                "SSSRM"
            ],
            "arguments": {
                "self": [
                    "_TSSSRM"
                ],
                "X": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "float"
                ],
                "y": [
                    "int",
                    "float",
                    "list",
                    "numpy.ndarray"
                ],
                "Z": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "List[int]",
                    "float"
                ]
            }
        },
        "SSSRM._init_classes": {
            "name": "_init_classes",
            "location": 216,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Optional[int]",
                    "int",
                    "Set[int]"
                ]
            }
        },
        "SSSRM.transform": {
            "name": "transform",
            "location": 241,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "numpy.array"
                ],
                "y": [
                    "bool",
                    "None",
                    "float",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "SSSRM.predict": {
            "name": "predict",
            "location": 276,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "list",
                    "raiden.utils.List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "SSSRM._sssrm": {
            "name": "_sssrm",
            "location": 311,
            "return": [
                "Tuple[(list, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data_align": [
                    "bytes",
                    "bool",
                    "int"
                ],
                "data_sup": [
                    "bytes",
                    "bool",
                    "List[Tuple[Any, Dict]]",
                    "list[tuple[typing.Union[typing.Any,dict[, ]]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "labels": [
                    "bytes",
                    "bool",
                    "List[Tuple[Any, Dict]]",
                    "list[tuple[typing.Union[typing.Any,dict[, ]]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "SSSRM._update_classifier": {
            "name": "_update_classifier",
            "location": 397,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "int",
                    "Tuple[str, str]",
                    "bytes",
                    "tuple[typing.Union[str,str]]"
                ],
                "labels": [
                    "float",
                    "int",
                    "Tuple[str, str]",
                    "bytes",
                    "tuple[typing.Union[str,str]]"
                ],
                "w": [
                    "tuple[typing.Union[str,str]]",
                    "bytes",
                    "float",
                    "Tuple[str, str]",
                    "int"
                ],
                "classes": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "SSSRM._update_w": {
            "name": "_update_w",
            "location": 467,
            "return": [
                "_T3"
            ],
            "arguments": {
                "self": [],
                "data_align": [
                    "List[str]",
                    "Union[str, bool, None]",
                    "numpy.ndarray",
                    "dict",
                    "List[Tuple[Any, Any]]",
                    "List[int]",
                    "Callable",
                    "List[bool]"
                ],
                "data_sup": [
                    "float",
                    "int",
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Mapping[str, str]]",
                    "bool",
                    "typing.Mapping"
                ],
                "labels": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "w": [
                    "_T3"
                ],
                "s": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Callable[[], int]",
                    "typing.Callable[[], int]",
                    "Union[int, float]",
                    "float"
                ],
                "theta": [
                    "bool",
                    "typing.Mapping",
                    "str",
                    "int",
                    "typing.Callable[[], int]",
                    "mode.utils.times.Seconds",
                    "Mapping[str, Any]",
                    "Callable[[], int]"
                ],
                "bias": [
                    "bool",
                    "typing.Mapping",
                    "str",
                    "int",
                    "mode.utils.times.Seconds",
                    "Mapping[str, Any]"
                ]
            }
        },
        "SSSRM._compute_shared_response": {
            "name": "_compute_shared_response",
            "location": 571,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]"
                ],
                "w": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "SSSRM._objective_function": {
            "name": "_objective_function",
            "location": 596,
            "return": [
                "str",
                "dict",
                "int",
                "float",
                "dict[, ]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "data_align": [
                    "numpy.ndarray",
                    "List[int]",
                    "List[Dict]",
                    "Sequence[T]"
                ],
                "data_sup": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "labels": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "w": [
                    "str",
                    "int",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Union[int, float]",
                    "float"
                ],
                "s": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "list[tuple[typing.Union[int,int]]]",
                    "float",
                    "List[Tuple[int, int]]",
                    "Union[int, float]"
                ],
                "theta": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "bias": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "SSSRM._objective_function_subject": {
            "name": "_objective_function_subject",
            "location": 652,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data_align": [
                    "bool",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "data_sup": [
                    "bool",
                    "float",
                    "int"
                ],
                "labels": [
                    "bool",
                    "float",
                    "int"
                ],
                "w": [
                    "float",
                    "int",
                    "Optional[numpy.ndarray]",
                    "Union[int, float]",
                    "List[float]"
                ],
                "s": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Union[int, float]",
                    "float"
                ],
                "theta": [
                    "bool",
                    "float",
                    "int"
                ],
                "bias": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "SSSRM._loss_lr_subject": {
            "name": "_loss_lr_subject",
            "location": 703,
            "return": [
                "float",
                "Optional[int]",
                "int",
                "trezor.utils.Writer",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "labels": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Iterable[bytes]",
                    "bytes",
                    "typing.Iterable[bytes]",
                    "vimiv.utils.trie.Trie",
                    "typing.Callable[, ]",
                    "dict",
                    "Optional[Callable]"
                ],
                "w": [
                    "bytes",
                    "str"
                ],
                "theta": [
                    "bytes",
                    "str"
                ],
                "bias": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SSSRM._loss_lr": {
            "name": "_loss_lr",
            "location": 745,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "labels": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Iterable[Callable]",
                    "typing.Iterable[typing.Callable[, ]]"
                ],
                "w": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "int",
                    "Callable[[bytes], bytes]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "theta": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "int",
                    "Callable[[bytes], bytes]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "bias": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "int",
                    "Callable[[bytes], bytes]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ]
            }
        },
        "SSSRM._stack_list": {
            "name": "_stack_list",
            "location": 785,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "Optional[int]"
                ],
                "data_labels": [
                    "bool",
                    "int"
                ],
                "w": [
                    "dict[, ]",
                    "numpy.ndarray",
                    "list[]",
                    "T",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "brainiak-master/brainiak/funcalign/__init__.py": {},
    "brainiak-master/brainiak/hyperparamopt/hpo.py": {
        "get_sigma": {
            "name": "get_sigma",
            "location": 46,
            "return": [],
            "arguments": {
                "x": [],
                "min_limit": [],
                "max_limit": []
            }
        },
        "get_next_sample": {
            "name": "get_next_sample",
            "location": 219,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "min_limit": [],
                "max_limit": []
            }
        },
        "fmin": {
            "name": "fmin",
            "location": 283,
            "return": [],
            "arguments": {
                "loss_fn": [],
                "space": [],
                "max_evals": [],
                "trials": [],
                "init_random_evals": [
                    "int"
                ],
                "explore_prob": [
                    "float"
                ]
            }
        },
        "gmm_1d_distribution.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "min_limit": [],
                "max_limit": [],
                "weights": [
                    "float"
                ]
            }
        },
        "gmm_1d_distribution.get_gmm_pdf": {
            "name": "get_gmm_pdf",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "gmm_1d_distribution.__call__": {
            "name": "__call__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "gmm_1d_distribution.get_samples": {
            "name": "get_samples",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "gmm_1d_distribution.get_gmm_pdf.my_norm_pdf": {
            "name": "my_norm_pdf",
            "location": 145,
            "return": [],
            "arguments": {
                "xt": [],
                "mu": [],
                "sigma": []
            }
        }
    },
    "brainiak-master/brainiak/hyperparamopt/__init__.py": {},
    "brainiak-master/brainiak/matnormal/covs.py": {
        "CovBase.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "CovBase.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovBase.logdet": {
            "name": "logdet",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovBase.solve": {
            "name": "solve",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CovBase._prec": {
            "name": "_prec",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovBase._cov": {
            "name": "_cov",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovIdentity.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "CovIdentity.logdet": {
            "name": "logdet",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovIdentity.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 100,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovIdentity.solve": {
            "name": "solve",
            "location": 106,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_T0"
                ]
            }
        },
        "CovIdentity._prec": {
            "name": "_prec",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovIdentity._cov": {
            "name": "_cov",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovAR1.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "rho": [
                    "None"
                ],
                "sigma": [
                    "None"
                ],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "CovAR1.logdet": {
            "name": "logdet",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovAR1._prec": {
            "name": "_prec",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovAR1.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 221,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovAR1.solve": {
            "name": "solve",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CovIsotropic.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "var": [
                    "None"
                ]
            }
        },
        "CovIsotropic.logdet": {
            "name": "logdet",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovIsotropic.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 260,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovIsotropic.solve": {
            "name": "solve",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CovDiagonal.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "diag_var": [
                    "None"
                ]
            }
        },
        "CovDiagonal.logdet": {
            "name": "logdet",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovDiagonal.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 306,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovDiagonal.solve": {
            "name": "solve",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CovDiagonalGammaPrior.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "sigma": [
                    "None"
                ],
                "alpha": [
                    "float"
                ],
                "beta": [
                    "float"
                ]
            }
        },
        "CovUnconstrainedCholesky.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "Sigma": [
                    "None"
                ]
            }
        },
        "CovUnconstrainedCholesky.L": {
            "name": "L",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovUnconstrainedCholesky.logdet": {
            "name": "logdet",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovUnconstrainedCholesky.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 387,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovUnconstrainedCholesky.solve": {
            "name": "solve",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CovUnconstrainedCholeskyWishartReg.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "Sigma": [
                    "None"
                ]
            }
        },
        "CovUnconstrainedInvCholesky.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "invSigma": [
                    "None"
                ]
            }
        },
        "CovUnconstrainedInvCholesky.Linv": {
            "name": "Linv",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovUnconstrainedInvCholesky.logdet": {
            "name": "logdet",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CovUnconstrainedInvCholesky.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 480,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovUnconstrainedInvCholesky.solve": {
            "name": "solve",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CovKroneckerFactored.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sizes": [],
                "Sigmas": [
                    "None"
                ],
                "mask": [
                    "None"
                ]
            }
        },
        "CovKroneckerFactored.L": {
            "name": "L",
            "location": 556,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovKroneckerFactored.get_optimize_vars": {
            "name": "get_optimize_vars",
            "location": 559,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovKroneckerFactored.logdet": {
            "name": "logdet",
            "location": 566,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CovKroneckerFactored.solve": {
            "name": "solve",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        }
    },
    "brainiak-master/brainiak/matnormal/matnormal_likelihoods.py": {
        "_condition": {
            "name": "_condition",
            "location": 9,
            "return": [
                "Callable",
                "str",
                "trezor.utils.Writer",
                "list"
            ],
            "arguments": {
                "X": [
                    "bool",
                    "list[int]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "solve_det_marginal": {
            "name": "solve_det_marginal",
            "location": 27,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Optional[Union[int, slice]]",
                    "str",
                    "None"
                ],
                "sigma": [
                    "str",
                    "bool",
                    "type",
                    "int"
                ],
                "A": [
                    "str",
                    "bool",
                    "typing.Type",
                    "type",
                    "int"
                ],
                "Q": [
                    "str",
                    "bool",
                    "typing.Type",
                    "type",
                    "int"
                ]
            }
        },
        "solve_det_conditional": {
            "name": "solve_det_conditional",
            "location": 110,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Optional[Union[int, slice]]",
                    "str",
                    "None"
                ],
                "sigma": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float]"
                ],
                "A": [
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "Q": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "_mnorm_logp_internal": {
            "name": "_mnorm_logp_internal",
            "location": 164,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "colsize": [
                    "bool"
                ],
                "rowsize": [
                    "bool"
                ],
                "logdet_row": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "logdet_col": [
                    "str",
                    "int",
                    "float",
                    "raiden.utils.BlockNumber",
                    "Union[float, str]"
                ],
                "solve_row": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "solve_col": [
                    "str",
                    "int",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "matnorm_logp": {
            "name": "matnorm_logp",
            "location": 202,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "Union[float, str]",
                    "str"
                ],
                "row_cov": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "col_cov": [
                    "int",
                    "float",
                    "Union[float, str]",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "matnorm_logp_marginal_row": {
            "name": "matnorm_logp_marginal_row",
            "location": 233,
            "return": [
                "int",
                "utils.diskstaSection",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ],
                "row_cov": [
                    "int"
                ],
                "col_cov": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Union[float, str]",
                    "str"
                ],
                "marg": [
                    "int"
                ],
                "marg_cov": [
                    "int"
                ]
            }
        },
        "matnorm_logp_marginal_col": {
            "name": "matnorm_logp_marginal_col",
            "location": 274,
            "return": [
                "bool",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ],
                "row_cov": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "col_cov": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "marg": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "marg_cov": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "matnorm_logp_conditional_row": {
            "name": "matnorm_logp_conditional_row",
            "location": 318,
            "return": [
                "int",
                "utils.diskstaSection",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ],
                "row_cov": [
                    "int"
                ],
                "col_cov": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Union[float, str]",
                    "str"
                ],
                "cond": [
                    "int"
                ],
                "cond_cov": [
                    "int"
                ]
            }
        },
        "matnorm_logp_conditional_col": {
            "name": "matnorm_logp_conditional_col",
            "location": 375,
            "return": [
                "bool",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ],
                "row_cov": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "col_cov": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "cond": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "cond_cov": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/matnormal/mnrsa.py": {
        "MNRSA.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_cov": [
                    "int"
                ],
                "space_cov": [
                    "int",
                    "float",
                    "list",
                    "list[]"
                ],
                "n_nureg": [
                    "int",
                    "Optional[int]",
                    "list",
                    "List[int]",
                    "bool"
                ],
                "optimizer": [
                    "typing.Text",
                    "int",
                    "bool"
                ],
                "optCtrl": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "float",
                    "Optional[numpy.ndarray]",
                    "list[int]",
                    "Optional[float]",
                    "List[int]"
                ]
            }
        },
        "MNRSA.L": {
            "name": "L",
            "location": 90,
            "return": [
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNRSA.fit": {
            "name": "fit",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]",
                    "typing.Iterable[int]",
                    "float",
                    "typing.Iterable[float]",
                    "Iterable[int]",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]"
                ],
                "y": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]",
                    "typing.Iterable[int]",
                    "float",
                    "typing.Iterable[float]",
                    "Iterable[int]",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]"
                ],
                "naive_init": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]",
                    "Iterable[int]",
                    "Iterable[float]",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]"
                ]
            }
        },
        "MNRSA.logp": {
            "name": "logp",
            "location": 159,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "Y": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "MNRSA.fit.lossfn": {
            "name": "lossfn",
            "location": 143,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "brainiak-master/brainiak/matnormal/regression.py": {
        "MatnormalRegression.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_cov": [
                    "int",
                    "float",
                    "str"
                ],
                "space_cov": [
                    "int",
                    "float"
                ],
                "optimizer": [
                    "typing.Text",
                    "int",
                    "float"
                ],
                "optCtrl": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[bool]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MatnormalRegression.logp": {
            "name": "logp",
            "location": 49,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "Y": [
                    "float",
                    "str"
                ]
            }
        },
        "MatnormalRegression.fit": {
            "name": "fit",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]",
                    "typing.Iterable[int]",
                    "float",
                    "typing.Iterable[float]",
                    "Iterable[int]",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]"
                ],
                "y": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]",
                    "typing.Iterable[int]",
                    "float",
                    "typing.Iterable[float]",
                    "Iterable[int]",
                    "typing.Iterable[typing.Iterable[float]]",
                    "Iterable[float]",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]"
                ],
                "naive_init": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]",
                    "Iterable[int]",
                    "Iterable[float]",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]"
                ]
            }
        },
        "MatnormalRegression.predict": {
            "name": "predict",
            "location": 106,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "MatnormalRegression.calibrate": {
            "name": "calibrate",
            "location": 118,
            "return": [
                "bool",
                "dict",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "Y": [
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "set[str]",
                    "Set[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "MatnormalRegression.fit.lossfn": {
            "name": "lossfn",
            "location": 87,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "brainiak-master/brainiak/matnormal/utils.py": {
        "rmn": {
            "name": "rmn",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rowcov": [
                    "int",
                    "str",
                    "bool",
                    "Union[numpy.ndarray, xarray.DataArray]"
                ],
                "colcov": [
                    "int",
                    "str",
                    "bool",
                    "Union[numpy.ndarray, xarray.DataArray]"
                ]
            }
        },
        "xx_t": {
            "name": "xx_t",
            "location": 24,
            "return": [
                "int",
                "str",
                "List[int]",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "list",
                    "list[]",
                    "int",
                    "Union[int, str]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "x_tx": {
            "name": "x_tx",
            "location": 37,
            "return": [
                "numpy.ndarray",
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "scaled_I": {
            "name": "scaled_I",
            "location": 49,
            "return": [
                "int",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool"
                ],
                "size": [
                    "int",
                    "bool"
                ]
            }
        },
        "flatten_cholesky_unique": {
            "name": "flatten_cholesky_unique",
            "location": 63,
            "return": [
                "List[str]",
                "dict[str, int]",
                "dict",
                "list[str]",
                "Union[List, Dict]",
                "list[]",
                "str",
                "list[list[int]]",
                "List[Mapping[str, Any]]",
                "typing.KeysView",
                "list[int]"
            ],
            "arguments": {
                "L": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "unflatten_cholesky_unique": {
            "name": "unflatten_cholesky_unique",
            "location": 74,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Union[List, Dict]",
                "str",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "L_flat": [
                    "str",
                    "list",
                    "list[]",
                    "float",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "pack_trainable_vars": {
            "name": "pack_trainable_vars",
            "location": 86,
            "return": [
                "List[int]",
                "int",
                "Tuple[Tuple[int, Any]]",
                "List[T]",
                "list"
            ],
            "arguments": {
                "trainable_vars": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "unpack_trainable_vars": {
            "name": "unpack_trainable_vars",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "trainable_vars": [
                    "Match",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "make_val_and_grad": {
            "name": "make_val_and_grad",
            "location": 107,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "lossfn": [
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "train_vars": [
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "make_val_and_grad.val_and_grad": {
            "name": "val_and_grad",
            "location": 113,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": []
            }
        }
    },
    "brainiak-master/brainiak/matnormal/__init__.py": {},
    "brainiak-master/brainiak/reconstruct/iem.py": {
        "InvertedEncoding1D.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_channels": [
                    "int"
                ],
                "channel_exp": [
                    "int"
                ],
                "stimulus_mode": [
                    "typing.Text"
                ],
                "range_start": [
                    "float"
                ],
                "range_stop": [
                    "float"
                ],
                "channel_density": [
                    "int"
                ],
                "stimulus_resolution": [
                    "None"
                ]
            }
        },
        "InvertedEncoding1D._check_params": {
            "name": "_check_params",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvertedEncoding1D.fit": {
            "name": "fit",
            "location": 211,
            "return": [
                "InvertedEncoding1D"
            ],
            "arguments": {
                "self": [
                    "_TInvertedEncoding1D"
                ],
                "X": [],
                "y": []
            }
        },
        "InvertedEncoding1D.predict": {
            "name": "predict",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding1D.score": {
            "name": "score",
            "location": 279,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "InvertedEncoding1D.get_params": {
            "name": "get_params",
            "location": 309,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ]
            }
        },
        "InvertedEncoding1D.set_params": {
            "name": "set_params",
            "location": 322,
            "return": [
                "InvertedEncoding1D"
            ],
            "arguments": {
                "self": [
                    "_TInvertedEncoding1D"
                ]
            }
        },
        "InvertedEncoding1D._define_channels": {
            "name": "_define_channels",
            "location": 338,
            "return": [
                "Tuple[(np.ndarray, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvertedEncoding1D._define_trial_activations": {
            "name": "_define_trial_activations",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "stimuli": []
            }
        },
        "InvertedEncoding1D._predict_channel_responses": {
            "name": "_predict_channel_responses",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding1D._predict_feature_responses": {
            "name": "_predict_feature_responses",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding1D._predict_features": {
            "name": "_predict_features",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding2D.__init__": {
            "name": "__init__",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stim_xlim": [],
                "stim_ylim": [],
                "stimulus_resolution": [],
                "stim_radius": [
                    "None"
                ],
                "chan_xlim": [
                    "None"
                ],
                "chan_ylim": [
                    "None"
                ],
                "channels": [
                    "None"
                ],
                "channel_exp": [
                    "int"
                ]
            }
        },
        "InvertedEncoding2D._check_params": {
            "name": "_check_params",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvertedEncoding2D.fit": {
            "name": "fit",
            "location": 667,
            "return": [
                "InvertedEncoding2D"
            ],
            "arguments": {
                "self": [
                    "_TInvertedEncoding2D"
                ],
                "X": [],
                "y": [],
                "C": [
                    "None"
                ]
            }
        },
        "InvertedEncoding2D.predict": {
            "name": "predict",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding2D.score": {
            "name": "score",
            "location": 734,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "InvertedEncoding2D.score_against_reconstructed": {
            "name": "score_against_reconstructed",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "metric": [
                    "typing.Text"
                ]
            }
        },
        "InvertedEncoding2D.get_params": {
            "name": "get_params",
            "location": 788,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ]
            }
        },
        "InvertedEncoding2D.set_params": {
            "name": "set_params",
            "location": 801,
            "return": [
                "InvertedEncoding2D"
            ],
            "arguments": {
                "self": [
                    "_TInvertedEncoding2D"
                ]
            }
        },
        "InvertedEncoding2D._make_2d_cosine": {
            "name": "_make_2d_cosine",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "x_center": [],
                "y_center": [],
                "s": []
            }
        },
        "InvertedEncoding2D._2d_cosine_sz_to_fwhm": {
            "name": "_2d_cosine_sz_to_fwhm",
            "location": 844,
            "return": [],
            "arguments": {
                "self": [],
                "size_constant": []
            }
        },
        "InvertedEncoding2D._2d_cosine_fwhm_to_sz": {
            "name": "_2d_cosine_fwhm_to_sz",
            "location": 849,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "fwhm": []
            }
        },
        "InvertedEncoding2D.define_basis_functions_sqgrid": {
            "name": "define_basis_functions_sqgrid",
            "location": 870,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "nchannels": [],
                "channel_size": [
                    "None"
                ]
            }
        },
        "InvertedEncoding2D.define_basis_functions_trigrid": {
            "name": "define_basis_functions_trigrid",
            "location": 911,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "grid_radius": [],
                "channel_size": [
                    "None"
                ]
            }
        },
        "InvertedEncoding2D._define_trial_activations": {
            "name": "_define_trial_activations",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "stim_centers": [],
                "stim_radius": [
                    "None"
                ]
            }
        },
        "InvertedEncoding2D._predict_channel_responses": {
            "name": "_predict_channel_responses",
            "location": 997,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding2D.predict_feature_responses": {
            "name": "predict_feature_responses",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "InvertedEncoding2D._predict_features": {
            "name": "_predict_features",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        }
    },
    "brainiak-master/brainiak/reconstruct/__init__.py": {},
    "brainiak-master/brainiak/reprsimil/brsa.py": {
        "prior_GP_var_inv_gamma": {
            "name": "prior_GP_var_inv_gamma",
            "location": 70,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "y_invK_y": [],
                "n_y": [],
                "tau_range": []
            }
        },
        "prior_GP_var_half_cauchy": {
            "name": "prior_GP_var_half_cauchy",
            "location": 132,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "y_invK_y": [],
                "n_y": [],
                "tau_range": []
            }
        },
        "Ncomp_SVHT_MG_DLD_approx": {
            "name": "Ncomp_SVHT_MG_DLD_approx",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "X": [],
                "zscore": [
                    "bool"
                ]
            }
        },
        "_zscore": {
            "name": "_zscore",
            "location": 198,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "BRSA.__init__": {
            "name": "__init__",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ],
                "rank": [
                    "None"
                ],
                "auto_nuisance": [
                    "bool"
                ],
                "n_nureg": [
                    "None"
                ],
                "nureg_zscore": [
                    "bool"
                ],
                "nureg_method": [
                    "typing.Text"
                ],
                "baseline_single": [
                    "bool"
                ],
                "GP_space": [
                    "bool"
                ],
                "GP_inten": [
                    "bool"
                ],
                "space_smooth_range": [
                    "None"
                ],
                "inten_smooth_range": [
                    "None"
                ],
                "tau_range": [
                    "float"
                ],
                "tau2_prior": [],
                "eta": [
                    "float"
                ],
                "init_iter": [
                    "int"
                ],
                "optimizer": [
                    "typing.Text"
                ],
                "random_state": [
                    "None"
                ],
                "anneal_speed": [
                    "int"
                ],
                "tol": [
                    "float"
                ],
                "minimize_options": [
                    "dict[typing.Text, typing.Union[float,bool]]"
                ]
            }
        },
        "BRSA.fit": {
            "name": "fit",
            "location": 581,
            "return": [
                "BRSA"
            ],
            "arguments": {
                "self": [
                    "_TBRSA"
                ],
                "X": [],
                "design": [],
                "nuisance": [
                    "None"
                ],
                "scan_onsets": [
                    "None"
                ],
                "coords": [
                    "None"
                ],
                "inten": [
                    "None"
                ]
            }
        },
        "BRSA.transform": {
            "name": "transform",
            "location": 793,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "None"
                ],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "BRSA.score": {
            "name": "score",
            "location": 852,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "design": [],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "BRSA._D_gen": {
            "name": "_D_gen",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "TR": []
            }
        },
        "BRSA._F_gen": {
            "name": "_F_gen",
            "location": 960,
            "return": [],
            "arguments": {
                "self": [],
                "TR": []
            }
        },
        "BRSA._run_TR_from_scan_onsets": {
            "name": "_run_TR_from_scan_onsets",
            "location": 969,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "n_T": [],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "BRSA._prepare_DF": {
            "name": "_prepare_DF",
            "location": 988,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "n_T": [],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "BRSA._prepare_data_XY": {
            "name": "_prepare_data_XY",
            "location": 1003,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "Y": [],
                "D": [],
                "F": []
            }
        },
        "BRSA._gen_X_DC": {
            "name": "_gen_X_DC",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "run_TRs": []
            }
        },
        "BRSA._gen_legendre": {
            "name": "_gen_legendre",
            "location": 1031,
            "return": [],
            "arguments": {
                "self": [],
                "run_TRs": [],
                "orders": []
            }
        },
        "BRSA._prepare_data_XYX0": {
            "name": "_prepare_data_XYX0",
            "location": 1040,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "Y": [],
                "X_base": [],
                "X_res": [],
                "D": [],
                "F": [],
                "run_TRs": [],
                "no_DC": [
                    "bool"
                ]
            }
        },
        "BRSA._merge_DC_to_base": {
            "name": "_merge_DC_to_base",
            "location": 1071,
            "return": [
                "Tuple[(_T0, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X_DC": [
                    "_T0"
                ],
                "X_base": [],
                "no_DC": []
            }
        },
        "BRSA._make_ar1_quad_form": {
            "name": "_make_ar1_quad_form",
            "location": 1106,
            "return": [],
            "arguments": {
                "self": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "rho1": []
            }
        },
        "BRSA._make_ar1_quad_form_grad": {
            "name": "_make_ar1_quad_form_grad",
            "location": 1116,
            "return": [],
            "arguments": {
                "self": [],
                "XTDX": [],
                "XTFX": [],
                "rho1": []
            }
        },
        "BRSA._make_templates": {
            "name": "_make_templates",
            "location": 1122,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "D": [],
                "F": [],
                "X": [],
                "Y": []
            }
        },
        "BRSA._precompute_ar1_quad_forms": {
            "name": "_precompute_ar1_quad_forms",
            "location": 1128,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "X0TX0": [],
                "X0TDX0": [],
                "X0TFX0": [],
                "XTX0": [],
                "XTDX0": [],
                "XTFX0": [],
                "X0TY": [],
                "X0TDY": [],
                "X0TFY": [],
                "L": [],
                "rho1": [],
                "n_V": [],
                "n_X0": []
            }
        },
        "BRSA._calc_LL": {
            "name": "_calc_LL",
            "location": 1183,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "rho1": [],
                "LTXTAcorrXL": [],
                "LTXTAcorrY": [],
                "YTAcorrY": [],
                "X0TAX0": [],
                "SNR2": [],
                "n_V": [],
                "n_T": [],
                "n_run": [],
                "rank": [],
                "n_X0": []
            }
        },
        "BRSA._calc_dist2_GP": {
            "name": "_calc_dist2_GP",
            "location": 1212,
            "return": [
                "Tuple[(Any, Any, Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "coords": [
                    "None"
                ],
                "inten": [],
                "GP_space": [
                    "bool"
                ],
                "GP_inten": [
                    "bool"
                ]
            }
        },
        "BRSA._build_index_param": {
            "name": "_build_index_param",
            "location": 1256,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "n_l": [],
                "n_V": [],
                "n_smooth": []
            }
        },
        "BRSA._half_log_det": {
            "name": "_half_log_det",
            "location": 1272,
            "return": [],
            "arguments": {
                "self": [],
                "M": []
            }
        },
        "BRSA._chol_idx": {
            "name": "_chol_idx",
            "location": 1285,
            "return": [
                "Tuple[(Any, Union[(_T0, _T1)])]"
            ],
            "arguments": {
                "self": [],
                "n_C": [
                    "_T0"
                ],
                "rank": [
                    "_T1"
                ]
            }
        },
        "BRSA._fit_RSA_UV": {
            "name": "_fit_RSA_UV",
            "location": 1309,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "Y": [],
                "X_base": [],
                "scan_onsets": [
                    "None"
                ],
                "coords": [
                    "None"
                ],
                "inten": [
                    "None"
                ]
            }
        },
        "BRSA._transform": {
            "name": "_transform",
            "location": 1530,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "Y": [],
                "scan_onsets": [],
                "beta": [],
                "beta0": [],
                "rho_e": [],
                "sigma_e": [],
                "rho_X": [],
                "sigma2_X": [],
                "rho_X0": [],
                "sigma2_X0": []
            }
        },
        "BRSA._score": {
            "name": "_score",
            "location": 1583,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "Y": [],
                "design": [],
                "beta": [],
                "scan_onsets": [],
                "beta0": [],
                "rho_e": [],
                "sigma_e": [],
                "rho_X0": [],
                "sigma2_X0": []
            }
        },
        "BRSA._est_AR1": {
            "name": "_est_AR1",
            "location": 1632,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "same_para": [
                    "bool"
                ]
            }
        },
        "BRSA._forward_step": {
            "name": "_forward_step",
            "location": 1659,
            "return": [
                "Tuple[(list, list, list, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "Y": [],
                "T_X": [],
                "Var_X": [],
                "Var_dX": [],
                "rho_e": [],
                "sigma2_e": [],
                "weight": []
            }
        },
        "BRSA._backward_step": {
            "name": "_backward_step",
            "location": 1740,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "self": [],
                "deltaY": [],
                "deltaY_sigma2inv_rho_weightT": [],
                "sigma2_e": [],
                "weight": [],
                "mu": [],
                "mu_Gamma_inv": [],
                "Gamma_inv": [],
                "Lambda_0": [],
                "Lambda_1": [],
                "H": []
            }
        },
        "BRSA._initial_fit_singpara": {
            "name": "_initial_fit_singpara",
            "location": 1772,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "X0TX0": [],
                "X0TDX0": [],
                "X0TFX0": [],
                "XTX0": [],
                "XTDX0": [],
                "XTFX0": [],
                "X0TY": [],
                "X0TDY": [],
                "X0TFY": [],
                "X": [],
                "Y": [],
                "X0": [],
                "idx_param_sing": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_l": [],
                "n_run": [],
                "n_X0": [],
                "rank": []
            }
        },
        "BRSA._fit_diagV_noGP": {
            "name": "_fit_diagV_noGP",
            "location": 1849,
            "return": [
                "Tuple[(Any, Any, _T18, Any)]"
            ],
            "arguments": {
                "self": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "X": [],
                "Y": [],
                "X_base": [],
                "X_res": [],
                "D": [],
                "F": [],
                "run_TRs": [],
                "current_vec_U_chlsk_l": [],
                "current_a1": [],
                "current_logSNR2": [
                    "18"
                ],
                "idx_param_fitU": [],
                "idx_param_fitV": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_l": [],
                "n_run": [],
                "n_X0": [],
                "rank": []
            }
        },
        "BRSA._fit_diagV_GP": {
            "name": "_fit_diagV_GP",
            "location": 1976,
            "return": [
                "Tuple[(Any, Any, _T18, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "X": [],
                "Y": [],
                "X_base": [],
                "X_res": [],
                "D": [],
                "F": [],
                "run_TRs": [],
                "current_vec_U_chlsk_l": [],
                "current_a1": [],
                "current_logSNR2": [
                    "18"
                ],
                "current_GP": [],
                "n_smooth": [],
                "idx_param_fitU": [],
                "idx_param_fitV": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_l": [],
                "n_run": [],
                "n_X0": [],
                "rank": [],
                "GP_space": [],
                "GP_inten": [],
                "dist2": [],
                "inten_diff2": [],
                "space_smooth_range": [],
                "inten_smooth_range": []
            }
        },
        "BRSA._fit_null": {
            "name": "_fit_null",
            "location": 2115,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "Y": [],
                "X_base": [],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "BRSA._loglike_AR1_diagV_fitU": {
            "name": "_loglike_AR1_diagV_fitU",
            "location": 2209,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "param": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "X0TX0": [],
                "X0TDX0": [],
                "X0TFX0": [],
                "XTX0": [],
                "XTDX0": [],
                "XTFX0": [],
                "X0TY": [],
                "X0TDY": [],
                "X0TFY": [],
                "log_SNR2": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_run": [],
                "n_X0": [],
                "idx_param_fitU": [],
                "rank": []
            }
        },
        "BRSA._loglike_AR1_diagV_fitV": {
            "name": "_loglike_AR1_diagV_fitV",
            "location": 2354,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "param": [],
                "X0TAX0": [],
                "XTAX0": [],
                "X0TAY": [],
                "X0TAX0_i": [],
                "XTAcorrX": [],
                "XTAcorrY": [],
                "YTAcorrY": [],
                "LTXTAcorrY": [],
                "XTAcorrXL": [],
                "LTXTAcorrXL": [],
                "L_l": [],
                "a1": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_run": [],
                "n_X0": [],
                "idx_param_fitV": [],
                "rank": [
                    "None"
                ],
                "GP_space": [
                    "bool"
                ],
                "GP_inten": [
                    "bool"
                ],
                "dist2": [],
                "inten_dist2": [
                    "None"
                ],
                "space_smooth_range": [],
                "inten_smooth_range": []
            }
        },
        "BRSA._loglike_AR1_singpara": {
            "name": "_loglike_AR1_singpara",
            "location": 2523,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "param": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "X0TX0": [],
                "X0TDX0": [],
                "X0TFX0": [],
                "XTX0": [],
                "XTDX0": [],
                "XTFX0": [],
                "X0TY": [],
                "X0TDY": [],
                "X0TFY": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_run": [],
                "n_X0": [],
                "idx_param_sing": [],
                "rank": [
                    "None"
                ]
            }
        },
        "BRSA._loglike_AR1_null": {
            "name": "_loglike_AR1_null",
            "location": 2628,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "param": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "X0TX0": [],
                "X0TDX0": [],
                "X0TFX0": [],
                "X0TY": [],
                "X0TDY": [],
                "X0TFY": [],
                "n_T": [],
                "n_V": [],
                "n_run": [],
                "n_X0": []
            }
        },
        "GBRSA.__init__": {
            "name": "__init__",
            "location": 2967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ],
                "rank": [
                    "None"
                ],
                "auto_nuisance": [
                    "bool"
                ],
                "n_nureg": [
                    "None"
                ],
                "nureg_zscore": [
                    "bool"
                ],
                "nureg_method": [
                    "typing.Text"
                ],
                "baseline_single": [
                    "bool"
                ],
                "logS_range": [
                    "float"
                ],
                "SNR_prior": [
                    "typing.Text"
                ],
                "SNR_bins": [
                    "int"
                ],
                "rho_bins": [
                    "int"
                ],
                "tol": [
                    "float"
                ],
                "optimizer": [
                    "typing.Text"
                ],
                "minimize_options": [
                    "dict[typing.Text, typing.Union[float,bool]]"
                ],
                "random_state": [
                    "None"
                ],
                "anneal_speed": [
                    "int"
                ]
            }
        },
        "GBRSA.fit": {
            "name": "fit",
            "location": 3024,
            "return": [
                "GBRSA"
            ],
            "arguments": {
                "self": [
                    "_TGBRSA"
                ],
                "X": [],
                "design": [],
                "nuisance": [
                    "None"
                ],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "GBRSA.transform": {
            "name": "transform",
            "location": 3184,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "None"
                ],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "GBRSA.score": {
            "name": "score",
            "location": 3245,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "design": [],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "GBRSA._precompute_ar1_quad_forms_marginalized": {
            "name": "_precompute_ar1_quad_forms_marginalized",
            "location": 3333,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "XTY": [],
                "XTDY": [],
                "XTFY": [],
                "YTY_diag": [],
                "YTDY_diag": [],
                "YTFY_diag": [],
                "XTX": [],
                "XTDX": [],
                "XTFX": [],
                "X0TX0": [],
                "X0TDX0": [],
                "X0TFX0": [],
                "XTX0": [],
                "XTDX0": [],
                "XTFX0": [],
                "X0TY": [],
                "X0TDY": [],
                "X0TFY": [],
                "rho1": [],
                "n_V": [],
                "n_X0": []
            }
        },
        "GBRSA._fit_RSA_marginalized": {
            "name": "_fit_RSA_marginalized",
            "location": 3384,
            "return": [
                "Tuple[(Any, Any, list, list, list, list, list, list, Any)]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "Y": [],
                "X_base": [],
                "scan_onsets": [
                    "None"
                ]
            }
        },
        "GBRSA._fit_RSA_marginalized_null": {
            "name": "_fit_RSA_marginalized_null",
            "location": 3667,
            "return": [
                "Tuple[(list, list, list, list, Any)]"
            ],
            "arguments": {
                "self": [],
                "Y": [],
                "X_base": [],
                "scan_onsets": []
            }
        },
        "GBRSA._raw_loglike_grids": {
            "name": "_raw_loglike_grids",
            "location": 3809,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "L": [],
                "s2XTAcorrX": [],
                "YTAcorrY_diag": [],
                "sXTAcorrY": [],
                "half_log_det_X0TAX0": [],
                "log_weights": [],
                "log_fixed_terms": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_X0": [],
                "n_grid": [],
                "rank": []
            }
        },
        "GBRSA._sum_loglike_marginalized": {
            "name": "_sum_loglike_marginalized",
            "location": 3858,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "L_vec": [],
                "s2XTAcorrX": [],
                "YTAcorrY_diag": [],
                "sXTAcorrY": [],
                "half_log_det_X0TAX0": [],
                "log_weights": [],
                "log_fixed_terms": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_X0": [],
                "n_grid": [],
                "rank": [
                    "None"
                ]
            }
        },
        "GBRSA._loglike_marginalized": {
            "name": "_loglike_marginalized",
            "location": 3875,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "L_vec": [],
                "s2XTAcorrX": [],
                "YTAcorrY_diag": [],
                "sXTAcorrY": [],
                "half_log_det_X0TAX0": [],
                "log_weights": [],
                "log_fixed_terms": [],
                "l_idx": [],
                "n_C": [],
                "n_T": [],
                "n_V": [],
                "n_X0": [],
                "n_grid": [],
                "rank": [
                    "None"
                ]
            }
        },
        "GBRSA._check_data_GBRSA": {
            "name": "_check_data_GBRSA",
            "location": 3944,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_T0"
                ],
                "for_fit": [
                    "bool"
                ]
            }
        },
        "GBRSA._check_design_GBRSA": {
            "name": "_check_design_GBRSA",
            "location": 3972,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "self": [],
                "design": [
                    "_T0"
                ],
                "X": []
            }
        },
        "GBRSA._check_nuisance_GBRSA": {
            "name": "_check_nuisance_GBRSA",
            "location": 4018,
            "return": [
                "Union[(List[Optional[_T0]], _T0)]"
            ],
            "arguments": {
                "sef": [
                    "GBRSA"
                ],
                "nuisance": [
                    "_T0"
                ],
                "X": []
            }
        },
        "GBRSA._check_scan_onsets_GBRSA": {
            "name": "_check_scan_onsets_GBRSA",
            "location": 4054,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "scan_onsets": [
                    "_T0"
                ],
                "X": []
            }
        },
        "GBRSA._bin_exp": {
            "name": "_bin_exp",
            "location": 4082,
            "return": [],
            "arguments": {
                "self": [],
                "n_bin": [],
                "scale": [
                    "float"
                ]
            }
        },
        "GBRSA._set_SNR_grids": {
            "name": "_set_SNR_grids",
            "location": 4114,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBRSA._set_rho_grids": {
            "name": "_set_rho_grids",
            "location": 4150,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBRSA._matrix_flattened_grid": {
            "name": "_matrix_flattened_grid",
            "location": 4159,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "X0TAX0": [],
                "X0TAX0_i": [],
                "SNR_grids": [],
                "XTAcorrX": [],
                "YTAcorrY_diag": [],
                "XTAcorrY": [],
                "X0TAY": [],
                "XTAX0": [],
                "n_C": [],
                "n_V": [],
                "n_X0": [],
                "n_grid": []
            }
        },
        "BRSA._gen_legendre.reg": {
            "name": "reg",
            "location": 1032,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "brainiak-master/brainiak/reprsimil/__init__.py": {},
    "brainiak-master/brainiak/searchlight/searchlight.py": {
        "_singlenode_searchlight": {
            "name": "_singlenode_searchlight",
            "location": 525,
            "return": [
                "int",
                "list[tuple[typing.Union[int,int]]]",
                "str",
                "Callable",
                "tuple[typing.Union[int,int,int]]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "raiden.utils.BlockExpiration",
                    "utils.times.Seconds",
                    "bool",
                    "raiden.utils.SecretHash"
                ],
                "msk": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "mysl_rad": [
                    "float",
                    "int",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "bcast_var": [
                    "int",
                    "raiden.utils.BlockExpiration",
                    "utils.times.Seconds",
                    "bool",
                    "raiden.utils.SecretHash"
                ],
                "extra_params": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Shape.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rad": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Cube.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rad": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Diamond.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rad": [
                    "int"
                ]
            }
        },
        "Ball.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rad": [
                    "int"
                ]
            }
        },
        "Searchlight.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sl_rad": [
                    "int",
                    "bool",
                    "float"
                ],
                "max_blk_edge": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "shape": [
                    "Cube",
                    "int",
                    "bool",
                    "float"
                ],
                "min_active_voxels_proportion": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Searchlight._get_ownership": {
            "name": "_get_ownership",
            "location": 167,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[Any, int]",
                    "list",
                    "\"Project\"",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Searchlight._get_blocks": {
            "name": "_get_blocks",
            "location": 189,
            "return": [
                "List[Tuple[(Tuple[(int, int, int)], Any)]]"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "int",
                    "float"
                ]
            }
        },
        "Searchlight._get_block_data": {
            "name": "_get_block_data",
            "location": 223,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "mat": [
                    "str",
                    "float",
                    "scipy.sparse.csr_matrix",
                    "Union[int, float]",
                    "numpy.array"
                ],
                "block": [
                    "int"
                ]
            }
        },
        "Searchlight._split_volume": {
            "name": "_split_volume",
            "location": 254,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "mat": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "float"
                ],
                "blocks": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "Searchlight._scatter_list": {
            "name": "_scatter_list",
            "location": 275,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bool"
                ],
                "owner": [
                    "dict[, ]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict"
                ]
            }
        },
        "Searchlight.distribute": {
            "name": "distribute",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subjects": [
                    "bool"
                ],
                "mask": [
                    "int"
                ]
            }
        },
        "Searchlight.broadcast": {
            "name": "broadcast",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bcast_var": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Searchlight.run_block_function": {
            "name": "run_block_function",
            "location": 384,
            "return": [
                "int",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "block_fn": [
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]",
                    "List[int]",
                    "None",
                    "list[int]"
                ],
                "extra_block_fn_params": [
                    "Optional[Sequence[Any]]",
                    "None",
                    "List[int]",
                    "typing.Sequence[typing.Any]",
                    "list[int]"
                ],
                "pool_size": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Searchlight.run_searchlight": {
            "name": "run_searchlight",
            "location": 477,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "voxel_fn": [
                    "int",
                    "float",
                    "FrozenSet[int]",
                    "frozenset",
                    "List[int]",
                    "list[int]"
                ],
                "pool_size": [
                    "bool",
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/searchlight/__init__.py": {},
    "brainiak-master/brainiak/utils/fmrisim.py": {
        "_generate_feature": {
            "name": "_generate_feature",
            "location": 113,
            "return": [],
            "arguments": {
                "feature_type": [],
                "feature_size": [],
                "signal_magnitude": [],
                "thickness": [
                    "int"
                ]
            }
        },
        "_insert_idxs": {
            "name": "_insert_idxs",
            "location": 248,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "feature_centre": [],
                "feature_size": [],
                "dimensions": []
            }
        },
        "generate_signal": {
            "name": "generate_signal",
            "location": 309,
            "return": [],
            "arguments": {
                "dimensions": [],
                "feature_coordinates": [],
                "feature_size": [],
                "feature_type": [],
                "signal_magnitude": [],
                "signal_constant": [
                    "int"
                ]
            }
        },
        "generate_stimfunction": {
            "name": "generate_stimfunction",
            "location": 414,
            "return": [],
            "arguments": {
                "onsets": [],
                "event_durations": [],
                "total_time": [],
                "weights": [],
                "timing_file": [
                    "None"
                ],
                "temporal_resolution": [
                    "float"
                ]
            }
        },
        "export_3_column": {
            "name": "export_3_column",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "stimfunction": [],
                "filename": [],
                "temporal_resolution": [
                    "float"
                ]
            }
        },
        "export_epoch_file": {
            "name": "export_epoch_file",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "stimfunction": [],
                "filename": [],
                "tr_duration": [],
                "temporal_resolution": [
                    "float"
                ]
            }
        },
        "_double_gamma_hrf": {
            "name": "_double_gamma_hrf",
            "location": 722,
            "return": [
                "list"
            ],
            "arguments": {
                "response_delay": [
                    "int"
                ],
                "undershoot_delay": [
                    "int"
                ],
                "response_dispersion": [
                    "float"
                ],
                "undershoot_dispersion": [
                    "float"
                ],
                "response_scale": [
                    "int"
                ],
                "undershoot_scale": [
                    "float"
                ],
                "temporal_resolution": [
                    "float"
                ]
            }
        },
        "convolve_hrf": {
            "name": "convolve_hrf",
            "location": 803,
            "return": [],
            "arguments": {
                "stimfunction": [],
                "tr_duration": [],
                "hrf_type": [
                    "typing.Text"
                ],
                "scale_function": [
                    "bool"
                ],
                "temporal_resolution": []
            }
        },
        "apply_signal": {
            "name": "apply_signal",
            "location": 902,
            "return": [],
            "arguments": {
                "signal_function": [],
                "volume_signal": []
            }
        },
        "_calc_fwhm": {
            "name": "_calc_fwhm",
            "location": 970,
            "return": [],
            "arguments": {
                "volume": [],
                "mask": [],
                "voxel_size": [
                    "list[float]"
                ]
            }
        },
        "_calc_sfnr": {
            "name": "_calc_sfnr",
            "location": 1078,
            "return": [],
            "arguments": {
                "volume": [],
                "mask": []
            }
        },
        "_calc_snr": {
            "name": "_calc_snr",
            "location": 1131,
            "return": [],
            "arguments": {
                "volume": [],
                "mask": [],
                "dilation": [
                    "int"
                ],
                "reference_tr": [
                    "None"
                ]
            }
        },
        "_calc_ARMA_noise": {
            "name": "_calc_ARMA_noise",
            "location": 1205,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "volume": [],
                "mask": [],
                "auto_reg_order": [
                    "int"
                ],
                "ma_order": [
                    "int"
                ],
                "sample_num": [
                    "int"
                ]
            }
        },
        "calc_noise": {
            "name": "calc_noise",
            "location": 1291,
            "return": [
                "Union[(Dict[(str, Any)], _T3)]"
            ],
            "arguments": {
                "volume": [],
                "mask": [],
                "template": [],
                "noise_dict": [
                    "_T3"
                ]
            }
        },
        "_generate_noise_system": {
            "name": "_generate_noise_system",
            "location": 1389,
            "return": [],
            "arguments": {
                "dimensions_tr": [],
                "spatial_sd": [],
                "temporal_sd": [],
                "spatial_noise_type": [
                    "typing.Text"
                ],
                "temporal_noise_type": [
                    "typing.Text"
                ]
            }
        },
        "_generate_noise_temporal_task": {
            "name": "_generate_noise_temporal_task",
            "location": 1485,
            "return": [],
            "arguments": {
                "stimfunction_tr": [],
                "motion_noise": [
                    "typing.Text"
                ]
            }
        },
        "_generate_noise_temporal_drift": {
            "name": "_generate_noise_temporal_drift",
            "location": 1528,
            "return": [],
            "arguments": {
                "trs": [],
                "tr_duration": [],
                "basis": [
                    "typing.Text"
                ],
                "period": [
                    "int"
                ]
            }
        },
        "_generate_noise_temporal_autoregression": {
            "name": "_generate_noise_temporal_autoregression",
            "location": 1698,
            "return": [],
            "arguments": {
                "timepoints": [],
                "noise_dict": [],
                "dimensions": [],
                "mask": []
            }
        },
        "_generate_noise_temporal_phys": {
            "name": "_generate_noise_temporal_phys",
            "location": 1841,
            "return": [],
            "arguments": {
                "timepoints": [],
                "resp_freq": [
                    "float"
                ],
                "heart_freq": [
                    "float"
                ]
            }
        },
        "_generate_noise_spatial": {
            "name": "_generate_noise_spatial",
            "location": 1890,
            "return": [],
            "arguments": {
                "dimensions": [],
                "mask": [
                    "None"
                ],
                "fwhm": [
                    "float"
                ]
            }
        },
        "_generate_noise_temporal": {
            "name": "_generate_noise_temporal",
            "location": 2080,
            "return": [],
            "arguments": {
                "stimfunction_tr": [],
                "tr_duration": [],
                "dimensions": [],
                "template": [],
                "mask": [],
                "noise_dict": []
            }
        },
        "mask_brain": {
            "name": "mask_brain",
            "location": 2230,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "volume": [],
                "template_name": [
                    "None"
                ],
                "mask_threshold": [
                    "None"
                ],
                "mask_self": [
                    "bool"
                ]
            }
        },
        "_noise_dict_update": {
            "name": "_noise_dict_update",
            "location": 2366,
            "return": [
                "_T0"
            ],
            "arguments": {
                "noise_dict": [
                    "_T0"
                ]
            }
        },
        "_fit_spatial": {
            "name": "_fit_spatial",
            "location": 2441,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "noise": [],
                "noise_temporal": [],
                "drift_noise": [],
                "mask": [],
                "template": [],
                "spatial_sd": [],
                "temporal_sd": [],
                "noise_dict": [],
                "fit_thresh": [],
                "fit_delta": [],
                "iterations": []
            }
        },
        "_fit_temporal": {
            "name": "_fit_temporal",
            "location": 2611,
            "return": [],
            "arguments": {
                "noise": [],
                "mask": [],
                "template": [],
                "stimfunction_tr": [],
                "tr_duration": [],
                "spatial_sd": [],
                "temporal_proportion": [],
                "temporal_sd": [],
                "drift_noise": [],
                "noise_dict": [],
                "fit_thresh": [],
                "fit_delta": [],
                "iterations": []
            }
        },
        "generate_noise": {
            "name": "generate_noise",
            "location": 2831,
            "return": [],
            "arguments": {
                "dimensions": [],
                "stimfunction_tr": [],
                "tr_duration": [],
                "template": [],
                "mask": [
                    "None"
                ],
                "noise_dict": [
                    "None"
                ],
                "temporal_proportion": [
                    "float"
                ],
                "iterations": [
                    "None"
                ],
                "fit_thresh": [
                    "float"
                ],
                "fit_delta": [
                    "float"
                ]
            }
        },
        "compute_signal_change": {
            "name": "compute_signal_change",
            "location": 3070,
            "return": [],
            "arguments": {
                "signal_function": [],
                "noise_function": [],
                "noise_dict": [],
                "magnitude": [],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "generate_1d_gaussian_rfs": {
            "name": "generate_1d_gaussian_rfs",
            "location": 3271,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "n_voxels": [],
                "feature_resolution": [],
                "feature_range": [],
                "rf_size": [
                    "int"
                ],
                "random_tuning": [
                    "bool"
                ],
                "rf_noise": [
                    "float"
                ]
            }
        },
        "generate_1d_rf_responses": {
            "name": "generate_1d_rf_responses",
            "location": 3336,
            "return": [],
            "arguments": {
                "rfs": [],
                "trial_list": [],
                "feature_resolution": [],
                "feature_range": [],
                "trial_noise": [
                    "float"
                ]
            }
        },
        "_generate_noise_system.noise_volume": {
            "name": "noise_volume",
            "location": 1439,
            "return": [],
            "arguments": {
                "dimensions": [],
                "noise_type": []
            }
        },
        "_generate_noise_spatial._logfunc": {
            "name": "_logfunc",
            "location": 1956,
            "return": [],
            "arguments": {
                "x": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "_generate_noise_spatial._fftIndgen": {
            "name": "_fftIndgen",
            "location": 1982,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "_generate_noise_spatial._Pk2": {
            "name": "_Pk2",
            "location": 2005,
            "return": [],
            "arguments": {
                "idxs": [],
                "sigma": []
            }
        },
        "_generate_noise_temporal_drift.power_drop": {
            "name": "power_drop",
            "location": 1635,
            "return": [
                "float"
            ],
            "arguments": {
                "r": [],
                "L": [],
                "F": [],
                "tr_duration": []
            }
        }
    },
    "brainiak-master/brainiak/utils/fmrisim_real_time_generator.py": {
        "_generate_ROIs": {
            "name": "_generate_ROIs",
            "location": 66,
            "return": [
                "str",
                "int",
                "Mapping"
            ],
            "arguments": {
                "ROI_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "stimfunc": [
                    "float",
                    "str",
                    "int"
                ],
                "noise": [
                    "int",
                    "float"
                ],
                "scale_percentage": [
                    "int",
                    "Optional[int]",
                    "None",
                    "float",
                    "numpy.ndarray",
                    "Optional[float]"
                ],
                "data_dict": [
                    "int",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "_write_dicom": {
            "name": "_write_dicom",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "output_name": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "image_number": [
                    "int",
                    "str",
                    "argparse.Namespace",
                    "Optional[float]",
                    "Callable[[], str]",
                    "bool"
                ]
            }
        },
        "_get_input_names": {
            "name": "_get_input_names",
            "location": 261,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "data_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[bytes, Any]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "outputDir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "user_settings": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Optional[Iterable[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/utils/kronecker_solvers.py": {
        "tf_solve_lower_triangular_kron": {
            "name": "tf_solve_lower_triangular_kron",
            "location": 6,
            "return": [
                "int",
                "List[int]",
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "L": [
                    "list"
                ],
                "y": [
                    "float",
                    "int",
                    "tensorflow.Tensor"
                ]
            }
        },
        "tf_solve_upper_triangular_kron": {
            "name": "tf_solve_upper_triangular_kron",
            "location": 56,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "L": [
                    "int",
                    "List[Tuple[str, str]]"
                ],
                "y": []
            }
        },
        "tf_kron_mult": {
            "name": "tf_kron_mult",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "L": [
                    "int",
                    "List[Union[int, float]]",
                    "list",
                    "List[int]",
                    "List[List[int]]",
                    "List[List]"
                ],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "tf_masked_triangular_solve": {
            "name": "tf_masked_triangular_solve",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "L": [
                    "Sized",
                    "int",
                    "typing.Sized",
                    "float",
                    "str",
                    "Callable[..., bool]",
                    "typing.Callable[..., bool]"
                ],
                "y": [
                    "float",
                    "tensorflow.Tensor"
                ],
                "mask": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "lower": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "int"
                ],
                "adjoint": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "tf_solve_lower_triangular_masked_kron": {
            "name": "tf_solve_lower_triangular_masked_kron",
            "location": 202,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "L": [
                    "Sequence[float]",
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "Union[List[str], List[int]]"
                ],
                "y": [
                    "int",
                    "List[bytes]",
                    "list[bytes]",
                    "Optional[bool]",
                    "None"
                ],
                "mask": [
                    "int",
                    "str"
                ]
            }
        },
        "tf_solve_upper_triangular_masked_kron": {
            "name": "tf_solve_upper_triangular_masked_kron",
            "location": 269,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "L": [
                    "Sequence[float]",
                    "Union[List[str], List[int]]",
                    "List[str]",
                    "int"
                ],
                "y": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "mask": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "brainiak-master/brainiak/utils/utils.py": {
        "circ_dist": {
            "name": "circ_dist",
            "location": 47,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "from_tri_2_sym": {
            "name": "from_tri_2_sym",
            "location": 68,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "tri": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "numpy.ndarray"
                ],
                "dim": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "numpy.ndarray"
                ]
            }
        },
        "from_sym_2_tri": {
            "name": "from_sym_2_tri",
            "location": 94,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "symm": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "numpy.ndarray"
                ]
            }
        },
        "sumexp_stable": {
            "name": "sumexp_stable",
            "location": 117,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "concatenate_not_none": {
            "name": "concatenate_not_none",
            "location": 153,
            "return": [
                "str",
                "float",
                "List[str]",
                "int"
            ],
            "arguments": {
                "data": [
                    "float",
                    "dict",
                    "int"
                ],
                "axis": [
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "cov2corr": {
            "name": "cov2corr",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cov": []
            }
        },
        "gen_design": {
            "name": "gen_design",
            "location": 364,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stimtime_files": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "scan_duration": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "numpy.array",
                    "tuple",
                    "numpy.ndarray"
                ],
                "TR": [
                    "int",
                    "str",
                    "Callable[[int], bool]"
                ],
                "style": [
                    "bool",
                    "int",
                    "float",
                    "Iterator[int]"
                ],
                "temp_res": [
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[int]",
                    "Callable[[str, str], float]",
                    "int",
                    "str"
                ],
                "hrf_para": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "_read_stimtime_FSL": {
            "name": "_read_stimtime_FSL",
            "location": 512,
            "return": [
                "list"
            ],
            "arguments": {
                "stimtime_files": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Mapping[str, str]"
                ],
                "n_C": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "n_S": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "scan_onoff": [
                    "float",
                    "str",
                    "Union[float, List[float]]",
                    "list"
                ]
            }
        },
        "_read_stimtime_AFNI": {
            "name": "_read_stimtime_AFNI",
            "location": 580,
            "return": [
                "list"
            ],
            "arguments": {
                "stimtime_files": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Mapping[str, str]"
                ],
                "n_C": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "n_S": [
                    "int"
                ],
                "scan_onoff": [
                    "str",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "center_mass_exp": {
            "name": "center_mass_exp",
            "location": 656,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interval": [
                    "str",
                    "Union[tuple, list]",
                    "List[int]",
                    "Optional[int]"
                ],
                "scale": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "usable_cpu_count": {
            "name": "usable_cpu_count",
            "location": 700,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        },
        "phase_randomize": {
            "name": "phase_randomize",
            "location": 719,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "IO"
                ],
                "voxelwise": [
                    "bool",
                    "int",
                    "dict",
                    "AnyStr",
                    "Dict[str, List[Dict]]",
                    "list",
                    "bytes"
                ],
                "random_state": [
                    "int",
                    "numpy.array",
                    "List[int]"
                ]
            }
        },
        "p_from_null": {
            "name": "p_from_null",
            "location": 802,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "observed": [
                    "float",
                    "Sequence[float]",
                    "Tuple[int, int]",
                    "tuple"
                ],
                "distribution": [
                    "List[int]",
                    "str",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "side": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "exact": [
                    "numpy.ndarray"
                ],
                "axis": [
                    "float",
                    "Sequence[float]",
                    "Tuple[int, int]",
                    "tuple"
                ]
            }
        },
        "_check_timeseries_input": {
            "name": "_check_timeseries_input",
            "location": 874,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "numpy.ndarray",
                    "bytes",
                    "List[float]"
                ]
            }
        },
        "array_correlation": {
            "name": "array_correlation",
            "location": 937,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "numpy.ndarray",
                    "int"
                ],
                "axis": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "ReadDesign.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "Optional[bool]",
                    "Any",
                    "int",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "include_orth": [
                    "int",
                    "bool",
                    "float"
                ],
                "include_pols": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ReadDesign.read_afni": {
            "name": "read_afni",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "IO",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "brainiak-master/brainiak/utils/__init__.py": {},
    "brainiak-master/docs/conf.py": {},
    "brainiak-master/examples/eventseg/simulated_data.py": {
        "generate_event_labels": {
            "name": "generate_event_labels",
            "location": 19,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "T": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Callable"
                ],
                "K": [
                    "int",
                    "float",
                    "Optional[Union[int, float]]",
                    "Optional[float]"
                ],
                "length_std": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 33,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "V": [
                    "int",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "T": [
                    "dict[, ]",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "dict"
                ],
                "event_labels": [
                    "int"
                ],
                "event_means": [
                    "int"
                ],
                "noise_std": [
                    "int"
                ]
            }
        }
    },
    "brainiak-master/examples/factoranalysis/get_tfa_input_from_nifti.py": {
        "extract_data": {
            "name": "extract_data",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "nifti_file": [
                    "str",
                    "Optional[str]",
                    "None",
                    "tuple",
                    "tuple[]",
                    "dict",
                    "dict[, ]"
                ],
                "mask_file": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[IO[bytes]]",
                    "None",
                    "typing.IO",
                    "Optional[TextIO]",
                    "typing.TextIO"
                ],
                "out_file": [
                    "str",
                    "IO[Any]",
                    "typing.IO",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Union[BinaryIO, str]",
                    "typing.BinaryIO"
                ],
                "zscore": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "detrend": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "smoothing_fwmw": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "brainiak-master/examples/factoranalysis/htfa_cv_example.py": {
        "recon_err": {
            "name": "recon_err",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ],
                "F": [
                    "bool",
                    "bytes",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "list[int]",
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "numpy.ndarray",
                    "List[int]",
                    "int"
                ],
                "W": [
                    "bool",
                    "bytes",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "list[int]",
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "numpy.ndarray",
                    "List[int]",
                    "int"
                ]
            }
        },
        "get_train_err": {
            "name": "get_train_err",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "htfa": [
                    "str",
                    "List[str]",
                    "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]"
                ],
                "data": [
                    "bool",
                    "dict[str, typing.Any]",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "F": [
                    "bool",
                    "dict[str, typing.Any]",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_test_err": {
            "name": "get_test_err",
            "location": 81,
            "return": [
                "float"
            ],
            "arguments": {
                "htfa": [
                    "str",
                    "bool"
                ],
                "test_weight_data": [
                    "str",
                    "Optional[Union[int, Any]]",
                    "int",
                    "Union[str, os.PathLike]",
                    "typing.Any",
                    "None"
                ],
                "test_recon_data": [
                    "bool",
                    "str",
                    "int",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "test_weight_R": [
                    "bool",
                    "str",
                    "Callable[[], int]",
                    "typing.Callable[[], int]",
                    "Union[int, float]",
                    "float",
                    "Iterable[Sequence[str]]",
                    "typing.Iterable[typing.Sequence[str]]"
                ],
                "test_recon_R": [
                    "bool",
                    "str",
                    "Callable[[], int]",
                    "typing.Callable[[], int]",
                    "Union[int, float]",
                    "float",
                    "Iterable[Sequence[str]]",
                    "typing.Iterable[typing.Sequence[str]]"
                ],
                "centers": [
                    "int",
                    "str",
                    "bool"
                ],
                "widths": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "brainiak-master/examples/factoranalysis/latent_factor_from_htfa.py": {},
    "brainiak-master/examples/factoranalysis/latent_factor_from_tfa.py": {},
    "brainiak-master/examples/fcma/classification.py": {
        "example_of_aggregating_sim_matrix": {
            "name": "example_of_aggregating_sim_matrix",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_data": [
                    "int",
                    "float",
                    "bool"
                ],
                "labels": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Sequence[Any]"
                ],
                "num_subjects": [
                    "int",
                    "numpy.ndarray"
                ],
                "num_epochs_per_subj": [
                    "int",
                    "float",
                    "List[str]",
                    "Collection[int]"
                ]
            }
        },
        "example_of_cross_validation_with_detailed_info": {
            "name": "example_of_cross_validation_with_detailed_info",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_data": [
                    "bytes",
                    "int",
                    "bool",
                    "dict"
                ],
                "labels": [
                    "str",
                    "int",
                    "list[float]",
                    "list[str]",
                    "Sequence[str]",
                    "List[float]",
                    "List[str]"
                ],
                "num_subjects": [
                    "int",
                    "Optional[int]",
                    "None",
                    "list",
                    "list[]"
                ],
                "num_epochs_per_subj": [
                    "int",
                    "float",
                    "Union[float, List[float]]",
                    "Union[int, float]"
                ]
            }
        },
        "example_of_cross_validation_using_model_selection": {
            "name": "example_of_cross_validation_using_model_selection",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_data": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "labels": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "num_subjects": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "str",
                    "tuple[typing.Union[int,...]]",
                    "Union[int, Tuple[int, ...]]",
                    "Optional[str]",
                    "None",
                    "bool"
                ],
                "num_epochs_per_subj": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "example_of_correlating_two_components": {
            "name": "example_of_correlating_two_components",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_data": [
                    "list[str]",
                    "str",
                    "numpy.ndarray",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "raw_data2": [
                    "list[str]",
                    "str",
                    "numpy.ndarray",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "labels": [
                    "list[str]",
                    "int",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]"
                ],
                "num_subjects": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "dict",
                    "Optional[int]"
                ],
                "num_epochs_per_subj": [
                    "int",
                    "float"
                ]
            }
        },
        "example_of_correlating_two_components_aggregating_sim_matrix": {
            "name": "example_of_correlating_two_components_aggregating_sim_matrix",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_data": [
                    "int",
                    "dict[str, int]",
                    "numpy.ndarray",
                    "Dict[str, int]"
                ],
                "raw_data2": [
                    "int",
                    "dict[str, int]",
                    "numpy.ndarray",
                    "Dict[str, int]"
                ],
                "labels": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Dict[str, int]",
                    "OrderedDict"
                ],
                "num_subjects": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "dict",
                    "Optional[int]"
                ],
                "num_epochs_per_subj": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Optional[float]"
                ]
            }
        }
    },
    "brainiak-master/examples/fcma/corr_comp.py": {},
    "brainiak-master/examples/fcma/generate_fcma_data.py": {},
    "brainiak-master/examples/fcma/mvpa_classification.py": {},
    "brainiak-master/examples/fcma/mvpa_voxel_selection.py": {},
    "brainiak-master/examples/fcma/voxel_selection.py": {},
    "brainiak-master/examples/funcalign/searchlight_srm_example.py": {
        "time_segment_matching_accuracy": {
            "name": "time_segment_matching_accuracy",
            "location": 109,
            "return": [
                "int",
                "float",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "win_size": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "sfn": {
            "name": "sfn",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "l": [
                    "int",
                    "numpy.ndarray",
                    "Sized",
                    "Sequence[Sequence[float]]",
                    "list"
                ],
                "msk": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]"
                ],
                "myrad": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]"
                ],
                "bcast_var": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        }
    },
    "brainiak-master/examples/funcalign/srm_image_prediction_example.py": {
        "plot_confusion_matrix": {
            "name": "plot_confusion_matrix",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cm": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ],
                "title": [
                    "typing.Text",
                    "str",
                    "Tuple['cirq.Qid']",
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "brainiak-master/examples/funcalign/srm_image_prediction_example_distributed.py": {
        "plot_confusion_matrix": {
            "name": "plot_confusion_matrix",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cm": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ],
                "title": [
                    "typing.Text",
                    "str",
                    "Tuple['cirq.Qid']",
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "brainiak-master/examples/funcalign/sssrm_image_prediction_example.py": {},
    "brainiak-master/examples/hyperparamopt/hpo_example.py": {
        "branin": {
            "name": "branin",
            "location": 36,
            "return": [
                "float",
                "int",
                "bool",
                "Optional[List[int]]"
            ],
            "arguments": {
                "x1": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "x2": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "branin_wrapper": {
            "name": "branin_wrapper",
            "location": 46,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "brainiak-master/examples/isc/isfc.py": {},
    "brainiak-master/examples/searchlight/example_searchlight.py": {
        "sfn": {
            "name": "sfn",
            "location": 78,
            "return": [],
            "arguments": {
                "l": [
                    "int",
                    "bytes",
                    "list[]",
                    "list",
                    "numpy.ma.MaskedArray",
                    "numpy.ndarray"
                ],
                "msk": [
                    "int",
                    "bytes",
                    "list[]",
                    "list",
                    "numpy.ma.MaskedArray",
                    "numpy.ndarray"
                ],
                "myrad": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]"
                ],
                "bcast_var": [
                    "str",
                    "numpy.array"
                ]
            }
        }
    },
    "brainiak-master/examples/searchlight/genre_searchlight_example.py": {
        "corr2_coeff": {
            "name": "corr2_coeff",
            "location": 52,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "AB": [
                    "int",
                    "bool"
                ],
                "msk": [
                    "bool",
                    "float",
                    "int"
                ],
                "myrad": [
                    "float",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Iterable",
                    "typing.Iterable[]"
                ],
                "bcast_var": [
                    "float",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        }
    },
    "brainiak-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "seeded_rng": {
            "name": "seeded_rng",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/eventseg/test_event.py": {
        "test_create_event_segmentation": {
            "name": "test_create_event_segmentation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit_shapes": {
            "name": "test_fit_shapes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_boundary": {
            "name": "test_simple_boundary",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_transfer": {
            "name": "test_event_transfer",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weighted_var": {
            "name": "test_weighted_var",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sym": {
            "name": "test_sym",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chains": {
            "name": "test_chains",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prior": {
            "name": "test_prior",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_merge": {
            "name": "test_split_merge",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sym_ll": {
            "name": "test_sym_ll",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/factoranalysis/test_htfa.py": {
        "test_R": {
            "name": "test_R",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_X": {
            "name": "test_X",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_run": {
            "name": "test_can_run",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/factoranalysis/test_tfa.py": {
        "test_tfa": {
            "name": "test_tfa",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/fcma/test_classification.py": {
        "create_epoch": {
            "name": "create_epoch",
            "location": 28,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "idx": [
                    "bool",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "float"
                ],
                "num_voxels": [
                    "int"
                ]
            }
        },
        "test_classification": {
            "name": "test_classification",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_classification_with_two_components": {
            "name": "test_classification_with_two_components",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/fcma/test_mvpa_voxel_selection.py": {
        "test_mvpa_voxel_selection": {
            "name": "test_mvpa_voxel_selection",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/fcma/test_preprocessing.py": {
        "test_prepare_fcma_data": {
            "name": "test_prepare_fcma_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_mvpa_data": {
            "name": "test_prepare_mvpa_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_searchlight_mvpa_data": {
            "name": "test_prepare_searchlight_mvpa_data",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/fcma/test_util.py": {
        "test_correlation_computation": {
            "name": "test_correlation_computation",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_correlation_nans": {
            "name": "test_correlation_nans",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/fcma/test_voxel_selection.py": {
        "create_epoch": {
            "name": "create_epoch",
            "location": 30,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_voxel_selection": {
            "name": "test_voxel_selection",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_voxel_selection_with_two_masks": {
            "name": "test_voxel_selection_with_two_masks",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/funcalign/test_fastsrm.py": {
        "to_path": {
            "name": "to_path",
            "location": 18,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "X": [
                    "str",
                    "list[]",
                    "int",
                    "set[str]",
                    "bool",
                    "Optional[int]",
                    "list",
                    "numpy.ndarray",
                    "Optional[Set[str]]"
                ],
                "dirpath": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 43,
            "return": [
                "Tuple[(Union[(list, np.ndarray)], list, list)]"
            ],
            "arguments": {
                "n_voxels": [
                    "int"
                ],
                "n_timeframes": [
                    "int",
                    "Sequence",
                    "Union[float, List[float]]"
                ],
                "n_subjects": [
                    "int",
                    "numpy.ndarray",
                    "np.ndarray"
                ],
                "n_components": [
                    "int"
                ],
                "datadir": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "noise_level": [
                    "int",
                    "float"
                ],
                "input_format": [
                    "typing.Text",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_generated_data": {
            "name": "test_generated_data",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_aggregate": {
            "name": "test_bad_aggregate",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_atlas": {
            "name": "test_check_atlas",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_imgs": {
            "name": "test_check_imgs",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_shared": {
            "name": "test_check_shared",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reduce_data_dummyatlases": {
            "name": "test_reduce_data_dummyatlases",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reduce_data_outputshapes": {
            "name": "test_reduce_data_outputshapes",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reduced_data_srm": {
            "name": "test_reduced_data_srm",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_and_save": {
            "name": "test_compute_and_save",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fastsrm_class": {
            "name": "test_fastsrm_class",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "apply_aggregate": {
            "name": "apply_aggregate",
            "location": 656,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "shared_response": [
                    "_T0"
                ],
                "aggregate": [
                    "int",
                    "None",
                    "str",
                    "Optional[bool]",
                    "list[typing.Any]",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ],
                "input_format": [
                    "list[int]",
                    "numpy.array",
                    "bool",
                    "str",
                    "List[int]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "apply_input_format": {
            "name": "apply_input_format",
            "location": 674,
            "return": [
                "Tuple[(Union[(list, _T0)], int)]"
            ],
            "arguments": {
                "X": [
                    "_T0"
                ],
                "input_format": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_fastsrm_class_correctness": {
            "name": "test_fastsrm_class_correctness",
            "location": 695,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_format": [
                    "int"
                ],
                "low_ram": [
                    "int",
                    "str",
                    "bool"
                ],
                "tempdir": [
                    "int",
                    "float",
                    "str",
                    "List[numpy.array]",
                    "list[numpy.array]"
                ],
                "atlas": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_jobs": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_timeframes": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "aggregate": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_class_srm_inverse_transform": {
            "name": "test_class_srm_inverse_transform",
            "location": 766,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_format": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "low_ram": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "tempdir": [
                    "bool",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ],
                "atlas": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "n_jobs": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "n_timeframes": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "aggregate": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_fastsrm_identity": {
            "name": "test_fastsrm_identity",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_and_concat": {
            "name": "load_and_concat",
            "location": 866,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": [
                    "int",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_consistency_paths_data": {
            "name": "test_consistency_paths_data",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/funcalign/test_rsrm.py": {
        "test_can_instantiate": {
            "name": "test_can_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/funcalign/test_srm.py": {
        "test_can_instantiate": {
            "name": "test_can_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_new_subject": {
            "name": "test_new_subject",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_det_srm": {
            "name": "test_det_srm",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/funcalign/test_srm_distributed.py": {
        "test_distributed_srm": {
            "name": "test_distributed_srm",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/funcalign/test_sssrm.py": {
        "test_instance": {
            "name": "test_instance",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_input": {
            "name": "test_wrong_input",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sssrm": {
            "name": "test_sssrm",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/hyperparamopt/test_hpo.py": {
        "test_simple_gmm": {
            "name": "test_simple_gmm",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_gmm_weights": {
            "name": "test_simple_gmm_weights",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_hpo": {
            "name": "test_simple_hpo",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_hpo.f": {
            "name": "f",
            "location": 52,
            "return": [
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "brainiak-master/tests/image/test_image.py": {
        "masked_multi_subject_data": {
            "name": "masked_multi_subject_data",
            "location": 28,
            "return": [
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "masked_images": [
                    "numpy.ndarray"
                ]
            }
        },
        "condition_spec": {
            "name": "condition_spec",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "spatial_image": {
            "name": "spatial_image",
            "location": 58,
            "return": [
                "Nifti1Pair",
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mask": {
            "name": "mask",
            "location": 79,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {}
        },
        "masked_data": {
            "name": "masked_data",
            "location": 99,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 104,
            "return": [
                "list[typing.Union[bool,dict[, ],None,str,bytes,dict[str, list[int]],Nifti1Pair]]",
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "spatial_image": [
                    "bool",
                    "T",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "Union[str, bytes, None]",
                    "str",
                    "Dict[str, List[int]]",
                    "bytes",
                    "dict[str, list[int]]"
                ]
            }
        },
        "masks": {
            "name": "masks",
            "location": 113,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mask": [
                    "bytes",
                    "list"
                ]
            }
        },
        "multimasked_images": {
            "name": "multimasked_images",
            "location": 125,
            "return": [
                "list[list[typing.Union[bytes,list[dict[str, typing.Any]],dict[str, typing.Any]]]]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "masked_data": [
                    "bytes",
                    "dict",
                    "list[dict[str, typing.Any]]",
                    "Mapping[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "masked_images": {
            "name": "masked_images",
            "location": 134,
            "return": [
                "list[]",
                "float",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "multimasked_images": [
                    "tuple[typing.Union[numpy.ndarray,float]]",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[numpy.ndarray, float]",
                    "Iterable[nibabel.spatialimages.SpatialImage]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_mask_image": {
            "name": "test_mask_image",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "spatial_image": [
                    "typing.Iterable[nibabel.spatialimages.SpatialImage]",
                    "numpy.ndarray",
                    "typing.Sequence[numpy.ndarray]",
                    "nibabel.spatialimages.SpatialImage",
                    "Iterable[nibabel.spatialimages.SpatialImage]",
                    "Sequence[numpy.ndarray]"
                ],
                "mask": [
                    "np.ndarray"
                ],
                "masked_data": [
                    "np.ndarray"
                ]
            }
        },
        "test_mask_image_with_type": {
            "name": "test_mask_image_with_type",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "spatial_image": [
                    "list[typing.Callable[, ]]",
                    "numpy.ndarray",
                    "nibabel.spatialimages.SpatialImage",
                    "List[Callable]"
                ],
                "mask": [
                    "np.ndarray"
                ],
                "masked_data": [
                    "np.ndarray"
                ]
            }
        },
        "test_multimask_images": {
            "name": "test_multimask_images",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "images": [
                    "Iterable"
                ],
                "masks": [
                    "Sequence[np.ndarray]"
                ],
                "multimasked_images": [
                    "Iterable[Iterable[np.ndarray]]"
                ]
            }
        },
        "test_mask_images": {
            "name": "test_mask_images",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "images": [
                    "Iterable"
                ],
                "mask": [
                    "np.ndarray"
                ],
                "masked_images": [
                    "Iterable[np.ndarray]"
                ]
            }
        },
        "TestMaskedMultiSubjectData.test_from_masked_images": {
            "name": "test_from_masked_images",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "masked_images": [
                    "numpy.ndarray",
                    "memoryview",
                    "bytes"
                ],
                "masked_multi_subject_data": []
            }
        },
        "TestUniqueLabelConditionSpec.test_extract_labels": {
            "name": "test_extract_labels",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition_spec": [
                    "brainiak.image.SingleConditionSpec"
                ]
            }
        }
    },
    "brainiak-master/tests/io/test_io.py": {
        "in_dir": {
            "name": "in_dir",
            "location": 26,
            "return": [
                "pathlib.Path",
                "Dict[str, cerulean.Path]",
                "pathlib.PurePath"
            ],
            "arguments": {}
        },
        "expected_image_data_shape": {
            "name": "expected_image_data_shape",
            "location": 31,
            "return": [
                "tuple[int]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "mask_path": {
            "name": "mask_path",
            "location": 36,
            "return": [
                "int",
                "str",
                "List[Dict[str, Any]]",
                "kedro.io.core.Version",
                "Optional[str]"
            ],
            "arguments": {
                "in_dir": [
                    "bool",
                    "pathlib.Path",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "labels_path": {
            "name": "labels_path",
            "location": 41,
            "return": [
                "int",
                "Optional[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "in_dir": [
                    "bool",
                    "pathlib.Path",
                    "Optional[str]",
                    "str",
                    "List[Union[str, int]]"
                ]
            }
        },
        "expected_condition_spec_shape": {
            "name": "expected_condition_spec_shape",
            "location": 46,
            "return": [
                "tuple[int]",
                "int",
                "str",
                "Dict[str, str]",
                "io.TextIO",
                "bool"
            ],
            "arguments": {}
        },
        "expected_n_subjects": {
            "name": "expected_n_subjects",
            "location": 51,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "image_paths": {
            "name": "image_paths",
            "location": 56,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "in_dir": [
                    "pathlib.Path",
                    "str",
                    "dict"
                ]
            }
        },
        "test_load_images_from_dir_data_shape": {
            "name": "test_load_images_from_dir_data_shape",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "in_dir": [
                    "pathlib.Path"
                ],
                "expected_image_data_shape": [
                    "Sequence[int]"
                ],
                "expected_n_subjects": [
                    "int"
                ]
            }
        },
        "test_load_images_data_shape": {
            "name": "test_load_images_data_shape",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "image_paths": [
                    "Iterable[pathlib.Path]"
                ],
                "expected_image_data_shape": [
                    "Sequence[int]"
                ],
                "expected_n_subjects": [
                    "int"
                ]
            }
        },
        "test_load_boolean_mask": {
            "name": "test_load_boolean_mask",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mask_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_boolean_mask_predicate": {
            "name": "test_load_boolean_mask_predicate",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mask_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_labels": {
            "name": "test_load_labels",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "labels_path": [
                    "pathlib.Path"
                ],
                "expected_condition_spec_shape": [
                    "Sequence[int]"
                ],
                "expected_n_subjects": [
                    "int"
                ]
            }
        },
        "test_save_as_nifti_file": {
            "name": "test_save_as_nifti_file",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int"
                ]
            }
        }
    },
    "brainiak-master/tests/isc/test_isc.py": {
        "simulated_timeseries": {
            "name": "simulated_timeseries",
            "location": 13,
            "return": [
                "list[]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "n_subjects": [
                    "int",
                    "str"
                ],
                "n_TRs": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "n_voxels": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "noise": [
                    "int",
                    "str"
                ],
                "data_type": [
                    "int",
                    "typing.Text"
                ],
                "random_state": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "correlated_timeseries": {
            "name": "correlated_timeseries",
            "location": 36,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "n_subjects": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ],
                "n_TRs": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ],
                "noise": [
                    "int",
                    "dict",
                    "Optional[Exception]",
                    "bytes"
                ],
                "random_state": [
                    "int",
                    "None"
                ]
            }
        },
        "test_isc_input": {
            "name": "test_isc_input",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isc_options": {
            "name": "test_isc_options",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isc_output": {
            "name": "test_isc_output",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isc_nans": {
            "name": "test_isc_nans",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bootstrap_isc": {
            "name": "test_bootstrap_isc",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_permutation_isc": {
            "name": "test_permutation_isc",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeshift_isc": {
            "name": "test_timeshift_isc",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phaseshift_isc": {
            "name": "test_phaseshift_isc",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isfc_options": {
            "name": "test_isfc_options",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isfc_nans": {
            "name": "test_isfc_nans",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_squareform_isfc": {
            "name": "test_squareform_isfc",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/matnormal/test_cov.py": {
        "logdet_sinv_np": {
            "name": "logdet_sinv_np",
            "location": 30,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ],
                "sigma": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "logdet_sinv_np_mask": {
            "name": "logdet_sinv_np_mask",
            "location": 41,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "X": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "sigma": [
                    "list[numpy.ndarray]",
                    "Union[numpy.ndarray, List[numpy.ndarray]]",
                    "Iterable[Iterable[float]]",
                    "numpy.ndarray"
                ],
                "mask": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "test_CovConstant": {
            "name": "test_CovConstant",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovIdentity": {
            "name": "test_CovIdentity",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovIsotropic": {
            "name": "test_CovIsotropic",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovDiagonal": {
            "name": "test_CovDiagonal",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovDiagonal_initialized": {
            "name": "test_CovDiagonal_initialized",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovDiagonalGammaPrior": {
            "name": "test_CovDiagonalGammaPrior",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovUnconstrainedCholesky": {
            "name": "test_CovUnconstrainedCholesky",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovUnconstrainedCholeskyWishartReg": {
            "name": "test_CovUnconstrainedCholeskyWishartReg",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovUnconstrainedInvCholesky": {
            "name": "test_CovUnconstrainedInvCholesky",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_Cov2FactorKron": {
            "name": "test_Cov2FactorKron",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_Cov3FactorKron": {
            "name": "test_Cov3FactorKron",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_Cov3FactorMaskedKron": {
            "name": "test_Cov3FactorMaskedKron",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovAR1": {
            "name": "test_CovAR1",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_CovAR1_scan_onsets": {
            "name": "test_CovAR1_scan_onsets",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_raises": {
            "name": "test_raises",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "brainiak-master/tests/matnormal/test_matnormal_logp.py": {
        "test_against_scipy_mvn_row": {
            "name": "test_against_scipy_mvn_row",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": []
            }
        },
        "test_against_scipy_mvn_col": {
            "name": "test_against_scipy_mvn_col",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str"
                ]
            }
        }
    },
    "brainiak-master/tests/matnormal/test_matnormal_logp_conditional.py": {
        "test_against_scipy_mvn_row_conditional": {
            "name": "test_against_scipy_mvn_row_conditional",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": []
            }
        },
        "test_against_scipy_mvn_col_conditional": {
            "name": "test_against_scipy_mvn_col_conditional",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str"
                ]
            }
        }
    },
    "brainiak-master/tests/matnormal/test_matnormal_logp_marginal.py": {
        "test_against_scipy_mvn_row_marginal": {
            "name": "test_against_scipy_mvn_row_marginal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": []
            }
        },
        "test_against_scipy_mvn_col_marginal": {
            "name": "test_against_scipy_mvn_col_marginal",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str"
                ]
            }
        }
    },
    "brainiak-master/tests/matnormal/test_matnormal_regression.py": {
        "test_matnorm_regression_unconstrained": {
            "name": "test_matnorm_regression_unconstrained",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_matnorm_regression_unconstrainedprec": {
            "name": "test_matnorm_regression_unconstrainedprec",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_matnorm_regression_optimizerChoice": {
            "name": "test_matnorm_regression_optimizerChoice",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_matnorm_regression_scaledDiag": {
            "name": "test_matnorm_regression_scaledDiag",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_matnorm_calibration_raises": {
            "name": "test_matnorm_calibration_raises",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "brainiak-master/tests/matnormal/test_matnormal_rsa.py": {
        "gen_U_nips2016_example": {
            "name": "gen_U_nips2016_example",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gen_brsa_data_matnorm_model": {
            "name": "gen_brsa_data_matnorm_model",
            "location": 21,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "U": [
                    "int",
                    "float",
                    "str",
                    "List[float]",
                    "list[float]"
                ],
                "n_T": [
                    "list[]",
                    "float",
                    "list",
                    "int",
                    "list[int]",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "n_V": [
                    "int",
                    "float",
                    "list[int]",
                    "numpy.array",
                    "List[int]"
                ],
                "space_cov": [
                    "int",
                    "float",
                    "str",
                    "List[float]",
                    "list[float]"
                ],
                "time_cov": [
                    "int",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]"
                ],
                "n_nureg": [
                    "float",
                    "int",
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "test_brsa_rudimentary": {
            "name": "test_brsa_rudimentary",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "brainiak-master/tests/matnormal/test_matnormal_utils.py": {
        "test_pack_unpack": {
            "name": "test_pack_unpack",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_cholesky_uncholesky": {
            "name": "test_cholesky_uncholesky",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "seeded_rng": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "brainiak-master/tests/reconstruct/test_iem.py": {
        "test_can_instantiate": {
            "name": "test_can_instantiate",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instantiate_improper_range": {
            "name": "test_instantiate_improper_range",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_data_amount": {
            "name": "test_data_amount",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_data_dimensions": {
            "name": "test_data_dimensions",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_2d_stimulus_resolution": {
            "name": "test_2d_stimulus_resolution",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_2d_custom_channels": {
            "name": "test_2d_custom_channels",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_instantiate_2d_channels": {
            "name": "test_cannot_instantiate_2d_channels",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_modify_2d_properties": {
            "name": "test_modify_2d_properties",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_2d_params": {
            "name": "test_get_2d_params",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_2d_cos": {
            "name": "test_2d_cos",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_2d_cos_size_fcns": {
            "name": "test_2d_cos_size_fcns",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_square_basis_grid": {
            "name": "test_square_basis_grid",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_triangular_basis_grid": {
            "name": "test_triangular_basis_grid",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit_invalid_2d": {
            "name": "test_fit_invalid_2d",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit_2d_radius_list": {
            "name": "test_fit_2d_radius_list",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit_custom_channel_activations": {
            "name": "test_fit_custom_channel_activations",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_fit_2d_data": {
            "name": "test_can_fit_2d_data",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_fit_2d_data": {
            "name": "test_cannot_fit_2d_data",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ill_conditioned_2d_train_data": {
            "name": "test_ill_conditioned_2d_train_data",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ill_conditioned_2d_channel_activations": {
            "name": "test_ill_conditioned_2d_channel_activations",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ill_conditioned_2d_weights": {
            "name": "test_ill_conditioned_2d_weights",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insufficient_2d_data": {
            "name": "test_insufficient_2d_data",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mismatched_2d_observations": {
            "name": "test_mismatched_2d_observations",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_predict_from_2d_data": {
            "name": "test_can_predict_from_2d_data",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_predict_from_2d_data": {
            "name": "test_cannot_predict_from_2d_data",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_score_2d": {
            "name": "test_can_score_2d",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_score_2d": {
            "name": "test_cannot_score_2d",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_1d_stimulus_resolution": {
            "name": "test_1d_stimulus_resolution",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_instantiate_1d_channels": {
            "name": "test_cannot_instantiate_1d_channels",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stimulus_mode": {
            "name": "test_stimulus_mode",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_stimulus_mode_circ": {
            "name": "test_range_stimulus_mode_circ",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_stimulus_mode_halfcirc": {
            "name": "test_range_stimulus_mode_halfcirc",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_fit_data": {
            "name": "test_can_fit_data",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_fit_circular_space": {
            "name": "test_can_fit_circular_space",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_fit_data": {
            "name": "test_cannot_fit_data",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ill_conditioned_train_data": {
            "name": "test_ill_conditioned_train_data",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extra_data_dimensions": {
            "name": "test_extra_data_dimensions",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mismatched_observations": {
            "name": "test_mismatched_observations",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_predict_from_data": {
            "name": "test_can_predict_from_data",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_predict_from_data": {
            "name": "test_cannot_predict_from_data",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_score": {
            "name": "test_can_score",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_score": {
            "name": "test_cannot_score",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stimulus_resolution_odd": {
            "name": "test_stimulus_resolution_odd",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stimulus_mask": {
            "name": "test_stimulus_mask",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stimulus_mask_shift_positive": {
            "name": "test_stimulus_mask_shift_positive",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_params": {
            "name": "test_can_get_params",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_set_params": {
            "name": "test_can_set_params",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/reprsimil/test_brsa.py": {
        "test_can_instantiate": {
            "name": "test_can_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit": {
            "name": "test_fit",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nureg_determine": {
            "name": "test_nureg_determine",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_half_log_det": {
            "name": "test_half_log_det",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_n_nureg": {
            "name": "test_n_nureg",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/reprsimil/test_gbrsa.py": {
        "test_can_instantiate": {
            "name": "test_can_instantiate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit": {
            "name": "test_fit",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_SNR_grids": {
            "name": "test_SNR_grids",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_n_nureg": {
            "name": "test_n_nureg",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_flatten_num_int": {
            "name": "test_grid_flatten_num_int",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_flatten_num_int.setup_for_test": {
            "name": "setup_for_test",
            "location": 536,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/searchlight/test_searchlight.py": {
        "cube_sfn": {
            "name": "cube_sfn",
            "location": 28,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "float",
                    "int"
                ],
                "msk": [
                    "int",
                    "float",
                    "list[float]",
                    "List[float]",
                    "bool"
                ],
                "myrad": [
                    "bool",
                    "float",
                    "int"
                ],
                "bcast_var": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "test_searchlight_with_cube": {
            "name": "test_searchlight_with_cube",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_searchlight_with_cube_poolsize_1": {
            "name": "test_searchlight_with_cube_poolsize_1",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "diamond_sfn": {
            "name": "diamond_sfn",
            "location": 95,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "float",
                    "int"
                ],
                "msk": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "myrad": [
                    "bool",
                    "float",
                    "int"
                ],
                "bcast_var": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "test_searchlight_with_diamond": {
            "name": "test_searchlight_with_diamond",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "ball_sfn": {
            "name": "ball_sfn",
            "location": 133,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "float",
                    "int"
                ],
                "msk": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "myrad": [
                    "float",
                    "numpy.ndarray",
                    "List[float]",
                    "int",
                    "bytes",
                    "str"
                ],
                "bcast_var": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "test_searchlight_with_ball": {
            "name": "test_searchlight_with_ball",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_instantiate": {
            "name": "test_instantiate",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "voxel_test_sfn": {
            "name": "voxel_test_sfn",
            "location": 181,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "T"
                ],
                "msk": [
                    "bool",
                    "bytes",
                    "float",
                    "int"
                ],
                "myrad": [
                    "bytes",
                    "list",
                    "bool",
                    "list[]",
                    "Tuple[str]",
                    "tuple[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "bcast": [
                    "bool",
                    "bytes",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "block_test_sfn": {
            "name": "block_test_sfn",
            "location": 210,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "bool",
                    "dict",
                    "MutableSet[T]"
                ],
                "msk": [
                    "int",
                    "Optional[int]",
                    "tuple",
                    "Optional[bool]",
                    "bool",
                    "Optional[Exception]",
                    "float"
                ],
                "myrad": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "bcast_var": [
                    "bool",
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "Optional[Sequence['cirq.Qid']]",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "extra_params": [
                    "bool",
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "Optional[Sequence['cirq.Qid']]",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        },
        "test_correctness": {
            "name": "test_correctness",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_correctness.voxel_test": {
            "name": "voxel_test",
            "location": 221,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bytes"
                ],
                "mask": [
                    "numpy.ndarray",
                    "List[Dict]"
                ],
                "max_blk_edge": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "dict",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "rad": [
                    "int",
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "test_correctness.block_test": {
            "name": "block_test",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "bool"
                ],
                "mask": [
                    "str",
                    "Callable"
                ],
                "max_blk_edge": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "list",
                    "Dict[str, Any]"
                ],
                "rad": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "bool",
                    "float",
                    "Optional[Iterable]"
                ]
            }
        },
        "test_correctness.do_test": {
            "name": "do_test",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dim0": [
                    "Optional[Exception]"
                ],
                "dim1": [
                    "Optional[Exception]"
                ],
                "dim2": [
                    "Optional[Exception]"
                ],
                "ntr": [
                    "int"
                ],
                "nsubj": [
                    "int"
                ],
                "max_blk_edge": [
                    "float"
                ],
                "rad": [
                    "float"
                ]
            }
        }
    },
    "brainiak-master/tests/utils/test_fmrisim.py": {
        "test_generate_signal": {
            "name": "test_generate_signal",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_stimfunction": {
            "name": "test_generate_stimfunction",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_signal": {
            "name": "test_apply_signal",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_noise": {
            "name": "test_generate_noise",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_noise_spatial": {
            "name": "test_generate_noise_spatial",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mask_brain": {
            "name": "test_mask_brain",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calc_noise": {
            "name": "test_calc_noise",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_1D_gauss_shape": {
            "name": "test_gen_1D_gauss_shape",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_1d_gauss_range": {
            "name": "test_gen_1d_gauss_range",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_1D_gauss_even_spacing": {
            "name": "test_gen_1D_gauss_even_spacing",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "brainiak-master/tests/utils/test_fmrisim_real_time.py": {
        "test_default": {
            "name": "test_default",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "dd": [
                    "str",
                    "dict[typing.Text, int]"
                ]
            }
        },
        "test_signal_size": {
            "name": "test_signal_size",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "dd": [
                    "dict[typing.Text, int]"
                ]
            }
        },
        "test_multivariate": {
            "name": "test_multivariate",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "dd": [
                    "dict[typing.Text, int]"
                ]
            }
        },
        "test_save_dicoms_realtime": {
            "name": "test_save_dicoms_realtime",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [],
                "dd": [
                    "str",
                    "dict[typing.Text, int]"
                ]
            }
        }
    },
    "brainiak-master/tests/utils/test_utils.py": {
        "test_tri_sym_convert": {
            "name": "test_tri_sym_convert",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sumexp": {
            "name": "test_sumexp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_concatenate_not_none": {
            "name": "test_concatenate_not_none",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cov2corr": {
            "name": "test_cov2corr",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ReadDesign": {
            "name": "test_ReadDesign",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_design": {
            "name": "test_gen_design",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_center_mass_exp": {
            "name": "test_center_mass_exp",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_p_from_null": {
            "name": "test_p_from_null",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phase_randomize": {
            "name": "test_phase_randomize",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_timeseries_input": {
            "name": "test_check_timeseries_input",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_correlation": {
            "name": "test_array_correlation",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
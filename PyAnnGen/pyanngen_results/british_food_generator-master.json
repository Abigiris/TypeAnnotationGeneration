{
    "british_food_generator-master/british_food_generator/app.py": {
        "start_monitoring": {
            "name": "start_monitoring",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monitor": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "read_root": {
            "name": "read_root",
            "location": 43,
            "return": [
                "salon.models.Stylist",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "starlette.requests.Request",
                    "str",
                    "bytes",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]"
                ],
                "builder": [
                    "str",
                    "OrderedDict",
                    "bytes",
                    "int",
                    "fonduer.candidates.models.Candidate",
                    "Optional[float]",
                    "Union[Dict, List]"
                ],
                "templates": [
                    "starlette.requests.Request",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "raw": {
            "name": "raw",
            "location": 72,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "Type[T]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "Mapping[str, Any]",
                    "Callable[[T], bool]",
                    "Callable[[], None]",
                    "T"
                ]
            }
        },
        "health": {
            "name": "health",
            "location": 77,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "monitor": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 86,
            "return": [
                "dict[typing.Text, dict[typing.Text, list[str]]]",
                "bool",
                "models.User",
                "str",
                "asyncio.Lock"
            ],
            "arguments": {
                "active_container": [
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "british_food_generator-master/british_food_generator/app_logging.py": {},
    "british_food_generator-master/british_food_generator/complete_dish.py": {
        "CompleteDishBuilder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namer": [
                    "british_food_generator.name_generation.FoodNamer"
                ],
                "describer": [
                    "british_food_generator.description_generation.FoodDescriber"
                ],
                "imager": [
                    "british_food_generator.image_generation.ImageGenerator"
                ]
            }
        },
        "CompleteDishBuilder.generate_dish": {
            "name": "generate_dish",
            "location": 15,
            "return": [
                "british_food_generator.models.ClassicBritishDish"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "british_food_generator-master/british_food_generator/description_generation.py": {
        "FoodDescriber.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "FoodDescriber.generate_food_description": {
            "name": "generate_food_description",
            "location": 22,
            "return": [
                "FoodDescription",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FoodDescriber._get_name_words": {
            "name": "_get_name_words",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "FoodDescriber._desc_at_total_random": {
            "name": "_desc_at_total_random",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoodDescriber._score_description": {
            "name": "_score_description",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "desc": [
                    "str"
                ],
                "name_words": [
                    "List[str]"
                ]
            }
        }
    },
    "british_food_generator-master/british_food_generator/image_generation.py": {
        "_matches_words": {
            "name": "_matches_words",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "image_path": [
                    "str"
                ],
                "words": [
                    "Set[str]"
                ]
            }
        },
        "ImageGenerator.image_path": {
            "name": "image_path",
            "location": 48,
            "return": [
                "ImgUrl",
                "str",
                "dict",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "food_name": [
                    "str"
                ],
                "food_desc": [
                    "str"
                ]
            }
        }
    },
    "british_food_generator-master/british_food_generator/meta.py": {},
    "british_food_generator-master/british_food_generator/models.py": {},
    "british_food_generator-master/british_food_generator/name_generation.py": {
        "one_of_in_x_times": {
            "name": "one_of_in_x_times",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "choices": [
                    "Set[str]"
                ],
                "times": [
                    "int"
                ]
            }
        },
        "choose": {
            "name": "choose",
            "location": 14,
            "return": [
                "T"
            ],
            "arguments": {
                "choices": [
                    "List[T]"
                ]
            }
        },
        "_tidy_name": {
            "name": "_tidy_name",
            "location": 106,
            "return": [
                "FoodName",
                "str",
                "Tuple[bool, str]",
                "bool",
                "NamedTuple",
                "Dict[str, str]"
            ],
            "arguments": {
                "food_name": [
                    "str"
                ]
            }
        },
        "FoodNamer.generate_food_name": {
            "name": "generate_food_name",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "british_food_generator-master/british_food_generator/__init__.py": {},
    "british_food_generator-master/british_food_generator/monitoring/asyncio.py": {
        "_get_coroutine_name": {
            "name": "_get_coroutine_name",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "collections.abc.Awaitable[]",
                    "dict[str, str]",
                    "Awaitable",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict",
                    "asyncio.Future",
                    "taskiapplication.models.task.Task",
                    "asyncio.Task[Any]"
                ]
            }
        },
        "Monitor.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "float"
                ],
                "warn_threshold": [
                    "float"
                ]
            }
        },
        "Monitor.start": {
            "name": "start",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._warn": {
            "name": "_warn",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "Task",
                    "models.Task",
                    "pc.data.Task"
                ]
            }
        }
    },
    "british_food_generator-master/british_food_generator/monitoring/__init__.py": {},
    "british_food_generator-master/british_food_generator/test/test_quickly.py": {
        "test_food_name_is_a_string": {
            "name": "test_food_name_is_a_string",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_random_whitespace": {
            "name": "test_no_random_whitespace",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_food_description_is_a_string": {
            "name": "test_food_description_is_a_string",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_serves_some_html_at_the_root": {
            "name": "test_app_serves_some_html_at_the_root",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_api_end_point_serves_some_json": {
            "name": "test_app_api_end_point_serves_some_json",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "british_food_generator-master/british_food_generator/test/__init__.py": {}
}
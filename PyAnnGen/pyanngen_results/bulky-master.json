{
    "bulky-master/setup.py": {},
    "bulky-master/bulky/consts.py": {},
    "bulky-master/bulky/errors.py": {
        "InvalidColumnError.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "tuple[]",
                    "int",
                    "tuple",
                    "None",
                    "Optional[str]",
                    "typing.Callable[KT, VT]",
                    "Callable[[KT], VT]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Type",
                    "Type[RuntimeError]",
                    "T"
                ],
                "message": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "index": [
                    "int",
                    "None",
                    "Optional[Tuple[Any, Any]]",
                    "Optional[str]",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "Optional[List[str]]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "InvalidValueError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "bool"
                ],
                "message": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "bulky-master/bulky/types.py": {},
    "bulky-master/bulky/__init__.py": {},
    "bulky-master/bulky/functions/insert.py": {
        "insert": {
            "name": "insert",
            "location": 18,
            "return": [
                "list[]",
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "session": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[int]"
                ],
                "table_or_model": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[int]"
                ],
                "values_series": [
                    "bool",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[Mapping]",
                    "typing.Mapping",
                    "None"
                ],
                "returning": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        }
    },
    "bulky-master/bulky/functions/update.py": {
        "update": {
            "name": "update",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "table_or_model": [
                    "Union[(sqlalchemy.orm.decl_api.DeclarativeMeta, sqlalchemy.orm.mapper.Mapper, sqlalchemy.sql.schema.Table)]"
                ],
                "values_series": [
                    "Sequence[Dict[(Union[(str, sqlalchemy.orm.attributes.InstrumentedAttribute, sqlalchemy.sql.schema.Column)], Any)]]"
                ],
                "returning": [
                    "Optional[Sequence[Union[(str, sqlalchemy.orm.attributes.InstrumentedAttribute, sqlalchemy.sql.schema.Column)]]]"
                ],
                "reference": [
                    "Iterable[Union[(str, sqlalchemy.orm.attributes.InstrumentedAttribute, sqlalchemy.sql.schema.Column)]]"
                ]
            }
        }
    },
    "bulky-master/bulky/functions/__init__.py": {},
    "bulky-master/bulky/internals/sql.py": {},
    "bulky-master/bulky/internals/utils.py": {
        "get_table": {
            "name": "get_table",
            "location": 34,
            "return": [
                "Optional[str]",
                "list",
                "bytes"
            ],
            "arguments": {
                "table_or_model": [
                    "str",
                    "table.Table",
                    "Optional[BaseException]"
                ]
            }
        },
        "get_table_name": {
            "name": "get_table_name",
            "location": 51,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "table_or_model": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]"
                ]
            }
        },
        "is_db_type_comparable": {
            "name": "is_db_type_comparable",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "db_type": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "clean_returning": {
            "name": "clean_returning",
            "location": 89,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "table_or_model": [
                    "Union[(sa.orm.decl_api.DeclarativeMeta, sa.orm.mapper.Mapper, sa.sql.schema.Table)]"
                ],
                "returning": [
                    "Optional[Sequence[Union[(str, sa.orm.attributes.InstrumentedAttribute, sa.sql.schema.Column)]]]"
                ]
            }
        },
        "validate_values": {
            "name": "validate_values",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [
                    "Dict[(Union[(str, sa.orm.attributes.InstrumentedAttribute, sa.sql.schema.Column)], Any)]"
                ],
                "values_index": [
                    "int"
                ]
            }
        },
        "clean_values": {
            "name": "clean_values",
            "location": 121,
            "return": [
                "float",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "table_or_model": [
                    "int",
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ],
                "values_series": [
                    "bool",
                    "tuple",
                    "int",
                    "Optional[List[Any]]"
                ],
                "cast_db_types": [
                    "str",
                    "int",
                    "List[str]",
                    "List[mypy.types.Type]",
                    "bool"
                ],
                "column_types": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Dict[int, str]",
                    "List[Dict[str, int]]"
                ]
            }
        },
        "get_column_types": {
            "name": "get_column_types",
            "location": 205,
            "return": [
                "Union[str, 'Type']",
                "dict",
                "Callable",
                "Type"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]",
                    "sqlalchemy.engine.reflection.Inspector"
                ],
                "table_or_model": [
                    "Optional[str]",
                    "Type[T]",
                    "str",
                    "sqlalchemy.engine.reflection.Inspector",
                    "table.Table"
                ]
            }
        },
        "to_db_literal": {
            "name": "to_db_literal",
            "location": 229,
            "return": [
                "Optional[T]",
                "str",
                "int",
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "apistar.types.ParamAnnotation",
                    "T",
                    "bytes"
                ],
                "cast_to": [
                    "str",
                    "Type",
                    "type",
                    "List[mypy.types.Instance]",
                    "int",
                    "float"
                ]
            }
        },
        "get_table_columns": {
            "name": "get_table_columns",
            "location": 260,
            "return": [
                "List[str]",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "table_or_model": [
                    "str",
                    "bool",
                    "Type[T]",
                    "sqlalchemy.sql.schema.Table"
                ]
            }
        },
        "get_column_key": {
            "name": "get_column_key",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "table_or_model": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "column": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "value_index": [
                    "str",
                    "Optional[str]"
                ],
                "columns": [
                    "str",
                    "List[Tuple[int, int]]",
                    "Optional[List[Any]]",
                    "List[str]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Hashable"
                ]
            }
        }
    },
    "bulky-master/bulky/internals/__init__.py": {},
    "bulky-master/tests/db.py": {
        "get_engine": {
            "name": "get_engine",
            "location": 37,
            "return": [
                "sa.engine.base.Engine"
            ],
            "arguments": {}
        },
        "create_tables": {
            "name": "create_tables",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "str",
                    "set[]",
                    "int",
                    "set"
                ]
            }
        },
        "drop_tables": {
            "name": "drop_tables",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "int",
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "db_setup": {
            "name": "db_setup",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db_teardown": {
            "name": "db_teardown",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BulkyTest.setUpClass": {
            "name": "setUpClass",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "typing.Type",
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "BulkyTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[Any]",
                    "typing.Callable[, ]",
                    "Type[T]",
                    "Callable"
                ]
            }
        },
        "BulkyTest.setUp": {
            "name": "setUp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BulkyTest.tearDown": {
            "name": "tearDown",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bulky-master/tests/test_errors.py": {
        "ErrorsTest.test_error_messages_rendering": {
            "name": "test_error_messages_rendering",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bulky-master/tests/test_insert.py": {
        "InsertTest.test_single": {
            "name": "test_single",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_empty_dataset": {
            "name": "test_empty_dataset",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_no_returning": {
            "name": "test_no_returning",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_bulk": {
            "name": "test_bulk",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_errors_wrong_data_column": {
            "name": "test_errors_wrong_data_column",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_errors_wrong_returning_column": {
            "name": "test_errors_wrong_returning_column",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_sqlalchemy_default_value": {
            "name": "test_sqlalchemy_default_value",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bulky-master/tests/test_update.py": {
        "UpdateTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTest.test_scalar_fields": {
            "name": "test_scalar_fields",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTest.test_multiple_references": {
            "name": "test_multiple_references",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTest.test_returning": {
            "name": "test_returning",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTest.test_diff_update": {
            "name": "test_diff_update",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTest.update_and_validate": {
            "name": "update_and_validate",
            "location": 80,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "deeplearning.deepsmith.db.session_t",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "returning": [
                    "str",
                    "None",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "references": [
                    "Iterable[Union[(str, sqlalchemy.orm.attributes.InstrumentedAttribute, sqlalchemy.sql.schema.Column)]]"
                ]
            }
        }
    },
    "bulky-master/tests/test_utils.py": {
        "UtilsTest.test_get_table": {
            "name": "test_get_table",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_get_table_name": {
            "name": "test_get_table_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_is_db_type_comparable": {
            "name": "test_is_db_type_comparable",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_clean_returning": {
            "name": "test_clean_returning",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_validate_values": {
            "name": "test_validate_values",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_clean_values": {
            "name": "test_clean_values",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_clean_values_empty_dataset": {
            "name": "test_clean_values_empty_dataset",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_clean_values_fields_mismatch": {
            "name": "test_clean_values_fields_mismatch",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_clean_values_type_cast": {
            "name": "test_clean_values_type_cast",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_get_column_types": {
            "name": "test_get_column_types",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_to_db_literal": {
            "name": "test_to_db_literal",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_get_table_columns": {
            "name": "test_get_table_columns",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_get_column_key": {
            "name": "test_get_column_key",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bulky-master/tests/__init__.py": {}
}
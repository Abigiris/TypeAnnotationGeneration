{
    "bumpver-master/fastentrypoints.py": {
        "get_args": {
            "name": "get_args",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Exception",
                    "str"
                ],
                "dist": [
                    "str",
                    "bool"
                ],
                "header": [
                    "Mapping",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bumpver-master/setup.py": {
        "project_path": {
            "name": "project_path",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "bumpver-master/scripts/exit_0_if_empty.py": {},
    "bumpver-master/scripts/update_readme_examples.py": {
        "update": {
            "name": "update",
            "location": 17,
            "return": [],
            "arguments": {
                "content": [],
                "marker": [],
                "value": []
            }
        },
        "_color_line": {
            "name": "_color_line",
            "location": 26,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "print_diff": {
            "name": "print_diff",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "old_content": [],
                "new_content": []
            }
        },
        "update_md_code_output": {
            "name": "update_md_code_output",
            "location": 50,
            "return": [],
            "arguments": {
                "content": [],
                "command": []
            }
        },
        "weeknum_example": {
            "name": "weeknum_example",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "pattern_examples": {
            "name": "pattern_examples",
            "location": 71,
            "return": [],
            "arguments": {}
        }
    },
    "bumpver-master/src/bumpver/cli.py": {
        "_configure_logging": {
            "name": "_configure_logging",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "Type"
                ]
            }
        },
        "_validate_date": {
            "name": "_validate_date",
            "location": 77,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "Optional[Iterable]",
                "Callable[[Type,str],bool]"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]"
                ],
                "pin_date": [
                    "float",
                    "datetime.datetime",
                    "None",
                    "datetime.date",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "_validate_release_tag": {
            "name": "_validate_release_tag",
            "location": 95,
            "return": [
                "None",
                "Set",
                "Callable[,Dict[str,object]]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Sequence[str]",
                    "None"
                ]
            }
        },
        "_validate_flags": {
            "name": "_validate_flags",
            "location": 107,
            "return": [
                "List",
                "None"
            ],
            "arguments": {
                "raw_pattern": [
                    "BaseException",
                    "Callable"
                ],
                "major": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "minor": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "patch": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "_log_no_change": {
            "name": "_log_no_change",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "subcmd": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "version_pattern": [
                    "List[str]",
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_get_normalized_pattern": {
            "name": "_get_normalized_pattern",
            "location": 147,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "raw_pattern": [
                    "str",
                    "bool",
                    "io.IOBase"
                ],
                "version_pattern": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "version_options": {
            "name": "version_options",
            "location": 202,
            "return": [
                "int",
                "str",
                "Type",
                "deque"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Type"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "old_version": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[_,Any]",
                    "int",
                    "Iterable[T]",
                    "Callable[[T],Any]"
                ],
                "pattern": [
                    "bool",
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "int"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Union[str,bytes]",
                    "bool"
                ],
                "major": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "minor": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "patch": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "tag": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "bytes",
                    "float",
                    "Dict[str,Any]",
                    "Dict[str,Dict]",
                    "Dict[str,str]"
                ],
                "tag_num": [
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "Iterable[T]",
                    "Callable[[T],Any]"
                ],
                "pin_date": [
                    "bool",
                    "datetime.datetime",
                    "str",
                    "float",
                    "Optional[str]",
                    "int",
                    "Dict"
                ],
                "date": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "datetime.datetime",
                    "datetime"
                ],
                "set_version": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional[Iterable[str]]",
                    "Type",
                    "Optional[List[str]]",
                    "Optional[Type[Exception]]",
                    "bool"
                ]
            }
        },
        "_grep_text": {
            "name": "_grep_text",
            "location": 317,
            "return": [
                "Iterable[str]",
                "Generator[str]"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[Dict]"
                ],
                "color": [
                    "str",
                    "Union[str,None]",
                    "None"
                ]
            }
        },
        "_grep": {
            "name": "_grep",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_pattern": [
                    "str",
                    "IO[str]",
                    "IO"
                ],
                "file_ios": [
                    "str",
                    "TextIO",
                    "bool"
                ],
                "color": [
                    "Callable",
                    "str",
                    "Tuple[int,int]",
                    "Type",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "grep": {
            "name": "grep",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "int",
                    "str",
                    "Tuple",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "files": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "None"
                ],
                "version_pattern": [
                    "str",
                    "int",
                    "None"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "bool",
                    "Dict",
                    "Optional[str]"
                ],
                "fetch": [
                    "bool",
                    "Dict",
                    "Dict[str,Dict[str,str]]",
                    "Callable",
                    "Dict[str,Any]"
                ],
                "env": [
                    "bool",
                    "List[Tuple[str,str]]",
                    "Dict",
                    "str",
                    "Optional[List]"
                ]
            }
        },
        "_colored_diff_lines": {
            "name": "_colored_diff_lines",
            "location": 448,
            "return": [
                "Iterable[str]",
                "Generator[str]",
                "Generator[Text]"
            ],
            "arguments": {
                "diff": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_v2_get_diff": {
            "name": "_v2_get_diff",
            "location": 462,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[List[int]]"
            ],
            "arguments": {
                "cfg": [
                    "float",
                    "datetime.timedelta",
                    "str",
                    "bool"
                ],
                "new_version": [
                    "bool"
                ]
            }
        },
        "_v1_get_diff": {
            "name": "_v1_get_diff",
            "location": 468,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[List[int]]"
            ],
            "arguments": {
                "cfg": [
                    "float",
                    "datetime.timedelta",
                    "str",
                    "bool"
                ],
                "new_version": [
                    "bool"
                ]
            }
        },
        "get_diff": {
            "name": "get_diff",
            "location": 474,
            "return": [
                "bool",
                "List[dict]",
                "List[Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "bool",
                    "str",
                    "Tuple[bool,bool,bool]",
                    "Tuple[Union[bool,bool,bool]]"
                ],
                "new_version": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "_print_diff_str": {
            "name": "_print_diff_str",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "diff": [
                    "int",
                    "float",
                    "bool",
                    "None",
                    "Optional[bool]"
                ]
            }
        },
        "_print_diff": {
            "name": "_print_diff",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "new_version": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "_is_valid_version": {
            "name": "_is_valid_version",
            "location": 501,
            "return": [
                "bool"
            ],
            "arguments": {
                "raw_pattern": [
                    "str",
                    "Dict[str,Any]",
                    "Union[str,IO[str]]",
                    "List[Callable]",
                    "Dict[str,float]",
                    "Type",
                    "bool"
                ],
                "old_version": [
                    "bool",
                    "Dict[str,Any]",
                    "List[int]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "new_version": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "incr_dispatch": {
            "name": "incr_dispatch",
            "location": 520,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "old_version": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "raw_pattern": [
                    "str",
                    "bool",
                    "Optional[Tuple[int,int]]",
                    "Pattern[str]"
                ]
            }
        },
        "_update": {
            "name": "_update",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "Dict",
                    "List",
                    "str",
                    "bool",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "new_version": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "commit_message": [
                    "int",
                    "Counter",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "allow_dirty": [
                    "bool",
                    "str",
                    "Dict",
                    "List",
                    "Mapping[str,Any]"
                ]
            }
        },
        "_try_update": {
            "name": "_try_update",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "new_version": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "commit_message": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "allow_dirty": [
                    "bool",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "dry": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]"
                ]
            }
        },
        "get_latest_vcs_version_tag": {
            "name": "get_latest_vcs_version_tag",
            "location": 643,
            "return": [
                "None",
                "Optional[str]",
                "Optional[List[str]]",
                "List[str]",
                "str",
                "Optional[bool]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "cfg": [
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "fetch": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_update_cfg_from_vcs": {
            "name": "_update_cfg_from_vcs",
            "location": 660,
            "return": [
                "str",
                "int",
                "Dict",
                "bool",
                "Dict[str,Any]",
                "float"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "Dict",
                    "bool",
                    "yacron.config.JobConfig"
                ],
                "fetch": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_parse_vcs_options": {
            "name": "_parse_vcs_options",
            "location": 679,
            "return": [
                "int",
                "subprocess.Popen",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "dict",
                    "str"
                ],
                "commit": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "tag_commit": [
                    "Iterable[str]",
                    "None",
                    "str",
                    "List[str]",
                    "Sequence",
                    "Optional[float]",
                    "float"
                ],
                "push": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 742,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "dry": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "allow_dirty": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "fetch": [
                    "bool",
                    "str",
                    "Any",
                    "Dict[Tuple[str,str],Exception]"
                ],
                "verbose": [
                    "bool",
                    "int"
                ],
                "major": [
                    "bool",
                    "str",
                    "int"
                ],
                "minor": [
                    "bool",
                    "str",
                    "int"
                ],
                "patch": [
                    "bool",
                    "str",
                    "int"
                ],
                "tag": [
                    "str",
                    "None",
                    "bool",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "tag_num": [
                    "bool",
                    "str",
                    "int"
                ],
                "pin_date": [
                    "bool",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[List[Callable]]",
                    "str",
                    "List[str]"
                ],
                "date": [
                    "None",
                    "str",
                    "Optional[datetime.date]",
                    "datetime.date"
                ],
                "set_version": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Type[Exception]]",
                    "Type",
                    "Optional[Any]",
                    "Any"
                ],
                "commit_message": [
                    "Optional[int]",
                    "None",
                    "bool",
                    "List[int]",
                    "int",
                    "Optional[Any]",
                    "Any",
                    "List[Issue]",
                    "List[_]"
                ],
                "commit": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "Sequence[str]",
                    "Tuple[str,Dict[str,Any]]",
                    "Tuple[Union[str,dict[str,Any]]]"
                ],
                "tag_commit": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "Sequence[str]",
                    "Tuple[str,Dict[str,Any]]",
                    "Tuple[Union[str,dict[str,Any]]]"
                ],
                "push": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "Sequence[str]",
                    "Tuple[str,Dict[str,Any]]",
                    "Tuple[Union[str,dict[str,Any]]]"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/config.py": {
        "_pick_config_filepath": {
            "name": "_pick_config_filepath",
            "location": 49,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "_parse_config_and_format": {
            "name": "_parse_config_and_format",
            "location": 80,
            "return": [
                "str",
                "Tuple[Union[str,dict]]"
            ],
            "arguments": {
                "path": [
                    "Optional[str]"
                ]
            }
        },
        "init_project_ctx": {
            "name": "init_project_ctx",
            "location": 93,
            "return": [
                "ProjectContext"
            ],
            "arguments": {
                "project_path": [
                    "Text",
                    "str",
                    "int",
                    "Dict",
                    "Optional[str]",
                    "pathlib2.Path"
                ]
            }
        },
        "_debug_str": {
            "name": "_debug_str",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ]
            }
        },
        "_parse_cfg_file_patterns": {
            "name": "_parse_cfg_file_patterns",
            "location": 162,
            "return": [
                "None",
                "Generator[tuple[list[str]]]",
                "Iterator[object]",
                "str",
                "bool",
                "Tuple[int,str]",
                "List[str]"
            ],
            "arguments": {
                "cfg_parser": [
                    "bool"
                ]
            }
        },
        "_parse_cfg": {
            "name": "_parse_cfg",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cfg_buffer": [
                    "str",
                    "int"
                ]
            }
        },
        "_parse_toml": {
            "name": "_parse_toml",
            "location": 229,
            "return": [
                "Dict[Union[tuple[Union[Text,bool]],tuple[Optional[Text]]],]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cfg_buffer": [
                    "str",
                    "Dict[str,Any]",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "_iter_glob_expanded_file_patterns": {
            "name": "_iter_glob_expanded_file_patterns",
            "location": 250,
            "return": [
                "Iterator[FileRawPatternsItem]",
                "Generator[tuple[Union[str,tuple[str]]]]",
                "Generator[tuple[Union[tuple[str],tuple[str]]]]"
            ],
            "arguments": {
                "raw_patterns_by_file": [
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "TextIO",
                    "bytes",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "_compile_v1_file_patterns": {
            "name": "_compile_v1_file_patterns",
            "location": 265,
            "return": [
                "Iterator[FilePatternsItem]",
                "Generator[tuple]"
            ],
            "arguments": {
                "raw_cfg": [
                    "str"
                ]
            }
        },
        "_compile_v2_file_patterns": {
            "name": "_compile_v2_file_patterns",
            "location": 281,
            "return": [
                "Iterable[FilePatternsItem]",
                "Generator[tuple]"
            ],
            "arguments": {
                "raw_cfg": [
                    "str"
                ]
            }
        },
        "_compile_file_patterns": {
            "name": "_compile_file_patterns",
            "location": 309,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "raw_cfg": [
                    "str"
                ],
                "is_new_pattern": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "_validate_version_with_pattern": {
            "name": "_validate_version_with_pattern",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "current_version": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "version_pattern": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "is_new_pattern": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_parse_config": {
            "name": "_parse_config",
            "location": 361,
            "return": [
                "Config",
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "raw_cfg": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_parse_current_version_default_pattern": {
            "name": "_parse_current_version_default_pattern",
            "location": 411,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "raw_cfg": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "raw_cfg_text": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "_set_raw_config_defaults": {
            "name": "_set_raw_config_defaults",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_cfg": [
                    "str"
                ]
            }
        },
        "_parse_raw_config": {
            "name": "_parse_raw_config",
            "location": 448,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 473,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "List[str]",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "pathlib2.Path"
                ],
                "cfg_missing_ok": [
                    "bool"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 489,
            "return": [
                "Tuple[Union[list,str,int,dict]]",
                "str",
                "Exception"
            ],
            "arguments": {
                "project_path": [
                    "str",
                    "Text"
                ],
                "cfg_missing_ok": [
                    "str",
                    "bool"
                ]
            }
        },
        "_initial_version": {
            "name": "_initial_version",
            "location": 609,
            "return": [
                "str",
                "int",
                "datetime.timedelta"
            ],
            "arguments": {}
        },
        "_initial_version_pep440": {
            "name": "_initial_version_pep440",
            "location": 613,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "default_config": {
            "name": "default_config",
            "location": 617,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "write_content": {
            "name": "write_content",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "_ConfigParser.optionxform": {
            "name": "optionxform",
            "location": 184,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "optionstr": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/parse.py": {
        "_has_overlap": {
            "name": "_has_overlap",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "needle": [
                    "int",
                    "Dict",
                    "bytes",
                    "T"
                ],
                "haystack": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_iter_for_pattern": {
            "name": "_iter_for_pattern",
            "location": 55,
            "return": [
                "PatternMatches",
                "Generator[PatternMatch]"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterable[str]",
                    "int"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "iter_matches": {
            "name": "iter_matches",
            "location": 62,
            "return": [
                "PatternMatches",
                "Generator"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterator"
                ],
                "patterns": [
                    "List[str]",
                    "List[AnyStr]",
                    "str"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/patterns.py": {},
    "bumpver-master/src/bumpver/pysix.py": {
        "quote": {
            "name": "quote",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bytes",
                    "Union[bytes,str]",
                    "Dict",
                    "Mapping[Any,str]",
                    "Callable",
                    "Sequence[str]"
                ],
                "safe": [
                    "str",
                    "Text"
                ],
                "encoding": [
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ],
                "errors": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Optional[float]",
                    "float",
                    "Optional[Type]",
                    "Type"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/regexfmt.py": {
        "format_regex": {
            "name": "format_regex",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "regex": [
                    "str",
                    "MutableMapping[str,Any]"
                ]
            }
        },
        "pyexpr_regex": {
            "name": "pyexpr_regex",
            "location": 55,
            "return": [
                "Text",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "regex": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "regex101_url": {
            "name": "regex101_url",
            "location": 67,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "regex_pattern": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/rewrite.py": {
        "detect_line_sep": {
            "name": "detect_line_sep",
            "location": 27,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "iter_path_patterns_items": {
            "name": "iter_path_patterns_items",
            "location": 59,
            "return": [
                "Iterable[PathPatternsItem]",
                "Generator[tuple[tuple[str]]]"
            ],
            "arguments": {
                "file_patterns": [
                    "Dict[str,str]",
                    "Dict",
                    "config.PatternsByGlob",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "diff_lines": {
            "name": "diff_lines",
            "location": 71,
            "return": [
                "List",
                "List[str]",
                "str",
                "List[Dict]",
                "Optional[Type]"
            ],
            "arguments": {
                "rfd": [
                    "str",
                    "Type",
                    "Optional[Outcome]",
                    "None",
                    "Collection[T]",
                    "Collection"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/utils.py": {
        "memo": {
            "name": "memo",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "memo.wrapper": {
            "name": "wrapper",
            "location": 18,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "bumpver-master/src/bumpver/v1patterns.py": {
        "_replace_pattern_parts": {
            "name": "_replace_pattern_parts",
            "location": 180,
            "return": [
                "str",
                "bool",
                "IO",
                "int"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "IO"
                ]
            }
        },
        "_init_composite_patterns": {
            "name": "_init_composite_patterns",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_compile_pattern_re": {
            "name": "_compile_pattern_re",
            "location": 201,
            "return": [
                "int",
                "str",
                "Type",
                "List[List[str]]"
            ],
            "arguments": {
                "normalized_pattern": [
                    "str",
                    "float",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        },
        "_normalized_pattern": {
            "name": "_normalized_pattern",
            "location": 210,
            "return": [
                "str",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "version_pattern": [
                    "str",
                    "Exception",
                    "bytes"
                ],
                "raw_pattern": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "compile_pattern": {
            "name": "compile_pattern",
            "location": 231,
            "return": [
                "Pattern",
                "int",
                "bool",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "version_pattern": [
                    "int",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Optional[str]",
                    "Mapping",
                    "str"
                ],
                "raw_pattern": [
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "compile_patterns": {
            "name": "compile_patterns",
            "location": 238,
            "return": [
                "List",
                "str",
                "List[List[str]]",
                "Dict[str,int]"
            ],
            "arguments": {
                "version_pattern": [
                    "str",
                    "bool",
                    "Dict",
                    "Exception",
                    "Type",
                    "int"
                ],
                "raw_patterns": [
                    "str",
                    "Dict",
                    "bool",
                    "int",
                    "Exception",
                    "Type"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/v1rewrite.py": {
        "rewrite_lines": {
            "name": "rewrite_lines",
            "location": 23,
            "return": [
                "int",
                "str",
                "bool",
                "List"
            ],
            "arguments": {
                "patterns": [
                    "Set[frozenset[int]]",
                    "Set[frozenset]"
                ],
                "new_vinfo": [
                    "str",
                    "int",
                    "Sequence",
                    "Optional[int]",
                    "List",
                    "Set",
                    "None",
                    "List[str]"
                ],
                "old_lines": [
                    "List[int]",
                    "Optional[float]",
                    "Iterable[bytes]",
                    "bool"
                ]
            }
        },
        "rfd_from_content": {
            "name": "rfd_from_content",
            "location": 55,
            "return": [
                "Mapping[str, Any]",
                "github_labels_sync.config.Config",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "patterns": [
                    "bool"
                ],
                "new_vinfo": [
                    "bool"
                ],
                "content": [
                    "str",
                    "Dict"
                ],
                "path": [
                    "Text",
                    "Union[str,IO]",
                    "Tuple[int,int]"
                ]
            }
        },
        "iter_rewritten": {
            "name": "iter_rewritten",
            "location": 88,
            "return": [
                "Iterable[rewrite.RewrittenFileData]",
                "Generator"
            ],
            "arguments": {
                "file_patterns": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "new_vinfo": [
                    "bool",
                    "version.VersionInfo"
                ]
            }
        },
        "diff": {
            "name": "diff",
            "location": 104,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "old_vinfo": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "new_vinfo": [
                    "bytes",
                    "List[str]",
                    "Sequence[str]",
                    "packaging.version.Version",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]"
                ],
                "file_patterns": [
                    "Dict[str,Any]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "rewrite_files": {
            "name": "rewrite_files",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "file_patterns": [
                    "str",
                    "List[str]",
                    "version.VersionInfo",
                    "config.PatternsByGlob",
                    "Iterable[str]"
                ],
                "new_vinfo": [
                    "str",
                    "List[str]",
                    "version.VersionInfo",
                    "config.PatternsByGlob",
                    "Iterable[str]"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/v1version.py": {
        "_is_cal_gt": {
            "name": "_is_cal_gt",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "None"
                ],
                "right": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "_ver_to_cal_info": {
            "name": "_ver_to_cal_info",
            "location": 38,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "vnfo": [
                    "Optional[float]",
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "cal_info": {
            "name": "cal_info",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "date": [
                    "None",
                    "int",
                    "datetime.date",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "_parse_field_values": {
            "name": "_parse_field_values",
            "location": 95,
            "return": [
                "int",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "field_values": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "int",
                    "list"
                ]
            }
        },
        "_is_calver": {
            "name": "_is_calver",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "cinfo": [
                    "Type",
                    "Dict[str,Any]"
                ]
            }
        },
        "_parse_pattern_groups": {
            "name": "_parse_pattern_groups",
            "location": 183,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "pattern_groups": [
                    "Dict[str,object]",
                    "bool"
                ]
            }
        },
        "_parse_version_info": {
            "name": "_parse_version_info",
            "location": 210,
            "return": [
                "Optional[List[float]]",
                "str"
            ],
            "arguments": {
                "pattern_groups": [
                    "str",
                    "bool",
                    "BaseException",
                    "Union[List,str]",
                    "List"
                ]
            }
        },
        "parse_version_info": {
            "name": "parse_version_info",
            "location": 237,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "version_str": [
                    "str"
                ],
                "raw_pattern": [
                    "Text",
                    "str",
                    "Tuple[List[str],Tuple[Literal,Literal],List[str]]",
                    "List"
                ]
            }
        },
        "is_valid": {
            "name": "is_valid",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "version_str": [
                    "str",
                    "Dict[str,dict[str,str]]",
                    "property",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]"
                ],
                "raw_pattern": [
                    "Text",
                    "str",
                    "property",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "format_version": {
            "name": "format_version",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "vinfo": [
                    "Tuple[int]",
                    "List[Tuple[Any, str, int]]",
                    "str"
                ],
                "raw_pattern": [
                    "str",
                    "int",
                    "Exception",
                    "Callable[,str]"
                ]
            }
        },
        "incr": {
            "name": "incr",
            "location": 380,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "old_version": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]"
                ],
                "raw_pattern": [
                    "Text",
                    "Dict",
                    "bool",
                    "Dict[str,str]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/v2patterns.py": {
        "_fmt_num": {
            "name": "_fmt_num",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "_fmt_bld": {
            "name": "_fmt_bld",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "_fmt_yy": {
            "name": "_fmt_yy",
            "location": 149,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "year_y": [
                    "int",
                    "str"
                ]
            }
        },
        "_fmt_0y": {
            "name": "_fmt_0y",
            "location": 153,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "year_y": [
                    "str",
                    "int",
                    "Union[int,str]"
                ]
            }
        },
        "_fmt_gg": {
            "name": "_fmt_gg",
            "location": 157,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "year_g": [
                    "int",
                    "str"
                ]
            }
        },
        "_fmt_0g": {
            "name": "_fmt_0g",
            "location": 161,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "year_g": [
                    "str",
                    "int",
                    "Union[int,str]"
                ]
            }
        },
        "_fmt_0m": {
            "name": "_fmt_0m",
            "location": 165,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "month": [
                    "Dict[str, str]",
                    "bytes",
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "str"
                ]
            }
        },
        "_fmt_0d": {
            "name": "_fmt_0d",
            "location": 169,
            "return": [
                "Text",
                "str",
                "bytes"
            ],
            "arguments": {
                "dom": [
                    "str",
                    "Tuple[int, int]",
                    "float",
                    "int"
                ]
            }
        },
        "_fmt_00j": {
            "name": "_fmt_00j",
            "location": 173,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "doy": [
                    "Dict[str, str]",
                    "bytes",
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "str"
                ]
            }
        },
        "_fmt_0w": {
            "name": "_fmt_0w",
            "location": 177,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "week_w": [
                    "Dict[str, str]",
                    "bytes",
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "str"
                ]
            }
        },
        "_fmt_0u": {
            "name": "_fmt_0u",
            "location": 181,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "week_u": [
                    "Dict[str, str]",
                    "bytes",
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "str"
                ]
            }
        },
        "_fmt_0v": {
            "name": "_fmt_0v",
            "location": 185,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "week_v": [
                    "int",
                    "AsyncIterator[T]",
                    "float"
                ]
            }
        },
        "_convert_to_pep440": {
            "name": "_convert_to_pep440",
            "location": 226,
            "return": [
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "version_pattern": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "normalize_pattern": {
            "name": "normalize_pattern",
            "location": 273,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "version_pattern": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "raw_pattern": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "_replace_pattern_parts": {
            "name": "_replace_pattern_parts",
            "location": 285,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "pattern": [
                    "int",
                    "bool"
                ]
            }
        },
        "_compile_pattern_re": {
            "name": "_compile_pattern_re",
            "location": 323,
            "return": [
                "int",
                "str",
                "Type",
                "List[List[str]]"
            ],
            "arguments": {
                "normalized_pattern": [
                    "str",
                    "float",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        },
        "compile_pattern": {
            "name": "compile_pattern",
            "location": 338,
            "return": [
                "Pattern",
                "int",
                "bool",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "version_pattern": [
                    "int",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Optional[str]",
                    "Mapping",
                    "str"
                ],
                "raw_pattern": [
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "compile_patterns": {
            "name": "compile_patterns",
            "location": 345,
            "return": [
                "List",
                "str",
                "List[List[str]]",
                "Dict[str,int]"
            ],
            "arguments": {
                "version_pattern": [
                    "str",
                    "bool",
                    "Dict",
                    "Exception",
                    "Type",
                    "int"
                ],
                "raw_patterns": [
                    "str",
                    "Dict",
                    "bool",
                    "int",
                    "Exception",
                    "Type"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/v2rewrite.py": {
        "rewrite_lines": {
            "name": "rewrite_lines",
            "location": 24,
            "return": [
                "int",
                "str",
                "bool",
                "List"
            ],
            "arguments": {
                "patterns": [
                    "Set[frozenset[int]]",
                    "Set[frozenset]"
                ],
                "new_vinfo": [
                    "str",
                    "int",
                    "Tuple[Tuple[int,int]]",
                    "Tuple[tuple[Union[int,int]]]"
                ],
                "old_lines": [
                    "List[int]",
                    "Optional[float]",
                    "Iterable[bytes]",
                    "bool"
                ]
            }
        },
        "rfd_from_content": {
            "name": "rfd_from_content",
            "location": 59,
            "return": [
                "Mapping[str, Any]",
                "github_labels_sync.config.Config",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "patterns": [
                    "bool"
                ],
                "new_vinfo": [
                    "bool"
                ],
                "content": [
                    "str",
                    "Dict"
                ],
                "path": [
                    "Text",
                    "Union[str,IO]",
                    "Tuple[int,int]"
                ]
            }
        },
        "_patterns_with_change": {
            "name": "_patterns_with_change",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "old_vinfo": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "new_vinfo": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "patterns": [
                    "List",
                    "bool"
                ]
            }
        },
        "iter_rewritten": {
            "name": "iter_rewritten",
            "location": 102,
            "return": [
                "Iterable[rewrite.RewrittenFileData]",
                "Generator"
            ],
            "arguments": {
                "file_patterns": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "new_vinfo": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable[[Any,Any],Any]",
                    "None",
                    "Callable[Any,Any,Any]"
                ]
            }
        },
        "diff": {
            "name": "diff",
            "location": 118,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "old_vinfo": [
                    "int",
                    "List[int]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "new_vinfo": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "file_patterns": [
                    "Dict[str,Any]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "rewrite_files": {
            "name": "rewrite_files",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "file_patterns": [
                    "str",
                    "List[str]",
                    "version.VersionInfo",
                    "config.PatternsByGlob",
                    "Iterable[str]"
                ],
                "new_vinfo": [
                    "str",
                    "List[str]",
                    "version.VersionInfo",
                    "config.PatternsByGlob",
                    "Iterable[str]"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/v2version.py": {
        "_is_cal_gt": {
            "name": "_is_cal_gt",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "left": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "None"
                ],
                "right": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "cal_info": {
            "name": "cal_info",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "date": [
                    "None",
                    "int",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "_ver_to_cal_info": {
            "name": "_ver_to_cal_info",
            "location": 77,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "vinfo": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "parse_field_values_to_cinfo": {
            "name": "parse_field_values_to_cinfo",
            "location": 106,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "field_values": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "parse_field_values_to_vinfo": {
            "name": "parse_field_values_to_vinfo",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "field_values": [
                    "str",
                    "list",
                    "dict",
                    "datetime.date",
                    "List[int]"
                ]
            }
        },
        "parse_version_info": {
            "name": "parse_version_info",
            "location": 268,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "version_str": [
                    "str"
                ],
                "raw_pattern": [
                    "Text",
                    "str",
                    "deque[str]"
                ]
            }
        },
        "is_valid": {
            "name": "is_valid",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "version_str": [
                    "str",
                    "Dict[str,dict[str,str]]",
                    "property",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]"
                ],
                "raw_pattern": [
                    "Text",
                    "str",
                    "property",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "_format_part_values": {
            "name": "_format_part_values",
            "location": 331,
            "return": [
                "List[list]",
                "bytes",
                "str"
            ],
            "arguments": {
                "vinfo": [
                    "str",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_parse_segtree": {
            "name": "_parse_segtree",
            "location": 369,
            "return": [
                "bool",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "raw_pattern": [
                    "int",
                    "Deque"
                ]
            }
        },
        "_format_segment": {
            "name": "_format_segment",
            "location": 423,
            "return": [
                "str",
                "FormatedSeg"
            ],
            "arguments": {
                "seg": [
                    "str",
                    "int",
                    "Dict[str,Union[int,str]]",
                    "List",
                    "bool",
                    "Callable[[str],bool]"
                ],
                "part_values": [
                    "str",
                    "bool",
                    "int",
                    "Optional[type]"
                ]
            }
        },
        "_format_segment_tree": {
            "name": "_format_segment_tree",
            "location": 459,
            "return": [
                "str",
                "FormatedSeg"
            ],
            "arguments": {
                "segtree": [
                    "List[str]",
                    "List",
                    "str",
                    "bool",
                    "float",
                    "Type[T]"
                ],
                "part_values": [
                    "str",
                    "Dict",
                    "Exception",
                    "Dict[str,str]",
                    "Optional[AbstractPurpose]",
                    "None"
                ]
            }
        },
        "format_version": {
            "name": "format_version",
            "location": 484,
            "return": [
                "str"
            ],
            "arguments": {
                "vinfo": [
                    "int",
                    "float",
                    "str",
                    "datetime.datetime"
                ],
                "raw_pattern": [
                    "str"
                ]
            }
        },
        "_iter_flat_segtree": {
            "name": "_iter_flat_segtree",
            "location": 576,
            "return": [
                "Iterable[Segment]",
                "Generator",
                "Generator[str]"
            ],
            "arguments": {
                "segtree": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "_parse_pattern_fields": {
            "name": "_parse_pattern_fields",
            "location": 590,
            "return": [
                "List[Union[dict,dict[str,Any],list[str]]]",
                "List[str]",
                "str",
                "Dict",
                "List",
                "Union[int,None]"
            ],
            "arguments": {
                "raw_pattern": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "_iter_reset_field_items": {
            "name": "_iter_reset_field_items",
            "location": 608,
            "return": [
                "Iterable[Tuple[str,str]]",
                "Generator[tuple[Union[Text,str,dict[str,str],Type,dict[str,OrderedDict],int]]]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Iterable[T]",
                    "bool",
                    "Dict"
                ],
                "old_vinfo": [
                    "Dict[str,Any]"
                ],
                "cur_vinfo": [
                    "Dict[str,Any]"
                ]
            }
        },
        "_reset_rollover_fields": {
            "name": "_reset_rollover_fields",
            "location": 623,
            "return": [
                "Optional[List[str]]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "raw_pattern": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None",
                    "Dict"
                ],
                "old_vinfo": [
                    "bool",
                    "str",
                    "Dict[str,Iterable[Any]]",
                    "Type[T]",
                    "Type"
                ],
                "cur_vinfo": [
                    "int",
                    "Union[Sequence[str], str]",
                    "str",
                    "Tuple[Sequence]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "_incr_numeric": {
            "name": "_incr_numeric",
            "location": 663,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "raw_pattern": [
                    "bool",
                    "List",
                    "Dict[str,Any]"
                ],
                "old_vinfo": [
                    "bool",
                    "List",
                    "Dict[str,Any]"
                ],
                "cur_vinfo": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "major": [
                    "bool",
                    "float",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "minor": [
                    "bool",
                    "float",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "patch": [
                    "bool",
                    "float",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "tag": [
                    "Dict[str,Set[str]]",
                    "Set[str]",
                    "Dict[str,set[str]]",
                    "bool",
                    "Callable"
                ],
                "tag_num": [
                    "bool",
                    "float",
                    "Union[str,float]",
                    "str"
                ]
            }
        },
        "is_valid_week_pattern": {
            "name": "is_valid_week_pattern",
            "location": 718,
            "return": [
                "bool"
            ],
            "arguments": {
                "raw_pattern": [
                    "str"
                ]
            }
        },
        "incr": {
            "name": "incr",
            "location": 737,
            "return": [
                "None",
                "Optional[bool]",
                "bool",
                "Optional[float]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "old_version": [
                    "Dict[str,Any]",
                    "bool"
                ],
                "raw_pattern": [
                    "Text",
                    "bool",
                    "Dict",
                    "Sequence[str]",
                    "List"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/vcs.py": {
        "get_vcs_api": {
            "name": "get_vcs_api",
            "location": 209,
            "return": [
                "VCSAPI",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "assert_not_dirty": {
            "name": "assert_not_dirty",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "vcs_api": [
                    "str",
                    "bool",
                    "int"
                ],
                "filepaths": [
                    "str",
                    "Callable[[str, str], None]",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ],
                "allow_dirty": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "commit": {
            "name": "commit",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "str",
                    "Union[float,Sequence[float]]",
                    "List[str]",
                    "float",
                    "Sequence[float]"
                ],
                "vcs_api": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Tuple[int]",
                    "float"
                ],
                "filepaths": [
                    "List",
                    "str",
                    "bool"
                ],
                "new_version": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "None",
                    "Sequence[Tuple[Any,Any]]",
                    "List[dict[str,Any]]",
                    "Sequence[tuple[Union[Any,Any]]]"
                ],
                "commit_message": [
                    "bool",
                    "float",
                    "List[str]",
                    "List[cirq.Circuit]",
                    "Union[float,Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "get_tags": {
            "name": "get_tags",
            "location": 264,
            "return": [
                "List",
                "str",
                "Dict[str,str]",
                "Optional[str]"
            ],
            "arguments": {
                "fetch": [
                    "int",
                    "str"
                ]
            }
        },
        "VCSAPI.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "subcommands": [
                    "Optional[str]",
                    "None",
                    "Optional[Iterable[str]]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Iterable[str]",
                    "Any"
                ]
            }
        },
        "VCSAPI.__call__": {
            "name": "__call__",
            "location": 85,
            "return": [
                "Iterable[str]",
                "Optional[float]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cmd_name": [
                    "str"
                ],
                "env": [
                    "str",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "VCSAPI.is_usable": {
            "name": "is_usable",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSAPI.get_remote": {
            "name": "get_remote",
            "location": 116,
            "return": [
                "None",
                "str",
                "IO[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSAPI.fetch": {
            "name": "fetch",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSAPI.status": {
            "name": "status",
            "location": 140,
            "return": [
                "List[str]",
                "bool",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "required_files": [
                    "Set[str]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "BinaryIO",
                    "int",
                    "Tuple[int,int]",
                    "IO[bytes]"
                ]
            }
        },
        "VCSAPI.ls_tags": {
            "name": "ls_tags",
            "location": 151,
            "return": [
                "List",
                "List[str]",
                "Set[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSAPI.add": {
            "name": "add",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "VCSAPI.commit": {
            "name": "commit",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "VCSAPI.tag": {
            "name": "tag",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_name": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "VCSAPI.push": {
            "name": "push",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_name": [
                    "str"
                ]
            }
        },
        "VCSAPI.__repr__": {
            "name": "__repr__",
            "location": 204,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bumpver-master/src/bumpver/version.py": {
        "parse_version": {
            "name": "parse_version",
            "location": 12,
            "return": [
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "is_zero_val": {
            "name": "is_zero_val",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "part": [
                    "int",
                    "List",
                    "float",
                    "List[str]",
                    "bool"
                ],
                "part_value": [
                    "int",
                    "List",
                    "float",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "date_from_doy": {
            "name": "date_from_doy",
            "location": 149,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "Tuple[str, str]",
                "datetime.datetime"
            ],
            "arguments": {
                "year": [
                    "int",
                    "float",
                    "datetime.timedelta"
                ],
                "doy": [
                    "int",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "quarter_from_month": {
            "name": "quarter_from_month",
            "location": 165,
            "return": [
                "int",
                "float",
                "Sequence[float]",
                "Tuple[int,int]",
                "Tuple"
            ],
            "arguments": {
                "month": []
            }
        },
        "to_pep440": {
            "name": "to_pep440",
            "location": 174,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "bumpver-master/src/bumpver/__init__.py": {},
    "bumpver-master/src/bumpver/__main__.py": {},
    "bumpver-master/test/test_cli.py": {
        "shell": {
            "name": "shell",
            "location": 64,
            "return": [
                "str",
                "bytes",
                "dict",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "_debug_records": {
            "name": "_debug_records",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "runner": {
            "name": "runner",
            "location": 79,
            "return": [
                "typing.Generator[CliRunner]"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Optional[Union[float,str]]",
                    "float",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_show_env": {
            "name": "test_show_env",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "test_incr_default": {
            "name": "test_incr_default",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_incr_pin_date": {
            "name": "test_incr_pin_date",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_incr_semver": {
            "name": "test_incr_semver",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "test_incr_semver_invalid": {
            "name": "test_incr_semver_invalid",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "caplog": [
                    "bool",
                    "Union[int,float]",
                    "float",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_incr_to_beta": {
            "name": "test_incr_to_beta",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_incr_to_final": {
            "name": "test_incr_to_final",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "caplog": [
                    "tsrc.teshelpers.cli.CLI"
                ]
            }
        },
        "test_incr_tag": {
            "name": "test_incr_tag",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_incr_tag_num": {
            "name": "test_incr_tag_num",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_incr_invalid": {
            "name": "test_incr_invalid",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "_add_project_files": {
            "name": "_add_project_files",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_update_config_val": {
            "name": "_update_config_val",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "test_nocfg": {
            "name": "test_nocfg",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "caplog": [
                    "str",
                    "neuromation.cli.printer.StreamPrinter"
                ]
            }
        },
        "test_novcs_nocfg_init": {
            "name": "test_novcs_nocfg_init",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "float",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "test_novcs_setupcfg_init": {
            "name": "test_novcs_setupcfg_init",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_novcs_multi_cfg": {
            "name": "test_novcs_multi_cfg",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_novcs_pyproject_init": {
            "name": "test_novcs_pyproject_init",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "_vcs_init": {
            "name": "_vcs_init",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "vcs": [
                    "str"
                ],
                "files": [
                    "Tuple[Text]",
                    "Union[List,set]",
                    "Iterator[str]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "test_git_init": {
            "name": "test_git_init",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "version_pattern": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "cur_version": [
                    "str",
                    "List[Dict[str,Any]]"
                ],
                "cur_pep440": [
                    "str"
                ]
            }
        },
        "test_hg_init": {
            "name": "test_hg_init",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "version_pattern": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "cur_version": [
                    "str",
                    "List[Dict[str,Any]]"
                ],
                "cur_pep440": [
                    "str"
                ]
            }
        },
        "test_v1_git_tag_eval": {
            "name": "test_v1_git_tag_eval",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "version_pattern": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "cur_version": [
                    "str",
                    "List[Dict[str,Any]]",
                    "Optional[Union[Dict,str,int,bytes]]"
                ],
                "cur_pep440": [
                    "str",
                    "bytes",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "test_hg_tag_eval": {
            "name": "test_hg_tag_eval",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "version_pattern": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[str]",
                    "None"
                ],
                "cur_version": [
                    "str",
                    "List[Dict[str,Any]]",
                    "Optional[Union[Dict,str,int,bytes]]"
                ],
                "cur_pep440": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "test_novcs_bump": {
            "name": "test_novcs_bump",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "version_pattern": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "cur_version": [
                    "str",
                    "List[Dict[str,Any]]"
                ],
                "cur_pep440": [
                    "str"
                ]
            }
        },
        "test_git_bump": {
            "name": "test_git_bump",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "caplog": [
                    "str",
                    "Union[str,float]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "click.testing.CliRunner",
                    "None"
                ],
                "version_pattern": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "cur_version": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "cur_pep440": []
            }
        },
        "test_hg_bump": {
            "name": "test_hg_bump",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "version_pattern": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "cur_version": [
                    "str",
                    "List[Dict[str,Any]]"
                ],
                "cur_pep440": [
                    "str"
                ]
            }
        },
        "test_empty_git_bump": {
            "name": "test_empty_git_bump",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_empty_hg_bump": {
            "name": "test_empty_hg_bump",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_incorrect_vcs_option_no_commit_tag": {
            "name": "test_incorrect_vcs_option_no_commit_tag",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot"
                ],
                "caplog": [
                    "Dict"
                ]
            }
        },
        "test_incorrect_vcs_option_no_commit_push": {
            "name": "test_incorrect_vcs_option_no_commit_push",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot"
                ],
                "caplog": []
            }
        },
        "test_incorrect_vcs_option_tag_push": {
            "name": "test_incorrect_vcs_option_tag_push",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "caplog": []
            }
        },
        "test_vcs_option_no_commit": {
            "name": "test_vcs_option_no_commit",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "click.testing.CliRunner",
                    "neuromation.cli.rooRoot",
                    "tsrc.teshelpers.cli.CLI"
                ],
                "caplog": [],
                "version_pattern": [],
                "cur_version": [],
                "cur_pep440": []
            }
        },
        "test_vcs_option_commit": {
            "name": "test_vcs_option_commit",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "caplog": [],
                "version_pattern": [
                    "str"
                ],
                "cur_version": [
                    "str",
                    "Dict"
                ],
                "cur_pep440": []
            }
        },
        "test_vcs_option_no_tag": {
            "name": "test_vcs_option_no_tag",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [],
                "version_pattern": [],
                "cur_version": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "bool"
                ],
                "cur_pep440": []
            }
        },
        "test_vcs_option_tag": {
            "name": "test_vcs_option_tag",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "click.testing.CliRunner",
                    "neuromation.cli.rooRoot"
                ],
                "caplog": [],
                "version_pattern": [
                    "str",
                    "neuromation.api.config._AuthConfig"
                ],
                "cur_version": [
                    "str",
                    "Dict"
                ],
                "cur_pep440": []
            }
        },
        "test_update_semver_warning": {
            "name": "test_update_semver_warning",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "List[str]"
                ],
                "version_pattern": []
            }
        },
        "test_update_semver_diff": {
            "name": "test_update_semver_diff",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "caplog": [
                    "str",
                    "int"
                ],
                "version_pattern": []
            }
        },
        "test_update_set_version": {
            "name": "test_update_set_version",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot"
                ],
                "caplog": [
                    "float",
                    "neuromation.cli.printer.StreamPrinter"
                ]
            }
        },
        "test_get_diff": {
            "name": "test_get_diff",
            "location": 929,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "version_pattern": [
                    "str"
                ],
                "cur_version": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "cur_pep440": [
                    "int",
                    "str"
                ]
            }
        },
        "test_weeknum": {
            "name": "test_weeknum",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "date": [
                    "str",
                    "List[str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "pattern": [
                    "str",
                    "List[str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "expected": [
                    "Sequence[str]",
                    "bool",
                    "str"
                ],
                "runner": [
                    "str"
                ]
            }
        },
        "test_hg_commit_message": {
            "name": "test_hg_commit_message",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_git_commit_message": {
            "name": "test_git_commit_message",
            "location": 1045,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner"
                ],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cli_commit_message": {
            "name": "test_cli_commit_message",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner",
                    "neuromation.cli.rooRoot"
                ],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_grep": {
            "name": "test_grep",
            "location": 1111,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "Dict[str,Any]",
                    "pathlib2.Path"
                ]
            }
        },
        "test_multimatch_file_patterns": {
            "name": "test_multimatch_file_patterns",
            "location": 1177,
            "return": [
                "None"
            ],
            "arguments": {
                "config_text": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]",
                    "Iterable[str]"
                ],
                "runner": [
                    "str"
                ]
            }
        },
        "_kwargs": {
            "name": "_kwargs",
            "location": 1202,
            "return": [
                "Dict[Text,bool]",
                "datetime.datetime",
                "str",
                "Union[str,int]",
                "int"
            ],
            "arguments": {
                "year": [
                    "str",
                    "float",
                    "int",
                    "Dict[str,str]",
                    "datetime.datetime",
                    "Union[str,int]",
                    "datetime.timedelta"
                ],
                "month": [
                    "str",
                    "float",
                    "int",
                    "Dict[str,str]",
                    "datetime.datetime",
                    "Union[str,int]",
                    "datetime.timedelta"
                ],
                "minor": [
                    "bool",
                    "str",
                    "float",
                    "datetime.datetime",
                    "Union[str,int]",
                    "Dict[str,str]",
                    "datetime.timedelta",
                    "int"
                ]
            }
        },
        "test_rollover": {
            "name": "test_rollover",
            "location": 1231,
            "return": [
                "None"
            ],
            "arguments": {
                "version_pattern": [],
                "old_version": [],
                "expected": [
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Optional[Type[Exception]]",
                    "bytes",
                    "None",
                    "Sequence[str]",
                    "Type"
                ],
                "kwargs": []
            }
        },
        "test_get_latest_vcs_version_tag": {
            "name": "test_get_latest_vcs_version_tag",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        }
    },
    "bumpver-master/test/test_config.py": {
        "mk_buf": {
            "name": "mk_buf",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[None,bytes]",
                    "None",
                    "bytes"
                ]
            }
        },
        "_parse_raw_patterns_by_filepath": {
            "name": "_parse_raw_patterns_by_filepath",
            "location": 116,
            "return": [
                "Dict[,list]",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "List",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_parse_toml_1": {
            "name": "test_parse_toml_1",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_toml_2": {
            "name": "test_parse_toml_2",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_toml_3": {
            "name": "test_parse_toml_3",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_v1_cfg": {
            "name": "test_parse_v1_cfg",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_v2_cfg": {
            "name": "test_parse_v2_cfg",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_default_toml": {
            "name": "test_parse_default_toml",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_default_cfg": {
            "name": "test_parse_default_cfg",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_project_toml": {
            "name": "test_parse_project_toml",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_project_cfg": {
            "name": "test_parse_project_cfg",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_toml_file": {
            "name": "test_parse_toml_file",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_parse_default_pattern": {
            "name": "test_parse_default_pattern",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_cfg_file": {
            "name": "test_parse_cfg_file",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_parse_config_missing": {
            "name": "test_parse_config_missing",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_parse_empty_config": {
            "name": "test_parse_empty_config",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_parse_missing_version": {
            "name": "test_parse_missing_version",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_parse_invalid_version": {
            "name": "test_parse_invalid_version",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "bumpver-master/test/test_parse.py": {
        "test_default_parse_patterns": {
            "name": "test_default_parse_patterns",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explicit_parse_patterns": {
            "name": "test_explicit_parse_patterns",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_badge_parse_patterns": {
            "name": "test_badge_parse_patterns",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bumpver-master/test/test_patterns.py": {
        "_compile_part_re": {
            "name": "_compile_part_re",
            "location": 150,
            "return": [
                "Type",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "pattern_str": [
                    "str"
                ]
            }
        },
        "test_v2_part_patterns": {
            "name": "test_v2_part_patterns",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": [
                    "List[str]",
                    "bool",
                    "int"
                ],
                "testcase": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Type[Exception]]",
                    "Type",
                    "Optional[bool]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "test_v1_part_compilation": {
            "name": "test_v1_part_compilation",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "part_name": [
                    "str"
                ]
            }
        },
        "test_v2_part_compilation": {
            "name": "test_v2_part_compilation",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "part_name": [
                    "str"
                ]
            }
        },
        "test_v1_re_pattern_parts": {
            "name": "test_v1_re_pattern_parts",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "part_name": [
                    "str",
                    "Dict",
                    "Optional[List[bytes]]",
                    "List[bytes]",
                    "None"
                ],
                "line": [
                    "str"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_v1_patterns": {
            "name": "test_v1_patterns",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern_str": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "line": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_v2_patterns": {
            "name": "test_v2_patterns",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern_str": [
                    "str"
                ],
                "line": [
                    "str"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_pattern_escapes": {
            "name": "test_pattern_escapes",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curly_escapes": {
            "name": "test_curly_escapes",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_field_mapping_v2": {
            "name": "test_part_field_mapping_v2",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bumpver-master/test/test_rewrite.py": {
        "test_v1_rewrite_lines_basic": {
            "name": "test_v1_rewrite_lines_basic",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v1_rewrite_lines": {
            "name": "test_v1_rewrite_lines",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v2_rewrite_lines": {
            "name": "test_v2_rewrite_lines",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v1_rewrite_final": {
            "name": "test_v1_rewrite_final",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_file_paths": {
            "name": "test_iter_file_paths",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_file_globs": {
            "name": "test_iter_file_globs",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_bad_path": {
            "name": "test_error_bad_path",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v1_error_bad_pattern": {
            "name": "test_v1_error_bad_pattern",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v1_optional_release": {
            "name": "test_v1_optional_release",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v2_optional_release": {
            "name": "test_v2_optional_release",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v1_iter_rewritten": {
            "name": "test_v1_iter_rewritten",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v2_iter_rewritten": {
            "name": "test_v2_iter_rewritten",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v1_diff": {
            "name": "test_v1_diff",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v2_diff": {
            "name": "test_v2_diff",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_regex_chars": {
            "name": "test_remove_regex_chars",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bumpver-master/test/test_version.py": {
        "test_bump_beta": {
            "name": "test_bump_beta",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bump_final_v1": {
            "name": "test_bump_final_v1",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bump_final_v2": {
            "name": "test_bump_final_v2",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bump_future": {
            "name": "test_bump_future",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bump_random": {
            "name": "test_bump_random",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ]
            }
        },
        "test_bump_tag_num": {
            "name": "test_bump_tag_num",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bump_tag_num_without_tag": {
            "name": "test_bump_tag_num_without_tag",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_version_info": {
            "name": "test_parse_version_info",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_readme_pycalver1": {
            "name": "test_readme_pycalver1",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_readme_pycalver2": {
            "name": "test_readme_pycalver2",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_error_empty": {
            "name": "test_parse_error_empty",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_error_noprefix": {
            "name": "test_parse_error_noprefix",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_error_nopadding": {
            "name": "test_parse_error_nopadding",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_field_mapping_v1": {
            "name": "test_part_field_mapping_v1",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "v1vnfo": {
            "name": "v1vnfo",
            "location": 184,
            "return": [
                "bool",
                "\"Task\"",
                "Optional[int]",
                "Optional[Set[str]]",
                "Tuple[float, float]"
            ],
            "arguments": {}
        },
        "v2vnfo": {
            "name": "v2vnfo",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_v1_parse_versions": {
            "name": "test_v1_parse_versions",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern_str": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int"
                ],
                "expected_vinfo": [
                    "str",
                    "Dict"
                ]
            }
        },
        "test_v2_parse_versions": {
            "name": "test_v2_parse_versions",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v2_format_version": {
            "name": "test_v2_format_version",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid_week_pattern": {
            "name": "test_is_valid_week_pattern",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "bumpver-master/test/util.py": {
        "Shell.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cwd": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Shell.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "Union[tuple,list]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "None"
                ]
            }
        },
        "Project.__enter__": {
            "name": "__enter__",
            "location": 62,
            "return": [
                "Project",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__exit__": {
            "name": "__exit__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.shell": {
            "name": "shell",
            "location": 71,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "Project._vcs_addall": {
            "name": "_vcs_addall",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ]
            }
        },
        "Project.git_init": {
            "name": "git_init",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.hg_init": {
            "name": "hg_init",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bumpver-master/test/__init__.py": {},
    "bumpver-master/test/fixtures/project_b/setup.py": {},
    "bumpver-master/test/fixtures/project_b/src/module_v1/__init__.py": {},
    "bumpver-master/test/fixtures/project_b/src/module_v2/__init__.py": {}
}
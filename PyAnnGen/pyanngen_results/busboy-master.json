{
    "busboy-master/wsgi.py": {},
    "busboy-master/busboy/apis.py": {
        "stops": {
            "name": "stops",
            "location": 35,
            "return": [
                "List[busboy.model.Stop]"
            ],
            "arguments": {}
        },
        "routes": {
            "name": "routes",
            "location": 43,
            "return": [
                "List[busboy.model.Route]"
            ],
            "arguments": {}
        },
        "from_var": {
            "name": "from_var",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "r": [
                    "str"
                ]
            }
        },
        "trips": {
            "name": "trips",
            "location": 56,
            "return": [
                "Set[busboy.model.TripId]"
            ],
            "arguments": {
                "s": [
                    "busboy.model.StopId"
                ]
            }
        },
        "stop_ids": {
            "name": "stop_ids",
            "location": 62,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "routes_at_stop": {
            "name": "routes_at_stop",
            "location": 67,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "stop": [
                    "str"
                ]
            }
        },
        "routes_at_stops": {
            "name": "routes_at_stops",
            "location": 76,
            "return": [
                "Dict[(str, Set[str])]"
            ],
            "arguments": {}
        },
        "stop_passage": {
            "name": "stop_passage",
            "location": 88,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "Iterator['Vertex']",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "\"Task\"",
                    "dict[, ]",
                    "dict"
                ],
                "timeout": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "datetime.timedelta",
                    "dict"
                ]
            }
        },
        "sp_stop": {
            "name": "sp_stop",
            "location": 101,
            "return": [
                "Callable",
                "str",
                "list",
                "busboy.util.Maybe[psycopg2.extensions.connection]"
            ],
            "arguments": {
                "s": [
                    "float",
                    "str",
                    "int",
                    "busboy.model.StopId"
                ],
                "timeout": [
                    "int",
                    "float",
                    "busboy.model.StopId",
                    "str"
                ]
            }
        },
        "sp_trip": {
            "name": "sp_trip",
            "location": 106,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "busboy.model.TripId",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "float",
                    "busboy.model.TripId",
                    "bool"
                ]
            }
        },
        "web_timetables": {
            "name": "web_timetables",
            "location": 110,
            "return": [
                "Iterable[WebTimetable]"
            ],
            "arguments": {
                "route_name": [
                    "str"
                ]
            }
        },
        "timetables": {
            "name": "timetables",
            "location": 122,
            "return": [
                "Generator[(Timetable, None, None)]"
            ],
            "arguments": {
                "route_name": [
                    "str"
                ],
                "stops_by_name": [
                    "Dict[(str, busboy.model.Stop)]"
                ]
            }
        },
        "tables_by_route": {
            "name": "tables_by_route",
            "location": 194,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "rs": [
                    "bs4.element.ResultSet"
                ]
            }
        },
        "route_stops_to_file": {
            "name": "route_stops_to_file",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "stops": [
                    "dict[, ]",
                    "Union[Dict, List]",
                    "BaseException",
                    "list[]",
                    "cdp.util.T_JSON_DICT",
                    "dict[int, dict[int, typing.Any]]",
                    "dict",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "stops_from_names": {
            "name": "stops_from_names",
            "location": 258,
            "return": [
                "Iterable[busboy.util.Maybe[busboy.model.Stop]]"
            ],
            "arguments": {
                "names": [
                    "Iterable[str]"
                ],
                "sbn": [
                    "Dict[(str, busboy.model.Stop)]"
                ]
            }
        },
        "match_stop_name": {
            "name": "match_stop_name",
            "location": 264,
            "return": [
                "busboy.util.Maybe[busboy.model.Stop]"
            ],
            "arguments": {
                "stops": [
                    "Dict[(str, busboy.model.Stop)]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "WebTimetable.from_page": {
            "name": "from_page",
            "location": 137,
            "return": [
                "Iterable[WebTimetable]"
            ],
            "arguments": {
                "soup": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "WebTimetable.routes": {
            "name": "routes",
            "location": 143,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.stop_names": {
            "name": "stop_names",
            "location": 150,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.columns": {
            "name": "columns",
            "location": 153,
            "return": [
                "Iterable[Iterable[bs4.element.Tag]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.times": {
            "name": "times",
            "location": 158,
            "return": [
                "List[List[busboy.util.Maybe[datetime.time]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable._times": {
            "name": "_times",
            "location": 161,
            "return": [
                "Iterable[Iterable[busboy.util.Maybe[datetime.time]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.stop_times": {
            "name": "stop_times",
            "location": 164,
            "return": [
                "List[List[Tuple[(str, busboy.util.Maybe[datetime.time])]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable._stop_times": {
            "name": "_stop_times",
            "location": 167,
            "return": [
                "Iterable[Iterable[Tuple[(str, busboy.util.Maybe[datetime.time])]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.variants": {
            "name": "variants",
            "location": 170,
            "return": [
                "Set[Tuple[(str, Tuple[(str, ...)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.cell_time": {
            "name": "cell_time",
            "location": 184,
            "return": [
                "busboy.util.Maybe[datetime.time]"
            ],
            "arguments": {
                "t": [
                    "bs4.element.Tag"
                ]
            }
        },
        "tables_by_route.table_id": {
            "name": "table_id",
            "location": 195,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "t": [
                    "bs4.elemenTag",
                    "Sequence[float]",
                    "markdown.util.etree.Element",
                    "Callable",
                    "str",
                    "dict"
                ]
            }
        },
        "Timetable.routes": {
            "name": "routes",
            "location": 223,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timetable.from_web_timetable": {
            "name": "from_web_timetable",
            "location": 227,
            "return": [
                "Timetable"
            ],
            "arguments": {
                "wt": [
                    "WebTimetable"
                ],
                "stops_by_name": [
                    "Dict[(str, busboy.model.Stop)]"
                ],
                "route_name": [
                    "str"
                ]
            }
        },
        "Timetable.unique_variants": {
            "name": "unique_variants",
            "location": 240,
            "return": [
                "Iterable[TimetableVariant]"
            ],
            "arguments": {
                "ts": [
                    "Iterable[Timetable]"
                ]
            }
        },
        "TimetableVariant.__str__": {
            "name": "__str__",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimetableVariant.__hash__": {
            "name": "__hash__",
            "location": 254,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.from_page.right_id": {
            "name": "right_id",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int",
                    "Optional[int]",
                    "dict"
                ]
            }
        }
    },
    "busboy-master/busboy/constants.py": {},
    "busboy-master/busboy/database.py": {
        "default_connection": {
            "name": "default_connection",
            "location": 25,
            "return": [
                "pp2._psycopg.connection"
            ],
            "arguments": {}
        },
        "test_connection": {
            "name": "test_connection",
            "location": 29,
            "return": [
                "pp2._psycopg.connection"
            ],
            "arguments": {}
        },
        "snapshots": {
            "name": "snapshots",
            "location": 33,
            "return": [
                "List[BusSnapshot]"
            ],
            "arguments": {
                "connection": [
                    "Optional[pp2._psycopg.connection]"
                ],
                "r": [
                    "Optional[m.RouteId]"
                ],
                "d": [
                    "Optional[dt.date]"
                ],
                "date_span": [
                    "Optional[Tuple[(dt.date, dt.date)]]"
                ]
            }
        },
        "snapshots_df": {
            "name": "snapshots_df",
            "location": 62,
            "return": [],
            "arguments": {
                "connection": [
                    "Optional[pp2._psycopg.connection]"
                ],
                "route": [
                    "Optional[m.RouteId]"
                ],
                "day": [
                    "Optional[dt.date]"
                ],
                "date_span": [
                    "Optional[Tuple[(dt.date, dt.date)]]"
                ]
            }
        },
        "poll_times_df": {
            "name": "poll_times_df",
            "location": 72,
            "return": [],
            "arguments": {
                "connection": [
                    "busboy.util.Maybe[pp2._psycopg.connection]"
                ]
            }
        },
        "data_gdf": {
            "name": "data_gdf",
            "location": 81,
            "return": [],
            "arguments": {
                "connection": [
                    "Optional[pp2._psycopg.connection]"
                ],
                "r": [
                    "Optional[m.RouteId]"
                ],
                "d": [
                    "Optional[dt.date]"
                ]
            }
        },
        "store_route": {
            "name": "store_route",
            "location": 95,
            "return": [
                "Optional[Exception]"
            ],
            "arguments": {
                "r": [
                    "m.Route"
                ],
                "conn": [
                    "Optional[pp2._psycopg.connection]"
                ]
            }
        },
        "store_stop": {
            "name": "store_stop",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [
                    "m.Stop"
                ],
                "conn": [
                    "Optional[pp2._psycopg.connection]"
                ]
            }
        },
        "store_trip": {
            "name": "store_trip",
            "location": 132,
            "return": [
                "Optional[Exception]"
            ],
            "arguments": {
                "p": [
                    "m.Passage"
                ],
                "poll_time": [
                    "dt.datetime"
                ],
                "connection": [
                    "Optional[pp2._psycopg.connection]"
                ]
            }
        },
        "store_timetables": {
            "name": "store_timetables",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "store_timetable": {
            "name": "store_timetable",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "timetable": [
                    "api.Timetable"
                ],
                "route": [
                    "m.RouteId"
                ],
                "conn": [
                    "Optional[pp2._psycopg.connection]"
                ]
            }
        },
        "timetables": {
            "name": "timetables",
            "location": 229,
            "return": [
                "Iterator[busboy.util.Either[(str, api.Timetable)]]"
            ],
            "arguments": {
                "route": [
                    "m.RouteId"
                ],
                "connection": [
                    "busboy.util.Maybe[pp2._psycopg.connection]"
                ]
            }
        },
        "timetable": {
            "name": "timetable",
            "location": 246,
            "return": [
                "busboy.util.Either[(str, api.Timetable)]"
            ],
            "arguments": {
                "timetable_id": [
                    "int"
                ],
                "connection": [
                    "busboy.util.Maybe[pp2._psycopg.connection]"
                ]
            }
        },
        "timetable_variant": {
            "name": "timetable_variant",
            "location": 277,
            "return": [
                "busboy.util.Either[(str, api.TimetableVariant)]"
            ],
            "arguments": {
                "variant_id": [
                    "int"
                ],
                "connection": [
                    "busboy.util.Maybe[pp2._psycopg.connection]"
                ]
            }
        },
        "test_database": {
            "name": "test_database",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "routes": {
            "name": "routes",
            "location": 324,
            "return": [
                "List[m.Route]"
            ],
            "arguments": {}
        },
        "routes_by_name": {
            "name": "routes_by_name",
            "location": 334,
            "return": [
                "Dict[(str, m.Route)]"
            ],
            "arguments": {}
        },
        "routes_by_id": {
            "name": "routes_by_id",
            "location": 338,
            "return": [
                "Dict[(m.RouteId, m.Route)]"
            ],
            "arguments": {}
        },
        "trip_points": {
            "name": "trip_points",
            "location": 342,
            "return": [
                "TripPoints"
            ],
            "arguments": {
                "connection": [
                    "pp2._psycopg.connection"
                ],
                "t": [
                    "m.TripId"
                ]
            }
        },
        "trips_on_day": {
            "name": "trips_on_day",
            "location": 452,
            "return": [
                "Set[m.TripId]"
            ],
            "arguments": {
                "c": [
                    "pp2._psycopg.connection"
                ],
                "d": [
                    "dt.date"
                ],
                "r": [
                    "Optional[str]"
                ]
            }
        },
        "day_span": {
            "name": "day_span",
            "location": 471,
            "return": [
                "Tuple[(dt.datetime, dt.datetime)]"
            ],
            "arguments": {
                "dates": [
                    "List[dt.date]"
                ]
            }
        },
        "stops_by_route_name": {
            "name": "stops_by_route_name",
            "location": 483,
            "return": [
                "List[m.Stop]"
            ],
            "arguments": {
                "c": [
                    "pp2._psycopg.connection"
                ],
                "route": [
                    "str"
                ]
            }
        },
        "stop_by_name": {
            "name": "stop_by_name",
            "location": 499,
            "return": [
                "Optional[m.Stop]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "stop_by_id": {
            "name": "stop_by_id",
            "location": 508,
            "return": [
                "busboy.util.Maybe[m.Stop]"
            ],
            "arguments": {
                "c": [
                    "pp2._psycopg.connection"
                ],
                "s": [
                    "m.StopId"
                ]
            }
        },
        "stops": {
            "name": "stops",
            "location": 520,
            "return": [
                "List[m.Stop]"
            ],
            "arguments": {
                "c": [
                    "Optional[pp2._psycopg.connection]"
                ]
            }
        },
        "stops_by_name": {
            "name": "stops_by_name",
            "location": 529,
            "return": [
                "Dict[(str, m.Stop)]"
            ],
            "arguments": {
                "c": [
                    "Optional[pp2._psycopg.connection]"
                ]
            }
        },
        "TripPoints.to_json": {
            "name": "to_json",
            "location": 361,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TripPoint.to_json": {
            "name": "to_json",
            "location": 371,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusSnapshot.from_db_row": {
            "name": "from_db_row",
            "location": 400,
            "return": [
                "BusSnapshot"
            ],
            "arguments": {
                "row": [
                    "tuple"
                ]
            }
        },
        "BusSnapshot.as_dict": {
            "name": "as_dict",
            "location": 423,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusSnapshot.from_passage": {
            "name": "from_passage",
            "location": 427,
            "return": [
                "BusSnapshot"
            ],
            "arguments": {
                "passage": [
                    "m.Passage"
                ],
                "time": [
                    "dt.datetime"
                ]
            }
        }
    },
    "busboy-master/busboy/geo.py": {
        "to_metres": {
            "name": "to_metres",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "t": [
                    "float",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "to_metre_point": {
            "name": "to_metre_point",
            "location": 41,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "point": [
                    "float",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "metre_geoseries": {
            "name": "metre_geoseries",
            "location": 45,
            "return": [
                "Union[str, List[str]]",
                "str",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float",
                    "str",
                    "T",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ]
            }
        },
        "buffer": {
            "name": "buffer",
            "location": 51,
            "return": [
                "tuple[]",
                "float",
                "int",
                "T",
                "List[int]"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float",
                    "Optional[List[int]]",
                    "list[int]",
                    "str",
                    "None",
                    "T"
                ],
                "d": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "nearby_road_segment": {
            "name": "nearby_road_segment",
            "location": 57,
            "return": [
                "dict[tuple[], list[tuple[]]]",
                "bool",
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "t": [
                    "float",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "distance": [
                    "float",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "busboy-master/busboy/main.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "busboy-master/busboy/model.py": {
        "Route.from_json": {
            "name": "from_json",
            "location": 77,
            "return": [
                "Route"
            ],
            "arguments": {
                "route_json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Stop.lon_lat": {
            "name": "lon_lat",
            "location": 97,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stop.lat_lon": {
            "name": "lat_lon",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stop.from_json": {
            "name": "from_json",
            "location": 105,
            "return": [
                "Stop"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStop]"
                ],
                "stop_json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Stop.from_db_row": {
            "name": "from_db_row",
            "location": 114,
            "return": [
                "Stop"
            ],
            "arguments": {
                "r": [
                    "tuple"
                ]
            }
        },
        "StopPassageResponse.from_json": {
            "name": "from_json",
            "location": 141,
            "return": [
                "StopPassageResponse"
            ],
            "arguments": {
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "StopPassageResponse.from_my_json": {
            "name": "from_my_json",
            "location": 150,
            "return": [
                "StopPassageResponse"
            ],
            "arguments": {
                "j": [
                    "Dict[(str, List[Dict[(str, Optional[Union[(float, str, Dict[(str, Optional[Dict[(str, Optional[Union[(int, str)]])]])])]])]])]"
                ]
            }
        },
        "StopPassageResponse.to_json": {
            "name": "to_json",
            "location": 155,
            "return": [
                "Dict[(str, List[Dict[(str, Optional[Union[(float, str, Dict[(str, Optional[Dict[(str, Optional[Union[(int, str)]])]])])]])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopPassageResponse.trip_ids": {
            "name": "trip_ids",
            "location": 158,
            "return": [
                "List[busboy.util.Maybe[TripId]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopPassageResponse.filter": {
            "name": "filter",
            "location": 161,
            "return": [
                "StopPassageResponse"
            ],
            "arguments": {
                "self": [
                    "_TStopPassageResponse"
                ],
                "f": [
                    "Callable[([Passage], bool)]"
                ]
            }
        },
        "StopPassageResponse.contains_trip": {
            "name": "contains_trip",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Optional[TripId]"
                ]
            }
        },
        "StopPassageResponse.positions": {
            "name": "positions",
            "location": 167,
            "return": [
                "Iterable[busboy.util.Maybe[Tuple[(Any, Any)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopPassageResponse.dataframe": {
            "name": "dataframe",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Passage.position": {
            "name": "position",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Passage.from_json": {
            "name": "from_json",
            "location": 214,
            "return": [
                "Passage"
            ],
            "arguments": {
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Passage.to_json": {
            "name": "to_json",
            "location": 258,
            "return": [
                "Dict[(str, Optional[Union[(float, str, Dict[(str, Optional[Dict[(str, Optional[Union[(int, str)]])]])])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passage.from_my_json": {
            "name": "from_my_json",
            "location": 284,
            "return": [
                "Passage"
            ],
            "arguments": {
                "j": [
                    "Dict[(str, Optional[Union[(float, str, Dict[(str, Optional[Dict[(str, Optional[Union[(int, str)]])]])])]])]"
                ]
            }
        },
        "Passage.flatten": {
            "name": "flatten",
            "location": 307,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassageTime.from_json": {
            "name": "from_json",
            "location": 360,
            "return": [
                "PassageTime"
            ],
            "arguments": {
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "PassageTime.to_json": {
            "name": "to_json",
            "location": 365,
            "return": [
                "Dict[(str, Optional[Dict[(str, Optional[Union[(int, str)]])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassageTime.from_my_json": {
            "name": "from_my_json",
            "location": 372,
            "return": [
                "PassageTime"
            ],
            "arguments": {
                "j": [
                    "Dict[(str, Optional[Dict[(str, Optional[Union[(int, str)]])]])]"
                ]
            }
        },
        "PassageTime.flatten": {
            "name": "flatten",
            "location": 382,
            "return": [
                "Tuple[(Optional[_datetime.datetime], Optional[_datetime.datetime], Optional[_datetime.datetime], Optional[_datetime.datetime])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrivalDeparture.from_json": {
            "name": "from_json",
            "location": 412,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[T]"
                ],
                "json": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArrivalDeparture.to_json": {
            "name": "to_json",
            "location": 431,
            "return": [
                "Dict[(str, Optional[Union[(int, str)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrivalDeparture.from_my_json": {
            "name": "from_my_json",
            "location": 443,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[T]"
                ],
                "j": [
                    "Dict[(str, Optional[Union[(int, str)]])]"
                ]
            }
        }
    },
    "busboy-master/busboy/restserver.py": {
        "hello": {
            "name": "hello",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "trip_points": {
            "name": "trip_points",
            "location": 20,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "trip_id": []
            }
        },
        "trips_on_day": {
            "name": "trips_on_day",
            "location": 28,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "date": [],
                "route": [
                    "None"
                ]
            }
        },
        "map": {
            "name": "map",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "map_js": {
            "name": "map_js",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "busboy-master/busboy/__init__.py": {},
    "busboy-master/busboy/demo/demo.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "live_test": {
            "name": "live_test",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "stop_id": [
                    "busboy.model.StopId"
                ]
            }
        },
        "evaluate_predictions": {
            "name": "evaluate_predictions",
            "location": 211,
            "return": [],
            "arguments": {
                "responses": [
                    "Deque"
                ],
                "passage": [
                    "busboy.model.Passage"
                ],
                "arrival_time": [
                    "_datetime.datetime"
                ]
            }
        },
        "train_average_predictors": {
            "name": "train_average_predictors",
            "location": 269,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "journeys": [],
                "target": [
                    "str"
                ]
            }
        },
        "train_average_predictor": {
            "name": "train_average_predictor",
            "location": 282,
            "return": [
                "DummyRegressor",
                "None"
            ],
            "arguments": {
                "journeys": [],
                "last": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "train_day_binned_predictors": {
            "name": "train_day_binned_predictors",
            "location": 295,
            "return": [
                "Callable[([str, _datetime.datetime], Any)]"
            ],
            "arguments": {
                "journeys": [],
                "target": [
                    "str"
                ],
                "bins": [
                    "List[_datetime.time]"
                ]
            }
        },
        "train_binned_average_predictors": {
            "name": "train_binned_average_predictors",
            "location": 347,
            "return": [
                "Callable[([str, _datetime.time], Any)]"
            ],
            "arguments": {
                "journeys": [],
                "target": [
                    "str"
                ],
                "bins": [
                    "List[_datetime.time]"
                ]
            }
        },
        "to_time": {
            "name": "to_time",
            "location": 384,
            "return": [
                "pd_@_NaT"
            ],
            "arguments": {
                "dt": []
            }
        },
        "display": {
            "name": "display",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "df": []
            }
        },
        "show_passage": {
            "name": "show_passage",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "passage": [
                    "busboy.model.Passage"
                ]
            }
        },
        "containing_sections": {
            "name": "containing_sections",
            "location": 435,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "sections": [
                    "List[Union[(prediction.RoadSection, prediction.StopCircle)]]"
                ],
                "longitude": [],
                "latitude": []
            }
        },
        "train_day_binned_predictors.train_predictors": {
            "name": "train_predictors",
            "location": 298,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": [],
                "bins": []
            }
        },
        "train_day_binned_predictors.train_binned_predictors": {
            "name": "train_binned_predictors",
            "location": 308,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": [],
                "bins": []
            }
        },
        "train_day_binned_predictors.select_predictor": {
            "name": "select_predictor",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "observation_time": []
            }
        },
        "train_binned_average_predictors.train_predictors": {
            "name": "train_predictors",
            "location": 350,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": [],
                "bins": []
            }
        },
        "train_binned_average_predictors.select_predictor": {
            "name": "select_predictor",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "observation_time": []
            }
        }
    },
    "busboy-master/busboy/demo/__init__.py": {},
    "busboy-master/busboy/experiments/polling.py": {
        "poll_continuously": {
            "name": "poll_continuously",
            "location": 18,
            "return": [
                "List[busboy.experiments.types.PollResult[busboy.util.Either[(Exception, m.StopPassageResponse)]]]"
            ],
            "arguments": {
                "stops": [
                    "List[m.StopId]"
                ],
                "interval": [
                    "float"
                ]
            }
        },
        "poll_stops": {
            "name": "poll_stops",
            "location": 35,
            "return": [
                "Dict[(m.StopId, busboy.util.Either[(Exception, m.StopPassageResponse)])]"
            ],
            "arguments": {
                "stops": [
                    "List[m.StopId]"
                ]
            }
        },
        "check_many_stops": {
            "name": "check_many_stops",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "two_second": {
            "name": "two_second",
            "location": 61,
            "return": [
                "List[busboy.experiments.types.PollResult[busboy.util.Either[(Exception, m.StopPassageResponse)]]]"
            ],
            "arguments": {}
        },
        "store_two_second": {
            "name": "store_two_second",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "busboy-master/busboy/experiments/types.py": {
        "PollResult.filter": {
            "name": "filter",
            "location": 25,
            "return": [
                "PollResult[T]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "PollResult.map": {
            "name": "map",
            "location": 30,
            "return": [
                "PollResult[U]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([T], U)]"
                ]
            }
        },
        "PollResult.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pr": [
                    "PollResult"
                ]
            }
        },
        "PollResult.from_json": {
            "name": "from_json",
            "location": 48,
            "return": [
                "PollResult"
            ],
            "arguments": {
                "j": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "PollResult.trips": {
            "name": "trips",
            "location": 57,
            "return": [
                "PollResult[set]"
            ],
            "arguments": {
                "pr": [
                    "PollResult"
                ]
            }
        },
        "PollResult.all_trips": {
            "name": "all_trips",
            "location": 63,
            "return": [
                "Set[busboy.util.Maybe[m.TripId]]"
            ],
            "arguments": {
                "pr": [
                    "PollResult"
                ]
            }
        },
        "PollResult.all_passages": {
            "name": "all_passages",
            "location": 67,
            "return": [
                "Set[m.Passage]"
            ],
            "arguments": {
                "pr": [
                    "PollResult"
                ]
            }
        },
        "PassageTrip.from_passage": {
            "name": "from_passage",
            "location": 86,
            "return": [
                "PassageTrip"
            ],
            "arguments": {
                "p": [
                    "m.Passage"
                ]
            }
        }
    },
    "busboy-master/busboy/experiments/__init__.py": {
        "many_stops_data": {
            "name": "many_stops_data",
            "location": 50,
            "return": [
                "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
            ],
            "arguments": {}
        },
        "two_second_data": {
            "name": "two_second_data",
            "location": 54,
            "return": [
                "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
            ],
            "arguments": {}
        },
        "poll_result_data": {
            "name": "poll_result_data",
            "location": 58,
            "return": [
                "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "poll_shelve_data": {
            "name": "poll_shelve_data",
            "location": 64,
            "return": [
                "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "trip_presences": {
            "name": "trip_presences",
            "location": 69,
            "return": [
                "Dict[(busboy.experiments.types.PassageTrip, busboy.experiments.types.PollResult[bool])]"
            ],
            "arguments": {
                "pr": [
                    "busboy.experiments.types.PollResult[m.StopPassageResponse]"
                ]
            }
        },
        "spr_trip_time": {
            "name": "spr_trip_time",
            "location": 74,
            "return": [
                "u.Either[(str, _datetime.datetime)]"
            ],
            "arguments": {
                "spr": [
                    "m.StopPassageResponse"
                ],
                "t": [
                    "m.TripId"
                ]
            }
        },
        "presence_display": {
            "name": "presence_display",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "pd": [
                    "Dict[(busboy.experiments.types.PassageTrip, busboy.experiments.types.PollResult[bool])]"
                ],
                "stops": [
                    "Dict[(str, m.Stop)]"
                ],
                "routes": [
                    "Dict[(str, m.Route)]"
                ]
            }
        },
        "trip_stops": {
            "name": "trip_stops",
            "location": 110,
            "return": [
                "Dict[(u.Maybe[m.TripId], Set[m.StopId])]"
            ],
            "arguments": {
                "pr": [
                    "busboy.experiments.types.PollResult[m.StopPassageResponse]"
                ]
            }
        },
        "route_cover": {
            "name": "route_cover",
            "location": 121,
            "return": [
                "Optional[Set[m.StopId]]"
            ],
            "arguments": {
                "d": [
                    "Dict[(m.TripId, Set[m.StopId])]"
                ]
            }
        },
        "stop_counts": {
            "name": "stop_counts",
            "location": 137,
            "return": [
                "busboy.experiments.types.StopCounts"
            ],
            "arguments": {
                "d": [
                    "Dict[(m.TripId, Set[m.StopId])]"
                ]
            }
        },
        "stop_trips": {
            "name": "stop_trips",
            "location": 148,
            "return": [
                "busboy.experiments.types.StopTrips"
            ],
            "arguments": {
                "pr": [
                    "busboy.experiments.types.PollResult[m.StopPassageResponse]"
                ]
            }
        },
        "show_presences": {
            "name": "show_presences",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "convert_shelf_to_json": {
            "name": "convert_shelf_to_json",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "route_ids": {
            "name": "route_ids",
            "location": 173,
            "return": [
                "Set[u.Maybe[m.RouteId]]"
            ],
            "arguments": {
                "prs": [
                    "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "updates": {
            "name": "updates",
            "location": 183,
            "return": [
                "Dict[(u.Maybe[m.TripId], List[m.Passage])]"
            ],
            "arguments": {
                "prs": [
                    "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "update_times": {
            "name": "update_times",
            "location": 193,
            "return": [
                "Dict[(u.Maybe[m.TripId], List[u.Maybe[_datetime.datetime]])]"
            ],
            "arguments": {
                "prs": [
                    "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "vehicle_updates": {
            "name": "vehicle_updates",
            "location": 199,
            "return": [
                "Dict[(u.Maybe[m.VehicleId], Dict[(_datetime.datetime, Dict[(m.StopId, List[m.Passage])])])]"
            ],
            "arguments": {
                "prs": [
                    "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "display_update_times": {
            "name": "display_update_times",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "uts": [
                    "Dict[(Any, List[Optional[_datetime.datetime]])]"
                ]
            }
        },
        "display_updates": {
            "name": "display_updates",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "uts": [
                    "Dict[(Any, List[Tuple[(_datetime.datetime, m.Passage)]])]"
                ]
            }
        },
        "display_vehicle_updates": {
            "name": "display_vehicle_updates",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "updates": [
                    "Dict[(u.Maybe[m.VehicleId], Dict[(_datetime.datetime, Dict[(m.StopId, List[m.Passage])])])]"
                ]
            }
        },
        "display_nones": {
            "name": "display_nones",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "updates": [
                    "Dict[(u.Maybe[m.VehicleId], Dict[(_datetime.datetime, Dict[(m.StopId, List[m.Passage])])])]"
                ]
            }
        },
        "display_poll_results": {
            "name": "display_poll_results",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "prs": [
                    "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "positions": {
            "name": "positions",
            "location": 274,
            "return": [
                "Dict[(m.VehicleId, List[Tuple[(_datetime.datetime, Any)]])]"
            ],
            "arguments": {
                "uts": [
                    "Dict[(m.VehicleId, List[Tuple[(_datetime.datetime, m.Passage)]])]"
                ]
            }
        },
        "old_unique_results": {
            "name": "old_unique_results",
            "location": 292,
            "return": [
                "Dict[(m.StopId, Set[Tuple[(_datetime.datetime, m.StopPassageResponse)]])]"
            ],
            "arguments": {
                "prs": [
                    "List[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 303,
            "return": [
                "Iterable[Tuple[(_datetime.datetime, m.StopId, m.StopPassageResponse)]]"
            ],
            "arguments": {
                "prs": [
                    "Iterable[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        },
        "unique_results": {
            "name": "unique_results",
            "location": 311,
            "return": [
                "Iterable[Tuple[(_datetime.datetime, m.StopId, m.StopPassageResponse)]]"
            ],
            "arguments": {
                "rs": [
                    "Iterable[Tuple[(_datetime.datetime, m.StopId, m.StopPassageResponse)]]"
                ]
            }
        },
        "unique_positions": {
            "name": "unique_positions",
            "location": 317,
            "return": [
                "Iterable[Tuple[(_datetime.datetime, m.StopId, Iterable[u.Maybe[Tuple[(Any, Any)]]])]]"
            ],
            "arguments": {
                "prs": [
                    "Iterable[busboy.experiments.types.PollResult[m.StopPassageResponse]]"
                ]
            }
        }
    },
    "busboy-master/busboy/map/map.py": {
        "default_map": {
            "name": "default_map",
            "location": 12,
            "return": [
                "Map",
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "trip_markers": {
            "name": "trip_markers",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "tps": [
                    "float",
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "markers": {
            "name": "markers",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "pandas.Series",
                    "Dict[int, pandas.DataFrame]",
                    "str",
                    "dict"
                ]
            }
        },
        "road_cover": {
            "name": "road_cover",
            "location": 116,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "interval": [
                    "float"
                ]
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delete": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Map.create_markers": {
            "name": "create_markers",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "dict",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "Map.create_markers_df": {
            "name": "create_markers_df",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "list"
                ]
            }
        },
        "Map.clear_markers": {
            "name": "clear_markers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.add_markers": {
            "name": "add_markers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "m.TripId"
                ]
            }
        },
        "Map.display": {
            "name": "display",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Map.display_df": {
            "name": "display_df",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict[str, typing.Any]",
                    "pandas.DataFrame",
                    "Dict[str, Any]"
                ]
            }
        },
        "Map._add_marker": {
            "name": "_add_marker",
            "location": 85,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "tooltip": [
                    "str"
                ]
            }
        },
        "Map.add_marker": {
            "name": "add_marker",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "bool",
                    "bytearray",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "tooltip": [
                    "str"
                ]
            }
        },
        "Map.add_polygon": {
            "name": "add_polygon",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "float",
                    "pandas.DataFrame"
                ],
                "colour": [
                    "str"
                ]
            }
        },
        "Map.add_layer": {
            "name": "add_layer",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "Optional[int]",
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "None",
                    "Tuple[FrozenSet[int]]",
                    "tuple[frozenset]"
                ]
            }
        },
        "Map.remove_layer": {
            "name": "remove_layer",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "list",
                    "str",
                    "list[]",
                    "int",
                    "set",
                    "set[]"
                ]
            }
        },
        "Map.clear_layers": {
            "name": "clear_layers",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "busboy-master/busboy/map/__init__.py": {},
    "busboy-master/busboy/prediction/pandas.py": {
        "travel_times": {
            "name": "travel_times",
            "location": 7,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "journeys": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "list[str]",
                    "Tuple[int, int, int]",
                    "List[str]",
                    "bool"
                ],
                "stops": [
                    "List[str]"
                ],
                "last_known_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ]
            }
        },
        "travel_times_df": {
            "name": "travel_times_df",
            "location": 16,
            "return": [
                "numpy.ndarray",
                "str",
                "bool"
            ],
            "arguments": {
                "journeys": [
                    "str",
                    "list[float]",
                    "pandas.DataFrame",
                    "int",
                    "float",
                    "List[float]"
                ],
                "last_known_column": [
                    "str"
                ],
                "target_column": [
                    "str"
                ]
            }
        }
    },
    "busboy-master/busboy/prediction/sklearn.py": {
        "journeys": {
            "name": "journeys",
            "location": 17,
            "return": [
                "Dict[(api.TimetableVariant, Any)]"
            ],
            "arguments": {
                "snapshots": [
                    "list"
                ],
                "timetable_variants": [
                    "Set[api.TimetableVariant]"
                ],
                "route_sections": [
                    "Dict[(api.TimetableVariant, List[Union[(prediction.RoadSection, prediction.StopCircle)]])]"
                ]
            }
        },
        "join_journeys": {
            "name": "join_journeys",
            "location": 45,
            "return": [
                "Dict[(api.TimetableVariant, Any)]"
            ],
            "arguments": {
                "journeys": [
                    "List[Dict[(api.TimetableVariant, Any)]]"
                ]
            }
        }
    },
    "busboy-master/busboy/prediction/__init__.py": {
        "pd_stop_distance": {
            "name": "pd_stop_distance",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "r": [],
                "stop": [
                    "Tuple[(Any, Any)]"
                ]
            }
        },
        "pd_stop_distances": {
            "name": "pd_stop_distances",
            "location": 47,
            "return": [],
            "arguments": {
                "df": [],
                "stop": [
                    "Tuple[(Any, Any)]"
                ]
            }
        },
        "stop_times_220": {
            "name": "stop_times_220",
            "location": 53,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "closest_stops_220": {
            "name": "closest_stops_220",
            "location": 65,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "closest_stop_gpd": {
            "name": "closest_stop_gpd",
            "location": 74,
            "return": [
                "m.Stop"
            ],
            "arguments": {
                "latitude": [
                    "float"
                ],
                "longitude": [
                    "float"
                ],
                "stops": [
                    "List[m.Stop]"
                ]
            }
        },
        "include_stop": {
            "name": "include_stop",
            "location": 81,
            "return": [],
            "arguments": {
                "df": [],
                "s": [
                    "m.Stop"
                ]
            }
        },
        "new_stop_distance": {
            "name": "new_stop_distance",
            "location": 87,
            "return": [
                "float"
            ],
            "arguments": {
                "e": [],
                "s": [
                    "m.Stop"
                ]
            }
        },
        "new_stop_distances": {
            "name": "new_stop_distances",
            "location": 91,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "es": [
                    "list"
                ],
                "s": [
                    "m.Stop"
                ]
            }
        },
        "distance_vector": {
            "name": "distance_vector",
            "location": 95,
            "return": [
                "DistanceVector"
            ],
            "arguments": {
                "c1": [
                    "Tuple[(Any, Any)]"
                ],
                "c2": [
                    "Tuple[(Any, Any)]"
                ]
            }
        },
        "unit_vector": {
            "name": "unit_vector",
            "location": 111,
            "return": [],
            "arguments": {
                "vector": []
            }
        },
        "angle_between": {
            "name": "angle_between",
            "location": 119,
            "return": [
                "float"
            ],
            "arguments": {
                "v1": [
                    "DistanceVector"
                ],
                "v2": [
                    "DistanceVector"
                ]
            }
        },
        "cached_contains": {
            "name": "cached_contains",
            "location": 133,
            "return": [],
            "arguments": {
                "polygon": [],
                "lon": [],
                "lat": []
            }
        },
        "hash_polygon": {
            "name": "hash_polygon",
            "location": 160,
            "return": [
                "int"
            ],
            "arguments": {
                "polygon": []
            }
        },
        "monkey_patch_polygon": {
            "name": "monkey_patch_polygon",
            "location": 169,
            "return": [],
            "arguments": {
                "polygon": []
            }
        },
        "make_circle": {
            "name": "make_circle",
            "location": 175,
            "return": [
                "StopCircle"
            ],
            "arguments": {
                "stop": [],
                "circle_radius": []
            }
        },
        "make_rectangle": {
            "name": "make_rectangle",
            "location": 185,
            "return": [
                "RoadSection"
            ],
            "arguments": {
                "s1": [],
                "s2": [],
                "rectangle_width": []
            }
        },
        "route_sections": {
            "name": "route_sections",
            "location": 199,
            "return": [
                "Iterator[Union[(RoadSection, StopCircle)]]"
            ],
            "arguments": {
                "stops": [
                    "Iterable[m.Stop]"
                ],
                "rectangle_width": [
                    "float"
                ],
                "circle_radius": [
                    "float"
                ]
            }
        },
        "widen_line": {
            "name": "widen_line",
            "location": 227,
            "return": [],
            "arguments": {
                "linestring": [],
                "width": [
                    "float"
                ]
            }
        },
        "assign_region": {
            "name": "assign_region",
            "location": 236,
            "return": [
                "Tuple[(Any, List[Union[(RoadSection, StopCircle)]])]"
            ],
            "arguments": {
                "sections": [
                    "Iterable[Union[(RoadSection, StopCircle)]]"
                ],
                "e": []
            }
        },
        "assign_regions": {
            "name": "assign_regions",
            "location": 242,
            "return": [
                "Generator[(Tuple[(Any, List[Union[(RoadSection, StopCircle)]])], None, None)]"
            ],
            "arguments": {
                "rs": [
                    "Iterable[Union[(RoadSection, StopCircle)]]"
                ],
                "es": [
                    "Iterable"
                ]
            }
        },
        "most_recent_stops": {
            "name": "most_recent_stops",
            "location": 248,
            "return": [
                "Iterable[Tuple[(Any, u.Maybe[m.Stop])]]"
            ],
            "arguments": {
                "ts": [
                    "Iterable[Tuple[(Any, List[Union[(RoadSection, StopCircle)]])]]"
                ]
            }
        },
        "possible_variants": {
            "name": "possible_variants",
            "location": 264,
            "return": [
                "Iterable[Tuple[(Any, Set[Tuple[(api.TimetableVariant, int)]])]]"
            ],
            "arguments": {
                "snapshots": [
                    "Iterable"
                ],
                "sections": [
                    "Dict[(api.TimetableVariant, List[Union[(RoadSection, StopCircle)]])]"
                ]
            }
        },
        "check_variant_order": {
            "name": "check_variant_order",
            "location": 277,
            "return": [
                "Iterable[Tuple[(Any, Set[Tuple[(api.TimetableVariant, int)]])]]"
            ],
            "arguments": {
                "snapshots": [
                    "List[Tuple[(Any, Set[Tuple[(api.TimetableVariant, int)]])]]"
                ]
            }
        },
        "duplicate_positions": {
            "name": "duplicate_positions",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [],
                "s2": []
            }
        },
        "drop_duplicate_positions": {
            "name": "drop_duplicate_positions",
            "location": 308,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "snapshots": [
                    "Iterable"
                ],
                "duplicates": [
                    "Callable[([Any, Any], bool)]"
                ]
            }
        },
        "section_times": {
            "name": "section_times",
            "location": 324,
            "return": [
                "Dict[(api.TimetableVariant, List[SectionTime])]"
            ],
            "arguments": {
                "snapshots": [
                    "List[Tuple[(Any, Dict[(api.TimetableVariant, Set[int])])]]"
                ],
                "sections": [
                    "Dict[(api.TimetableVariant, List[Union[(RoadSection, StopCircle)]])]"
                ]
            }
        },
        "journeys": {
            "name": "journeys",
            "location": 378,
            "return": [
                "Dict[(api.TimetableVariant, List[List[SectionTime]])]"
            ],
            "arguments": {
                "section_times": [
                    "Dict[(api.TimetableVariant, List[SectionTime])]"
                ]
            }
        },
        "pad_journeys": {
            "name": "pad_journeys",
            "location": 413,
            "return": [
                "Dict[(api.TimetableVariant, List[List[SectionTime]])]"
            ],
            "arguments": {
                "variant_journeys": [
                    "Dict[(api.TimetableVariant, List[List[SectionTime]])]"
                ]
            }
        },
        "stop_times": {
            "name": "stop_times",
            "location": 461,
            "return": [
                "Dict[(api.TimetableVariant, List[List[Union[(NotSeenAtStop, SeenAtStop)]]])]"
            ],
            "arguments": {
                "snapshots": [
                    "List[Tuple[(Any, Dict[(api.TimetableVariant, Set[int])])]]"
                ],
                "sections": [
                    "Dict[(api.TimetableVariant, List[Union[(RoadSection, StopCircle)]])]"
                ]
            }
        },
        "journeys_dataframe": {
            "name": "journeys_dataframe",
            "location": 487,
            "return": [
                "Iterator[Tuple[(api.TimetableVariant, Any)]]"
            ],
            "arguments": {
                "journeys": [
                    "Iterable[Tuple[(api.TimetableVariant, List[List[Optional[Tuple[(_datetime.datetime, _datetime.datetime)]]]])]]"
                ]
            }
        },
        "estimate_arrival": {
            "name": "estimate_arrival",
            "location": 510,
            "return": [
                "Iterator[Tuple[(api.TimetableVariant, List[List[Optional[Tuple[(_datetime.datetime, _datetime.datetime)]]]])]]"
            ],
            "arguments": {
                "variant_journeys": [
                    "Iterable[Tuple[(api.TimetableVariant, List[List[Union[(NotSeenAtStop, SeenAtStop)]]])]]"
                ]
            }
        },
        "stop_times_proximity": {
            "name": "stop_times_proximity",
            "location": 530,
            "return": [
                "Iterator[Tuple[(m.Stop, _datetime.datetime)]]"
            ],
            "arguments": {
                "snapshots": [
                    "Iterable"
                ],
                "stops": [
                    "Iterable[m.Stop]"
                ],
                "distance_limit": [
                    "float"
                ]
            }
        },
        "stop_distance_geopandas": {
            "name": "stop_distance_geopandas",
            "location": 542,
            "return": [
                "float"
            ],
            "arguments": {
                "snapshot": [],
                "stop": [
                    "m.Stop"
                ]
            }
        },
        "AbstractRouteSection.contains": {
            "name": "contains",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lon": [],
                "lat": []
            }
        },
        "RoadSection.difference": {
            "name": "difference",
            "location": 147,
            "return": [
                "u.Maybe[RoadSection]"
            ],
            "arguments": {
                "self": [],
                "circle": [
                    "StopCircle"
                ]
            }
        },
        "route_sections.shapes": {
            "name": "shapes",
            "location": 204,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "most_recent_stops.choose_stop": {
            "name": "choose_stop",
            "location": 251,
            "return": [
                "Nothing",
                "Just"
            ],
            "arguments": {
                "rs": []
            }
        },
        "journeys.f": {
            "name": "f",
            "location": 388,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        },
        "estimate_arrival.estimate": {
            "name": "estimate",
            "location": 515,
            "return": [
                "Just"
            ],
            "arguments": {
                "arrival": []
            }
        }
    },
    "busboy-master/busboy/recording/routes.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_for_updates": {
            "name": "check_for_updates",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "stop": [
                    "busboy.model.StopId"
                ],
                "record": [
                    "RouteRecord"
                ]
            }
        },
        "RouteRecord.to_json": {
            "name": "to_json",
            "location": 35,
            "return": [
                "Dict[(str, List[Tuple[(str, Any)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteRecord.entries": {
            "name": "entries",
            "location": 47,
            "return": [
                "Iterator[Tuple[(Optional[str], str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "busboy-master/busboy/recording/__init__.py": {
        "loop": {
            "name": "loop",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "stops": [
                    "Iterable[str]"
                ],
                "interval": [
                    "float"
                ]
            }
        },
        "loop_something": {
            "name": "loop_something",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "Callable[([A], A)]"
                ],
                "a": [
                    "A"
                ],
                "interval": [
                    "float"
                ]
            }
        },
        "new_loop": {
            "name": "new_loop",
            "location": 41,
            "return": [
                "Dict[(m.PassageId, m.Passage)]"
            ],
            "arguments": {
                "pool": [
                    "concurrent.futures.thread.ThreadPoolExecutor"
                ],
                "stops": [
                    "Iterable[m.StopId]"
                ],
                "state": [
                    "Dict[(m.PassageId, m.Passage)]"
                ]
            }
        },
        "call_stops": {
            "name": "call_stops",
            "location": 58,
            "return": [
                "Dict[(concurrent.futures._base.Future[m.StopPassageResponse], m.StopId)]"
            ],
            "arguments": {
                "pool": [
                    "concurrent.futures.thread.ThreadPoolExecutor"
                ],
                "stops": [
                    "Iterable[m.StopId]"
                ]
            }
        },
        "current_state": {
            "name": "current_state",
            "location": 64,
            "return": [
                "Generator[(Tuple[(m.PassageId, m.Passage)], None, None)]"
            ],
            "arguments": {
                "spr": [
                    "m.StopPassageResponse"
                ]
            }
        },
        "updated_state": {
            "name": "updated_state",
            "location": 72,
            "return": [
                "Dict[(m.PassageId, m.Passage)]"
            ],
            "arguments": {
                "last": [
                    "Dict[(m.PassageId, m.Passage)]"
                ],
                "current": [
                    "Dict[(m.PassageId, m.Passage)]"
                ]
            }
        },
        "store_state": {
            "name": "store_state",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Dict[(m.PassageId, m.Passage)]"
                ],
                "poll_time": [
                    "dt.datetime"
                ],
                "c": [
                    "pp2._psycopg.connection"
                ]
            }
        }
    },
    "busboy-master/busboy/util/notebooks.py": {
        "snapshot_to_marker": {
            "name": "snapshot_to_marker",
            "location": 20,
            "return": [
                "int",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "entry": [
                    "typing.Callable[, ]",
                    "bool",
                    "busboy.database.BusSnapshot",
                    "Callable"
                ]
            }
        },
        "plot_entries": {
            "name": "plot_entries",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "busboy.map.map.Map"
                ],
                "snapshots": [
                    "list"
                ],
                "interval": [
                    "float"
                ],
                "initial_delay": [
                    "float"
                ],
                "snapshot_to_layer": [
                    "Callable[([Any], Any)]"
                ],
                "clear": [
                    "bool"
                ]
            }
        },
        "plot_snapshot_trail": {
            "name": "plot_snapshot_trail",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "busboy.map.map.Map"
                ],
                "snapshots": [
                    "list"
                ],
                "trail_size": [
                    "int"
                ],
                "interval": [
                    "float"
                ],
                "initial_delay": [
                    "float"
                ]
            }
        },
        "show_timetables": {
            "name": "show_timetables",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "map": [
                    "busboy.map.map.Map"
                ],
                "timetables": [
                    "List[busboy.apis.Timetable]"
                ]
            }
        },
        "read_preprocessed_data": {
            "name": "read_preprocessed_data",
            "location": 103,
            "return": [
                "List[Tuple[(busboy.apis.TimetableVariant, Any)]]"
            ],
            "arguments": {
                "route_name": [
                    "str"
                ]
            }
        },
        "column_names": {
            "name": "column_names",
            "location": 129,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "stop_names": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "busboy-master/busboy/util/typevars.py": {},
    "busboy-master/busboy/util/__init__.py": {
        "swap": {
            "name": "swap",
            "location": 31,
            "return": [
                "Tuple[(B, A)]"
            ],
            "arguments": {
                "t": [
                    "Tuple[(A, B)]"
                ]
            }
        },
        "omap": {
            "name": "omap",
            "location": 35,
            "return": [
                "Optional[B]"
            ],
            "arguments": {
                "f": [
                    "Callable[([A], B)]"
                ],
                "x": [
                    "Optional[A]"
                ]
            }
        },
        "oget": {
            "name": "oget",
            "location": 39,
            "return": [
                "A"
            ],
            "arguments": {
                "x": [
                    "Optional[A]"
                ],
                "a": [
                    "A"
                ]
            }
        },
        "pairwise": {
            "name": "pairwise",
            "location": 43,
            "return": [
                "Iterable[Tuple[(A, A)]]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[A]"
                ]
            }
        },
        "sliding_window": {
            "name": "sliding_window",
            "location": 50,
            "return": [
                "Iterator[Tuple[(A, ...)]]"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "xs": [
                    "Iterable[A]"
                ]
            }
        },
        "tuplewise_padded": {
            "name": "tuplewise_padded",
            "location": 58,
            "return": [
                "Iterator[Tuple[(Union[(A, B)], ...)]]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "xs": [
                    "Iterable[A]"
                ],
                "pad_value": [
                    "B"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 65,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "Iterable[A]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 70,
            "return": [
                "Maybe[A]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "xs": [
                    "Iterable[A]"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 75,
            "return": [
                "Maybe[A]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[A]"
                ]
            }
        },
        "drop": {
            "name": "drop",
            "location": 83,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "Iterable[A]"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 88,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[A]"
                ],
                "key": [
                    "Optional[Callable[([A], B)]]"
                ]
            }
        },
        "unique_justseen": {
            "name": "unique_justseen",
            "location": 108,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[A]"
                ],
                "key": [
                    "str",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 115,
            "return": [
                "generator"
            ],
            "arguments": {
                "f": [
                    "Callable[([A], A)]"
                ],
                "a": [
                    "A"
                ]
            }
        },
        "interval": {
            "name": "interval",
            "location": 121,
            "return": [
                "Generator[(dt.datetime, Any, Any)]"
            ],
            "arguments": {
                "i": [
                    "float"
                ]
            }
        },
        "combine_dictionaries": {
            "name": "combine_dictionaries",
            "location": 131,
            "return": [
                "Dict[(A, List[B])]"
            ],
            "arguments": {
                "xs": [
                    "Dict[(A, B)]"
                ],
                "ys": [
                    "Dict[(A, B)]"
                ]
            }
        },
        "dict_collect_list": {
            "name": "dict_collect_list",
            "location": 138,
            "return": [
                "Dict[(B, List[A])]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[A]"
                ],
                "key": [
                    "Callable[([A], B)]"
                ]
            }
        },
        "dict_collect_set": {
            "name": "dict_collect_set",
            "location": 142,
            "return": [
                "Dict[(B, Set[A])]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[A]"
                ],
                "key": [
                    "Callable[([A], B)]"
                ]
            }
        },
        "dict_collect": {
            "name": "dict_collect",
            "location": 146,
            "return": [
                "Dict[(B, C)]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[A]"
                ],
                "key": [
                    "Callable[([A], B)]"
                ],
                "join": [
                    "Callable[([C, A], None)]"
                ],
                "empty": [
                    "Callable[([], C)]"
                ]
            }
        },
        "Maybe.__iter__": {
            "name": "__iter__",
            "location": 159,
            "return": [
                "Iterator[A]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 165,
            "return": [
                "Maybe[B]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([A], B)]"
                ]
            }
        },
        "Maybe.bind": {
            "name": "bind",
            "location": 171,
            "return": [
                "Maybe[B]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([A], Maybe[B])]"
                ]
            }
        },
        "Maybe.bind_optional": {
            "name": "bind_optional",
            "location": 177,
            "return": [
                "Maybe[B]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([A], Optional[B])]"
                ]
            }
        },
        "Maybe.lift": {
            "name": "lift",
            "location": 180,
            "return": [
                "Maybe[C]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([A, B], C)]"
                ],
                "b": [
                    "Maybe[B]"
                ]
            }
        },
        "Maybe.ap": {
            "name": "ap",
            "location": 183,
            "return": [
                "Maybe[B]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Maybe[Callable[([A], B)]]"
                ]
            }
        },
        "Maybe.of": {
            "name": "of",
            "location": 187,
            "return": [
                "Maybe[A]"
            ],
            "arguments": {
                "x": [
                    "Optional[A]"
                ]
            }
        },
        "Maybe.or_else": {
            "name": "or_else",
            "location": 193,
            "return": [
                "Union[(A, B)]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "B"
                ]
            }
        },
        "Maybe.or_else_lazy": {
            "name": "or_else_lazy",
            "location": 199,
            "return": [
                "Union[(A, B)]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "Callable[([], B)]"
                ]
            }
        },
        "Maybe.optional": {
            "name": "optional",
            "location": 205,
            "return": [
                "Optional[A]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.either": {
            "name": "either",
            "location": 208,
            "return": [
                "Either[(E, A)]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "E"
                ]
            }
        },
        "Maybe.is_just": {
            "name": "is_just",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.is_nothing": {
            "name": "is_nothing",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.justs": {
            "name": "justs",
            "location": 221,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "ms": [
                    "Iterable[Maybe[A]]"
                ]
            }
        },
        "Either.map": {
            "name": "map",
            "location": 238,
            "return": [
                "Either[(E, B)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([A], B)]"
                ]
            }
        },
        "Either.bind": {
            "name": "bind",
            "location": 244,
            "return": [
                "Either[(E, B)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([A], Either[(E, B)])]"
                ]
            }
        },
        "Either.ap": {
            "name": "ap",
            "location": 250,
            "return": [
                "Either[(E, B)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Either[(E, Callable[([A], B)])]"
                ]
            }
        }
    },
    "busboy-master/stubs/geopandas.py": {
        "GeoSeries.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeoSeries.to_crs": {
            "name": "to_crs",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "crs": []
            }
        },
        "GeoSeries.buffer": {
            "name": "buffer",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "resolution": []
            }
        }
    },
    "busboy-master/stubs/ipyleaflet.py": {
        "Map.add_layer": {
            "name": "add_layer",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "Map.remove_layer": {
            "name": "remove_layer",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "Map.add_control": {
            "name": "add_control",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "control": []
            }
        }
    },
    "busboy-master/stubs/numpy.py": {},
    "busboy-master/stubs/pandas.py": {
        "concat": {
            "name": "concat",
            "location": 28,
            "return": [],
            "arguments": {
                "dfs": []
            }
        },
        "read_csv": {
            "name": "read_csv",
            "location": 29,
            "return": [],
            "arguments": {
                "filepath_or_buffer": []
            }
        },
        "DataFrame.__getitem__": {
            "name": "__getitem__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "DataFrame.__setitem__": {
            "name": "__setitem__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "DataFrame.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DataFrame.copy": {
            "name": "copy",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.itertuples": {
            "name": "itertuples",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.set_index": {
            "name": "set_index",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "DataFrame.to_csv": {
            "name": "to_csv",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "filepath_or_buffer": [],
                "mode": [],
                "header": [],
                "index": []
            }
        },
        "DataFrame.fillna": {
            "name": "fillna",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DataFrame.notna": {
            "name": "notna",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "busboy-master/stubs/bs4/element.py": {
        "Tag.__getitem__": {
            "name": "__getitem__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Tag.__getattribute__": {
            "name": "__getattribute__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Tag.find_all": {
            "name": "find_all",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "recursive": []
            }
        }
    },
    "busboy-master/stubs/bs4/__init__.py": {
        "BeautifulSoup.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "features": []
            }
        }
    },
    "busboy-master/stubs/psycopg2/extensions.py": {
        "cursor.__enter__": {
            "name": "__enter__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cursor.__exit__": {
            "name": "__exit__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cursor.mogrify": {
            "name": "mogrify",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "items": []
            }
        },
        "cursor.execute": {
            "name": "execute",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "values": []
            }
        },
        "cursor.fetchall": {
            "name": "fetchall",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cursor.fetchone": {
            "name": "fetchone",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "connection.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "connection.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "connection.close": {
            "name": "close",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "connection.cursor": {
            "name": "cursor",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "busboy-master/stubs/psycopg2/__init__.py": {
        "connect": {
            "name": "connect",
            "location": 5,
            "return": [],
            "arguments": {
                "s": [],
                "dbname": [],
                "user": []
            }
        }
    },
    "busboy-master/stubs/shapely/__init__.py": {},
    "busboy-master/stubs/shapely/geometry/base.py": {
        "BaseGeometry.almost_equals": {
            "name": "almost_equals",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "decimal": []
            }
        },
        "BaseGeometry.buffer": {
            "name": "buffer",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "resolution": [],
                "quadsegs": [],
                "cap_style": [],
                "join_style": [],
                "mitre_limit": []
            }
        },
        "BaseGeometry.contains": {
            "name": "contains",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseGeometry.distance": {
            "name": "distance",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseGeometry.difference": {
            "name": "difference",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "busboy-master/stubs/shapely/geometry/linestring.py": {
        "LineString.parallel_offset": {
            "name": "parallel_offset",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "side": [],
                "resolution": [],
                "join_style": [],
                "mitre_limit": []
            }
        }
    },
    "busboy-master/stubs/shapely/geometry/multilinestring.py": {
        "MultiLineString.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        }
    },
    "busboy-master/stubs/shapely/geometry/point.py": {
        "Point.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "busboy-master/stubs/shapely/geometry/__init__.py": {
        "MultiPoint.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "points": []
            }
        }
    },
    "busboy-master/stubs/sklearn/base.py": {},
    "busboy-master/stubs/sklearn/__init__.py": {}
}
{
    "busboy-master/wsgi.py": {},
    "busboy-master/busboy/apis.py": {
        "stops": {
            "name": "stops",
            "location": 35,
            "return": [
                "List[busboy.model.Stop]"
            ],
            "arguments": {}
        },
        "routes": {
            "name": "routes",
            "location": 43,
            "return": [
                "List[busboy.model.Route]"
            ],
            "arguments": {}
        },
        "from_var": {
            "name": "from_var",
            "location": 49,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "r": [
                    "str",
                    "int",
                    "Tuple",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "trips": {
            "name": "trips",
            "location": 56,
            "return": [
                "Set[busboy.model.TripId]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "stop_ids": {
            "name": "stop_ids",
            "location": 62,
            "return": [
                "set"
            ],
            "arguments": {}
        },
        "routes_at_stop": {
            "name": "routes_at_stop",
            "location": 67,
            "return": [
                "set"
            ],
            "arguments": {
                "stop": [
                    "str",
                    "int",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "routes_at_stops": {
            "name": "routes_at_stops",
            "location": 76,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "stop_passage": {
            "name": "stop_passage",
            "location": 88,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "Iterator['Vertex']",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "Task"
                ],
                "timeout": [
                    "bytes",
                    "Dict",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "sp_stop": {
            "name": "sp_stop",
            "location": 101,
            "return": [
                "Callable",
                "str",
                "list",
                "busboy.util.Maybe[psycopg2.extensions.connection]"
            ],
            "arguments": {
                "s": [
                    "float",
                    "str",
                    "int",
                    "busboy.model.StopId"
                ],
                "timeout": [
                    "int",
                    "float",
                    "busboy.model.StopId",
                    "str"
                ]
            }
        },
        "sp_trip": {
            "name": "sp_trip",
            "location": 106,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "busboy.model.TripId",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "float",
                    "busboy.model.TripId",
                    "bool"
                ]
            }
        },
        "web_timetables": {
            "name": "web_timetables",
            "location": 110,
            "return": [
                "str",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "route_name": [
                    "str"
                ]
            }
        },
        "timetables": {
            "name": "timetables",
            "location": 122,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "route_name": [
                    "str",
                    "Dict[str,busboy.model.Stop]",
                    "int"
                ],
                "stops_by_name": [
                    "str",
                    "Dict[str,busboy.model.Stop]",
                    "int"
                ]
            }
        },
        "tables_by_route": {
            "name": "tables_by_route",
            "location": 194,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "rs": [
                    "str"
                ]
            }
        },
        "route_stops_to_file": {
            "name": "route_stops_to_file",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "stops": [
                    "Dict",
                    "Union[Dict,List]",
                    "BaseException",
                    "List",
                    "cdp.util.T_JSON_DICT",
                    "Dict[int,dict[int,Any]]",
                    "Dict[int,Dict[int,Any]]"
                ]
            }
        },
        "stops_from_names": {
            "name": "stops_from_names",
            "location": 258,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "names": [
                    "Dict[str,busboy.model.Stop]",
                    "str",
                    "Iterable[str]",
                    "Iterable"
                ],
                "sbn": [
                    "Dict[str,busboy.model.Stop]",
                    "str",
                    "Iterable[str]",
                    "Iterable"
                ]
            }
        },
        "match_stop_name": {
            "name": "match_stop_name",
            "location": 264,
            "return": [
                "Union[(busboy.util.Just[nothing], busboy.util.Nothing[nothing])]"
            ],
            "arguments": {
                "stops": [
                    "str",
                    "List",
                    "Dict[str,busboy.model.Stop]",
                    "int",
                    "Dict"
                ],
                "name": [
                    "str",
                    "Container[Taxon]",
                    "Optional[int]"
                ]
            }
        },
        "WebTimetable.from_page": {
            "name": "from_page",
            "location": 137,
            "return": [
                "Generator[(WebTimetable, Any, None)]"
            ],
            "arguments": {
                "soup": [
                    "str",
                    "bs4.BeautifulSoup",
                    "Dict",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "WebTimetable.routes": {
            "name": "routes",
            "location": 143,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.stop_names": {
            "name": "stop_names",
            "location": 150,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.columns": {
            "name": "columns",
            "location": 153,
            "return": [
                "itertools.zip_longest"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.times": {
            "name": "times",
            "location": 158,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable._times": {
            "name": "_times",
            "location": 161,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.stop_times": {
            "name": "stop_times",
            "location": 164,
            "return": [
                "List[List[Tuple[(Any, Any)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable._stop_times": {
            "name": "_stop_times",
            "location": 167,
            "return": [
                "Generator[(Iterator[Tuple[(Any, Any)]], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.variants": {
            "name": "variants",
            "location": 170,
            "return": [
                "Set[Tuple[(Any, Tuple[(nothing, ...)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.cell_time": {
            "name": "cell_time",
            "location": 184,
            "return": [
                "Union[(busboy.util.Just[nothing], busboy.util.Nothing[nothing])]"
            ],
            "arguments": {
                "t": [
                    "List[str]",
                    "bs4.elemenTag",
                    "List[dict]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "tables_by_route.table_id": {
            "name": "table_id",
            "location": 195,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "t": [
                    "bs4.elemenTag",
                    "Sequence[float]",
                    "markdown.util.etree.Element",
                    "Callable",
                    "str",
                    "dict"
                ]
            }
        },
        "Timetable.routes": {
            "name": "routes",
            "location": 223,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timetable.from_web_timetable": {
            "name": "from_web_timetable",
            "location": 227,
            "return": [
                "Timetable"
            ],
            "arguments": {
                "wt": [
                    "str",
                    "tuple"
                ],
                "stops_by_name": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Tag",
                    "Optional[Iterable]"
                ],
                "route_name": [
                    "str"
                ]
            }
        },
        "Timetable.unique_variants": {
            "name": "unique_variants",
            "location": 240,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "ts": [
                    "int"
                ]
            }
        },
        "TimetableVariant.__str__": {
            "name": "__str__",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimetableVariant.__hash__": {
            "name": "__hash__",
            "location": 254,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTimetable.from_page.right_id": {
            "name": "right_id",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int",
                    "Optional[int]",
                    "dict"
                ]
            }
        }
    },
    "busboy-master/busboy/constants.py": {},
    "busboy-master/busboy/database.py": {
        "default_connection": {
            "name": "default_connection",
            "location": 25,
            "return": [
                "pp2._psycopg.connection"
            ],
            "arguments": {}
        },
        "test_connection": {
            "name": "test_connection",
            "location": 29,
            "return": [
                "pp2._psycopg.connection"
            ],
            "arguments": {}
        },
        "snapshots": {
            "name": "snapshots",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "connection": [
                    "None",
                    "float",
                    "dict[, ]",
                    "int",
                    "str"
                ],
                "r": [
                    "None",
                    "str",
                    "bool",
                    "list[typing.Any]"
                ],
                "d": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "date_span": [
                    "None",
                    "str"
                ]
            }
        },
        "snapshots_df": {
            "name": "snapshots_df",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "connection": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]"
                ],
                "route": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]"
                ],
                "day": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]"
                ],
                "date_span": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "poll_times_df": {
            "name": "poll_times_df",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "connection": [
                    "Nothing"
                ]
            }
        },
        "data_gdf": {
            "name": "data_gdf",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "connection": [
                    "None",
                    "float",
                    "bool"
                ],
                "r": [
                    "None",
                    "float",
                    "bool"
                ],
                "d": [
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "store_route": {
            "name": "store_route",
            "location": 95,
            "return": [
                "Optional[Exception]"
            ],
            "arguments": {
                "r": [
                    "tuple[typing.Union[int,int]]"
                ],
                "conn": [
                    "None",
                    "bool",
                    "typing.AnyStr",
                    "typing.Any"
                ]
            }
        },
        "store_stop": {
            "name": "store_stop",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [
                    "dict[str, int]"
                ],
                "conn": [
                    "None",
                    "bool",
                    "typing.AnyStr",
                    "typing.Any"
                ]
            }
        },
        "store_trip": {
            "name": "store_trip",
            "location": 132,
            "return": [
                "Optional[Exception]"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int"
                ],
                "poll_time": [
                    "float",
                    "int"
                ],
                "connection": [
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "store_timetables": {
            "name": "store_timetables",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "store_timetable": {
            "name": "store_timetable",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "timetable": [
                    "int",
                    "str",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "bytearray"
                ],
                "route": [
                    "str",
                    "dict[str, str]"
                ],
                "conn": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "timetables": {
            "name": "timetables",
            "location": 229,
            "return": [
                "Generator[(Union[(busboy.util.Left[(nothing, nothing)], busboy.util.Right[(nothing, nothing)])], Any, None)]"
            ],
            "arguments": {
                "route": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "connection": [
                    "Nothing"
                ]
            }
        },
        "timetable": {
            "name": "timetable",
            "location": 246,
            "return": [
                "Union[(busboy.util.Left[(nothing, nothing)], busboy.util.Right[(nothing, nothing)])]"
            ],
            "arguments": {
                "timetable_id": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "connection": [
                    "Nothing"
                ]
            }
        },
        "timetable_variant": {
            "name": "timetable_variant",
            "location": 277,
            "return": [
                "Union[(busboy.util.Left[(nothing, nothing)], busboy.util.Right[(nothing, nothing)])]"
            ],
            "arguments": {
                "variant_id": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "connection": [
                    "Nothing"
                ]
            }
        },
        "test_database": {
            "name": "test_database",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "routes": {
            "name": "routes",
            "location": 324,
            "return": [
                "List[m.Route]"
            ],
            "arguments": {}
        },
        "routes_by_name": {
            "name": "routes_by_name",
            "location": 334,
            "return": [
                "Dict[(Any, m.Route)]"
            ],
            "arguments": {}
        },
        "routes_by_id": {
            "name": "routes_by_id",
            "location": 338,
            "return": [
                "Dict[(Any, m.Route)]"
            ],
            "arguments": {}
        },
        "trip_points": {
            "name": "trip_points",
            "location": 342,
            "return": [
                "TripPoints"
            ],
            "arguments": {
                "connection": [],
                "t": [
                    "tuple[typing.Union[int,int]]",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Callable[str, str]",
                    "str"
                ]
            }
        },
        "trips_on_day": {
            "name": "trips_on_day",
            "location": 452,
            "return": [
                "Set[m.TripId]"
            ],
            "arguments": {
                "c": [],
                "d": [
                    "float",
                    "str",
                    "bool",
                    "None"
                ],
                "r": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "day_span": {
            "name": "day_span",
            "location": 471,
            "return": [
                "Tuple[(dt.datetime, dt.datetime)]"
            ],
            "arguments": {
                "dates": [
                    "str"
                ]
            }
        },
        "stops_by_route_name": {
            "name": "stops_by_route_name",
            "location": 483,
            "return": [
                "List[m.Stop]"
            ],
            "arguments": {
                "c": [],
                "route": [
                    "str",
                    "list[str]",
                    "dict[str, M]"
                ]
            }
        },
        "stop_by_name": {
            "name": "stop_by_name",
            "location": 499,
            "return": [
                "Optional[m.Stop]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "stop_by_id": {
            "name": "stop_by_id",
            "location": 508,
            "return": [
                "Any"
            ],
            "arguments": {
                "c": [],
                "s": [
                    "str",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ]
            }
        },
        "stops": {
            "name": "stops",
            "location": 520,
            "return": [
                "List[m.Stop]"
            ],
            "arguments": {
                "c": [
                    "None",
                    "typing.IO"
                ]
            }
        },
        "stops_by_name": {
            "name": "stops_by_name",
            "location": 529,
            "return": [
                "Dict[(Any, m.Stop)]"
            ],
            "arguments": {
                "c": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "TripPoints.to_json": {
            "name": "to_json",
            "location": 361,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TripPoint.to_json": {
            "name": "to_json",
            "location": 371,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusSnapshot.from_db_row": {
            "name": "from_db_row",
            "location": 400,
            "return": [
                "BusSnapshot"
            ],
            "arguments": {
                "row": [
                    "tuple[]",
                    "bytes",
                    "str"
                ]
            }
        },
        "BusSnapshot.as_dict": {
            "name": "as_dict",
            "location": 423,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusSnapshot.from_passage": {
            "name": "from_passage",
            "location": 427,
            "return": [
                "BusSnapshot"
            ],
            "arguments": {
                "passage": [
                    "int",
                    "tuple[]",
                    "list[]",
                    "str"
                ],
                "time": [
                    "bool",
                    "None",
                    "typing.Callable[, ]",
                    "str",
                    "list[tuple[typing.Union[typing.Any,str]]]"
                ]
            }
        }
    },
    "busboy-master/busboy/geo.py": {
        "to_metres": {
            "name": "to_metres",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "t": [
                    "float",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "to_metre_point": {
            "name": "to_metre_point",
            "location": 41,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "point": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "metre_geoseries": {
            "name": "metre_geoseries",
            "location": 45,
            "return": [
                "Union[str, List[str]]",
                "str",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float",
                    "str",
                    "T",
                    "List[int]",
                    "Optional[List[int]]",
                    "None"
                ]
            }
        },
        "buffer": {
            "name": "buffer",
            "location": 51,
            "return": [
                "Tuple",
                "float",
                "int",
                "T",
                "List[int]"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float",
                    "Optional[List[int]]",
                    "List[int]",
                    "str",
                    "None",
                    "T"
                ],
                "d": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "nearby_road_segment": {
            "name": "nearby_road_segment",
            "location": 57,
            "return": [
                "Dict[tuple,list[tuple]]",
                "bool",
                "str",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "t": [
                    "float",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "distance": [
                    "float",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        }
    },
    "busboy-master/busboy/main.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "busboy-master/busboy/model.py": {
        "Route.from_json": {
            "name": "from_json",
            "location": 77,
            "return": [
                "Route"
            ],
            "arguments": {
                "route_json": [
                    "str"
                ]
            }
        },
        "Stop.lon_lat": {
            "name": "lon_lat",
            "location": 97,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stop.lat_lon": {
            "name": "lat_lon",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stop.from_json": {
            "name": "from_json",
            "location": 105,
            "return": [
                "Stop"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStop]"
                ],
                "stop_json": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Stop.from_db_row": {
            "name": "from_db_row",
            "location": 114,
            "return": [
                "Stop"
            ],
            "arguments": {
                "r": [
                    "tuple[]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "StopPassageResponse.from_json": {
            "name": "from_json",
            "location": 141,
            "return": [
                "StopPassageResponse"
            ],
            "arguments": {
                "json": [
                    "str"
                ]
            }
        },
        "StopPassageResponse.from_my_json": {
            "name": "from_my_json",
            "location": 150,
            "return": [
                "StopPassageResponse"
            ],
            "arguments": {
                "j": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "StopPassageResponse.to_json": {
            "name": "to_json",
            "location": 155,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopPassageResponse.trip_ids": {
            "name": "trip_ids",
            "location": 158,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopPassageResponse.filter": {
            "name": "filter",
            "location": 161,
            "return": [
                "StopPassageResponse"
            ],
            "arguments": {
                "self": [
                    "_TStopPassageResponse@@StopPassageResponse@@"
                ],
                "f": [
                    "typing.Collection",
                    "typing.Callable[, ]",
                    "set[str]"
                ]
            }
        },
        "StopPassageResponse.contains_trip": {
            "name": "contains_trip",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "StopPassageResponse.positions": {
            "name": "positions",
            "location": 167,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopPassageResponse.dataframe": {
            "name": "dataframe",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passage.position": {
            "name": "position",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Passage.from_json": {
            "name": "from_json",
            "location": 214,
            "return": [
                "Passage"
            ],
            "arguments": {
                "json": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Passage.to_json": {
            "name": "to_json",
            "location": 258,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passage.from_my_json": {
            "name": "from_my_json",
            "location": 284,
            "return": [
                "Passage"
            ],
            "arguments": {
                "j": [
                    "str"
                ]
            }
        },
        "Passage.flatten": {
            "name": "flatten",
            "location": 307,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassageTime.from_json": {
            "name": "from_json",
            "location": 360,
            "return": [
                "PassageTime"
            ],
            "arguments": {
                "json": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "PassageTime.to_json": {
            "name": "to_json",
            "location": 365,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassageTime.from_my_json": {
            "name": "from_my_json",
            "location": 372,
            "return": [
                "PassageTime"
            ],
            "arguments": {
                "j": [
                    "dict[str, typing.Any]",
                    "bool",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "PassageTime.flatten": {
            "name": "flatten",
            "location": 382,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrivalDeparture.from_json": {
            "name": "from_json",
            "location": 412,
            "return": [
                "ArrivalDeparture"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArrivalDeparture]"
                ],
                "json": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ArrivalDeparture.to_json": {
            "name": "to_json",
            "location": 431,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrivalDeparture.from_my_json": {
            "name": "from_my_json",
            "location": 443,
            "return": [
                "ArrivalDeparture"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArrivalDeparture]"
                ],
                "j": [
                    "dict[, ]"
                ]
            }
        }
    },
    "busboy-master/busboy/restserver.py": {
        "hello": {
            "name": "hello",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "trip_points": {
            "name": "trip_points",
            "location": 20,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "trip_id": []
            }
        },
        "trips_on_day": {
            "name": "trips_on_day",
            "location": 28,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "date": [],
                "route": [
                    "None"
                ]
            }
        },
        "map": {
            "name": "map",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "map_js": {
            "name": "map_js",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "busboy-master/busboy/__init__.py": {},
    "busboy-master/busboy/demo/demo.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "live_test": {
            "name": "live_test",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "stop_id": []
            }
        },
        "evaluate_predictions": {
            "name": "evaluate_predictions",
            "location": 211,
            "return": [
                "Any"
            ],
            "arguments": {
                "responses": [],
                "passage": [],
                "arrival_time": []
            }
        },
        "train_average_predictors": {
            "name": "train_average_predictors",
            "location": 269,
            "return": [
                "dict"
            ],
            "arguments": {
                "journeys": [],
                "target": []
            }
        },
        "train_average_predictor": {
            "name": "train_average_predictor",
            "location": 282,
            "return": [
                "DummyRegressor",
                "None"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": []
            }
        },
        "train_day_binned_predictors": {
            "name": "train_day_binned_predictors",
            "location": 295,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "journeys": [],
                "target": [],
                "bins": []
            }
        },
        "train_binned_average_predictors": {
            "name": "train_binned_average_predictors",
            "location": 347,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "journeys": [],
                "target": [],
                "bins": []
            }
        },
        "to_time": {
            "name": "to_time",
            "location": 384,
            "return": [
                "pd_@_NaT"
            ],
            "arguments": {
                "dt": []
            }
        },
        "display": {
            "name": "display",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "df": []
            }
        },
        "show_passage": {
            "name": "show_passage",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "passage": []
            }
        },
        "containing_sections": {
            "name": "containing_sections",
            "location": 435,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "sections": [],
                "longitude": [],
                "latitude": []
            }
        },
        "train_day_binned_predictors.train_predictors": {
            "name": "train_predictors",
            "location": 298,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": [],
                "bins": []
            }
        },
        "train_day_binned_predictors.train_binned_predictors": {
            "name": "train_binned_predictors",
            "location": 308,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": [],
                "bins": []
            }
        },
        "train_day_binned_predictors.select_predictor": {
            "name": "select_predictor",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "observation_time": []
            }
        },
        "train_binned_average_predictors.train_predictors": {
            "name": "train_predictors",
            "location": 350,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "journeys": [],
                "last": [],
                "target": [],
                "bins": []
            }
        },
        "train_binned_average_predictors.select_predictor": {
            "name": "select_predictor",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "observation_time": []
            }
        }
    },
    "busboy-master/busboy/demo/__init__.py": {},
    "busboy-master/busboy/experiments/polling.py": {
        "poll_continuously": {
            "name": "poll_continuously",
            "location": 18,
            "return": [
                "List[busboy.experiments.types.PollResult[nothing]]"
            ],
            "arguments": {
                "stops": [],
                "interval": []
            }
        },
        "poll_stops": {
            "name": "poll_stops",
            "location": 35,
            "return": [
                "Dict[(Any, Union[(busboy.util.Left[(nothing, nothing)], busboy.util.Right[(nothing, nothing)])])]"
            ],
            "arguments": {
                "stops": []
            }
        },
        "check_many_stops": {
            "name": "check_many_stops",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "two_second": {
            "name": "two_second",
            "location": 61,
            "return": [
                "List[busboy.experiments.types.PollResult[nothing]]"
            ],
            "arguments": {}
        },
        "store_two_second": {
            "name": "store_two_second",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "busboy-master/busboy/experiments/types.py": {
        "PollResult.filter": {
            "name": "filter",
            "location": 25,
            "return": [
                "PollResult"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO",
                    "Callable",
                    "IO[bytes]",
                    "Mapping",
                    "str",
                    "T",
                    "markdown.util.etree.Element"
                ]
            }
        },
        "PollResult.map": {
            "name": "map",
            "location": 30,
            "return": [
                "PollResult[nothing]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Dict[str,str]",
                    "Callable[,Any]"
                ]
            }
        },
        "PollResult.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pr": [
                    "bytes",
                    "List[cirq.Qid]",
                    "Union[str,bytes]",
                    "str"
                ]
            }
        },
        "PollResult.from_json": {
            "name": "from_json",
            "location": 48,
            "return": [
                "PollResult[nothing]"
            ],
            "arguments": {
                "j": [
                    "str",
                    "float",
                    "Dict"
                ]
            }
        },
        "PollResult.trips": {
            "name": "trips",
            "location": 57,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "pr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PollResult.all_trips": {
            "name": "all_trips",
            "location": 63,
            "return": [
                "set"
            ],
            "arguments": {
                "pr": [
                    "bytes",
                    "str",
                    "PollResult[busboy.model.StopPassageResponse]"
                ]
            }
        },
        "PollResult.all_passages": {
            "name": "all_passages",
            "location": 67,
            "return": [
                "set"
            ],
            "arguments": {
                "pr": [
                    "Dict",
                    "PollResult[busboy.model.StopPassageResponse]",
                    "Callable",
                    "int",
                    "static_frame.core.util.UFunc",
                    "Set[T]",
                    "Set[VT]"
                ]
            }
        },
        "PassageTrip.from_passage": {
            "name": "from_passage",
            "location": 86,
            "return": [
                "PassageTrip"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Callable",
                    "Callable[[None,None],bool]",
                    "busboy.model.Passage"
                ]
            }
        }
    },
    "busboy-master/busboy/experiments/__init__.py": {
        "many_stops_data": {
            "name": "many_stops_data",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "two_second_data": {
            "name": "two_second_data",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "poll_result_data": {
            "name": "poll_result_data",
            "location": 58,
            "return": [
                "List[busboy.experiments.types.PollResult[nothing]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "poll_shelve_data": {
            "name": "poll_shelve_data",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "trip_presences": {
            "name": "trip_presences",
            "location": 69,
            "return": [
                "Dict[(busboy.experiments.types.PassageTrip, Any)]"
            ],
            "arguments": {
                "pr": []
            }
        },
        "spr_trip_time": {
            "name": "spr_trip_time",
            "location": 74,
            "return": [
                "Left"
            ],
            "arguments": {
                "spr": [
                    "int",
                    "float"
                ],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "presence_display": {
            "name": "presence_display",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "pd": [
                    "dict[, ]"
                ],
                "stops": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str"
                ],
                "routes": [
                    "dict[, ]",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "trip_stops": {
            "name": "trip_stops",
            "location": 110,
            "return": [
                "Dict[(Any, set)]"
            ],
            "arguments": {
                "pr": [
                    "dict[, ]",
                    "dict[str, O]",
                    "int",
                    "typing.Mapping",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        },
        "route_cover": {
            "name": "route_cover",
            "location": 121,
            "return": [
                "set[]",
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[, ]"
                ]
            }
        },
        "stop_counts": {
            "name": "stop_counts",
            "location": 137,
            "return": [
                "busboy.experiments.types.StopCounts"
            ],
            "arguments": {
                "d": [
                    "dict[, ]"
                ]
            }
        },
        "stop_trips": {
            "name": "stop_trips",
            "location": 148,
            "return": [
                "busboy.experiments.types.StopTrips"
            ],
            "arguments": {
                "pr": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "int"
                ]
            }
        },
        "show_presences": {
            "name": "show_presences",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "convert_shelf_to_json": {
            "name": "convert_shelf_to_json",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "route_ids": {
            "name": "route_ids",
            "location": 173,
            "return": [
                "set"
            ],
            "arguments": {
                "prs": [
                    "str"
                ]
            }
        },
        "updates": {
            "name": "updates",
            "location": 183,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "prs": [
                    "str"
                ]
            }
        },
        "update_times": {
            "name": "update_times",
            "location": 193,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "prs": [
                    "str"
                ]
            }
        },
        "vehicle_updates": {
            "name": "vehicle_updates",
            "location": 199,
            "return": [
                "Dict[(Any, Dict[(Any, Dict[(Any, list)])])]"
            ],
            "arguments": {
                "prs": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "display_update_times": {
            "name": "display_update_times",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "uts": []
            }
        },
        "display_updates": {
            "name": "display_updates",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "uts": []
            }
        },
        "display_vehicle_updates": {
            "name": "display_vehicle_updates",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "updates": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "display_nones": {
            "name": "display_nones",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "updates": [
                    "dict[bytes, bytes]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "display_poll_results": {
            "name": "display_poll_results",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "prs": []
            }
        },
        "positions": {
            "name": "positions",
            "location": 274,
            "return": [
                "Dict[(Any, List[Tuple[(Any, Tuple[(Any, Any)])]])]"
            ],
            "arguments": {
                "uts": []
            }
        },
        "old_unique_results": {
            "name": "old_unique_results",
            "location": 292,
            "return": [
                "Dict[(Any, Set[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "prs": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 303,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "prs": [
                    "str"
                ]
            }
        },
        "unique_results": {
            "name": "unique_results",
            "location": 311,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "rs": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "collections.abc.Coroutine",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "unique_positions": {
            "name": "unique_positions",
            "location": 317,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "prs": [
                    "int"
                ]
            }
        }
    },
    "busboy-master/busboy/map/map.py": {
        "default_map": {
            "name": "default_map",
            "location": 12,
            "return": [
                "Map",
                "Callable[[Mapping],T]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "trip_markers": {
            "name": "trip_markers",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "tps": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "int",
                    "Dict"
                ]
            }
        },
        "markers": {
            "name": "markers",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "pandas.Series",
                    "Dict[int, pandas.DataFrame]",
                    "str",
                    "dict"
                ]
            }
        },
        "road_cover": {
            "name": "road_cover",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "interval": [
                    "bool",
                    "str"
                ]
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delete": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Map.create_markers": {
            "name": "create_markers",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "Map.create_markers_df": {
            "name": "create_markers_df",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "list"
                ]
            }
        },
        "Map.clear_markers": {
            "name": "clear_markers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.add_markers": {
            "name": "add_markers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "Map.display": {
            "name": "display",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tps": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Map.display_df": {
            "name": "display_df",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Dict[str,Any]",
                    "pandas.DataFrame"
                ]
            }
        },
        "Map._add_marker": {
            "name": "_add_marker",
            "location": 85,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Position",
                    "bool",
                    "PondTensor"
                ],
                "y": [
                    "int",
                    "float",
                    "Position",
                    "bool",
                    "PondTensor"
                ],
                "tooltip": [
                    "Text",
                    "int",
                    "Position",
                    "bool",
                    "PondTensor",
                    "float"
                ]
            }
        },
        "Map.add_marker": {
            "name": "add_marker",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "bool",
                    "bytearray",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "tooltip": [
                    "Text",
                    "bool",
                    "bytearray",
                    "Tuple[int,int]",
                    "str"
                ]
            }
        },
        "Map.add_polygon": {
            "name": "add_polygon",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "float",
                    "pandas.DataFrame"
                ],
                "colour": [
                    "Text",
                    "str",
                    "pandas.DataFrame",
                    "float"
                ]
            }
        },
        "Map.add_layer": {
            "name": "add_layer",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "Optional[int]",
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "None",
                    "Tuple[FrozenSet[int]]",
                    "Tuple[frozenset]"
                ]
            }
        },
        "Map.remove_layer": {
            "name": "remove_layer",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "List",
                    "str",
                    "int",
                    "Set"
                ]
            }
        },
        "Map.clear_layers": {
            "name": "clear_layers",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "busboy-master/busboy/map/__init__.py": {},
    "busboy-master/busboy/prediction/pandas.py": {
        "travel_times": {
            "name": "travel_times",
            "location": 7,
            "return": [
                "int",
                "tuple",
                "str",
                "numpy.ndarray",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "journeys": [
                    "str",
                    "int",
                    "Tuple[Union[int,int,int]]",
                    "List[str]",
                    "Tuple[int,int,int]",
                    "bool"
                ],
                "stops": [
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "last_known_column": [
                    "int",
                    "bool",
                    "float",
                    "pandas.DataFrame"
                ],
                "target_column": [
                    "int",
                    "str",
                    "Tuple[int,int,int]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "travel_times_df": {
            "name": "travel_times_df",
            "location": 16,
            "return": [
                "numpy.ndarray",
                "str",
                "bool"
            ],
            "arguments": {
                "journeys": [
                    "str",
                    "List[float]",
                    "pandas.DataFrame",
                    "int",
                    "float"
                ],
                "last_known_column": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "float",
                    "List[float]"
                ],
                "target_column": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "float",
                    "List[float]"
                ]
            }
        }
    },
    "busboy-master/busboy/prediction/sklearn.py": {
        "journeys": {
            "name": "journeys",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "snapshots": [
                    "Set"
                ],
                "timetable_variants": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "route_sections": [
                    "str",
                    "int",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "join_journeys": {
            "name": "join_journeys",
            "location": 45,
            "return": [
                "dict"
            ],
            "arguments": {
                "journeys": [
                    "Dict[str,float]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "busboy-master/busboy/prediction/__init__.py": {
        "pd_stop_distance": {
            "name": "pd_stop_distance",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "r": [],
                "stop": []
            }
        },
        "pd_stop_distances": {
            "name": "pd_stop_distances",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "stop": []
            }
        },
        "stop_times_220": {
            "name": "stop_times_220",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": []
            }
        },
        "closest_stops_220": {
            "name": "closest_stops_220",
            "location": 65,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "df": [
                    "_T0@@"
                ]
            }
        },
        "closest_stop_gpd": {
            "name": "closest_stop_gpd",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "stops": []
            }
        },
        "include_stop": {
            "name": "include_stop",
            "location": 81,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "df": [
                    "_T0@@"
                ],
                "s": []
            }
        },
        "new_stop_distance": {
            "name": "new_stop_distance",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "e": [],
                "s": []
            }
        },
        "new_stop_distances": {
            "name": "new_stop_distances",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "es": [],
                "s": []
            }
        },
        "distance_vector": {
            "name": "distance_vector",
            "location": 95,
            "return": [
                "DistanceVector"
            ],
            "arguments": {
                "c1": [],
                "c2": []
            }
        },
        "unit_vector": {
            "name": "unit_vector",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "vector": []
            }
        },
        "angle_between": {
            "name": "angle_between",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "cached_contains": {
            "name": "cached_contains",
            "location": 133,
            "return": [],
            "arguments": {
                "polygon": [],
                "lon": [],
                "lat": []
            }
        },
        "hash_polygon": {
            "name": "hash_polygon",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "polygon": []
            }
        },
        "monkey_patch_polygon": {
            "name": "monkey_patch_polygon",
            "location": 169,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "polygon": [
                    "_T0@@"
                ]
            }
        },
        "make_circle": {
            "name": "make_circle",
            "location": 175,
            "return": [
                "StopCircle"
            ],
            "arguments": {
                "stop": [],
                "circle_radius": []
            }
        },
        "make_rectangle": {
            "name": "make_rectangle",
            "location": 185,
            "return": [
                "RoadSection"
            ],
            "arguments": {
                "s1": [],
                "s2": [],
                "rectangle_width": []
            }
        },
        "route_sections": {
            "name": "route_sections",
            "location": 199,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "stops": [],
                "rectangle_width": [
                    "float"
                ],
                "circle_radius": [
                    "float"
                ]
            }
        },
        "widen_line": {
            "name": "widen_line",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "linestring": [],
                "width": []
            }
        },
        "assign_region": {
            "name": "assign_region",
            "location": 236,
            "return": [
                "Tuple[(_T1, list)]"
            ],
            "arguments": {
                "sections": [],
                "e": [
                    "_T1@@"
                ]
            }
        },
        "assign_regions": {
            "name": "assign_regions",
            "location": 242,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "rs": [],
                "es": []
            }
        },
        "most_recent_stops": {
            "name": "most_recent_stops",
            "location": 248,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "ts": []
            }
        },
        "possible_variants": {
            "name": "possible_variants",
            "location": 264,
            "return": [
                "Generator[(Tuple[(Any, Set[Tuple[(Any, int)]])], Any, None)]"
            ],
            "arguments": {
                "snapshots": [],
                "sections": []
            }
        },
        "check_variant_order": {
            "name": "check_variant_order",
            "location": 277,
            "return": [
                "Generator[(Tuple[(Any, Set[Tuple[(Any, Any)]])], Any, None)]"
            ],
            "arguments": {
                "snapshots": []
            }
        },
        "duplicate_positions": {
            "name": "duplicate_positions",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [],
                "s2": []
            }
        },
        "drop_duplicate_positions": {
            "name": "drop_duplicate_positions",
            "location": 308,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "snapshots": [],
                "duplicates": []
            }
        },
        "section_times": {
            "name": "section_times",
            "location": 324,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "snapshots": [],
                "sections": []
            }
        },
        "journeys": {
            "name": "journeys",
            "location": 378,
            "return": [
                "dict"
            ],
            "arguments": {
                "section_times": []
            }
        },
        "pad_journeys": {
            "name": "pad_journeys",
            "location": 413,
            "return": [
                "Dict[(Any, List[list])]"
            ],
            "arguments": {
                "variant_journeys": []
            }
        },
        "stop_times": {
            "name": "stop_times",
            "location": 461,
            "return": [
                "Dict[(Any, List[List[Union[(NotSeenAtStop, SeenAtStop)]]])]"
            ],
            "arguments": {
                "snapshots": [],
                "sections": []
            }
        },
        "journeys_dataframe": {
            "name": "journeys_dataframe",
            "location": 487,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "journeys": []
            }
        },
        "estimate_arrival": {
            "name": "estimate_arrival",
            "location": 510,
            "return": [
                "Generator[(Tuple[(Any, list)], Any, None)]"
            ],
            "arguments": {
                "variant_journeys": []
            }
        },
        "stop_times_proximity": {
            "name": "stop_times_proximity",
            "location": 530,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "snapshots": [],
                "stops": [],
                "distance_limit": [
                    "int"
                ]
            }
        },
        "stop_distance_geopandas": {
            "name": "stop_distance_geopandas",
            "location": 542,
            "return": [
                "Any"
            ],
            "arguments": {
                "snapshot": [],
                "stop": []
            }
        },
        "AbstractRouteSection.contains": {
            "name": "contains",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lon": [],
                "lat": []
            }
        },
        "RoadSection.difference": {
            "name": "difference",
            "location": 147,
            "return": [
                "Union[(u.Just[nothing], u.Nothing[nothing])]"
            ],
            "arguments": {
                "self": [],
                "circle": []
            }
        },
        "route_sections.shapes": {
            "name": "shapes",
            "location": 204,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "most_recent_stops.choose_stop": {
            "name": "choose_stop",
            "location": 251,
            "return": [
                "Nothing",
                "Just"
            ],
            "arguments": {
                "rs": []
            }
        },
        "journeys.f": {
            "name": "f",
            "location": 388,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        },
        "estimate_arrival.estimate": {
            "name": "estimate",
            "location": 515,
            "return": [
                "Just"
            ],
            "arguments": {
                "arrival": []
            }
        }
    },
    "busboy-master/busboy/recording/routes.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_for_updates": {
            "name": "check_for_updates",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "stop": [
                    "int"
                ],
                "record": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "RouteRecord.to_json": {
            "name": "to_json",
            "location": 35,
            "return": [
                "Dict[(Any, List[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteRecord.entries": {
            "name": "entries",
            "location": 47,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "busboy-master/busboy/recording/__init__.py": {
        "loop": {
            "name": "loop",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "stops": [],
                "interval": [
                    "int"
                ]
            }
        },
        "loop_something": {
            "name": "loop_something",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [],
                "a": [],
                "interval": []
            }
        },
        "new_loop": {
            "name": "new_loop",
            "location": 41,
            "return": [
                "dict"
            ],
            "arguments": {
                "pool": [],
                "stops": [],
                "state": []
            }
        },
        "call_stops": {
            "name": "call_stops",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "pool": [],
                "stops": []
            }
        },
        "current_state": {
            "name": "current_state",
            "location": 64,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "spr": []
            }
        },
        "updated_state": {
            "name": "updated_state",
            "location": 72,
            "return": [
                "dict"
            ],
            "arguments": {
                "last": [],
                "current": []
            }
        },
        "store_state": {
            "name": "store_state",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "poll_time": [],
                "c": []
            }
        }
    },
    "busboy-master/busboy/util/notebooks.py": {
        "snapshot_to_marker": {
            "name": "snapshot_to_marker",
            "location": 20,
            "return": [
                "int",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "entry": [
                    "Callable",
                    "bool",
                    "busboy.database.BusSnapshot"
                ]
            }
        },
        "plot_entries": {
            "name": "plot_entries",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "busboy.map.map.Map",
                    "bool",
                    "int"
                ],
                "snapshots": [
                    "List[busboy.database.BusSnapshot]",
                    "Dict[str,Any]",
                    "bool",
                    "Union[AbstractSetIntStr,MappingIntStrAny]"
                ],
                "interval": [
                    "float",
                    "bool",
                    "str",
                    "List[Tuple[int,int]]"
                ],
                "initial_delay": [
                    "float",
                    "bool",
                    "str",
                    "List[Tuple[int,int]]"
                ],
                "snapshot_to_layer": [],
                "clear": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "plot_snapshot_trail": {
            "name": "plot_snapshot_trail",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "busboy.map.map.Map",
                    "int",
                    "float",
                    "Collection[str]"
                ],
                "snapshots": [
                    "List[busboy.database.BusSnapshot]",
                    "Dict",
                    "int",
                    "float",
                    "Optional[bool]"
                ],
                "trail_size": [
                    "int",
                    "float"
                ],
                "interval": [
                    "float",
                    "int"
                ],
                "initial_delay": [
                    "int",
                    "float"
                ]
            }
        },
        "show_timetables": {
            "name": "show_timetables",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "map": [
                    "Dict",
                    "busboy.map.map.Map"
                ],
                "timetables": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "read_preprocessed_data": {
            "name": "read_preprocessed_data",
            "location": 103,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "route_name": [
                    "str"
                ]
            }
        },
        "column_names": {
            "name": "column_names",
            "location": 129,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "stop_names": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "busboy-master/busboy/util/typevars.py": {},
    "busboy-master/busboy/util/__init__.py": {
        "swap": {
            "name": "swap",
            "location": 31,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "omap": {
            "name": "omap",
            "location": 35,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "f": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "x": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "oget": {
            "name": "oget",
            "location": 39,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "a": [
                    "float",
                    "int"
                ]
            }
        },
        "pairwise": {
            "name": "pairwise",
            "location": 43,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "Dict"
                ]
            }
        },
        "sliding_window": {
            "name": "sliding_window",
            "location": 50,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Sequence[Any]"
                ],
                "xs": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "tuplewise_padded": {
            "name": "tuplewise_padded",
            "location": 58,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "Dict",
                    "datetime.datetime",
                    "bool",
                    "List[int]"
                ],
                "xs": [
                    "int",
                    "float",
                    "None",
                    "Callable",
                    "Optional[int]",
                    "datetime.datetime"
                ],
                "pad_value": [
                    "None",
                    "float",
                    "datetime.datetime",
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 65,
            "return": [
                "itertools.islice"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "int"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 70,
            "return": [
                "Union[(Nothing, Just[nothing])]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "xs": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 75,
            "return": [
                "Union[(Nothing, Just[nothing])]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "Optional[List[str]]",
                    "Tuple",
                    "List[str]",
                    "T",
                    "None"
                ]
            }
        },
        "drop": {
            "name": "drop",
            "location": 83,
            "return": [
                "itertools.islice"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "int"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 88,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ],
                "key": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "unique_justseen": {
            "name": "unique_justseen",
            "location": 108,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Dict"
                ],
                "key": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 115,
            "return": [
                "generator"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "a": [
                    "int"
                ]
            }
        },
        "interval": {
            "name": "interval",
            "location": 121,
            "return": [
                "Generator[(dt.datetime, Any, Any)]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "combine_dictionaries": {
            "name": "combine_dictionaries",
            "location": 131,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "T"
                ],
                "ys": [
                    "int",
                    "T"
                ]
            }
        },
        "dict_collect_list": {
            "name": "dict_collect_list",
            "location": 138,
            "return": [
                "dict"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "Callable",
                    "FrozenSet[int]",
                    "frozenset"
                ],
                "key": [
                    "str",
                    "Callable",
                    "FrozenSet[int]",
                    "frozenset"
                ]
            }
        },
        "dict_collect_set": {
            "name": "dict_collect_set",
            "location": 142,
            "return": [
                "dict"
            ],
            "arguments": {
                "xs": [
                    "bool",
                    "str",
                    "List[int]",
                    "List",
                    "Union[str,list]"
                ],
                "key": [
                    "bool",
                    "str",
                    "List[int]",
                    "List",
                    "Union[str,list]"
                ]
            }
        },
        "dict_collect": {
            "name": "dict_collect",
            "location": 146,
            "return": [
                "dict"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "bool",
                    "int"
                ],
                "key": [
                    "Dict",
                    "int",
                    "MutableMapping[Any,Any]",
                    "bytes",
                    "MutableMapping",
                    "float",
                    "str"
                ],
                "join": [
                    "Dict",
                    "int",
                    "MutableMapping[Any,Any]",
                    "bytes",
                    "MutableMapping",
                    "float",
                    "str"
                ],
                "empty": [
                    "Dict",
                    "str"
                ]
            }
        },
        "Maybe.__iter__": {
            "name": "__iter__",
            "location": 159,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 165,
            "return": [
                "Just",
                "str",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[,Any]",
                    "T",
                    "IO",
                    "Tuple",
                    "util.Unary[V,N]",
                    "IO[bytes]"
                ]
            }
        },
        "Maybe.bind": {
            "name": "bind",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping[str,Dict[str,Any]]",
                    "str",
                    "Mapping"
                ]
            }
        },
        "Maybe.bind_optional": {
            "name": "bind_optional",
            "location": 177,
            "return": [
                "int",
                "List[int]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int"
                ]
            }
        },
        "Maybe.lift": {
            "name": "lift",
            "location": 180,
            "return": [
                "int",
                "Union[bytes, bytearray]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "List"
                ],
                "b": [
                    "int",
                    "List"
                ]
            }
        },
        "Maybe.ap": {
            "name": "ap",
            "location": 183,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int"
                ]
            }
        },
        "Maybe.of": {
            "name": "of",
            "location": 187,
            "return": [
                "Union[(Nothing, Just[nothing])]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[int]",
                    "None",
                    "List",
                    "Optional[T]",
                    "Optional[int]"
                ]
            }
        },
        "Maybe.or_else": {
            "name": "or_else",
            "location": 193,
            "return": [
                "bytes",
                "str",
                "bool",
                "int",
                "Optional[float]",
                "Dict[Tuple[str,str],Tuple[float,float]]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bytes",
                    "str",
                    "datetime.datetime",
                    "bool",
                    "int"
                ]
            }
        },
        "Maybe.or_else_lazy": {
            "name": "or_else_lazy",
            "location": 199,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bytes",
                    "str",
                    "datetime.datetime",
                    "bool",
                    "int"
                ]
            }
        },
        "Maybe.optional": {
            "name": "optional",
            "location": 205,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.either": {
            "name": "either",
            "location": 208,
            "return": [
                "Left[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "Sequence[Any]"
                ]
            }
        },
        "Maybe.is_just": {
            "name": "is_just",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.is_nothing": {
            "name": "is_nothing",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.justs": {
            "name": "justs",
            "location": 221,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "ms": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Either.map": {
            "name": "map",
            "location": 238,
            "return": [
                "Right",
                "str",
                "IO[str]",
                "Callable",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Iterable[Any]",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "Either.bind": {
            "name": "bind",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping[str,Dict[str,Any]]",
                    "str",
                    "Mapping"
                ]
            }
        },
        "Either.ap": {
            "name": "ap",
            "location": 250,
            "return": [
                "Left",
                "str",
                "int",
                "bool",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[,Any]",
                    "int",
                    "Dict",
                    "Callable"
                ]
            }
        }
    }
}
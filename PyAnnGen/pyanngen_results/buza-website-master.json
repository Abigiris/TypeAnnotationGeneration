{
    "buza-website-master/setup.py": {},
    "buza-website-master/src/buza/admin.py": {},
    "buza-website-master/src/buza/apps.py": {},
    "buza-website-master/src/buza/forms.py": {},
    "buza-website-master/src/buza/models.py": {
        "Subject.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buza-website-master/src/buza/settings_base.py": {},
    "buza-website-master/src/buza/settings_env.py": {},
    "buza-website-master/src/buza/settings_env_dev.py": {},
    "buza-website-master/src/buza/settings_tox.py": {},
    "buza-website-master/src/buza/urls.py": {},
    "buza-website-master/src/buza/views.py": {
        "register": {
            "name": "register",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "List[str]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "edit": {
            "name": "edit",
            "location": 57,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SubjectList.post": {
            "name": "post",
            "location": 93,
            "return": [
                "HttpResponseRedirect",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "QuestionCreate.form_valid": {
            "name": "form_valid",
            "location": 140,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str,Any]",
                    "django.forms.ModelForm",
                    "asyncworker.http.wrapper.RequestWrapper",
                    "salon.models.StylisAvailableWeekDay",
                    "salon.models.Stylist"
                ]
            }
        },
        "QuestionCreate.get_success_url": {
            "name": "get_success_url",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionUpdate.get_object": {
            "name": "get_object",
            "location": 169,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "django.db.models.QuerySet",
                    "Callable",
                    "salon.models.StylisAvailableWeekDay"
                ]
            }
        },
        "QuestionUpdate.get_success_url": {
            "name": "get_success_url",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerCreate.dispatch": {
            "name": "dispatch",
            "location": 203,
            "return": [
                "Union[str, List[str]]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "List",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "AnswerCreate.form_valid": {
            "name": "form_valid",
            "location": 216,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Dict[str,Any]",
                    "django.forms.ModelForm",
                    "salon.models.Stylist"
                ]
            }
        },
        "AnswerCreate.get_context_data": {
            "name": "get_context_data",
            "location": 227,
            "return": [
                "Dict[str,Any]",
                "Dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerCreate.get_success_url": {
            "name": "get_success_url",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerUpdate.get_object": {
            "name": "get_object",
            "location": 257,
            "return": [
                "str",
                "Optional[bool]",
                "django.db.models.QuerySet",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "django.db.models.QuerySet",
                    "bool",
                    "None",
                    "Callable"
                ]
            }
        },
        "AnswerUpdate.get_context_data": {
            "name": "get_context_data",
            "location": 268,
            "return": [
                "Dict[str,Any]",
                "Dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerUpdate.get_success_url": {
            "name": "get_success_url",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buza-website-master/src/buza/__init__.py": {},
    "buza-website-master/src/buza/migrations/0001_initial.py": {},
    "buza-website-master/src/buza/migrations/0002_add_question_topics.py": {},
    "buza-website-master/src/buza/migrations/0003_question_grade.py": {},
    "buza-website-master/src/buza/migrations/__init__.py": {},
    "buza-website-master/src/buza/templatetags/buza_tags.py": {
        "topic_question_list": {
            "name": "topic_question_list",
            "location": 10,
            "return": [
                "Optional[str]",
                "Type",
                "Callable",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "topic_name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "buza-website-master/tests/test_models.py": {
        "TestUser.test_defaults": {
            "name": "test_defaults",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_repr": {
            "name": "test_repr",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubject.test_repr": {
            "name": "test_repr",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestion.test_repr": {
            "name": "test_repr",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTopic.test_repr": {
            "name": "test_repr",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionopic.test_repr": {
            "name": "test_repr",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswer.test_repr": {
            "name": "test_repr",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buza-website-master/tests/test_settings_env.py": {
        "_get_settings": {
            "name": "_get_settings",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "settings_module": [
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_settings_env": {
            "name": "test_settings_env",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "buza-website-master/tests/test_views.py": {
        "TestRegister.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get": {
            "name": "test_get",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_get__authenticated": {
            "name": "test_get__authenticated",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_post__empty": {
            "name": "test_post__empty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_post__passwords_mismatch": {
            "name": "test_post__passwords_mismatch",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegister.test_post__valid_form": {
            "name": "test_post__valid_form",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdate._authenticated_user": {
            "name": "_authenticated_user",
            "location": 99,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdate._assert_successful": {
            "name": "_assert_successful",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "float",
                    "Dict"
                ],
                "response": [
                    "Dict",
                    "Dict[str,Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "TestUserUpdate.test_get__anonymous": {
            "name": "test_get__anonymous",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdate.test_post__anonymous": {
            "name": "test_post__anonymous",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdate.test_get__authenticated": {
            "name": "test_get__authenticated",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdate.test_post__empty": {
            "name": "test_post__empty",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdate.test_post__blank": {
            "name": "test_post__blank",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDetail.test_not_found": {
            "name": "test_not_found",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDetail.test_get": {
            "name": "test_get",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionDetail.test_not_found": {
            "name": "test_not_found",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionDetail.test_get": {
            "name": "test_get",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionList.test_get__empty": {
            "name": "test_get__empty",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionCreate.test_get__anonymous": {
            "name": "test_get__anonymous",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionCreate.test_post__anonymous": {
            "name": "test_post__anonymous",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionCreate.test_get__authenticated": {
            "name": "test_get__authenticated",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionCreate.test_post__empty": {
            "name": "test_post__empty",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionCreate.test_post__success": {
            "name": "test_post__success",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionUpdate.setUp": {
            "name": "setUp",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionUpdate.test_get__anonymous": {
            "name": "test_get__anonymous",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionUpdate.test_post__anonymous": {
            "name": "test_post__anonymous",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionUpdate.test_get__not_author": {
            "name": "test_get__not_author",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionUpdate.test_post__not_author": {
            "name": "test_post__not_author",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionUpdate.test_post__author_update": {
            "name": "test_post__author_update",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerCreate.setUp": {
            "name": "setUp",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerCreate.test__not_found": {
            "name": "test__not_found",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerCreate.test___anonymous": {
            "name": "test___anonymous",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerCreate.test_get__authenticated": {
            "name": "test_get__authenticated",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerCreate.test_post__empty": {
            "name": "test_post__empty",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerCreate.test_post__valid": {
            "name": "test_post__valid",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdate.setUp": {
            "name": "setUp",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdate.test_get__anonymous": {
            "name": "test_get__anonymous",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdate.test_get__authenticated": {
            "name": "test_get__authenticated",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdate.test_post__anonymous": {
            "name": "test_post__anonymous",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdate.test_post__authenticated": {
            "name": "test_post__authenticated",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdate.test_post__authenticated__not_owner": {
            "name": "test_post__authenticated__not_owner",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubjectList.setUp": {
            "name": "setUp",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubjectList.test_get__unauthenticated": {
            "name": "test_get__unauthenticated",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubjectList.test_get__no_followed_subjects": {
            "name": "test_get__no_followed_subjects",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubjectList.test_get__followed_subjects": {
            "name": "test_get__followed_subjects",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubjectDetails.test_not_found": {
            "name": "test_not_found",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubjectDetails.test_get": {
            "name": "test_get",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserSubjectsView.setUp": {
            "name": "setUp",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserSubjectsView.test_get__anonymous": {
            "name": "test_get__anonymous",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserSubjectsView.test_get__with_no_followed_subjects": {
            "name": "test_get__with_no_followed_subjects",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserSubjectsView.test_get__with_followed_subjects": {
            "name": "test_get__with_followed_subjects",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionTopicDetails.setUp": {
            "name": "setUp",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionTopicDetails.test_not_found": {
            "name": "test_not_found",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionTopicDetails.test_get": {
            "name": "test_get",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionTopicDetails.test_get__repeated_topics_in_different_questions": {
            "name": "test_get__repeated_topics_in_different_questions",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionTopicDetails.test_get__topic_description": {
            "name": "test_get__topic_description",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
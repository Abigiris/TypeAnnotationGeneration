{
    "c2cwsgiutils-master/acceptance_tests/app/gunicorn.conf.py": {},
    "c2cwsgiutils-master/acceptance_tests/app/models_graph.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/acceptance_tests/app/app_alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/acceptance_tests/app/app_alembic/__init__.py": {},
    "c2cwsgiutils-master/acceptance_tests/app/app_alembic/versions/4a8c1bb4e775_initial_version.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/acceptance_tests/app/app_alembic/versions/__init__.py": {},
    "c2cwsgiutils-master/acceptance_tests/app/c2cwsgiutils_app/get_hello.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/acceptance_tests/app/c2cwsgiutils_app/models.py": {},
    "c2cwsgiutils-master/acceptance_tests/app/c2cwsgiutils_app/services.py": {
        "ping": {
            "name": "ping",
            "location": 30,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "hello_get": {
            "name": "hello_get",
            "location": 37,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "str",
                "int",
                "Tuple[str]",
                "float"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "pyramid.requesRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "hello_put": {
            "name": "hello_put",
            "location": 49,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "float",
                "Optional[int]",
                "int",
                "str",
                "Tuple[str]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        },
        "hello_post": {
            "name": "hello_post",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "pyramid.requesRequest",
                    "Callable"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 67,
            "return": [
                "dict[typing.Text, int]",
                "str",
                "List[Dict[str, Any]]",
                "int",
                "django.db.models.query.QuerySet",
                "dict"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request"
                ]
            }
        },
        "tracking": {
            "name": "tracking",
            "location": 92,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "empty": {
            "name": "empty",
            "location": 101,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "requests.Request",
                    "pyramid.requesRequest",
                    "starlette.requests.Request"
                ]
            }
        },
        "timeout_sql": {
            "name": "timeout_sql",
            "location": 107,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int",
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]",
                "Dict[str, Set[str]]",
                "Optional[T]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/app/c2cwsgiutils_app/__init__.py": {
        "_failure": {
            "name": "_failure",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_request": [
                    "bool",
                    "pyramid.requesRequest"
                ]
            }
        },
        "_failure_json": {
            "name": "_failure_json",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_request": [
                    "bool",
                    "pyramid.requesRequest"
                ]
            }
        },
        "broadcast_view": {
            "name": "broadcast_view",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/conftest.py": {
        "composition": {
            "name": "composition",
            "location": 16,
            "return": [
                "None",
                "Optional[str]",
                "Composition",
                "str",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "app_connection": {
            "name": "app_connection",
            "location": 33,
            "return": [
                "Connection",
                "str",
                "Mapping[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "composition": []
            }
        },
        "master_db_setup": {
            "name": "master_db_setup",
            "location": 41,
            "return": [
                "Optional[str]",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "composition": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "list[cmk.gui.plugins.visuals.utils.Filter]"
                ]
            }
        },
        "slave_db_setup": {
            "name": "slave_db_setup",
            "location": 46,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "composition": [
                    "bool",
                    "Optional[tuple]",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "_create_table": {
            "name": "_create_table",
            "location": 50,
            "return": [
                "sqlite3.Connection",
                "Union[sqlite3.Connection, sqlite3.Cursor]",
                "bool",
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "composition": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "int",
                    "Optional[Callable]"
                ],
                "master": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "_connect": {
            "name": "_connect",
            "location": 61,
            "return": [
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "float"
            ],
            "arguments": {
                "master": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "master_db_connection": {
            "name": "master_db_connection",
            "location": 74,
            "return": [
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "master_db_setup": [
                    "bool"
                ]
            }
        },
        "slave_db_connection": {
            "name": "slave_db_connection",
            "location": 79,
            "return": [
                "Optional[cmk.utils.type_defs.HostName]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "slave_db_setup": [
                    "bool"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_broadcast.py": {
        "test_broadcast_reconfig": {
            "name": "test_broadcast_reconfig",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_client_info.py": {
        "test_forwarded_openshift": {
            "name": "test_forwarded_openshift",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_forwarded_haproxy": {
            "name": "test_forwarded_haproxy",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_composition.py": {
        "test_run": {
            "name": "test_run",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "int",
                    "str"
                ],
                "composition": []
            }
        },
        "test_run_timeout": {
            "name": "test_run_timeout",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str",
                    "int"
                ],
                "composition": [
                    "str"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_connection.py": {
        "test_empty_response": {
            "name": "test_empty_response",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_cors.py": {
        "test_pre_flight": {
            "name": "test_pre_flight",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_db.py": {
        "test_slave": {
            "name": "test_slave",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "bool"
                ],
                "slave_db_connection": [
                    "str"
                ]
            }
        },
        "test_master": {
            "name": "test_master",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str"
                ],
                "master_db_connection": [
                    "str"
                ]
            }
        },
        "test_forced_slave": {
            "name": "test_forced_slave",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [],
                "slave_db_connection": [
                    "str"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_db_maintenance.py": {
        "_query": {
            "name": "_query",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str"
                ],
                "params": [
                    "dict[, ]",
                    "str",
                    "dict[str, str]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Optional[dict]",
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_api": {
            "name": "test_api",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_api_bad_secret": {
            "name": "test_api_bad_secret",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_api_missing_secret": {
            "name": "test_api_missing_secret",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_debug.py": {
        "test_stacks": {
            "name": "test_stacks",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "_check_stacks": {
            "name": "_check_stacks",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stacks": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_header_auth": {
            "name": "test_header_auth",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_no_auth": {
            "name": "test_no_auth",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_memory": {
            "name": "test_memory",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_memory_analyze_functions": {
            "name": "test_memory_analyze_functions",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_memory_analyze_other": {
            "name": "test_memory_analyze_other",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_sleep": {
            "name": "test_sleep",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_time": {
            "name": "test_time",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_headers": {
            "name": "test_headers",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "_check_leak_there": {
            "name": "_check_leak_there",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_memory_diff": {
            "name": "test_memory_diff",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_memory_diff_deprecated": {
            "name": "test_memory_diff_deprecated",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_error_service": {
            "name": "test_error_service",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_memory_maps": {
            "name": "test_memory_maps",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_show_refs": {
            "name": "test_show_refs",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "IO[str]",
                    "typing.IO"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_error.py": {
        "test_not_found": {
            "name": "test_not_found",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_http_error": {
            "name": "test_http_error",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_commit_time_db": {
            "name": "test_commit_time_db",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_db_data_error": {
            "name": "test_db_data_error",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_401": {
            "name": "test_401",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_other": {
            "name": "test_other",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_redirect_exception": {
            "name": "test_redirect_exception",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_no_content_exception": {
            "name": "test_no_content_exception",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_genversion.py": {
        "test_get_package_version": {
            "name": "test_get_package_version",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_health_check.py": {
        "_remove_timings": {
            "name": "_remove_timings",
            "location": 4,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "response": [
                    "bytes",
                    "Mapping[str, object]"
                ]
            }
        },
        "test_ok": {
            "name": "test_ok",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_filter": {
            "name": "test_filter",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_empty_filter": {
            "name": "test_empty_filter",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_failure": {
            "name": "test_failure",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_failure_with_stack": {
            "name": "test_failure_with_stack",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_ping": {
            "name": "test_ping",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_index.py": {
        "test_without_secret": {
            "name": "test_without_secret",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_with_secret": {
            "name": "test_with_secret",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str"
                ]
            }
        },
        "test_https": {
            "name": "test_https",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_with_slash": {
            "name": "test_with_slash",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_json.py": {
        "test_pretty_print": {
            "name": "test_pretty_print",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_logging.py": {
        "_query": {
            "name": "_query",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str"
                ],
                "params": [
                    "dict[, ]",
                    "str",
                    "dict[str, str]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Optional[dict]",
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_api": {
            "name": "test_api",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_api_bad_secret": {
            "name": "test_api_bad_secret",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_api_missing_secret": {
            "name": "test_api_missing_secret",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_logs_request_id": {
            "name": "test_logs_request_id",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [],
                "composition": [
                    "bool"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_ping.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_request_tracking.py": {
        "test_auto_requests": {
            "name": "test_auto_requests",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "Container"
                ]
            }
        },
        "test_manual_requests": {
            "name": "test_manual_requests",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_scripts.py": {
        "test_get_hello": {
            "name": "test_get_hello",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "composition": [
                    "str"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_sql_profiler.py": {
        "_switch": {
            "name": "_switch",
            "location": 1,
            "return": [
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "app_connection": [
                    "Tuple[Callable, Callable]"
                ],
                "enable": [
                    "bool",
                    "None"
                ]
            }
        },
        "test_ok": {
            "name": "test_ok",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "str"
                ],
                "slave_db_connection": [
                    "str"
                ]
            }
        },
        "test_no_secret": {
            "name": "test_no_secret",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_stats.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_server_timing": {
            "name": "test_server_timing",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "Container"
                ]
            }
        },
        "test_requests": {
            "name": "test_requests",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "Callable"
                ]
            }
        },
        "test_redis": {
            "name": "test_redis",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "bool"
                ]
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_stats_db.py": {
        "test_no_extra": {
            "name": "test_no_extra",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "int",
                    "str"
                ],
                "composition": []
            }
        },
        "test_with_extra": {
            "name": "test_with_extra",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "int",
                    "str"
                ],
                "composition": []
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": [
                    "int",
                    "str"
                ],
                "composition": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_timeout.py": {
        "test_sql": {
            "name": "test_sql",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/test_versions.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_connection": []
            }
        }
    },
    "c2cwsgiutils-master/acceptance_tests/tests/tests/__init__.py": {},
    "c2cwsgiutils-master/c2cwsgiutils/auth.py": {
        "get_expected_secret": {
            "name": "get_expected_secret",
            "location": 49,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_hash_secret": {
            "name": "_hash_secret",
            "location": 55,
            "return": [
                "str",
                "bool",
                "dict",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "secret": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_is_auth_secret": {
            "name": "_is_auth_secret",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_is_auth_user_github": {
            "name": "_is_auth_user_github",
            "location": 92,
            "return": [
                "bool",
                "tuple[bool]",
                "Optional[str]",
                "tuple[typing.Union[bool,dict[, ]]]"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "pyramid.requesRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_auth_user": {
            "name": "is_auth_user",
            "location": 122,
            "return": [
                "bool",
                "tuple[typing.Union[bool,dict[, ]]]",
                "Optional[str]",
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "is_auth": {
            "name": "is_auth",
            "location": 140,
            "return": [
                "bool",
                "int",
                "bytes",
                "typing.Type",
                "Callable",
                "list[]",
                "str"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "dict",
                    "pyramid.requesRequest"
                ]
            }
        },
        "auth_view": {
            "name": "auth_view",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        },
        "auth_type": {
            "name": "auth_type",
            "location": 163,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "settings": [
                    "BaseException"
                ]
            }
        },
        "check_access": {
            "name": "check_access",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ],
                "repo": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "access_type": [
                    "str",
                    "None",
                    "bool",
                    "Literal"
                ]
            }
        },
        "is_enabled": {
            "name": "is_enabled",
            "location": 241,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Mapping[str, str]"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator",
                    "Dict[str, object]"
                ],
                "env_name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, object]",
                    "pyramid.config.Configurator",
                    "Dict[str, object]"
                ],
                "config_name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, object]",
                    "pyramid.config.Configurator",
                    "Dict[str, object]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/client_info.py": {
        "_handle_others": {
            "name": "_handle_others",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "dict",
                    "int",
                    "Sequence[dict]",
                    "Sequence",
                    "Awaitable"
                ]
            }
        },
        "_handle_forwarded": {
            "name": "_handle_forwarded",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "filter_factory": {
            "name": "filter_factory",
            "location": 72,
            "return": [
                "Filter",
                "str",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Filter.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "Sequence['cirq.Qid']",
                "Container[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict[, ]",
                    "Callable",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "start_response": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/config_utils.py": {
        "get_base_path": {
            "name": "get_base_path",
            "location": 8,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "IO[bytes]",
                    "typing.IO",
                    "Optional[str]",
                    "None",
                    "TextIO",
                    "typing.TextIO",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "env_or_config": {
            "name": "env_or_config",
            "location": 13,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "dict",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "env_name": [
                    "str",
                    "None"
                ],
                "config_name": [
                    "str",
                    "None"
                ],
                "default": [
                    "str",
                    "None"
                ],
                "type_": [
                    "str"
                ]
            }
        },
        "env_or_settings": {
            "name": "env_or_settings",
            "location": 26,
            "return": [
                "int",
                "None",
                "str",
                "list[tuple[typing.Union[str,str,str]]]",
                "bool"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]"
                ],
                "env_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "settings_name": [
                    "Optional[str]",
                    "str"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "List[Tuple[str, str, str]]",
                    "list[tuple[typing.Union[str,str,str]]]"
                ],
                "type_": [
                    "str"
                ]
            }
        },
        "config_bool": {
            "name": "config_bool",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "T",
                    "typing.Any",
                    "Optional[Dict[str, Any]]",
                    "tuple[typing.Union[str,str]]",
                    "Optional[Any]",
                    "typing.Sequence[typing.Any]",
                    "Optional[Tuple[str, str]]",
                    "typing.Sequence[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/coverage_setup.py": {
        "init": {
            "name": "init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "includeme": {
            "name": "includeme",
            "location": 17,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/db.py": {
        "setup_session": {
            "name": "setup_session",
            "location": 32,
            "return": [
                "tuple[typing.Union[dict[str, str],int]]",
                "str",
                "Dict[str, List[Callable]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "master_prefix": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "slave_prefix": [
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "str",
                    "Type['BaseConfig']",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "force_master": [
                    "Optional[Iterable[str]]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "force_slave": [
                    "Optional[Iterable[str]]",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "create_session": {
            "name": "create_session",
            "location": 91,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "Optional[Dict]",
                "dict[, ]",
                "str",
                "bytes"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "url": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "slave_url": [
                    "Optional[str]",
                    "None",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "force_master": [
                    "Optional[Iterable[str]]",
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "dict",
                    "Type['BaseConfig']",
                    "typing.Type"
                ],
                "force_slave": [
                    "Optional[Iterable[str]]",
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "dict",
                    "Type['BaseConfig']",
                    "typing.Type"
                ]
            }
        },
        "_add_tween": {
            "name": "_add_tween",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "OrderedDict",
                    "dict",
                    "Dict[Any, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "db_session": [
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "None",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "force_master": [
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "None",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "force_slave": [
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "None",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "get_engine": {
            "name": "get_engine",
            "location": 249,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "IO",
                    "typing.IO"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "dict",
                    "bool",
                    "IO"
                ]
            }
        },
        "get_session_factory": {
            "name": "get_session_factory",
            "location": 256,
            "return": [
                "sqlalchemy.engine.Engine",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "sqlalchemy.engine.Engine",
                    "float",
                    "bool"
                ]
            }
        },
        "get_tm_session": {
            "name": "get_tm_session",
            "location": 263,
            "return": [
                "list[tuple[typing.Union[str,bool]]]",
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "session_factory": [
                    "str",
                    "float"
                ],
                "transaction_manager": [
                    "transaction.TransactionManager"
                ]
            }
        },
        "get_tm_session_pyramid": {
            "name": "get_tm_session_pyramid",
            "location": 327,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "session_factory": [
                    "sqlalchemy.orm.Session",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "sqlalchemy.orm.session.sessionmaker"
                ],
                "transaction_manager": [
                    "typing.Callable[, ]",
                    "transaction.TransactionManager",
                    "Callable"
                ],
                "request": [
                    "sqlalchemy.orm.Session",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "sqlalchemy.orm.session.sessionmaker"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 342,
            "return": [
                "SessionFactory",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "logging.Logger",
                    "Optional[List[str]]"
                ],
                "master_prefix": [
                    "dict"
                ],
                "slave_prefix": [
                    "dict"
                ],
                "force_master": [
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "force_slave": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_add_tween.db_chooser_tween_factory": {
            "name": "db_chooser_tween_factory",
            "location": 162,
            "return": [],
            "arguments": {
                "handler": [],
                "_registry": []
            }
        },
        "SessionFactory.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "force_master": [
                    "str",
                    "set[str]",
                    "Set[str]",
                    "tuple[typing.Union[str,str]]",
                    "list[]",
                    "Tuple[str, str]",
                    "typing.Type",
                    "Tuple[str]",
                    "Tuple[str, str, str, str]",
                    "list",
                    "Type[Mapping[Any, Any]]"
                ],
                "force_slave": [
                    "str",
                    "set[str]",
                    "Set[str]",
                    "tuple[typing.Union[str,str]]",
                    "list[]",
                    "Tuple[str, str]",
                    "typing.Type",
                    "Tuple[str]",
                    "Tuple[str, str, str, str]",
                    "list",
                    "Type[Mapping[Any, Any]]"
                ],
                "ro_engine": [
                    "int",
                    "slice",
                    "list[int]",
                    "List[int]"
                ],
                "rw_engine": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "SessionFactory.engine_name": {
            "name": "engine_name",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "readwrite": [
                    "Iterable[Tuple[int, Any]]",
                    "str",
                    "typing.Iterable[tuple[typing.Union[int,typing.Any]]]",
                    "bool"
                ]
            }
        },
        "SessionFactory.__call__": {
            "name": "__call__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "readwrite": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "init.dbsession": {
            "name": "dbsession",
            "location": 387,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_add_tween.db_chooser_tween_factory.db_chooser_tween": {
            "name": "db_chooser_tween",
            "location": 171,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/db_maintenance_view.py": {
        "install_subscriber": {
            "name": "install_subscriber",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "_db_maintenance": {
            "name": "_db_maintenance",
            "location": 34,
            "return": [
                "dict[typing.Text, int]",
                "Dict[str, Any]",
                "dict[typing.Text, typing.Union[int,None]]",
                "django.contrib.auth.models.User",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "_set_readonly": {
            "name": "_set_readonly",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "_restore": {
            "name": "_restore",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "_store": {
            "name": "_store",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable[[str], T]",
                    "typing.Callable[str, T]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "readonly": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "_get_redis_value": {
            "name": "_get_redis_value",
            "location": 76,
            "return": [
                "str",
                "None",
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/errors.py": {
        "_crude_add_cors": {
            "name": "_crude_add_cors",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ],
                "response": [
                    "pyramid.response.Response",
                    "None"
                ]
            }
        },
        "_add_cors": {
            "name": "_add_cors",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_do_error": {
            "name": "_do_error",
            "location": 51,
            "return": [
                "dict[typing.Text, typing.Union[str,int,typing.Any,None,bytes,typing.Callable[..., None],Exception]]",
                "Dict[str, Any]",
                "Callable[[], None]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "request": [
                    "int",
                    "pyramid.requesRequest",
                    "typing.Callable[..., None]",
                    "str",
                    "Callable[..., None]",
                    "list[dict[, ]]",
                    "List[dict]",
                    "typing.Any",
                    "Optional[Any]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "status": [
                    "int",
                    "pyramid.requesRequest",
                    "typing.Any",
                    "Optional[Any]",
                    "Exception",
                    "None",
                    "Union[str, bytes, Any]",
                    "str",
                    "Callable[..., None]",
                    "bytes",
                    "typing.Callable[..., None]"
                ],
                "exception": [
                    "pyramid.requesRequest",
                    "typing.Callable[..., None]",
                    "Callable[..., None]",
                    "typing.Any",
                    "Optional[Any]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "logger": [
                    "Callable[..., None]",
                    "Optional[dict]",
                    "dict",
                    "bool",
                    "int"
                ],
                "reduce_info_sent": [
                    "typing.Callable[, ]",
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "Optional[bytes]",
                    "list"
                ]
            }
        },
        "_http_error": {
            "name": "_http_error",
            "location": 82,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "exception": [
                    "pyramid.requesRequest"
                ],
                "request": [
                    "str",
                    "pyramid.requesRequest",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_include_dev_details": {
            "name": "_include_dev_details",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_integrity_error": {
            "name": "_integrity_error",
            "location": 107,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "pyramid.requesRequest"
                ],
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        },
        "_client_interrupted_error": {
            "name": "_client_interrupted_error",
            "location": 118,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "pyramid.requesRequest"
                ],
                "request": [
                    "Exception",
                    "pyramid.requesRequest"
                ]
            }
        },
        "_boto_client_error": {
            "name": "_boto_client_error",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "exception": [
                    "dict[, ]",
                    "Exception",
                    "dict",
                    "pyramid.requesRequest"
                ],
                "request": [
                    "typing.Iterator",
                    "pyramid.requesRequest",
                    "Iterator"
                ]
            }
        },
        "_other_error": {
            "name": "_other_error",
            "location": 137,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "exception": [
                    "bool"
                ],
                "request": [
                    "dict[, ]",
                    "pyramid.requesRequest",
                    "dict"
                ]
            }
        },
        "_passthrough": {
            "name": "_passthrough",
            "location": 148,
            "return": [
                "dict[, ]",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "exception": [
                    "dict[, ]",
                    "str",
                    "pyramid.requesRequest",
                    "dict"
                ],
                "request": [
                    "dict[, ]",
                    "str",
                    "pyramid.requesRequest",
                    "dict"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "pyramid.config.Configurator",
                    "Dict[str, Any]"
                ]
            }
        },
        "_integrity_error.reduce_info_sent": {
            "name": "reduce_info_sent",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/health_check.py": {
        "_get_binding_class": {
            "name": "_get_binding_class",
            "location": 109,
            "return": [
                "_NewBinding",
                "str",
                "_OldBinding",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "Set[str]"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "ro_engin": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "rw_engin": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "readwrite": [
                    "str"
                ]
            }
        },
        "_get_bindings": {
            "name": "_get_bindings",
            "location": 121,
            "return": [
                "list[]",
                "Optional[str]",
                "Optional[List[str]]",
                "bool",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool"
                ],
                "engine_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_get_alembic_version": {
            "name": "_get_alembic_version",
            "location": 148,
            "return": [
                "str",
                "Dict[str, Any]",
                "configparser.ConfigParser"
            ],
            "arguments": {
                "alembic_ini_path": [
                    "str"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_maybe_function": {
            "name": "_maybe_function",
            "location": 519,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "what": [
                    "pyramid.requesRequest"
                ],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_get_all_versions": {
            "name": "_get_all_versions",
            "location": 524,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "JsonCheckException.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "json": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "JsonCheckException.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonCheckException.json_data": {
            "name": "json_data",
            "location": 53,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Binding.name": {
            "name": "name",
            "location": 58,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Binding.__enter__": {
            "name": "__enter__",
            "location": 61,
            "return": [
                "sqlalchemy.orm.Session",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Binding.__exit__": {
            "name": "__exit__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "_NewBinding.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "readwrite": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_NewBinding.name": {
            "name": "name",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NewBinding.__enter__": {
            "name": "__enter__",
            "location": 81,
            "return": [
                "Optional[int]",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OldBinding.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "engine": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_OldBinding.name": {
            "name": "name",
            "location": 91,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OldBinding.__enter__": {
            "name": "__enter__",
            "location": 94,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OldBinding.__exit__": {
            "name": "__exit__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "HealthCheck.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "pyramid.config.Configurator",
                    "Dict[str, Any]"
                ]
            }
        },
        "HealthCheck.add_db_session_check": {
            "name": "add_db_session_check",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "bool",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "list",
                    "list[]"
                ],
                "query_cb": [
                    "Optional[List[str]]",
                    "None",
                    "Optional[str]",
                    "str",
                    "list[str]",
                    "int",
                    "float",
                    "Optional[Callable]",
                    "typing.Callable[, ]"
                ],
                "at_least_one_model": [
                    "int",
                    "None",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "level": [
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "str"
                ],
                "engine_type": [
                    "str",
                    "bool",
                    "Dict[str, Set[str]]",
                    "list"
                ]
            }
        },
        "HealthCheck.add_alembic_check": {
            "name": "add_alembic_check",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "AbstractSet[str]",
                    "typing.AbstractSet"
                ],
                "alembic_ini_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "AbstractSet[str]",
                    "typing.AbstractSet"
                ],
                "level": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "AbstractSet[str]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "AbstractSet[str]"
                ],
                "version_schema": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "Set[str]",
                    "set[str]",
                    "list",
                    "list[]"
                ],
                "version_table": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "Set[str]",
                    "set[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "HealthCheck.add_url_check": {
            "name": "add_url_check",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "params": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list",
                    "list[]"
                ],
                "headers": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list",
                    "list[]"
                ],
                "name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "check_cb": [
                    "typing.Callable[, ]",
                    "float",
                    "str",
                    "Optional[str]",
                    "list",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "list",
                    "bool"
                ],
                "level": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list",
                    "bytes",
                    "bool"
                ]
            }
        },
        "HealthCheck.add_redis_check": {
            "name": "add_redis_check",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Pattern",
                    "Optional[Pattern]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "set[str]",
                    "Optional[Iterable[str]]",
                    "Optional[Set[str]]"
                ],
                "level": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "HealthCheck.add_version_check": {
            "name": "add_version_check",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "list"
                ],
                "level": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "HealthCheck.add_custom_check": {
            "name": "add_custom_check",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "check_cb": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "level": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "HealthCheck._view": {
            "name": "_view",
            "location": 439,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest",
                    "requests.Request"
                ]
            }
        },
        "HealthCheck._run_one": {
            "name": "_run_one",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "check": [
                    "typing.Callable[pyramid.requesRequest, typing.Any]",
                    "str",
                    "Callable[[pyramid.requesRequest], Any]",
                    "int",
                    "pyramid.requesRequest",
                    "Callable",
                    "bool"
                ],
                "is_auth": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "level": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "list[str]",
                    "Dict[str, Any]",
                    "types.ModuleType",
                    "List[str]"
                ],
                "request": [
                    "typing.Callable[pyramid.requesRequest, typing.Any]",
                    "str",
                    "Callable[[pyramid.requesRequest], Any]",
                    "int",
                    "pyramid.requesRequest",
                    "Callable",
                    "bool"
                ],
                "results": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "HealthCheck._create_db_engine_check": {
            "name": "_create_db_engine_check",
            "location": 492,
            "return": [
                "tuple[]",
                "str",
                "bool"
            ],
            "arguments": {
                "binding": [
                    "Type[T]",
                    "Set[str]",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "query_cb": [
                    "bool",
                    "typing.Type",
                    "Type[T]",
                    "dict[str, bool]",
                    "Dict[str, bool]",
                    "list[]",
                    "list",
                    "Type[tuple]"
                ]
            }
        },
        "HealthCheck._at_least_one": {
            "name": "_at_least_one",
            "location": 510,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ]
            }
        },
        "HealthCheck.add_url_check.check": {
            "name": "check",
            "location": 325,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "HealthCheck.add_redis_check.check": {
            "name": "check",
            "location": 352,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "HealthCheck.add_version_check.check": {
            "name": "check",
            "location": 402,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "HealthCheck._create_db_engine_check.check": {
            "name": "check",
            "location": 496,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "HealthCheck._at_least_one.query": {
            "name": "query",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "HealthCheck.add_alembic_check._Check.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "HealthCheck.add_alembic_check._Check.__call__": {
            "name": "__call__",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "starlette.requests.Request",
                    "requests.Request"
                ]
            }
        },
        "HealthCheck.add_redis_check.check.add": {
            "name": "add",
            "location": 357,
            "return": [],
            "arguments": {
                "name": [],
                "func": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/index.py": {
        "_url": {
            "name": "_url",
            "location": 53,
            "return": [
                "None",
                "int",
                "Dict[str, str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "route": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "params": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "section": {
            "name": "section",
            "location": 62,
            "return": [
                "typing.Text",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "paragraph": {
            "name": "paragraph",
            "location": 78,
            "return": [
                "typing.Text",
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {}
        },
        "link": {
            "name": "link",
            "location": 87,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "label": [
                    "str"
                ],
                "cssclass": [
                    "typing.Text",
                    "str",
                    "float"
                ],
                "target": [
                    "typing.Text",
                    "str",
                    "float"
                ]
            }
        },
        "form": {
            "name": "form",
            "location": 100,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "input_": {
            "name": "input_",
            "location": 114,
            "return": [
                "typing.Text",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "tuple",
                    "tuple[]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "label": [
                    "Sequence[str]",
                    "None",
                    "Optional[int]",
                    "typing.Sequence[str]",
                    "Optional[\"Period\"]",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "type_": [
                    "Optional[Dict[str, Any]]",
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "Optional[Callable[..., Any]]",
                    "dict[, ]",
                    "Optional[Any]",
                    "typing.Callable[..., typing.Any]",
                    "typing.Any"
                ],
                "value": [
                    "typing.Text",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "button": {
            "name": "button",
            "location": 138,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "label": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "List[str]",
                    "list[str]",
                    "Tuple[Sequence[Any], Sequence[Any]]",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[typing.Any]]]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "_index": {
            "name": "_index",
            "location": 143,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_versions": {
            "name": "_versions",
            "location": 241,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_stats": {
            "name": "_stats",
            "location": 249,
            "return": [
                "typing.Text",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_profiler": {
            "name": "_profiler",
            "location": 257,
            "return": [
                "typing.Text",
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "_db_maintenance": {
            "name": "_db_maintenance",
            "location": 275,
            "return": [
                "typing.Text",
                "ItemsView",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "_logging": {
            "name": "_logging",
            "location": 296,
            "return": [
                "typing.Text",
                "Dict[str, List[str]]",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        },
        "_debug": {
            "name": "_debug",
            "location": 314,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Union[dict, list]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "_health_check": {
            "name": "_health_check",
            "location": 356,
            "return": [
                "typing.Text",
                "bytearray",
                "str"
            ],
            "arguments": {
                "request": [
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "_github_login": {
            "name": "_github_login",
            "location": 367,
            "return": [
                "typing.Dict[builtins.str, typing.Any]",
                "None"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_github_login_callback": {
            "name": "_github_login_callback",
            "location": 402,
            "return": [
                "str",
                "Tuple[bool, bool, bool]",
                "bool",
                "Optional[int]",
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_github_logout": {
            "name": "_github_logout",
            "location": 484,
            "return": [
                "typing.Dict[builtins.str, typing.Any]",
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "pyramid.requesRequest",
                    "dict"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Union[str, dict]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/loader.py": {
        "Loader._get_defaults": {
            "name": "_get_defaults",
            "location": 14,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "None",
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "float",
                    "Union[str]",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "tuple[bool]",
                    "Tuple[bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loader.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "typing.Text",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/logging_view.py": {
        "install_subscriber": {
            "name": "install_subscriber",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "_logging_change_level": {
            "name": "_logging_change_level",
            "location": 34,
            "return": [
                "dict[typing.Text, typing.Union[int,str]]",
                "Dict[str, Any]",
                "dict[typing.Text, int]",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_set_level": {
            "name": "_set_level",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ],
                "level": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "_restore_overrides": {
            "name": "_restore_overrides",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "_store_override": {
            "name": "_store_override",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "set"
                ],
                "level": [
                    "str",
                    "set",
                    "set[]"
                ]
            }
        },
        "_list_overrides": {
            "name": "_list_overrides",
            "location": 83,
            "return": [
                "typing.Generator[typing.Tuple[builtins.str, builtins.str], None, None]",
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/metrics.py": {
        "add_provider": {
            "name": "add_provider",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "float",
                    "int"
                ]
            }
        },
        "_metrics": {
            "name": "_metrics",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_view": {
            "name": "_view",
            "location": 63,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": []
            }
        },
        "init": {
            "name": "init",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "help_": [
                    "bool",
                    "typing.Type",
                    "type",
                    "Type"
                ],
                "type_": [
                    "typing.Text",
                    "bool",
                    "type",
                    "Type"
                ],
                "extend": [
                    "bool",
                    "type",
                    "Type"
                ]
            }
        },
        "Provider.get_data": {
            "name": "get_data",
            "location": 24,
            "return": [
                "list[]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryMapProvider.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "memory_type": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "pids": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "MemoryMapProvider.get_data": {
            "name": "get_data",
            "location": 90,
            "return": [
                "list[tuple[dict[typing.Text, ]]]",
                "Dict[str, Any]",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/models_graph.py": {
        "generate_model_graph": {
            "name": "generate_model_graph",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "type",
                    "typing.Type",
                    "Sequence[type]",
                    "typing.Sequence[typing.Type]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "_generate_model_graph": {
            "name": "_generate_model_graph",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "list",
                    "list[]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "base": [
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "_print_node": {
            "name": "_print_node",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "interesting": [
                    "set",
                    "str",
                    "set[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_is_interesting": {
            "name": "_is_interesting",
            "location": 53,
            "return": [
                "bool",
                "Callable",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "what": [
                    "type",
                    "str",
                    "typing.Type",
                    "bytes",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "Union[int, str]",
                    "int"
                ],
                "base": [
                    "type",
                    "str",
                    "typing.Type",
                    "bytes",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "_get_table_desc": {
            "name": "_get_table_desc",
            "location": 57,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_get_all_cols": {
            "name": "_get_all_cols",
            "location": 63,
            "return": [
                "list[]",
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "_get_local_cols": {
            "name": "_get_local_cols",
            "location": 85,
            "return": [
                "list[]",
                "List[str]",
                "bytes",
                "str",
                "List[Dict]",
                "list",
                "Union[str, List[Any]]"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/pretty_json.py": {
        "fast_dumps": {
            "name": "fast_dumps",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "dict",
                    "Mapping"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/profiler.py": {
        "Profile.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ],
                "print_number": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Profile.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__exit__": {
            "name": "__exit__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/prometheus.py": {
        "PushgatewayGroupPublisher.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "dict"
                ],
                "job": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "instance": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Union[int, str]]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "labels": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PushgatewayGroupPublisher._merge_labels": {
            "name": "_merge_labels",
            "location": 28,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "bytes",
                "list[tuple[typing.Union[str,bytes]]]",
                "bool",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "str",
                    "Optional[str]",
                    "Union[str, None]",
                    "list[tuple[typing.Union[str,bytes]]]",
                    "List[Tuple[str, bytes]]"
                ]
            }
        },
        "PushgatewayGroupPublisher.add": {
            "name": "add",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "int",
                    "str",
                    "typing.Type",
                    "Type",
                    "list[str]",
                    "Type[UserWarning]",
                    "List[str]"
                ],
                "metric_value": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "metric_type": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int"
                ],
                "metric_labels": [
                    "str",
                    "None",
                    "float",
                    "List[str]",
                    "FrozenSet[str]",
                    "list[str]",
                    "frozenset"
                ]
            }
        },
        "PushgatewayGroupPublisher.commit": {
            "name": "commit",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushgatewayGroupPublisher._reset": {
            "name": "_reset",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushgatewayGroupPublisher.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/pyramid.py": {
        "includeme": {
            "name": "includeme",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/pyramid_logging.py": {
        "_un_underscore": {
            "name": "_un_underscore",
            "location": 44,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "dict[, ]",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "MutableMapping[str, Any]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_rename_field": {
            "name": "_rename_field",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "dico": [
                    "str",
                    "MutableMapping[str, Any]"
                ],
                "source": [
                    "str",
                    "MutableMapping[str, Any]"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "_make_message_dict": {
            "name": "_make_message_dict",
            "location": 68,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_PyramidFilter.filter": {
            "name": "filter",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PyramidCeeSysLogHandler.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyramidCeeSysLogHandler.format": {
            "name": "format",
            "location": 91,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "JsonLogHandler.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "JsonLogHandler.format": {
            "name": "format",
            "location": 117,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/redis_stats.py": {
        "_execute_command_patch": {
            "name": "_execute_command_patch",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "init": {
            "name": "init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/redis_utils.py": {
        "get": {
            "name": "get",
            "location": 32,
            "return": [
                "tuple[None]",
                "str",
                "bool"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "_init": {
            "name": "_init",
            "location": 45,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "bool"
                ]
            }
        },
        "PubSubWorkerThread.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubsub": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "PubSubWorkerThread.run": {
            "name": "run",
            "location": 106,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSubWorkerThread.stop": {
            "name": "stop",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/sentry.py": {
        "_create_before_send_filter": {
            "name": "_create_before_send_filter",
            "location": 21,
            "return": [
                "int",
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "tags": [
                    "MutableMapping[str, str]",
                    "str",
                    "typing.MutableMapping",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "None",
                    "Mapping[str, Any]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "None",
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "capture_exceptions": {
            "name": "capture_exceptions",
            "location": 103,
            "return": [
                "typing.Generator[None, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "filter_wsgi_app": {
            "name": "filter_wsgi_app",
            "location": 120,
            "return": [
                "Callable",
                "SentryWsgiMiddleware",
                "bool",
                "typing.Callable[, ]",
                "List[dict]",
                "int",
                "list[dict[, ]]"
            ],
            "arguments": {
                "application": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "list[dict[, ]]",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "filter_factory": {
            "name": "filter_factory",
            "location": 133,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "_create_before_send_filter.do_filter": {
            "name": "do_filter",
            "location": 24,
            "return": [
                "dict",
                "\"Step\"",
                "int"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ],
                "hint": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/services.py": {
        "create": {
            "name": "create",
            "location": 11,
            "return": [
                "Service",
                "str",
                "IO",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_cache_cors": {
            "name": "_cache_cors",
            "location": 22,
            "return": [
                "dict[, ]",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "scrapy.http.Response",
                    "flask.Response",
                    "dict",
                    "django.http.response.HttpResponse",
                    "starlette.responses.Response"
                ],
                "request": [
                    "dict[, ]",
                    "flask.Response",
                    "aiohttp.web.Response",
                    "dict",
                    "Response",
                    "faaspact_verifier.definitions.Response"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/setup_process.py": {
        "fill_arguments": {
            "name": "fill_arguments",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "bool",
                    "common.TestingContext"
                ],
                "use_attribute": [
                    "bool",
                    "argparse.ArgumentParser",
                    "common.TestingContext"
                ],
                "default_config_uri": [
                    "typing.Text",
                    "str",
                    "common.TestingContext",
                    "int",
                    "bool"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "typing.Text",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "init_logging": {
            "name": "init_logging",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "typing.Text",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "bootstrap_application_from_options": {
            "name": "bootstrap_application_from_options",
            "location": 88,
            "return": [
                "bool",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "options": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "dict[, ]",
                    "dict",
                    "typing.Mapping",
                    "argparse.Namespace",
                    "None",
                    "Optional[Mapping[str, str]]",
                    "Optional[dict]"
                ]
            }
        },
        "bootstrap_application": {
            "name": "bootstrap_application",
            "location": 100,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "config_uri": [
                    "typing.Text",
                    "Optional[Iterable[str]]",
                    "argparse.Namespace",
                    "Dict[str, Any]"
                ],
                "options": [
                    "Dict[str, Any]",
                    "None",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, bool]",
                    "dict[, ]",
                    "Union[str, dict]",
                    "dict[str, bool]",
                    "str"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/stats.py": {
        "timer_context": {
            "name": "timer_context",
            "location": 73,
            "return": [
                "typing.Generator[None, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "list",
                    "list[]"
                ],
                "tags": [
                    "str",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "outcome_timer_context": {
            "name": "outcome_timer_context",
            "location": 88,
            "return": [
                "typing.Generator[None, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "key": [
                    "list[]",
                    "list",
                    "\"Account\"",
                    "str"
                ],
                "tags": [
                    "dict",
                    "None",
                    "str",
                    "dict[, ]",
                    "list",
                    "Dict[str, Any]",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "timer": {
            "name": "timer",
            "location": 118,
            "return": [
                "Timer",
                "Set[str]",
                "Iterable[str]",
                "Mapping[str, str]",
                "str",
                "Callable[[str, str], float]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "key": [
                    "Optional[Sequence[Any]]",
                    "None",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Iterable[str]]"
                ],
                "tags": [
                    "Sequence[Any]",
                    "None",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int",
                    "dict",
                    "Callable",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "set_gauge": {
            "name": "set_gauge",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "value": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "tags": [
                    "Sequence[Any]",
                    "float",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "increment_counter": {
            "name": "increment_counter",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "List[Tuple]",
                    "list[tuple[]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "increment": [
                    "int",
                    "Sequence[Any]",
                    "Callable",
                    "List[Tuple]",
                    "Dict[str, Any]",
                    "str"
                ],
                "tags": [
                    "int",
                    "None",
                    "Sequence[Any]",
                    "Callable",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "List[Tuple]",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "list[tuple[]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "init_backends": {
            "name": "init_backends",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Callable",
                    "str",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_format_tags": {
            "name": "_format_tags",
            "location": 333,
            "return": [
                "str",
                "typing.Text",
                "bytes",
                "bool"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "prefix": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "tag_sep": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "kv_sep": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ],
                "key_formatter": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ],
                "value_formatter": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "get_env_tags": {
            "name": "get_env_tags",
            "location": 349,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {}
        },
        "_BaseBackend.timer": {
            "name": "timer",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "duration": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "tags": [
                    "Sequence[Any]",
                    "float",
                    "None",
                    "int",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "_BaseBackend.gauge": {
            "name": "gauge",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "value": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "tags": [
                    "Sequence[Any]",
                    "float",
                    "None",
                    "int",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "_BaseBackend.counter": {
            "name": "counter",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "increment": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "tags": [
                    "Sequence[Any]",
                    "float",
                    "None",
                    "int",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "tags": [
                    "str",
                    "Union[str, bytes, Any]",
                    "bytes",
                    "typing.Any"
                ]
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key_final": [
                    "Optional[Sequence[Any]]",
                    "None",
                    "Optional[Any]",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "dict",
                    "typing.Any",
                    "dict[, ]"
                ],
                "tags_final": [
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "str",
                    "Union[None, str]",
                    "typing.Any",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "MemoryBackend.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryBackend._key_entry": {
            "name": "_key_entry",
            "location": 174,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "MemoryBackend._key": {
            "name": "_key",
            "location": 178,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Optional[Callable[[Any, Any], None]]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MemoryBackend.timer": {
            "name": "timer",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "set",
                    "set[]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "duration": [
                    "int",
                    "Sequence[Any]",
                    "Dict[str, Any]",
                    "List[Tuple]",
                    "dict",
                    "Callable"
                ],
                "tags": [
                    "str",
                    "None",
                    "set",
                    "Optional[int]",
                    "set[]",
                    "int"
                ]
            }
        },
        "MemoryBackend.gauge": {
            "name": "gauge",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "value": [
                    "Sequence[Any]",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tags": [
                    "Sequence[Any]",
                    "None",
                    "int",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MemoryBackend.counter": {
            "name": "counter",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "set",
                    "set[]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "increment": [
                    "dict",
                    "float",
                    "dict[, ]",
                    "int",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "tags": [
                    "str",
                    "None",
                    "set",
                    "Optional[int]",
                    "set[]",
                    "int"
                ]
            }
        },
        "MemoryBackend.get_stats": {
            "name": "get_stats",
            "location": 213,
            "return": [
                "dict[typing.Text, dict[, dict[typing.Text, int]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StatsDBackend.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "tags": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[Callable]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "StatsDBackend._key_entry": {
            "name": "_key_entry",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "key_entry": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StatsDBackend._tag_value": {
            "name": "_tag_value",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_value": [
                    "str",
                    "List[str]",
                    "int",
                    "list[str]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "StatsDBackend._key": {
            "name": "_key",
            "location": 266,
            "return": [
                "str",
                "\"AbstractExpandSet\"",
                "Sequence[Sequence[T]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Type[RuntimeError]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "StatsDBackend._merge_tags": {
            "name": "_merge_tags",
            "location": 269,
            "return": [
                "str",
                "Callable[[str], str]",
                "Set[str]",
                "typing.Sequence[str]",
                "List[str]",
                "typing.Mapping",
                "Optional[int]",
                "bool",
                "dict[typing.Any, str]",
                "dict[, ]",
                "dict[str, str]",
                "dict[typing.Union[typing.Any,str], str]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "bool",
                    "Optional[Mapping[str, str]]",
                    "None",
                    "typing.Mapping",
                    "Dict[Any, str]",
                    "dict",
                    "dict[typing.Any, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Optional[str]",
                    "dict[str, str]"
                ]
            }
        },
        "StatsDBackend._send": {
            "name": "_send",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List[Union[str, Any]]",
                    "list[typing.Union[str,typing.Any]]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "StatsDBackend.timer": {
            "name": "timer",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "duration": [
                    "float",
                    "int",
                    "str",
                    "T"
                ],
                "tags": [
                    "bool",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "StatsDBackend.gauge": {
            "name": "gauge",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "tags": [
                    "str",
                    "bool",
                    "None",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "StatsDBackend.counter": {
            "name": "counter",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "increment": [
                    "int",
                    "float"
                ],
                "tags": [
                    "bool",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/version.py": {
        "init": {
            "name": "init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "_read_versions": {
            "name": "_read_versions",
            "location": 45,
            "return": [
                "Dict[str, str]",
                "str",
                "List[Tuple[str, str, int]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 52,
            "return": [
                "str",
                "None",
                "Optional[Sequence[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/__init__.py": {
        "get_config_defaults": {
            "name": "get_config_defaults",
            "location": 12,
            "return": [
                "dict[, ]",
                "dict",
                "str",
                "list",
                "set",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "_create_handlers": {
            "name": "_create_handlers",
            "location": 32,
            "return": [
                "dict[, dict[typing.Text, typing.Text]]",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_filter_logger": {
            "name": "_filter_logger",
            "location": 56,
            "return": [
                "dict[typing.Text, list[]]",
                "str",
                "list",
                "Set[str]",
                "Dict[str, Any]",
                "OrderedDict"
            ],
            "arguments": {
                "block": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_logconfig_dict": {
            "name": "get_logconfig_dict",
            "location": 68,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[, dict[typing.Text, ]]]]",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_paste_config": {
            "name": "get_paste_config",
            "location": 106,
            "return": [
                "Optional[str]",
                "bool",
                "dict[str, str]",
                "str",
                "list[str]",
                "set[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/acceptance/composition.py": {
        "_try": {
            "name": "_try",
            "location": 23,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "what": [
                    "float",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "fail": [
                    "bool",
                    "int",
                    "float",
                    "time.Time"
                ],
                "times": [
                    "int",
                    "float"
                ],
                "delay": [
                    "int",
                    "float"
                ]
            }
        },
        "Composition.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list[typing.Type]",
                    "Optional[List[Type]]",
                    "None",
                    "pyramid.requesRequest",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Callable[..., Awaitable]",
                    "Request"
                ],
                "composition": [
                    "str",
                    "bytes"
                ],
                "coverage_paths": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "Composition.dc": {
            "name": "dc",
            "location": 64,
            "return": [
                "str",
                "bool",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Composition.dc_try": {
            "name": "dc_try",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Composition.stop_all": {
            "name": "stop_all",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composition.stop": {
            "name": "stop",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "typing.Sized",
                    "Sized",
                    "logging.Logger"
                ]
            }
        },
        "Composition.restart": {
            "name": "restart",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "typing.Sized",
                    "Sized",
                    "logging.Logger"
                ]
            }
        },
        "Composition.run": {
            "name": "run",
            "location": 102,
            "return": [
                "int",
                "Coroutine"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "typing.Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "Composition.exec": {
            "name": "exec",
            "location": 108,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "typing.Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "Composition._get_env": {
            "name": "_get_env",
            "location": 112,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, str]",
                "List[Tuple[str, str]]",
                "str",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/acceptance/connection.py": {
        "check_response": {
            "name": "check_response",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [
                    "int",
                    "requests.Response",
                    "dict[int, str]",
                    "dict[str, str]",
                    "Dict[int, str]",
                    "dict[str, list[str]]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Dict[str, List[str]]",
                    "dict"
                ],
                "expected_status": [
                    "int",
                    "requests.Response",
                    "Optional[requests.Response]",
                    "str"
                ],
                "cache_expected": [
                    "int",
                    "str"
                ]
            }
        },
        "_get_json": {
            "name": "_get_json",
            "location": 245,
            "return": [
                "None",
                "Optional[str]",
                "Optional[float]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "r": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "dict"
                ],
                "origin": [
                    "List[Tuple[int, int]]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Connection.get": {
            "name": "get",
            "location": 29,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[int]",
                    "int",
                    "None",
                    "bool"
                ],
                "expected_status": [
                    "int"
                ],
                "cors": [
                    "bool",
                    "dict",
                    "Optional[int]",
                    "str"
                ],
                "headers": [
                    "dict",
                    "None",
                    "str",
                    "Optional[int]",
                    "dict[, ]",
                    "int",
                    "bool"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.get_raw": {
            "name": "get_raw",
            "location": 44,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Collection[Any]",
                    "typing.Collection",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "str",
                    "None",
                    "Collection[Any]",
                    "int",
                    "dict",
                    "typing.Collection",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "cors": [
                    "bool",
                    "dict",
                    "Optional[int]",
                    "str"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.get_json": {
            "name": "get_json",
            "location": 59,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Collection[Any]",
                    "typing.Collection",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "str",
                    "None",
                    "Collection[Any]",
                    "int",
                    "dict",
                    "typing.Collection",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "cors": [
                    "bool",
                    "dict",
                    "Optional[int]",
                    "str"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.get_xml": {
            "name": "get_xml",
            "location": 74,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "str",
                    "None",
                    "int",
                    "dict",
                    "Optional[bytes]",
                    "dict[, ]",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "cors": [
                    "bool",
                    "str",
                    "int",
                    "dict",
                    "Optional[bytes]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.post_json": {
            "name": "post_json",
            "location": 101,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "cors": [
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "Optional[Callable[[Dict], bool]]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.post_files": {
            "name": "post_files",
            "location": 118,
            "return": [
                "Optional[str]",
                "List[str]",
                "Union[str, int]",
                "list",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Mapping[str, str]",
                    "None",
                    "Optional[str]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "str",
                    "None",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[Callable[[Dict], bool]]",
                    "Mapping[str, str]",
                    "typing.Callable[dict[, ], bool]",
                    "Optional[str]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "cors": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[Callable[[Dict], bool]]",
                    "Mapping[str, str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.post": {
            "name": "post",
            "location": 135,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "cors": [
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "Optional[Callable[[Dict], bool]]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.put_json": {
            "name": "put_json",
            "location": 152,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "cors": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[Dict], bool]]",
                    "Optional[List[str]]",
                    "dict"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.delete": {
            "name": "delete",
            "location": 167,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict[, ]",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]"
                ],
                "cors": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[Callable[[Dict], bool]]",
                    "Optional[int]"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection.options": {
            "name": "options",
            "location": 184,
            "return": [
                "bool",
                "List[str]",
                "str",
                "List[Mapping[str, Any]]",
                "set"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]",
                    "None",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ],
                "expected_status": [
                    "int"
                ],
                "headers": [
                    "dict",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "Mapping[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ],
                "cache_expected": [
                    "int"
                ]
            }
        },
        "Connection._cors_headers": {
            "name": "_cors_headers",
            "location": 199,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "dict[, ]",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "cors": [
                    "bool",
                    "str",
                    "typing.Generator[typing.Union[str,None,None]]",
                    "Generator[str, None, None]",
                    "int"
                ]
            }
        },
        "Connection._check_cors": {
            "name": "_check_cors",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cors": [
                    "bool",
                    "float",
                    "str",
                    "list",
                    "list[]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "r": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "requests.Response",
                    "requests.PreparedRequest",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "Connection._merge_headers": {
            "name": "_merge_headers",
            "location": 212,
            "return": [
                "dict[, ]",
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "cors": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/acceptance/print.py": {
        "PrintConnection.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "origin": [
                    "str"
                ]
            }
        },
        "PrintConnection.wait_ready": {
            "name": "wait_ready",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "raiden.utils.Address",
                    "str",
                    "dict",
                    "bool"
                ],
                "app": [
                    "typing.Text",
                    "raiden.utils.Address",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "PrintConnection.get_capabilities": {
            "name": "get_capabilities",
            "location": 32,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "PrintConnection.get_example_requests": {
            "name": "get_example_requests",
            "location": 35,
            "return": [
                "dict[, ]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "PrintConnection.get_pdf": {
            "name": "get_pdf",
            "location": 42,
            "return": [
                "str",
                "bool",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Callable"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "timeout": [
                    "int",
                    "str"
                ]
            }
        },
        "PrintConnection._check_completion": {
            "name": "_check_completion",
            "location": 55,
            "return": [
                "list[]",
                "Optional[str]",
                "bytes",
                "None",
                "bool",
                "Optional[List[Any]]",
                "Optional[BaseException]",
                "list"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "PrintConnection.get_apps": {
            "name": "get_apps",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/acceptance/utils.py": {
        "in_docker": {
            "name": "in_docker",
            "location": 14,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "wait_url": {
            "name": "wait_url",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "retry_timeout": {
            "name": "retry_timeout",
            "location": 38,
            "return": [
                "bool",
                "int",
                "str",
                "List[str]",
                "typing.Final",
                "bytes"
            ],
            "arguments": {
                "what": [
                    "int",
                    "List[str]",
                    "list[str]",
                    "FrozenSet[Any]",
                    "frozenset"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str"
                ],
                "interval": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "approx": {
            "name": "approx",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "struct": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "wait_url.what": {
            "name": "what",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "approx.visit": {
            "name": "visit",
            "location": 74,
            "return": [
                "tuple[]",
                "bool",
                "Type"
            ],
            "arguments": {
                "_path": [
                    "str",
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "Type[list]"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "Type[T]",
                    "list",
                    "Optional[str]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/acceptance/__init__.py": {
        "retry": {
            "name": "retry",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exception_to_check": [
                    "float",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tries": [
                    "int",
                    "float",
                    "bool",
                    "List[str]",
                    "Callable"
                ],
                "delay": [
                    "float",
                    "bool",
                    "List[str]",
                    "Callable"
                ],
                "backoff": [
                    "int",
                    "float",
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "retry.deco_retry": {
            "name": "deco_retry",
            "location": 26,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retry.deco_retry.f_retry": {
            "name": "f_retry",
            "location": 28,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/broadcast/interface.py": {
        "BaseBroadcaster.subscribe": {
            "name": "subscribe",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "callback": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "BaseBroadcaster.unsubscribe": {
            "name": "unsubscribe",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "BaseBroadcaster.broadcast": {
            "name": "broadcast",
            "location": 17,
            "return": [
                "typing.Optional[typing.List[typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "str",
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "params": [
                    "bool",
                    "str",
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "expect_answers": [
                    "bool",
                    "str",
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/broadcast/local.py": {
        "LocalBroadcaster.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalBroadcaster.subscribe": {
            "name": "subscribe",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "callback": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LocalBroadcaster.unsubscribe": {
            "name": "unsubscribe",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LocalBroadcaster.broadcast": {
            "name": "broadcast",
            "location": 19,
            "return": [
                "list[]",
                "str",
                "None",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "Dict[str, int]",
                    "str",
                    "dict[str, int]",
                    "dict",
                    "dict[, ]"
                ],
                "params": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "expect_answers": [
                    "int",
                    "list[str]",
                    "str",
                    "Optional[List[str]]",
                    "None",
                    "Optional[\"CustomerReference\"]",
                    "utils.CWLObjectType",
                    "Optional[str]"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "LocalBroadcaster.get_subscribers": {
            "name": "get_subscribers",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/broadcast/redis.py": {
        "RedisBroadcaster.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broadcast_prefix": [
                    "str",
                    "bool",
                    "dict[str, int]",
                    "int",
                    "Dict[str, int]"
                ],
                "master": [
                    "int",
                    "float",
                    "bool"
                ],
                "slave": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RedisBroadcaster._get_channel": {
            "name": "_get_channel",
            "location": 38,
            "return": [
                "Callable",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "Union[dict, list]",
                "dict",
                "str",
                "raiden.utils.Address"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool"
                ]
            }
        },
        "RedisBroadcaster.subscribe": {
            "name": "subscribe",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "callback": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Set[str]",
                    "set[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RedisBroadcaster.unsubscribe": {
            "name": "unsubscribe",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "RedisBroadcaster.broadcast": {
            "name": "broadcast",
            "location": 64,
            "return": [
                "None",
                "bool",
                "str",
                "float",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "bool",
                    "float",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "params": [
                    "int",
                    "bool",
                    "float",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "expect_answers": [
                    "bool",
                    "str",
                    "float",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "timeout": [
                    "str",
                    "float",
                    "bool",
                    "None",
                    "int",
                    "Union[float, int]",
                    "Optional[bool]"
                ]
            }
        },
        "RedisBroadcaster._broadcast_with_answer": {
            "name": "_broadcast_with_answer",
            "location": 73,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "params": [
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "str",
                    "None",
                    "bool",
                    "Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "timeout": [
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "RedisBroadcaster._broadcast": {
            "name": "_broadcast",
            "location": 115,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "message": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "int",
                    "Union[float, str]",
                    "dict[str, tuple[]]",
                    "Dict[str, tuple]"
                ]
            }
        },
        "RedisBroadcaster.copy_local_subscriptions": {
            "name": "copy_local_subscriptions",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev_broadcaster": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "RedisBroadcaster.subscribe.wrapper": {
            "name": "wrapper",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "RedisBroadcaster._broadcast_with_answer.callback": {
            "name": "callback",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "Mapping[str, Any]",
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/broadcast/utils.py": {
        "add_host_info": {
            "name": "add_host_info",
            "location": 6,
            "return": [
                "dict[typing.Union[typing.Text,typing.Text], ]",
                "Dict[str, Tuple[Any, Any]]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/broadcast/__init__.py": {
        "init": {
            "name": "init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "None",
                    "Mapping[str, Any]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get": {
            "name": "_get",
            "location": 49,
            "return": [
                "str",
                "bool",
                "None",
                "int"
            ],
            "arguments": {
                "need_init": [
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "subscribe": {
            "name": "subscribe",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "callback": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "broadcast": {
            "name": "broadcast",
            "location": 75,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bytes]"
            ],
            "arguments": {
                "channel": [
                    "bool",
                    "float",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "None",
                    "int",
                    "typing.Any",
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "params": [
                    "bool",
                    "None",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Any",
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "expect_answers": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "str",
                    "Optional[int]",
                    "Optional[Any]"
                ]
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "channel": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "expect_answers": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "decorator.impl": {
            "name": "impl",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Union[Dict, List]",
                    "T"
                ]
            }
        },
        "decorator.impl.wrapper": {
            "name": "wrapper",
            "location": 104,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/debug/utils.py": {
        "get_size": {
            "name": "get_size",
            "location": 20,
            "return": [
                "int",
                "str",
                "Union[int, str]",
                "List[str]",
                "Sequence[T]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "dump_memory_maps": {
            "name": "dump_memory_maps",
            "location": 38,
            "return": [
                "list[]",
                "list[dict[typing.Text, typing.Union[str,set[str],set[],dict[str, str],tuple[typing.Union[str,typing.Any]]]]]",
                "Set[str]",
                "Dict[str, List[Callable]]",
                "Dict[str, str]",
                "str",
                "List[Dict[str, Any]]",
                "Set[int]"
            ],
            "arguments": {
                "pid": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/debug/_listeners.py": {
        "_dump_stacks_impl": {
            "name": "_dump_stacks_impl",
            "location": 16,
            "return": [
                "dict[typing.Text, dict[typing.Text, list[dict[typing.Text, ]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_dump_memory_impl": {
            "name": "_dump_memory_impl",
            "location": 31,
            "return": [
                "bool",
                "dict[typing.Text, list[]]",
                "Optional[Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "limit": [
                    "Dict[str, Any]"
                ],
                "analyze_type": [],
                "python_internals_map": [
                    "bool",
                    "Optional[AbstractSet[str]]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/debug/_views.py": {
        "_beautify_stacks": {
            "name": "_beautify_stacks",
            "location": 22,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "_dump_stacks": {
            "name": "_dump_stacks",
            "location": 38,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "int"
                ]
            }
        },
        "_dump_memory": {
            "name": "_dump_memory",
            "location": 45,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "dict"
                ]
            }
        },
        "_dump_memory_diff": {
            "name": "_dump_memory_diff",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_sleep": {
            "name": "_sleep",
            "location": 106,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_headers": {
            "name": "_headers",
            "location": 114,
            "return": [
                "str",
                "bool",
                "dict",
                "set"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_error": {
            "name": "_error",
            "location": 138,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_time": {
            "name": "_time",
            "location": 143,
            "return": [
                "datetime.datetime",
                "int",
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "_add_view": {
            "name": "_add_view",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "pyramid.config.Configurator",
                    "dict"
                ],
                "name": [
                    "str",
                    "pyramid.config.Configurator",
                    "dict"
                ],
                "path": [
                    "str",
                    "dict"
                ],
                "view": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_dump_memory_maps": {
            "name": "_dump_memory_maps",
            "location": 161,
            "return": [
                "str",
                "float",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "int"
                ]
            }
        },
        "_show_refs": {
            "name": "_show_refs",
            "location": 166,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Dict[str, Any]",
                    "dict",
                    "utils.config_generator.Configurations"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/debug/__init__.py": {
        "init": {
            "name": "init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "init_daemon": {
            "name": "init_daemon",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "None",
                    "Optional[Dict[str, int]]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[str, int]",
                    "dict[, ]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/request_tracking/_sql.py": {
        "_add_session_id": {
            "name": "_add_session_id",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "int"
                ],
                "_transaction": [
                    "pyramid.requesRequest"
                ],
                "_connection": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/request_tracking/__init__.py": {
        "_gen_request_id": {
            "name": "_gen_request_id",
            "location": 25,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "_patch_requests": {
            "name": "_patch_requests",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_patch_requests.send_wrapper": {
            "name": "send_wrapper",
            "location": 33,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "Union[bool, str]",
                    "bool",
                    "pyramid.requesRequest",
                    "bytes",
                    "int"
                ],
                "timeout": [
                    "Union[float, int]",
                    "Iterable[Callable]",
                    "Optional[\"Response\"]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/scripts/check_es.py": {
        "_ensure_slash": {
            "name": "_ensure_slash",
            "location": 19,
            "return": [
                "Optional[str]",
                "str",
                "None",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "_max_timestamp": {
            "name": "_max_timestamp",
            "location": 41,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "_check_roundtrip": {
            "name": "_check_roundtrip",
            "location": 60,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "deprecated": {
            "name": "deprecated",
            "location": 101,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/scripts/coverage_report.py": {
        "deprecated": {
            "name": "deprecated",
            "location": 13,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/scripts/genversion.py": {
        "_get_package_version": {
            "name": "_get_package_version",
            "location": 16,
            "return": [
                "str",
                "tuple[None]"
            ],
            "arguments": {
                "comp": [
                    "str"
                ]
            }
        },
        "_get_packages_version": {
            "name": "_get_packages_version",
            "location": 32,
            "return": [
                "dict[, ]",
                "str",
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "deprecated": {
            "name": "deprecated",
            "location": 47,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/scripts/stats_db.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 23,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "do_table": {
            "name": "do_table",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "sqlalchemy.orm.Session"
                ],
                "schema": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "sqlalchemy.orm.Session"
                ],
                "table": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "sqlalchemy.orm.Session"
                ],
                "reporter": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "_do_indexes": {
            "name": "_do_indexes",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": [
                    "str",
                    "abilian.core.sqlalchemy.SQLAlchemy"
                ],
                "schema": [
                    "str",
                    "float"
                ],
                "session": [
                    "sqlalchemy.orm.scoped_session",
                    "str",
                    "Callable",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "dict"
                ],
                "table": [
                    "str",
                    "float"
                ]
            }
        },
        "_do_table_size": {
            "name": "_do_table_size",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": [
                    "typing.Callable[, ]",
                    "Callable",
                    "sqlalchemy.orm.session.Session"
                ],
                "schema": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.session.Session"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.scoped_session"
                ],
                "table": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "_do_table_count": {
            "name": "_do_table_count",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": [
                    "Tuple[str, Any]",
                    "tuple[typing.Union[str,typing.Any]]"
                ],
                "schema": [],
                "session": [
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.Session"
                ],
                "table": []
            }
        },
        "do_extra": {
            "name": "do_extra",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "sqlalchemy.orm.query.Query",
                    "Dict[str, Any]"
                ],
                "extra": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "sqlalchemy.orm.scoped_session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.query.Query",
                    "Dict[str, Any]"
                ],
                "reporter": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.IO",
                    "sqlalchemy.orm.session.Session",
                    "dict[, ]",
                    "IO",
                    "dict"
                ]
            }
        },
        "_do_dtats_db": {
            "name": "_do_dtats_db",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Reporter.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Reporter.do_report": {
            "name": "do_report",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "list[str]",
                    "str",
                    "Optional[Exception]",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "List[str]"
                ],
                "kind": [
                    "str",
                    "List[str]"
                ],
                "tags": [
                    "str",
                    "None",
                    "List[str]",
                    "list",
                    "list[str]",
                    "dict",
                    "list[]",
                    "KT",
                    "dict[, ]"
                ]
            }
        },
        "Reporter.commit": {
            "name": "commit",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reporter.error": {
            "name": "error",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "bool",
                    "int"
                ],
                "error_": [
                    "bool",
                    "int"
                ]
            }
        },
        "Reporter.report_error": {
            "name": "report_error",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/scripts/test_print.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 14,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "deprecated": {
            "name": "deprecated",
            "location": 24,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app": {
            "name": "test_app",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "print_": [
                    "dict"
                ],
                "app": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/scripts/__init__.py": {},
    "c2cwsgiutils-master/c2cwsgiutils/sqlalchemylogger/handlers.py": {
        "SQLAlchemyHandler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_url": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "does_not_contain_expression": [
                    "typing.Text",
                    "bool",
                    "str"
                ],
                "contains_expression": [
                    "typing.Text",
                    "bool",
                    "str"
                ]
            }
        },
        "SQLAlchemyHandler._processor": {
            "name": "_processor",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyHandler._write_logs": {
            "name": "_write_logs",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logs": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "SQLAlchemyHandler.create_db": {
            "name": "create_db",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyHandler.emit": {
            "name": "emit",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/sqlalchemylogger/_filters.py": {
        "ContainsExpression.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ContainsExpression.filter": {
            "name": "filter",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "set",
                    "set[]",
                    "Pattern[str]",
                    "typing.Pattern"
                ]
            }
        },
        "DoesNotContainExpression.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DoesNotContainExpression.filter": {
            "name": "filter",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "set",
                    "set[]",
                    "Pattern[str]",
                    "typing.Pattern"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/sqlalchemylogger/_models.py": {
        "create_log_class": {
            "name": "create_log_class",
            "location": 11,
            "return": [
                "Log",
                "bool",
                "Union[type, Tuple[type, ...]]",
                "int",
                "Type"
            ],
            "arguments": {
                "tablename": [
                    "typing.Text",
                    "str",
                    "Union[str, Dict[str, str]]",
                    "List[Tuple[Any, Any]]",
                    "List[str]",
                    "T",
                    "bool"
                ],
                "tableargs": [
                    "typing.Text",
                    "str",
                    "Union[str, Dict[str, str]]",
                    "List[Tuple[Any, Any]]",
                    "List[str]",
                    "T",
                    "bool"
                ]
            }
        },
        "create_log_class.Log.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "None",
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "int",
                    "apistar.types.WSGIEnviron"
                ],
                "trace": [
                    "None",
                    "Dict[int, int]",
                    "Union[List[str], str]",
                    "str",
                    "Sequence['cirq.Qid']"
                ],
                "msg": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "create_log_class.Log.__unicode__": {
            "name": "__unicode__",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "create_log_class.Log.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/sqlalchemylogger/__init__.py": {},
    "c2cwsgiutils-master/c2cwsgiutils/sqlalchemylogger/examples/example.py": {},
    "c2cwsgiutils-master/c2cwsgiutils/sql_profiler/_impl.py": {
        "_sql_profiler_view": {
            "name": "_sql_profiler_view",
            "location": 54,
            "return": [
                "dict[typing.Text, int]",
                "bool",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_setup_profiler": {
            "name": "_setup_profiler",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "enable": [
                    "str"
                ]
            }
        },
        "_beautify_sql": {
            "name": "_beautify_sql",
            "location": 76,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "statement": [
                    "str"
                ]
            }
        },
        "_indent": {
            "name": "_indent",
            "location": 85,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "statement": [
                    "str",
                    "Optional[str]"
                ],
                "indent": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "_Repository.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Repository.profile": {
            "name": "profile",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ],
                "_cursor": [
                    "bool",
                    "str"
                ],
                "statement": [
                    "str",
                    "int",
                    "dict",
                    "Exception",
                    "BaseException"
                ],
                "parameters": [
                    "str",
                    "list",
                    "list[]"
                ],
                "_context": [
                    "bool",
                    "str"
                ],
                "_executemany": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/sql_profiler/__init__.py": {
        "init": {
            "name": "init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/stats_pyramid/_db_spy.py": {
        "_jump_string": {
            "name": "_jump_string",
            "location": 14,
            "return": [
                "int",
                "List[str]",
                "str",
                "pymysql.connections.Connection"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "List[\"Issue\"]",
                    "List[str]",
                    "int",
                    "List[bytes]"
                ],
                "pos": [
                    "int",
                    "str",
                    "bytes",
                    "List[\"Issue\"]",
                    "List[str]",
                    "List[bytes]"
                ]
            }
        },
        "_eat_parenthesis": {
            "name": "_eat_parenthesis",
            "location": 28,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "Union[Literal, str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_simplify_sql": {
            "name": "_simplify_sql",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_create_sqlalchemy_timer_cb": {
            "name": "_create_sqlalchemy_timer_cb",
            "location": 60,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "what": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator"
                ]
            }
        },
        "_before_cursor_execute": {
            "name": "_before_cursor_execute",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Type['BaseConfig']",
                    "typing.Type",
                    "Optional[Dict]",
                    "None"
                ],
                "_cursor": [
                    "bool",
                    "str"
                ],
                "statement": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Type['BaseConfig']",
                    "typing.Type",
                    "Optional[Dict]",
                    "None"
                ],
                "_parameters": [
                    "bool",
                    "str"
                ],
                "_context": [
                    "bool",
                    "str"
                ],
                "_executemany": [
                    "bool",
                    "str"
                ]
            }
        },
        "_before_commit": {
            "name": "_before_commit",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_create_sqlalchemy_timer_cb.after": {
            "name": "after",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/stats_pyramid/_pyramid_spy.py": {
        "_add_server_metric": {
            "name": "_add_server_metric",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "pyramid.requesRequest",
                    "str",
                    "Union[bool, str]",
                    "None",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "duration": [
                    "float",
                    "Optional[float]",
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "description": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "_create_finished_cb": {
            "name": "_create_finished_cb",
            "location": 30,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "kind": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator"
                ],
                "measure": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator"
                ]
            }
        },
        "_request_callback": {
            "name": "_request_callback",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        },
        "_before_rendered_callback": {
            "name": "_before_rendered_callback",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]",
                    "dict",
                    "str"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator"
                ]
            }
        },
        "_create_finished_cb.finished_cb": {
            "name": "finished_cb",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/stats_pyramid/_views.py": {
        "init": {
            "name": "init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "c2cwsgiutils-master/c2cwsgiutils/stats_pyramid/__init__.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "init_db_spy": {
            "name": "init_db_spy",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/test_broadcast.py": {
        "local_broadcaster": {
            "name": "local_broadcaster",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_local": {
            "name": "test_local",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "local_broadcaster": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_decorator": {
            "name": "test_decorator",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "local_broadcaster": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_fallback": {
            "name": "test_fallback",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_local.cb1": {
            "name": "cb1",
            "location": 19,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_local.cb2": {
            "name": "cb2",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator.cb1": {
            "name": "cb1",
            "location": 51,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_decorator.cb2": {
            "name": "cb2",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fallback.cb1": {
            "name": "cb1",
            "location": 69,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "c2cwsgiutils-master/tests/test_init.py": {
        "test_get_config_defaults_with_duplicates_in_env": {
            "name": "test_get_config_defaults_with_duplicates_in_env",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_config_defaults_with_per_cent": {
            "name": "test_get_config_defaults_with_per_cent",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/test_loader.py": {
        "test_loader_success": {
            "name": "test_loader_success",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/test_metrics.py": {
        "test_metrics": {
            "name": "test_metrics",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Provider.get_data": {
            "name": "get_data",
            "location": 5,
            "return": [
                "list[typing.Union[tuple[typing.Union[dict[typing.Text, typing.Text],int]],tuple[typing.Union[dict[typing.Text, typing.Text],float]]]]",
                "Dict[str, str]",
                "metrics.ObjectTree",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/tests/test_prometheus.py": {
        "test_pushgateway_group_publisher": {
            "name": "test_pushgateway_group_publisher",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pushgateway_group_publisher_with_labels": {
            "name": "test_pushgateway_group_publisher_with_labels",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/test_sqlalchemylogger.py": {
        "SqlAlchemyLoggerTests.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlAlchemyLoggerTests.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlAlchemyLoggerTests.test_sqlalchemylogger_handlers": {
            "name": "test_sqlalchemylogger_handlers",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "c2cwsgiutils-master/tests/test_stats.py": {
        "test_outcome_timer_context_ok": {
            "name": "test_outcome_timer_context_ok",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_outcome_timer_context_failure": {
            "name": "test_outcome_timer_context_failure",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_format_tags": {
            "name": "test_format_tags",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/test_stats_pyramid.py": {
        "test_simplify_sql": {
            "name": "test_simplify_sql",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/__init__.py": {},
    "c2cwsgiutils-master/tests/acceptance/test_utils.py": {
        "test_approx": {
            "name": "test_approx",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "c2cwsgiutils-master/tests/acceptance/__init__.py": {}
}
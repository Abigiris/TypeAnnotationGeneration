{
    "cabrita-main/cabrita/command.py": {
        "CabritaCommand.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cabrita_path": [
                    "str",
                    "bool"
                ],
                "compose_path": [
                    "str",
                    "bytes"
                ],
                "background_color": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "version": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "CabritaCommand.background_color": {
            "name": "background_color",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand.has_a_valid_config": {
            "name": "has_a_valid_config",
            "location": 58,
            "return": [
                "dict",
                "bool",
                "Mapping[str, str]",
                "neuromation.api.Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand.has_a_valid_compose": {
            "name": "has_a_valid_compose",
            "location": 66,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand.read_compose_files": {
            "name": "read_compose_files",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand._add_watchers": {
            "name": "_add_watchers",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand._add_services_in_boxes": {
            "name": "_add_services_in_boxes",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand.prepare_dashboard": {
            "name": "prepare_dashboard",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CabritaCommand.execute": {
            "name": "execute",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/run.py": {
        "run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[path.Path]"
                ],
                "color": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[path.Path]"
                ],
                "compose_path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[path.Path]"
                ]
            }
        },
        "initialize_folder": {
            "name": "initialize_folder",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "folder_list": [
                    "List[tuple[Union[str,str]]]",
                    "List",
                    "List[Tuple[str,str]]",
                    "List[str]",
                    "Sequence[dict]",
                    "Iterator[tuple]",
                    "bool"
                ]
            }
        }
    },
    "cabrita-main/cabrita/versions.py": {
        "versions": {
            "name": "versions",
            "location": 16,
            "return": [
                "Optional[list]"
            ],
            "arguments": {}
        },
        "check_version": {
            "name": "check_version",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "cabrita-main/cabrita/__init__.py": {},
    "cabrita-main/cabrita/__main__.py": {},
    "cabrita-main/cabrita/abc/base.py": {
        "ConfigTemplate.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTemplate.base_path": {
            "name": "base_path",
            "location": 65,
            "return": [
                "str",
                "tuple[typing.Union[str,str,str]]",
                "typing.BinaryIO"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ConfigTemplate.version": {
            "name": "version",
            "location": 69,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTemplate.is_valid": {
            "name": "is_valid",
            "location": 75,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTemplate.add_path": {
            "name": "add_path",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "base_path": [
                    "str"
                ]
            }
        },
        "ConfigTemplate.load_file_data": {
            "name": "load_file_data",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTemplate._convert_lists": {
            "name": "_convert_lists",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "str",
                    "int"
                ],
                "key": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "ConfigTemplate._upload_compose_list": {
            "name": "_upload_compose_list",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTemplate._load_data_from_override": {
            "name": "_load_data_from_override",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Dict",
                    "bool",
                    "Type[str]",
                    "Type[Tuple[str,str]]",
                    "Optional[str]"
                ],
                "target": [
                    "dict",
                    "bool",
                    "Type['Declared']"
                ],
                "key": [
                    "Dict[str, Any]",
                    "dict",
                    "Type['Declared']",
                    "Optional[str]"
                ]
            }
        },
        "InspectTemplate.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compose": [
                    "int",
                    "float",
                    "bool"
                ],
                "interval": [
                    "bool",
                    "float",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "InspectTemplate.inspect": {
            "name": "inspect",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "InspectTemplate.can_update": {
            "name": "can_update",
            "location": 250,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectTemplate.status": {
            "name": "status",
            "location": 255,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "cabrita-main/cabrita/abc/utils.py": {
        "run_command": {
            "name": "run_command",
            "location": 10,
            "return": [
                "bool",
                "str",
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ],
                "get_stdout": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 44,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path,str]",
                    "List[pathlib.Path]"
                ],
                "base_path": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "bool",
                    "Union[str,pathlib.Path]",
                    "cerulean.Path",
                    "pathlib.Path"
                ]
            }
        },
        "format_color": {
            "name": "format_color",
            "location": 78,
            "return": [
                "Callable[[KT], VT]",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "style": [
                    "str",
                    "int"
                ],
                "theme": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "persist_on_disk": {
            "name": "persist_on_disk",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "service": [
                    "str"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "get_path._convert_env_to_path": {
            "name": "_convert_env_to_path",
            "location": 51,
            "return": [
                "pathlib.Path",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "env_in_path": [
                    "pathlib.Path",
                    "str",
                    "ide.pathx.Path",
                    "pathman.path.Path",
                    "pathlib.PurePosixPath"
                ]
            }
        }
    },
    "cabrita-main/cabrita/abc/__init__.py": {},
    "cabrita-main/cabrita/components/box.py": {
        "update_box": {
            "name": "update_box",
            "location": 22,
            "return": [
                "float",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {
                "box": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Box.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "background_color": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "compose": [
                    "bool",
                    "None"
                ],
                "git": [
                    "bool",
                    "None"
                ],
                "docker": [
                    "bool",
                    "None"
                ]
            }
        },
        "Box.can_update": {
            "name": "can_update",
            "location": 73,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.widget": {
            "name": "widget",
            "location": 90,
            "return": [
                "None",
                "int",
                "str",
                "Set[str]",
                "Dict[str,list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Box.services": {
            "name": "services",
            "location": 102,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Box.interval": {
            "name": "interval",
            "location": 106,
            "return": [
                "float",
                "str",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.show_git": {
            "name": "show_git",
            "location": 116,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.show_revision": {
            "name": "show_revision",
            "location": 126,
            "return": [
                "bool",
                "str",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.port_view": {
            "name": "port_view",
            "location": 136,
            "return": [
                "PortView",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.port_detail": {
            "name": "port_detail",
            "location": 146,
            "return": [
                "PortDetail",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.categories": {
            "name": "categories",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.title": {
            "name": "title",
            "location": 167,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.size": {
            "name": "size",
            "location": 177,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.main": {
            "name": "main",
            "location": 187,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.includes": {
            "name": "includes",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.show_not_found": {
            "name": "show_not_found",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.background_color": {
            "name": "background_color",
            "location": 225,
            "return": [
                "list[int]",
                "str",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool",
                    "Iterable[object]",
                    "str"
                ]
            }
        },
        "Box.load_data": {
            "name": "load_data",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "bytes",
                    "List",
                    "str"
                ]
            }
        },
        "Box.add_service": {
            "name": "add_service",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "float",
                    "int"
                ]
            }
        },
        "Box._get_headers": {
            "name": "_get_headers",
            "location": 252,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box._append_ports_in_field": {
            "name": "_append_ports_in_field",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "Box.run": {
            "name": "run",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box._get_service_category_data": {
            "name": "_get_service_category_data",
            "location": 405,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str,dict[str,Any]]",
                "Dict",
                "None",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "bool",
                    "Type"
                ],
                "category": [
                    "str"
                ]
            }
        },
        "Box.format_revision": {
            "name": "format_revision",
            "location": 459,
            "return": [
                "Union[(List[list], _T0)]"
            ],
            "arguments": {
                "table_lines": [
                    "List",
                    "Set[str]",
                    "str"
                ]
            }
        }
    },
    "cabrita-main/cabrita/components/config.py": {
        "Config.ignore_services": {
            "name": "ignore_services",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.compose_files": {
            "name": "compose_files",
            "location": 40,
            "return": [
                "str",
                "os.stat_result"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.layout": {
            "name": "layout",
            "location": 51,
            "return": [
                "str",
                "Optional[int]",
                "logging.LogRecord",
                "Callable",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.boxes": {
            "name": "boxes",
            "location": 62,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.title": {
            "name": "title",
            "location": 73,
            "return": [
                "Text",
                "str",
                "Optional[int]",
                "cmk.utils.type_defs.UserId",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.background_color": {
            "name": "background_color",
            "location": 84,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.background_color_value": {
            "name": "background_color_value",
            "location": 96,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.watchers": {
            "name": "watchers",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.is_valid": {
            "name": "is_valid",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._check_for_compose_file": {
            "name": "_check_for_compose_file",
            "location": 131,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._check_v0": {
            "name": "_check_v0",
            "location": 162,
            "return": [
                "list",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "start_here": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Config._check_v1": {
            "name": "_check_v1",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_here": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Config._check_v2": {
            "name": "_check_v2",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_here": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Config.get_compose_path": {
            "name": "get_compose_path",
            "location": 401,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "compose_path": [
                    "str",
                    "Sequence[str]",
                    "npipes.utils.typeshed.pathlike"
                ],
                "base_path": [
                    "str",
                    "Sequence[str]",
                    "npipes.utils.typeshed.pathlike"
                ]
            }
        },
        "Config.generate_boxes": {
            "name": "generate_boxes",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,Dict]",
                    "List[str]",
                    "bytes",
                    "OrderedDict"
                ]
            }
        },
        "Compose.services": {
            "name": "services",
            "location": 463,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compose.volumes": {
            "name": "volumes",
            "location": 471,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compose.networks": {
            "name": "networks",
            "location": 479,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compose.is_valid": {
            "name": "is_valid",
            "location": 487,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compose.is_image": {
            "name": "is_image",
            "location": 497,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Compose.get_build_path": {
            "name": "get_build_path",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "Compose.get_from_service": {
            "name": "get_from_service",
            "location": 521,
            "return": [
                "str",
                "List[str]",
                "Union[str,None]",
                "object",
                "Dict[Any,bool]",
                "Optional[dict]",
                "Dict",
                "Optional[List[Any]]",
                "Dict[str,Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "bool",
                    "Tuple"
                ],
                "key": [
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "cmk.base.api.agent_based.type_defs.RuleSetName",
                    "None",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "Compose.get_ports_from_service": {
            "name": "get_ports_from_service",
            "location": 542,
            "return": [
                "int",
                "List[dict[str,Any]]",
                "Optional[float]",
                "Dict[str,Any]",
                "Dict",
                "List"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "bool"
                ]
            }
        },
        "Compose._check": {
            "name": "_check",
            "location": 556,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/components/dashboard.py": {
        "Dashboard.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Dashboard.all_boxes": {
            "name": "all_boxes",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dashboard._log_box": {
            "name": "_log_box",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "box": []
            }
        },
        "Dashboard.run": {
            "name": "run",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.add_box": {
            "name": "add_box",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "box": []
            }
        },
        "Dashboard._update_boxes": {
            "name": "_update_boxes",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard._get_layout": {
            "name": "_get_layout",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "term": []
            }
        }
    },
    "cabrita-main/cabrita/components/docker.py": {
        "DockerInspect.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compose": [],
                "interval": [],
                "port_view": [],
                "port_detail": [],
                "files_to_watch": [],
                "services_to_check_git": []
            }
        },
        "DockerInspect.inspect": {
            "name": "inspect",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "DockerInspect._get_service_ports": {
            "name": "_get_service_ports",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "DockerInspect._get_container_name": {
            "name": "_get_container_name",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [],
                "index": [
                    "int"
                ]
            }
        },
        "DockerInspect._get_inspect_data": {
            "name": "_get_inspect_data",
            "location": 210,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "DockerInspect._get_running_status": {
            "name": "_get_running_status",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "inspect_state": []
            }
        },
        "DockerInspect._get_style_and_theme_for_status": {
            "name": "_get_style_and_theme_for_status",
            "location": 238,
            "return": [
                "Tuple[(str, Optional[str])]"
            ],
            "arguments": {
                "status": [],
                "inspect_state": []
            }
        },
        "DockerInspect._define_status": {
            "name": "_define_status",
            "location": 258,
            "return": [
                "Tuple[(Any, str, Any)]"
            ],
            "arguments": {
                "self": [],
                "inspect_data": []
            }
        },
        "DockerInspect._need_build": {
            "name": "_need_build",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "service": [],
                "inspect_data": []
            }
        }
    },
    "cabrita-main/cabrita/components/git.py": {
        "GitInspect.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compose": [],
                "interval": [],
                "target_branch": []
            }
        },
        "GitInspect.branch_is_dirty": {
            "name": "branch_is_dirty",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "GitInspect.get_git_revision_from_path": {
            "name": "get_git_revision_from_path",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "show_branch": [
                    "bool"
                ]
            }
        },
        "GitInspect.get_git_revision": {
            "name": "get_git_revision",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "GitInspect.get_behind_state": {
            "name": "get_behind_state",
            "location": 108,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "GitInspect.inspect": {
            "name": "inspect",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "GitInspect._get_modifications_in_target_branch": {
            "name": "_get_modifications_in_target_branch",
            "location": 199,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "branch": []
            }
        },
        "GitInspect._get_modifications_in_branch": {
            "name": "_get_modifications_in_branch",
            "location": 217,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitInspect._get_active_branch": {
            "name": "_get_active_branch",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "GitInspect._get_abbreviate_name": {
            "name": "_get_abbreviate_name",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "full_name": []
            }
        },
        "GitInspect._get_commits": {
            "name": "_get_commits",
            "location": 258,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "direction": []
            }
        },
        "GitInspect._get_commits_from_target": {
            "name": "_get_commits_from_target",
            "location": 281,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "name": [],
                "direction": []
            }
        }
    },
    "cabrita-main/cabrita/components/watchers.py": {
        "Watch.interval": {
            "name": "interval",
            "location": 35,
            "return": [
                "int",
                "list[]",
                "tuple[typing.Union[float,float,float,typing.Literal]]",
                "list[dict[typing.Any, str]]",
                "None",
                "typing.ClassVar"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "bytes",
                    "Sequence[float]"
                ]
            }
        },
        "Watch._execute": {
            "name": "_execute",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Watch.run": {
            "name": "run",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerComposeWatch.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerComposeWatch._execute": {
            "name": "_execute",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatch.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatch._execute": {
            "name": "_execute",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatch.file": {
            "name": "file",
            "location": 177,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatch.external": {
            "name": "external",
            "location": 187,
            "return": [
                "bool",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatch.ping": {
            "name": "ping",
            "location": 197,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatch._execute_watch": {
            "name": "_execute_watch",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watch_type": [
                    "Type",
                    "Exception"
                ],
                "watch_name": [
                    "Type",
                    "Exception"
                ]
            }
        },
        "UserWatch._get_ping_result": {
            "name": "_get_ping_result",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watch_data": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "watch_name": [
                    "Dict[str,Any]",
                    "int",
                    "bytes",
                    "Callable",
                    "Dict[str,Dict[str,str]]",
                    "Dict",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "UserWatch._get_file_result": {
            "name": "_get_file_result",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watch_data": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "watch_name": [
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Dict[str,list[bytes]]",
                    "Dict[str,Any]",
                    "Dict[str,List[bytes]]",
                    "Iterable[str]"
                ]
            }
        },
        "SystemWatch._get_docker_folder_size": {
            "name": "_get_docker_folder_size",
            "location": 312,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "SystemWatch._execute": {
            "name": "_execute",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/components/__init__.py": {
        "BoxColor.available_colors": {
            "name": "available_colors",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "Type",
                    "int",
                    "complex",
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "cabrita-main/cabrita/tests/test_box.py": {
        "TestBox.return_docker_status": {
            "name": "return_docker_status",
            "location": 14,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "TestBox.return_revision_status": {
            "name": "return_revision_status",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "TestBox.return_git_status": {
            "name": "return_git_status",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "TestBox.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_can_update": {
            "name": "test_can_update",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_widget": {
            "name": "test_widget",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_interval": {
            "name": "test_interval",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_show_git": {
            "name": "test_show_git",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_show_revision": {
            "name": "test_show_revision",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_port_view": {
            "name": "test_port_view",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_port_detail": {
            "name": "test_port_detail",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_categories": {
            "name": "test_categories",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_title": {
            "name": "test_title",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_size": {
            "name": "test_size",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_main": {
            "name": "test_main",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_includes": {
            "name": "test_includes",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_background_color": {
            "name": "test_background_color",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_load_data": {
            "name": "test_load_data",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_add_service": {
            "name": "test_add_service",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test__get_headers": {
            "name": "test__get_headers",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test__append_ports_in_field": {
            "name": "test__append_ports_in_field",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_run": {
            "name": "test_run",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test__get_service_category_data": {
            "name": "test__get_service_category_data",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_format_revision": {
            "name": "test_format_revision",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBox.test_update_box": {
            "name": "test_update_box",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_compose.py": {
        "TestCompose.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose._generate_compose": {
            "name": "_generate_compose",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_services": {
            "name": "test_services",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_volumes": {
            "name": "test_volumes",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_networks": {
            "name": "test_networks",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_compose_list_is_invalid": {
            "name": "test_compose_list_is_invalid",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_is_image": {
            "name": "test_is_image",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_get_build_path": {
            "name": "test_get_build_path",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_get_from_service": {
            "name": "test_get_from_service",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_configTemplate.py": {
        "TestConfigTemplate.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigTemplate._generate_config": {
            "name": "_generate_config",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigTemplate.test_load_not_found_file_data": {
            "name": "test_load_not_found_file_data",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigTemplate.test_load_bad_file_data": {
            "name": "test_load_bad_file_data",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_config_v0.py": {
        "TestConfig.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig._generate_config": {
            "name": "_generate_config",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ignore_services": {
            "name": "test_ignore_services",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_compose_files": {
            "name": "test_compose_files",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_layout": {
            "name": "test_layout",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_title": {
            "name": "test_title",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_background_color": {
            "name": "test_background_color",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_background_color_value": {
            "name": "test_background_color_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_compose_path": {
            "name": "test_get_compose_path",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_generate_boxes": {
            "name": "test_generate_boxes",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_config_v1.py": {
        "TestConfig.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig._generate_config": {
            "name": "_generate_config",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ignore_services": {
            "name": "test_ignore_services",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_compose_files": {
            "name": "test_compose_files",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_layout": {
            "name": "test_layout",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_boxes": {
            "name": "test_boxes",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_title": {
            "name": "test_title",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_background_color": {
            "name": "test_background_color",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_background_color_value": {
            "name": "test_background_color_value",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_watchers": {
            "name": "test_watchers",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_compose_path": {
            "name": "test_get_compose_path",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_generate_boxes": {
            "name": "test_generate_boxes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_config_v2.py": {
        "TestConfig.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig._generate_config": {
            "name": "_generate_config",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ignore_services": {
            "name": "test_ignore_services",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_compose_files": {
            "name": "test_compose_files",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_layout": {
            "name": "test_layout",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_boxes": {
            "name": "test_boxes",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_title": {
            "name": "test_title",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_background_color": {
            "name": "test_background_color",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_background_color_value": {
            "name": "test_background_color_value",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_watchers": {
            "name": "test_watchers",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_compose_path": {
            "name": "test_get_compose_path",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_generate_boxes": {
            "name": "test_generate_boxes",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_bad_config": {
            "name": "test_bad_config",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_dashboard.py": {
        "TestDashboard.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard._create_box": {
            "name": "_create_box",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard.test_all_boxes": {
            "name": "test_all_boxes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard.test__log_box": {
            "name": "test__log_box",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard.test_run": {
            "name": "test_run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard.test_add_box": {
            "name": "test_add_box",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard.test__update_boxes": {
            "name": "test__update_boxes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDashboard.test__get_layout": {
            "name": "test__get_layout",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_terminal": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "cabrita-main/cabrita/tests/test_dockerComposeWatch.py": {
        "TestDockerComposeWatch.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerComposeWatch.test__execute": {
            "name": "test__execute",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_dockerInspect.py": {
        "return_run_data": {
            "name": "return_run_data",
            "location": 12,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {}
        },
        "TestDockerInspect.setUpClass": {
            "name": "setUpClass",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestDockerInspect.test_inspect": {
            "name": "test_inspect",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerInspect.test__get_service_ports": {
            "name": "test__get_service_ports",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerInspect.test__get_container_name": {
            "name": "test__get_container_name",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerInspect.test__get_inspect_data": {
            "name": "test__get_inspect_data",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerInspect.test__define_status": {
            "name": "test__define_status",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerInspect.test__need_build_using_files": {
            "name": "test__need_build_using_files",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_mock": [],
                "container_mock": []
            }
        },
        "TestDockerInspect.test__need_build_using_git": {
            "name": "test__need_build_using_git",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_mock": [],
                "container_mock": []
            }
        },
        "TestDockerInspect.test_inspect._return_inspect_data": {
            "name": "_return_inspect_data",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cabrita-main/cabrita/tests/test_gitInspect.py": {
        "return_git_result": {
            "name": "return_git_result",
            "location": 8,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {}
        },
        "TestGitInspect.setUpClass": {
            "name": "setUpClass",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestGitInspect.test_get_git_revision_from_path": {
            "name": "test_get_git_revision_from_path",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test_get_git_revision": {
            "name": "test_get_git_revision",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test_get_behind_state": {
            "name": "test_get_behind_state",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test_inspect": {
            "name": "test_inspect",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test__get_modifications_in_target_branch": {
            "name": "test__get_modifications_in_target_branch",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test__get_modifications_in_branch": {
            "name": "test__get_modifications_in_branch",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test__get_active_branch": {
            "name": "test__get_active_branch",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test__get_abbreviate_name": {
            "name": "test__get_abbreviate_name",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test__get_commits": {
            "name": "test__get_commits",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitInspect.test__get_commits_from_target": {
            "name": "test__get_commits_from_target",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_run.py": {
        "TestRun.test_run": {
            "name": "test_run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_exception_during_run": {
            "name": "test_exception_during_run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_systemWatch.py": {
        "TestSystemWatch.setUpClass": {
            "name": "setUpClass",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Dict"
                ]
            }
        },
        "TestSystemWatch.test__get_docker_folder_size": {
            "name": "test__get_docker_folder_size",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSystemWatch.test_run": {
            "name": "test_run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSystemWatch.test__execute": {
            "name": "test__execute",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_userWatch.py": {
        "TestUserWatch.setUpClass": {
            "name": "setUpClass",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestUserWatch.test__execute": {
            "name": "test__execute",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserWatch.test_file": {
            "name": "test_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserWatch.test_external": {
            "name": "test_external",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserWatch.test_ping": {
            "name": "test_ping",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserWatch.test__get_ping_result": {
            "name": "test__get_ping_result",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserWatch.test__get_file_result_on_missing_file": {
            "name": "test__get_file_result_on_missing_file",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserWatch.test__get_file_result": {
            "name": "test__get_file_result",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_utils.py": {
        "TestUtils.test_run_command": {
            "name": "test_run_command",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_real_run_command": {
            "name": "test_real_run_command",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_get_path": {
            "name": "test_get_path",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_format_color": {
            "name": "test_format_color",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_versions.py": {
        "TestVersions.test_versions": {
            "name": "test_versions",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersions.test_check_version": {
            "name": "test_check_version",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersions.test_check_version_with_update": {
            "name": "test_check_version_with_update",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/test_watch.py": {
        "TestWatch.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatch.test_interval": {
            "name": "test_interval",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatch.test__execute": {
            "name": "test__execute",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatch.test_run": {
            "name": "test_run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cabrita-main/cabrita/tests/__init__.py": {},
    "cabrita-main/docs/conf.py": {}
}
{
    "cachepot-master/setup.py": {},
    "cachepot-master/cachepot/expire.py": {
        "to_timedelta": {
            "name": "to_timedelta",
            "location": 7,
            "return": [
                "Union[(datetime.timedelta, _T0)]"
            ],
            "arguments": {
                "expire_seconds": [
                    "int",
                    "str",
                    "Callable[T,bool]",
                    "Callable[[T],bool]",
                    "Callable[[int],bool]"
                ]
            }
        }
    },
    "cachepot-master/cachepot/__init__.py": {},
    "cachepot-master/cachepot/backend/filesystem.py": {
        "FileSystemCacheBackend.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "FileSystemCacheBackend.__get_real_path": {
            "name": "__get_real_path",
            "location": 23,
            "return": [
                "pathlib.Path",
                "str",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "FileSystemCacheBackend.save": {
            "name": "save",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "bytes"
                ],
                "value": [
                    "bytes",
                    "str"
                ],
                "expire_seconds": [
                    "Optional[int]",
                    "int",
                    "datetime.timedelta",
                    "List[float]",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "FileSystemCacheBackend.load": {
            "name": "load",
            "location": 38,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "FileSystemCacheBackend.delete": {
            "name": "delete",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "cachepot-master/cachepot/backend/redis.py": {
        "RedisCacheBackend.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_connection": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RedisCacheBackend.save": {
            "name": "save",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Iterable[str]",
                    "Optional[Callable[[str],Any]]",
                    "Callable[str,Any]",
                    "MutableMapping[Any,Any]",
                    "None",
                    "Dict",
                    "MutableMapping"
                ],
                "value": [
                    "bytes",
                    "str",
                    "Dict",
                    "Iterable[str]",
                    "Callable[str,Any]",
                    "Optional[Callable[[str],Any]]",
                    "None"
                ]
            }
        },
        "RedisCacheBackend.load": {
            "name": "load",
            "location": 25,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "RedisCacheBackend.delete": {
            "name": "delete",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Tuple"
                ]
            }
        }
    },
    "cachepot-master/cachepot/backend/sqlite.py": {
        "SQLiteCacheBackend.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "Callable",
                    "float",
                    "None",
                    "int",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "SQLiteCacheBackend.save": {
            "name": "save",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Union[str,int]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Union[str,int]",
                    "None"
                ]
            }
        },
        "SQLiteCacheBackend.load": {
            "name": "load",
            "location": 47,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SQLiteCacheBackend.delete": {
            "name": "delete",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Tuple"
                ]
            }
        }
    },
    "cachepot-master/cachepot/backend/__init__.py": {
        "CacheBackendProtocol.save": {
            "name": "save",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Optional[int]",
                    "int",
                    "T",
                    "None"
                ],
                "value": [
                    "bytes",
                    "str",
                    "Optional[int]",
                    "int",
                    "T",
                    "None"
                ]
            }
        },
        "CacheBackendProtocol.load": {
            "name": "load",
            "location": 17,
            "return": [
                "Optional[bytes]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "CacheBackendProtocol.delete": {
            "name": "delete",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "cachepot-master/cachepot/serializer/json.py": {
        "JSONSerializer.serialize": {
            "name": "serialize",
            "location": 17,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "JSONSerializer.deserialize": {
            "name": "deserialize",
            "location": 22,
            "return": [
                "Union[(float, int, list, str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "serialized_data": [
                    "bytes",
                    "Optional[int]",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "cachepot-master/cachepot/serializer/pickle.py": {
        "PickleSerializer.serialize": {
            "name": "serialize",
            "location": 9,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "str",
                    "T",
                    "List",
                    "Union[Dict,List]"
                ]
            }
        },
        "PickleSerializer.deserialize": {
            "name": "deserialize",
            "location": 12,
            "return": [
                "Optional[float]",
                "str",
                "IO[bytes]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "serialized_data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "cachepot-master/cachepot/serializer/str.py": {
        "StringSerializer.serialize": {
            "name": "serialize",
            "location": 6,
            "return": [
                "bytes",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[PlotInfo]"
                ]
            }
        },
        "StringSerializer.deserialize": {
            "name": "deserialize",
            "location": 9,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "serialized_data": [
                    "bytes",
                    "Dict",
                    "str",
                    "Type",
                    "MutableMapping"
                ]
            }
        }
    },
    "cachepot-master/cachepot/serializer/__init__.py": {
        "SerializerProtocol.serialize": {
            "name": "serialize",
            "location": 9,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SerializerProtocol.deserialize": {
            "name": "deserialize",
            "location": 12,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_data": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "cachepot-master/cachepot/store/__init__.py": {
        "CacheStoreProtocol.get": {
            "name": "get",
            "location": 14,
            "return": [
                "typing.Optional[S]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "CacheStoreProtocol.put": {
            "name": "put",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "slice"
                ],
                "value": [
                    "int",
                    "str",
                    "slice"
                ]
            }
        },
        "CacheStoreProtocol.proxy": {
            "name": "proxy",
            "location": 21,
            "return": [
                "typing.Callable[..., S]"
            ],
            "arguments": {
                "self": [],
                "original_function": [
                    "Callable"
                ]
            }
        },
        "CacheStoreProtocol.remove": {
            "name": "remove",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "CacheStore.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "int"
                ],
                "backend": [
                    "str",
                    "int"
                ],
                "key_serializer": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "Union[str, List[str]]",
                    "List[Tuple[str, str]]"
                ],
                "value_serializer": [
                    "dict",
                    "type",
                    "Callable",
                    "bool"
                ],
                "default_expire_seconds": [
                    "str",
                    "int"
                ]
            }
        },
        "CacheStore.__get_real_key": {
            "name": "__get_real_key",
            "location": 51,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Union[bytes, bytearray]",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[List[str]]",
                    "Optional[Callable]"
                ]
            }
        },
        "CacheStore.get": {
            "name": "get",
            "location": 55,
            "return": [
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "CacheStore.put": {
            "name": "put",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "set"
                ]
            }
        },
        "CacheStore.proxy": {
            "name": "proxy",
            "location": 72,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "original_function": [
                    "Callable"
                ]
            }
        },
        "CacheStore.remove": {
            "name": "remove",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CacheStore.proxy._proxy": {
            "name": "_proxy",
            "location": 76,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]"
            ],
            "arguments": {}
        }
    },
    "cachepot-master/example/__init__.py": {
        "example_usage": {
            "name": "example_usage",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SimpleFileSystemCacheStore.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "FileSystemJSONCacheStore.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        }
    },
    "cachepot-master/tests/test_expire.py": {
        "TestExpireSeconds.test_to_timedelta": {
            "name": "test_to_timedelta",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/test_store.py": {
        "TestCacheStore.test_basis": {
            "name": "test_basis",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/__init__.py": {},
    "cachepot-master/tests/backend/test_filesystem.py": {
        "TestFileSystemCacheBackend.test_various_pathlike": {
            "name": "test_various_pathlike",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileSystemCacheBackend.test_expire": {
            "name": "test_expire",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/backend/test_redis.py": {
        "TestRedisCacheBackend.test_various_connection_like": {
            "name": "test_various_connection_like",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisCacheBackend.test_expire": {
            "name": "test_expire",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/backend/test_sqlite.py": {
        "TestSQLiteCacheBackend.test_various_connection_like": {
            "name": "test_various_connection_like",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLiteCacheBackend.test_expire": {
            "name": "test_expire",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/backend/__init__.py": {},
    "cachepot-master/tests/serializer/test_json.py": {
        "TestJSONSerializer.test_json_serializer": {
            "name": "test_json_serializer",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/serializer/test_pickle.py": {
        "TestPickleSerializer.test_pickle_serializer": {
            "name": "test_pickle_serializer",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/serializer/test_str.py": {
        "TestStringSerializer.test_str_serializer": {
            "name": "test_str_serializer",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cachepot-master/tests/serializer/__init__.py": {}
}
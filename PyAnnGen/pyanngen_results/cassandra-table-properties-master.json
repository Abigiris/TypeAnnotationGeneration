{
    "cassandra-table-properties-master/setup.py": {},
    "cassandra-table-properties-master/table-properties.py": {},
    "cassandra-table-properties-master/src/cli.py": {
        "main": {
            "name": "main",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TablePropertiesCli.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TablePropertiesCli.get_arg_parser": {
            "name": "get_arg_parser",
            "location": 26,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "TablePropertiesCli.execute": {
            "name": "execute",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "cassandra-table-properties-master/src/db.py": {
        "ConnectionParams.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "lbp": [
                    "str",
                    "None",
                    "bool",
                    "Dict[int,str]",
                    "float"
                ],
                "username": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "password": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "ssl_required": [
                    "bool",
                    "str"
                ],
                "client_cert_filename": [
                    "str",
                    "None",
                    "int",
                    "Optional[List[str]]",
                    "Set[str]",
                    "List[str]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "client_key_filename": [
                    "str",
                    "float",
                    "None",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "ConnectionParams.host": {
            "name": "host",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ConnectionParams.port": {
            "name": "port",
            "location": 84,
            "return": [
                "str",
                "int",
                "list[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ConnectionParams.load_balancing_policy": {
            "name": "load_balancing_policy",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bytes",
                    "Iterable[Any]",
                    "Set[str]"
                ]
            }
        },
        "ConnectionParams.username": {
            "name": "username",
            "location": 104,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "ConnectionParams.password": {
            "name": "password",
            "location": 115,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "ConnectionParams.is_ssl_required": {
            "name": "is_ssl_required",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "ConnectionParams.client_cert_file": {
            "name": "client_cert_file",
            "location": 133,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.set_client_cert_file": {
            "name": "set_client_cert_file",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ConnectionParams.client_key_file": {
            "name": "client_key_file",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.set_client_key_file": {
            "name": "set_client_key_file",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ConnectionParams.ssl_context": {
            "name": "ssl_context",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.auth_provider": {
            "name": "auth_provider",
            "location": 160,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.update_security_context": {
            "name": "update_security_context",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.update_authentication_provider": {
            "name": "update_authentication_provider",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.load_from_rcfile": {
            "name": "load_from_rcfile",
            "location": 185,
            "return": [
                "ConnectionParams"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "Db.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_params": [
                    "str",
                    "None",
                    "bool",
                    "IO",
                    "int",
                    "os.DirEntry"
                ]
            }
        },
        "Db.convert_value": {
            "name": "convert_value",
            "location": 240,
            "return": [
                "Union[(float, int, _T0)]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Optional[Pattern[str]]"
                ]
            }
        },
        "Db.convert_mapped_props": {
            "name": "convert_mapped_props",
            "location": 267,
            "return": [
                "dict"
            ],
            "arguments": {
                "subconfig": [
                    "defaultdict",
                    "Sequence[int]"
                ]
            }
        },
        "Db.exec_query": {
            "name": "exec_query",
            "location": 283,
            "return": [
                "List",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "query_stmt": [
                    "str",
                    "int"
                ]
            }
        },
        "Db.check_connection": {
            "name": "check_connection",
            "location": 317,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_keyspace_configs": {
            "name": "get_keyspace_configs",
            "location": 325,
            "return": [
                "Dict[(str, List[dict])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_table_configs": {
            "name": "get_table_configs",
            "location": 353,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "keyspace_name": [
                    "str"
                ],
                "drop_ids": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Db.get_current_config": {
            "name": "get_current_config",
            "location": 386,
            "return": [
                "Optional[Dict[(str, List[dict])]]"
            ],
            "arguments": {
                "self": [],
                "drop_ids": [
                    "bool",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "cassandra-table-properties-master/src/generator.py": {
        "do_class_names_match": {
            "name": "do_class_names_match",
            "location": 9,
            "return": [
                "bool",
                "str",
                "Mapping[str,Any]",
                "Dict",
                "Tuple[str]"
            ],
            "arguments": {
                "src_class": [
                    "str",
                    "Callable[[str],str]"
                ],
                "dst_class": [
                    "bytes",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "compare_values": {
            "name": "compare_values",
            "location": 25,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "src": [
                    "Dict",
                    "Type[Declared]",
                    "Type",
                    "str",
                    "T"
                ],
                "dst": [
                    "Dict",
                    "Type[Declared]"
                ]
            }
        },
        "generate_alter_keyspace_statement": {
            "name": "generate_alter_keyspace_statement",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "keyspace_name": [
                    "str"
                ],
                "current_keyspace": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "desired_keyspace": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "generate_alter_table_statement": {
            "name": "generate_alter_table_statement",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "keyspace_name": [
                    "str",
                    "List[str]"
                ],
                "current_tables": [
                    "Dict",
                    "str",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]"
                ],
                "desired_tables": [
                    "Dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "generate_alter_statements": {
            "name": "generate_alter_statements",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "current_config": [
                    "Dict",
                    "int",
                    "str"
                ],
                "desired_config": [
                    "Dict",
                    "str",
                    "Optional[List[Any]]",
                    "Mapping[str,str]"
                ]
            }
        },
        "generate_alter_table_statement.format_value": {
            "name": "format_value",
            "location": 106,
            "return": [
                "Dict",
                "bytes",
                "Text",
                "T"
            ],
            "arguments": {
                "val": [
                    "Any",
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "cassandra-table-properties-master/src/utils.py": {
        "get_log_level": {
            "name": "get_log_level",
            "location": 12,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "level": [
                    "str",
                    "None",
                    "Optional[str]",
                    "logging.Logger"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file": [
                    "str",
                    "bool",
                    "None"
                ],
                "log_level": [
                    "str",
                    "None"
                ]
            }
        },
        "find_by_value": {
            "name": "find_by_value",
            "location": 70,
            "return": [
                "None",
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "int",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "dict_list": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,int]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "key": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,int]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "value": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,int]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "default_value": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ]
            }
        }
    },
    "cassandra-table-properties-master/src/__init__.py": {},
    "cassandra-table-properties-master/tableproperties/cli.py": {
        "main": {
            "name": "main",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TablePropertiesCli.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TablePropertiesCli.get_arg_parser": {
            "name": "get_arg_parser",
            "location": 22,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "TablePropertiesCli.execute": {
            "name": "execute",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/db.py": {
        "ConnectionParams.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "str",
                    "float"
                ],
                "lbp": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "username": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "password": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "ssl_required": [
                    "bool",
                    "str"
                ],
                "client_cert_filename": [
                    "str",
                    "None",
                    "int",
                    "Optional[List[str]]",
                    "Set[str]",
                    "List[str]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "client_key_filename": [
                    "str",
                    "float",
                    "None",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "ConnectionParams.host": {
            "name": "host",
            "location": 73,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ConnectionParams.port": {
            "name": "port",
            "location": 83,
            "return": [
                "None",
                "str",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ConnectionParams.load_balancing_policy": {
            "name": "load_balancing_policy",
            "location": 94,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bytes",
                    "Iterable[Any]",
                    "Set[str]"
                ]
            }
        },
        "ConnectionParams.username": {
            "name": "username",
            "location": 104,
            "return": [
                "None",
                "int",
                "str",
                "Set[str]",
                "Dict[str,list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "ConnectionParams.password": {
            "name": "password",
            "location": 115,
            "return": [
                "None",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "ConnectionParams.is_ssl_required": {
            "name": "is_ssl_required",
            "location": 127,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "ConnectionParams.client_cert_file": {
            "name": "client_cert_file",
            "location": 138,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "ConnectionParams.client_key_file": {
            "name": "client_key_file",
            "location": 149,
            "return": [
                "None",
                "str",
                "Dict[str,str]",
                "bytes",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ConnectionParams.ssl_context": {
            "name": "ssl_context",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.ssl_options": {
            "name": "ssl_options",
            "location": 160,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.auth_provider": {
            "name": "auth_provider",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams._update_security_context": {
            "name": "_update_security_context",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams._update_authentication_provider": {
            "name": "_update_authentication_provider",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionParams.load_from_rcfile": {
            "name": "load_from_rcfile",
            "location": 191,
            "return": [
                "ConnectionParams"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "AbstractDb.check_connection": {
            "name": "check_connection",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDb.get_current_config": {
            "name": "get_current_config",
            "location": 232,
            "return": [
                "Optional[Dict[Any,Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_ids": [
                    "bool",
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Db.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_params": [
                    "str",
                    "None",
                    "bool",
                    "IO",
                    "int",
                    "os.DirEntry"
                ]
            }
        },
        "Db.convert_value": {
            "name": "convert_value",
            "location": 258,
            "return": [
                "Union[(float, int, _T0)]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Optional[Pattern[str]]"
                ]
            }
        },
        "Db.convert_mapped_props": {
            "name": "convert_mapped_props",
            "location": 285,
            "return": [
                "dict"
            ],
            "arguments": {
                "subconfig": [
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,float]",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None",
                    "List[Tuple[Any,...]]",
                    "List[tuple[Union[Any,...]]]"
                ]
            }
        },
        "Db.exec_query": {
            "name": "exec_query",
            "location": 297,
            "return": [
                "List",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "query_stmt": [
                    "str",
                    "int"
                ]
            }
        },
        "Db.check_connection": {
            "name": "check_connection",
            "location": 312,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_keyspace_configs": {
            "name": "get_keyspace_configs",
            "location": 320,
            "return": [
                "Dict[(str, List[dict])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.get_table_configs": {
            "name": "get_table_configs",
            "location": 348,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "keyspace_name": [
                    "str"
                ],
                "drop_ids": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Db.get_current_config": {
            "name": "get_current_config",
            "location": 382,
            "return": [
                "Optional[Dict[(str, List[dict])]]"
            ],
            "arguments": {
                "self": [],
                "drop_ids": [
                    "bool",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/generator.py": {
        "do_class_names_match": {
            "name": "do_class_names_match",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Mapping[str,Any]",
                "Dict",
                "Tuple[str]"
            ],
            "arguments": {
                "src_class": [
                    "str",
                    "Callable[[str],str]"
                ],
                "dst_class": [
                    "bytes",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "compare_values": {
            "name": "compare_values",
            "location": 26,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "src": [
                    "Dict",
                    "Dict[str,dict]",
                    "int",
                    "Mapping[str,Any]",
                    "Callable[...,T]"
                ],
                "dst": [
                    "Dict[str,str]",
                    "Dict",
                    "Union[Callable[[Dict],Hashable],str]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "generate_alter_keyspace_statement": {
            "name": "generate_alter_keyspace_statement",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "keyspace_name": [
                    "str"
                ],
                "current_keyspace": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "desired_keyspace": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "generate_alter_table_statement": {
            "name": "generate_alter_table_statement",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "keyspace_name": [
                    "str",
                    "List[str]"
                ],
                "current_tables": [
                    "Dict",
                    "str",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]"
                ],
                "desired_tables": [
                    "Dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "generate_alter_statements": {
            "name": "generate_alter_statements",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "current_config": [
                    "Dict",
                    "int",
                    "str"
                ],
                "desired_config": [
                    "Dict",
                    "str",
                    "Optional[List[Any]]",
                    "Mapping[str,str]"
                ]
            }
        },
        "generate_alter_table_statement.format_value": {
            "name": "format_value",
            "location": 107,
            "return": [
                "Dict",
                "bytes",
                "Text",
                "T"
            ],
            "arguments": {
                "val": [
                    "Any",
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/utils.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file": [
                    "str",
                    "bool",
                    "None"
                ],
                "log_level": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "List[Exception]"
                ]
            }
        },
        "find_by_value": {
            "name": "find_by_value",
            "location": 31,
            "return": [
                "None",
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "int",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "dict_list": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,int]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "key": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,int]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "value": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,int]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "default_value": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ]
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/__init__.py": {},
    "cassandra-table-properties-master/tableproperties/tests/conftest.py": {
        "default_database": {
            "name": "default_database",
            "location": 38,
            "return": [
                "MockDb",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "MockDb.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_params": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool",
                    "str"
                ]
            }
        },
        "MockDb.check_connection": {
            "name": "check_connection",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDb.get_current_config": {
            "name": "get_current_config",
            "location": 23,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "drop_ids": [
                    "bool",
                    "str",
                    "List",
                    "int",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/tests/__init__.py": {},
    "cassandra-table-properties-master/tableproperties/tests/unit/test_cli.py": {
        "TestTablePropertiesCli.test_invoke_no_args_usage": {
            "name": "test_invoke_no_args_usage",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "Mapping[str, Any]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_print_version": {
            "name": "test_invoke_print_version",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "tests.basilisp.helpers.CompileFn",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_dump_config": {
            "name": "test_invoke_dump_config",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "tests.basilisp.helpers.CompileFn",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_load_config": {
            "name": "test_invoke_load_config",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "Mapping[str, Any]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_load_rc": {
            "name": "test_invoke_load_rc",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_load_rc_nonexisting": {
            "name": "test_invoke_load_rc_nonexisting",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_argparser": {
            "name": "test_argparser",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/tests/unit/test_db.py": {
        "TestDb.test_default_database": {
            "name": "test_default_database",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "int",
                    "List[str]",
                    "None",
                    "bool",
                    "Optional[object]",
                    "float",
                    "Type",
                    "Optional[float]",
                    "str",
                    "Optional[Type[Exception]]",
                    "Optional[str]"
                ]
            }
        },
        "TestDb.test_convert_value": {
            "name": "test_convert_value",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDb.test_bad_host": {
            "name": "test_bad_host",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_defaults": {
            "name": "test_defaults",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_change_defaults_using_setters": {
            "name": "test_change_defaults_using_setters",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_change_load_balancing_policy": {
            "name": "test_change_load_balancing_policy",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_username_password_update": {
            "name": "test_username_password_update",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_security_context": {
            "name": "test_security_context",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_load_rc": {
            "name": "test_load_rc",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_load_nonexisting_rc": {
            "name": "test_load_nonexisting_rc",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/tests/unit/test_generator.py": {
        "load_yaml": {
            "name": "load_yaml",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "compare_statments": {
            "name": "compare_statments",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestGenerator.test_excalibur_increase_replicas": {
            "name": "test_excalibur_increase_replicas",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestGenerator.test_excalibur_unchanged": {
            "name": "test_excalibur_unchanged",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestGenerator.test_excalibur_change_table_fields": {
            "name": "test_excalibur_change_table_fields",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestGenerator.test_class_name_comparision": {
            "name": "test_class_name_comparision",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tableproperties/tests/unit/test_utils.py": {
        "get_temp_filename": {
            "name": "get_temp_filename",
            "location": 7,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "float"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "TestFindByValue.test_simple_list": {
            "name": "test_simple_list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindByValue.test_nonnested_dict_list": {
            "name": "test_nonnested_dict_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tests/conftest.py": {
        "default_database": {
            "name": "default_database",
            "location": 42,
            "return": [
                "bool",
                "Db",
                "MockDb"
            ],
            "arguments": {}
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockDb.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_params": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool",
                    "str"
                ]
            }
        },
        "MockDb.check_connection": {
            "name": "check_connection",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDb.get_current_config": {
            "name": "get_current_config",
            "location": 27,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "drop_ids": [
                    "bool",
                    "str",
                    "List",
                    "int",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cassandra-table-properties-master/tests/test_cli.py": {
        "TestTablePropertiesCli.test_invoke_no_args_usage": {
            "name": "test_invoke_no_args_usage",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_print_version": {
            "name": "test_invoke_print_version",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_dump_config": {
            "name": "test_invoke_dump_config",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_load_config": {
            "name": "test_invoke_load_config",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_load_rc": {
            "name": "test_invoke_load_rc",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_invoke_load_rc_nonexisting": {
            "name": "test_invoke_load_rc_nonexisting",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestTablePropertiesCli.test_argparser": {
            "name": "test_argparser",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tests/test_db.py": {
        "TestDb.test_default_database": {
            "name": "test_default_database",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDb.test_convert_value": {
            "name": "test_convert_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDb.test_bad_host": {
            "name": "test_bad_host",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_defaults": {
            "name": "test_defaults",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_change_defaults_using_setters": {
            "name": "test_change_defaults_using_setters",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_username_password_update": {
            "name": "test_username_password_update",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_security_context": {
            "name": "test_security_context",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_load_rc": {
            "name": "test_load_rc",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionParams.test_load_nonexisting_rc": {
            "name": "test_load_nonexisting_rc",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tests/test_generator.py": {
        "load_yaml": {
            "name": "load_yaml",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "compare_statments": {
            "name": "compare_statments",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestGenerator.test_excalibur_increase_replicas": {
            "name": "test_excalibur_increase_replicas",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestGenerator.test_excalibur_unchanged": {
            "name": "test_excalibur_unchanged",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestGenerator.test_excalibur_change_table_fields": {
            "name": "test_excalibur_change_table_fields",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_database": [
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestGenerator.test_class_name_comparision": {
            "name": "test_class_name_comparision",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tests/test_utils.py": {
        "get_temp_filename": {
            "name": "get_temp_filename",
            "location": 7,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "float"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "TestFindByValue.test_simple_list": {
            "name": "test_simple_list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindByValue.test_nonnested_dict_list": {
            "name": "test_nonnested_dict_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cassandra-table-properties-master/tests/__init__.py": {}
}
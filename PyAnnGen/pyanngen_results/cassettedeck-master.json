{
    "cassettedeck-master/setup.py": {},
    "cassettedeck-master/cassettedeck/cassette.py": {},
    "cassettedeck-master/cassettedeck/deck.py": {
        "CassetteDeck.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cassette_library_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "ignore_localhost": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "ignore_hosts": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "mode": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "mocked_services": [
                    "bool",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "CassetteDeck.use_cassette": {
            "name": "use_cassette",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "cassette": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "mode": [
                    "int",
                    "str",
                    "Iterable[Tuple[str, str]]",
                    "bool"
                ],
                "custom_matchers": [
                    "str",
                    "int"
                ]
            }
        },
        "CassetteDeck.__enter__": {
            "name": "__enter__",
            "location": 31,
            "return": [
                "CassetteDeck"
            ],
            "arguments": {
                "self": [
                    "_TCassetteDeck@@CassetteDeck@@"
                ]
            }
        },
        "CassetteDeck.__exit__": {
            "name": "__exit__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "cassettedeck-master/cassettedeck/request.py": {},
    "cassettedeck-master/cassettedeck/service.py": {
        "BaseService.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseService.clear": {
            "name": "clear",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseService.matches": {
            "name": "matches",
            "location": 78,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cassettedeck-master/cassettedeck/store.py": {
        "CassetteStore.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cassette_library_dir": [
                    "TextIO",
                    "None",
                    "Dict[str,str]",
                    "str",
                    "Optional[str]",
                    "Callable[[float],None]",
                    "Callable[float,None]"
                ],
                "ignore_hosts": [
                    "Tuple",
                    "List",
                    "str",
                    "Dict[str,bytes]",
                    "ImmutableSet[T]",
                    "Set[int]",
                    "Set[str]",
                    "Set[Tuple[int,int]]"
                ],
                "ignore_localhost": [
                    "bool"
                ],
                "record_mode": [
                    "Text",
                    "bool",
                    "int"
                ],
                "custom_matchers": [
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "CassetteStore.add_ignored_host": {
            "name": "add_ignored_host",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "CassetteStore.library_dir": {
            "name": "library_dir",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "library_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "CassetteStore.match_on": {
            "name": "match_on",
            "location": 56,
            "return": [
                "Tuple",
                "str",
                "bool",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CassetteStore.load_cassette": {
            "name": "load_cassette",
            "location": 67,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "CassetteStore.store_cassette": {
            "name": "store_cassette",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cassette": [
                    "str",
                    "bool",
                    "yarl.URL",
                    "IO"
                ]
            }
        },
        "CassetteStore.use_cassette": {
            "name": "use_cassette",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cassette": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "CassetteStore.skip": {
            "name": "skip",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "CassetteStore.build_response": {
            "name": "build_response",
            "location": 138,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Dict",
                    "Dict[str,Any]",
                    "aiohttp.ClientResponse",
                    "aiohttp.web_response.Response"
                ],
                "url": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[dict]",
                    "None"
                ],
                "params": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ],
                "data": [
                    "aiohttp.web.Response"
                ],
                "headers": [
                    "Dict",
                    "Optional[dict]",
                    "str",
                    "None",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        }
    },
    "cassettedeck-master/cassettedeck/vcr.py": {
        "vcr": {
            "name": "vcr",
            "location": 10,
            "return": [],
            "arguments": {
                "test_case": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "cassettedeck-master/cassettedeck/__init__.py": {},
    "cassettedeck-master/cassettedeck/tests/conftest.py": {},
    "cassettedeck-master/cassettedeck/tests/fixtures.py": {
        "ctd": {
            "name": "ctd",
            "location": 12,
            "return": [
                "typing.Generator[CassetteDeck]"
            ],
            "arguments": {}
        },
        "local_server": {
            "name": "local_server",
            "location": 21,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "ctd_ignore_localhost": {
            "name": "ctd_ignore_localhost",
            "location": 31,
            "return": [
                "typing.Generator[CassetteDeck]"
            ],
            "arguments": {
                "local_server": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ctd_custom_dir": {
            "name": "ctd_custom_dir",
            "location": 52,
            "return": [
                "typing.Generator[CassetteDeck]"
            ],
            "arguments": {}
        },
        "MockedService.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedService.matches": {
            "name": "matches",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "cassettedeck-master/cassettedeck/tests/test_vcr.py": {},
    "cassettedeck-master/cassettedeck/tests/test_works.py": {
        "CustomMatcher": {
            "name": "CustomMatcher",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "r1": [
                    "str",
                    "List[str]",
                    "Set[int]",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "r2": [
                    "str",
                    "List[str]",
                    "Set[int]",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "cassettedeck-master/cassettedeck/tests/__init__.py": {}
}
{
    "cayenne-master/setup.py": {},
    "cayenne-master/cayenne/model_io.py": {
        "ModelIO.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_contents": [
                    "str",
                    "bool",
                    "Mapping"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "ModelIO._create_stoic_mat": {
            "name": "_create_stoic_mat",
            "location": 79,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "ns": [
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Dict",
                    "Tuple[Union[int,int]]"
                ],
                "nr": [
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Dict",
                    "Tuple[Union[int,int]]"
                ],
                "name_list": [
                    "str",
                    "List[str]",
                    "Set[Type[Any]]",
                    "Set[Type]",
                    "List[type]",
                    "List[Type]"
                ],
                "stoic_tuple": [
                    "str",
                    "List[str]",
                    "Set[Type[Any]]",
                    "Set[Type]",
                    "List[type]",
                    "List[Type]"
                ],
                "species_names": [
                    "str"
                ]
            }
        },
        "ModelIO._parse_model": {
            "name": "_parse_model",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelIO.args": {
            "name": "args",
            "location": 158,
            "return": [
                "Tuple",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelIO.translate_sbml": {
            "name": "translate_sbml",
            "location": 172,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "sbml_file": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cayenne-master/cayenne/results.py": {
        "Results.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "species_names": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "rxn_names": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "t_list": [
                    "str",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "x_list": [
                    "str",
                    "TextIO",
                    "List[str]",
                    "List[dict]",
                    "bool"
                ],
                "status_list": [
                    "bool",
                    "List[int]",
                    "float",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "algorithm": [
                    "str",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "sim_seeds": [
                    "str",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Results._check_consistency": {
            "name": "_check_consistency",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Results.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Results.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Results.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [
                "Iterator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Results.__len__": {
            "name": "__len__",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Results.__contains__": {
            "name": "__contains__",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Results.__getitem__": {
            "name": "__getitem__",
            "location": 138,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "Callable",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Results.final": {
            "name": "final",
            "location": 165,
            "return": [
                "Tuple",
                "str",
                "int",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Results.get_state": {
            "name": "get_state",
            "location": 178,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int",
                    "List[cirq.Qid]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "Results.get_species": {
            "name": "get_species",
            "location": 222,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "species_names": [
                    "str"
                ]
            }
        }
    },
    "cayenne-master/cayenne/simulation.py": {
        "wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "func": []
            }
        },
        "Simulation.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "species_names": [],
                "rxn_names": [],
                "react_stoic": [],
                "prod_stoic": [],
                "init_state": [],
                "k_det": [],
                "chem_flag": [
                    "bool"
                ],
                "volume": [
                    "float"
                ]
            }
        },
        "Simulation._check_consistency": {
            "name": "_check_consistency",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulation.results": {
            "name": "results",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulation.load_model": {
            "name": "load_model",
            "location": 186,
            "return": [
                "Simulation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSimulation]"
                ],
                "contents": [],
                "contents_type": []
            }
        },
        "Simulation.simulate": {
            "name": "simulate",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_t": [
                    "float"
                ],
                "max_iter": [
                    "int"
                ],
                "seed": [
                    "int"
                ],
                "n_rep": [
                    "int"
                ],
                "n_procs": [
                    "int"
                ],
                "algorithm": [
                    "typing.Text"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Simulation.HOR": {
            "name": "HOR",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.plot": {
            "name": "plot",
            "location": 431,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "species_names": [
                    "None"
                ],
                "new_names": [
                    "None"
                ],
                "thinning": [
                    "int"
                ]
            }
        }
    },
    "cayenne-master/cayenne/__init__.py": {},
    "cayenne-master/cayenne/algorithms/__init__.py": {},
    "cayenne-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        }
    },
    "cayenne-master/tests/conftest.py": {
        "setup_basic": {
            "name": "setup_basic",
            "location": 18,
            "return": [
                "Tuple[list[Text]]",
                "str",
                "List[str]",
                "Callable[[str],str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "setup_large": {
            "name": "setup_large",
            "location": 39,
            "return": [
                "Tuple[list[Text]]",
                "str",
                "List[str]",
                "Callable[[str],str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "setup_system": {
            "name": "setup_system",
            "location": 79,
            "return": [
                "str",
                "Tuple[float]"
            ],
            "arguments": {}
        },
        "setup_bifurcation": {
            "name": "setup_bifurcation",
            "location": 92,
            "return": [
                "Tuple[list[Text]]",
                "str",
                "List[str]",
                "Callable[[str],str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "setup_long": {
            "name": "setup_long",
            "location": 114,
            "return": [
                "Tuple[list[Text]]",
                "str",
                "List[str]",
                "Callable[[str],str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "read_results": {
            "name": "read_results",
            "location": 134,
            "return": [
                "Tuple[(List[float], List[float], List[float])]"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int"
                ]
            }
        },
        "read_results_2sp": {
            "name": "read_results_2sp",
            "location": 179,
            "return": [
                "Tuple[(List[float], List[np.ndarray], List[np.ndarray])]"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int"
                ]
            }
        },
        "setup_00001": {
            "name": "setup_00001",
            "location": 226,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00003": {
            "name": "setup_00003",
            "location": 260,
            "return": [
                "Tuple[Union[list[Text],dict[str,Literal],str,None,tuple[Union[Any,Literal]],int]]",
                "str",
                "List[str]",
                "Callable[[str],str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "setup_00004": {
            "name": "setup_00004",
            "location": 298,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00005": {
            "name": "setup_00005",
            "location": 332,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00011": {
            "name": "setup_00011",
            "location": 366,
            "return": [
                "Tuple[Union[int,list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex]]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00020": {
            "name": "setup_00020",
            "location": 402,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00021": {
            "name": "setup_00021",
            "location": 437,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00022": {
            "name": "setup_00022",
            "location": 471,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00023": {
            "name": "setup_00023",
            "location": 505,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00030": {
            "name": "setup_00030",
            "location": 539,
            "return": [
                "Tuple[Union[list[float],list,float,bool]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00031": {
            "name": "setup_00031",
            "location": 577,
            "return": [
                "Tuple[Union[list[float],list,float,bool]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00037": {
            "name": "setup_00037",
            "location": 615,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00038": {
            "name": "setup_00038",
            "location": 649,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00039": {
            "name": "setup_00039",
            "location": 688,
            "return": [
                "Tuple[Union[list[float],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],list[complex],int]]",
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "int",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "setup_00001_correct": {
            "name": "setup_00001_correct",
            "location": 727,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_nochemflag": {
            "name": "setup_00001_nochemflag",
            "location": 745,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_norate": {
            "name": "setup_00001_norate",
            "location": 762,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_noratevalue": {
            "name": "setup_00001_noratevalue",
            "location": 779,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_nospeciesvalue": {
            "name": "setup_00001_nospeciesvalue",
            "location": 796,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_rateequation": {
            "name": "setup_00001_rateequation",
            "location": 813,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_incompletespeciesvalue": {
            "name": "setup_00001_incompletespeciesvalue",
            "location": 831,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "setup_00001_nocompartment": {
            "name": "setup_00001_nocompartment",
            "location": 850,
            "return": [
                "Text",
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "cayenne-master/tests/test_accuracy.py": {},
    "cayenne-master/tests/test_adaptive.py": {
        "test_tauadaptive_step1": {
            "name": "test_tauadaptive_step1",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_basic": [
                    "int"
                ]
            }
        },
        "test_tauadaptive_step2": {
            "name": "test_tauadaptive_step2",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_basic": [
                    "int"
                ]
            }
        },
        "test_tauadaptive_step2_get_g": {
            "name": "test_tauadaptive_step2_get_g",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tauadaptive_step5": {
            "name": "test_tauadaptive_step5",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_basic": [
                    "int"
                ]
            }
        }
    },
    "cayenne-master/tests/test_cython.py": {
        "TestCython.test_sim": {
            "name": "test_sim",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestCython.test_get_kstoc": {
            "name": "test_get_kstoc",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestRoulette.test_roulettecy": {
            "name": "test_roulettecy",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoulette.test_100": {
            "name": "test_100",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoulette.test_010": {
            "name": "test_010",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoulette.test_001": {
            "name": "test_001",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoulette.test_stat3": {
            "name": "test_stat3",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoulette.test_statm2": {
            "name": "test_statm2",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cayenne-master/tests/test_get_kstoc.py": {
        "TestKstoc.test_100": {
            "name": "test_100",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        },
        "TestKstoc.test_110": {
            "name": "test_110",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        },
        "TestKstoc.test_111": {
            "name": "test_111",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        },
        "TestKstoc.test_200": {
            "name": "test_200",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        },
        "TestKstoc.test_210": {
            "name": "test_210",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        },
        "TestKstoc.test_300": {
            "name": "test_300",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        },
        "TestKstoc.test_chemflag": {
            "name": "test_chemflag",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_system": []
            }
        }
    },
    "cayenne-master/tests/test_model_io.py": {
        "TestModelIO.test_correct_model_str": {
            "name": "test_correct_model_str",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_correct": [],
                "setup_00001": []
            }
        },
        "TestModelIO.test_correct_model_file": {
            "name": "test_correct_model_file",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001": []
            }
        },
        "TestModelIO.test_nochemflag": {
            "name": "test_nochemflag",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_nochemflag": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_norate": {
            "name": "test_norate",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_norate": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_noratevalue": {
            "name": "test_noratevalue",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_noratevalue": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_rateequation": {
            "name": "test_rateequation",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_rateequation": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_nospeciesvalue": {
            "name": "test_nospeciesvalue",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_nospeciesvalue": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_incompletespeciesvalue": {
            "name": "test_incompletespeciesvalue",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_incompletespeciesvalue": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_nocompartment": {
            "name": "test_nocompartment",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_nocompartment": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestModelIO.test_translate_sbml": {
            "name": "test_translate_sbml",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cayenne-master/tests/test_plot.py": {
        "test_plotting": {
            "name": "test_plotting",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cayenne-master/tests/test_results.py": {
        "TestResults.test_init_good": {
            "name": "test_init_good",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "int",
                    "float"
                ],
                "setup_large": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestResults.test_init_bad": {
            "name": "test_init_bad",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str"
                ],
                "setup_large": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestResults.test_iter_len": {
            "name": "test_iter_len",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "Dict",
                    "str",
                    "Iterable[Any]"
                ],
                "setup_large": [
                    "str",
                    "int",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "TestResults.test_contains_getitem": {
            "name": "test_contains_getitem",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "float"
                ],
                "setup_large": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestResults.test_final": {
            "name": "test_final",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "setup_large": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestResults.test_get_states": {
            "name": "test_get_states",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "float",
                    "numpy.ndarray"
                ],
                "setup_large": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestResults.test_get_states_high_time": {
            "name": "test_get_states_high_time",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "str"
                ],
                "setup_00003": [
                    "int"
                ]
            }
        }
    },
    "cayenne-master/tests/test_simulation.py": {
        "TestSanitizeAlg.test_null": {
            "name": "test_null",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "float"
                ],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitizeAlg.test_status_3": {
            "name": "test_status_3",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "str",
                    "Union[int,float]",
                    "float"
                ],
                "setup_basic": [
                    "int",
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "TestSanitizeAlg.test_status_2": {
            "name": "test_status_2",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "str",
                    "Union[int,float]",
                    "float"
                ],
                "setup_basic": [
                    "int",
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "TestSanitizeAlg.test_reproduce": {
            "name": "test_reproduce",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "float"
                ],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitizeAlg.test_reproduce_fail": {
            "name": "test_reproduce_fail",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "float"
                ],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitizeAlg.test_incorrect_seed": {
            "name": "test_incorrect_seed",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "float"
                ],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitizeAlg.test_maxiter_type": {
            "name": "test_maxiter_type",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "setup_basic": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSanitizeAlg.test_monotonic": {
            "name": "test_monotonic",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "str",
                    "float"
                ],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitizeAlg.test_long": {
            "name": "test_long",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "int",
                    "str"
                ],
                "setup_long": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_too_high_order": {
            "name": "test_too_high_order",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_neg_k": {
            "name": "test_neg_k",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_large": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_k_shape": {
            "name": "test_k_shape",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_Vp_Vr_shape": {
            "name": "test_Vp_Vr_shape",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_kdet_Vr_shape": {
            "name": "test_kdet_Vr_shape",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_X0_Vr_shape": {
            "name": "test_X0_Vr_shape",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_X0_2d": {
            "name": "test_X0_2d",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_Vp_neg": {
            "name": "test_Vp_neg",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_Vr_neg": {
            "name": "test_Vr_neg",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestSanitize.test_X0_neg": {
            "name": "test_X0_neg",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_basic": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestHOR.create_sim_inst": {
            "name": "create_sim_inst",
            "location": 204,
            "return": [
                "cayenne.simulation.Simulation"
            ],
            "arguments": {
                "react_stoic": [
                    "int",
                    "str",
                    "Dict[str,int]",
                    "Callable"
                ]
            }
        },
        "TestHOR.test_hor1": {
            "name": "test_hor1",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor2": {
            "name": "test_hor2",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor3": {
            "name": "test_hor3",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor4": {
            "name": "test_hor4",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor5": {
            "name": "test_hor5",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor6": {
            "name": "test_hor6",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor7": {
            "name": "test_hor7",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor8": {
            "name": "test_hor8",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor9": {
            "name": "test_hor9",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHOR.test_hor10": {
            "name": "test_hor10",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadModel.test_correct_model_str": {
            "name": "test_correct_model_str",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_00001_correct": []
            }
        },
        "TestLoadModel.test_correct_model_file": {
            "name": "test_correct_model_file",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cayenne-master/tests/__init__.py": {}
}
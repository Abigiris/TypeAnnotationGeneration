{
    "cerise-develop/setup.py": {
        "read": {
            "name": "read",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cerise-develop/api/cerise/files/cwltiny.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "log": {
            "name": "log",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "exit_validation": {
            "name": "exit_validation",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "exit_perm_fail": {
            "name": "exit_perm_fail",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "exit_system_error": {
            "name": "exit_system_error",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Exception",
                    "int",
                    "logging.Logger",
                    "None",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "exit_success": {
            "name": "exit_success",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "process_type": {
            "name": "process_type",
            "location": 46,
            "return": [
                "str",
                "Union[type, Tuple[type, object]]"
            ],
            "arguments": {
                "process_dict": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "normalise_parameter": {
            "name": "normalise_parameter",
            "location": 66,
            "return": [
                "list"
            ],
            "arguments": {
                "dict_of_dicts": [
                    "dict[str, dict[str, str]]",
                    "dict[str, int]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "normalise_process": {
            "name": "normalise_process",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "process_desc": [
                    "list[str]",
                    "list[dict[, ]]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "make_workdir": {
            "name": "make_workdir",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "remove_workdirs": {
            "name": "remove_workdirs",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stage_input_file": {
            "name": "stage_input_file",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "workdir_path": [
                    "str"
                ],
                "files": [
                    "str",
                    "TextIO",
                    "List[str]"
                ]
            }
        },
        "stage_input": {
            "name": "stage_input",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "workdir_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "input_dict": [
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "dict[str, str]",
                    "dict[str, bool]",
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, bool]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "create_argument": {
            "name": "create_argument",
            "location": 184,
            "return": [
                "Tuple[(int, list)]"
            ],
            "arguments": {
                "parameter": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "input_dict": [
                    "list[tuple[]]",
                    "dict",
                    "bool",
                    "Dict[str, bool]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, float]",
                    "List[Tuple]"
                ]
            }
        },
        "create_command_line": {
            "name": "create_command_line",
            "location": 266,
            "return": [
                "list"
            ],
            "arguments": {
                "clt_desc": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Mapping"
                ],
                "input_dict": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "execute_clt": {
            "name": "execute_clt",
            "location": 295,
            "return": [
                "int"
            ],
            "arguments": {
                "workdir_path": [
                    "str",
                    "bool",
                    "tuple[int]",
                    "Tuple[int]",
                    "int"
                ],
                "in_out": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "base_command": [
                    "bool",
                    "str",
                    "int"
                ],
                "command_line": [
                    "bool",
                    "str"
                ]
            }
        },
        "collect_output": {
            "name": "collect_output",
            "location": 334,
            "return": [
                "Dict[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "workdir_path": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str",
                    "bool"
                ]
            }
        },
        "destage_output": {
            "name": "destage_output",
            "location": 365,
            "return": [
                "_T0"
            ],
            "arguments": {
                "output_dict": [
                    "_T0"
                ]
            }
        },
        "run_command_line_tool": {
            "name": "run_command_line_tool",
            "location": 387,
            "return": [
                "Tuple[(bool, Dict[(Any, Dict[(str, str)])])]"
            ],
            "arguments": {
                "workdir_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "clt_dict": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "input_dict": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "normalise_workflow": {
            "name": "normalise_workflow",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "workflow_dict": [
                    "Dict[str, Any]",
                    "logging.LogRecord"
                ]
            }
        },
        "has_unexecuted_steps": {
            "name": "has_unexecuted_steps",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "workflow_dict": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "resolve_output_reference": {
            "name": "resolve_output_reference",
            "location": 473,
            "return": [
                "Optional[Tuple[(Any, bool)]]"
            ],
            "arguments": {
                "reference": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "int",
                    "property",
                    "bool",
                    "list"
                ],
                "workflow_dict": [
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "input_dict": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "resolve_step_inputs": {
            "name": "resolve_step_inputs",
            "location": 523,
            "return": [
                "bool"
            ],
            "arguments": {
                "step": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "bytes"
                ],
                "workflow_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "input_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "execute_workflow_step": {
            "name": "execute_workflow_step",
            "location": 557,
            "return": [
                "bool"
            ],
            "arguments": {
                "step": [
                    "str",
                    "type"
                ]
            }
        },
        "get_workflow_outputs": {
            "name": "get_workflow_outputs",
            "location": 583,
            "return": [
                "dict"
            ],
            "arguments": {
                "workflow_dict": [
                    "str",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ],
                "input_dict": [
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]",
                    "str",
                    "int"
                ]
            }
        },
        "run_workflow": {
            "name": "run_workflow",
            "location": 607,
            "return": [
                "Tuple[(bool, dict)]"
            ],
            "arguments": {
                "workdir_path": [
                    "list",
                    "bool",
                    "list[]",
                    "str"
                ],
                "workflow_dict": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "input_dict": [
                    "str",
                    "int",
                    "None",
                    "Optional['ConvolutionalEmbeddingConfig']",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 633,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "cerise-develop/cerise/config.py": {
        "make_config": {
            "name": "make_config",
            "location": 397,
            "return": [
                "Config"
            ],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ],
                "api_config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Config._get_credential_variable": {
            "name": "_get_credential_variable",
            "location": 34,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Config._get_credential": {
            "name": "_get_credential",
            "location": 71,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str"
                ]
            }
        },
        "Config.close_file_systems": {
            "name": "close_file_systems",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_service_host": {
            "name": "get_service_host",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_service_port": {
            "name": "get_service_port",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_username": {
            "name": "get_username",
            "location": 126,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str"
                ]
            }
        },
        "Config.get_scheduler": {
            "name": "get_scheduler",
            "location": 138,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "run_on_head_node": [
                    "bool"
                ]
            }
        },
        "Config.get_file_system": {
            "name": "get_file_system",
            "location": 169,
            "return": [
                "str",
                "Tuple[str, str]",
                "int",
                "typing.Pattern",
                "dict[str, dict[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_remote_cwl_runner": {
            "name": "get_remote_cwl_runner",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_basedir": {
            "name": "get_basedir",
            "location": 209,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_queue_name": {
            "name": "get_queue_name",
            "location": 226,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_slots_per_node": {
            "name": "get_slots_per_node",
            "location": 238,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_scheduler_options": {
            "name": "get_scheduler_options",
            "location": 250,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_cores_per_node": {
            "name": "get_cores_per_node",
            "location": 260,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_remote_refresh": {
            "name": "get_remote_refresh",
            "location": 280,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_database_location": {
            "name": "get_database_location",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_pid_file": {
            "name": "get_pid_file",
            "location": 302,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.has_logging": {
            "name": "has_logging",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_log_file": {
            "name": "get_log_file",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_log_level": {
            "name": "get_log_level",
            "location": 331,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_base_url": {
            "name": "get_base_url",
            "location": 348,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_store_location_service": {
            "name": "get_store_location_service",
            "location": 361,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_store_location_client": {
            "name": "get_store_location_client",
            "location": 381,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._get_credential_variable.have_config": {
            "name": "have_config",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "kind": [
                    "str",
                    "Mapping",
                    "bool",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "bytes"
                ],
                "name": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "Config._get_credential_variable.get_config": {
            "name": "get_config",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "kind": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Callable[..., T]",
                    "int"
                ]
            }
        },
        "Config._get_credential_variable.env_var": {
            "name": "env_var",
            "location": 48,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "kind": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Config._get_credential_variable.have_env": {
            "name": "have_env",
            "location": 54,
            "return": [
                "bool",
                "str",
                "int",
                "dict",
                "Optional[int]",
                "Tuple[int, int]",
                "Callable",
                "Optional[T]"
            ],
            "arguments": {
                "kind": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Config._get_credential_variable.get_env": {
            "name": "get_env",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "kind": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/run_back_end.py": {
        "term_handler": {
            "name": "term_handler",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int"
                ],
                "frame": [
                    "types.FrameType"
                ]
            }
        }
    },
    "cerise-develop/cerise/run_front_end.py": {},
    "cerise-develop/cerise/util.py": {},
    "cerise-develop/cerise/__init__.py": {},
    "cerise-develop/cerise/back_end/cwl.py": {
        "is_workflow": {
            "name": "is_workflow",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "workflow_content": [
                    "bytes"
                ]
            }
        },
        "get_workflow_step_names": {
            "name": "get_workflow_step_names",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "workflow_content": [
                    "bytes"
                ]
            }
        },
        "get_required_num_cores": {
            "name": "get_required_num_cores",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "cwl_content": [
                    "bytes"
                ]
            }
        },
        "get_time_limit": {
            "name": "get_time_limit",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "cwl_content": [
                    "bytes"
                ]
            }
        },
        "get_secondary_files": {
            "name": "get_secondary_files",
            "location": 134,
            "return": [
                "List[cerise.back_end.file.File]"
            ],
            "arguments": {
                "secondary_files": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "get_files_from_binding": {
            "name": "get_files_from_binding",
            "location": 164,
            "return": [
                "List[cerise.back_end.file.File]"
            ],
            "arguments": {
                "cwl_binding": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_cwltool_result": {
            "name": "get_cwltool_result",
            "location": 205,
            "return": [
                "cerise.job_store.job_state.JobState"
            ],
            "arguments": {
                "cwltool_log": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/execution_manager.py": {
        "ExecutionManager.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cerise.config.Config"
                ],
                "local_api_dir": [
                    "sphinx.config.Config",
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ExecutionManager.shutdown": {
            "name": "shutdown",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionManager._delete_job": {
            "name": "_delete_job",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "job": [
                    "cerise.job_store.sqlite_job.SQLiteJob"
                ]
            }
        },
        "ExecutionManager._cancel_job": {
            "name": "_cancel_job",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "job": [
                    "cerise.job_store.sqlite_job.SQLiteJob"
                ]
            }
        },
        "ExecutionManager._stage_and_start_job": {
            "name": "_stage_and_start_job",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "job": [
                    "cerise.job_store.sqlite_job.SQLiteJob"
                ]
            }
        },
        "ExecutionManager._destage_job": {
            "name": "_destage_job",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "job": [
                    "cerise.job_store.sqlite_job.SQLiteJob"
                ]
            }
        },
        "ExecutionManager._process_jobs": {
            "name": "_process_jobs",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "check_remote": [
                    "bool"
                ]
            }
        },
        "ExecutionManager.execute_jobs": {
            "name": "execute_jobs",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cerise-develop/cerise/back_end/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "index": [
                    "Optional[int]"
                ],
                "location": [
                    "str"
                ],
                "secondary_files": [
                    "List[File]"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/job_planner.py": {
        "JobPlanner.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_store": [
                    "cerise.job_store.sqlite_job_store.SQLiteJobStore"
                ],
                "local_api_dir": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "JobPlanner.plan_job": {
            "name": "plan_job",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "JobPlanner._get_steps_resource_requirements": {
            "name": "_get_steps_resource_requirements",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_api_dir": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/job_runner.py": {
        "JobRunner.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_store": [
                    "cerise.job_store.sqlite_job_store.SQLiteJobStore"
                ],
                "config": [
                    "cerise.config.Config"
                ],
                "remote_cwlrunner": [
                    "str"
                ]
            }
        },
        "JobRunner.update_job": {
            "name": "update_job",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "JobRunner.start_job": {
            "name": "start_job",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "JobRunner.cancel_job": {
            "name": "cancel_job",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/local_files.py": {
        "LocalFiles.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_store": [
                    "cerise.job_store.sqlite_job_store.SQLiteJobStore"
                ],
                "config": [
                    "cerise.config.Config"
                ]
            }
        },
        "LocalFiles.resolve_secondary_files": {
            "name": "resolve_secondary_files",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secondary_files": [
                    "List[cerise.back_end.file.File]"
                ]
            }
        },
        "LocalFiles.resolve_input": {
            "name": "resolve_input",
            "location": 60,
            "return": [
                "List[cerise.back_end.file.File]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "LocalFiles.create_output_dir": {
            "name": "create_output_dir",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "LocalFiles.delete_output_dir": {
            "name": "delete_output_dir",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "LocalFiles.publish_job_output": {
            "name": "publish_job_output",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "output_files": [
                    "List[cerise.back_end.file.File]"
                ]
            }
        },
        "LocalFiles._get_source_from_url": {
            "name": "_get_source_from_url",
            "location": 147,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "pathlib.Path",
                "Union[str, pathlib.Path]",
                "virgene.config.Config"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LocalFiles._write_to_output_file": {
            "name": "_write_to_output_file",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "rel_path": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "LocalFiles._to_external_url": {
            "name": "_to_external_url",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/remote_api.py": {
        "RemoteApi.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cerise.config.Config"
                ],
                "local_api_dir": [
                    "str",
                    "cerulean.Path",
                    "virgene.config.Config"
                ]
            }
        },
        "RemoteApi.update_available": {
            "name": "update_available",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteApi.install": {
            "name": "install",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteApi.get_projects": {
            "name": "get_projects",
            "location": 86,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteApi.translate_runner_location": {
            "name": "translate_runner_location",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "runner_location": [
                    "str"
                ]
            }
        },
        "RemoteApi.translate_workflow": {
            "name": "translate_workflow",
            "location": 123,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "workflow_content": [
                    "bytes"
                ]
            }
        },
        "RemoteApi._updatable_projects": {
            "name": "_updatable_projects",
            "location": 149,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteApi._make_remote_project": {
            "name": "_make_remote_project",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "RemoteApi._stage_api_steps": {
            "name": "_stage_api_steps",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_project_dir": [
                    "cerulean.Path",
                    "str"
                ],
                "remote_project_dir": [
                    "str"
                ]
            }
        },
        "RemoteApi._translate_api_step": {
            "name": "_translate_api_step",
            "location": 255,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "step_path": [
                    "str",
                    "Optional[str]"
                ],
                "remote_project_dir": [
                    "str",
                    "cerulean.Path",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "RemoteApi._stage_api_files": {
            "name": "_stage_api_files",
            "location": 296,
            "return": [
                "None",
                "Iterator[object]",
                "str",
                "bool",
                "Tuple[int, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "local_project_dir": [],
                "remote_project_dir": []
            }
        },
        "RemoteApi._stage_install_script": {
            "name": "_stage_install_script",
            "location": 332,
            "return": [
                "None",
                "Optional[dict]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "local_project_dir": [
                    "bool",
                    "cerulean.Path",
                    "str"
                ],
                "remote_project_dir": [
                    "bool",
                    "cerulean.Path",
                    "str"
                ]
            }
        },
        "RemoteApi._run_install_script": {
            "name": "_run_install_script",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_project_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/remote_job_files.py": {
        "_create_input_filename": {
            "name": "_create_input_filename",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "unique_prefix": [
                    "str"
                ],
                "orig_path": [
                    "str"
                ]
            }
        },
        "RemoteJobFiles.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_store": [
                    "cerise.job_store.sqlite_job_store.SQLiteJobStore"
                ],
                "config": [
                    "cerise.config.Config"
                ]
            }
        },
        "RemoteJobFiles.stage_job": {
            "name": "stage_job",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "input_files": [
                    "List[cerise.back_end.file.File]"
                ],
                "workflow_content": [
                    "bytes"
                ]
            }
        },
        "RemoteJobFiles.destage_job_output": {
            "name": "destage_job_output",
            "location": 108,
            "return": [
                "List[cerise.back_end.file.File]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "RemoteJobFiles.delete_job": {
            "name": "delete_job",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "RemoteJobFiles.update_job": {
            "name": "update_job",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "RemoteJobFiles._stage_input_file": {
            "name": "_stage_input_file",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ],
                "job_id": [
                    "str"
                ],
                "input_file": [
                    "cerise.back_end.file.File"
                ],
                "input_desc": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RemoteJobFiles._add_file_to_job": {
            "name": "_add_file_to_job",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "rel_path": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "RemoteJobFiles._read_remote_file": {
            "name": "_read_remote_file",
            "location": 234,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "rel_path": [
                    "str"
                ]
            }
        },
        "RemoteJobFiles._abs_path": {
            "name": "_abs_path",
            "location": 248,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "rel_path": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/__init__.py": {},
    "cerise-develop/cerise/back_end/test/conftest.py": {
        "workflow_to_json": {
            "name": "workflow_to_json",
            "location": 16,
            "return": [
                "bytes"
            ],
            "arguments": {
                "yaml_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "test_steps_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "mock_config": {
            "name": "mock_config",
            "location": 80,
            "return": [
                "MockConfig",
                "Optional[dict]",
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "local_api_dir": {
            "name": "local_api_dir",
            "location": 85,
            "return": [
                "pathlib.Path",
                "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
            ],
            "arguments": {}
        },
        "mock_store_submitted": {
            "name": "mock_store_submitted",
            "location": 120,
            "return": [
                "",
                "typing.Generator[tuple[MockStore]]"
            ],
            "arguments": {
                "request": [
                    "bytes"
                ],
                "mock_config": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "mock_store_resolved": {
            "name": "mock_store_resolved",
            "location": 167,
            "return": [
                "",
                "typing.Generator[tuple[MockStore]]"
            ],
            "arguments": {
                "request": [],
                "mock_config": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "mock_store_staged": {
            "name": "mock_store_staged",
            "location": 208,
            "return": [
                "tuple[MockStore]",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "bytes"
                ],
                "mock_config": [
                    "Dict[str, Any]",
                    "Dict[bytes, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "mock_store_run": {
            "name": "mock_store_run",
            "location": 245,
            "return": [
                "tuple[MockStore]",
                "str",
                "int"
            ],
            "arguments": {
                "request": [],
                "mock_config": [
                    "str",
                    "dict"
                ]
            }
        },
        "mock_store_run_and_updated": {
            "name": "mock_store_run_and_updated",
            "location": 272,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "mock_config": [
                    "pathlib.Path",
                    "str"
                ],
                "mock_store_run": [
                    "Optional[Dict]",
                    "dict[, ]",
                    "str",
                    "Dict[str, str]",
                    "int",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "mock_store_destaged": {
            "name": "mock_store_destaged",
            "location": 293,
            "return": [
                "",
                "typing.Generator[tuple[MockStore]]"
            ],
            "arguments": {
                "request": [
                    "bytes"
                ],
                "mock_config": []
            }
        },
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "MockConfig.get_scheduler": {
            "name": "get_scheduler",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "run_on_head_node": [
                    "bool",
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "Sequence[Path]",
                    "str"
                ]
            }
        },
        "MockConfig.get_queue_name": {
            "name": "get_queue_name",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_slots_per_node": {
            "name": "get_slots_per_node",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_cores_per_node": {
            "name": "get_cores_per_node",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_scheduler_options": {
            "name": "get_scheduler_options",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_remote_cwl_runner": {
            "name": "get_remote_cwl_runner",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_file_system": {
            "name": "get_file_system",
            "location": 63,
            "return": [
                "pathlib.Path",
                "str",
                "Callable[[pathlib.Path], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_basedir": {
            "name": "get_basedir",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_username": {
            "name": "get_username",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "MockConfig.get_store_location_service": {
            "name": "get_store_location_service",
            "location": 72,
            "return": [
                "pathlib.Path",
                "str",
                "Union[pathlib.Path, str]",
                "bool",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.get_store_location_client": {
            "name": "get_store_location_client",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStore.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "MockStore.__enter__": {
            "name": "__enter__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStore.__exit__": {
            "name": "__exit__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "MockStore.add_job": {
            "name": "add_job",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "float",
                    "int"
                ]
            }
        },
        "MockStore.list_jobs": {
            "name": "list_jobs",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStore.get_job": {
            "name": "get_job",
            "location": 108,
            "return": [
                "bool",
                "int",
                "Optional[dict]",
                "list",
                "Optional[T]",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MockStore.delete_job": {
            "name": "delete_job",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "typing.Mapping",
                    "int",
                    "Mapping[str, Any]",
                    "None",
                    "cerise.job_store.sqlite_job.SQLiteJob",
                    "Optional[str]"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/test/mock_job.py": {
        "MockJob.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[dict]",
                    "dict[, ]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "workflow": [
                    "str",
                    "bool",
                    "float"
                ],
                "job_input": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "MockJob.try_transition": {
            "name": "try_transition",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "from_state": [
                    "bool",
                    "str",
                    "dict[str, float]",
                    "int",
                    "None",
                    "Dict[str, float]",
                    "Optional[str]"
                ],
                "to_state": [
                    "bool",
                    "str",
                    "dict[str, float]",
                    "int",
                    "None",
                    "Dict[str, float]",
                    "Optional[str]"
                ]
            }
        },
        "MockJob.add_log": {
            "name": "add_log",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "message": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "MockJob.debug": {
            "name": "debug",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "bool",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "int"
                ]
            }
        },
        "MockJob.info": {
            "name": "info",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Union[BinaryIO, str]",
                    "typing.BinaryIO"
                ]
            }
        },
        "MockJob.warning": {
            "name": "warning",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "Exception",
                    "str"
                ]
            }
        },
        "MockJob.error": {
            "name": "error",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MockJob.critical": {
            "name": "critical",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "int",
                    "logging.Logger"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/test/test_cwl.py": {
        "test_is_workflow": {
            "name": "test_is_workflow",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_not_workflow": {
            "name": "test_is_not_workflow",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_workflow_invalid": {
            "name": "test_is_workflow_invalid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_workflow_required_attributes": {
            "name": "test_is_workflow_required_attributes",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_workflow_step_names_1": {
            "name": "test_get_workflow_step_names_1",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_workflow_step_names_2": {
            "name": "test_get_workflow_step_names_2",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_workflow_step_names_3": {
            "name": "test_get_workflow_step_names_3",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_workflow_step_names_4": {
            "name": "test_get_workflow_step_names_4",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_required_num_cores_coresmin": {
            "name": "test_get_required_num_cores_coresmin",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_required_num_cores_coresmax": {
            "name": "test_get_required_num_cores_coresmax",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_required_num_cores_both": {
            "name": "test_get_required_num_cores_both",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_required_num_cores_default": {
            "name": "test_get_required_num_cores_default",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_time_limit": {
            "name": "test_get_time_limit",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_time_limit2": {
            "name": "test_get_time_limit2",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_time_limit": {
            "name": "test_no_time_limit",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_time_limit2": {
            "name": "test_no_time_limit2",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_files_from_binding": {
            "name": "test_get_files_from_binding",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_files_from_binding_directory_1": {
            "name": "test_get_files_from_binding_directory_1",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_files_from_binding_directory_2": {
            "name": "test_get_files_from_binding_directory_2",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_cwltool_result": {
            "name": "test_get_cwltool_result",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerise-develop/cerise/back_end/test/test_job_planner.py": {
        "test_job_planner_init": {
            "name": "test_job_planner_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [],
                "mock_store_resolved": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "local_api_dir": []
            }
        },
        "test_plan_job": {
            "name": "test_plan_job",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [],
                "mock_store_resolved": [],
                "local_api_dir": []
            }
        }
    },
    "cerise-develop/cerise/back_end/test/test_job_runner.py": {
        "_stage_test_api": {
            "name": "_stage_test_api",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "local_api_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "remote_api_dir": [
                    "pathlib.Path",
                    "Optional[Callable[[pathlib.Path], int]]"
                ]
            }
        },
        "runner_store": {
            "name": "runner_store",
            "location": 31,
            "return": [
                "tuple[typing.Union[JobRunner,dict[str, typing.Any],typing.Any,str,None]]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "mock_config": [
                    "pathlib.Path",
                    "Tuple[str, Dict[str, Any]]",
                    "Set[str]"
                ],
                "mock_store_staged": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Tuple[Any, Optional[str]]",
                    "tuple[typing.Union[typing.Any,str,None]]"
                ],
                "local_api_dir": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "_wait_for_state": {
            "name": "_wait_for_state",
            "location": 43,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "store": [
                    "Exception",
                    "str"
                ],
                "job_runner": [
                    "List[str]",
                    "List[List[int]]",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "state": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]",
                    "Optional[int]",
                    "None"
                ],
                "timeout": [
                    "float",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "str",
                    "int",
                    "Union[int, Tuple[int, ...]]"
                ]
            }
        },
        "test_start_job": {
            "name": "test_start_job",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "runner_store": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ],
                "mock_config": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "runner_store": [
                    "bool",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "test_cancel": {
            "name": "test_cancel",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "runner_store": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/test/test_local_files.py": {
        "output_dir": {
            "name": "output_dir",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "mock_config": [
                    "dict",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "_assert_local_files_are_equal": {
            "name": "_assert_local_files_are_equal",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "reference_input_file": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "prefix": [
                    "str",
                    "List[str]",
                    "int",
                    "list[str]",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "test_resolve_input": {
            "name": "test_resolve_input",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [],
                "mock_store_submitted": []
            }
        },
        "test_create_output_dir": {
            "name": "test_create_output_dir",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mock_store_destaged": [
                    "str"
                ],
                "output_dir": []
            }
        },
        "test_delete_output_dir": {
            "name": "test_delete_output_dir",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [
                    "str"
                ],
                "mock_store_destaged": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "output_dir": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_publish_output": {
            "name": "test_publish_output",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mock_store_destaged": [
                    "str"
                ],
                "output_dir": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/test/test_remote_api.py": {
        "installed_api_dir": {
            "name": "installed_api_dir",
            "location": 11,
            "return": [
                "str",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_config": [
                    "dict",
                    "str"
                ],
                "local_api_dir": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "cerise.config.Config",
                    "dict"
                ]
            }
        },
        "remote_api": {
            "name": "remote_api",
            "location": 18,
            "return": [
                "RemoteApi",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "mock_config": [
                    "str",
                    "int",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "typing.IO",
                    "IO[bytes]",
                    "Union[str, BinaryIO]"
                ],
                "local_api_dir": [
                    "str",
                    "int",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "typing.IO",
                    "IO[bytes]",
                    "Union[str, BinaryIO]"
                ]
            }
        },
        "test_install": {
            "name": "test_install",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "installed_api_dir": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "installed_api_dir": [],
                "mock_config": []
            }
        },
        "test_dev_update": {
            "name": "test_dev_update",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "installed_api_dir": [],
                "mock_config": [],
                "local_api_dir": []
            }
        },
        "test_get_projects": {
            "name": "test_get_projects",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_api": []
            }
        },
        "test_translate_runner_location": {
            "name": "test_translate_runner_location",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "installed_api_dir": [],
                "mock_config": [],
                "remote_api": []
            }
        },
        "test_translate_workflow": {
            "name": "test_translate_workflow",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_store_submitted": [],
                "remote_api": [],
                "mock_config": [
                    "bool"
                ]
            }
        }
    },
    "cerise-develop/cerise/back_end/test/test_remote_job_files.py": {
        "_assert_remote_files_are_equal": {
            "name": "_assert_remote_files_are_equal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "reference_output_file": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "prefix": []
            }
        },
        "test_stage_job": {
            "name": "test_stage_job",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [],
                "mock_store_resolved": []
            }
        },
        "test_update_job": {
            "name": "test_update_job",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [],
                "mock_store_run": []
            }
        },
        "test_destage_job": {
            "name": "test_destage_job",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [
                    "str"
                ],
                "mock_store_run_and_updated": [
                    "str"
                ]
            }
        },
        "test_delete_job": {
            "name": "test_delete_job",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": [],
                "mock_store_run_and_updated": []
            }
        }
    },
    "cerise-develop/cerise/back_end/test/__init__.py": {},
    "cerise-develop/cerise/front_end/encoder.py": {
        "JSONEncoder.default": {
            "name": "default",
            "location": 9,
            "return": [
                "dict[, ]",
                "List[int]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/util.py": {
        "_deserialize": {
            "name": "_deserialize",
            "location": 6,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "klass": [
                    "Mapping[str, object]",
                    "typing.Mapping"
                ]
            }
        },
        "_deserialize_primitive": {
            "name": "_deserialize_primitive",
            "location": 35,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "list[list[int]]",
                "bytes",
                "dict[, ]",
                "bytearray",
                "memoryview"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Union[bytes, bytearray, memoryview]",
                    "bytearray",
                    "memoryview"
                ],
                "klass": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "str",
                    "T"
                ]
            }
        },
        "_deserialize_object": {
            "name": "_deserialize_object",
            "location": 54,
            "return": [
                "_T0"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ]
            }
        },
        "deserialize_date": {
            "name": "deserialize_date",
            "location": 63,
            "return": [
                "Union[(_datetime.date, _T0)]"
            ],
            "arguments": {
                "string": [
                    "_T0"
                ]
            }
        },
        "deserialize_datetime": {
            "name": "deserialize_datetime",
            "location": 79,
            "return": [
                "Union[(_datetime.datetime, _T0)]"
            ],
            "arguments": {
                "string": [
                    "_T0"
                ]
            }
        },
        "deserialize_model": {
            "name": "deserialize_model",
            "location": 97,
            "return": [
                "str",
                "dict[, ]",
                "float",
                "int",
                "Sequence",
                "dict[typing.AbstractSet, set[typing.Any]]",
                "Dict[str, Any]",
                "None",
                "dict[str, typing.Any]",
                "list[int]",
                "dict[str, str]",
                "dict[str, typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[AbstractSet[str], Set[Any]]",
                    "dict[typing.AbstractSet, set[typing.Any]]",
                    "Union[None, int, str]",
                    "Dict[str, Any]",
                    "None",
                    "List[int]",
                    "int",
                    "Dict[str, str]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[int]",
                    "dict[str, str]"
                ],
                "klass": [
                    "bool",
                    "str"
                ]
            }
        },
        "_deserialize_list": {
            "name": "_deserialize_list",
            "location": 121,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Tuple[dict, int]",
                    "tuple[typing.Union[dict[, ],int]]",
                    "Set[str]",
                    "set[str]",
                    "Tuple[bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes]]"
                ],
                "boxed_type": [
                    "str",
                    "Tuple[dict, int]",
                    "tuple[typing.Union[dict[, ],int]]",
                    "Set[str]",
                    "set[str]",
                    "Tuple[bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes]]"
                ]
            }
        },
        "_deserialize_dict": {
            "name": "_deserialize_dict",
            "location": 137,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Pattern[str]",
                    "typing.Pattern",
                    "dict",
                    "dict[, ]"
                ],
                "boxed_type": [
                    "str",
                    "Pattern[str]",
                    "typing.Pattern",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/__init__.py": {},
    "cerise-develop/cerise/front_end/controllers/default_controller.py": {
        "_internal_job_to_rest_job": {
            "name": "_internal_job_to_rest_job",
            "location": 14,
            "return": [
                "Job",
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "job": [
                    "str",
                    "bytes",
                    "Union[int, float]",
                    "int",
                    "Optional[float]",
                    "float",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "cancel_job_by_id": {
            "name": "cancel_job_by_id",
            "location": 34,
            "return": [
                "Optional[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "jobId": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_job_by_id": {
            "name": "delete_job_by_id",
            "location": 58,
            "return": [
                "Tuple[(None, int)]"
            ],
            "arguments": {
                "jobId": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "get_job_by_id": {
            "name": "get_job_by_id",
            "location": 74,
            "return": [
                "Optional[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "jobId": [
                    "str",
                    "None",
                    "Optional[str]",
                    "transfer.models.SnippetID"
                ]
            }
        },
        "get_job_log_by_id": {
            "name": "get_job_log_by_id",
            "location": 91,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "jobId": [
                    "str",
                    "None",
                    "Optional[str]",
                    "transfer.models.SnippetID"
                ]
            }
        },
        "get_jobs": {
            "name": "get_jobs",
            "location": 108,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "post_job": {
            "name": "post_job",
            "location": 120,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/controllers/__init__.py": {},
    "cerise-develop/cerise/front_end/models/base_model_.py": {
        "Model.from_dict": {
            "name": "from_dict",
            "location": 17,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "dikt": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "dict",
                    "Optional[int]",
                    "dict[, ]"
                ]
            }
        },
        "Model.to_dict": {
            "name": "to_dict",
            "location": 23,
            "return": [
                "Dict[(nothing, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.to_str": {
            "name": "to_str",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Model.__ne__": {
            "name": "__ne__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/models/job.py": {
        "Job.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "workflow": [
                    "str"
                ],
                "input": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "state": [
                    "str"
                ],
                "output": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "log": [
                    "str"
                ]
            }
        },
        "Job.from_dict": {
            "name": "from_dict",
            "location": 63,
            "return": [
                "Job"
            ],
            "arguments": {
                "cls": [
                    "Type[_TJob]"
                ],
                "dikt": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "dict",
                    "Optional[int]",
                    "dict[, ]"
                ]
            }
        },
        "Job.id": {
            "name": "id",
            "location": 85,
            "return": [
                "",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Job.name": {
            "name": "name",
            "location": 109,
            "return": [
                "",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "Job.workflow": {
            "name": "workflow",
            "location": 134,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[models.PersonModel]",
                    "bool"
                ]
            }
        },
        "Job.input": {
            "name": "input",
            "location": 158,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[models.PersonModel]",
                    "bool"
                ]
            }
        },
        "Job.state": {
            "name": "state",
            "location": 181,
            "return": [
                "",
                "str",
                "tuple[typing.Union[int,str]]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "str"
                ]
            }
        },
        "Job.output": {
            "name": "output",
            "location": 208,
            "return": [
                "",
                "str",
                "list[int]",
                "int",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "front_end.models.workflow_binding.WorkflowBinding",
                    "Optional[str]",
                    "List[AnyStr]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Job.log": {
            "name": "log",
            "location": 231,
            "return": [
                "",
                "typing.Deque",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "int",
                    "datetime.datetime",
                    "float",
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/models/job_description.py": {
        "JobDescription.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "workflow": [
                    "str"
                ],
                "input": [
                    "int",
                    "None",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "JobDescription.from_dict": {
            "name": "from_dict",
            "location": 43,
            "return": [
                "JobDescription"
            ],
            "arguments": {
                "cls": [
                    "Type[_TJobDescription]"
                ],
                "dikt": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "dict",
                    "Optional[int]",
                    "dict[, ]"
                ]
            }
        },
        "JobDescription.name": {
            "name": "name",
            "location": 66,
            "return": [
                "",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JobDescription.workflow": {
            "name": "workflow",
            "location": 89,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[models.PersonModel]",
                    "bool"
                ]
            }
        },
        "JobDescription.input": {
            "name": "input",
            "location": 113,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/models/workflow_binding.py": {
        "WorkflowBinding.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowBinding.from_dict": {
            "name": "from_dict",
            "location": 29,
            "return": [
                "WorkflowBinding"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWorkflowBinding]"
                ],
                "dikt": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "dict",
                    "Optional[int]",
                    "dict[, ]"
                ]
            }
        }
    },
    "cerise-develop/cerise/front_end/models/__init__.py": {},
    "cerise-develop/cerise/job_store/job_state.py": {
        "JobState.is_final": {
            "name": "is_final",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": [
                    "JobState"
                ]
            }
        },
        "JobState.cancellation_active": {
            "name": "cancellation_active",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": [
                    "JobState"
                ]
            }
        },
        "JobState.is_remote": {
            "name": "is_remote",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": [
                    "JobState"
                ]
            }
        },
        "JobState.to_cwl_state_string": {
            "name": "to_cwl_state_string",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "state": [
                    "JobState"
                ]
            }
        }
    },
    "cerise-develop/cerise/job_store/sqlite_job.py": {
        "SQLiteJob.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "Dict[str, T]",
                    "dict[str, T]",
                    "Iterable[int]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "job_id": [
                    "str"
                ]
            }
        },
        "SQLiteJob.name": {
            "name": "name",
            "location": 34,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteJob.workflow": {
            "name": "workflow",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteJob.local_input": {
            "name": "local_input",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteJob.state": {
            "name": "state",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "dict"
                ]
            }
        },
        "SQLiteJob.resolve_retry_count": {
            "name": "resolve_retry_count",
            "location": 70,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable",
                    "str",
                    "List[float]",
                    "int",
                    "T",
                    "Union[bool, Any]"
                ]
            }
        },
        "SQLiteJob.please_delete": {
            "name": "please_delete",
            "location": 80,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Union[int, float]",
                    "Iterable[str]"
                ]
            }
        },
        "SQLiteJob.log": {
            "name": "log",
            "location": 84,
            "return": [
                "typing.Text",
                "int",
                "List[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteJob.remote_output": {
            "name": "remote_output",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable",
                    "int",
                    "str",
                    "dict",
                    "Callable[[object], Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SQLiteJob.remote_error": {
            "name": "remote_error",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable",
                    "str",
                    "T",
                    "int",
                    "Callable[[object], Any]"
                ]
            }
        },
        "SQLiteJob.workflow_content": {
            "name": "workflow_content",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "Iterable",
                    "Callable[[T], None]",
                    "bool",
                    "dict"
                ]
            }
        },
        "SQLiteJob.required_num_cores": {
            "name": "required_num_cores",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "bool",
                    "Union[str]",
                    "float"
                ]
            }
        },
        "SQLiteJob.time_limit": {
            "name": "time_limit",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable",
                    "int",
                    "str",
                    "List[str]",
                    "Optional[bool]",
                    "Union[bool, str, None]"
                ]
            }
        },
        "SQLiteJob.remote_workdir_path": {
            "name": "remote_workdir_path",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLiteJob.remote_workflow_path": {
            "name": "remote_workflow_path",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLiteJob.remote_input_path": {
            "name": "remote_input_path",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLiteJob.remote_stdout_path": {
            "name": "remote_stdout_path",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLiteJob.remote_stderr_path": {
            "name": "remote_stderr_path",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLiteJob.remote_system_out_path": {
            "name": "remote_system_out_path",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "SQLiteJob.remote_system_err_path": {
            "name": "remote_system_err_path",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, str]",
                    "Optional[Iterable]",
                    "dict"
                ]
            }
        },
        "SQLiteJob.local_output": {
            "name": "local_output",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable",
                    "int",
                    "str",
                    "dict",
                    "Callable[[object], Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SQLiteJob.remote_job_id": {
            "name": "remote_job_id",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable",
                    "Mapping[str, str]",
                    "dict",
                    "list"
                ]
            }
        },
        "SQLiteJob.try_transition": {
            "name": "try_transition",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "from_state": [
                    "cerise.job_store.job_state.JobState"
                ],
                "to_state": [
                    "cerise.job_store.job_state.JobState"
                ]
            }
        },
        "SQLiteJob.add_log": {
            "name": "add_log",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "message": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "SQLiteJob.debug": {
            "name": "debug",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "SQLiteJob.info": {
            "name": "info",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "SQLiteJob.warning": {
            "name": "warning",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "SQLiteJob.error": {
            "name": "error",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "SQLiteJob.critical": {
            "name": "critical",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "SQLiteJob._get_var": {
            "name": "_get_var",
            "location": 328,
            "return": [
                "Union[(bytes, int, str)]"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "str"
                ]
            }
        },
        "SQLiteJob._set_var": {
            "name": "_set_var",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "str"
                ],
                "value": [
                    "Union[(bytes, int, str)]"
                ]
            }
        }
    },
    "cerise-develop/cerise/job_store/sqlite_job_store.py": {
        "SQLiteJobStore.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbfile": [
                    "str"
                ]
            }
        },
        "SQLiteJobStore.__enter__": {
            "name": "__enter__",
            "location": 87,
            "return": [
                "SQLiteJobStore"
            ],
            "arguments": {
                "self": [
                    "_TSQLiteJobStore"
                ]
            }
        },
        "SQLiteJobStore.__exit__": {
            "name": "__exit__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[types.TracebackType]"
                ]
            }
        },
        "SQLiteJobStore.create_job": {
            "name": "create_job",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "workflow": [
                    "str"
                ],
                "job_input": [
                    "str"
                ]
            }
        },
        "SQLiteJobStore.list_jobs": {
            "name": "list_jobs",
            "location": 165,
            "return": [
                "List[cerise.job_store.sqlite_job.SQLiteJob]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteJobStore.get_job": {
            "name": "get_job",
            "location": 177,
            "return": [
                "cerise.job_store.sqlite_job.SQLiteJob"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "SQLiteJobStore.delete_job": {
            "name": "delete_job",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/job_store/__init__.py": {},
    "cerise-develop/cerise/job_store/test/test_job_state.py": {
        "test_is_final": {
            "name": "test_is_final",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cancellation_active": {
            "name": "test_cancellation_active",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_remote": {
            "name": "test_is_remote",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_cwl_state_string": {
            "name": "test_to_cwl_state_string",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerise-develop/cerise/job_store/test/test_sqlite_job_store.py": {
        "db_name": {
            "name": "db_name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "empty_db": {
            "name": "empty_db",
            "location": 17,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str],list[]]]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "db_name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "inited_db": {
            "name": "inited_db",
            "location": 22,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "empty_db": [
                    "int"
                ]
            }
        },
        "workflow_content": {
            "name": "workflow_content",
            "location": 56,
            "return": [
                "typing.Text",
                "str",
                "Callable",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "local_input": {
            "name": "local_input",
            "location": 61,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "onejob_db": {
            "name": "onejob_db",
            "location": 66,
            "return": [
                "str",
                "int",
                "list[list[int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "inited_db": [
                    "str",
                    "list[list[int]]",
                    "Optional[str]",
                    "List[List[int]]",
                    "dict"
                ],
                "workflow_content": [
                    "str",
                    "int",
                    "bytes"
                ],
                "local_input": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "empty_store": {
            "name": "empty_store",
            "location": 81,
            "return": [
                "dict[typing.Text, typing.Union[str,SQLiteJobStore]]",
                "bool",
                "Callable",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": [
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "empty_db": [
                    "str",
                    "int"
                ]
            }
        },
        "onejob_store": {
            "name": "onejob_store",
            "location": 89,
            "return": [
                "dict[typing.Text, typing.Union[str,SQLiteJobStore]]",
                "bool",
                "Callable",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": [
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "onejob_db": [
                    "str",
                    "int"
                ]
            }
        },
        "job": {
            "name": "job",
            "location": 97,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "onejob_store": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "test_create_store": {
            "name": "test_create_store",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "db_name": [
                    "str",
                    "Iterator[bytes]",
                    "typing.Iterator"
                ]
            }
        },
        "test_open_existing_store": {
            "name": "test_open_existing_store",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_open_existing_store_data": {
            "name": "test_open_existing_store_data",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "onejob_db": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_create_job": {
            "name": "test_create_job",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "onejob_store": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_jobs_empty": {
            "name": "test_list_jobs_empty",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_store": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_list_jobs": {
            "name": "test_list_jobs",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "onejob_store": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_get_job": {
            "name": "test_get_job",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "onejob_store": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_delete_job": {
            "name": "test_delete_job",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "onejob_store": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "test_reading_name": {
            "name": "test_reading_name",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_reading_workflow": {
            "name": "test_reading_workflow",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [],
                "workflow_content": []
            }
        },
        "test_reading_local_input": {
            "name": "test_reading_local_input",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str",
                    "float"
                ],
                "local_input": [
                    "str",
                    "float"
                ]
            }
        },
        "test_reading_state": {
            "name": "test_reading_state",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "int"
                ]
            }
        },
        "test_setting_state": {
            "name": "test_setting_state",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "int"
                ]
            }
        },
        "test_reading_please_delete": {
            "name": "test_reading_please_delete",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_setting_please_delete": {
            "name": "test_setting_please_delete",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_state_transitions": {
            "name": "test_state_transitions",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_log": {
            "name": "test_set_get_log",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "logging.Logger"
                ]
            }
        },
        "test_set_get_output": {
            "name": "test_set_get_output",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str"
                ]
            }
        },
        "test_set_get_workflow_content": {
            "name": "test_set_get_workflow_content",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [],
                "workflow_content": []
            }
        },
        "test_set_get_remote_workdir_path": {
            "name": "test_set_get_remote_workdir_path",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_remote_workflow_path": {
            "name": "test_set_get_remote_workflow_path",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_remote_input_path": {
            "name": "test_set_get_remote_input_path",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_remote_stdout_path": {
            "name": "test_set_get_remote_stdout_path",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_remote_stderr_path": {
            "name": "test_set_get_remote_stderr_path",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_remote_system_out_path": {
            "name": "test_set_get_remote_system_out_path",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "job": []
            }
        },
        "test_set_get_remote_system_err_path": {
            "name": "test_set_get_remote_system_err_path",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "bytes"
                ]
            }
        },
        "test_set_get_local_output": {
            "name": "test_set_get_local_output",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str"
                ]
            }
        },
        "test_set_get_remote_job_id": {
            "name": "test_set_get_remote_job_id",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str"
                ]
            }
        }
    },
    "cerise-develop/cerise/test/fixture_jobs.py": {
        "PassJob.local_input": {
            "name": "local_input",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "PassJob"
                ]
            }
        },
        "PassJob.remote_input": {
            "name": "remote_input",
            "location": 31,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "PassJob"
                ]
            }
        },
        "PassJob.remote_output": {
            "name": "remote_output",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "PassJob"
                ]
            }
        },
        "HostnameJob.local_input": {
            "name": "local_input",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "HostnameJob"
                ]
            }
        },
        "HostnameJob.remote_input": {
            "name": "remote_input",
            "location": 81,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "HostnameJob"
                ]
            }
        },
        "HostnameJob.remote_output": {
            "name": "remote_output",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "HostnameJob"
                ]
            }
        },
        "WcJob.local_input": {
            "name": "local_input",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "WcJob"
                ]
            }
        },
        "WcJob.remote_input": {
            "name": "remote_input",
            "location": 144,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "WcJob"
                ]
            }
        },
        "WcJob.remote_output": {
            "name": "remote_output",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "WcJob"
                ]
            }
        },
        "SlowJob.local_input": {
            "name": "local_input",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "SlowJob"
                ]
            }
        },
        "SlowJob.remote_input": {
            "name": "remote_input",
            "location": 200,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "SlowJob"
                ]
            }
        },
        "SlowJob.remote_output": {
            "name": "remote_output",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "SlowJob"
                ]
            }
        },
        "SecondaryFilesJob.local_input": {
            "name": "local_input",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "SecondaryFilesJob"
                ]
            }
        },
        "SecondaryFilesJob._make_local_input_files": {
            "name": "_make_local_input_files",
            "location": 252,
            "return": [
                "List[cerise.back_end.file.File]"
            ],
            "arguments": {}
        },
        "SecondaryFilesJob.remote_input": {
            "name": "remote_input",
            "location": 271,
            "return": [
                "Dict[(str, Dict[(str, Union[(str, List[Dict[(str, str)]])])])]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "SecondaryFilesJob"
                ]
            }
        },
        "SecondaryFilesJob.remote_output": {
            "name": "remote_output",
            "location": 295,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "SecondaryFilesJob"
                ]
            }
        },
        "FileArrayJob.local_input": {
            "name": "local_input",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "FileArrayJob"
                ]
            }
        },
        "FileArrayJob._make_local_input_files": {
            "name": "_make_local_input_files",
            "location": 345,
            "return": [
                "List[cerise.back_end.file.File]"
            ],
            "arguments": {}
        },
        "FileArrayJob.remote_input": {
            "name": "remote_input",
            "location": 364,
            "return": [
                "Dict[(str, List[Dict[(str, str)]])]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "FileArrayJob"
                ]
            }
        },
        "FileArrayJob.remote_output": {
            "name": "remote_output",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "FileArrayJob"
                ]
            }
        },
        "LongRunningJob.local_input": {
            "name": "local_input",
            "location": 417,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "LongRunningJob"
                ]
            }
        },
        "InstallScriptTestJob.local_input": {
            "name": "local_input",
            "location": 452,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "InstallScriptTestJob"
                ]
            }
        },
        "InstallScriptTestJob.remote_output": {
            "name": "remote_output",
            "location": 463,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "InstallScriptTestJob"
                ]
            }
        },
        "PartiallyFailingJob.local_input": {
            "name": "local_input",
            "location": 497,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "PartiallyFailingJob"
                ]
            }
        },
        "PartiallyFailingJob.remote_input": {
            "name": "remote_input",
            "location": 508,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "PartiallyFailingJob"
                ]
            }
        },
        "PartiallyFailingJob.remote_output": {
            "name": "remote_output",
            "location": 513,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "PartiallyFailingJob"
                ]
            }
        },
        "NoSuchStepJob.local_input": {
            "name": "local_input",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "NoSuchStepJob"
                ]
            }
        },
        "NoSuchStepJob.remote_input": {
            "name": "remote_input",
            "location": 554,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "NoSuchStepJob"
                ]
            }
        },
        "NoSuchStepJob.remote_output": {
            "name": "remote_output",
            "location": 559,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "NoSuchStepJob"
                ]
            }
        },
        "MissingInputJob.local_input": {
            "name": "local_input",
            "location": 594,
            "return": [
                "str"
            ],
            "arguments": {
                "local_baseurl": [
                    "MissingInputJob"
                ]
            }
        },
        "MissingInputJob.remote_input": {
            "name": "remote_input",
            "location": 606,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "MissingInputJob"
                ]
            }
        },
        "BrokenJob.local_input": {
            "name": "local_input",
            "location": 631,
            "return": [
                "str"
            ],
            "arguments": {
                "local_base_url": [
                    "BrokenJob"
                ]
            }
        },
        "BrokenJob.remote_input": {
            "name": "remote_input",
            "location": 643,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "BrokenJob"
                ]
            }
        },
        "BrokenJob.remote_output": {
            "name": "remote_output",
            "location": 648,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "BrokenJob"
                ]
            }
        },
        "NoWorkflowJob.local_input": {
            "name": "local_input",
            "location": 661,
            "return": [
                "str"
            ],
            "arguments": {
                "local_base_url": [
                    "NoWorkflowJob"
                ]
            }
        },
        "NoWorkflowJob.remote_input": {
            "name": "remote_input",
            "location": 672,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "NoWorkflowJob"
                ]
            }
        },
        "NoWorkflowJob.remote_output": {
            "name": "remote_output",
            "location": 677,
            "return": [
                "str"
            ],
            "arguments": {
                "job_remote_workdir": [
                    "NoWorkflowJob"
                ]
            }
        }
    },
    "cerise-develop/cerise/test/test_config.py": {
        "config_0": {
            "name": "config_0",
            "location": 10,
            "return": [
                "",
                "typing.Generator[Config]"
            ],
            "arguments": {}
        },
        "config_1": {
            "name": "config_1",
            "location": 17,
            "return": [
                "",
                "typing.Generator[Config]"
            ],
            "arguments": {}
        },
        "test_create_config": {
            "name": "test_create_config",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "config_1": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_get_service_host": {
            "name": "test_get_service_host",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_service_port": {
            "name": "test_get_service_port",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_username": {
            "name": "test_get_username",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "config_1": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "sphinx.config.Config",
                    "cerise.config.Config",
                    "lightbus.config.Config"
                ]
            }
        },
        "test_get_remote_cwl_runner": {
            "name": "test_get_remote_cwl_runner",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_basedir": {
            "name": "test_get_basedir",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "config_1": [
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_get_queue_name": {
            "name": "test_get_queue_name",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "None",
                    "dict",
                    "config.Config"
                ],
                "config_1": [
                    "str",
                    "sphinx.config.Config",
                    "dict[, ]",
                    "cmk.base.config.HostConfig",
                    "dict"
                ]
            }
        },
        "test_get_slots_per_node": {
            "name": "test_get_slots_per_node",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_cores_per_node": {
            "name": "test_get_cores_per_node",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_remote_refresh": {
            "name": "test_get_remote_refresh",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_database_location": {
            "name": "test_get_database_location",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "dict",
                    "Callable",
                    "int",
                    "pyramid.config.Configurator"
                ],
                "config_1": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "test_get_pid_file": {
            "name": "test_get_pid_file",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "config.ConfigStorage"
                ],
                "config_1": [
                    "int",
                    "str",
                    "dict[, ]",
                    "pyramid.config.Configurator",
                    "dict",
                    "virgene.config.Config"
                ]
            }
        },
        "test_has_logging": {
            "name": "test_has_logging",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [],
                "config_1": []
            }
        },
        "test_get_log_file": {
            "name": "test_get_log_file",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "bool"
                ],
                "config_1": [
                    "str",
                    "bool",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "test_get_log_level": {
            "name": "test_get_log_level",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "dict[, ]",
                    "cmk.base.config.ConfigCache",
                    "dict"
                ],
                "config_1": [
                    "dict[, ]",
                    "cmk.base.config.ConfigCache",
                    "typing.Mapping",
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "config.Config"
                ]
            }
        },
        "test_get_store_location_service": {
            "name": "test_get_store_location_service",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "dict",
                    "config.Config"
                ],
                "config_1": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_get_store_location_client": {
            "name": "test_get_store_location_client",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "config_0": [
                    "dict"
                ],
                "config_1": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cerise-develop/cerise/test/test_service.py": {
        "clear_old_container": {
            "name": "clear_old_container",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "wait_for_container": {
            "name": "wait_for_container",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "container": [
                    "str",
                    "docker.DockerClient",
                    "bool",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "clean_up_old_containers": {
            "name": "clean_up_old_containers",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "slurm_container": {
            "name": "slurm_container",
            "location": 48,
            "return": [],
            "arguments": {
                "clean_up_old_containers": []
            }
        },
        "cerise_service": {
            "name": "cerise_service",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "slurm_container": [
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "webdav_client": {
            "name": "webdav_client",
            "location": 104,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "cerise_client": {
            "name": "cerise_client",
            "location": 109,
            "return": [
                "str",
                "pathlib.Path",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "job_fixture_success": {
            "name": "job_fixture_success",
            "location": 144,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "job_fixture_permfail": {
            "name": "job_fixture_permfail",
            "location": 152,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "debug_output": {
            "name": "debug_output",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "tmpdir": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "cerise_client": [
                    "bool"
                ]
            }
        },
        "debug_print_log": {
            "name": "debug_print_log",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "int"
                ],
                "cerise_client": [
                    "bool",
                    "str"
                ]
            }
        },
        "_start_job": {
            "name": "_start_job",
            "location": 206,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "cerise_client": [
                    "str"
                ],
                "webdav_client": [
                    "str",
                    "docker.DockerClient"
                ],
                "job_fixture": [
                    "str",
                    "type",
                    "Type['Declared']"
                ],
                "test_name": [
                    "str",
                    "Optional[str]",
                    "docker.DockerClient"
                ]
            }
        },
        "_wait_for_state": {
            "name": "_wait_for_state",
            "location": 251,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "states": [
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "cerise_client": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "_drop_connections": {
            "name": "_drop_connections",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "slurm_container": [
                    "float"
                ]
            }
        },
        "_drop_network": {
            "name": "_drop_network",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "slurm_container": []
            }
        },
        "_restore_network": {
            "name": "_restore_network",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "slurm_container": [
                    "float"
                ]
            }
        },
        "test_get_jobs": {
            "name": "test_get_jobs",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [
                    "dict"
                ]
            }
        },
        "test_api_install_script": {
            "name": "test_api_install_script",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [
                    "str"
                ],
                "webdav_client": []
            }
        },
        "test_run_job": {
            "name": "test_run_job",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [
                    "io.BytesIO"
                ],
                "webdav_client": [
                    "pathlib.Path"
                ],
                "job_fixture_success": [
                    "pathlib.Path"
                ]
            }
        },
        "test_run_broken_job": {
            "name": "test_run_broken_job",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [],
                "webdav_client": [
                    "pathlib.Path"
                ],
                "job_fixture_permfail": [
                    "pathlib.Path"
                ]
            }
        },
        "test_get_job_by_id": {
            "name": "test_get_job_by_id",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [],
                "webdav_client": []
            }
        },
        "test_get_job_log_by_id": {
            "name": "test_get_job_log_by_id",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [],
                "webdav_client": []
            }
        },
        "test_cancel_waiting_job": {
            "name": "test_cancel_waiting_job",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [
                    "str"
                ],
                "webdav_client": []
            }
        },
        "test_cancel_running_job": {
            "name": "test_cancel_running_job",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [],
                "webdav_client": []
            }
        },
        "test_delete_job": {
            "name": "test_delete_job",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [
                    "str"
                ],
                "webdav_client": []
            }
        },
        "test_delete_running_job": {
            "name": "test_delete_running_job",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Callable[[], int]",
                    "bool"
                ],
                "cerise_client": [],
                "webdav_client": []
            }
        },
        "test_restart_service": {
            "name": "test_restart_service",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [],
                "cerise_client": [
                    "str",
                    "Dict[str, Any]"
                ],
                "webdav_client": [
                    "pathlib.Path"
                ],
                "slurm_container": [
                    "Callable",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "test_dropped_ssh_connection": {
            "name": "test_dropped_ssh_connection",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [],
                "cerise_client": [
                    "str"
                ],
                "webdav_client": [
                    "pathlib.Path"
                ],
                "slurm_container": [
                    "List[Tuple[int, int, float]]"
                ],
                "debug_print_log": []
            }
        },
        "test_no_resource_connection": {
            "name": "test_no_resource_connection",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "cerise_service": [
                    "Generator[None, Any, None]"
                ],
                "cerise_client": [
                    "str"
                ],
                "webdav_client": [],
                "slurm_container": [
                    "float"
                ],
                "debug_print_log": [
                    "Generator[None, Any, None]"
                ]
            }
        },
        "_wait_for_state.get_state": {
            "name": "get_state",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cerise-develop/cerise/test/__init__.py": {},
    "cerise-develop/docs/examples/specialisation/test_script.py": {},
    "cerise-develop/docs/examples/specialisation/test_script2.py": {},
    "cerise-develop/docs/source/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cerise-develop/examples/example.py": {}
}
{
    "cerulean-master/setup.py": {},
    "cerulean-master/cerulean/copy_files.py": {
        "copy": {
            "name": "copy",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "bool",
                    "None",
                    "Optional[Union[str,pathlib.Path]]",
                    "pathlib.Path"
                ],
                "target_path": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[Union[str, pathlib.Path]]",
                    "pathlib.Path"
                ],
                "overwrite": [
                    "Text",
                    "Union[str,pathlib.Path]",
                    "Optional[Union[str,pathlib.Path]]",
                    "bool"
                ],
                "copy_into": [
                    "bool",
                    "str",
                    "Union[str,pathlib.Path]",
                    "Optional[str]"
                ],
                "copy_permissions": [
                    "bool",
                    "Union[str,pathlib.Path]",
                    "Optional[Union[str,pathlib.Path]]"
                ],
                "callback": [
                    "None",
                    "Optional[Set[int]]",
                    "Set[int]",
                    "Optional[str]",
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "_copy": {
            "name": "_copy",
            "location": 92,
            "return": [
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "cerulean.path.Path",
                    "Optional[str]",
                    "pathlib.Path",
                    "\"CharSource\""
                ],
                "target_path": [
                    "str",
                    "cerulean.path.Path",
                    "pathlib.Path"
                ],
                "overwrite": [
                    "str",
                    "bool",
                    "List[str]",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "copy_permissions": [
                    "str",
                    "bool",
                    "Union[pathlib.Path,str]"
                ],
                "context": [
                    "str",
                    "bool",
                    "List[str]",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "callback": [
                    "str",
                    "bool",
                    "Union[pathlib.Path,str]"
                ],
                "already_written": [
                    "str",
                    "bool",
                    "Union[pathlib.Path,str]"
                ],
                "size": [
                    "str",
                    "bool",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "_copy_symlink": {
            "name": "_copy_symlink",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "pathlib.Path"
                ],
                "target_path": [
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "overwrite": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "int"
                ],
                "context": [
                    "None",
                    "str",
                    "Optional[cerulean.path.Path]",
                    "List",
                    "Optional[str]",
                    "pathlib.Path",
                    "Path"
                ]
            }
        },
        "_copy_file": {
            "name": "_copy_file",
            "location": 169,
            "return": [
                "pathlib.Path",
                "str",
                "int",
                "bool",
                "Any",
                "None"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "cerulean.path.Path",
                    "pathlib.Path"
                ],
                "target_path": [
                    "str",
                    "Optional[str]",
                    "Union[pathlib.Path, str]"
                ],
                "overwrite": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "waterbutler.core.path.WaterButlerPath"
                ],
                "copy_permissions": [
                    "bool",
                    "str"
                ],
                "callback": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "already_written": [
                    "int",
                    "str",
                    "Any",
                    "bool",
                    "None",
                    "Optional[Union[Any,str]]",
                    "pathlib.Path"
                ],
                "size": [
                    "int",
                    "str",
                    "Any",
                    "bool",
                    "None",
                    "Optional[Union[Any,str]]",
                    "pathlib.Path"
                ]
            }
        },
        "_call_back": {
            "name": "_call_back",
            "location": 222,
            "return": [
                "Generator[bytes,None,None]",
                "Generator"
            ],
            "arguments": {
                "callback": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "None",
                    "Optional[Any]",
                    "float",
                    "Any"
                ],
                "next_callback": [
                    "float",
                    "int"
                ],
                "already_written": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ],
                "total_size": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "stream": [
                    "Iterable[bytes]",
                    "bool"
                ]
            }
        },
        "_copy_dir": {
            "name": "_copy_dir",
            "location": 237,
            "return": [
                "str",
                "TextIO",
                "pathlib.Path",
                "List[str]",
                "Type[Any]",
                "None",
                "Tuple",
                "Type"
            ],
            "arguments": {
                "source_path": [
                    "cerulean.path.Path",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "target_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "Optional[List[str]]"
                ],
                "overwrite": [
                    "TextIO",
                    "Optional[TextIO]",
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple",
                    "Optional[str]",
                    "Type",
                    "Type[T]"
                ],
                "copy_permissions": [
                    "TextIO",
                    "Optional[TextIO]",
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple",
                    "Optional[str]",
                    "Type",
                    "Type[T]"
                ],
                "context": [
                    "TextIO",
                    "Optional[TextIO]",
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple",
                    "Optional[str]",
                    "Type",
                    "Type[T]"
                ],
                "callback": [
                    "TextIO",
                    "Optional[TextIO]",
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple",
                    "Optional[str]",
                    "Type",
                    "Type[T]"
                ],
                "already_written": [
                    "TextIO",
                    "Optional[TextIO]",
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple",
                    "Optional[str]",
                    "Type",
                    "Type[T]"
                ],
                "size": [
                    "TextIO",
                    "Optional[TextIO]",
                    "str",
                    "None",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple",
                    "Optional[str]",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "_get_approx_size": {
            "name": "_get_approx_size",
            "location": 288,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "cerulean.path.Path",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/credential.py": {
        "PasswordCredential.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "PubKeyCredential.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "public_key": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Mapping",
                    "Tuple[bytes,bytes]",
                    "Dict[str,str]",
                    "Tuple[Union[bytes,bytes]]"
                ],
                "passphrase": [
                    "int",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "cerulean-master/cerulean/direct_gnu_scheduler.py": {
        "DirectGnuScheduler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terminal": [
                    "int",
                    "float",
                    "bool"
                ],
                "prefix": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DirectGnuScheduler.submit": {
            "name": "submit",
            "location": 37,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "job_description": [
                    "str",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "DirectGnuScheduler.get_status": {
            "name": "get_status",
            "location": 91,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "DirectGnuScheduler.get_exit_code": {
            "name": "get_exit_code",
            "location": 106,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "DirectGnuScheduler.cancel": {
            "name": "cancel",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/factory.py": {
        "make_file_system": {
            "name": "make_file_system",
            "location": 17,
            "return": [
                "str",
                "LocalFileSystem",
                "List[str]",
                "SftpFileSystem",
                "WebdavFileSystem"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "Optional[List[int]]",
                    "List[int]",
                    "None"
                ],
                "location": [
                    "str",
                    "int",
                    "None"
                ],
                "credential": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "make_terminal": {
            "name": "make_terminal",
            "location": 58,
            "return": [
                "LocalTerminal",
                "int",
                "SshTerminal",
                "Callable",
                "str"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "bool",
                    "List"
                ],
                "location": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Exception",
                    "Type",
                    "Optional[Exception]",
                    "Type[T]"
                ],
                "credential": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "make_scheduler": {
            "name": "make_scheduler",
            "location": 105,
            "return": [
                "int",
                "DirectGnuScheduler",
                "Callable",
                "SlurmScheduler",
                "str",
                "TorqueScheduler"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "terminal": [
                    "str",
                    "bool",
                    "None",
                    "float",
                    "cerulean.terminal.Terminal",
                    "Optional[str]"
                ],
                "prefix": [
                    "Text",
                    "str",
                    "cerulean.terminal.Terminal",
                    "Optional[str]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "cerulean-master/cerulean/file_system.py": {
        "FileSystem.__enter__": {
            "name": "__enter__",
            "location": 40,
            "return": [
                "FileSystem"
            ],
            "arguments": {
                "self": [
                    "_TFileSystem@@FileSystem@@"
                ]
            }
        },
        "FileSystem.__exit__": {
            "name": "__exit__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "FileSystem.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "FileSystem.close": {
            "name": "close",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystem.root": {
            "name": "root",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystem.__truediv__": {
            "name": "__truediv__",
            "location": 73,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "cerulean-master/cerulean/file_system_impl.py": {
        "FileSystemImpl._supports": {
            "name": "_supports",
            "location": 24,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FileSystemImpl._exists": {
            "name": "_exists",
            "location": 41,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._mkdir": {
            "name": "_mkdir",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "None",
                    "cerulean.path.AbstractPath",
                    "Optional[int]",
                    "cerulean.path.Permission"
                ],
                "mode": [
                    "bool",
                    "None",
                    "cerulean.path.AbstractPath",
                    "Optional[int]",
                    "cerulean.path.Permission"
                ],
                "parents": [
                    "bool",
                    "cerulean.path.AbstractPath",
                    "Optional[int]",
                    "cerulean.path.Permission"
                ],
                "exists_ok": [
                    "bool",
                    "cerulean.path.AbstractPath",
                    "Optional[int]",
                    "cerulean.path.Permission"
                ]
            }
        },
        "FileSystemImpl._iterdir": {
            "name": "_iterdir",
            "location": 51,
            "return": [
                "Generator[cerulean.path.AbstractPath,None,None]",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._rmdir": {
            "name": "_rmdir",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ],
                "recursive": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._touch": {
            "name": "_touch",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._streaming_read": {
            "name": "_streaming_read",
            "location": 64,
            "return": [
                "Generator[bytes,None,None]",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._streaming_write": {
            "name": "_streaming_write",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Iterable[bytes]",
                    "str",
                    "bytes",
                    "bool",
                    "cerulean.path.AbstractPath",
                    "int",
                    "List[Dict]"
                ],
                "data": [
                    "Iterable[bytes]",
                    "str",
                    "bytes",
                    "bool",
                    "cerulean.path.AbstractPath",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "FileSystemImpl._read_bytes": {
            "name": "_read_bytes",
            "location": 74,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,cerulean.path.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "FileSystemImpl._read_text": {
            "name": "_read_text",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes",
                    "cerulean.path.AbstractPath"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bytes"
                ],
                "errors": [
                    "Text",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bytes"
                ]
            }
        },
        "FileSystemImpl._write_bytes": {
            "name": "_write_bytes",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Dict",
                    "str",
                    "Tuple[Union[int,int]]",
                    "pathlib.Path",
                    "Tuple[int,int]"
                ],
                "data": [
                    "Dict",
                    "str",
                    "Tuple[Union[int,int]]",
                    "pathlib.Path",
                    "Tuple[int,int]"
                ]
            }
        },
        "FileSystemImpl._write_text": {
            "name": "_write_text",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ],
                "data": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ],
                "errors": [
                    "Text",
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ]
            }
        },
        "FileSystemImpl._rename": {
            "name": "_rename",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ],
                "target": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._unlink": {
            "name": "_unlink",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._is_dir": {
            "name": "_is_dir",
            "location": 105,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "Set[str]",
                    "cerulean.path.AbstractPath",
                    "str",
                    "List[P]",
                    "List[pathlib.Path]",
                    "Iterable[pathlib.Path]"
                ]
            }
        },
        "FileSystemImpl._is_file": {
            "name": "_is_file",
            "location": 109,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "Set[str]",
                    "cerulean.path.AbstractPath",
                    "str",
                    "pathlib.Path",
                    "Iterable[pathlib.Path]"
                ]
            }
        },
        "FileSystemImpl._is_symlink": {
            "name": "_is_symlink",
            "location": 113,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ]
            }
        },
        "FileSystemImpl._entry_type": {
            "name": "_entry_type",
            "location": 117,
            "return": [
                "cerulean.path.EntryType",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "FileSystemImpl._size": {
            "name": "_size",
            "location": 121,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence",
                    "cerulean.path.AbstractPath",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "FileSystemImpl._uid": {
            "name": "_uid",
            "location": 127,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path",
                    "Path"
                ]
            }
        },
        "FileSystemImpl._gid": {
            "name": "_gid",
            "location": 131,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "FileSystemImpl._has_permission": {
            "name": "_has_permission",
            "location": 135,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bool",
                    "cerulean.path.Permission",
                    "None",
                    "Iterable[str]",
                    "Optional[int]"
                ],
                "permission": [
                    "List[str]",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bool",
                    "cerulean.path.Permission",
                    "None",
                    "Iterable[str]",
                    "Optional[int]"
                ]
            }
        },
        "FileSystemImpl._set_permission": {
            "name": "_set_permission",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "None",
                    "cerulean.path.AbstractPath",
                    "cerulean.path.Permission",
                    "Optional[int]"
                ],
                "permission": [
                    "bool",
                    "None",
                    "cerulean.path.AbstractPath",
                    "cerulean.path.Permission",
                    "Optional[int]"
                ],
                "value": [
                    "bool",
                    "cerulean.path.AbstractPath",
                    "cerulean.path.Permission",
                    "Optional[int]"
                ]
            }
        },
        "FileSystemImpl._chmod": {
            "name": "_chmod",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bool"
                ],
                "mode": [
                    "int",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bool"
                ]
            }
        },
        "FileSystemImpl._symlink_to": {
            "name": "_symlink_to",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "target": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "FileSystemImpl._readlink": {
            "name": "_readlink",
            "location": 154,
            "return": [
                "cerulean.path.Path",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ],
                "recursive": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        }
    },
    "cerulean-master/cerulean/job_description.py": {
        "JobDescription.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cerulean-master/cerulean/job_status.py": {},
    "cerulean-master/cerulean/local_file_system.py": {
        "LocalFileSystem.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "LocalFileSystem.root": {
            "name": "root",
            "location": 38,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileSystem.__truediv__": {
            "name": "__truediv__",
            "location": 41,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "int",
                "Union[str,pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "LocalFileSystem._supports": {
            "name": "_supports",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LocalFileSystem._exists": {
            "name": "_exists",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._mkdir": {
            "name": "_mkdir",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "mode": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "List[Union[str,SqlFile]]",
                    "Optional[Union[Any,Any]]",
                    "List[Union[str,F]]",
                    "Optional[str]",
                    "Any"
                ],
                "parents": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "exists_ok": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "LocalFileSystem._iterdir": {
            "name": "_iterdir",
            "location": 72,
            "return": [
                "Generator[cerulean.path.AbstractPath,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._rmdir": {
            "name": "_rmdir",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ],
                "recursive": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "LocalFileSystem._touch": {
            "name": "_touch",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._streaming_read": {
            "name": "_streaming_read",
            "location": 97,
            "return": [
                "Generator[bytes,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._streaming_write": {
            "name": "_streaming_write",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "waterbutler.core.path.WaterButlerPath",
                    "cerulean.path.AbstractPath",
                    "pathlib.PurePath"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Iterable[bytes]",
                    "cerulean.path.AbstractPath",
                    "bool",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "LocalFileSystem._rename": {
            "name": "_rename",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ],
                "target": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._unlink": {
            "name": "_unlink",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._is_dir": {
            "name": "_is_dir",
            "location": 129,
            "return": [
                "dict",
                "Dict[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._is_file": {
            "name": "_is_file",
            "location": 133,
            "return": [
                "str",
                "pathlib.Path",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._is_symlink": {
            "name": "_is_symlink",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._entry_type": {
            "name": "_entry_type",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ]
            }
        },
        "LocalFileSystem._size": {
            "name": "_size",
            "location": 164,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._uid": {
            "name": "_uid",
            "location": 168,
            "return": [
                "str",
                "Callable",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._gid": {
            "name": "_gid",
            "location": 172,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._has_permission": {
            "name": "_has_permission",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "permission": [
                    "int",
                    "cerulean.path.Permission",
                    "str",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "LocalFileSystem._set_permission": {
            "name": "_set_permission",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "permission": [
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "value": [
                    "bool",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "LocalFileSystem._chmod": {
            "name": "_chmod",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ],
                "mode": [
                    "int",
                    "Sequence[int]",
                    "Tuple[int]",
                    "None",
                    "Optional[bool]",
                    "Iterator",
                    "bool",
                    "Iterator[int]"
                ]
            }
        },
        "LocalFileSystem._symlink_to": {
            "name": "_symlink_to",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ],
                "target": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "LocalFileSystem._readlink": {
            "name": "_readlink",
            "location": 200,
            "return": [
                "Path",
                "str",
                "int",
                "cerulean.file_system.FileSystem"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath"
                ],
                "recursive": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        }
    },
    "cerulean-master/cerulean/local_terminal.py": {
        "LocalTerminal.__eq__": {
            "name": "__eq__",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "LocalTerminal.run": {
            "name": "run",
            "location": 22,
            "return": [
                "Tuple[(int, str, str)]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "Sequence[Any]",
                    "Optional[int]",
                    "None"
                ],
                "command": [
                    "str",
                    "Dict",
                    "bool",
                    "List[str]",
                    "float",
                    "int"
                ],
                "args": [],
                "stdin_data": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "Sequence[Any]",
                    "Optional[int]"
                ],
                "workdir": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/path.py": {
        "Path.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filesystem": [
                    "Dict",
                    "bool"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]",
                    "cerulean.path.Path"
                ]
            }
        },
        "Path.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "bool",
                "str",
                "bytes",
                "Tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Path.__neq__": {
            "name": "__neq__",
            "location": 90,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Path.__lt__": {
            "name": "__lt__",
            "location": 96,
            "return": [
                "bool",
                "str",
                "bytes",
                "Tuple[str]",
                "Union[io.TextIO,pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Path.__gt__": {
            "name": "__gt__",
            "location": 104,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Path.__le__": {
            "name": "__le__",
            "location": 108,
            "return": [
                "bool",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Path.__ge__": {
            "name": "__ge__",
            "location": 112,
            "return": [
                "bool",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Path.__truediv__": {
            "name": "__truediv__",
            "location": 116,
            "return": [
                "Path",
                "cerulean.file_system.FileSystem",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Path.parts": {
            "name": "parts",
            "location": 127,
            "return": [
                "pathlib.Path",
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.drive": {
            "name": "drive",
            "location": 132,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.root": {
            "name": "root",
            "location": 137,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.anchor": {
            "name": "anchor",
            "location": 142,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.parents": {
            "name": "parents",
            "location": 147,
            "return": [
                "List",
                "str",
                "List[str]",
                "float",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.parent": {
            "name": "parent",
            "location": 155,
            "return": [
                "Path",
                "pathlib.Path",
                "str",
                "Union[str,pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.name": {
            "name": "name",
            "location": 160,
            "return": [
                "pathlib.Path",
                "str",
                "List[Tuple[int]]",
                "List[str]",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.suffix": {
            "name": "suffix",
            "location": 169,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.suffixes": {
            "name": "suffixes",
            "location": 174,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.stem": {
            "name": "stem",
            "location": 179,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.as_posix": {
            "name": "as_posix",
            "location": 188,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.as_uri": {
            "name": "as_uri",
            "location": 192,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_absolute": {
            "name": "is_absolute",
            "location": 200,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_reserved": {
            "name": "is_reserved",
            "location": 204,
            "return": [
                "bool",
                "Mapping",
                "Sequence",
                "str",
                "Union[pathlib.Path, str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.joinpath": {
            "name": "joinpath",
            "location": 212,
            "return": [
                "Path",
                "cerulean.file_system.FileSystem",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.relative_to": {
            "name": "relative_to",
            "location": 233,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.with_name": {
            "name": "with_name",
            "location": 251,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "List[str]",
                "cerulean.path.AbstractPath"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "Path.with_suffix": {
            "name": "with_suffix",
            "location": 260,
            "return": [
                "Path",
                "cerulean.file_system.FileSystem",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "Path.exists": {
            "name": "exists",
            "location": 271,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.mkdir": {
            "name": "mkdir",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Tuple[str]",
                    "Optional[Dict]",
                    "Dict"
                ],
                "parents": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Dict]",
                    "Tuple[str]"
                ],
                "exists_ok": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Dict]",
                    "Tuple[str]"
                ]
            }
        },
        "Path.iterdir": {
            "name": "iterdir",
            "location": 303,
            "return": [
                "Generator[Path,None,None]",
                "Generator[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.walk": {
            "name": "walk",
            "location": 313,
            "return": [
                "Generator[Tuple[Path,List[str],List[str]],None,None]",
                "Generator[tuple[Union[Path,list,list[str],list[str],list]]]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "topdown": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "onerror": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ],
                "followlinks": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Path.rmdir": {
            "name": "rmdir",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recursive": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Path.touch": {
            "name": "touch",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.streaming_read": {
            "name": "streaming_read",
            "location": 389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.streaming_write": {
            "name": "streaming_write",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Iterable[bytes]",
                    "Iterable[str]",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "Path.read_bytes": {
            "name": "read_bytes",
            "location": 410,
            "return": [
                "bytes",
                "Callable[[Any],bool]",
                "List[Dict[str,Any]]",
                "Optional[float]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.read_text": {
            "name": "read_text",
            "location": 422,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "Path.write_bytes": {
            "name": "write_bytes",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "Path.write_text": {
            "name": "write_text",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "Text"
                ]
            }
        },
        "Path.rename": {
            "name": "rename",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Path.unlink": {
            "name": "unlink",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.remove": {
            "name": "remove",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_dir": {
            "name": "is_dir",
            "location": 501,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_file": {
            "name": "is_file",
            "location": 511,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_symlink": {
            "name": "is_symlink",
            "location": 521,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[Callable]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.entry_type": {
            "name": "entry_type",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.size": {
            "name": "size",
            "location": 543,
            "return": [
                "str",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.uid": {
            "name": "uid",
            "location": 554,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.gid": {
            "name": "gid",
            "location": 563,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.has_permission": {
            "name": "has_permission",
            "location": 572,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]",
                    "bool",
                    "IO[Any]",
                    "IO",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "Path.set_permission": {
            "name": "set_permission",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "value": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Path.chmod": {
            "name": "chmod",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Path.symlink_to": {
            "name": "symlink_to",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Iterable[str]",
                    "Callable",
                    "Tuple[float]"
                ]
            }
        },
        "Path.readlink": {
            "name": "readlink",
            "location": 626,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "recursive": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Path.parents.make_path": {
            "name": "make_path",
            "location": 149,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ]
            }
        },
        "Path.joinpath.get_path": {
            "name": "get_path",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "segment": []
            }
        },
        "Path.relative_to.get_path": {
            "name": "get_path",
            "location": 242,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "segment": [
                    "Union[str, 'Path']",
                    "str",
                    "cerulean.file_system.FileSystem",
                    "pathlib.Path"
                ]
            }
        }
    },
    "cerulean-master/cerulean/scheduler.py": {
        "Scheduler.submit": {
            "name": "submit",
            "location": 17,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "job_description": [
                    "str",
                    "Callable",
                    "Dict",
                    "int",
                    "cerulean.job_description.JobDescription",
                    "bool"
                ]
            }
        },
        "Scheduler.get_status": {
            "name": "get_status",
            "location": 30,
            "return": [
                "cerulean.job_status.JobStatus",
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "Scheduler.get_exit_code": {
            "name": "get_exit_code",
            "location": 46,
            "return": [
                "Optional[int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "List[Tuple[int,str]]",
                    "List[tuple[Union[int,str]]]"
                ]
            }
        },
        "Scheduler.cancel": {
            "name": "cancel",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "List",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Scheduler.wait": {
            "name": "wait",
            "location": 74,
            "return": [
                "str",
                "int",
                "Sequence[str]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "neuromation.api.JobStatus"
                ],
                "time_out": [
                    "float",
                    "str",
                    "int"
                ],
                "interval": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "float",
                    "bool",
                    "Optional[float]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/sftp_file_system.py": {
        "SftpFileSystem.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terminal": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "own_term": [
                    "bool",
                    "int",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "SftpFileSystem.__enter__": {
            "name": "__enter__",
            "location": 56,
            "return": [
                "SftpFileSystem",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SftpFileSystem.__exit__": {
            "name": "__exit__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "SftpFileSystem.close": {
            "name": "close",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SftpFileSystem.__eq__": {
            "name": "__eq__",
            "location": 71,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "pathlib.Path",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "T",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "SftpFileSystem.root": {
            "name": "root",
            "location": 78,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "SftpFileSystem.__truediv__": {
            "name": "__truediv__",
            "location": 81,
            "return": [
                "Path",
                "path.Path",
                "str",
                "pathlib.Path",
                "Union[str,pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "str",
                    "pathlib.Path",
                    "cerulean.file_system.FileSystem",
                    "path.Path"
                ]
            }
        },
        "SftpFileSystem._supports": {
            "name": "_supports",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SftpFileSystem._exists": {
            "name": "_exists",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._mkdir": {
            "name": "_mkdir",
            "location": 98,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "mode": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Optional[pathlib.Path]"
                ],
                "parents": [
                    "bool",
                    "str",
                    "Type",
                    "Tuple[str,Optional[str]]",
                    "List[str]",
                    "Tuple[bool,str]"
                ],
                "exists_ok": [
                    "bool",
                    "cerulean.path.AbstractPath",
                    "Optional[int]",
                    "cerulean.path.Permission"
                ]
            }
        },
        "SftpFileSystem._iterdir": {
            "name": "_iterdir",
            "location": 119,
            "return": [
                "Generator[pathlib.PurePosixPath,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._rmdir": {
            "name": "_rmdir",
            "location": 133,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "recursive": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "SftpFileSystem._touch": {
            "name": "_touch",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._streaming_read": {
            "name": "_streaming_read",
            "location": 160,
            "return": [
                "Generator[bytes,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._streaming_write": {
            "name": "_streaming_write",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "pathlib.Path",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Iterable[bytes]",
                    "cerulean.path.AbstractPath",
                    "bool",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "SftpFileSystem._rename": {
            "name": "_rename",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "target": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "SftpFileSystem._unlink": {
            "name": "_unlink",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._is_dir": {
            "name": "_is_dir",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._is_file": {
            "name": "_is_file",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._is_symlink": {
            "name": "_is_symlink",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._entry_type": {
            "name": "_entry_type",
            "location": 256,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List",
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._size": {
            "name": "_size",
            "location": 279,
            "return": [
                "int",
                "Sequence[int]",
                "float",
                "Final",
                "List[int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._uid": {
            "name": "_uid",
            "location": 287,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str,str]",
                "Type",
                "Dict[Union[str,None],str]",
                "Dict[int,str]",
                "Dict",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._gid": {
            "name": "_gid",
            "location": 295,
            "return": [
                "int",
                "None",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "SftpFileSystem._has_permission": {
            "name": "_has_permission",
            "location": 303,
            "return": [
                "bool",
                "str",
                "Union[List[str],List[Any]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,pathlib.Path]",
                    "cerulean.path.AbstractPath"
                ],
                "permission": [
                    "bool",
                    "str",
                    "Exception",
                    "Tuple",
                    "int"
                ]
            }
        },
        "SftpFileSystem._set_permission": {
            "name": "_set_permission",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "Union[pathlib.Path,str]"
                ],
                "permission": [
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "value": [
                    "bool",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "SftpFileSystem._chmod": {
            "name": "_chmod",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ],
                "mode": [
                    "int",
                    "str",
                    "List[str]",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "SftpFileSystem._symlink_to": {
            "name": "_symlink_to",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "target": [
                    "str",
                    "bool",
                    "List",
                    "pathlib.Path"
                ]
            }
        },
        "SftpFileSystem._readlink": {
            "name": "_readlink",
            "location": 337,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "cerulean.path.AbstractPath",
                    "Union[str,pathlib.Path]"
                ],
                "recursive": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "SftpFileSystem.__lstat": {
            "name": "__lstat",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "contextshell.path.NodePath"
                ]
            }
        },
        "SftpFileSystem.__stat": {
            "name": "__stat",
            "location": 374,
            "return": [
                "str",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePosixPath",
                    "waterbutler.core.path.WaterButlerPath",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "SftpFileSystem.__ensure_sftp": {
            "name": "__ensure_sftp",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "SftpFileSystem._streaming_read.ensure_sftp2": {
            "name": "ensure_sftp2",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cerulean-master/cerulean/slurm_scheduler.py": {
        "_job_desc_to_job_script": {
            "name": "_job_desc_to_job_script",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "job_description": [
                    "str"
                ]
            }
        },
        "_add_option": {
            "name": "_add_option",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "job_script": [
                    "str"
                ],
                "option": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_seconds_to_time": {
            "name": "_seconds_to_time",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "seconds": [
                    "bool",
                    "List",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "SlurmScheduler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terminal": [
                    "int",
                    "float",
                    "bool"
                ],
                "prefix": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SlurmScheduler.submit": {
            "name": "submit",
            "location": 45,
            "return": [
                "str",
                "int",
                "Set",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "job_description": [
                    "str",
                    "Callable",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "SlurmScheduler.get_status": {
            "name": "get_status",
            "location": 65,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Dict"
                ]
            }
        },
        "SlurmScheduler.get_exit_code": {
            "name": "get_exit_code",
            "location": 111,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SlurmScheduler.cancel": {
            "name": "cancel",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        }
    },
    "cerulean-master/cerulean/ssh_terminal.py": {
        "SshTerminal.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "port": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "credential": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "SshTerminal.__enter__": {
            "name": "__enter__",
            "location": 37,
            "return": [
                "SshTerminal"
            ],
            "arguments": {
                "self": [
                    "_TSshTerminal@@SshTerminal@@"
                ]
            }
        },
        "SshTerminal.__exit__": {
            "name": "__exit__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "SshTerminal.close": {
            "name": "close",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SshTerminal.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Union[tuple,list]",
                    "Tuple",
                    "List",
                    "bool"
                ]
            }
        },
        "SshTerminal._get_sftp_client": {
            "name": "_get_sftp_client",
            "location": 65,
            "return": [
                "paramiko.sftp_client.SFTPClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "SshTerminal._get_downstream_sftp_client": {
            "name": "_get_downstream_sftp_client",
            "location": 82,
            "return": [
                "paramiko.sftp_client.SFTPClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "SshTerminal.run": {
            "name": "run",
            "location": 101,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "timeout": [],
                "command": [
                    "str",
                    "List[str]",
                    "Optional[types.RootValue]",
                    "None"
                ],
                "args": [],
                "stdin_data": [
                    "None",
                    "bool",
                    "bytes",
                    "Dict[str,Optional[str]]",
                    "int"
                ],
                "workdir": [
                    "bytes",
                    "None",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "SshTerminal.__get_data_from_channel": {
            "name": "__get_data_from_channel",
            "location": 164,
            "return": [
                "bool",
                "Tuple[Union[bool,str]]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Optional[int]"
                ],
                "stream_name": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Optional[Iterable[str]]",
                    "None"
                ],
                "timeout": [
                    "float",
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "SshTerminal.__get_key_from_file": {
            "name": "__get_key_from_file",
            "location": 186,
            "return": [
                "str",
                "int",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "frozenset[str]",
                    "frozenset"
                ],
                "passphrase": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "frozenset[str]",
                    "frozenset"
                ]
            }
        },
        "SshTerminal.__ensure_connection": {
            "name": "__ensure_connection",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "Optional[bool]",
                    "Any"
                ],
                "force": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/terminal.py": {
        "Terminal.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [
                "Terminal"
            ],
            "arguments": {
                "self": [
                    "_TTerminal@@Terminal@@"
                ]
            }
        },
        "Terminal.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Terminal.close": {
            "name": "close",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Terminal.run": {
            "name": "run",
            "location": 48,
            "return": [
                "Tuple[Optional[int],str,str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "Tuple"
                ],
                "command": [
                    "bool",
                    "Tuple"
                ],
                "args": [],
                "stdin_data": [
                    "bool",
                    "Tuple",
                    "None"
                ],
                "workdir": [
                    "bool",
                    "Tuple",
                    "None"
                ]
            }
        }
    },
    "cerulean-master/cerulean/torque_scheduler.py": {
        "_job_desc_to_job_script": {
            "name": "_job_desc_to_job_script",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "job_description": [
                    "str",
                    "Dict",
                    "cerulean.job_description.JobDescription"
                ]
            }
        },
        "_get_field_from_qstat_xml": {
            "name": "_get_field_from_qstat_xml",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "xml_data": [
                    "str",
                    "bytes"
                ],
                "field_name": [
                    "str"
                ]
            }
        },
        "_seconds_to_time": {
            "name": "_seconds_to_time",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "seconds": [
                    "bool",
                    "List",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "TorqueScheduler.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terminal": [
                    "int",
                    "float",
                    "bool"
                ],
                "prefix": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TorqueScheduler.submit": {
            "name": "submit",
            "location": 44,
            "return": [
                "str",
                "int",
                "Set",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "job_description": [
                    "str",
                    "Callable",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "TorqueScheduler.get_status": {
            "name": "get_status",
            "location": 64,
            "return": [
                "int",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "TorqueScheduler.get_exit_code": {
            "name": "get_exit_code",
            "location": 103,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "TorqueScheduler.cancel": {
            "name": "cancel",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        }
    },
    "cerulean-master/cerulean/util.py": {},
    "cerulean-master/cerulean/webdav_file_system.py": {
        "WebdavFileSystem.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ],
                "credential": [
                    "bool",
                    "None",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "Optional[Mapping]",
                    "Mapping"
                ],
                "host_ca_cert_file": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "unsupported_methods_raise": [
                    "bool",
                    "str"
                ]
            }
        },
        "WebdavFileSystem.__enter__": {
            "name": "__enter__",
            "location": 77,
            "return": [
                "WebdavFileSystem",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebdavFileSystem.__exit__": {
            "name": "__exit__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "WebdavFileSystem.close": {
            "name": "close",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebdavFileSystem.__eq__": {
            "name": "__eq__",
            "location": 91,
            "return": [
                "bool",
                "IO",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "WebdavFileSystem.root": {
            "name": "root",
            "location": 100,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebdavFileSystem.__truediv__": {
            "name": "__truediv__",
            "location": 103,
            "return": [
                "Path",
                "path.Path",
                "str",
                "pathlib.Path",
                "Union[str,pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "str",
                    "pathlib.Path",
                    "cerulean.file_system.FileSystem",
                    "path.Path"
                ]
            }
        },
        "WebdavFileSystem._supports": {
            "name": "_supports",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WebdavFileSystem._exists": {
            "name": "_exists",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WebdavFileSystem._mkdir": {
            "name": "_mkdir",
            "location": 117,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "mode": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Any",
                    "Optional[Union[Any,Any]]",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "bool"
                ],
                "parents": [
                    "bool",
                    "str",
                    "Type",
                    "Tuple[str,Optional[str]]",
                    "List[str]",
                    "Tuple[bool,str]"
                ],
                "exists_ok": [
                    "bool",
                    "cerulean.path.AbstractPath",
                    "Optional[int]",
                    "cerulean.path.Permission"
                ]
            }
        },
        "WebdavFileSystem._iterdir": {
            "name": "_iterdir",
            "location": 164,
            "return": [
                "Generator[pathlib.PurePosixPath,None,None]",
                "Generator[PurePosixPath]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WebdavFileSystem._rmdir": {
            "name": "_rmdir",
            "location": 182,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "paradigm.catalog.Path"
                ],
                "recursive": [
                    "bool",
                    "List[str]",
                    "str",
                    "List",
                    "List[int]"
                ]
            }
        },
        "WebdavFileSystem._touch": {
            "name": "_touch",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List"
                ]
            }
        },
        "WebdavFileSystem._streaming_read": {
            "name": "_streaming_read",
            "location": 210,
            "return": [
                "Generator[bytes,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WebdavFileSystem._streaming_write": {
            "name": "_streaming_write",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "WebdavFileSystem._rename": {
            "name": "_rename",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "target": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WebdavFileSystem._unlink": {
            "name": "_unlink",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath",
                    "pathlib.Path"
                ]
            }
        },
        "WebdavFileSystem._is_dir": {
            "name": "_is_dir",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "WebdavFileSystem._is_file": {
            "name": "_is_file",
            "location": 265,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "WebdavFileSystem._is_symlink": {
            "name": "_is_symlink",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ]
            }
        },
        "WebdavFileSystem._entry_type": {
            "name": "_entry_type",
            "location": 275,
            "return": [
                "mypy.types.Instance",
                "Optional[Callable[[], mypy.types.Instance]]",
                "mypy.types.TypedDictType"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[str,Path]"
                ]
            }
        },
        "WebdavFileSystem._size": {
            "name": "_size",
            "location": 283,
            "return": [
                "int",
                "str",
                "List[str]",
                "Dict[str,Any]",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "WebdavFileSystem._uid": {
            "name": "_uid",
            "location": 289,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str,Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path",
                    "Union[str,pathlib.PurePath]",
                    "Path"
                ]
            }
        },
        "WebdavFileSystem._gid": {
            "name": "_gid",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "WebdavFileSystem._has_permission": {
            "name": "_has_permission",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[str,pathlib.Path]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WebdavFileSystem._set_permission": {
            "name": "_set_permission",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "None",
                    "cerulean.path.AbstractPath",
                    "cerulean.path.Permission",
                    "Optional[int]"
                ],
                "permission": [
                    "bool",
                    "None",
                    "cerulean.path.AbstractPath",
                    "cerulean.path.Permission",
                    "Optional[int]"
                ],
                "value": [
                    "bool",
                    "cerulean.path.AbstractPath",
                    "cerulean.path.Permission",
                    "Optional[int]"
                ]
            }
        },
        "WebdavFileSystem._chmod": {
            "name": "_chmod",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bool"
                ],
                "mode": [
                    "int",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bool"
                ]
            }
        },
        "WebdavFileSystem._symlink_to": {
            "name": "_symlink_to",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "Union[str,pathlib.PurePath]"
                ],
                "target": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "Union[str,pathlib.PurePath]"
                ]
            }
        },
        "WebdavFileSystem._readlink": {
            "name": "_readlink",
            "location": 320,
            "return": [
                "cerulean.path.Path",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "recursive": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "WebdavFileSystem.__ensure_http": {
            "name": "__ensure_http",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "WebdavFileSystem.__url": {
            "name": "__url",
            "location": 349,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,pathlib.Path]",
                    "pathlib.Path",
                    "bytes",
                    "None",
                    "cerulean.Path",
                    "Optional[str]"
                ]
            }
        },
        "WebdavFileSystem.__propfind": {
            "name": "__propfind",
            "location": 352,
            "return": [
                "Dict",
                "deoplete.util.UserContext",
                "bool",
                "lightbus.path.BusPath",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ],
                "req_prop": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "depth": [
                    "str",
                    "int"
                ]
            }
        },
        "WebdavFileSystem._mkdir.handle_mkcol_error": {
            "name": "handle_mkcol_error",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "WebdavFileSystem._streaming_write.data_generator": {
            "name": "data_generator",
            "location": 218,
            "return": [
                "Generator[bytes,None,None]",
                "Generator"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Iterable[bytes]",
                    "List[Dict]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/__init__.py": {},
    "cerulean-master/cerulean/test/conftest.py": {
        "password_credential": {
            "name": "password_credential",
            "location": 24,
            "return": [
                "PasswordCredential",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "ssh_terminal": {
            "name": "ssh_terminal",
            "location": 29,
            "return": [
                "Generator[cerulean.ssh_terminal.SshTerminal,None,None]",
                "Generator[SshTerminal]"
            ],
            "arguments": {
                "password_credential": [
                    "str",
                    "cerulean.credential.PasswordCredential"
                ]
            }
        },
        "flaky_ssh_terminal": {
            "name": "flaky_ssh_terminal",
            "location": 37,
            "return": [
                "Generator[cerulean.ssh_terminal.SshTerminal,None,None]",
                "Generator[SshTerminal]"
            ],
            "arguments": {
                "password_credential": [
                    "str",
                    "cerulean.credential.PasswordCredential"
                ]
            }
        },
        "local_filesystem": {
            "name": "local_filesystem",
            "location": 45,
            "return": [
                "Generator[cerulean.local_file_system.LocalFileSystem,None,None]",
                "Generator[LocalFileSystem]"
            ],
            "arguments": {}
        },
        "webdav_filesystem_raises": {
            "name": "webdav_filesystem_raises",
            "location": 50,
            "return": [
                "Generator[cerulean.webdav_file_system.WebdavFileSystem,None,None]",
                "Generator[WebdavFileSystem]"
            ],
            "arguments": {}
        },
        "webdav_filesystem_quiet": {
            "name": "webdav_filesystem_quiet",
            "location": 55,
            "return": [
                "Generator[cerulean.webdav_file_system.WebdavFileSystem,None,None]",
                "Generator[WebdavFileSystem]"
            ],
            "arguments": {}
        },
        "filesystem": {
            "name": "filesystem",
            "location": 61,
            "return": [
                "Generator[cerulean.file_system_impl.FileSystemImpl,None,None]",
                "Generator[LocalFileSystem]",
                "Generator[SftpFileSystem]",
                "Generator[WebdavFileSystem]"
            ],
            "arguments": {
                "request": [],
                "ssh_terminal": [
                    "str",
                    "cerulean.ssh_terminal.SshTerminal",
                    "Dict[str,bytes]",
                    "None",
                    "Optional[Dict[str,bytes]]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "filesystem2": {
            "name": "filesystem2",
            "location": 75,
            "return": [
                "Generator[cerulean.file_system_impl.FileSystemImpl,None,None]",
                "Generator[LocalFileSystem]",
                "Generator[SftpFileSystem]",
                "Generator[WebdavFileSystem]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "password_credential": [
                    "str",
                    "int",
                    "cerulean.credential.PasswordCredential"
                ]
            }
        },
        "make_paths": {
            "name": "make_paths",
            "location": 90,
            "return": [
                "Dict[Text,int]",
                "str",
                "pathlib.Path",
                "Dict"
            ],
            "arguments": {
                "filesystem": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "paths_to_lpaths": {
            "name": "paths_to_lpaths",
            "location": 112,
            "return": [
                "pathlib.Path",
                "str",
                "Dict",
                "bool",
                "Dict[Union[str,None],Any]",
                "float",
                "List[dict[str,Any]]"
            ],
            "arguments": {
                "paths": [
                    "Dict[str,cerulean.path.Path]",
                    "Dict[str,str]",
                    "Dict[str,dict[str,Any]]",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "paths": {
            "name": "paths",
            "location": 120,
            "return": [
                "str",
                "paradigm.catalog.Path",
                "List[int]"
            ],
            "arguments": {
                "filesystem": [
                    "str",
                    "cerulean.file_system.FileSystem",
                    "pathlib.Path"
                ]
            }
        },
        "paths_local": {
            "name": "paths_local",
            "location": 125,
            "return": [
                "str",
                "paradigm.catalog.Path",
                "List[int]"
            ],
            "arguments": {
                "local_filesystem": [
                    "str",
                    "cerulean.file_system.FileSystem",
                    "pathlib.Path"
                ]
            }
        },
        "lpaths_webdav_raises": {
            "name": "lpaths_webdav_raises",
            "location": 132,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "list",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "webdav_filesystem_raises": [
                    "str",
                    "cerulean.file_system.FileSystem",
                    "pathlib.Path"
                ]
            }
        },
        "lpaths_webdav_quiet": {
            "name": "lpaths_webdav_quiet",
            "location": 140,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "list",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [
                    "str",
                    "cerulean.file_system.FileSystem",
                    "pathlib.Path"
                ]
            }
        },
        "lpaths": {
            "name": "lpaths",
            "location": 148,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "list",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Dict[str,cerulean.path.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "terminal": {
            "name": "terminal",
            "location": 153,
            "return": [
                "Generator[cerulean.terminal.Terminal,None,None]",
                "Generator[LocalTerminal]",
                "Generator[bool]"
            ],
            "arguments": {
                "request": [],
                "ssh_terminal": [
                    "bool"
                ],
                "flaky_ssh_terminal": [
                    "bool"
                ]
            }
        },
        "scheduler_and_fs": {
            "name": "scheduler_and_fs",
            "location": 177,
            "return": [
                "Generator[Tuple[cerulean.scheduler.Scheduler,cerulean.file_system.FileSystem,str],None,None]",
                "Generator[tuple[Union[DirectGnuScheduler,LocalFileSystem]]]",
                "Generator[tuple[Union[DirectGnuScheduler,SftpFileSystem]]]",
                "Generator[tuple[Union[TorqueScheduler,SftpFileSystem]]]",
                "Generator[tuple[Union[SlurmScheduler,SftpFileSystem]]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "ssh_terminal": [
                    "str",
                    "cerulean.ssh_terminal.SshTerminal",
                    "Dict",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "password_credential": [
                    "str",
                    "Tuple",
                    "bool",
                    "float"
                ]
            }
        },
        "procs_per_node": {
            "name": "procs_per_node",
            "location": 210,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/test/test_copy_files.py": {
        "assert_dir_files_copied_correctly": {
            "name": "assert_dir_files_copied_correctly",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "copied_dir": [
                    "None",
                    "cerulean.Path",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "assert_dir_links_copied_correctly": {
            "name": "assert_dir_links_copied_correctly",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "copied_dir": [
                    "str",
                    "cerulean.Path",
                    "Dict[str,P]",
                    "pathlib.Path",
                    "Dict[str,pathlib.Path]"
                ]
            }
        },
        "assert_dir_links_stubbed_correctly": {
            "name": "assert_dir_links_stubbed_correctly",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "copied_dir": [
                    "str",
                    "bytes",
                    "cerulean.Path",
                    "List[P]",
                    "pathlib.Path",
                    "List[pathlib.Path]"
                ]
            }
        },
        "assert_dir_devices_copied_correctly": {
            "name": "assert_dir_devices_copied_correctly",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "copied_dir": [
                    "str",
                    "cerulean.Path",
                    "pathlib.Path"
                ]
            }
        },
        "assert_dir_copied_correctly": {
            "name": "assert_dir_copied_correctly",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "copied_dir": [
                    "List[str]",
                    "cerulean.Path",
                    "pathlib.Path"
                ],
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "int",
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "filesystem2": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "int",
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_copy_file_args": {
            "name": "test_copy_file_args",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "pathlib.Path",
                    "paradigm.catalog.Path",
                    "int"
                ]
            }
        },
        "test_copy_into": {
            "name": "test_copy_into",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "List[str]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "pathlib.Path",
                    "Path"
                ]
            }
        },
        "test_copy_dir_onto_nonexistent": {
            "name": "test_copy_dir_onto_nonexistent",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_file_onto_dir": {
            "name": "test_copy_file_onto_dir",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_file_single_fs": {
            "name": "test_copy_file_single_fs",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_copy_file_permissions": {
            "name": "test_copy_file_permissions",
            "location": 118,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_no_copy_file_permissions": {
            "name": "test_no_copy_file_permissions",
            "location": 178,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_callback": {
            "name": "test_copy_callback",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "List[str]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "List[str]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_callback_abort": {
            "name": "test_copy_callback_abort",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.Path]",
                    "List[str]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "List[str]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_symlink_single_fs": {
            "name": "test_copy_symlink_single_fs",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_dir_single_fs": {
            "name": "test_copy_dir_single_fs",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path",
                    "paradigm.catalog.Path"
                ],
                "paths": [
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_dir_single_fs2": {
            "name": "test_copy_dir_single_fs2",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path",
                    "paradigm.catalog.Path"
                ],
                "paths": [
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_dir_single_fs3": {
            "name": "test_copy_dir_single_fs3",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "str",
                    "bool",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "pathlib.Path"
                ],
                "paths": [
                    "pathlib.Path"
                ]
            }
        },
        "test_copy_file_cross_fs": {
            "name": "test_copy_file_cross_fs",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "path.Path",
                    "pathlib.Path"
                ],
                "filesystem2": [
                    "path.Path"
                ],
                "paths": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_copy_symlink_cross_fs": {
            "name": "test_copy_symlink_cross_fs",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [],
                "filesystem2": [
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "paths": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_copy_dir_cross_fs": {
            "name": "test_copy_dir_cross_fs",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "str",
                    "List[str]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str,str]",
                    "pathlib.Path",
                    "paradigm.catalog.Path"
                ],
                "filesystem2": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "paths": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_copy_callback.dummy_data": {
            "name": "dummy_data",
            "location": 209,
            "return": [
                "Generator[bytes,None,None]",
                "Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_copy_callback.callback": {
            "name": "callback",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [],
                "total": []
            }
        },
        "test_copy_callback_abort.callback": {
            "name": "callback",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "total": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "cerulean-master/cerulean/test/test_credential.py": {
        "test_password_credential": {
            "name": "test_password_credential",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pubkey_credential": {
            "name": "test_pubkey_credential",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pubkey_passphrase_credential": {
            "name": "test_pubkey_passphrase_credential",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerulean-master/cerulean/test/test_factory.py": {
        "test_make_file_system": {
            "name": "test_make_file_system",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_terminal": {
            "name": "test_make_terminal",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_scheduler": {
            "name": "test_make_scheduler",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerulean-master/cerulean/test/test_file_systems.py": {
        "test_equality": {
            "name": "test_equality",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "str",
                    "Type",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Type[Any]"
                ],
                "filesystem2": [
                    "str",
                    "Type",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Type[Any]"
                ]
            }
        },
        "test_root": {
            "name": "test_root",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "dict"
                ]
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ]
            }
        },
        "test_touch": {
            "name": "test_touch",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "str",
                    "bytes"
                ],
                "lpaths": []
            }
        },
        "test_mkdir": {
            "name": "test_mkdir",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_iterdir": {
            "name": "test_iterdir",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "str",
                    "float"
                ],
                "lpaths": [
                    "str",
                    "float"
                ]
            }
        },
        "test_rmdir": {
            "name": "test_rmdir",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "bool",
                    "Dict[str,Sequence[str]]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "bool",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_streaming_read": {
            "name": "test_streaming_read",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "bytes"
                ],
                "lpaths": [
                    "bytes",
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ]
            }
        },
        "test_streaming_write": {
            "name": "test_streaming_write",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "bytes"
                ],
                "lpaths": [
                    "bytes",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str,cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_read_bytes": {
            "name": "test_read_bytes",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "int",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "int"
                ]
            }
        },
        "test_read_text": {
            "name": "test_read_text",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "str"
                ],
                "lpaths": [
                    "str",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str,cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_write_bytes": {
            "name": "test_write_bytes",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "int",
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "int",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_write_text": {
            "name": "test_write_text",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [],
                "lpaths": []
            }
        },
        "test_rename": {
            "name": "test_rename",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_unlink": {
            "name": "test_unlink",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ]
            }
        },
        "test_entry_types": {
            "name": "test_entry_types",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "str"
                ],
                "lpaths": [
                    "str",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str,cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_size": {
            "name": "test_size",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "float",
                    "cerulean.file_system_impl.FileSystemImpl"
                ],
                "lpaths": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "float",
                    "cerulean.file_system_impl.FileSystemImpl"
                ]
            }
        },
        "test_owner": {
            "name": "test_owner",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "str"
                ],
                "lpaths": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]",
                    "str"
                ]
            }
        },
        "test_has_permission": {
            "name": "test_has_permission",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ],
                "lpaths": [
                    "Dict[str,cerulean.file_system_impl.AbstractPath]"
                ]
            }
        },
        "test_set_permission": {
            "name": "test_set_permission",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ],
                "lpaths": [
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ]
            }
        },
        "test_chmod": {
            "name": "test_chmod",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ],
                "lpaths": [
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl"
                ]
            }
        },
        "test_symlink_to": {
            "name": "test_symlink_to",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "bool",
                    "str"
                ],
                "lpaths": [
                    "Dict[str, cerulean.file_system_impl.AbstractPath]",
                    "cerulean.file_system_impl.FileSystemImpl",
                    "bool"
                ]
            }
        },
        "test_readlink": {
            "name": "test_readlink",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "filesystem": [
                    "cerulean.file_system_impl.FileSystemImpl",
                    "Dict[str, cerulean.file_system_impl.AbstractPath]"
                ],
                "lpaths": [
                    "str",
                    "Dict[str,cerulean.file_system_impl.AbstractPath]"
                ]
            }
        }
    },
    "cerulean-master/cerulean/test/test_path.py": {
        "test_create": {
            "name": "test_create",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "local_filesystem": [
                    "pathlib.Path"
                ]
            }
        },
        "test_joinpath": {
            "name": "test_joinpath",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "List",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path",
                    "cerulean.path.Path",
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "test_divides": {
            "name": "test_divides",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "Dict[str, cerulean.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "test_with_name": {
            "name": "test_with_name",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "local_filesystem": [
                    "cerulean.LocalFileSystem",
                    "pathlib.Path"
                ]
            }
        },
        "test_with_suffix": {
            "name": "test_with_suffix",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "local_filesystem": [
                    "cerulean.LocalFileSystem",
                    "pathlib.Path",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_read_bytes": {
            "name": "test_read_bytes",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "path.Path",
                    "Union[str,pathlib.Path]",
                    "bool"
                ]
            }
        },
        "test_write_text": {
            "name": "test_write_text",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "paradigm.catalog.Path",
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "test_remove": {
            "name": "test_remove",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path",
                    "cerulean.path.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "_make_walk_dir": {
            "name": "_make_walk_dir",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "topdir": [
                    "str",
                    "bytes",
                    "int",
                    "pathlib.PosixPath",
                    "pathlib.Path"
                ]
            }
        },
        "test_walk_top_down": {
            "name": "test_walk_top_down",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "paths_local": [
                    "str",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "test_walk_bottom_up": {
            "name": "test_walk_bottom_up",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "paths_local": [
                    "str",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "test_walk_follow_dir_links": {
            "name": "test_walk_follow_dir_links",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "paths_local": [
                    "str",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path",
                    "Optional[str]",
                    "pathlib.PosixPath",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "test_walk_onerror": {
            "name": "test_walk_onerror",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "paths_local": [
                    "str",
                    "List[str]",
                    "Dict[str,cerulean.Path]",
                    "List[pathlib.Path]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_walk_onerror.handler": {
            "name": "handler",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "BaseException",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        }
    },
    "cerulean-master/cerulean/test/test_scheduler.py": {
        "test_scheduler": {
            "name": "test_scheduler",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ],
                "caplog": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_scheduler_cancel": {
            "name": "test_scheduler_cancel",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "str",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ],
                "caplog": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_scheduler_exit_code": {
            "name": "test_scheduler_exit_code",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_scheduler_timeout": {
            "name": "test_scheduler_timeout",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_scheduler_wait": {
            "name": "test_scheduler_wait",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ],
                "caplog": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_scheduler_wait_interval": {
            "name": "test_scheduler_wait_interval",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ],
                "caplog": [
                    "None",
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_scheduler_no_command": {
            "name": "test_scheduler_no_command",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_stderr_redirect": {
            "name": "test_stderr_redirect",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_system_out_redirect": {
            "name": "test_system_out_redirect",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_system_out_redirect2": {
            "name": "test_system_out_redirect2",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_system_err_redirect": {
            "name": "test_system_err_redirect",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_system_err_redirect2": {
            "name": "test_system_err_redirect2",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_queue_name": {
            "name": "test_queue_name",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_num_nodes": {
            "name": "test_num_nodes",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_environment": {
            "name": "test_environment",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]"
                ]
            }
        },
        "test_prefix": {
            "name": "test_prefix",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "scheduler_and_fs": [
                    "Tuple[cerulean.Scheduler,cerulean.FileSystem]",
                    "int",
                    "Tuple[Union[cerulean.Scheduler,cerulean.FileSystem]]",
                    "str"
                ]
            }
        }
    },
    "cerulean-master/cerulean/test/test_slurm_scheduler.py": {
        "test_job_script_name": {
            "name": "test_job_script_name",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_working_directory": {
            "name": "test_job_script_working_directory",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_command_args": {
            "name": "test_job_script_command_args",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_stdout_file": {
            "name": "test_job_script_stdout_file",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_stderr_file": {
            "name": "test_job_script_stderr_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_queue_name": {
            "name": "test_job_script_queue_name",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_time_reserved": {
            "name": "test_job_script_time_reserved",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_num_nodes": {
            "name": "test_job_script_num_nodes",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_processes_per_node": {
            "name": "test_job_script_processes_per_node",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_extra_options": {
            "name": "test_job_script_extra_options",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seconds_to_time": {
            "name": "test_seconds_to_time",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerulean-master/cerulean/test/test_ssh_terminal.py": {
        "test_password": {
            "name": "test_password",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pubkey": {
            "name": "test_pubkey",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passphrase": {
            "name": "test_passphrase",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerulean-master/cerulean/test/test_terminal.py": {
        "test_terminal": {
            "name": "test_terminal",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "terminal": []
            }
        },
        "test_terminal_stdin": {
            "name": "test_terminal_stdin",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "terminal": []
            }
        },
        "test_terminal_workdir": {
            "name": "test_terminal_workdir",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "terminal": []
            }
        },
        "test_running_in_shell": {
            "name": "test_running_in_shell",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "terminal": []
            }
        }
    },
    "cerulean-master/cerulean/test/test_torque_scheduler.py": {
        "test_job_script_name": {
            "name": "test_job_script_name",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_working_directory": {
            "name": "test_job_script_working_directory",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_command_args": {
            "name": "test_job_script_command_args",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_stdout_file": {
            "name": "test_job_script_stdout_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_stderr_file": {
            "name": "test_job_script_stderr_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_queue_name": {
            "name": "test_job_script_queue_name",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_time_reserved": {
            "name": "test_job_script_time_reserved",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_num_nodes": {
            "name": "test_job_script_num_nodes",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_processes_per_node": {
            "name": "test_job_script_processes_per_node",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_script_extra_scheduler_options": {
            "name": "test_job_script_extra_scheduler_options",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seconds_to_time": {
            "name": "test_seconds_to_time",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cerulean-master/cerulean/test/test_webdav_file_system.py": {
        "test_creating_http": {
            "name": "test_creating_http",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creating_http_password": {
            "name": "test_creating_http_password",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creating_https": {
            "name": "test_creating_https",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creating_https_password": {
            "name": "test_creating_https_password",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_entry_types": {
            "name": "test_entry_types",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [
                    "Type"
                ],
                "lpaths_webdav_raises": [
                    "Type"
                ]
            }
        },
        "test_owner": {
            "name": "test_owner",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str,float]"
                ],
                "lpaths_webdav_raises": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str,float]"
                ]
            }
        },
        "test_has_permission": {
            "name": "test_has_permission",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [],
                "lpaths_webdav_raises": []
            }
        },
        "test_set_permission": {
            "name": "test_set_permission",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [
                    "Dict"
                ],
                "lpaths_webdav_raises": [
                    "dict"
                ]
            }
        },
        "test_chmod": {
            "name": "test_chmod",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [
                    "str",
                    "float"
                ],
                "lpaths_webdav_raises": [
                    "str",
                    "float"
                ]
            }
        },
        "test_symlink_to": {
            "name": "test_symlink_to",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [],
                "lpaths_webdav_raises": []
            }
        },
        "test_readlink": {
            "name": "test_readlink",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_raises": [
                    "str",
                    "float"
                ],
                "lpaths_webdav_raises": [
                    "str",
                    "float"
                ]
            }
        },
        "test_entry_types2": {
            "name": "test_entry_types2",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [
                    "Type"
                ],
                "lpaths_webdav_raises": [
                    "Type"
                ]
            }
        },
        "test_owner2": {
            "name": "test_owner2",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str,float]"
                ],
                "lpaths_webdav_raises": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str,float]"
                ]
            }
        },
        "test_has_permission2": {
            "name": "test_has_permission2",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [],
                "lpaths_webdav_raises": []
            }
        },
        "test_set_permission2": {
            "name": "test_set_permission2",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [
                    "Dict"
                ],
                "lpaths_webdav_raises": [
                    "dict"
                ]
            }
        },
        "test_chmod2": {
            "name": "test_chmod2",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [
                    "str",
                    "float"
                ],
                "lpaths_webdav_raises": [
                    "str",
                    "float"
                ]
            }
        },
        "test_symlink_to2": {
            "name": "test_symlink_to2",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [],
                "lpaths_webdav_raises": []
            }
        },
        "test_readlink2": {
            "name": "test_readlink2",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "webdav_filesystem_quiet": [
                    "str",
                    "float"
                ],
                "lpaths_webdav_raises": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "cerulean-master/cerulean/test/__init__.py": {},
    "cerulean-master/docs/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Dict"
                ]
            }
        }
    },
    "cerulean-master/tests/test_cerulean.py": {
        "target_images": {
            "name": "target_images",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cerulean": {
            "name": "test_cerulean",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "target_images": [
                    "bool",
                    "Sequence[int]",
                    "Dict",
                    "int",
                    "None",
                    "Optional[bool]"
                ]
            }
        }
    }
}